; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\ShopBoard.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1OBJECTSTRUCT@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0
__ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1OBJECTSTRUCT@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1OBJECTSTRUCT@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0003b	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00041	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??1OBJECTSTRUCT@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_7ShopBoard@@6B@				; ShopBoard::`vftable'
PUBLIC	??0ShopBoard@@QAE@XZ				; ShopBoard::ShopBoard
PUBLIC	??_R4ShopBoard@@6B@				; ShopBoard::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVShopBoard@@@8				; ShopBoard `RTTI Type Descriptor'
PUBLIC	??_R3ShopBoard@@8				; ShopBoard::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ShopBoard@@8				; ShopBoard::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ShopBoard@@8			; ShopBoard::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EShopBoard@@UAEPAXI@Z:PROC			; ShopBoard::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ShopBoard@@8
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\shopboard.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@ShopBoard@@8 DD FLAT:??_R0?AVShopBoard@@@8 ; ShopBoard::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ShopBoard@@8
rdata$r	ENDS
;	COMDAT ??_R2ShopBoard@@8
rdata$r	SEGMENT
??_R2ShopBoard@@8 DD FLAT:??_R1A@?0A@EA@ShopBoard@@8	; ShopBoard::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ShopBoard@@8
rdata$r	SEGMENT
??_R3ShopBoard@@8 DD 00H				; ShopBoard::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ShopBoard@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVShopBoard@@@8
_DATA	SEGMENT
??_R0?AVShopBoard@@@8 DD FLAT:??_7type_info@@6B@	; ShopBoard `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVShopBoard@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ShopBoard@@6B@
rdata$r	SEGMENT
??_R4ShopBoard@@6B@ DD 00H				; ShopBoard::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVShopBoard@@@8
	DD	FLAT:??_R3ShopBoard@@8
rdata$r	ENDS
;	COMDAT ??_7ShopBoard@@6B@
CONST	SEGMENT
??_7ShopBoard@@6B@ DD FLAT:??_R4ShopBoard@@6B@		; ShopBoard::`vftable'
	DD	FLAT:??_EShopBoard@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0ShopBoard@@QAE@XZ
_TEXT	SEGMENT
??0ShopBoard@@QAE@XZ PROC				; ShopBoard::ShopBoard, COMDAT
; _this$ = ecx

; 9    : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ShopBoard@@6B@

; 10   : 
; 11   : }

  00008	c3		 ret	 0
??0ShopBoard@@QAE@XZ ENDP				; ShopBoard::ShopBoard
_TEXT	ENDS
PUBLIC	??1ShopBoard@@UAE@XZ				; ShopBoard::~ShopBoard
; Function compile flags: /Ogtp
;	COMDAT ??1ShopBoard@@UAE@XZ
_TEXT	SEGMENT
??1ShopBoard@@UAE@XZ PROC				; ShopBoard::~ShopBoard, COMDAT
; _this$ = ecx

; 15   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ShopBoard@@6B@

; 16   : 
; 17   : }

  00006	c3		 ret	 0
??1ShopBoard@@UAE@XZ ENDP				; ShopBoard::~ShopBoard
_TEXT	ENDS
PUBLIC	_UserIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GCAnsItemSearch@ShopBoard@@QAEXHG@Z		; ShopBoard::GCAnsItemSearch
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GCAnsItemSearch@ShopBoard@@QAEXHG@Z
_TEXT	SEGMENT
_lpInfo$ = -60092					; size = 50
tv368 = -60040						; size = 4
_UserIndex$GSCopy$ = -60036				; size = 4
tv370 = -60032						; size = 4
_i$166791 = -60028					; size = 4
_lpAnswer$ = -60024					; size = 10
_Count$ = -60012					; size = 4
_Offset$ = -60008					; size = 4
_Temp$ = -60004						; size = 60000
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_ItemID$ = 12						; size = 2
?GCAnsItemSearch@ShopBoard@@QAEXHG@Z PROC		; ShopBoard::GCAnsItemSearch, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 bc ea 00 00	 mov	 eax, 60092		; 0000eabcH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 48   : 	{
; 49   : 		if(		gObj[i].m_bPShopOpen == false 
; 50   : 			||	gObj[i].Connected < PLAYER_PLAYING 
; 51   : 			||	UserIndex == i )

  00017	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	68 5f ea 00 00	 push	 59999			; 0000ea5fH
  00022	8d 8d 9d 15 ff
	ff		 lea	 ecx, DWORD PTR _Temp$[ebp+1]
  00028	6a 00		 push	 0
  0002a	51		 push	 ecx
  0002b	89 85 7c 15 ff
	ff		 mov	 DWORD PTR _UserIndex$GSCopy$[ebp], eax
  00031	c6 85 9c 15 ff
	ff 00		 mov	 BYTE PTR _Temp$[ebp], 0
  00038	e8 00 00 00 00	 call	 _memset
  0003d	6a 31		 push	 49			; 00000031H
  0003f	8d 95 45 15 ff
	ff		 lea	 edx, DWORD PTR _lpInfo$[ebp+1]
  00045	6a 00		 push	 0
  00047	52		 push	 edx
  00048	c7 85 98 15 ff
	ff 0a 00 00 00	 mov	 DWORD PTR _Offset$[ebp], 10 ; 0000000aH
  00052	c7 85 94 15 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Count$[ebp], 0
  0005c	c6 85 44 15 ff
	ff 00		 mov	 BYTE PTR _lpInfo$[ebp], 0
  00063	e8 00 00 00 00	 call	 _memset
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006d	ba 04 29 00 00	 mov	 edx, 10500		; 00002904H
  00072	83 c4 18	 add	 esp, 24			; 00000018H
  00075	89 95 84 15 ff
	ff		 mov	 DWORD PTR _i$166791[ebp], edx
  0007b	bb 00 dd 49 06	 mov	 ebx, 105504000		; 0649dd00H
$LL19@GCAnsItemS:
  00080	80 bc 03 5c 12
	00 00 00	 cmp	 BYTE PTR [ebx+eax+4700], 0
  00088	0f 84 7f 01 00
	00		 je	 $LN10@GCAnsItemS
  0008e	83 7c 03 04 03	 cmp	 DWORD PTR [ebx+eax+4], 3
  00093	0f 8c 74 01 00
	00		 jl	 $LN10@GCAnsItemS
  00099	39 95 7c 15 ff
	ff		 cmp	 DWORD PTR _UserIndex$GSCopy$[ebp], edx
  0009f	0f 84 68 01 00
	00		 je	 $LN10@GCAnsItemS

; 52   : 		{
; 53   : 			continue;
; 54   : 		}
; 55   : 		// ----
; 56   : 		if( ItemID != (WORD)-1 )

  000a5	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000aa	66 39 4d 0c	 cmp	 WORD PTR _ItemID$[ebp], cx
  000ae	0f 84 eb 00 00
	00		 je	 $LN6@GCAnsItemS

; 57   : 		{
; 58   : 			for( int ItemPos = MAIN_INVENTORY_SIZE; ItemPos < INVENTORY_SIZE - 1; ItemPos++ )

  000b4	8b 95 98 15 ff
	ff		 mov	 edx, DWORD PTR _Offset$[ebp]
  000ba	8d 8c 15 9c 15
	ff ff		 lea	 ecx, DWORD PTR _Temp$[ebp+edx]
  000c1	be f0 a8 00 00	 mov	 esi, 43248		; 0000a8f0H
  000c6	89 8d 78 15 ff
	ff		 mov	 DWORD PTR tv368[ebp], ecx
  000cc	89 b5 80 15 ff
	ff		 mov	 DWORD PTR tv370[ebp], esi
$LL5@GCAnsItemS:

; 59   : 			{
; 60   : 				if(		gObj[i].Inventory1[ItemPos].IsItem()
; 61   : 					&&	gObj[i].Inventory1[ItemPos].m_Type == ItemID )

  000d2	8b 8c 03 d0 11
	00 00		 mov	 ecx, DWORD PTR [ebx+eax+4560]
  000d9	03 ce		 add	 ecx, esi
  000db	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000e0	85 c0		 test	 eax, eax
  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e7	0f 84 92 00 00
	00		 je	 $LN4@GCAnsItemS
  000ed	8b 94 03 d0 11
	00 00		 mov	 edx, DWORD PTR [ebx+eax+4560]
  000f4	0f bf 4c 32 06	 movsx	 ecx, WORD PTR [edx+esi+6]
  000f9	0f b7 55 0c	 movzx	 edx, WORD PTR _ItemID$[ebp]
  000fd	3b ca		 cmp	 ecx, edx
  000ff	75 7e		 jne	 SHORT $LN4@GCAnsItemS

; 62   : 				{
; 63   : 					lpInfo.UserIndexH = SET_NUMBERH(i);

  00101	8b 8d 84 15 ff
	ff		 mov	 ecx, DWORD PTR _i$166791[ebp]

; 64   : 					lpInfo.UserIndexL = SET_NUMBERL(i);
; 65   : 					memcpy(lpInfo.UserName, gObj[i].Name, MAX_ACCOUNT_LEN);
; 66   : 					memcpy(lpInfo.ShopName, gObj[i].m_szPShopText, 36);
; 67   : 					Count++;

  00107	ff 85 94 15 ff
	ff		 inc	 DWORD PTR _Count$[ebp]

; 68   : 					memcpy(&Temp[Offset], (LPBYTE)&lpInfo, sizeof(SHOPBOARD_GCANS_SHOPINFO));
; 69   : 					Offset += sizeof(SHOPBOARD_GCANS_SHOPINFO);

  0010d	83 85 98 15 ff
	ff 32		 add	 DWORD PTR _Offset$[ebp], 50 ; 00000032H
  00114	8b d1		 mov	 edx, ecx
  00116	88 8d 45 15 ff
	ff		 mov	 BYTE PTR _lpInfo$[ebp+1], cl
  0011c	8b 4c 03 5d	 mov	 ecx, DWORD PTR [ebx+eax+93]
  00120	89 8d 46 15 ff
	ff		 mov	 DWORD PTR _lpInfo$[ebp+2], ecx
  00126	66 8b 4c 03 65	 mov	 cx, WORD PTR [ebx+eax+101]
  0012b	c1 ea 08	 shr	 edx, 8
  0012e	88 95 44 15 ff
	ff		 mov	 BYTE PTR _lpInfo$[ebp], dl
  00134	8b 54 03 61	 mov	 edx, DWORD PTR [ebx+eax+97]
  00138	66 89 8d 4e 15
	ff ff		 mov	 WORD PTR _lpInfo$[ebp+10], cx
  0013f	89 95 4a 15 ff
	ff		 mov	 DWORD PTR _lpInfo$[ebp+6], edx
  00145	8b 95 78 15 ff
	ff		 mov	 edx, DWORD PTR tv368[ebp]
  0014b	8d b4 03 60 12
	00 00		 lea	 esi, DWORD PTR [ebx+eax+4704]
  00152	b9 09 00 00 00	 mov	 ecx, 9
  00157	8d bd 51 15 ff
	ff		 lea	 edi, DWORD PTR _lpInfo$[ebp+13]
  0015d	f3 a5		 rep movsd
  0015f	8b fa		 mov	 edi, edx
  00161	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00166	8d b5 44 15 ff
	ff		 lea	 esi, DWORD PTR _lpInfo$[ebp]
  0016c	f3 a5		 rep movsd
  0016e	83 c2 32	 add	 edx, 50			; 00000032H
  00171	66 a5		 movsw
  00173	8b b5 80 15 ff
	ff		 mov	 esi, DWORD PTR tv370[ebp]
  00179	89 95 78 15 ff
	ff		 mov	 DWORD PTR tv368[ebp], edx
$LN4@GCAnsItemS:

; 57   : 		{
; 58   : 			for( int ItemPos = MAIN_INVENTORY_SIZE; ItemPos < INVENTORY_SIZE - 1; ItemPos++ )

  0017f	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00185	89 b5 80 15 ff
	ff		 mov	 DWORD PTR tv370[ebp], esi
  0018b	81 fe 70 c3 00
	00		 cmp	 esi, 50032		; 0000c370H
  00191	0f 8c 3b ff ff
	ff		 jl	 $LL5@GCAnsItemS

; 70   : 				}
; 71   : 			}
; 72   : 		}
; 73   : 		else

  00197	8b 95 84 15 ff
	ff		 mov	 edx, DWORD PTR _i$166791[ebp]
  0019d	eb 6e		 jmp	 SHORT $LN10@GCAnsItemS
$LN6@GCAnsItemS:

; 74   : 		{
; 75   : 			lpInfo.UserIndexH = SET_NUMBERH(i);

  0019f	8b ca		 mov	 ecx, edx
  001a1	c1 e9 08	 shr	 ecx, 8
  001a4	88 8d 44 15 ff
	ff		 mov	 BYTE PTR _lpInfo$[ebp], cl

; 76   : 			lpInfo.UserIndexL = SET_NUMBERL(i);
; 77   : 			memcpy(lpInfo.UserName, gObj[i].Name, MAX_ACCOUNT_LEN);

  001aa	8b 4c 03 5d	 mov	 ecx, DWORD PTR [ebx+eax+93]
  001ae	89 8d 46 15 ff
	ff		 mov	 DWORD PTR _lpInfo$[ebp+2], ecx
  001b4	8b 4c 03 61	 mov	 ecx, DWORD PTR [ebx+eax+97]

; 78   : 			memcpy(lpInfo.ShopName, gObj[i].m_szPShopText, 36);
; 79   : 			Count++;

  001b8	ff 85 94 15 ff
	ff		 inc	 DWORD PTR _Count$[ebp]
  001be	89 8d 4a 15 ff
	ff		 mov	 DWORD PTR _lpInfo$[ebp+6], ecx
  001c4	66 8b 4c 03 65	 mov	 cx, WORD PTR [ebx+eax+101]
  001c9	66 89 8d 4e 15
	ff ff		 mov	 WORD PTR _lpInfo$[ebp+10], cx
  001d0	88 95 45 15 ff
	ff		 mov	 BYTE PTR _lpInfo$[ebp+1], dl
  001d6	8d b4 03 60 12
	00 00		 lea	 esi, DWORD PTR [ebx+eax+4704]
  001dd	b9 09 00 00 00	 mov	 ecx, 9
  001e2	8d bd 51 15 ff
	ff		 lea	 edi, DWORD PTR _lpInfo$[ebp+13]
  001e8	f3 a5		 rep movsd

; 80   : 			memcpy(&Temp[Offset], (LPBYTE)&lpInfo, sizeof(SHOPBOARD_GCANS_SHOPINFO));

  001ea	8b bd 98 15 ff
	ff		 mov	 edi, DWORD PTR _Offset$[ebp]

; 81   : 			Offset += sizeof(SHOPBOARD_GCANS_SHOPINFO);

  001f0	83 85 98 15 ff
	ff 32		 add	 DWORD PTR _Offset$[ebp], 50 ; 00000032H
  001f7	8d bc 3d 9c 15
	ff ff		 lea	 edi, DWORD PTR _Temp$[ebp+edi]
  001fe	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00203	8d b5 44 15 ff
	ff		 lea	 esi, DWORD PTR _lpInfo$[ebp]
  00209	f3 a5		 rep movsd
  0020b	66 a5		 movsw
$LN10@GCAnsItemS:

; 40   : 	LPOBJ lpUser	= &gObj[UserIndex];
; 41   : 	const int Size	= (sizeof(SHOPBOARD_GCANS_SHOPCOUNT) + sizeof(SHOPBOARD_GCANS_SHOPINFO)) * OBJMAXUSER;
; 42   : 	BYTE Temp[Size]	= { 0 };
; 43   : 	int Offset		= sizeof(SHOPBOARD_GCANS_SHOPCOUNT);
; 44   : 	int Count		= 0;
; 45   : 	SHOPBOARD_GCANS_SHOPINFO lpInfo = { 0 };
; 46   : 	// ----
; 47   : 	for( int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++ )

  0020d	42		 inc	 edx
  0020e	81 c3 40 27 00
	00		 add	 ebx, 10048		; 00002740H
  00214	89 95 84 15 ff
	ff		 mov	 DWORD PTR _i$166791[ebp], edx
  0021a	81 fb 00 2f e3
	06		 cmp	 ebx, 115552000		; 06e32f00H
  00220	0f 8c 5a fe ff
	ff		 jl	 $LL19@GCAnsItemS

; 82   : 		}
; 83   : 	}
; 84   : 	// ----
; 85   : 	SHOPBOARD_GCANS_SHOPCOUNT lpAnswer = { 0 };
; 86   : 	lpAnswer.h.c		= 0xC2;
; 87   : 	lpAnswer.h.headcode = 0xEC;
; 88   : 	lpAnswer.h.subcode	= 0x31;
; 89   : 	lpAnswer.h.sizeH	= SET_NUMBERH(Offset);
; 90   : 	lpAnswer.h.sizeL	= SET_NUMBERL(Offset);
; 91   : 	lpAnswer.Count		= Count;

  00226	8b 8d 94 15 ff
	ff		 mov	 ecx, DWORD PTR _Count$[ebp]
  0022c	33 c0		 xor	 eax, eax
  0022e	89 85 89 15 ff
	ff		 mov	 DWORD PTR _lpAnswer$[ebp+1], eax
  00234	89 85 8d 15 ff
	ff		 mov	 DWORD PTR _lpAnswer$[ebp+5], eax
  0023a	88 85 91 15 ff
	ff		 mov	 BYTE PTR _lpAnswer$[ebp+9], al
  00240	8b 85 98 15 ff
	ff		 mov	 eax, DWORD PTR _Offset$[ebp]
  00246	8b d0		 mov	 edx, eax
  00248	c1 ea 08	 shr	 edx, 8
  0024b	89 8d 8d 15 ff
	ff		 mov	 DWORD PTR _lpAnswer$[ebp+5], ecx

; 92   : 	memcpy(&Temp[0], (LPBYTE)&lpAnswer, sizeof(SHOPBOARD_GCANS_SHOPCOUNT));
; 93   : 	// ----
; 94   : 	DataSend(UserIndex, Temp, Offset);

  00251	50		 push	 eax
  00252	66 c7 85 8b 15
	ff ff ec 31	 mov	 WORD PTR _lpAnswer$[ebp+3], 12780 ; 000031ecH
  0025b	8b 8d 8c 15 ff
	ff		 mov	 ecx, DWORD PTR _lpAnswer$[ebp+4]
  00261	88 95 89 15 ff
	ff		 mov	 BYTE PTR _lpAnswer$[ebp+1], dl
  00267	88 85 8a 15 ff
	ff		 mov	 BYTE PTR _lpAnswer$[ebp+2], al
  0026d	c6 85 88 15 ff
	ff c2		 mov	 BYTE PTR _lpAnswer$[ebp], 194 ; 000000c2H
  00274	8b 95 88 15 ff
	ff		 mov	 edx, DWORD PTR _lpAnswer$[ebp]
  0027a	8d 85 9c 15 ff
	ff		 lea	 eax, DWORD PTR _Temp$[ebp]
  00280	89 8d a0 15 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+4], ecx
  00286	8b 8d 7c 15 ff
	ff		 mov	 ecx, DWORD PTR _UserIndex$GSCopy$[ebp]
  0028c	89 95 9c 15 ff
	ff		 mov	 DWORD PTR _Temp$[ebp], edx
  00292	66 8b 95 90 15
	ff ff		 mov	 dx, WORD PTR _lpAnswer$[ebp+8]
  00299	50		 push	 eax
  0029a	51		 push	 ecx
  0029b	66 89 95 a4 15
	ff ff		 mov	 WORD PTR _Temp$[ebp+8], dx
  002a2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 95   : }

  002a7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ad	5f		 pop	 edi
  002ae	5e		 pop	 esi
  002af	33 cd		 xor	 ecx, ebp
  002b1	5b		 pop	 ebx
  002b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b7	8b e5		 mov	 esp, ebp
  002b9	5d		 pop	 ebp
  002ba	c2 08 00	 ret	 8
?GCAnsItemSearch@ShopBoard@@QAEXHG@Z ENDP		; ShopBoard::GCAnsItemSearch
_TEXT	ENDS
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8a 5d 08	 mov	 bl, BYTE PTR ___flags$[ebp]
  0002e	f6 c3 02	 test	 bl, 2
  00031	74 3b		 je	 SHORT $LN3@vector
  00033	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00036	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  0003b	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003e	50		 push	 eax
  0003f	68 40 27 00 00	 push	 10048			; 00002740H
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0004a	f6 c3 01	 test	 bl, 1
  0004d	74 09		 je	 SHORT $LN2@vector
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00055	83 c4 04	 add	 esp, 4
$LN2@vector:
  00058	8b c7		 mov	 eax, edi
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN3@vector:
  0006e	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  00080	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00092	f6 c3 01	 test	 bl, 1
  00095	74 09		 je	 SHORT $LN1@vector
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009d	83 c4 04	 add	 esp, 4
$LN1@vector:
  000a0	8b c6		 mov	 eax, esi
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_GShopBoard@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GShopBoard@@UAEPAXI@Z PROC				; ShopBoard::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ShopBoard@@UAE@XZ	; ShopBoard::~ShopBoard
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GShopBoard@@UAEPAXI@Z ENDP				; ShopBoard::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CGReqItemSearch@ShopBoard@@QAEXHPAUSHOPBOARD_CGREQ_ITEM@@@Z ; ShopBoard::CGReqItemSearch
; Function compile flags: /Ogtp
;	COMDAT ?CGReqItemSearch@ShopBoard@@QAEXHPAUSHOPBOARD_CGREQ_ITEM@@@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 4
_lpData$ = 12						; size = 4
?CGReqItemSearch@ShopBoard@@QAEXHPAUSHOPBOARD_CGREQ_ITEM@@@Z PROC ; ShopBoard::CGReqItemSearch, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 22   : 	if( !OBJMAX_RANGE(UserIndex) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _UserIndex$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 33		 js	 SHORT $LN3@CGReqItemS
  0000a	33 d2		 xor	 edx, edx
  0000c	3d eb 2c 00 00	 cmp	 eax, 11499		; 00002cebH
  00011	0f 9e c2	 setle	 dl
  00014	85 d2		 test	 edx, edx
  00016	74 25		 je	 SHORT $LN3@CGReqItemS

; 23   : 	{
; 24   : 		return;
; 25   : 	}
; 26   : 	// ----
; 27   : 	LPOBJ lpUser = &gObj[UserIndex];

  00018	8b d0		 mov	 edx, eax
  0001a	69 d2 40 27 00
	00		 imul	 edx, 10048		; 00002740H
  00020	56		 push	 esi

; 28   : 	// ----
; 29   : 	if( lpUser->Connected < PLAYER_PLAYING )

  00021	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00027	83 7c 32 04 03	 cmp	 DWORD PTR [edx+esi+4], 3
  0002c	5e		 pop	 esi
  0002d	7c 0e		 jl	 SHORT $LN3@CGReqItemS

; 30   : 	{
; 31   : 		return;
; 32   : 	}
; 33   : 	// ----
; 34   : 	this->GCAnsItemSearch(UserIndex, lpData->ItemID);

  0002f	8b 55 0c	 mov	 edx, DWORD PTR _lpData$[ebp]
  00032	0f b7 52 08	 movzx	 edx, WORD PTR [edx+8]
  00036	52		 push	 edx
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?GCAnsItemSearch@ShopBoard@@QAEXHG@Z ; ShopBoard::GCAnsItemSearch
$LN3@CGReqItemS:

; 35   : }

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?CGReqItemSearch@ShopBoard@@QAEXHPAUSHOPBOARD_CGREQ_ITEM@@@Z ENDP ; ShopBoard::CGReqItemSearch
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ShopBoard@@YAXXZ
text$yc	SEGMENT
??__Eg_ShopBoard@@YAXXZ PROC				; `dynamic initializer for 'g_ShopBoard'', COMDAT

; 5    : ShopBoard g_ShopBoard;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ShopBoard@@3VShopBoard@@A ; g_ShopBoard
  00005	e8 00 00 00 00	 call	 ??0ShopBoard@@QAE@XZ	; ShopBoard::ShopBoard
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ShopBoard@@YAXXZ ; `dynamic atexit destructor for 'g_ShopBoard''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ShopBoard@@YAXXZ ENDP				; `dynamic initializer for 'g_ShopBoard''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ShopBoard@@YAXXZ
text$yd	SEGMENT
??__Fg_ShopBoard@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ShopBoard'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ShopBoard@@3VShopBoard@@A ; g_ShopBoard
  00005	e9 00 00 00 00	 jmp	 ??1ShopBoard@@UAE@XZ	; ShopBoard::~ShopBoard
??__Fg_ShopBoard@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ShopBoard''
text$yd	ENDS
PUBLIC	?g_ShopBoard@@3VShopBoard@@A			; g_ShopBoard
_BSS	SEGMENT
?g_ShopBoard@@3VShopBoard@@A DD 01H DUP (?)		; g_ShopBoard
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ShopBoard$initializer$ DD FLAT:??__Eg_ShopBoard@@YAXXZ
CRT$XCU	ENDS
END
