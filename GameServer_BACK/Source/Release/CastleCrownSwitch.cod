; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\CastleCrownSwitch.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1OBJECTSTRUCT@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0
__ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1OBJECTSTRUCT@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1OBJECTSTRUCT@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0003b	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00041	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??1OBJECTSTRUCT@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_7CCastleCrownSwitch@@6B@			; CCastleCrownSwitch::`vftable'
PUBLIC	??0CCastleCrownSwitch@@QAE@XZ			; CCastleCrownSwitch::CCastleCrownSwitch
PUBLIC	??_R4CCastleCrownSwitch@@6B@			; CCastleCrownSwitch::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCastleCrownSwitch@@@8			; CCastleCrownSwitch `RTTI Type Descriptor'
PUBLIC	??_R3CCastleCrownSwitch@@8			; CCastleCrownSwitch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCastleCrownSwitch@@8			; CCastleCrownSwitch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCastleCrownSwitch@@8		; CCastleCrownSwitch::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCastleCrownSwitch@@UAEPAXI@Z:PROC		; CCastleCrownSwitch::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCastleCrownSwitch@@8
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlecrownswitch.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCastleCrownSwitch@@8 DD FLAT:??_R0?AVCCastleCrownSwitch@@@8 ; CCastleCrownSwitch::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCastleCrownSwitch@@8
rdata$r	ENDS
;	COMDAT ??_R2CCastleCrownSwitch@@8
rdata$r	SEGMENT
??_R2CCastleCrownSwitch@@8 DD FLAT:??_R1A@?0A@EA@CCastleCrownSwitch@@8 ; CCastleCrownSwitch::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCastleCrownSwitch@@8
rdata$r	SEGMENT
??_R3CCastleCrownSwitch@@8 DD 00H			; CCastleCrownSwitch::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCastleCrownSwitch@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCastleCrownSwitch@@@8
_DATA	SEGMENT
??_R0?AVCCastleCrownSwitch@@@8 DD FLAT:??_7type_info@@6B@ ; CCastleCrownSwitch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCastleCrownSwitch@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCastleCrownSwitch@@6B@
rdata$r	SEGMENT
??_R4CCastleCrownSwitch@@6B@ DD 00H			; CCastleCrownSwitch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCastleCrownSwitch@@@8
	DD	FLAT:??_R3CCastleCrownSwitch@@8
rdata$r	ENDS
;	COMDAT ??_7CCastleCrownSwitch@@6B@
CONST	SEGMENT
??_7CCastleCrownSwitch@@6B@ DD FLAT:??_R4CCastleCrownSwitch@@6B@ ; CCastleCrownSwitch::`vftable'
	DD	FLAT:??_ECCastleCrownSwitch@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CCastleCrownSwitch@@QAE@XZ
_TEXT	SEGMENT
??0CCastleCrownSwitch@@QAE@XZ PROC			; CCastleCrownSwitch::CCastleCrownSwitch, COMDAT
; _this$ = ecx

; 22   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCastleCrownSwitch@@6B@

; 23   : 	return;
; 24   : }

  00008	c3		 ret	 0
??0CCastleCrownSwitch@@QAE@XZ ENDP			; CCastleCrownSwitch::CCastleCrownSwitch
_TEXT	ENDS
PUBLIC	??1CCastleCrownSwitch@@UAE@XZ			; CCastleCrownSwitch::~CCastleCrownSwitch
; Function compile flags: /Ogtp
;	COMDAT ??1CCastleCrownSwitch@@UAE@XZ
_TEXT	SEGMENT
??1CCastleCrownSwitch@@UAE@XZ PROC			; CCastleCrownSwitch::~CCastleCrownSwitch, COMDAT
; _this$ = ecx

; 27   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCastleCrownSwitch@@6B@

; 28   : 	return;
; 29   : }

  00006	c3		 ret	 0
??1CCastleCrownSwitch@@UAE@XZ ENDP			; CCastleCrownSwitch::~CCastleCrownSwitch
_TEXT	ENDS
PUBLIC	??_C@_0FD@POFOJJJE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Push?5Cast@ ; `string'
PUBLIC	?CastleCrownSwitchAct@CCastleCrownSwitch@@QAEXH@Z ; CCastleCrownSwitch::CastleCrownSwitchAct
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?GCAnsCsAccessSwitchState@@YAXHHHE@Z:PROC	; GCAnsCsAccessSwitchState
EXTRN	?NotifyCrownSwitchInfo@CCastleSiege@@QAEXH@Z:PROC ; CCastleSiege::NotifyCrownSwitchInfo
EXTRN	?NotifyCrownState@CCastleSiege@@QAEXE@Z:PROC	; CCastleSiege::NotifyCrownState
EXTRN	?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z:PROC ; CCastleSiege::SetRegCrownAvailable
EXTRN	?GetRegCrownAvailable@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::GetRegCrownAvailable
EXTRN	?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z:PROC ; CCastleSiege::ResetCrownSwitchUserIndex
EXTRN	?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z:PROC ; CCastleSiege::GetCrownSwitchUserIndex
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
;	COMDAT ??_C@_0FD@POFOJJJE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Push?5Cast@
CONST	SEGMENT
??_C@_0FD@POFOJJJE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Push?5Cast@ DB '['
	DB	'CastleSiege] [%s][%s] Push Castle Crown Switch Canceled (GUIL'
	DB	'D:%s) - CS X:%d/Y:%d', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CastleCrownSwitchAct@CCastleCrownSwitch@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CastleCrownSwitchAct@CCastleCrownSwitch@@QAEXH@Z PROC	; CCastleCrownSwitch::CastleCrownSwitchAct, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 33   : 	if ( !gObjIsConnected(iIndex))

  00004	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00007	57		 push	 edi
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	0f 84 a0 02 00
	00		 je	 $LN12@CastleCrow

; 34   : 		return;
; 35   : 
; 36   : 	if ( gObj[iIndex].Type != OBJ_NPC ||
; 37   : 		((gObj[iIndex].Class < 217 )?FALSE:(gObj[iIndex].Class > 219-1 )?FALSE:TRUE)==FALSE )

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  00023	80 7c 07 50 03	 cmp	 BYTE PTR [edi+eax+80], 3
  00028	0f 85 8a 02 00
	00		 jne	 $LN12@CastleCrow
  0002e	0f b7 8c 07 90
	00 00 00	 movzx	 ecx, WORD PTR [edi+eax+144]
  00036	b8 d9 00 00 00	 mov	 eax, 217		; 000000d9H
  0003b	66 3b c8	 cmp	 cx, ax
  0003e	0f 82 74 02 00
	00		 jb	 $LN12@CastleCrow
  00044	ba da 00 00 00	 mov	 edx, 218		; 000000daH
  00049	66 3b d1	 cmp	 dx, cx
  0004c	1b c0		 sbb	 eax, eax
  0004e	40		 inc	 eax
  0004f	0f 84 63 02 00
	00		 je	 $LN12@CastleCrow

; 38   : 		return;
; 39   : 
; 40   : 	if ( !gObjIsConnected(g_CastleSiege.GetCrownSwitchUserIndex(gObj[iIndex].Class)) )

  00055	51		 push	 ecx
  00056	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0005b	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00066	83 c4 04	 add	 esp, 4
  00069	85 c0		 test	 eax, eax
  0006b	75 49		 jne	 SHORT $LN11@CastleCrow

; 41   : 	{
; 42   : 		g_CastleSiege.ResetCrownSwitchUserIndex(gObj[iIndex].Class);

  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00073	0f b7 94 0f 90
	00 00 00	 movzx	 edx, WORD PTR [edi+ecx+144]
  0007b	52		 push	 edx
  0007c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00081	e8 00 00 00 00	 call	 ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex

; 43   : 
; 44   : 		if ( g_CastleSiege.GetRegCrownAvailable() == 1 )

  00086	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0008b	e8 00 00 00 00	 call	 ?GetRegCrownAvailable@CCastleSiege@@QAEHXZ ; CCastleSiege::GetRegCrownAvailable
  00090	83 f8 01	 cmp	 eax, 1
  00093	0f 85 1f 02 00
	00		 jne	 $LN12@CastleCrow

; 45   : 		{
; 46   : 			g_CastleSiege.SetRegCrownAvailable(FALSE);

  00099	6a 00		 push	 0
  0009b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000a0	e8 00 00 00 00	 call	 ?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetRegCrownAvailable

; 47   : 			g_CastleSiege.NotifyCrownState(1);

  000a5	6a 01		 push	 1
  000a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000ac	e8 00 00 00 00	 call	 ?NotifyCrownState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyCrownState
  000b1	5f		 pop	 edi

; 103  : 		}
; 104  : 	}
; 105  : }

  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
$LN11@CastleCrow:

; 48   : 		}
; 49   : 
; 50   : 		return;
; 51   : 	}
; 52   : 	
; 53   : 	LPOBJ lpObj= &gObj[iIndex];

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 54   : 	LPOBJ lpUserObj = &gObj[g_CastleSiege.GetCrownSwitchUserIndex(gObj[iIndex].Class)];

  000bb	0f b7 8c 07 90
	00 00 00	 movzx	 ecx, WORD PTR [edi+eax+144]
  000c3	53		 push	 ebx
  000c4	8d 1c 07	 lea	 ebx, DWORD PTR [edi+eax]
  000c7	56		 push	 esi
  000c8	51		 push	 ecx
  000c9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000ce	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex

; 55   : 	g_CastleSiege.NotifyCrownSwitchInfo(iIndex);

  000d3	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  000d6	8b f0		 mov	 esi, eax
  000d8	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  000de	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e4	52		 push	 edx
  000e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000ea	e8 00 00 00 00	 call	 ?NotifyCrownSwitchInfo@CCastleSiege@@QAEXH@Z ; CCastleSiege::NotifyCrownSwitchInfo

; 56   : 
; 57   : 	if ( lpUserObj->MapNumber == MAP_INDEX_CASTLESIEGE &&
; 58   : 		 lpUserObj->m_btCsJoinSide >= 2 )

  000ef	80 be 23 01 00
	00 1e		 cmp	 BYTE PTR [esi+291], 30	; 0000001eH
  000f6	0f 85 69 01 00
	00		 jne	 $LN9@CastleCrow
  000fc	80 be 5a 20 00
	00 02		 cmp	 BYTE PTR [esi+8282], 2
  00103	0f 82 5c 01 00
	00		 jb	 $LN9@CastleCrow

; 59   : 	{
; 60   : 		if ( abs(lpObj->Y - lpUserObj->Y) <= 3 &&
; 61   : 			 abs(lpObj->X - lpUserObj->X) <= 3 )

  00109	0f b6 8e 21 01
	00 00		 movzx	 ecx, BYTE PTR [esi+289]
  00110	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  00117	2b c1		 sub	 eax, ecx
  00119	99		 cdq
  0011a	33 c2		 xor	 eax, edx
  0011c	2b c2		 sub	 eax, edx
  0011e	83 f8 03	 cmp	 eax, 3
  00121	0f 8f b8 00 00
	00		 jg	 $LN8@CastleCrow
  00127	0f b6 96 20 01
	00 00		 movzx	 edx, BYTE PTR [esi+288]
  0012e	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]
  00135	2b c2		 sub	 eax, edx
  00137	99		 cdq
  00138	33 c2		 xor	 eax, edx
  0013a	2b c2		 sub	 eax, edx
  0013c	83 f8 03	 cmp	 eax, 3
  0013f	0f 8f 9a 00 00
	00		 jg	 $LN8@CastleCrow

; 62   : 		{
; 63   : 			int iCrownIndex1 = g_CastleSiege.GetCrownSwitchUserIndex(217);

  00145	68 d9 00 00 00	 push	 217			; 000000d9H
  0014a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0014f	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex

; 64   : 			int iCrownIndex2 = g_CastleSiege.GetCrownSwitchUserIndex(218);

  00154	68 da 00 00 00	 push	 218			; 000000daH
  00159	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0015e	8b f0		 mov	 esi, eax
  00160	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex

; 65   : 
; 66   : 			if (gObjIsConnected(iCrownIndex1) && gObjIsConnected(iCrownIndex2) )

  00165	56		 push	 esi
  00166	8b f8		 mov	 edi, eax
  00168	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0016d	83 c4 04	 add	 esp, 4
  00170	85 c0		 test	 eax, eax
  00172	0f 84 3e 01 00
	00		 je	 $LN19@CastleCrow
  00178	57		 push	 edi
  00179	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0017e	83 c4 04	 add	 esp, 4
  00181	85 c0		 test	 eax, eax
  00183	0f 84 2d 01 00
	00		 je	 $LN19@CastleCrow

; 67   : 			{
; 68   : 				if ( gObj[iCrownIndex1].m_btCsJoinSide == gObj[iCrownIndex2].m_btCsJoinSide )

  00189	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018e	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  00194	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  0019a	8a 8c 06 5a 20
	00 00		 mov	 cl, BYTE PTR [esi+eax+8282]
  001a1	3a 8c 07 5a 20
	00 00		 cmp	 cl, BYTE PTR [edi+eax+8282]
  001a8	0f 85 08 01 00
	00		 jne	 $LN19@CastleCrow

; 69   : 				{
; 70   : 					if ( g_CastleSiege.GetRegCrownAvailable() == 0 )

  001ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001b3	e8 00 00 00 00	 call	 ?GetRegCrownAvailable@CCastleSiege@@QAEHXZ ; CCastleSiege::GetRegCrownAvailable
  001b8	85 c0		 test	 eax, eax
  001ba	0f 85 f6 00 00
	00		 jne	 $LN19@CastleCrow

; 71   : 					{
; 72   : 						g_CastleSiege.SetRegCrownAvailable(TRUE);

  001c0	6a 01		 push	 1
  001c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001c7	e8 00 00 00 00	 call	 ?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetRegCrownAvailable

; 73   : 						g_CastleSiege.NotifyCrownState(0);

  001cc	6a 00		 push	 0

; 102  : 			g_CastleSiege.NotifyCrownState(1);

  001ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001d3	e8 00 00 00 00	 call	 ?NotifyCrownState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyCrownState
  001d8	5e		 pop	 esi
  001d9	5b		 pop	 ebx
  001da	5f		 pop	 edi

; 103  : 		}
; 104  : 	}
; 105  : }

  001db	5d		 pop	 ebp
  001dc	c2 04 00	 ret	 4
$LN8@CastleCrow:

; 74   : 					}
; 75   : 				}
; 76   : 			}
; 77   : 		}
; 78   : 		else
; 79   : 		{
; 80   : 			GCAnsCsAccessSwitchState(lpUserObj->m_Index, lpObj->m_Index, -1, 0);

  001df	8b 13		 mov	 edx, DWORD PTR [ebx]
  001e1	8b 06		 mov	 eax, DWORD PTR [esi]
  001e3	6a 00		 push	 0
  001e5	6a ff		 push	 -1
  001e7	52		 push	 edx
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 ?GCAnsCsAccessSwitchState@@YAXHHHE@Z ; GCAnsCsAccessSwitchState

; 81   : 			g_CastleSiege.ResetCrownSwitchUserIndex(gObj[iIndex].Class);

  001ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001f4	0f b7 94 0f 90
	00 00 00	 movzx	 edx, WORD PTR [edi+ecx+144]
  001fc	83 c4 10	 add	 esp, 16			; 00000010H
  001ff	52		 push	 edx
  00200	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00205	e8 00 00 00 00	 call	 ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex

; 82   : 
; 83   : 			if ( g_CastleSiege.GetRegCrownAvailable() == 1 )

  0020a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0020f	e8 00 00 00 00	 call	 ?GetRegCrownAvailable@CCastleSiege@@QAEHXZ ; CCastleSiege::GetRegCrownAvailable
  00214	83 f8 01	 cmp	 eax, 1
  00217	75 18		 jne	 SHORT $LN3@CastleCrow

; 84   : 			{
; 85   : 				g_CastleSiege.SetRegCrownAvailable(FALSE);

  00219	6a 00		 push	 0
  0021b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00220	e8 00 00 00 00	 call	 ?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetRegCrownAvailable

; 86   : 				g_CastleSiege.NotifyCrownState(1);

  00225	6a 01		 push	 1
  00227	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0022c	e8 00 00 00 00	 call	 ?NotifyCrownState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyCrownState
$LN3@CastleCrow:

; 87   : 			}
; 88   : 
; 89   : 			LogAddTD("[CastleSiege] [%s][%s] Push Castle Crown Switch Canceled (GUILD:%s) - CS X:%d/Y:%d",
; 90   : 				lpUserObj->AccountID, lpUserObj->Name, lpUserObj->GuildName, lpObj->X, lpObj->Y);

  00231	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  00238	0f b6 8b 20 01
	00 00		 movzx	 ecx, BYTE PTR [ebx+288]
  0023f	50		 push	 eax
  00240	51		 push	 ecx
  00241	8d 96 1c 06 00
	00		 lea	 edx, DWORD PTR [esi+1564]
  00247	52		 push	 edx
  00248	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0024b	50		 push	 eax
  0024c	83 c6 52	 add	 esi, 82			; 00000052H
  0024f	56		 push	 esi
  00250	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@POFOJJJE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Push?5Cast@
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0025b	83 c4 18	 add	 esp, 24			; 00000018H
  0025e	5e		 pop	 esi
  0025f	5b		 pop	 ebx
  00260	5f		 pop	 edi

; 103  : 		}
; 104  : 	}
; 105  : }

  00261	5d		 pop	 ebp
  00262	c2 04 00	 ret	 4
$LN9@CastleCrow:

; 91   : 		}
; 92   : 	}
; 93   : 	else
; 94   : 	{
; 95   : 		GCAnsCsAccessSwitchState(lpUserObj->m_Index, lpObj->m_Index, -1, 0);

  00265	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00267	8b 16		 mov	 edx, DWORD PTR [esi]
  00269	6a 00		 push	 0
  0026b	6a ff		 push	 -1
  0026d	51		 push	 ecx
  0026e	52		 push	 edx
  0026f	e8 00 00 00 00	 call	 ?GCAnsCsAccessSwitchState@@YAXHHHE@Z ; GCAnsCsAccessSwitchState

; 96   : 
; 97   : 		g_CastleSiege.ResetCrownSwitchUserIndex(gObj[iIndex].Class);

  00274	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00279	0f b7 8c 07 90
	00 00 00	 movzx	 ecx, WORD PTR [edi+eax+144]
  00281	83 c4 10	 add	 esp, 16			; 00000010H
  00284	51		 push	 ecx
  00285	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0028a	e8 00 00 00 00	 call	 ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex

; 98   : 
; 99   : 		if ( g_CastleSiege.GetRegCrownAvailable() == 1 )

  0028f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00294	e8 00 00 00 00	 call	 ?GetRegCrownAvailable@CCastleSiege@@QAEHXZ ; CCastleSiege::GetRegCrownAvailable
  00299	83 f8 01	 cmp	 eax, 1
  0029c	75 18		 jne	 SHORT $LN19@CastleCrow

; 100  : 		{
; 101  : 			g_CastleSiege.SetRegCrownAvailable(FALSE);

  0029e	6a 00		 push	 0
  002a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002a5	e8 00 00 00 00	 call	 ?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetRegCrownAvailable

; 102  : 			g_CastleSiege.NotifyCrownState(1);

  002aa	6a 01		 push	 1
  002ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002b1	e8 00 00 00 00	 call	 ?NotifyCrownState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyCrownState
$LN19@CastleCrow:
  002b6	5e		 pop	 esi
  002b7	5b		 pop	 ebx
$LN12@CastleCrow:
  002b8	5f		 pop	 edi

; 103  : 		}
; 104  : 	}
; 105  : }

  002b9	5d		 pop	 ebp
  002ba	c2 04 00	 ret	 4
?CastleCrownSwitchAct@CCastleCrownSwitch@@QAEXH@Z ENDP	; CCastleCrownSwitch::CastleCrownSwitchAct
_TEXT	ENDS
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8a 5d 08	 mov	 bl, BYTE PTR ___flags$[ebp]
  0002e	f6 c3 02	 test	 bl, 2
  00031	74 3b		 je	 SHORT $LN3@vector
  00033	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00036	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  0003b	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003e	50		 push	 eax
  0003f	68 40 27 00 00	 push	 10048			; 00002740H
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0004a	f6 c3 01	 test	 bl, 1
  0004d	74 09		 je	 SHORT $LN2@vector
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00055	83 c4 04	 add	 esp, 4
$LN2@vector:
  00058	8b c7		 mov	 eax, edi
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN3@vector:
  0006e	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  00080	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00092	f6 c3 01	 test	 bl, 1
  00095	74 09		 je	 SHORT $LN1@vector
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009d	83 c4 04	 add	 esp, 4
$LN1@vector:
  000a0	8b c6		 mov	 eax, esi
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_GCCastleCrownSwitch@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCastleCrownSwitch@@UAEPAXI@Z PROC			; CCastleCrownSwitch::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCastleCrownSwitch@@UAE@XZ ; CCastleCrownSwitch::~CCastleCrownSwitch
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCastleCrownSwitch@@UAEPAXI@Z ENDP			; CCastleCrownSwitch::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CsNPC_CastleCrownSwitch@@YAXXZ
text$yc	SEGMENT
??__Eg_CsNPC_CastleCrownSwitch@@YAXXZ PROC		; `dynamic initializer for 'g_CsNPC_CastleCrownSwitch'', COMDAT

; 16   : CCastleCrownSwitch g_CsNPC_CastleCrownSwitch;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrownSwitch@@3VCCastleCrownSwitch@@A ; g_CsNPC_CastleCrownSwitch
  00005	e8 00 00 00 00	 call	 ??0CCastleCrownSwitch@@QAE@XZ ; CCastleCrownSwitch::CCastleCrownSwitch
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_CastleCrownSwitch@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_CastleCrownSwitch''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CsNPC_CastleCrownSwitch@@YAXXZ ENDP		; `dynamic initializer for 'g_CsNPC_CastleCrownSwitch''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CsNPC_CastleCrownSwitch@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_CastleCrownSwitch@@YAXXZ PROC		; `dynamic atexit destructor for 'g_CsNPC_CastleCrownSwitch'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrownSwitch@@3VCCastleCrownSwitch@@A ; g_CsNPC_CastleCrownSwitch
  00005	e9 00 00 00 00	 jmp	 ??1CCastleCrownSwitch@@UAE@XZ ; CCastleCrownSwitch::~CCastleCrownSwitch
??__Fg_CsNPC_CastleCrownSwitch@@YAXXZ ENDP		; `dynamic atexit destructor for 'g_CsNPC_CastleCrownSwitch''
text$yd	ENDS
PUBLIC	?g_CsNPC_CastleCrownSwitch@@3VCCastleCrownSwitch@@A ; g_CsNPC_CastleCrownSwitch
_BSS	SEGMENT
?g_CsNPC_CastleCrownSwitch@@3VCCastleCrownSwitch@@A DD 01H DUP (?) ; g_CsNPC_CastleCrownSwitch
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CsNPC_CastleCrownSwitch$initializer$ DD FLAT:??__Eg_CsNPC_CastleCrownSwitch@@YAXXZ
CRT$XCU	ENDS
END
