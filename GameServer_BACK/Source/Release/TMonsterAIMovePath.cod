; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\TMonsterAIMovePath.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Reset@TMonsterAIMovePathInfo@@QAEXXZ		; TMonsterAIMovePathInfo::Reset
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\tmonsteraimovepath.h
;	COMDAT ?Reset@TMonsterAIMovePathInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@TMonsterAIMovePathInfo@@QAEXXZ PROC		; TMonsterAIMovePathInfo::Reset, COMDAT
; _this$ = ecx

; 36   : 		this->m_iType = -1;

  00000	83 c8 ff	 or	 eax, -1
  00003	89 01		 mov	 DWORD PTR [ecx], eax

; 37   : 		this->m_iMapNumber = -1;

  00005	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 38   : 		this->m_iPathX = -1;

  00008	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 39   : 		this->m_iPathY = -1;

  0000b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 40   : 	}

  0000e	c3		 ret	 0
?Reset@TMonsterAIMovePathInfo@@QAEXXZ ENDP		; TMonsterAIMovePathInfo::Reset
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5e		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8b d8		 mov	 ebx, eax
  00048	83 c4 04	 add	 esp, 4
  0004b	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3e		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8b d8		 mov	 ebx, eax
  00063	83 c4 04	 add	 esp, 4
  00066	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	53		 push	 ebx
  0006c	e8 00 00 00 00	 call	 _isspace
  00071	83 c4 04	 add	 esp, 4
  00074	85 c0		 test	 eax, eax
  00076	75 a8		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00078	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007b	56		 push	 esi
  0007c	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007f	0f 87 29 01 00
	00		 ja	 $LN6@GetToken
  00085	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN46@GetToken[eax]
  0008c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[eax*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00093	b8 02 00 00 00	 mov	 eax, 2
  00098	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	33 cd		 xor	 ecx, ebp
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000ac	e9 92 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b1	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000b6	e9 88 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000bb	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c0	e9 7e 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000c5	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000ca	e9 74 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000cf	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000d4	e9 6a 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  000df	51		 push	 ecx
  000e0	53		 push	 ebx
  000e1	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000ec	52		 push	 edx
  000ed	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f0	e8 00 00 00 00	 call	 _getc
  000f5	8b d8		 mov	 ebx, eax
  000f7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fa	83 fb ff	 cmp	 ebx, -1
  000fd	74 30		 je	 SHORT $LN12@GetToken
  000ff	90		 npad	 1
$LL13@GetToken:
  00100	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00103	74 12		 je	 SHORT $LN11@GetToken
  00105	53		 push	 ebx
  00106	e8 00 00 00 00	 call	 _isdigit
  0010b	83 c4 04	 add	 esp, 4
  0010e	85 c0		 test	 eax, eax
  00110	75 05		 jne	 SHORT $LN11@GetToken
  00112	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  00115	75 18		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  0011c	88 1e		 mov	 BYTE PTR [esi], bl
  0011e	50		 push	 eax

; 102  : 			p++;

  0011f	46		 inc	 esi
  00120	e8 00 00 00 00	 call	 _getc
  00125	8b d8		 mov	 ebx, eax
  00127	83 c4 04	 add	 esp, 4
  0012a	83 fb ff	 cmp	 ebx, -1
  0012d	75 d1		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  0012f	8d 4d 98	 lea	 ecx, DWORD PTR _TempString$[ebp]
  00132	51		 push	 ecx
  00133	c6 06 00	 mov	 BYTE PTR [esi], 0
  00136	e8 00 00 00 00	 call	 _atof
  0013b	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00141	83 c4 04	 add	 esp, 4
  00144	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  00145	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  0014f	b8 01 00 00 00	 mov	 eax, 1
  00154	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	33 cd		 xor	 ecx, ebp
  0015a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00163	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00169	52		 push	 edx
  0016a	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  0016f	e8 00 00 00 00	 call	 _getc
  00174	83 c4 04	 add	 esp, 4
  00177	83 f8 ff	 cmp	 eax, -1
  0017a	74 23		 je	 SHORT $LN8@GetToken
  0017c	8d 64 24 00	 npad	 4
$LL9@GetToken:
  00180	83 f8 22	 cmp	 eax, 34			; 00000022H
  00183	0f 84 96 00 00
	00		 je	 $LN7@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  00189	88 06		 mov	 BYTE PTR [esi], al
  0018b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00190	50		 push	 eax

; 115  : 			p++;

  00191	46		 inc	 esi
  00192	e8 00 00 00 00	 call	 _getc
  00197	83 c4 04	 add	 esp, 4
  0019a	83 f8 ff	 cmp	 eax, -1
  0019d	75 e1		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  0019f	83 f8 22	 cmp	 eax, 34			; 00000022H
  001a2	74 7b		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001aa	51		 push	 ecx
  001ab	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001ac	eb 69		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001ae	53		 push	 ebx
  001af	e8 00 00 00 00	 call	 _isalpha
  001b4	83 c4 04	 add	 esp, 4
  001b7	85 c0		 test	 eax, eax
  001b9	0f 84 7f 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  001c5	52		 push	 edx
  001c6	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001cc	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d1	e8 00 00 00 00	 call	 _getc
  001d6	8b d8		 mov	 ebx, eax
  001d8	83 c4 04	 add	 esp, 4
  001db	83 fb ff	 cmp	 ebx, -1
  001de	74 2f		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e0	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  001e3	74 12		 je	 SHORT $LN2@GetToken
  001e5	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  001e8	74 0d		 je	 SHORT $LN2@GetToken
  001ea	53		 push	 ebx
  001eb	e8 00 00 00 00	 call	 _isalnum
  001f0	83 c4 04	 add	 esp, 4
  001f3	85 c0		 test	 eax, eax
  001f5	74 18		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  001f7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  001fc	88 1e		 mov	 BYTE PTR [esi], bl
  001fe	50		 push	 eax

; 135  : 				p++;

  001ff	46		 inc	 esi
  00200	e8 00 00 00 00	 call	 _getc
  00205	8b d8		 mov	 ebx, eax
  00207	83 c4 04	 add	 esp, 4
  0020a	83 fb ff	 cmp	 ebx, -1
  0020d	75 d1		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0020f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00215	51		 push	 ecx
  00216	53		 push	 ebx
$LN49@GetToken:
  00217	e8 00 00 00 00	 call	 _ungetc
  0021c	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0021f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00222	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00223	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0022d	33 c0		 xor	 eax, eax
  0022f	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00230	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00233	33 cd		 xor	 ecx, ebp
  00235	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0023e	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5e		 pop	 esi
  00247	33 cd		 xor	 ecx, ebp
  00249	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0024e	5b		 pop	 ebx
  0024f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00254	8b e5		 mov	 esp, ebp
  00256	5d		 pop	 ebp
  00257	c3		 ret	 0
$LN50@GetToken:
  00258	00 00 00 00	 DD	 $LN10@GetToken
  0025c	00 00 00 00	 DD	 $LN19@GetToken
  00260	00 00 00 00	 DD	 $LN17@GetToken
  00264	00 00 00 00	 DD	 $LN14@GetToken
  00268	00 00 00 00	 DD	 $LN18@GetToken
  0026c	00 00 00 00	 DD	 $LN16@GetToken
  00270	00 00 00 00	 DD	 $LN15@GetToken
  00274	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00278	00		 DB	 0
  00279	01		 DB	 1
  0027a	07		 DB	 7
  0027b	07		 DB	 7
  0027c	07		 DB	 7
  0027d	07		 DB	 7
  0027e	07		 DB	 7
  0027f	07		 DB	 7
  00280	07		 DB	 7
  00281	07		 DB	 7
  00282	02		 DB	 2
  00283	03		 DB	 3
  00284	03		 DB	 3
  00285	07		 DB	 7
  00286	03		 DB	 3
  00287	03		 DB	 3
  00288	03		 DB	 3
  00289	03		 DB	 3
  0028a	03		 DB	 3
  0028b	03		 DB	 3
  0028c	03		 DB	 3
  0028d	03		 DB	 3
  0028e	03		 DB	 3
  0028f	03		 DB	 3
  00290	07		 DB	 7
  00291	04		 DB	 4
  00292	07		 DB	 7
  00293	07		 DB	 7
  00294	07		 DB	 7
  00295	07		 DB	 7
  00296	07		 DB	 7
  00297	07		 DB	 7
  00298	07		 DB	 7
  00299	07		 DB	 7
  0029a	07		 DB	 7
  0029b	07		 DB	 7
  0029c	07		 DB	 7
  0029d	07		 DB	 7
  0029e	07		 DB	 7
  0029f	07		 DB	 7
  002a0	07		 DB	 7
  002a1	07		 DB	 7
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	05		 DB	 5
  002d2	07		 DB	 7
  002d3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7TMonsterAIMovePath@@6B@			; TMonsterAIMovePath::`vftable'
PUBLIC	??1TMonsterAIMovePath@@UAE@XZ			; TMonsterAIMovePath::~TMonsterAIMovePath
PUBLIC	??_R4TMonsterAIMovePath@@6B@			; TMonsterAIMovePath::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTMonsterAIMovePath@@@8			; TMonsterAIMovePath `RTTI Type Descriptor'
PUBLIC	??_R3TMonsterAIMovePath@@8			; TMonsterAIMovePath::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TMonsterAIMovePath@@8			; TMonsterAIMovePath::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TMonsterAIMovePath@@8		; TMonsterAIMovePath::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETMonsterAIMovePath@@UAEPAXI@Z:PROC		; TMonsterAIMovePath::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@TMonsterAIMovePath@@8
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\tmonsteraimovepath.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@TMonsterAIMovePath@@8 DD FLAT:??_R0?AVTMonsterAIMovePath@@@8 ; TMonsterAIMovePath::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TMonsterAIMovePath@@8
rdata$r	ENDS
;	COMDAT ??_R2TMonsterAIMovePath@@8
rdata$r	SEGMENT
??_R2TMonsterAIMovePath@@8 DD FLAT:??_R1A@?0A@EA@TMonsterAIMovePath@@8 ; TMonsterAIMovePath::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TMonsterAIMovePath@@8
rdata$r	SEGMENT
??_R3TMonsterAIMovePath@@8 DD 00H			; TMonsterAIMovePath::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TMonsterAIMovePath@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTMonsterAIMovePath@@@8
_DATA	SEGMENT
??_R0?AVTMonsterAIMovePath@@@8 DD FLAT:??_7type_info@@6B@ ; TMonsterAIMovePath `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTMonsterAIMovePath@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TMonsterAIMovePath@@6B@
rdata$r	SEGMENT
??_R4TMonsterAIMovePath@@6B@ DD 00H			; TMonsterAIMovePath::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTMonsterAIMovePath@@@8
	DD	FLAT:??_R3TMonsterAIMovePath@@8
rdata$r	ENDS
;	COMDAT ??_7TMonsterAIMovePath@@6B@
CONST	SEGMENT
??_7TMonsterAIMovePath@@6B@ DD FLAT:??_R4TMonsterAIMovePath@@6B@ ; TMonsterAIMovePath::`vftable'
	DD	FLAT:??_ETMonsterAIMovePath@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1TMonsterAIMovePath@@UAE@XZ
_TEXT	SEGMENT
??1TMonsterAIMovePath@@UAE@XZ PROC			; TMonsterAIMovePath::~TMonsterAIMovePath, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7TMonsterAIMovePath@@6B@

; 26   : 	return;
; 27   : }

  00006	c3		 ret	 0
??1TMonsterAIMovePath@@UAE@XZ ENDP			; TMonsterAIMovePath::~TMonsterAIMovePath
_TEXT	ENDS
PUBLIC	?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ ; TMonsterAIMovePath::DelAllAIMonsterMovePath
; Function compile flags: /Ogtp
;	COMDAT ?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ
_TEXT	SEGMENT
?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ PROC ; TMonsterAIMovePath::DelAllAIMonsterMovePath, COMDAT
; _this$ = ecx

; 125  : {

  00000	56		 push	 esi

; 126  : 	for ( int i=0;i<MAX_MONSTER_AI_MOVE_PATH;i++)

  00001	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00004	be 2c 01 00 00	 mov	 esi, 300		; 0000012cH
  00009	83 ca ff	 or	 edx, -1
  0000c	8d 64 24 00	 npad	 4
$LL3@DelAllAIMo:

; 127  : 	{
; 128  : 		this->m_MovePathInfo[i].Reset();

  00010	89 50 f8	 mov	 DWORD PTR [eax-8], edx
  00013	89 50 fc	 mov	 DWORD PTR [eax-4], edx
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001b	83 c0 10	 add	 eax, 16			; 00000010H
  0001e	4e		 dec	 esi
  0001f	75 ef		 jne	 SHORT $LL3@DelAllAIMo

; 129  : 	}
; 130  : 
; 131  : 	this->m_iMovePathSpotCount = 0;

  00021	33 c0		 xor	 eax, eax
  00023	89 81 c8 12 00
	00		 mov	 DWORD PTR [ecx+4808], eax

; 132  : 	this->m_bDataLoad = FALSE;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002c	5e		 pop	 esi

; 133  : 
; 134  : 	return FALSE;
; 135  : }

  0002d	c3		 ret	 0
?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ ENDP ; TMonsterAIMovePath::DelAllAIMonsterMovePath
_TEXT	ENDS
PUBLIC	??0TMonsterAIMovePathInfo@@QAE@XZ		; TMonsterAIMovePathInfo::TMonsterAIMovePathInfo
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\tmonsteraimovepath.h
;	COMDAT ??0TMonsterAIMovePathInfo@@QAE@XZ
_TEXT	SEGMENT
??0TMonsterAIMovePathInfo@@QAE@XZ PROC			; TMonsterAIMovePathInfo::TMonsterAIMovePathInfo, COMDAT
; _this$ = ecx

; 29   : 	TMonsterAIMovePathInfo()

  00000	8b c1		 mov	 eax, ecx

; 30   : 	{
; 31   : 		this->Reset();

  00002	83 c9 ff	 or	 ecx, -1
  00005	89 08		 mov	 DWORD PTR [eax], ecx
  00007	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 32   : 	}

  00010	c3		 ret	 0
??0TMonsterAIMovePathInfo@@QAE@XZ ENDP			; TMonsterAIMovePathInfo::TMonsterAIMovePathInfo
_TEXT	ENDS
PUBLIC	??0TMonsterAIMovePath@@QAE@XZ			; TMonsterAIMovePath::TMonsterAIMovePath
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\tmonsteraimovepath.cpp
;	COMDAT ??0TMonsterAIMovePath@@QAE@XZ
_TEXT	SEGMENT
??0TMonsterAIMovePath@@QAE@XZ PROC			; TMonsterAIMovePath::TMonsterAIMovePath, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7TMonsterAIMovePath@@6B@
  00007	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000a	be 2b 01 00 00	 mov	 esi, 299		; 0000012bH
  0000f	83 ca ff	 or	 edx, -1
$LL4@TMonsterAI:
  00012	89 10		 mov	 DWORD PTR [eax], edx
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001a	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0001d	83 c0 10	 add	 eax, 16			; 00000010H
  00020	4e		 dec	 esi
  00021	79 ef		 jns	 SHORT $LL4@TMonsterAI

; 19   : 	this->DelAllAIMonsterMovePath();

  00023	e8 00 00 00 00	 call	 ?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ ; TMonsterAIMovePath::DelAllAIMonsterMovePath

; 20   : }

  00028	8b c1		 mov	 eax, ecx
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??0TMonsterAIMovePath@@QAE@XZ ENDP			; TMonsterAIMovePath::TMonsterAIMovePath
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GTMonsterAIMovePath@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTMonsterAIMovePath@@UAEPAXI@Z PROC			; TMonsterAIMovePath::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1TMonsterAIMovePath@@UAE@XZ ; TMonsterAIMovePath::~TMonsterAIMovePath
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GTMonsterAIMovePath@@UAEPAXI@Z ENDP			; TMonsterAIMovePath::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DK@EMCNCDEG@?$FLMonster?5AI?5MovePath?$FN?5?9?5File?5loa@ ; `string'
PUBLIC	??_C@_0DM@HJPPMNFP@?$FLMonster?5AI?5MovePath?$FN?5?9?5Loading?5@ ; `string'
PUBLIC	??_C@_0DB@MNPFCJHE@?$FLMonster?5AI?5MovePath?$FN?5Exceed?5Max@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CL@MAJLAOIC@?$FLMonster?5AI?5MovePath?5?$FN?5?9?5?$CFs?5file@ ; `string'
PUBLIC	??_C@_0CH@NMMPFHPL@?$FLMonster?5AI?5MovePath?$FN?5?9?5Can?8t?5Op@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?LoadData@TMonsterAIMovePath@@QAEHPAD@Z		; TMonsterAIMovePath::LoadData
PUBLIC	??_R0K@8					; unsigned long `RTTI Type Descriptor'
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_R0K@8
_DATA	SEGMENT
??_R0K@8 DD	FLAT:??_7type_info@@6B@			; unsigned long `RTTI Type Descriptor'
	DD	00H
	DB	'.K', 00H
_DATA	ENDS
;	COMDAT ??_C@_0DK@EMCNCDEG@?$FLMonster?5AI?5MovePath?$FN?5?9?5File?5loa@
CONST	SEGMENT
??_C@_0DK@EMCNCDEG@?$FLMonster?5AI?5MovePath?$FN?5?9?5File?5loa@ DB '[Mon'
	DB	'ster AI MovePath] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@HJPPMNFP@?$FLMonster?5AI?5MovePath?$FN?5?9?5Loading?5@
CONST	SEGMENT
??_C@_0DM@HJPPMNFP@?$FLMonster?5AI?5MovePath?$FN?5?9?5Loading?5@ DB '[Mon'
	DB	'ster AI MovePath] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MNPFCJHE@?$FLMonster?5AI?5MovePath?$FN?5Exceed?5Max@
CONST	SEGMENT
??_C@_0DB@MNPFCJHE@?$FLMonster?5AI?5MovePath?$FN?5Exceed?5Max@ DB '[Monst'
	DB	'er AI MovePath] Exceed Max Move Path-Spot ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MAJLAOIC@?$FLMonster?5AI?5MovePath?5?$FN?5?9?5?$CFs?5file@
CONST	SEGMENT
??_C@_0CL@MAJLAOIC@?$FLMonster?5AI?5MovePath?5?$FN?5?9?5?$CFs?5file@ DB '['
	DB	'Monster AI MovePath ] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NMMPFHPL@?$FLMonster?5AI?5MovePath?$FN?5?9?5Can?8t?5Op@
CONST	SEGMENT
??_C@_0CH@NMMPFHPL@?$FLMonster?5AI?5MovePath?$FN?5?9?5Can?8t?5Op@ DB '[Mo'
	DB	'nster AI MovePath] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z$2 DD 00H
	DD	FLAT:??_R0K@8
	DD	00H
	DD	FLAT:__catch$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z$0
__unwindtable$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z$2
__ehfuncinfo$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadData@TMonsterAIMovePath@@QAEHPAD@Z
_TEXT	SEGMENT
_iX$154587 = -24					; size = 4
_iType$154575 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@TMonsterAIMovePath@@QAEHPAD@Z PROC		; TMonsterAIMovePath::LoadData, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 34   : 	this->m_bDataLoad = FALSE;
; 35   : 
; 36   : 	if ( !lpszFileName || !strcmp(lpszFileName, ""))

  0002d	8b 7d 08	 mov	 edi, DWORD PTR _lpszFileName$[ebp]
  00030	33 db		 xor	 ebx, ebx
  00032	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00035	3b fb		 cmp	 edi, ebx
  00037	0f 84 b0 01 00
	00		 je	 $LN11@LoadData
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00042	8b c7		 mov	 eax, edi
$LL23@LoadData:
  00044	8a 10		 mov	 dl, BYTE PTR [eax]
  00046	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00048	75 1a		 jne	 SHORT $LN24@LoadData
  0004a	84 d2		 test	 dl, dl
  0004c	74 12		 je	 SHORT $LN25@LoadData
  0004e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00051	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00054	75 0e		 jne	 SHORT $LN24@LoadData
  00056	83 c0 02	 add	 eax, 2
  00059	83 c1 02	 add	 ecx, 2
  0005c	84 d2		 test	 dl, dl
  0005e	75 e4		 jne	 SHORT $LL23@LoadData
$LN25@LoadData:
  00060	33 c0		 xor	 eax, eax
  00062	eb 05		 jmp	 SHORT $LN26@LoadData
$LN24@LoadData:
  00064	1b c0		 sbb	 eax, eax
  00066	83 d8 ff	 sbb	 eax, -1
$LN26@LoadData:
  00069	3b c3		 cmp	 eax, ebx
  0006b	0f 84 7c 01 00
	00		 je	 $LN11@LoadData

; 40   : 	}
; 41   : 
; 42   : 	try
; 43   : 	{
; 44   : 		SMDToken Token;
; 45   : 		SMDFile = fopen(lpszFileName, "r");

  00071	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00076	57		 push	 edi
  00077	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0007a	e8 00 00 00 00	 call	 _fopen
  0007f	83 c4 08	 add	 esp, 8
  00082	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 46   : 
; 47   : 		if ( SMDFile == NULL )

  00087	3b c3		 cmp	 eax, ebx
  00089	75 13		 jne	 SHORT $LN9@LoadData

; 48   : 		{
; 49   : 			MsgBox("[Monster AI MovePath] - Can't Open %s ", lpszFileName);

  0008b	57		 push	 edi
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NMMPFHPL@?$FLMonster?5AI?5MovePath?$FN?5?9?5Can?8t?5Op@
  00091	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00096	83 c4 08	 add	 esp, 8

; 50   : 			return FALSE;

  00099	e9 5c 01 00 00	 jmp	 $LN35@LoadData
$LN9@LoadData:

; 51   : 		}
; 52   : 
; 53   : 		this->DelAllAIMonsterMovePath();

  0009e	8b ce		 mov	 ecx, esi
  000a0	e8 00 00 00 00	 call	 ?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ ; TMonsterAIMovePath::DelAllAIMonsterMovePath
$LL8@LoadData:

; 54   : 		int iType = -1;
; 55   : 
; 56   : 		while ( true )
; 57   : 		{
; 58   : 			Token = GetToken();

  000a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 59   : 
; 60   : 			if ( Token == END )

  000aa	83 f8 02	 cmp	 eax, 2
  000ad	75 28		 jne	 SHORT $LN6@LoadData

; 103  : 					}
; 104  : 				}
; 105  : 			}
; 106  : 		}
; 107  : 
; 108  : 		fclose(SMDFile);

  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _fclose

; 109  : 
; 110  : 		LogAddC(2, "[Monster AI MovePath ] - %s file is Loaded", lpszFileName);

  000ba	57		 push	 edi
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@MAJLAOIC@?$FLMonster?5AI?5MovePath?5?$FN?5?9?5?$CFs?5file@
  000c0	6a 02		 push	 2
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000c8	83 c4 10	 add	 esp, 16			; 00000010H

; 111  : 
; 112  : 		this->m_bDataLoad = TRUE;

  000cb	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
  000d2	e9 23 01 00 00	 jmp	 $LN35@LoadData
$LN6@LoadData:

; 61   : 				break;
; 62   : 
; 63   : 			iType = (int)TokenNumber;

  000d7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000dd	e8 00 00 00 00	 call	 __ftol2_sse
  000e2	89 45 ec	 mov	 DWORD PTR _iType$154575[ebp], eax
$LN5@LoadData:

; 64   : 
; 65   : 			while ( true )
; 66   : 			{
; 67   : 				if ( iType == 2 )

  000e5	83 7d ec 02	 cmp	 DWORD PTR _iType$154575[ebp], 2
  000e9	75 fa		 jne	 SHORT $LN5@LoadData

; 68   : 				{
; 69   : 					int iSpotType = -1;
; 70   : 					int iMapNumber = -1;
; 71   : 					int iX = -1;
; 72   : 					int iY = -1;
; 73   : 
; 74   : 					Token = GetToken();

  000eb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 75   : 
; 76   : 					if ( !strcmp("end", TokenString))

  000f0	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000f5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  000fa	8d 9b 00 00 00
	00		 npad	 6
$LL27@LoadData:
  00100	8a 10		 mov	 dl, BYTE PTR [eax]
  00102	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00104	75 1a		 jne	 SHORT $LN28@LoadData
  00106	84 d2		 test	 dl, dl
  00108	74 12		 je	 SHORT $LN29@LoadData
  0010a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0010d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00110	75 0e		 jne	 SHORT $LN28@LoadData
  00112	83 c0 02	 add	 eax, 2
  00115	83 c1 02	 add	 ecx, 2
  00118	84 d2		 test	 dl, dl
  0011a	75 e4		 jne	 SHORT $LL27@LoadData
$LN29@LoadData:
  0011c	33 c0		 xor	 eax, eax
  0011e	eb 05		 jmp	 SHORT $LN30@LoadData
$LN28@LoadData:
  00120	1b c0		 sbb	 eax, eax
  00122	83 d8 ff	 sbb	 eax, -1
$LN30@LoadData:
  00125	85 c0		 test	 eax, eax
  00127	0f 84 a1 00 00
	00		 je	 $LN32@LoadData

; 77   : 						break;
; 78   : 
; 79   : 					iSpotType = (int)TokenNumber;

  0012d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00133	e8 00 00 00 00	 call	 __ftol2_sse
  00138	8b f8		 mov	 edi, eax

; 80   : 
; 81   : 					Token = GetToken();

  0013a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 82   : 					iMapNumber = (int)TokenNumber;

  0013f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00145	e8 00 00 00 00	 call	 __ftol2_sse
  0014a	8b d8		 mov	 ebx, eax

; 83   : 
; 84   : 					Token = GetToken();

  0014c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 					iX = (int)TokenNumber;

  00151	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00157	e8 00 00 00 00	 call	 __ftol2_sse
  0015c	89 45 e8	 mov	 DWORD PTR _iX$154587[ebp], eax

; 86   : 
; 87   : 					Token = GetToken();

  0015f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 88   : 					iY = (int)TokenNumber;

  00164	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0016a	e8 00 00 00 00	 call	 __ftol2_sse

; 89   : 
; 90   : 					this->m_MovePathInfo[this->m_iMovePathSpotCount].m_iType = iSpotType;

  0016f	8b 8e c8 12 00
	00		 mov	 ecx, DWORD PTR [esi+4808]
  00175	03 c9		 add	 ecx, ecx
  00177	89 7c ce 08	 mov	 DWORD PTR [esi+ecx*8+8], edi

; 91   : 					this->m_MovePathInfo[this->m_iMovePathSpotCount].m_iMapNumber = iMapNumber;

  0017b	8b 96 c8 12 00
	00		 mov	 edx, DWORD PTR [esi+4808]
  00181	03 d2		 add	 edx, edx
  00183	89 5c d6 0c	 mov	 DWORD PTR [esi+edx*8+12], ebx

; 92   : 					this->m_MovePathInfo[this->m_iMovePathSpotCount].m_iPathX = iX;

  00187	8b 8e c8 12 00
	00		 mov	 ecx, DWORD PTR [esi+4808]
  0018d	8b 55 e8	 mov	 edx, DWORD PTR _iX$154587[ebp]
  00190	41		 inc	 ecx
  00191	03 c9		 add	 ecx, ecx
  00193	89 14 ce	 mov	 DWORD PTR [esi+ecx*8], edx

; 93   : 					this->m_MovePathInfo[this->m_iMovePathSpotCount].m_iPathY = iY;

  00196	8b 8e c8 12 00
	00		 mov	 ecx, DWORD PTR [esi+4808]
  0019c	03 c9		 add	 ecx, ecx
  0019e	89 44 ce 14	 mov	 DWORD PTR [esi+ecx*8+20], eax

; 94   : 
; 95   : 					this->m_iMovePathSpotCount++;

  001a2	ff 86 c8 12 00
	00		 inc	 DWORD PTR [esi+4808]

; 96   : 
; 97   : 					if ( this->m_iMovePathSpotCount > MAX_MONSTER_AI_MOVE_PATH )

  001a8	81 be c8 12 00
	00 2c 01 00 00	 cmp	 DWORD PTR [esi+4808], 300 ; 0000012cH
  001b2	0f 8e 2d ff ff
	ff		 jle	 $LN5@LoadData

; 98   : 					{
; 99   : 						MsgBox("[Monster AI MovePath] Exceed Max Move Path-Spot ");

  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@MNPFCJHE@?$FLMonster?5AI?5MovePath?$FN?5Exceed?5Max@
  001bd	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001c2	83 c4 04	 add	 esp, 4

; 100  : 						this->DelAllAIMonsterMovePath();

  001c5	8b ce		 mov	 ecx, esi
  001c7	e8 00 00 00 00	 call	 ?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ ; TMonsterAIMovePath::DelAllAIMonsterMovePath

; 101  : 
; 102  : 						return FALSE;

  001cc	eb 2c		 jmp	 SHORT $LN35@LoadData
$LN32@LoadData:

; 96   : 
; 97   : 					if ( this->m_iMovePathSpotCount > MAX_MONSTER_AI_MOVE_PATH )

  001ce	8b 7d 08	 mov	 edi, DWORD PTR _lpszFileName$[ebp]
  001d1	e9 cf fe ff ff	 jmp	 $LL8@LoadData
__catch$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z$0:

; 113  : 	}
; 114  : 	catch(DWORD)
; 115  : 	{
; 116  : 		MsgBox("[Monster AI MovePath] - Loading Exception Error (%s) File. ", lpszFileName);

  001d6	8b 55 08	 mov	 edx, DWORD PTR _lpszFileName$[ebp]
  001d9	52		 push	 edx
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@HJPPMNFP@?$FLMonster?5AI?5MovePath?$FN?5?9?5Loading?5@
  001df	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001e4	83 c4 08	 add	 esp, 8

; 117  : 	}

  001e7	b8 00 00 00 00	 mov	 eax, $LN35@LoadData
  001ec	c3		 ret	 0
$LN11@LoadData:

; 37   : 	{
; 38   : 		MsgBox("[Monster AI MovePath] - File load error : File Name Error");

  001ed	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@EMCNCDEG@?$FLMonster?5AI?5MovePath?$FN?5?9?5File?5loa@
  001f2	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001f7	83 c4 04	 add	 esp, 4
$LN35@LoadData:

; 39   : 		return FALSE;

  001fa	33 c0		 xor	 eax, eax

; 118  : 
; 119  : 	return FALSE;
; 120  : }

  001fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00206	59		 pop	 ecx
  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	5b		 pop	 ebx
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@TMonsterAIMovePath@@QAEHPAD@Z ENDP		; TMonsterAIMovePath::LoadData
END
