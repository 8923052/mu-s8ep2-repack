; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\CastleCrown.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1OBJECTSTRUCT@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0
__ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1OBJECTSTRUCT@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1OBJECTSTRUCT@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0003b	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00041	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??1OBJECTSTRUCT@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_7CCastleCrown@@6B@				; CCastleCrown::`vftable'
PUBLIC	??0CCastleCrown@@QAE@XZ				; CCastleCrown::CCastleCrown
PUBLIC	??_R4CCastleCrown@@6B@				; CCastleCrown::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCastleCrown@@@8			; CCastleCrown `RTTI Type Descriptor'
PUBLIC	??_R3CCastleCrown@@8				; CCastleCrown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCastleCrown@@8				; CCastleCrown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCastleCrown@@8			; CCastleCrown::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECCastleCrown@@UAEPAXI@Z:PROC		; CCastleCrown::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCastleCrown@@8
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlecrown.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CCastleCrown@@8 DD FLAT:??_R0?AVCCastleCrown@@@8 ; CCastleCrown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_R2CCastleCrown@@8
rdata$r	SEGMENT
??_R2CCastleCrown@@8 DD FLAT:??_R1A@?0A@EA@CCastleCrown@@8 ; CCastleCrown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCastleCrown@@8
rdata$r	SEGMENT
??_R3CCastleCrown@@8 DD 00H				; CCastleCrown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCastleCrown@@@8
_DATA	SEGMENT
??_R0?AVCCastleCrown@@@8 DD FLAT:??_7type_info@@6B@	; CCastleCrown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCastleCrown@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCastleCrown@@6B@
rdata$r	SEGMENT
??_R4CCastleCrown@@6B@ DD 00H				; CCastleCrown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCastleCrown@@@8
	DD	FLAT:??_R3CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_7CCastleCrown@@6B@
CONST	SEGMENT
??_7CCastleCrown@@6B@ DD FLAT:??_R4CCastleCrown@@6B@	; CCastleCrown::`vftable'
	DD	FLAT:??_ECCastleCrown@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CCastleCrown@@QAE@XZ
_TEXT	SEGMENT
??0CCastleCrown@@QAE@XZ PROC				; CCastleCrown::CCastleCrown, COMDAT
; _this$ = ecx

; 20   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCastleCrown@@6B@

; 21   : 	return;
; 22   : }

  00008	c3		 ret	 0
??0CCastleCrown@@QAE@XZ ENDP				; CCastleCrown::CCastleCrown
_TEXT	ENDS
PUBLIC	??1CCastleCrown@@UAE@XZ				; CCastleCrown::~CCastleCrown
; Function compile flags: /Ogtp
;	COMDAT ??1CCastleCrown@@UAE@XZ
_TEXT	SEGMENT
??1CCastleCrown@@UAE@XZ PROC				; CCastleCrown::~CCastleCrown, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCastleCrown@@6B@

; 26   : 	return;
; 27   : }

  00006	c3		 ret	 0
??1CCastleCrown@@UAE@XZ ENDP				; CCastleCrown::~CCastleCrown
_TEXT	ENDS
PUBLIC	??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@ ; `string'
PUBLIC	??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@ ; `string'
PUBLIC	?CastleCrownAct@CCastleCrown@@QAEXH@Z		; CCastleCrown::CastleCrownAct
EXTRN	?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ:PROC ; CCastleSiege::ResetCrownAccessTickCount
EXTRN	?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z:PROC	; CCastleSiege::SetCrownAccessUserY
EXTRN	?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z:PROC	; CCastleSiege::SetCrownAccessUserX
EXTRN	?ResetCrownUserIndex@CCastleSiege@@QAEXXZ:PROC	; CCastleSiege::ResetCrownUserIndex
EXTRN	?GCAnsCsAccessCrownState@@YAXHE@Z:PROC		; GCAnsCsAccessCrownState
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?GetCrownAccessTickCount@CCastleSiege@@QAEHXZ:PROC ; CCastleSiege::GetCrownAccessTickCount
EXTRN	?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z:PROC ; CCastleSiege::GetCrownSwitchUserIndex
EXTRN	?GetCrownAccessUserX@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::GetCrownAccessUserX
EXTRN	?GetCrownAccessUserY@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::GetCrownAccessUserY
EXTRN	?GetCrownUserIndex@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::GetCrownUserIndex
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
;	COMDAT ??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@
CONST	SEGMENT
??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@ DB '['
	DB	'CastleSiege] [%s][%s] Register Castle Crown Canceled (GUILD:%'
	DB	's)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@
CONST	SEGMENT
??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@ DB '[Cas'
	DB	'tleSiege] [Reg. Accumulating] Accumulated Crown AccessTime : '
	DB	'acc(%d) + %d [%s](%s)(%s)', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CastleCrownAct@CCastleCrown@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CastleCrownAct@CCastleCrown@@QAEXH@Z PROC		; CCastleCrown::CastleCrownAct, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 32   : 	if ( !gObjIsConnected(iIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	0f 84 d5 01 00
	00		 je	 $LN10@CastleCrow

; 33   : 		return;
; 34   : 
; 35   : 	if ( gObj[iIndex].Type != OBJ_NPC ||
; 36   : 		 gObj[iIndex].Class != 216 )

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  00023	80 7c 30 50 03	 cmp	 BYTE PTR [eax+esi+80], 3
  00028	0f 85 bf 01 00
	00		 jne	 $LN10@CastleCrow
  0002e	b9 d8 00 00 00	 mov	 ecx, 216		; 000000d8H
  00033	66 39 8c 30 90
	00 00 00	 cmp	 WORD PTR [eax+esi+144], cx
  0003b	0f 85 ac 01 00
	00		 jne	 $LN10@CastleCrow

; 37   : 		 return;
; 38   : 
; 39   : 	if ( !gObjIsConnected(g_CastleSiege.GetCrownUserIndex()) )

  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00046	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00051	83 c4 04	 add	 esp, 4

; 40   : 	{
; 41   : 		g_CastleSiege.ResetCrownUserIndex();

  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00059	85 c0		 test	 eax, eax

; 42   : 		g_CastleSiege.SetCrownAccessUserX(0);
; 43   : 		g_CastleSiege.SetCrownAccessUserY(0);
; 44   : 		g_CastleSiege.ResetCrownAccessTickCount();
; 45   : 
; 46   : 		return;

  0005b	0f 84 3d 02 00
	00		 je	 $LN16@CastleCrow

; 47   : 	}
; 48   : 
; 49   : 	LPOBJ lpObj = &gObj[iIndex];
; 50   : 	LPOBJ lpUserObj = &gObj[g_CastleSiege.GetCrownUserIndex()];

  00061	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  00066	8b f0		 mov	 esi, eax
  00068	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  0006e	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 51   : 
; 52   : 	if ( lpUserObj->MapNumber == MAP_INDEX_CASTLESIEGE &&
; 53   : 		 lpUserObj->m_btCsJoinSide >= 2 &&
; 54   : 		 lpUserObj->m_bCsGuildInvolved == 1 )

  00074	80 be 23 01 00
	00 1e		 cmp	 BYTE PTR [esi+291], 30	; 0000001eH
  0007b	0f 85 49 02 00
	00		 jne	 $LN8@CastleCrow
  00081	80 be 5a 20 00
	00 02		 cmp	 BYTE PTR [esi+8282], 2
  00088	0f 82 3c 02 00
	00		 jb	 $LN8@CastleCrow
  0008e	80 be 5b 20 00
	00 01		 cmp	 BYTE PTR [esi+8283], 1
  00095	0f 85 2f 02 00
	00		 jne	 $LN8@CastleCrow

; 55   : 	{
; 56   : 		if ( lpUserObj->Y == g_CastleSiege.GetCrownAccessUserY() &&
; 57   : 			 lpUserObj->X == g_CastleSiege.GetCrownAccessUserX() )

  0009b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000a0	e8 00 00 00 00	 call	 ?GetCrownAccessUserY@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownAccessUserY
  000a5	0f b6 96 21 01
	00 00		 movzx	 edx, BYTE PTR [esi+289]
  000ac	3b d0		 cmp	 edx, eax
  000ae	0f 85 d8 01 00
	00		 jne	 $LN7@CastleCrow
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000b9	e8 00 00 00 00	 call	 ?GetCrownAccessUserX@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownAccessUserX
  000be	0f b6 8e 20 01
	00 00		 movzx	 ecx, BYTE PTR [esi+288]
  000c5	3b c8		 cmp	 ecx, eax
  000c7	0f 85 bf 01 00
	00		 jne	 $LN7@CastleCrow

; 58   : 		{
; 59   : 			if ( gObjIsConnected(g_CastleSiege.GetCrownUserIndex()) &&
; 60   : 				 gObjIsConnected(g_CastleSiege.GetCrownSwitchUserIndex(217)) &&
; 61   : 				 gObjIsConnected(g_CastleSiege.GetCrownSwitchUserIndex(218)) )

  000cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000d2	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000dd	83 c4 04	 add	 esp, 4
  000e0	85 c0		 test	 eax, eax
  000e2	0f 84 66 01 00
	00		 je	 $LN6@CastleCrow
  000e8	68 d9 00 00 00	 push	 217			; 000000d9H
  000ed	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000f2	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000fd	83 c4 04	 add	 esp, 4
  00100	85 c0		 test	 eax, eax
  00102	0f 84 46 01 00
	00		 je	 $LN6@CastleCrow
  00108	68 da 00 00 00	 push	 218			; 000000daH
  0010d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00112	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0011d	83 c4 04	 add	 esp, 4
  00120	85 c0		 test	 eax, eax
  00122	0f 84 26 01 00
	00		 je	 $LN6@CastleCrow

; 62   : 			{
; 63   : 				if ( gObj[g_CastleSiege.GetCrownUserIndex()].m_btCsJoinSide == gObj[g_CastleSiege.GetCrownSwitchUserIndex(217)].m_btCsJoinSide &&
; 64   : 					 gObj[g_CastleSiege.GetCrownUserIndex()].m_btCsJoinSide == gObj[g_CastleSiege.GetCrownSwitchUserIndex(218)].m_btCsJoinSide )

  00128	57		 push	 edi
  00129	68 d9 00 00 00	 push	 217			; 000000d9H
  0012e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00133	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  00138	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  0013e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00144	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00149	8d bc 10 5a 20
	00 00		 lea	 edi, DWORD PTR [eax+edx+8282]
  00150	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  00155	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  0015b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00161	8a 94 08 5a 20
	00 00		 mov	 dl, BYTE PTR [eax+ecx+8282]
  00168	3a 17		 cmp	 dl, BYTE PTR [edi]
  0016a	0f 85 82 00 00
	00		 jne	 $LN5@CastleCrow
  00170	68 da 00 00 00	 push	 218			; 000000daH
  00175	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0017a	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  0017f	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  00185	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018b	8d bc 08 5a 20
	00 00		 lea	 edi, DWORD PTR [eax+ecx+8282]
  00192	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00197	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  0019c	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  001a2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a8	8a 84 10 5a 20
	00 00		 mov	 al, BYTE PTR [eax+edx+8282]
  001af	3a 07		 cmp	 al, BYTE PTR [edi]
  001b1	75 3f		 jne	 SHORT $LN5@CastleCrow

; 65   : 				{
; 66   : 					DWORD dwTime = GetTickCount() - g_CastleSiege.GetCrownAccessTickCount();

  001b3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001b8	e8 00 00 00 00	 call	 ?GetCrownAccessTickCount@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownAccessTickCount
  001bd	8b f8		 mov	 edi, eax
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 67   : 		
; 68   : 					LogAddTD("[CastleSiege] [Reg. Accumulating] Accumulated Crown AccessTime : acc(%d) + %d [%s](%s)(%s)",
; 69   : 						lpUserObj->m_iAccumulatedCrownAccessTime, dwTime,
; 70   : 						lpUserObj->GuildName, lpUserObj->AccountID, lpUserObj->Name);

  001c5	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  001c8	51		 push	 ecx
  001c9	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  001cc	52		 push	 edx
  001cd	8b 96 74 20 00
	00		 mov	 edx, DWORD PTR [esi+8308]
  001d3	8d 8e 1c 06 00
	00		 lea	 ecx, DWORD PTR [esi+1564]
  001d9	51		 push	 ecx
  001da	2b c7		 sub	 eax, edi
  001dc	50		 push	 eax
  001dd	52		 push	 edx
  001de	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001e9	83 c4 18	 add	 esp, 24			; 00000018H
  001ec	5f		 pop	 edi
$LN10@CastleCrow:
  001ed	5e		 pop	 esi

; 110  : 	}
; 111  : }

  001ee	5d		 pop	 ebp
  001ef	c2 04 00	 ret	 4
$LN5@CastleCrow:

; 71   : 
; 72   : 				}
; 73   : 				else
; 74   : 				{
; 75   : 					GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);

  001f2	8b 06		 mov	 eax, DWORD PTR [esi]
  001f4	6a 02		 push	 2
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  001fc	83 c4 08	 add	 esp, 8

; 76   : 					g_CastleSiege.ResetCrownUserIndex();

  001ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00204	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 77   : 					g_CastleSiege.SetCrownAccessUserX(0);

  00209	6a 00		 push	 0
  0020b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00210	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 78   : 					g_CastleSiege.SetCrownAccessUserY(0);

  00215	6a 00		 push	 0
  00217	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0021c	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 79   : 					g_CastleSiege.ResetCrownAccessTickCount();

  00221	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00226	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount

; 80   : 
; 81   : 					LogAddTD("[CastleSiege] [%s][%s] Register Castle Crown Canceled (GUILD:%s)",
; 82   : 						lpUserObj->AccountID, lpUserObj->Name, lpUserObj->GuildName);

  0022b	8d 8e 1c 06 00
	00		 lea	 ecx, DWORD PTR [esi+1564]
  00231	51		 push	 ecx
  00232	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  00235	52		 push	 edx
  00236	83 c6 52	 add	 esi, 82			; 00000052H
  00239	56		 push	 esi
  0023a	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00245	83 c4 10	 add	 esp, 16			; 00000010H
  00248	5f		 pop	 edi
  00249	5e		 pop	 esi

; 110  : 	}
; 111  : }

  0024a	5d		 pop	 ebp
  0024b	c2 04 00	 ret	 4
$LN6@CastleCrow:

; 83   : 				}
; 84   : 			}
; 85   : 			else
; 86   : 			{
; 87   : 				GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);

  0024e	8b 06		 mov	 eax, DWORD PTR [esi]
  00250	6a 02		 push	 2
  00252	50		 push	 eax
  00253	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  00258	83 c4 08	 add	 esp, 8

; 88   : 				g_CastleSiege.ResetCrownUserIndex();

  0025b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00260	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 89   : 				g_CastleSiege.SetCrownAccessUserX(0);

  00265	6a 00		 push	 0
  00267	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0026c	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 90   : 				g_CastleSiege.SetCrownAccessUserY(0);

  00271	6a 00		 push	 0
  00273	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00278	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 91   : 				g_CastleSiege.ResetCrownAccessTickCount();

  0027d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00282	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount
  00287	5e		 pop	 esi

; 110  : 	}
; 111  : }

  00288	5d		 pop	 ebp
  00289	c2 04 00	 ret	 4
$LN7@CastleCrow:

; 92   : 			}
; 93   : 		}
; 94   : 		else
; 95   : 		{
; 96   : 			GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);

  0028c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0028e	6a 02		 push	 2
  00290	51		 push	 ecx
  00291	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  00296	83 c4 08	 add	 esp, 8

; 97   : 			g_CastleSiege.ResetCrownUserIndex();

  00299	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
$LN16@CastleCrow:
  0029e	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 98   : 			g_CastleSiege.SetCrownAccessUserX(0);

  002a3	6a 00		 push	 0
  002a5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002aa	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 99   : 			g_CastleSiege.SetCrownAccessUserY(0);

  002af	6a 00		 push	 0
  002b1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002b6	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 100  : 			g_CastleSiege.ResetCrownAccessTickCount();

  002bb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002c0	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount
  002c5	5e		 pop	 esi

; 110  : 	}
; 111  : }

  002c6	5d		 pop	 ebp
  002c7	c2 04 00	 ret	 4
$LN8@CastleCrow:

; 101  : 		}
; 102  : 	}
; 103  : 	else
; 104  : 	{
; 105  : 		GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);

  002ca	8b 16		 mov	 edx, DWORD PTR [esi]
  002cc	6a 02		 push	 2
  002ce	52		 push	 edx
  002cf	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  002d4	83 c4 08	 add	 esp, 8

; 106  : 		g_CastleSiege.ResetCrownUserIndex();

  002d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002dc	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 107  : 		g_CastleSiege.SetCrownAccessUserX(0);

  002e1	6a 00		 push	 0
  002e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002e8	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 108  : 		g_CastleSiege.SetCrownAccessUserY(0);

  002ed	6a 00		 push	 0
  002ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002f4	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 109  : 		g_CastleSiege.ResetCrownAccessTickCount();

  002f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  002fe	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount
  00303	5e		 pop	 esi

; 110  : 	}
; 111  : }

  00304	5d		 pop	 ebp
  00305	c2 04 00	 ret	 4
?CastleCrownAct@CCastleCrown@@QAEXH@Z ENDP		; CCastleCrown::CastleCrownAct
_TEXT	ENDS
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8a 5d 08	 mov	 bl, BYTE PTR ___flags$[ebp]
  0002e	f6 c3 02	 test	 bl, 2
  00031	74 3b		 je	 SHORT $LN3@vector
  00033	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00036	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  0003b	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003e	50		 push	 eax
  0003f	68 40 27 00 00	 push	 10048			; 00002740H
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0004a	f6 c3 01	 test	 bl, 1
  0004d	74 09		 je	 SHORT $LN2@vector
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00055	83 c4 04	 add	 esp, 4
$LN2@vector:
  00058	8b c7		 mov	 eax, edi
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN3@vector:
  0006e	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  00080	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00092	f6 c3 01	 test	 bl, 1
  00095	74 09		 je	 SHORT $LN1@vector
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009d	83 c4 04	 add	 esp, 4
$LN1@vector:
  000a0	8b c6		 mov	 eax, esi
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_GCCastleCrown@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCastleCrown@@UAEPAXI@Z PROC			; CCastleCrown::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCastleCrown@@UAE@XZ	; CCastleCrown::~CCastleCrown
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCastleCrown@@UAEPAXI@Z ENDP			; CCastleCrown::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CsNPC_CastleCrown@@YAXXZ
text$yc	SEGMENT
??__Eg_CsNPC_CastleCrown@@YAXXZ PROC			; `dynamic initializer for 'g_CsNPC_CastleCrown'', COMDAT

; 14   : CCastleCrown g_CsNPC_CastleCrown;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrown@@3VCCastleCrown@@A ; g_CsNPC_CastleCrown
  00005	e8 00 00 00 00	 call	 ??0CCastleCrown@@QAE@XZ	; CCastleCrown::CCastleCrown
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_CastleCrown@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_CastleCrown''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CsNPC_CastleCrown@@YAXXZ ENDP			; `dynamic initializer for 'g_CsNPC_CastleCrown''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CsNPC_CastleCrown@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_CastleCrown@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CsNPC_CastleCrown'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrown@@3VCCastleCrown@@A ; g_CsNPC_CastleCrown
  00005	e9 00 00 00 00	 jmp	 ??1CCastleCrown@@UAE@XZ	; CCastleCrown::~CCastleCrown
??__Fg_CsNPC_CastleCrown@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CsNPC_CastleCrown''
text$yd	ENDS
PUBLIC	?g_CsNPC_CastleCrown@@3VCCastleCrown@@A		; g_CsNPC_CastleCrown
_BSS	SEGMENT
?g_CsNPC_CastleCrown@@3VCCastleCrown@@A DD 01H DUP (?)	; g_CsNPC_CastleCrown
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CsNPC_CastleCrown$initializer$ DD FLAT:??__Eg_CsNPC_CastleCrown@@YAXXZ
CRT$XCU	ENDS
END
