; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\ChaosBox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB	; CryptoPP::FixedBlockSize<8>::BLOCKSIZE
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::IV_LENGTH
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::IV_LENGTH
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::IV_LENGTH
_DATA	SEGMENT
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	00H
	DD	0190H
	DD	00H
	DD	0190H
_IT_TicketRate DD 046H
	DD	046H
	DD	046H
	DD	046H
	DD	046H
	DD	046H
_IT_TicketZen DD 02dc6c0H
	DD	04c4b40H
	DD	06acfc0H
	DD	0895440H
	DD	0a7d8c0H
	DD	0c65d40H
_IT_REWARD_A DD	0493e0H
	DD	053020H
	DD	05cc60H
	DD	0668a0H
	DD	0704e0H
	DD	07a120H
_IT_REWARD_B DD	0c350H
	DD	0ea60H
	DD	011170H
	DD	013880H
	DD	015f90H
	DD	0186a0H
_IT_REWARD_C DD	0258H
	DD	04b0H
	DD	0708H
	DD	0960H
	DD	0bb8H
	DD	0e10H
_IT_REWARD_D DD	04b0H
	DD	0960H
	DD	0e10H
	DD	012c0H
	DD	01770H
	DD	01c20H
_IT_REWARD_E DD	0aH
	DD	014H
	DD	01eH
	DD	028H
	DD	032H
	DD	03cH
_DATA	ENDS
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<24,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<24,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<16,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<16,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<8,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<8,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB
CONST	SEGMENT
?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB DD 08H	; CryptoPP::FixedBlockSize<8>::BLOCKSIZE
CONST	ENDS
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1OBJECTSTRUCT@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0
__ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1OBJECTSTRUCT@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1OBJECTSTRUCT@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0003b	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00041	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??1OBJECTSTRUCT@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CChaosBox@@6B@				; CChaosBox::`vftable'
PUBLIC	??0CChaosBox@@QAE@XZ				; CChaosBox::CChaosBox
PUBLIC	??_R4CChaosBox@@6B@				; CChaosBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCChaosBox@@@8				; CChaosBox `RTTI Type Descriptor'
PUBLIC	??_R3CChaosBox@@8				; CChaosBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CChaosBox@@8				; CChaosBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CChaosBox@@8			; CChaosBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECChaosBox@@UAEPAXI@Z:PROC			; CChaosBox::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CChaosBox@@8
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\chaosbox.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CChaosBox@@8 DD FLAT:??_R0?AVCChaosBox@@@8 ; CChaosBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CChaosBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CChaosBox@@8
rdata$r	SEGMENT
??_R2CChaosBox@@8 DD FLAT:??_R1A@?0A@EA@CChaosBox@@8	; CChaosBox::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CChaosBox@@8
rdata$r	SEGMENT
??_R3CChaosBox@@8 DD 00H				; CChaosBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CChaosBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCChaosBox@@@8
_DATA	SEGMENT
??_R0?AVCChaosBox@@@8 DD FLAT:??_7type_info@@6B@	; CChaosBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCChaosBox@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CChaosBox@@6B@
rdata$r	SEGMENT
??_R4CChaosBox@@6B@ DD 00H				; CChaosBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCChaosBox@@@8
	DD	FLAT:??_R3CChaosBox@@8
rdata$r	ENDS
;	COMDAT ??_7CChaosBox@@6B@
CONST	SEGMENT
??_7CChaosBox@@6B@ DD FLAT:??_R4CChaosBox@@6B@		; CChaosBox::`vftable'
	DD	FLAT:??_ECChaosBox@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CChaosBox@@QAE@XZ
_TEXT	SEGMENT
??0CChaosBox@@QAE@XZ PROC				; CChaosBox::CChaosBox, COMDAT
; _this$ = ecx

; 29   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CChaosBox@@6B@

; 30   : 	iChaosJewel = ITEMGET(12,15);

  00008	c7 40 04 0f 18
	00 00		 mov	 DWORD PTR [eax+4], 6159	; 0000180fH

; 31   : 	iBlessJewel = ITEMGET(14,13);

  0000f	c7 40 08 0d 1c
	00 00		 mov	 DWORD PTR [eax+8], 7181	; 00001c0dH

; 32   : 	iSoulJewel = ITEMGET(14,14);

  00016	c7 40 0c 0e 1c
	00 00		 mov	 DWORD PTR [eax+12], 7182 ; 00001c0eH

; 33   : 	iCreationJewel = ITEMGET(14,22);

  0001d	c7 40 10 16 1c
	00 00		 mov	 DWORD PTR [eax+16], 7190 ; 00001c16H

; 34   : 	iBlessPack = ITEMGET(12,30);

  00024	c7 40 14 1e 18
	00 00		 mov	 DWORD PTR [eax+20], 6174 ; 0000181eH

; 35   : 	iSoulPack = ITEMGET(12,31);

  0002b	c7 40 18 1f 18
	00 00		 mov	 DWORD PTR [eax+24], 6175 ; 0000181fH

; 36   : 	iCondorFeather = ITEMGET(13,53);

  00032	c7 40 1c 35 1a
	00 00		 mov	 DWORD PTR [eax+28], 6709 ; 00001a35H

; 37   : 	iCondorStone = ITEMGET(13,52);

  00039	c7 40 20 34 1a
	00 00		 mov	 DWORD PTR [eax+32], 6708 ; 00001a34H

; 38   : 	iStormWings = ITEMGET(12,36);

  00040	c7 40 24 24 18
	00 00		 mov	 DWORD PTR [eax+36], 6180 ; 00001824H

; 39   : 	iRedemptionWings = ITEMGET(12,37);

  00047	c7 40 28 25 18
	00 00		 mov	 DWORD PTR [eax+40], 6181 ; 00001825H

; 40   : 	iFortitudeWings = ITEMGET(12,38);

  0004e	c7 40 2c 26 18
	00 00		 mov	 DWORD PTR [eax+44], 6182 ; 00001826H

; 41   : 	iHurricaneWings = ITEMGET(12,39);

  00055	c7 40 30 27 18
	00 00		 mov	 DWORD PTR [eax+48], 6183 ; 00001827H

; 42   : 	iMonarchMantle = ITEMGET(12,40);

  0005c	c7 40 34 28 18
	00 00		 mov	 DWORD PTR [eax+52], 6184 ; 00001828H

; 43   : 	iDimensionWings = ITEMGET(12,43);

  00063	c7 40 38 2b 18
	00 00		 mov	 DWORD PTR [eax+56], 6187 ; 0000182bH

; 44   : 	iRFCape2 = ITEMGET(12,50);

  0006a	c7 40 3c 32 18
	00 00		 mov	 DWORD PTR [eax+60], 6194 ; 00001832H

; 45   : 	iOptionRate = 50;

  00071	c7 40 40 32 00
	00 00		 mov	 DWORD PTR [eax+64], 50	; 00000032H

; 46   : }

  00078	c3		 ret	 0
??0CChaosBox@@QAE@XZ ENDP				; CChaosBox::CChaosBox
_TEXT	ENDS
PUBLIC	??1CChaosBox@@UAE@XZ				; CChaosBox::~CChaosBox
; Function compile flags: /Ogtp
;	COMDAT ??1CChaosBox@@UAE@XZ
_TEXT	SEGMENT
??1CChaosBox@@UAE@XZ PROC				; CChaosBox::~CChaosBox, COMDAT
; _this$ = ecx

; 50   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CChaosBox@@6B@

; 51   : 
; 52   : }

  00006	c3		 ret	 0
??1CChaosBox@@UAE@XZ ENDP				; CChaosBox::~CChaosBox
_TEXT	ENDS
PUBLIC	?ChaosBoxCheck@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxCheck
; Function compile flags: /Ogtp
;	COMDAT ?ChaosBoxCheck@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ChaosBoxCheck@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::ChaosBoxCheck, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   : 	if ( lpObj->pChaosBox == NULL )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	39 81 10 12 00
	00		 cmp	 DWORD PTR [ecx+4624], eax
  0000e	0f 95 c0	 setne	 al

; 57   : 	{
; 58   : 		return false;
; 59   : 	}
; 60   : 
; 61   : 	return true;
; 62   : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?ChaosBoxCheck@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::ChaosBoxCheck
_TEXT	ENDS
PUBLIC	?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
EXTRN	?ClearErtel@CElementalSystem@@QAEXPAUOBJECTSTRUCT@@PAVCItem@@@Z:PROC ; CElementalSystem::ClearErtel
EXTRN	?g_ElementalSystem@@3VCElementalSystem@@A:BYTE	; g_ElementalSystem
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\spe.h
xdata$x	SEGMENT
__unwindtable$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z$0
__ehfuncinfo$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\chaosbox.cpp
xdata$x	ENDS
;	COMDAT ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T197491 = 8						; size = 4
_lpObj$ = 8						; size = 4
?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::ChaosBoxInit, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 70   : 	int n;
; 71   : 
; 72   : 	if ( lpObj->pChaosBox != NULL )

  00025	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00028	83 be 10 12 00
	00 00		 cmp	 DWORD PTR [esi+4624], 0
  0002f	74 48		 je	 SHORT $LN12@ChaosBoxIn

; 73   : 	{
; 74   : 		for (n=0;n<CHAOS_BOX_SIZE;n++)

  00031	33 ff		 xor	 edi, edi
$LL11@ChaosBoxIn:

; 75   : 		{
; 76   : 			g_ElementalSystem.ClearErtel(lpObj,&lpObj->pChaosBox[n]);

  00033	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00039	03 c7		 add	 eax, edi
  0003b	50		 push	 eax
  0003c	56		 push	 esi
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ElementalSystem@@3VCElementalSystem@@A ; g_ElementalSystem
  00042	e8 00 00 00 00	 call	 ?ClearErtel@CElementalSystem@@QAEXPAUOBJECTSTRUCT@@PAVCItem@@@Z ; CElementalSystem::ClearErtel

; 77   : 			lpObj->pChaosBox[n].Clear();

  00047	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0004d	03 cf		 add	 ecx, edi
  0004f	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
  00054	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0005a	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00060	7c d1		 jl	 SHORT $LL11@ChaosBoxIn

; 78   : 		}
; 79   : 
; 80   : 		for (n=0;n<CHAOS_BOX_SIZE;n++)

  00062	33 c0		 xor	 eax, eax
$LL8@ChaosBoxIn:

; 81   : 		{
; 82   : 			lpObj->pChaosBoxMap[n] = -1;

  00064	8b 8e 14 12 00
	00		 mov	 ecx, DWORD PTR [esi+4628]
  0006a	c6 04 08 ff	 mov	 BYTE PTR [eax+ecx], 255	; 000000ffH
  0006e	40		 inc	 eax
  0006f	83 f8 20	 cmp	 eax, 32			; 00000020H
  00072	7c f0		 jl	 SHORT $LL8@ChaosBoxIn

; 83   : 		}
; 84   : 		return true;

  00074	e9 9a 00 00 00	 jmp	 $LN31@ChaosBoxIn
$LN12@ChaosBoxIn:

; 85   : 	}
; 86   : 
; 87   : 	lpObj->pChaosBox = new CItem[CHAOS_BOX_SIZE];

  00079	68 80 1a 00 00	 push	 6784			; 00001a80H
  0007e	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00083	83 c4 04	 add	 esp, 4
  00086	89 45 08	 mov	 DWORD PTR $T197491[ebp], eax
  00089	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00090	85 c0		 test	 eax, eax
  00092	74 21		 je	 SHORT $LN15@ChaosBoxIn
  00094	8b f8		 mov	 edi, eax
  00096	bb 1f 00 00 00	 mov	 ebx, 31			; 0000001fH
  0009b	eb 03 8d 49 00	 npad	 5
$LL19@ChaosBoxIn:
  000a0	8b cf		 mov	 ecx, edi
  000a2	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  000a7	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000ad	4b		 dec	 ebx
  000ae	79 f0		 jns	 SHORT $LL19@ChaosBoxIn
  000b0	8b 45 08	 mov	 eax, DWORD PTR $T197491[ebp]
  000b3	eb 02		 jmp	 SHORT $LN16@ChaosBoxIn
$LN15@ChaosBoxIn:
  000b5	33 c0		 xor	 eax, eax
$LN16@ChaosBoxIn:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000be	89 86 10 12 00
	00		 mov	 DWORD PTR [esi+4624], eax

; 88   : 
; 89   : 	if ( lpObj->pChaosBox == NULL )

  000c4	85 c0		 test	 eax, eax

; 90   : 	{
; 91   : 		return false;

  000c6	74 23		 je	 SHORT $LN32@ChaosBoxIn

; 92   : 	}
; 93   : 
; 94   : 	lpObj->pChaosBoxMap = new unsigned char[CHAOS_BOX_SIZE];

  000c8	6a 20		 push	 32			; 00000020H
  000ca	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000cf	83 c4 04	 add	 esp, 4
  000d2	89 86 14 12 00
	00		 mov	 DWORD PTR [esi+4628], eax

; 95   : 
; 96   : 	if ( lpObj->pChaosBoxMap == NULL )

  000d8	85 c0		 test	 eax, eax
  000da	75 25		 jne	 SHORT $LN4@ChaosBoxIn

; 97   : 	{
; 98   : 		delete lpObj->pChaosBox;

  000dc	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e8	83 c4 04	 add	 esp, 4
$LN32@ChaosBoxIn:

; 99   : 		return false;

  000eb	33 c0		 xor	 eax, eax

; 108  : }

  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 04 00	 ret	 4
$LN4@ChaosBoxIn:

; 100  : 	}
; 101  : 
; 102  : 	for (n=0;n<CHAOS_BOX_SIZE;n++)

  00101	33 c0		 xor	 eax, eax
$LL3@ChaosBoxIn:

; 103  : 	{
; 104  : 		lpObj->pChaosBoxMap[n] = -1;

  00103	8b 8e 14 12 00
	00		 mov	 ecx, DWORD PTR [esi+4628]
  00109	c6 04 08 ff	 mov	 BYTE PTR [eax+ecx], 255	; 000000ffH
  0010d	40		 inc	 eax
  0010e	83 f8 20	 cmp	 eax, 32			; 00000020H
  00111	7c f0		 jl	 SHORT $LL3@ChaosBoxIn
$LN31@ChaosBoxIn:

; 105  : 	}
; 106  : 
; 107  : 	return true;

  00113	b8 01 00 00 00	 mov	 eax, 1

; 108  : }

  00118	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00122	59		 pop	 ecx
  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR $T197491[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::ChaosBoxInit
PUBLIC	?ChaosBoxItemDown@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxItemDown
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEE@Z:PROC		; CItem::Convert
EXTRN	?ItemGetDurability@@YAHHHHH@Z:PROC		; ItemGetDurability
EXTRN	?IsExtItem@CItem@@QAEHXZ:PROC			; CItem::IsExtItem
EXTRN	?IsSetItem@CItem@@QAEHXZ:PROC			; CItem::IsSetItem
EXTRN	_rand:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
;	COMDAT ?ChaosBoxItemDown@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv628 = 8						; size = 4
_dur$189997 = 8						; size = 4
_lpObj$ = 8						; size = 4
?ChaosBoxItemDown@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ChaosBoxItemDown, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 114  : 	if ( lpObj->pChaosBox == NULL )

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	83 bf 10 12 00
	00 00		 cmp	 DWORD PTR [edi+4624], 0
  0000e	75 07		 jne	 SHORT $LN12@ChaosBoxIt

; 115  : 	{
; 116  : 		return FALSE;

  00010	33 c0		 xor	 eax, eax
  00012	5f		 pop	 edi

; 178  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
$LN12@ChaosBoxIt:
  00017	53		 push	 ebx
  00018	56		 push	 esi

; 117  : 	}
; 118  : 
; 119  : 	for (int n=0;n<CHAOS_BOX_SIZE;n++)

  00019	33 f6		 xor	 esi, esi
  0001b	eb 03 8d 49 00	 npad	 5
$LL11@ChaosBoxIt:

; 120  : 	{
; 121  : 		if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) ||
; 122  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) ||
; 123  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) ||
; 124  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,83) ||
; 125  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,84) ||
; 126  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,85) ||
; 127  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,86) ||
; 128  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,87) ||
; 129  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,88) ||
; 130  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,89) ||
; 131  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,90) ||
; 132  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,91) ||
; 133  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,92) ||
; 134  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )

  00020	8b 87 10 12 00
	00		 mov	 eax, DWORD PTR [edi+4624]
  00026	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  00029	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  0002d	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00032	66 3b c2	 cmp	 ax, dx
  00035	0f 84 d4 01 00
	00		 je	 $LN7@ChaosBoxIt
  0003b	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  00040	66 3b c2	 cmp	 ax, dx
  00043	0f 84 c6 01 00
	00		 je	 $LN7@ChaosBoxIt
  00049	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  0004e	66 3b c2	 cmp	 ax, dx
  00051	0f 84 b8 01 00
	00		 je	 $LN7@ChaosBoxIt
  00057	ba 53 1a 00 00	 mov	 edx, 6739		; 00001a53H
  0005c	66 3b c2	 cmp	 ax, dx
  0005f	0f 84 aa 01 00
	00		 je	 $LN7@ChaosBoxIt
  00065	ba 54 1a 00 00	 mov	 edx, 6740		; 00001a54H
  0006a	66 3b c2	 cmp	 ax, dx
  0006d	0f 84 9c 01 00
	00		 je	 $LN7@ChaosBoxIt
  00073	ba 55 1a 00 00	 mov	 edx, 6741		; 00001a55H
  00078	66 3b c2	 cmp	 ax, dx
  0007b	0f 84 8e 01 00
	00		 je	 $LN7@ChaosBoxIt
  00081	ba 56 1a 00 00	 mov	 edx, 6742		; 00001a56H
  00086	66 3b c2	 cmp	 ax, dx
  00089	0f 84 80 01 00
	00		 je	 $LN7@ChaosBoxIt
  0008f	ba 57 1a 00 00	 mov	 edx, 6743		; 00001a57H
  00094	66 3b c2	 cmp	 ax, dx
  00097	0f 84 72 01 00
	00		 je	 $LN7@ChaosBoxIt
  0009d	ba 58 1a 00 00	 mov	 edx, 6744		; 00001a58H
  000a2	66 3b c2	 cmp	 ax, dx
  000a5	0f 84 64 01 00
	00		 je	 $LN7@ChaosBoxIt
  000ab	ba 59 1a 00 00	 mov	 edx, 6745		; 00001a59H
  000b0	66 3b c2	 cmp	 ax, dx
  000b3	0f 84 56 01 00
	00		 je	 $LN7@ChaosBoxIt
  000b9	ba 5a 1a 00 00	 mov	 edx, 6746		; 00001a5aH
  000be	66 3b c2	 cmp	 ax, dx
  000c1	0f 84 48 01 00
	00		 je	 $LN7@ChaosBoxIt
  000c7	ba 5b 1a 00 00	 mov	 edx, 6747		; 00001a5bH
  000cc	66 3b c2	 cmp	 ax, dx
  000cf	0f 84 3a 01 00
	00		 je	 $LN7@ChaosBoxIt
  000d5	ba 5c 1a 00 00	 mov	 edx, 6748		; 00001a5cH
  000da	66 3b c2	 cmp	 ax, dx
  000dd	0f 84 2c 01 00
	00		 je	 $LN7@ChaosBoxIt
  000e3	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000e8	66 3b c2	 cmp	 ax, dx
  000eb	0f 84 1e 01 00
	00		 je	 $LN7@ChaosBoxIt

; 137  : 		}
; 138  : 		else
; 139  : 		{
; 140  : 			int op = lpObj->pChaosBox[n].m_Option1;

  000f1	0f b6 99 90 00
	00 00		 movzx	 ebx, BYTE PTR [ecx+144]

; 141  : 
; 142  : 			if ( op > 0 )

  000f8	85 db		 test	 ebx, ebx
  000fa	7e 14		 jle	 SHORT $LN17@ChaosBoxIt

; 143  : 			{
; 144  : 				if ( (rand() % 2) == 0 )

  000fc	e8 00 00 00 00	 call	 _rand
  00101	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00106	79 05		 jns	 SHORT $LN19@ChaosBoxIt
  00108	48		 dec	 eax
  00109	83 c8 fe	 or	 eax, -2			; fffffffeH
  0010c	40		 inc	 eax
$LN19@ChaosBoxIt:
  0010d	75 01		 jne	 SHORT $LN17@ChaosBoxIt

; 145  : 				{
; 146  : 					op--;

  0010f	4b		 dec	 ebx
$LN17@ChaosBoxIt:

; 147  : 				}
; 148  : 			}
; 149  : 
; 150  : 			lpObj->pChaosBox[n].m_Option1 = op;

  00110	8b 87 10 12 00
	00		 mov	 eax, DWORD PTR [edi+4624]
  00116	88 9c 06 90 00
	00 00		 mov	 BYTE PTR [esi+eax+144], bl

; 151  : 			op = lpObj->pChaosBox[n].m_Option3;

  0011d	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00123	0f b6 9c 0e 92
	00 00 00	 movzx	 ebx, BYTE PTR [esi+ecx+146]

; 152  : 
; 153  : 			if ( op > 0 )

  0012b	85 db		 test	 ebx, ebx
  0012d	7e 14		 jle	 SHORT $LN18@ChaosBoxIt

; 154  : 			{
; 155  : 				if ( (rand() % 2) == 0 )

  0012f	e8 00 00 00 00	 call	 _rand
  00134	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00139	79 05		 jns	 SHORT $LN20@ChaosBoxIt
  0013b	48		 dec	 eax
  0013c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0013f	40		 inc	 eax
$LN20@ChaosBoxIt:
  00140	75 01		 jne	 SHORT $LN18@ChaosBoxIt

; 156  : 				{
; 157  : 					op--;

  00142	4b		 dec	 ebx
$LN18@ChaosBoxIt:

; 158  : 				}
; 159  : 			}
; 160  : 
; 161  : 			lpObj->pChaosBox[n].m_Option3 = op;

  00143	8b 97 10 12 00
	00		 mov	 edx, DWORD PTR [edi+4624]
  00149	88 9c 16 92 00
	00 00		 mov	 BYTE PTR [esi+edx+146], bl

; 162  : 
; 163  : 			if ( lpObj->pChaosBox[n].m_Level > 0 )

  00150	8b 87 10 12 00
	00		 mov	 eax, DWORD PTR [edi+4624]
  00156	66 83 7c 06 08
	00		 cmp	 WORD PTR [esi+eax+8], 0
  0015c	7e 12		 jle	 SHORT $LN1@ChaosBoxIt

; 164  : 			{
; 165  : 				lpObj->pChaosBox[n].m_Level = rand() % lpObj->pChaosBox[n].m_Level;

  0015e	8d 5c 06 08	 lea	 ebx, DWORD PTR [esi+eax+8]
  00162	e8 00 00 00 00	 call	 _rand
  00167	0f bf 0b	 movsx	 ecx, WORD PTR [ebx]
  0016a	99		 cdq
  0016b	f7 f9		 idiv	 ecx
  0016d	66 89 13	 mov	 WORD PTR [ebx], dx
$LN1@ChaosBoxIt:

; 166  : 			}
; 167  : 
; 168  : 			float dur = (float)ItemGetDurability(lpObj->pChaosBox[n].m_Type, lpObj->pChaosBox[n].m_Level, lpObj->pChaosBox[n].IsExtItem(), lpObj->pChaosBox[n].IsSetItem() );

  00170	8b 97 10 12 00
	00		 mov	 edx, DWORD PTR [edi+4624]
  00176	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]
  00179	8d 1c 16	 lea	 ebx, DWORD PTR [esi+edx]
  0017c	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  00181	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00187	50		 push	 eax
  00188	03 ce		 add	 ecx, esi
  0018a	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  0018f	0f bf 4b 06	 movsx	 ecx, WORD PTR [ebx+6]
  00193	50		 push	 eax
  00194	0f bf 43 08	 movsx	 eax, WORD PTR [ebx+8]
  00198	50		 push	 eax
  00199	51		 push	 ecx
  0019a	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability

; 169  : 			
; 170  : 			lpObj->pChaosBox[n].m_Durability =  dur * lpObj->pChaosBox[n].m_Durability / lpObj->pChaosBox[n].m_BaseDurability;

  0019f	8b 97 10 12 00
	00		 mov	 edx, DWORD PTR [edi+4624]
  001a5	89 45 08	 mov	 DWORD PTR tv628[ebp], eax
  001a8	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  001ab	db 45 08	 fild	 DWORD PTR tv628[ebp]
  001ae	83 c4 10	 add	 esp, 16			; 00000010H

; 171  : 			lpObj->pChaosBox[n].Convert(lpObj->pChaosBox[n].m_Type, lpObj->pChaosBox[n].m_Option1,
; 172  : 				lpObj->pChaosBox[n].m_Option2, lpObj->pChaosBox[n].m_Option3, lpObj->pChaosBox[n].m_NewOption,
; 173  : 				lpObj->pChaosBox[n].m_SetOption, lpObj->pChaosBox[n].m_ItemOptionEx, 0, -1, CURRENT_DB_VERSION);

  001b1	6a 03		 push	 3
  001b3	68 ff 00 00 00	 push	 255			; 000000ffH
  001b8	d9 5d 08	 fstp	 DWORD PTR _dur$189997[ebp]
  001bb	6a 00		 push	 0
  001bd	d9 45 08	 fld	 DWORD PTR _dur$189997[ebp]
  001c0	d8 48 24	 fmul	 DWORD PTR [eax+36]
  001c3	d8 70 2c	 fdiv	 DWORD PTR [eax+44]
  001c6	d9 58 24	 fstp	 DWORD PTR [eax+36]
  001c9	8b 87 10 12 00
	00		 mov	 eax, DWORD PTR [edi+4624]
  001cf	0f b6 94 06 c6
	00 00 00	 movzx	 edx, BYTE PTR [esi+eax+198]
  001d7	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  001da	0f b6 81 aa 00
	00 00		 movzx	 eax, BYTE PTR [ecx+170]
  001e1	52		 push	 edx
  001e2	0f b6 91 93 00
	00 00		 movzx	 edx, BYTE PTR [ecx+147]
  001e9	50		 push	 eax
  001ea	0f b6 81 92 00
	00 00		 movzx	 eax, BYTE PTR [ecx+146]
  001f1	52		 push	 edx
  001f2	0f b6 91 91 00
	00 00		 movzx	 edx, BYTE PTR [ecx+145]
  001f9	50		 push	 eax
  001fa	0f b6 81 90 00
	00 00		 movzx	 eax, BYTE PTR [ecx+144]
  00201	52		 push	 edx
  00202	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00206	50		 push	 eax
  00207	52		 push	 edx
  00208	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert
  0020d	eb 05		 jmp	 SHORT $LN10@ChaosBoxIt
$LN7@ChaosBoxIt:

; 135  : 		{
; 136  : 			lpObj->pChaosBox[n].Clear();

  0020f	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
$LN10@ChaosBoxIt:

; 117  : 	}
; 118  : 
; 119  : 	for (int n=0;n<CHAOS_BOX_SIZE;n++)

  00214	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0021a	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  00220	0f 8c fa fd ff
	ff		 jl	 $LL11@ChaosBoxIt

; 174  : 		}
; 175  : 	}
; 176  : 
; 177  : 	return TRUE;

  00226	5e		 pop	 esi
  00227	5b		 pop	 ebx
  00228	b8 01 00 00 00	 mov	 eax, 1
  0022d	5f		 pop	 edi

; 178  : }

  0022e	5d		 pop	 ebp
  0022f	c2 04 00	 ret	 4
?ChaosBoxItemDown@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ChaosBoxItemDown
_TEXT	ENDS
PUBLIC	??_C@_0DK@EKDAKNF@?$FLMixSystem?$FN?5WingCharmItemNum?5?$DN?$DO?5@ ; `string'
PUBLIC	??_C@_0DO@PLIHJFD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5need?5Zen?5?3?5?$CFd?5Suc@ ; `string'
PUBLIC	??_C@_0FA@FKHLLHEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd?0?$CFd?0?$CF@ ; `string'
PUBLIC	_Result3$GSCopy$
PUBLIC	_Result2$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ChaosBoxMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ; CChaosBox::ChaosBoxMix
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?GetName@CItem@@QAEPADXZ:PROC			; CItem::GetName
EXTRN	?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z:PROC	; ItemIsBufExOption
EXTRN	?OldValue@CItem@@QAEXXZ:PROC			; CItem::OldValue
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0DK@EKDAKNF@?$FLMixSystem?$FN?5WingCharmItemNum?5?$DN?$DO?5@
CONST	SEGMENT
??_C@_0DK@EKDAKNF@?$FLMixSystem?$FN?5WingCharmItemNum?5?$DN?$DO?5@ DB '[M'
	DB	'ixSystem] WingCharmItemNum => %d , WingCharmIndex => %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@PLIHJFD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5need?5Zen?5?3?5?$CFd?5Suc@
CONST	SEGMENT
??_C@_0DO@PLIHJFD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5need?5Zen?5?3?5?$CFd?5Suc@ DB '['
	DB	'%s][%s] CBMix need Zen : %d SuccessRate : %d, CharmRate : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@FKHLLHEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd?0?$CFd?0?$CF@
CONST	SEGMENT
??_C@_0FA@FKHLLHEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd?0?$CFd?0?$CF@ DB '['
	DB	'%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%u][%d][%d] Ex:[%d,%'
	DB	'd,%d,%d,%d,%d,%d]', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ChaosBoxMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z
_TEXT	SEGMENT
_Result2$GSCopy$ = -56					; size = 4
tv610 = -52						; size = 4
tv607 = -48						; size = 4
_tmpItem$ = -44						; size = 4
_iCharmOfLuckCount$ = -40				; size = 4
_n$190014 = -36						; size = 4
_ChaosItems$ = -32					; size = 4
_ChaosDiamond$ = -28					; size = 4
_add$ = -24						; size = 4
_Result3$GSCopy$ = -20					; size = 4
_value$ = -16						; size = 4
_ExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_Result2$ = 12						; size = 4
_Result3$ = 16						; size = 4
?ChaosBoxMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z PROC ; CChaosBox::ChaosBoxMix, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _Result2$[ebp]
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _Result3$[ebp]
  00016	56		 push	 esi

; 184  : 	BYTE ExOption[8];
; 185  : 	int ChaosDiamond = 0;

  00017	33 f6		 xor	 esi, esi
  00019	57		 push	 edi
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0001d	89 45 c8	 mov	 DWORD PTR _Result2$GSCopy$[ebp], eax
  00020	89 4d ec	 mov	 DWORD PTR _Result3$GSCopy$[ebp], ecx
  00023	89 75 e4	 mov	 DWORD PTR _ChaosDiamond$[ebp], esi

; 186  : 	int ChaosItems = 0;

  00026	89 75 e0	 mov	 DWORD PTR _ChaosItems$[ebp], esi

; 187  : 
; 188  : 	if ( lpObj->pChaosBox == NULL )

  00029	39 b7 10 12 00
	00		 cmp	 DWORD PTR [edi+4624], esi
  0002f	75 14		 jne	 SHORT $LN30@ChaosBoxMi

; 189  : 	{
; 190  : 		return 0;

  00031	5f		 pop	 edi
  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi

; 329  : 			break;
; 330  : 		}
; 331  : 	}
; 332  : 
; 333  : 	return value;
; 334  : }

  00035	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00038	33 cd		 xor	 ecx, ebp
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
$LN30@ChaosBoxMi:

; 191  : 	}
; 192  : 
; 193  : 	int value = 0;
; 194  : 	int add = 0;
; 195  : 	int nv = 0;	// NEW VALUE
; 196  : 	Result2 = 0;

  00045	89 30		 mov	 DWORD PTR [eax], esi
  00047	53		 push	 ebx

; 197  : 	Result3 = -1;

  00048	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 198  : 	int tmpItem = -1;
; 199  : 	lpObj->ChaosSuccessRate = 0;
; 200  : 	lpObj->ChaosMoney = 0;
; 201  : 	int iCharmOfLuckCount = 0;

  0004e	33 db		 xor	 ebx, ebx
  00050	89 75 f0	 mov	 DWORD PTR _value$[ebp], esi
  00053	c7 45 d4 ff ff
	ff ff		 mov	 DWORD PTR _tmpItem$[ebp], -1
  0005a	89 b7 1c 12 00
	00		 mov	 DWORD PTR [edi+4636], esi
  00060	89 b7 18 12 00
	00		 mov	 DWORD PTR [edi+4632], esi
  00066	89 5d d8	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], ebx

; 202  : 
; 203  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00069	89 75 dc	 mov	 DWORD PTR _n$190014[ebp], esi
  0006c	89 75 d0	 mov	 DWORD PTR tv607[ebp], esi
  0006f	90		 npad	 1
$LL29@ChaosBoxMi:

; 204  : 	{
; 205  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00070	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00076	03 ce		 add	 ecx, esi
  00078	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0007d	83 f8 01	 cmp	 eax, 1
  00080	0f 85 af 01 00
	00		 jne	 $LN28@ChaosBoxMi

; 206  : 		{
; 207  : 			lpObj->pChaosBox[n].OldValue();

  00086	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  0008c	03 ce		 add	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ?OldValue@CItem@@QAEXXZ	; CItem::OldValue

; 208  : 			add = 0;
; 209  : 			nv = 0;
; 210  : 
; 211  : 			if ( lpObj->pChaosBox[n].m_Level >= MIN_CHAOS_ITEM_LEVEL && (lpObj->pChaosBox[n].m_Option3 *4) >= MIN_CHAOS_ITEM_LEVEL )

  00093	8b 87 10 12 00
	00		 mov	 eax, DWORD PTR [edi+4624]
  00099	33 db		 xor	 ebx, ebx
  0009b	03 c6		 add	 eax, esi
  0009d	66 83 78 08 04	 cmp	 WORD PTR [eax+8], 4
  000a2	89 5d e8	 mov	 DWORD PTR _add$[ebp], ebx
  000a5	7c 4b		 jl	 SHORT $LN36@ChaosBoxMi
  000a7	0f b6 88 92 00
	00 00		 movzx	 ecx, BYTE PTR [eax+146]
  000ae	03 c9		 add	 ecx, ecx
  000b0	03 c9		 add	 ecx, ecx
  000b2	83 f9 04	 cmp	 ecx, 4
  000b5	7c 3b		 jl	 SHORT $LN36@ChaosBoxMi

; 212  : 			{
; 213  : 				nv = lpObj->pChaosBox[n].m_OldBuyMoney;

  000b7	8b 98 8c 00 00
	00		 mov	 ebx, DWORD PTR [eax+140]

; 214  : 				value += lpObj->pChaosBox[n].m_OldBuyMoney;
; 215  : 				add = 1;
; 216  : 
; 217  : 				if ( lpObj->pChaosBox[n].m_Type == ITEMGET(2,6) || lpObj->pChaosBox[n].m_Type == ITEMGET(4,6) || lpObj->pChaosBox[n].m_Type == ITEMGET(5,7) )	// Chaos Items

  000bd	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  000c1	01 5d f0	 add	 DWORD PTR _value$[ebp], ebx
  000c4	ba 06 04 00 00	 mov	 edx, 1030		; 00000406H
  000c9	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _add$[ebp], 1
  000d0	66 3b c2	 cmp	 ax, dx
  000d3	74 14		 je	 SHORT $LN23@ChaosBoxMi
  000d5	b9 06 08 00 00	 mov	 ecx, 2054		; 00000806H
  000da	66 3b c1	 cmp	 ax, cx
  000dd	74 0a		 je	 SHORT $LN23@ChaosBoxMi
  000df	ba 07 0a 00 00	 mov	 edx, 2567		; 00000a07H
  000e4	66 3b c2	 cmp	 ax, dx
  000e7	75 09		 jne	 SHORT $LN36@ChaosBoxMi
$LN23@ChaosBoxMi:

; 218  : 				{
; 219  : 					Result2 = 1;

  000e9	8b 45 c8	 mov	 eax, DWORD PTR _Result2$GSCopy$[ebp]
  000ec	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN36@ChaosBoxMi:

; 220  : 				}
; 221  : 			}
; 222  : 
; 223  : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  000f2	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  000f8	0f b7 44 31 06	 movzx	 eax, WORD PTR [ecx+esi+6]
  000fd	03 ce		 add	 ecx, esi
  000ff	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00104	89 4d cc	 mov	 DWORD PTR tv610[ebp], ecx
  00107	66 3b c2	 cmp	 ax, dx
  0010a	75 0e		 jne	 SHORT $LN22@ChaosBoxMi

; 224  : 			{
; 225  : 				value += lpObj->pChaosBox[n].m_OldBuyMoney;

  0010c	8b 99 8c 00 00
	00		 mov	 ebx, DWORD PTR [ecx+140]
  00112	01 5d f0	 add	 DWORD PTR _value$[ebp], ebx

; 226  : 				nv = lpObj->pChaosBox[n].m_OldBuyMoney;
; 227  : 				ChaosDiamond++;

  00115	ff 45 e4	 inc	 DWORD PTR _ChaosDiamond$[ebp]

; 228  : 				add = 1;

  00118	eb 1d		 jmp	 SHORT $LN40@ChaosBoxMi
$LN22@ChaosBoxMi:

; 229  : 			}
; 230  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) || lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )	// Jewel of Bless, Jewel of Soul

  0011a	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  0011f	66 3b c2	 cmp	 ax, dx
  00122	74 0a		 je	 SHORT $LN19@ChaosBoxMi
  00124	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  00129	66 3b c2	 cmp	 ax, dx
  0012c	75 10		 jne	 SHORT $LN20@ChaosBoxMi
$LN19@ChaosBoxMi:

; 231  : 			{
; 232  : 				value += lpObj->pChaosBox[n].m_OldBuyMoney;

  0012e	8b 99 8c 00 00
	00		 mov	 ebx, DWORD PTR [ecx+140]
  00134	01 5d f0	 add	 DWORD PTR _value$[ebp], ebx
$LN40@ChaosBoxMi:

; 233  : 				nv = lpObj->pChaosBox[n].m_OldBuyMoney;
; 234  : 				add = 1;

  00137	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _add$[ebp], 1
$LN20@ChaosBoxMi:

; 235  : 			}
; 236  : 
; 237  : 			if( lpObj->pChaosBox[n].m_Type == ITEMGET(13,83) ||
; 238  : 				lpObj->pChaosBox[n].m_Type == ITEMGET(13,84) ||
; 239  : 				lpObj->pChaosBox[n].m_Type == ITEMGET(13,85) ||
; 240  : 				lpObj->pChaosBox[n].m_Type == ITEMGET(13,86) ||
; 241  : 				lpObj->pChaosBox[n].m_Type == ITEMGET(13,87) )

  0013e	ba 53 1a 00 00	 mov	 edx, 6739		; 00001a53H
  00143	66 3b c2	 cmp	 ax, dx
  00146	74 28		 je	 SHORT $LN17@ChaosBoxMi
  00148	ba 54 1a 00 00	 mov	 edx, 6740		; 00001a54H
  0014d	66 3b c2	 cmp	 ax, dx
  00150	74 1e		 je	 SHORT $LN17@ChaosBoxMi
  00152	ba 55 1a 00 00	 mov	 edx, 6741		; 00001a55H
  00157	66 3b c2	 cmp	 ax, dx
  0015a	74 14		 je	 SHORT $LN17@ChaosBoxMi
  0015c	ba 56 1a 00 00	 mov	 edx, 6742		; 00001a56H
  00161	66 3b c2	 cmp	 ax, dx
  00164	74 0a		 je	 SHORT $LN17@ChaosBoxMi
  00166	ba 57 1a 00 00	 mov	 edx, 6743		; 00001a57H
  0016b	66 3b c2	 cmp	 ax, dx
  0016e	75 06		 jne	 SHORT $LN18@ChaosBoxMi
$LN17@ChaosBoxMi:

; 242  : 			{
; 243  : 				tmpItem = lpObj->pChaosBox[n].m_Type;

  00170	0f bf d0	 movsx	 edx, ax
  00173	89 55 d4	 mov	 DWORD PTR _tmpItem$[ebp], edx
$LN18@ChaosBoxMi:

; 244  : 			}
; 245  : 
; 246  : 			if( lpObj->pChaosBox[n].m_Type == ITEMGET(13,14) )

  00176	ba 0e 1a 00 00	 mov	 edx, 6670		; 00001a0eH
  0017b	66 3b c2	 cmp	 ax, dx
  0017e	0f 84 e1 00 00
	00		 je	 $LN34@ChaosBoxMi

; 247  : 			{
; 248  : 				return false;
; 249  : 			}
; 250  : 
; 251  : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00184	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  00189	66 3b c2	 cmp	 ax, dx
  0018c	75 0e		 jne	 SHORT $LN38@ChaosBoxMi

; 252  : 			{
; 253  : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  0018e	d9 41 24	 fld	 DWORD PTR [ecx+36]
  00191	e8 00 00 00 00	 call	 __ftol2_sse
  00196	01 45 d8	 add	 DWORD PTR _iCharmOfLuckCount$[ebp], eax
  00199	8b 4d cc	 mov	 ecx, DWORD PTR tv610[ebp]
$LN38@ChaosBoxMi:

; 254  : 			}
; 255  : 
; 256  : 			if ( add != 0  )

  0019c	83 7d e8 00	 cmp	 DWORD PTR _add$[ebp], 0
  001a0	74 03		 je	 SHORT $LN14@ChaosBoxMi

; 257  : 			{
; 258  : 				ChaosItems++;

  001a2	ff 45 e0	 inc	 DWORD PTR _ChaosItems$[ebp]
$LN14@ChaosBoxMi:

; 259  : 			}
; 260  : 
; 261  : 			ItemIsBufExOption(ExOption, &lpObj->pChaosBox[n]);

  001a5	51		 push	 ecx
  001a6	8d 45 f4	 lea	 eax, DWORD PTR _ExOption$[ebp]
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 262  : 			LogAdd("[%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%u][%d][%d] Ex:[%d,%d,%d,%d,%d,%d,%d]",
; 263  : 				lpObj->AccountID, lpObj->Name, n, lpObj->pChaosBox[n].GetName(),
; 264  : 				lpObj->pChaosBox[n].m_Level, lpObj->pChaosBox[n].m_Option1,
; 265  : 				lpObj->pChaosBox[n].m_Option2, lpObj->pChaosBox[n].m_Option3,
; 266  : 				lpObj->pChaosBox[n].m_Number, (int)lpObj->pChaosBox[n].m_Durability,
; 267  : 				nv, ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5],
; 268  : 				ExOption[6], lpObj->pChaosBox[n].m_SetOption);

  001af	03 b7 10 12 00
	00		 add	 esi, DWORD PTR [edi+4624]
  001b5	0f b6 45 fa	 movzx	 eax, BYTE PTR _ExOption$[ebp+6]
  001b9	0f b6 96 aa 00
	00 00		 movzx	 edx, BYTE PTR [esi+170]
  001c0	d9 46 24	 fld	 DWORD PTR [esi+36]
  001c3	0f b6 4d f9	 movzx	 ecx, BYTE PTR _ExOption$[ebp+5]
  001c7	83 c4 08	 add	 esp, 8
  001ca	52		 push	 edx
  001cb	0f b6 55 f8	 movzx	 edx, BYTE PTR _ExOption$[ebp+4]
  001cf	50		 push	 eax
  001d0	0f b6 45 f7	 movzx	 eax, BYTE PTR _ExOption$[ebp+3]
  001d4	51		 push	 ecx
  001d5	0f b6 4d f6	 movzx	 ecx, BYTE PTR _ExOption$[ebp+2]
  001d9	52		 push	 edx
  001da	0f b6 55 f5	 movzx	 edx, BYTE PTR _ExOption$[ebp+1]
  001de	50		 push	 eax
  001df	0f b6 45 f4	 movzx	 eax, BYTE PTR _ExOption$[ebp]
  001e3	51		 push	 ecx
  001e4	52		 push	 edx
  001e5	50		 push	 eax
  001e6	53		 push	 ebx
  001e7	e8 00 00 00 00	 call	 __ftol2_sse
  001ec	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001ee	0f b6 96 92 00
	00 00		 movzx	 edx, BYTE PTR [esi+146]
  001f5	50		 push	 eax
  001f6	0f b6 86 91 00
	00 00		 movzx	 eax, BYTE PTR [esi+145]
  001fd	51		 push	 ecx
  001fe	0f b6 8e 90 00
	00 00		 movzx	 ecx, BYTE PTR [esi+144]
  00205	52		 push	 edx
  00206	0f bf 56 08	 movsx	 edx, WORD PTR [esi+8]
  0020a	50		 push	 eax
  0020b	51		 push	 ecx
  0020c	52		 push	 edx
  0020d	8b ce		 mov	 ecx, esi
  0020f	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  00214	50		 push	 eax
  00215	8b 45 dc	 mov	 eax, DWORD PTR _n$190014[ebp]
  00218	50		 push	 eax
  00219	8d 4f 5d	 lea	 ecx, DWORD PTR [edi+93]
  0021c	51		 push	 ecx
  0021d	8d 57 52	 lea	 edx, DWORD PTR [edi+82]
  00220	52		 push	 edx
  00221	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@FKHLLHEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd?0?$CFd?0?$CF@
  00226	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0022c	8b 75 d0	 mov	 esi, DWORD PTR tv607[ebp]
  0022f	8b 5d d8	 mov	 ebx, DWORD PTR _iCharmOfLuckCount$[ebp]
  00232	83 c4 50	 add	 esp, 80			; 00000050H
$LN28@ChaosBoxMi:

; 202  : 
; 203  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00235	ff 45 dc	 inc	 DWORD PTR _n$190014[ebp]
  00238	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0023e	89 75 d0	 mov	 DWORD PTR tv607[ebp], esi
  00241	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  00247	0f 8c 23 fe ff
	ff		 jl	 $LL29@ChaosBoxMi

; 269  : 		
; 270  : 
; 271  : 
; 272  : 
; 273  : 		}
; 274  : 	}
; 275  : 
; 276  : 	if ( ChaosDiamond == 0 )

  0024d	33 c0		 xor	 eax, eax
  0024f	39 45 e4	 cmp	 DWORD PTR _ChaosDiamond$[ebp], eax
  00252	75 03		 jne	 SHORT $LN13@ChaosBoxMi

; 277  : 	{
; 278  : 		value = 0;	// 0% of success

  00254	89 45 f0	 mov	 DWORD PTR _value$[ebp], eax
$LN13@ChaosBoxMi:

; 279  : 	}
; 280  : 
; 281  : 	if ( ChaosItems < 2 )

  00257	83 7d e0 02	 cmp	 DWORD PTR _ChaosItems$[ebp], 2
  0025b	7d 03		 jge	 SHORT $LN12@ChaosBoxMi

; 282  : 	{
; 283  : 		value = 0;// 0% of success

  0025d	89 45 f0	 mov	 DWORD PTR _value$[ebp], eax
$LN12@ChaosBoxMi:

; 284  : 	}
; 285  : 
; 286  : 	if ( iCharmOfLuckCount > 10 )

  00260	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00263	7e 15		 jle	 SHORT $LN11@ChaosBoxMi
$LN34@ChaosBoxMi:
  00265	5b		 pop	 ebx
  00266	5f		 pop	 edi

; 287  : 		return FALSE;

  00267	33 c0		 xor	 eax, eax
  00269	5e		 pop	 esi

; 329  : 			break;
; 330  : 		}
; 331  : 	}
; 332  : 
; 333  : 	return value;
; 334  : }

  0026a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026d	33 cd		 xor	 ecx, ebp
  0026f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00274	8b e5		 mov	 esp, ebp
  00276	5d		 pop	 ebp
  00277	c2 0c 00	 ret	 12			; 0000000cH
$LN11@ChaosBoxMi:

; 288  : 
; 289  : 
; 290  : 	
; 291  : 	lpObj->ChaosSuccessRate = value / 10000;

  0027a	8b 75 f0	 mov	 esi, DWORD PTR _value$[ebp]
  0027d	b8 ad 8b db 68	 mov	 eax, 1759218605		; 68db8badH
  00282	f7 ee		 imul	 esi
  00284	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00287	8b c2		 mov	 eax, edx
  00289	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0028c	03 c2		 add	 eax, edx

; 292  : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  0028e	03 c3		 add	 eax, ebx
  00290	89 87 1c 12 00
	00		 mov	 DWORD PTR [edi+4636], eax

; 293  : 
; 294  : 	if ( lpObj->ChaosSuccessRate  > 100 )

  00296	83 f8 64	 cmp	 eax, 100		; 00000064H
  00299	7e 0a		 jle	 SHORT $LN10@ChaosBoxMi

; 295  : 	{
; 296  : 		lpObj->ChaosSuccessRate = 100;

  0029b	c7 87 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [edi+4636], 100 ; 00000064H
$LN10@ChaosBoxMi:

; 297  : 	}
; 298  : 
; 299  : 	lpObj->ChaosMoney = lpObj->ChaosSuccessRate * 10000;	// Required Money to MIX anc createe a Chaos Item

  002a5	8b 8f 1c 12 00
	00		 mov	 ecx, DWORD PTR [edi+4636]
  002ab	8b c1		 mov	 eax, ecx
  002ad	69 c0 10 27 00
	00		 imul	 eax, 10000		; 00002710H

; 300  : 
; 301  : 	LogAddTD("[%s][%s] CBMix need Zen : %d SuccessRate : %d, CharmRate : %d",
; 302  : 		lpObj->AccountID, lpObj->Name, lpObj->ChaosMoney, 
; 303  : 		lpObj->ChaosSuccessRate, iCharmOfLuckCount);

  002b3	53		 push	 ebx
  002b4	51		 push	 ecx
  002b5	50		 push	 eax
  002b6	8d 4f 5d	 lea	 ecx, DWORD PTR [edi+93]
  002b9	89 87 18 12 00
	00		 mov	 DWORD PTR [edi+4632], eax
  002bf	51		 push	 ecx
  002c0	83 c7 52	 add	 edi, 82			; 00000052H
  002c3	57		 push	 edi
  002c4	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@PLIHJFD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5need?5Zen?5?3?5?$CFd?5Suc@
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 304  : 
; 305  : 
; 306  : 	if( tmpItem > -1 )

  002cf	8b 4d d4	 mov	 ecx, DWORD PTR _tmpItem$[ebp]
  002d2	83 c4 18	 add	 esp, 24			; 00000018H
  002d5	83 f9 ff	 cmp	 ecx, -1
  002d8	7e 5d		 jle	 SHORT $LN7@ChaosBoxMi

; 307  : 	{
; 308  : 		int Number = tmpItem^ITEMGET(13,00);

  002da	8b c1		 mov	 eax, ecx
  002dc	35 00 1a 00 00	 xor	 eax, 6656		; 00001a00H

; 309  : 
; 310  : 		switch( Number )

  002e1	8d 50 ad	 lea	 edx, DWORD PTR [eax-83]
  002e4	83 fa 04	 cmp	 edx, 4
  002e7	77 3e		 ja	 SHORT $LN1@ChaosBoxMi
  002e9	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN41@ChaosBoxMi[edx*4]
$LN6@ChaosBoxMi:

; 311  : 		{
; 312  : 		case 83:
; 313  : 			Result3 = 2;

  002f0	8b 55 ec	 mov	 edx, DWORD PTR _Result3$GSCopy$[ebp]
  002f3	c7 02 02 00 00
	00		 mov	 DWORD PTR [edx], 2

; 314  : 			break;

  002f9	eb 3c		 jmp	 SHORT $LN7@ChaosBoxMi
$LN5@ChaosBoxMi:

; 315  : 		case 84:
; 316  : 			Result3 = 1;

  002fb	8b 45 ec	 mov	 eax, DWORD PTR _Result3$GSCopy$[ebp]
  002fe	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 317  : 			break;

  00304	eb 31		 jmp	 SHORT $LN7@ChaosBoxMi
$LN4@ChaosBoxMi:

; 318  : 		case 85:
; 319  : 			Result3 = 0;

  00306	8b 4d ec	 mov	 ecx, DWORD PTR _Result3$GSCopy$[ebp]
  00309	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 320  : 			break;

  0030f	eb 26		 jmp	 SHORT $LN7@ChaosBoxMi
$LN3@ChaosBoxMi:

; 321  : 		case 86:
; 322  : 			Result3 = 41;

  00311	8b 55 ec	 mov	 edx, DWORD PTR _Result3$GSCopy$[ebp]
  00314	c7 02 29 00 00
	00		 mov	 DWORD PTR [edx], 41	; 00000029H

; 323  : 			break;

  0031a	eb 1b		 jmp	 SHORT $LN7@ChaosBoxMi
$LN2@ChaosBoxMi:

; 324  : 		case 87:
; 325  : 			Result3 = 40;

  0031c	8b 45 ec	 mov	 eax, DWORD PTR _Result3$GSCopy$[ebp]
  0031f	c7 00 28 00 00
	00		 mov	 DWORD PTR [eax], 40	; 00000028H

; 326  : 			break;

  00325	eb 10		 jmp	 SHORT $LN7@ChaosBoxMi
$LN1@ChaosBoxMi:

; 327  : 		default:
; 328  : 			LogAddTD("[MixSystem] WingCharmItemNum => %d , WingCharmIndex => %d",tmpItem,Number);

  00327	50		 push	 eax
  00328	51		 push	 ecx
  00329	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@EKDAKNF@?$FLMixSystem?$FN?5WingCharmItemNum?5?$DN?$DO?5@
  0032e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00334	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@ChaosBoxMi:

; 329  : 			break;
; 330  : 		}
; 331  : 	}
; 332  : 
; 333  : 	return value;
; 334  : }

  00337	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033a	5b		 pop	 ebx
  0033b	5f		 pop	 edi
  0033c	8b c6		 mov	 eax, esi
  0033e	33 cd		 xor	 ecx, ebp
  00340	5e		 pop	 esi
  00341	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00346	8b e5		 mov	 esp, ebp
  00348	5d		 pop	 ebp
  00349	c2 0c 00	 ret	 12			; 0000000cH
$LN41@ChaosBoxMi:
  0034c	00 00 00 00	 DD	 $LN6@ChaosBoxMi
  00350	00 00 00 00	 DD	 $LN5@ChaosBoxMi
  00354	00 00 00 00	 DD	 $LN4@ChaosBoxMi
  00358	00 00 00 00	 DD	 $LN3@ChaosBoxMi
  0035c	00 00 00 00	 DD	 $LN2@ChaosBoxMi
?ChaosBoxMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ENDP ; CChaosBox::ChaosBoxMix
_TEXT	ENDS
PUBLIC	??_C@_0CK@IKEPLJDI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Success?5Rate?3?$CFd?5M@ ; `string'
PUBLIC	??_C@_0CF@NPEOFJKC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5?$CFd?5Money?5?3?5?$CF@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DefaultChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::DefaultChaosMix
EXTRN	?gObjInventoryCommit@@YAHH@Z:PROC		; gObjInventoryCommit
EXTRN	?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z:PROC ; GCUserChaosBoxSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z:PROC	; CCastleSiegeSync::AddTributeMoney
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z:PROC	; CCastleSiegeSync::GetTaxRateChaos
EXTRN	?g_CastleSiegeSync@@3VCCastleSiegeSync@@A:BYTE	; g_CastleSiegeSync
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	__alldiv:PROC
;	COMDAT ??_C@_0CK@IKEPLJDI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Success?5Rate?3?$CFd?5M@
CONST	SEGMENT
??_C@_0CK@IKEPLJDI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Success?5Rate?3?$CFd?5M@ DB '['
	DB	'%s][%s] CBMix Success Rate:%d Money : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NPEOFJKC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5?$CFd?5Money?5?3?5?$CF@
CONST	SEGMENT
??_C@_0CF@NPEOFJKC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5?$CFd?5Money?5?3?5?$CF@ DB '['
	DB	'%s][%s] CBMix Fail %d Money : %d-%d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DefaultChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_MixResult2$ = -56					; size = 4
_this$ = -52						; size = 4
_Level$190078 = -48					; size = 4
_fail$ = -44						; size = 4
_MixResult3$ = -40					; size = 4
_aIndex$ = -36						; size = 4
_Option2$190080 = -32					; size = 4
_iChaosTaxMoney$ = -28					; size = 4
_Option1$190079 = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DefaultChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::DefaultChaosMix, COMDAT
; _this$ = ecx

; 337  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 338  : 	PMSG_CHAOSMIXRESULT pMsg;
; 339  : 
; 340  : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	8b d9		 mov	 ebx, ecx
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 5d cc	 mov	 DWORD PTR _this$[ebp], ebx
  00026	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 341  : 	pMsg.Result = CB_ERROR;
; 342  : 	int aIndex = lpObj->m_Index;

  0002b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 343  : 	BOOL fail = TRUE;
; 344  : 	int MixResult2;
; 345  : 	lpObj->ChaosLock = TRUE;
; 346  : 	int MixResult3 = -1;
; 347  : 
; 348  : 	if ( ChaosBoxMix(lpObj, MixResult2, MixResult3) == 0 )

  00030	8d 4d d8	 lea	 ecx, DWORD PTR _MixResult3$[ebp]
  00033	51		 push	 ecx
  00034	8d 55 c8	 lea	 edx, DWORD PTR _MixResult2$[ebp]
  00037	b8 01 00 00 00	 mov	 eax, 1
  0003c	52		 push	 edx
  0003d	56		 push	 esi
  0003e	8b cb		 mov	 ecx, ebx
  00040	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00044	89 7d dc	 mov	 DWORD PTR _aIndex$[ebp], edi
  00047	89 45 d4	 mov	 DWORD PTR _fail$[ebp], eax
  0004a	89 86 20 12 00
	00		 mov	 DWORD PTR [esi+4640], eax
  00050	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _MixResult3$[ebp], -1
  00057	e8 00 00 00 00	 call	 ?ChaosBoxMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ; CChaosBox::ChaosBoxMix
  0005c	85 c0		 test	 eax, eax
  0005e	75 33		 jne	 SHORT $LN36@DefaultCha

; 349  : 	{
; 350  : 		pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 351  : 		DataSend(aIndex, (BYTE *)&pMsg, pMsg.h.size);

  00060	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00064	50		 push	 eax
  00065	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00068	51		 push	 ecx
  00069	57		 push	 edi
  0006a	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  0006e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	5f		 pop	 edi

; 352  : 		lpObj->ChaosLock = FALSE;

  00077	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx

; 521  : }

  00083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00086	33 cd		 xor	 ecx, ebp
  00088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
$LN36@DefaultCha:

; 353  : 
; 354  : 		return;
; 355  : 	}
; 356  : 
; 357  : 	int iChaosTaxMoney = (int)((__int64)lpObj->ChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00093	8b 16		 mov	 edx, DWORD PTR [esi]
  00095	52		 push	 edx
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0009b	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  000a0	f7 ae 18 12 00
	00		 imul	 DWORD PTR [esi+4632]
  000a6	33 db		 xor	 ebx, ebx
  000a8	53		 push	 ebx
  000a9	6a 64		 push	 100			; 00000064H
  000ab	52		 push	 edx
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 __alldiv
  000b2	89 45 e4	 mov	 DWORD PTR _iChaosTaxMoney$[ebp], eax

; 358  : 
; 359  : 	if ( iChaosTaxMoney < 0 )

  000b5	3b c3		 cmp	 eax, ebx
  000b7	7d 03		 jge	 SHORT $LN35@DefaultCha

; 360  : 	{
; 361  : 		iChaosTaxMoney = 0;

  000b9	89 5d e4	 mov	 DWORD PTR _iChaosTaxMoney$[ebp], ebx
$LN35@DefaultCha:

; 362  : 	}
; 363  : 
; 364  : 	lpObj->ChaosMoney += iChaosTaxMoney;

  000bc	8b 45 e4	 mov	 eax, DWORD PTR _iChaosTaxMoney$[ebp]
  000bf	01 86 18 12 00
	00		 add	 DWORD PTR [esi+4632], eax

; 365  : 
; 366  : 	if ( lpObj->ChaosMoney < 0 )

  000c5	79 06		 jns	 SHORT $LN34@DefaultCha

; 367  : 	{
; 368  : 		lpObj->ChaosMoney = 0;

  000c7	89 9e 18 12 00
	00		 mov	 DWORD PTR [esi+4632], ebx
$LN34@DefaultCha:

; 369  : 	}
; 370  : 
; 371  : 	if ( lpObj->Money < lpObj->ChaosMoney )

  000cd	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  000d3	3b 8e 18 12 00
	00		 cmp	 ecx, DWORD PTR [esi+4632]
  000d9	7d 21		 jge	 SHORT $LN33@DefaultCha

; 372  : 	{
; 373  : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 374  : 		
; 375  : 		DataSend(aIndex, (BYTE *)&pMsg, pMsg.h.size);

  000db	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  000df	52		 push	 edx
  000e0	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000e3	50		 push	 eax
  000e4	57		 push	 edi
  000e5	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  000e9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 376  : 		lpObj->ChaosLock = FALSE;

  000f1	89 9e 20 12 00
	00		 mov	 DWORD PTR [esi+4640], ebx

; 377  : 
; 378  : 
; 379  : 	}
; 380  : 	else 

  000f7	e9 be 02 00 00	 jmp	 $LN1@DefaultCha
$LN33@DefaultCha:

; 381  : 	{
; 382  : 		if ( lpObj->ChaosSuccessRate > 0 )

  000fc	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  00102	3b c3		 cmp	 eax, ebx
  00104	0f 8e 08 02 00
	00		 jle	 $LN43@DefaultCha

; 383  : 		{
; 384  : 			if ( lpObj->ChaosSuccessRate >= 100 )

  0010a	83 f8 64	 cmp	 eax, 100		; 00000064H
  0010d	7c 0a		 jl	 SHORT $LN30@DefaultCha

; 385  : 			{
; 386  : 				lpObj->ChaosSuccessRate = 100;

  0010f	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H
$LN30@DefaultCha:

; 387  : 			}
; 388  : 
; 389  : 			if ( (rand()%100) <= (lpObj->ChaosSuccessRate-1) ) 

  00119	e8 00 00 00 00	 call	 _rand
  0011e	99		 cdq
  0011f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00124	f7 f9		 idiv	 ecx
  00126	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  0012c	48		 dec	 eax
  0012d	3b d0		 cmp	 edx, eax
  0012f	0f 8f dd 01 00
	00		 jg	 $LN43@DefaultCha

; 390  : 			{
; 391  : 				fail = FALSE;

  00135	89 5d d4	 mov	 DWORD PTR _fail$[ebp], ebx

; 392  : 				pMsg.Result = CB_SUCCESS;

  00138	c6 45 ef 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1

; 393  : 
; 394  : 				int Level = rand()%5;

  0013c	e8 00 00 00 00	 call	 _rand
  00141	99		 cdq
  00142	b9 05 00 00 00	 mov	 ecx, 5
  00147	f7 f9		 idiv	 ecx

; 395  : 				int Option1 = 0;

  00149	89 5d e8	 mov	 DWORD PTR _Option1$190079[ebp], ebx

; 396  : 				int Option2 = 0;

  0014c	89 5d e0	 mov	 DWORD PTR _Option2$190080[ebp], ebx
  0014f	89 55 d0	 mov	 DWORD PTR _Level$190078[ebp], edx

; 397  : 				int Option3 = 0;
; 398  : 
; 399  : 				if ( (rand()%100)< (lpObj->ChaosSuccessRate/5 + 6) )

  00152	e8 00 00 00 00	 call	 _rand
  00157	99		 cdq
  00158	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0015d	f7 f9		 idiv	 ecx
  0015f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00164	8b fa		 mov	 edi, edx
  00166	f7 ae 1c 12 00
	00		 imul	 DWORD PTR [esi+4636]
  0016c	d1 fa		 sar	 edx, 1
  0016e	8b c2		 mov	 eax, edx
  00170	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00173	8d 4c 02 06	 lea	 ecx, DWORD PTR [edx+eax+6]
  00177	3b f9		 cmp	 edi, ecx
  00179	7d 07		 jge	 SHORT $LN42@DefaultCha

; 400  : 				{
; 401  : 					Option1 = 1;

  0017b	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _Option1$190079[ebp], 1
$LN42@DefaultCha:

; 402  : 				}
; 403  : 
; 404  : 				if ( (rand()%100)< (lpObj->ChaosSuccessRate/5 + 4) )

  00182	e8 00 00 00 00	 call	 _rand
  00187	99		 cdq
  00188	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0018d	f7 f9		 idiv	 ecx
  0018f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00194	8b fa		 mov	 edi, edx
  00196	f7 ae 1c 12 00
	00		 imul	 DWORD PTR [esi+4636]
  0019c	d1 fa		 sar	 edx, 1
  0019e	8b c2		 mov	 eax, edx
  001a0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001a3	8d 4c 02 04	 lea	 ecx, DWORD PTR [edx+eax+4]
  001a7	3b f9		 cmp	 edi, ecx
  001a9	7d 07		 jge	 SHORT $LN27@DefaultCha

; 405  : 				{
; 406  : 					Option2 = 1;

  001ab	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$190080[ebp], 1
$LN27@DefaultCha:

; 407  : 				}
; 408  : 
; 409  : 				int OpProb;
; 410  : 				int OpType = rand()%3;

  001b2	e8 00 00 00 00	 call	 _rand
  001b7	99		 cdq
  001b8	b9 03 00 00 00	 mov	 ecx, 3
  001bd	f7 f9		 idiv	 ecx
  001bf	8b fa		 mov	 edi, edx

; 411  : 				OpProb = rand()%100;

  001c1	e8 00 00 00 00	 call	 _rand
  001c6	99		 cdq
  001c7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001cc	f7 f9		 idiv	 ecx

; 412  : 
; 413  : 				switch ( OpType )

  001ce	8b c7		 mov	 eax, edi
  001d0	83 e8 00	 sub	 eax, 0
  001d3	8b ca		 mov	 ecx, edx
  001d5	74 48		 je	 SHORT $LN24@DefaultCha
  001d7	48		 dec	 eax
  001d8	74 24		 je	 SHORT $LN22@DefaultCha
  001da	48		 dec	 eax
  001db	75 61		 jne	 SHORT $LN39@DefaultCha

; 428  : 
; 429  : 					case 2:
; 430  : 						if ( OpProb < (lpObj->ChaosSuccessRate / 5 + 12) ) 

  001dd	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  001e2	f7 ae 1c 12 00
	00		 imul	 DWORD PTR [esi+4636]
  001e8	d1 fa		 sar	 edx, 1
  001ea	8b c2		 mov	 eax, edx
  001ec	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001ef	8d 54 02 0c	 lea	 edx, DWORD PTR [edx+eax+12]
  001f3	3b ca		 cmp	 ecx, edx
  001f5	7d 47		 jge	 SHORT $LN39@DefaultCha

; 431  : 						{
; 432  : 							Option3 = 1;

  001f7	bb 01 00 00 00	 mov	 ebx, 1

; 433  : 						}
; 434  : 						break;

  001fc	eb 40		 jmp	 SHORT $LN39@DefaultCha
$LN22@DefaultCha:

; 419  : 						}
; 420  : 						break;
; 421  : 
; 422  : 					case 1:
; 423  : 						if ( OpProb < (lpObj->ChaosSuccessRate / 5 + 8) ) 

  001fe	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00203	f7 ae 1c 12 00
	00		 imul	 DWORD PTR [esi+4636]
  00209	d1 fa		 sar	 edx, 1
  0020b	8b c2		 mov	 eax, edx
  0020d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00210	8d 54 02 08	 lea	 edx, DWORD PTR [edx+eax+8]
  00214	3b ca		 cmp	 ecx, edx
  00216	7d 26		 jge	 SHORT $LN39@DefaultCha

; 424  : 						{
; 425  : 							Option3 = 2;

  00218	bb 02 00 00 00	 mov	 ebx, 2

; 426  : 						}
; 427  : 						break;

  0021d	eb 1f		 jmp	 SHORT $LN39@DefaultCha
$LN24@DefaultCha:

; 414  : 				{
; 415  : 					case 0:
; 416  : 						if ( OpProb < (lpObj->ChaosSuccessRate / 5 + 4) ) 

  0021f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00224	f7 ae 1c 12 00
	00		 imul	 DWORD PTR [esi+4636]
  0022a	d1 fa		 sar	 edx, 1
  0022c	8b c2		 mov	 eax, edx
  0022e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00231	8d 54 02 04	 lea	 edx, DWORD PTR [edx+eax+4]
  00235	3b ca		 cmp	 ecx, edx
  00237	7d 05		 jge	 SHORT $LN39@DefaultCha

; 417  : 						{
; 418  : 							Option3 = 3;

  00239	bb 03 00 00 00	 mov	 ebx, 3
$LN39@DefaultCha:

; 435  : 				}
; 436  : 
; 437  : 				if ( MixResult2 == TRUE )
; 438  : 				{
; 439  : 					int WingType = rand()%4;

  0023e	e8 00 00 00 00	 call	 _rand
  00243	83 7d c8 01	 cmp	 DWORD PTR _MixResult2$[ebp], 1
  00247	75 68		 jne	 SHORT $LN18@DefaultCha
  00249	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0024e	79 05		 jns	 SHORT $LN44@DefaultCha
  00250	48		 dec	 eax
  00251	83 c8 fc	 or	 eax, -4			; fffffffcH
  00254	40		 inc	 eax
$LN44@DefaultCha:

; 440  : 					int WingNum = 0;
; 441  : 
; 442  : 					if ( MixResult3 > -1 )

  00255	8b 55 d8	 mov	 edx, DWORD PTR _MixResult3$[ebp]
  00258	33 c9		 xor	 ecx, ecx
  0025a	83 fa ff	 cmp	 edx, -1
  0025d	7e 08		 jle	 SHORT $LN17@DefaultCha

; 443  : 					{
; 444  : 						WingNum = ITEMGET(12,00) + MixResult3;

  0025f	8d 8a 00 18 00
	00		 lea	 ecx, DWORD PTR [edx+6144]

; 445  : 					}
; 446  : 					else

  00265	eb 2d		 jmp	 SHORT $LN9@DefaultCha
$LN17@DefaultCha:

; 447  : 					{
; 448  : 						if ( WingType == 0 )

  00267	85 c0		 test	 eax, eax
  00269	75 07		 jne	 SHORT $LN15@DefaultCha

; 449  : 						{
; 450  : 							WingNum = ITEMGET(12,0);

  0026b	b9 00 18 00 00	 mov	 ecx, 6144		; 00001800H
  00270	eb 22		 jmp	 SHORT $LN9@DefaultCha
$LN15@DefaultCha:

; 451  : 						}
; 452  : 						else if ( WingType == 1 )

  00272	83 f8 01	 cmp	 eax, 1
  00275	75 07		 jne	 SHORT $LN13@DefaultCha

; 453  : 						{
; 454  : 							WingNum = ITEMGET(12,1);

  00277	b9 01 18 00 00	 mov	 ecx, 6145		; 00001801H
  0027c	eb 16		 jmp	 SHORT $LN9@DefaultCha
$LN13@DefaultCha:

; 455  : 						}
; 456  : 						else if ( WingType == 2 )

  0027e	83 f8 02	 cmp	 eax, 2
  00281	75 07		 jne	 SHORT $LN11@DefaultCha

; 457  : 						{
; 458  : 							WingNum = ITEMGET(12,2);

  00283	b9 02 18 00 00	 mov	 ecx, 6146		; 00001802H
  00288	eb 0a		 jmp	 SHORT $LN9@DefaultCha
$LN11@DefaultCha:

; 459  : 						}
; 460  : 						else if ( WingType == 3 )

  0028a	83 f8 03	 cmp	 eax, 3
  0028d	75 05		 jne	 SHORT $LN9@DefaultCha

; 461  : 						{
; 462  : 							WingNum = ITEMGET(12,41);

  0028f	b9 29 18 00 00	 mov	 ecx, 6185		; 00001829H
$LN9@DefaultCha:

; 463  : 						}
; 464  : 					}
; 465  : 
; 466  : 					::ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, WingNum, 0, 255, Option1, Option2, Option3, -1, 0, 0);

  00294	8b 45 e0	 mov	 eax, DWORD PTR _Option2$190080[ebp]
  00297	8b 55 e8	 mov	 edx, DWORD PTR _Option1$190079[ebp]
  0029a	6a 00		 push	 0
  0029c	6a 00		 push	 0
  0029e	6a 00		 push	 0
  002a0	6a 00		 push	 0
  002a2	6a ff		 push	 -1
  002a4	53		 push	 ebx
  002a5	50		 push	 eax
  002a6	52		 push	 edx
  002a7	68 ff 00 00 00	 push	 255			; 000000ffH
  002ac	6a 00		 push	 0
  002ae	51		 push	 ecx

; 467  : 				}
; 468  : 				else

  002af	eb 48		 jmp	 SHORT $LN45@DefaultCha
$LN18@DefaultCha:

; 469  : 				{
; 470  : 					int ChaosItemType = rand()%3;

  002b1	99		 cdq
  002b2	b9 03 00 00 00	 mov	 ecx, 3
  002b7	f7 f9		 idiv	 ecx

; 471  : 					int ChaosItemNum = 0;

  002b9	33 c0		 xor	 eax, eax

; 472  : 
; 473  : 					if ( ChaosItemType == 0 )	// Chaos Dragon Axe

  002bb	85 d2		 test	 edx, edx
  002bd	75 07		 jne	 SHORT $LN7@DefaultCha

; 474  : 					{
; 475  : 						ChaosItemNum = ITEMGET(2,6);

  002bf	b8 06 04 00 00	 mov	 eax, 1030		; 00000406H
  002c4	eb 16		 jmp	 SHORT $LN3@DefaultCha
$LN7@DefaultCha:

; 476  : 					}
; 477  : 					else if ( ChaosItemType == 1 )	// Chaos Nature Bow

  002c6	83 fa 01	 cmp	 edx, 1
  002c9	75 07		 jne	 SHORT $LN5@DefaultCha

; 478  : 					{
; 479  : 						ChaosItemNum = ITEMGET(4,6);

  002cb	b8 06 08 00 00	 mov	 eax, 2054		; 00000806H
  002d0	eb 0a		 jmp	 SHORT $LN3@DefaultCha
$LN5@DefaultCha:

; 480  : 					}
; 481  : 					else if ( ChaosItemType == 2 )	// Chaos Lighting Staff

  002d2	83 fa 02	 cmp	 edx, 2
  002d5	75 05		 jne	 SHORT $LN3@DefaultCha

; 482  : 					{
; 483  : 						ChaosItemNum = ITEMGET(5,7);

  002d7	b8 07 0a 00 00	 mov	 eax, 2567		; 00000a07H
$LN3@DefaultCha:

; 484  : 					}
; 485  : 
; 486  : 					::ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ChaosItemNum, Level, 255, Option1, Option2, Option3, -1, 0, 0);

  002dc	8b 55 e0	 mov	 edx, DWORD PTR _Option2$190080[ebp]
  002df	8b 4d e8	 mov	 ecx, DWORD PTR _Option1$190079[ebp]
  002e2	6a 00		 push	 0
  002e4	6a 00		 push	 0
  002e6	6a 00		 push	 0
  002e8	6a 00		 push	 0
  002ea	6a ff		 push	 -1
  002ec	53		 push	 ebx
  002ed	52		 push	 edx
  002ee	8b 55 d0	 mov	 edx, DWORD PTR _Level$190078[ebp]
  002f1	51		 push	 ecx
  002f2	68 ff 00 00 00	 push	 255			; 000000ffH
  002f7	52		 push	 edx
  002f8	50		 push	 eax
$LN45@DefaultCha:
  002f9	8b 06		 mov	 eax, DWORD PTR [esi]
  002fb	6a 00		 push	 0
  002fd	6a 00		 push	 0
  002ff	68 ff 00 00 00	 push	 255			; 000000ffH
  00304	50		 push	 eax
  00305	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend
  0030a	8b 7d dc	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0030d	83 c4 3c	 add	 esp, 60			; 0000003cH
  00310	33 db		 xor	 ebx, ebx
$LN43@DefaultCha:

; 487  : 				}
; 488  : 			}
; 489  : 		}
; 490  : 
; 491  : 
; 492  : 		lpObj->Money -= lpObj->ChaosMoney;

  00312	8b 8e 18 12 00
	00		 mov	 ecx, DWORD PTR [esi+4632]

; 493  : 		g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00318	8b 55 e4	 mov	 edx, DWORD PTR _iChaosTaxMoney$[ebp]
  0031b	29 8e cc 00 00
	00		 sub	 DWORD PTR [esi+204], ecx
  00321	52		 push	 edx
  00322	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00327	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 494  : 		GCMoneySend(lpObj->m_Index, lpObj->Money);

  0032c	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00332	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00334	50		 push	 eax
  00335	51		 push	 ecx
  00336	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0033b	83 c4 08	 add	 esp, 8

; 495  : 
; 496  : 		if ( fail == TRUE )

  0033e	83 7d d4 01	 cmp	 DWORD PTR _fail$[ebp], 1
  00342	75 52		 jne	 SHORT $LN2@DefaultCha

; 497  : 		{
; 498  : 			ChaosBoxItemDown(lpObj);

  00344	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00347	56		 push	 esi
  00348	e8 00 00 00 00	 call	 ?ChaosBoxItemDown@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxItemDown

; 499  : 			GCUserChaosBoxSend(lpObj, 0);

  0034d	53		 push	 ebx
  0034e	56		 push	 esi
  0034f	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 500  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  00354	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00358	52		 push	 edx
  00359	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0035c	50		 push	 eax
  0035d	57		 push	 edi
  0035e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 501  : 			LogAddTD("[%s][%s] CBMix Fail %d Money : %d-%d",
; 502  : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 503  : 				lpObj->Money, lpObj->ChaosMoney);

  00363	8b 8e 18 12 00
	00		 mov	 ecx, DWORD PTR [esi+4632]
  00369	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0036f	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  00375	51		 push	 ecx
  00376	52		 push	 edx
  00377	50		 push	 eax
  00378	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  0037b	51		 push	 ecx
  0037c	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  0037f	52		 push	 edx
  00380	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NPEOFJKC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5?$CFd?5Money?5?3?5?$CF@
  00385	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0038b	83 c4 2c	 add	 esp, 44			; 0000002cH

; 504  : 			lpObj->ChaosLock = FALSE;

  0038e	89 9e 20 12 00
	00		 mov	 DWORD PTR [esi+4640], ebx

; 505  : #if( __4GAMERS__ == 1 )
; 506  : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 507  : #endif
; 508  : 		}
; 509  : 		else

  00394	eb 24		 jmp	 SHORT $LN1@DefaultCha
$LN2@DefaultCha:

; 510  : 		{
; 511  : 			LogAddTD("[%s][%s] CBMix Success Rate:%d Money : %d",
; 512  : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 513  : 				lpObj->ChaosMoney);

  00396	8b 86 18 12 00
	00		 mov	 eax, DWORD PTR [esi+4632]
  0039c	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  003a2	50		 push	 eax
  003a3	51		 push	 ecx
  003a4	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  003a7	52		 push	 edx
  003a8	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  003ab	50		 push	 eax
  003ac	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@IKEPLJDI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Success?5Rate?3?$CFd?5M@
  003b1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003b7	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@DefaultCha:

; 514  : #if( __4GAMERS__ == 1 )
; 515  : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 516  : #endif
; 517  : 		}
; 518  : 	}
; 519  : 
; 520  : 	::gObjInventoryCommit(lpObj->m_Index);

  003ba	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003bc	51		 push	 ecx
  003bd	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 521  : }

  003c2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c5	83 c4 04	 add	 esp, 4
  003c8	5f		 pop	 edi
  003c9	5e		 pop	 esi
  003ca	33 cd		 xor	 ecx, ebp
  003cc	5b		 pop	 ebx
  003cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003d2	8b e5		 mov	 esp, ebp
  003d4	5d		 pop	 ebp
  003d5	c2 04 00	 ret	 4
?DefaultChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::DefaultChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0HL@GCCPEJBG@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LogDQChaosItem
EXTRN	?GetItemStrengthenOption@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z:PROC ; CJewelOfHarmonySystem::GetItemStrengthenOption
EXTRN	?GetItemOptionLevel@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z:PROC ; CJewelOfHarmonySystem::GetItemOptionLevel
EXTRN	?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A:BYTE ; g_kJewelOfHarmonySystem
;	COMDAT ??_C@_0HL@GCCPEJBG@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
CONST	SEGMENT
??_C@_0HL@GCCPEJBG@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ DB '['
	DB	'DevilSquare,%d] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%d]'
	DB	'[%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d] 380Ex[%d] HO:[%d,%d]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_n$190126 = -16						; size = 4
_ExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::LogDQChaosItem, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 525  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 526  : 
; 527  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00016	33 ff		 xor	 edi, edi
  00018	89 7d f0	 mov	 DWORD PTR _n$190126[ebp], edi
  0001b	eb 03 8d 49 00	 npad	 5
$LL4@LogDQChaos:

; 528  : 	{
; 529  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00020	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00026	03 cf		 add	 ecx, edi
  00028	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0002d	83 f8 01	 cmp	 eax, 1
  00030	0f 85 d3 00 00
	00		 jne	 $LN3@LogDQChaos

; 530  : 		{
; 531  : 			::ItemIsBufExOption(ExOption, &lpObj->pChaosBox[n] );

  00036	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0003c	03 c7		 add	 eax, edi
  0003e	50		 push	 eax
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR _ExOption$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 532  : 
; 533  : 			LogAddTD("[DevilSquare,%d] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%d][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d] 380Ex[%d] HO:[%d,%d]",
; 534  : 				lpObj->pChaosBox[n].m_Level,
; 535  : 				lpObj->AccountID, lpObj->Name, n, lpObj->pChaosBox[n].GetName(), lpObj->pChaosBox[n].m_Level,
; 536  : 				lpObj->pChaosBox[n].m_Option1, lpObj->pChaosBox[n].m_Option2, lpObj->pChaosBox[n].m_Option3, 
; 537  : 				lpObj->pChaosBox[n].m_Number, (int)lpObj->pChaosBox[n].m_Durability, 
; 538  : 				ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5], ExOption[6],
; 539  : 				lpObj->pChaosBox[n].m_SetOption, lpObj->pChaosBox[n].m_ItemOptionEx >> 7,
; 540  : 				g_kJewelOfHarmonySystem.GetItemStrengthenOption(&lpObj->pChaosBox[n]),
; 541  : 				g_kJewelOfHarmonySystem.GetItemOptionLevel(&lpObj->pChaosBox[n]));

  00048	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  0004e	8d 34 17	 lea	 esi, DWORD PTR [edi+edx]
  00051	83 c4 08	 add	 esp, 8
  00054	03 d7		 add	 edx, edi
  00056	52		 push	 edx
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  0005c	e8 00 00 00 00	 call	 ?GetItemOptionLevel@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemOptionLevel
  00061	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  00067	0f b6 c8	 movzx	 ecx, al
  0006a	51		 push	 ecx
  0006b	03 d7		 add	 edx, edi
  0006d	52		 push	 edx
  0006e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  00073	e8 00 00 00 00	 call	 ?GetItemStrengthenOption@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemStrengthenOption
  00078	0f b6 8e c6 00
	00 00		 movzx	 ecx, BYTE PTR [esi+198]
  0007f	d9 46 24	 fld	 DWORD PTR [esi+36]
  00082	0f b6 96 aa 00
	00 00		 movzx	 edx, BYTE PTR [esi+170]
  00089	0f b6 c0	 movzx	 eax, al
  0008c	50		 push	 eax
  0008d	0f b6 45 fa	 movzx	 eax, BYTE PTR _ExOption$[ebp+6]
  00091	c1 e9 07	 shr	 ecx, 7
  00094	51		 push	 ecx
  00095	0f b6 4d f9	 movzx	 ecx, BYTE PTR _ExOption$[ebp+5]
  00099	52		 push	 edx
  0009a	0f b6 55 f8	 movzx	 edx, BYTE PTR _ExOption$[ebp+4]
  0009e	50		 push	 eax
  0009f	0f b6 45 f7	 movzx	 eax, BYTE PTR _ExOption$[ebp+3]
  000a3	51		 push	 ecx
  000a4	0f b6 4d f6	 movzx	 ecx, BYTE PTR _ExOption$[ebp+2]
  000a8	52		 push	 edx
  000a9	0f b6 55 f5	 movzx	 edx, BYTE PTR _ExOption$[ebp+1]
  000ad	50		 push	 eax
  000ae	0f b6 45 f4	 movzx	 eax, BYTE PTR _ExOption$[ebp]
  000b2	51		 push	 ecx
  000b3	52		 push	 edx
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 __ftol2_sse
  000ba	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000bc	0f b6 96 92 00
	00 00		 movzx	 edx, BYTE PTR [esi+146]
  000c3	50		 push	 eax
  000c4	0f b6 86 91 00
	00 00		 movzx	 eax, BYTE PTR [esi+145]
  000cb	51		 push	 ecx
  000cc	0f b6 8e 90 00
	00 00		 movzx	 ecx, BYTE PTR [esi+144]
  000d3	52		 push	 edx
  000d4	0f bf 56 08	 movsx	 edx, WORD PTR [esi+8]
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	52		 push	 edx
  000db	8b ce		 mov	 ecx, esi
  000dd	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  000e2	50		 push	 eax
  000e3	8b 45 f0	 mov	 eax, DWORD PTR _n$190126[ebp]
  000e6	50		 push	 eax
  000e7	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  000ed	8d 4b 5d	 lea	 ecx, DWORD PTR [ebx+93]
  000f0	51		 push	 ecx
  000f1	0f bf 4c 07 08	 movsx	 ecx, WORD PTR [edi+eax+8]
  000f6	8d 53 52	 lea	 edx, DWORD PTR [ebx+82]
  000f9	52		 push	 edx
  000fa	51		 push	 ecx
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0HL@GCCPEJBG@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00106	83 c4 5c	 add	 esp, 92			; 0000005cH
$LN3@LogDQChaos:

; 525  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 526  : 
; 527  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00109	ff 45 f0	 inc	 DWORD PTR _n$190126[ebp]
  0010c	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00112	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00118	0f 8c 02 ff ff
	ff		 jl	 $LL4@LogDQChaos

; 542  : 		}
; 543  : 	}
; 544  : }

  0011e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	33 cd		 xor	 ecx, ebp
  00125	5b		 pop	 ebx
  00126	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 04 00	 ret	 4
?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::LogDQChaosItem
_TEXT	ENDS
PUBLIC	??_C@_0CA@IANBADIL@?$FLDevilSquare?$FN?5DQItems?5Not?5Found?$AA@ ; `string'
PUBLIC	??_C@_0CH@EJJKJEAB@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Coun@ ; `string'
PUBLIC	??_C@_0CG@FFFDDFEO@?$FLDevilSquare?$FN?5DiffLevel?5DQItems?5@ ; `string'
PUBLIC	??_C@_0CC@LINAPAPC@?$FLDevilSquare?$FN?5Other?5DQItems?5Foun@ ; `string'
PUBLIC	??_C@_0CF@MGDMILOL@?$FLDevilSquare?$FN?5Search?5DevilSquare@ ; `string'
PUBLIC	?CheckDevilSquareItem@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ; CChaosBox::CheckDevilSquareItem
;	COMDAT ??_C@_0CA@IANBADIL@?$FLDevilSquare?$FN?5DQItems?5Not?5Found?$AA@
CONST	SEGMENT
??_C@_0CA@IANBADIL@?$FLDevilSquare?$FN?5DQItems?5Not?5Found?$AA@ DB '[Dev'
	DB	'ilSquare] DQItems Not Found', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EJJKJEAB@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Coun@
CONST	SEGMENT
??_C@_0CH@EJJKJEAB@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Coun@ DB '[Devil'
	DB	'Square] Charm Of Luck Count Over', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FFFDDFEO@?$FLDevilSquare?$FN?5DiffLevel?5DQItems?5@
CONST	SEGMENT
??_C@_0CG@FFFDDFEO@?$FLDevilSquare?$FN?5DiffLevel?5DQItems?5@ DB '[DevilS'
	DB	'quare] DiffLevel DQItems Found', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LINAPAPC@?$FLDevilSquare?$FN?5Other?5DQItems?5Foun@
CONST	SEGMENT
??_C@_0CC@LINAPAPC@?$FLDevilSquare?$FN?5Other?5DQItems?5Foun@ DB '[DevilS'
	DB	'quare] Other DQItems Found', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MGDMILOL@?$FLDevilSquare?$FN?5Search?5DevilSquare@
CONST	SEGMENT
??_C@_0CF@MGDMILOL@?$FLDevilSquare?$FN?5Search?5DevilSquare@ DB '[DevilSq'
	DB	'uare] Search DevilSquareItem', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckDevilSquareItem@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z
_TEXT	SEGMENT
tv309 = -32						; size = 4
_this$ = -28						; size = 4
_bChaoseGem$ = -24					; size = 4
_bCharmOfLuckOver$ = -20				; size = 4
_FoundOtherItem$ = -16					; size = 4
_bKeyOfDevil$ = -12					; size = 4
_bEyeOfDevil$ = -8					; size = 4
_bLevelCheck$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iCharmOfLuckCount$ = 12				; size = 4
_eventitemcount$ = 12					; size = 4
_itemlevel$ = 16					; size = 4
?CheckDevilSquareItem@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z PROC ; CChaosBox::CheckDevilSquareItem, COMDAT
; _this$ = ecx

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx

; 548  : 	BOOL bChaoseGem = FALSE;
; 549  : 	BOOL bEyeOfDevil = FALSE;
; 550  : 	BOOL bKeyOfDevil = FALSE;
; 551  : 	eventitemcount = 0;

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _eventitemcount$[ebp]
  0000a	56		 push	 esi
  0000b	33 f6		 xor	 esi, esi
  0000d	57		 push	 edi

; 552  : 	BOOL FoundOtherItem = FALSE;
; 553  : 	int level = -1;
; 554  : 	BOOL bLevelCheck = FALSE;
; 555  : 	int iCharmOfLuckCount = 0;
; 556  : 	BOOL bCharmOfLuckOver = FALSE;
; 557  : 
; 558  : 	LogAdd("[DevilSquare] Search DevilSquareItem");

  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MGDMILOL@?$FLDevilSquare?$FN?5Search?5DevilSquare@
  00013	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  00016	89 75 e8	 mov	 DWORD PTR _bChaoseGem$[ebp], esi
  00019	89 75 f8	 mov	 DWORD PTR _bEyeOfDevil$[ebp], esi
  0001c	89 75 f4	 mov	 DWORD PTR _bKeyOfDevil$[ebp], esi
  0001f	89 33		 mov	 DWORD PTR [ebx], esi
  00021	89 75 f0	 mov	 DWORD PTR _FoundOtherItem$[ebp], esi
  00024	83 cf ff	 or	 edi, -1
  00027	89 75 fc	 mov	 DWORD PTR _bLevelCheck$[ebp], esi
  0002a	89 75 0c	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], esi
  0002d	89 75 ec	 mov	 DWORD PTR _bCharmOfLuckOver$[ebp], esi
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00036	83 c4 04	 add	 esp, 4
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL24@CheckDevil:

; 561  : 	{
; 562  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00040	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00043	8b 88 10 12 00
	00		 mov	 ecx, DWORD PTR [eax+4624]
  00049	03 ce		 add	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00050	83 f8 01	 cmp	 eax, 1
  00053	0f 85 9c 00 00
	00		 jne	 $LN23@CheckDevil

; 563  : 		{
; 564  : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )	// Chaos

  00059	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0005c	8b 81 10 12 00
	00		 mov	 eax, DWORD PTR [ecx+4624]
  00062	03 c6		 add	 eax, esi
  00064	89 45 e0	 mov	 DWORD PTR tv309[ebp], eax
  00067	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  0006b	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00070	66 3b c2	 cmp	 ax, dx
  00073	75 09		 jne	 SHORT $LN20@CheckDevil

; 565  : 			{
; 566  : 				bChaoseGem = TRUE;

  00075	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _bChaoseGem$[ebp], 1
  0007c	eb 77		 jmp	 SHORT $LN23@CheckDevil
$LN20@CheckDevil:

; 567  : 			}
; 568  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,17) )	// Eye

  0007e	ba 11 1c 00 00	 mov	 edx, 7185		; 00001c11H
  00083	66 3b c2	 cmp	 ax, dx
  00086	75 22		 jne	 SHORT $LN18@CheckDevil

; 569  : 			{
; 570  : 				eventitemcount +=1;

  00088	ba 01 00 00 00	 mov	 edx, 1

; 571  : 				bEyeOfDevil = TRUE;

  0008d	89 55 f8	 mov	 DWORD PTR _bEyeOfDevil$[ebp], edx
$LN33@CheckDevil:

; 572  : 
; 573  : 				if ( level != lpObj->pChaosBox[n].m_Level )

  00090	01 13		 add	 DWORD PTR [ebx], edx
  00092	8b 81 10 12 00
	00		 mov	 eax, DWORD PTR [ecx+4624]
  00098	0f bf 44 30 08	 movsx	 eax, WORD PTR [eax+esi+8]
  0009d	3b f8		 cmp	 edi, eax
  0009f	74 54		 je	 SHORT $LN23@CheckDevil

; 574  : 				{
; 575  : 					if ( level == -1 )

  000a1	83 ff ff	 cmp	 edi, -1
  000a4	75 18		 jne	 SHORT $LN11@CheckDevil

; 576  : 					{
; 577  : 						level = lpObj->pChaosBox[n].m_Level;

  000a6	8b f8		 mov	 edi, eax

; 578  : 					}
; 579  : 					else

  000a8	eb 4b		 jmp	 SHORT $LN23@CheckDevil
$LN18@CheckDevil:

; 580  : 					{
; 581  : 						bLevelCheck = TRUE;
; 582  : 					}
; 583  : 				}
; 584  : 			}
; 585  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,18) )	// Key

  000aa	ba 12 1c 00 00	 mov	 edx, 7186		; 00001c12H
  000af	66 3b c2	 cmp	 ax, dx
  000b2	75 0f		 jne	 SHORT $LN13@CheckDevil

; 586  : 			{
; 587  : 				eventitemcount +=1;

  000b4	ba 01 00 00 00	 mov	 edx, 1

; 588  : 				bKeyOfDevil = TRUE;

  000b9	89 55 f4	 mov	 DWORD PTR _bKeyOfDevil$[ebp], edx

; 589  : 
; 590  : 				if ( level != lpObj->pChaosBox[n].m_Level )
; 591  : 				{
; 592  : 					if ( level == -1 )
; 593  : 					{
; 594  : 						level = lpObj->pChaosBox[n].m_Level;
; 595  : 					}
; 596  : 					else

  000bc	eb d2		 jmp	 SHORT $LN33@CheckDevil
$LN11@CheckDevil:

; 597  : 					{
; 598  : 						bLevelCheck = TRUE;

  000be	89 55 fc	 mov	 DWORD PTR _bLevelCheck$[ebp], edx

; 599  : 					}
; 600  : 				}
; 601  : 			}

  000c1	eb 32		 jmp	 SHORT $LN23@CheckDevil
$LN13@CheckDevil:

; 602  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  000c3	b9 35 1c 00 00	 mov	 ecx, 7221		; 00001c35H
  000c8	66 3b c1	 cmp	 ax, cx
  000cb	75 21		 jne	 SHORT $LN8@CheckDevil

; 603  : 			{
; 604  : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000cd	8b 55 e0	 mov	 edx, DWORD PTR tv309[ebp]
  000d0	d9 42 24	 fld	 DWORD PTR [edx+36]
  000d3	e8 00 00 00 00	 call	 __ftol2_sse
  000d8	8b 4d 0c	 mov	 ecx, DWORD PTR _iCharmOfLuckCount$[ebp]
  000db	03 c8		 add	 ecx, eax
  000dd	89 4d 0c	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], ecx

; 605  : 
; 606  : 				if ( iCharmOfLuckCount > 10 )

  000e0	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  000e3	7e 10		 jle	 SHORT $LN23@CheckDevil

; 607  : 				{
; 608  : 					bCharmOfLuckOver = TRUE;

  000e5	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bCharmOfLuckOver$[ebp], 1

; 609  : 				}
; 610  : 			}
; 611  : 			else

  000ec	eb 07		 jmp	 SHORT $LN23@CheckDevil
$LN8@CheckDevil:

; 612  : 			{
; 613  : 				FoundOtherItem = TRUE;

  000ee	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _FoundOtherItem$[ebp], 1
$LN23@CheckDevil:

; 559  : 
; 560  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000f5	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  000fb	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  00101	0f 8c 39 ff ff
	ff		 jl	 $LL24@CheckDevil

; 614  : 			}
; 615  : 		}
; 616  : 	}
; 617  : 
; 618  : 	itemlevel = level;
; 619  : 	lpObj->ChaosSuccessRate = iCharmOfLuckCount;
; 620  : 
; 621  : 	if ( FoundOtherItem != FALSE )

  00107	83 7d f0 00	 cmp	 DWORD PTR _FoundOtherItem$[ebp], 0
  0010b	8b 45 10	 mov	 eax, DWORD PTR _itemlevel$[ebp]
  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _iCharmOfLuckCount$[ebp]
  00111	89 38		 mov	 DWORD PTR [eax], edi
  00113	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	89 88 1c 12 00
	00		 mov	 DWORD PTR [eax+4636], ecx
  0011e	5b		 pop	 ebx
  0011f	74 16		 je	 SHORT $LN5@CheckDevil

; 622  : 	{
; 623  : 		LogAdd("[DevilSquare] Other DQItems Found");

  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LINAPAPC@?$FLDevilSquare?$FN?5Other?5DQItems?5Foun@

; 649  : 	}
; 650  : 
; 651  : 	LogAdd("[DevilSquare] DQItems Not Found");

  00126	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0012c	83 c4 04	 add	 esp, 4

; 652  : 
; 653  : 	return 0;

  0012f	33 c0		 xor	 eax, eax

; 654  : }

  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 0c 00	 ret	 12			; 0000000cH
$LN5@CheckDevil:

; 624  : 		return 0;
; 625  : 	}
; 626  : 
; 627  : 	if ( bLevelCheck != FALSE )

  00137	83 7d fc 00	 cmp	 DWORD PTR _bLevelCheck$[ebp], 0
  0013b	74 19		 je	 SHORT $LN4@CheckDevil

; 628  : 	{
; 629  : 		LogAdd("[DevilSquare] DiffLevel DQItems Found");

  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FFFDDFEO@?$FLDevilSquare?$FN?5DiffLevel?5DQItems?5@
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00148	83 c4 04	 add	 esp, 4

; 630  : 		return 3;

  0014b	b8 03 00 00 00	 mov	 eax, 3

; 654  : }

  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c2 0c 00	 ret	 12			; 0000000cH
$LN4@CheckDevil:

; 631  : 	}
; 632  : 
; 633  : 	if ( bCharmOfLuckOver == TRUE )

  00156	83 7d ec 01	 cmp	 DWORD PTR _bCharmOfLuckOver$[ebp], 1
  0015a	75 19		 jne	 SHORT $LN3@CheckDevil

; 634  : 	{
; 635  : 		LogAdd("[DevilSquare] Charm Of Luck Count Over");

  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@EJJKJEAB@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Coun@
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00167	83 c4 04	 add	 esp, 4

; 636  : 		return 4;

  0016a	b8 04 00 00 00	 mov	 eax, 4

; 654  : }

  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 0c 00	 ret	 12			; 0000000cH
$LN3@CheckDevil:

; 637  : 	}
; 638  : 
; 639  : 	if ( bChaoseGem != FALSE && bEyeOfDevil != FALSE && bKeyOfDevil != FALSE )

  00175	83 7d e8 00	 cmp	 DWORD PTR _bChaoseGem$[ebp], 0
  00179	74 20		 je	 SHORT $LN30@CheckDevil
  0017b	83 7d f8 00	 cmp	 DWORD PTR _bEyeOfDevil$[ebp], 0
  0017f	74 3a		 je	 SHORT $LN1@CheckDevil
  00181	83 7d f4 00	 cmp	 DWORD PTR _bKeyOfDevil$[ebp], 0
  00185	74 14		 je	 SHORT $LN30@CheckDevil

; 640  : 	{
; 641  : 		LogDQChaosItem(lpObj);

  00187	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LogDQChaosItem

; 642  : 		return 1;

  00190	b8 01 00 00 00	 mov	 eax, 1

; 654  : }

  00195	8b e5		 mov	 esp, ebp
  00197	5d		 pop	 ebp
  00198	c2 0c 00	 ret	 12			; 0000000cH
$LN30@CheckDevil:

; 643  : 	}
; 644  : 
; 645  : 	if ( bEyeOfDevil != FALSE && bKeyOfDevil != FALSE )

  0019b	83 7d f8 00	 cmp	 DWORD PTR _bEyeOfDevil$[ebp], 0
  0019f	74 1a		 je	 SHORT $LN1@CheckDevil
  001a1	83 7d f4 00	 cmp	 DWORD PTR _bKeyOfDevil$[ebp], 0
  001a5	74 14		 je	 SHORT $LN1@CheckDevil

; 646  : 	{
; 647  : 		LogDQChaosItem(lpObj);

  001a7	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LogDQChaosItem

; 648  : 		return 2;

  001b0	b8 02 00 00 00	 mov	 eax, 2

; 654  : }

  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 0c 00	 ret	 12			; 0000000cH
$LN1@CheckDevil:

; 649  : 	}
; 650  : 
; 651  : 	LogAdd("[DevilSquare] DQItems Not Found");

  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IANBADIL@?$FLDevilSquare?$FN?5DQItems?5Not?5Found?$AA@
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001c6	83 c4 04	 add	 esp, 4

; 652  : 
; 653  : 	return 0;

  001c9	33 c0		 xor	 eax, eax

; 654  : }

  001cb	8b e5		 mov	 esp, ebp
  001cd	5d		 pop	 ebp
  001ce	c2 0c 00	 ret	 12			; 0000000cH
?CheckDevilSquareItem@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ENDP ; CChaosBox::CheckDevilSquareItem
_TEXT	ENDS
PUBLIC	??_C@_0DB@BMAIOAHL@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5D@ ; `string'
PUBLIC	??_C@_0DL@ODHCGDBD@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ ; `string'
PUBLIC	??_C@_0DG@KKBIIBFP@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ ; `string'
PUBLIC	??_C@_0EB@HHHNMGIM@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Not@ ; `string'
PUBLIC	??_C@_0BO@MDACFBLC@?$FLDevilSquare?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DevilSquareEventChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CChaosBox::DevilSquareEventChaosMix
EXTRN	?GetPlusChaosRate@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetPlusChaosRate
EXTRN	?g_iCrywolfApplyMvpBenefit@@3HA:DWORD		; g_iCrywolfApplyMvpBenefit
EXTRN	?GetOccupationState@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetOccupationState
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
EXTRN	?gDQChaosSuccessRateLevel7@@3HA:DWORD		; gDQChaosSuccessRateLevel7
EXTRN	?gDQChaosSuccessRateLevel6@@3HA:DWORD		; gDQChaosSuccessRateLevel6
EXTRN	?gDQChaosSuccessRateLevel5@@3HA:DWORD		; gDQChaosSuccessRateLevel5
EXTRN	?gDQChaosSuccessRateLevel4@@3HA:DWORD		; gDQChaosSuccessRateLevel4
EXTRN	?gDQChaosSuccessRateLevel3@@3HA:DWORD		; gDQChaosSuccessRateLevel3
EXTRN	?gDQChaosSuccessRateLevel2@@3HA:DWORD		; gDQChaosSuccessRateLevel2
EXTRN	?gDQChaosSuccessRateLevel1@@3HA:DWORD		; gDQChaosSuccessRateLevel1
;	COMDAT ??_C@_0DB@BMAIOAHL@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5D@
CONST	SEGMENT
??_C@_0DB@BMAIOAHL@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5D@ DB '['
	DB	'DevilSquare] [%s][%s] Invalid DQItem Level [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@ODHCGDBD@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
CONST	SEGMENT
??_C@_0DL@ODHCGDBD@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ DB '['
	DB	'DevilSquare,%d] [%s][%s] CBMix Success Rate:%d Money : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KKBIIBFP@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
CONST	SEGMENT
??_C@_0DG@KKBIIBFP@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ DB '['
	DB	'DevilSquare,%d] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HHHNMGIM@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Not@
CONST	SEGMENT
??_C@_0EB@HHHNMGIM@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Not@ DB '['
	DB	'DevilSquare] [%s][%s] CBMix Not Enough Money [%d] need zen [%'
	DB	'd]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MDACFBLC@?$FLDevilSquare?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BO@MDACFBLC@?$FLDevilSquare?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Devil'
	DB	'Square] Chaos Mix Start', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DevilSquareEventChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
_iCharmOfLuckCount$ = -32				; size = 4
_fail$ = -28						; size = 4
_aIndex$ = -24						; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_bCheckType$ = 12					; size = 4
_iItemLevel$ = 16					; size = 4
?DevilSquareEventChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CChaosBox::DevilSquareEventChaosMix, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 658  : 	BOOL fail = TRUE;
; 659  : 	int aIndex = lpObj->m_Index;

  00016	8b 3e		 mov	 edi, DWORD PTR [esi]

; 660  : 	PMSG_CHAOSMIXRESULT pMsg;
; 661  : 
; 662  : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	bb 01 00 00 00	 mov	 ebx, 1
  00027	50		 push	 eax
  00028	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	89 5d e4	 mov	 DWORD PTR _fail$[ebp], ebx
  0002e	89 7d e8	 mov	 DWORD PTR _aIndex$[ebp], edi
  00031	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 663  : 	pMsg.Result = CB_ERROR;
; 664  : 	lpObj->ChaosLock = TRUE;
; 665  : 
; 666  : 	LogAddTD("[DevilSquare] Chaos Mix Start");

  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MDACFBLC@?$FLDevilSquare?$FN?5Chaos?5Mix?5Start?$AA@
  0003b	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0003f	89 9e 20 12 00
	00		 mov	 DWORD PTR [esi+4640], ebx
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 667  : 	INT nChaosNeedMoney = 0;
; 668  : 	int iCharmOfLuckCount = 0;
; 669  : 	iCharmOfLuckCount = lpObj->ChaosSuccessRate;

  0004b	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	89 45 e0	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], eax

; 670  : 
; 671  : 	if ( iCharmOfLuckCount > 10 )

  00057	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0005a	7e 20		 jle	 SHORT $LN23@DevilSquar

; 672  : 	{
; 673  : 		pMsg.Result = 0xF0;
; 674  : 		lpObj->ChaosLock = FALSE;
; 675  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0005c	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00060	51		 push	 ecx
  00061	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00064	52		 push	 edx
  00065	57		 push	 edi
  00066	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  0006a	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00074	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN23@DevilSquar:

; 676  : 	}
; 677  : 
; 678  : 	switch ( iItemLevel )

  0007c	8b 45 10	 mov	 eax, DWORD PTR _iItemLevel$[ebp]
  0007f	83 f8 07	 cmp	 eax, 7
  00082	0f 87 3e 02 00
	00		 ja	 $LN9@DevilSquar
  00088	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN26@DevilSquar[eax*4]
$LN17@DevilSquar:

; 679  : 	{
; 680  : 		case 0:
; 681  : 			lpObj->ChaosSuccessRate = 60;

  0008f	c7 86 1c 12 00
	00 3c 00 00 00	 mov	 DWORD PTR [esi+4636], 60 ; 0000003cH

; 682  : 			nChaosNeedMoney = 100000;

  00099	bf a0 86 01 00	 mov	 edi, 100000		; 000186a0H

; 683  : 			break;

  0009e	eb 74		 jmp	 SHORT $LN18@DevilSquar
$LN16@DevilSquar:

; 684  : 		case 1:
; 685  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel1;

  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDQChaosSuccessRateLevel1@@3HA ; gDQChaosSuccessRateLevel1

; 686  : 			nChaosNeedMoney = 100000;

  000a5	bf a0 86 01 00	 mov	 edi, 100000		; 000186a0H

; 687  : 			break;

  000aa	eb 62		 jmp	 SHORT $LN24@DevilSquar
$LN15@DevilSquar:

; 688  : 
; 689  : 		case 2:
; 690  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel2;

  000ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gDQChaosSuccessRateLevel2@@3HA ; gDQChaosSuccessRateLevel2
  000b2	89 8e 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], ecx

; 691  : 			nChaosNeedMoney = 200000;

  000b8	bf 40 0d 03 00	 mov	 edi, 200000		; 00030d40H

; 692  : 			break;

  000bd	eb 55		 jmp	 SHORT $LN18@DevilSquar
$LN14@DevilSquar:

; 693  : 
; 694  : 		case 3:
; 695  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel3;

  000bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gDQChaosSuccessRateLevel3@@3HA ; gDQChaosSuccessRateLevel3
  000c5	89 96 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], edx

; 696  : 			nChaosNeedMoney = 400000;

  000cb	bf 80 1a 06 00	 mov	 edi, 400000		; 00061a80H

; 697  : 			break;

  000d0	eb 42		 jmp	 SHORT $LN18@DevilSquar
$LN13@DevilSquar:

; 698  : 
; 699  : 		case 4:
; 700  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel4;

  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDQChaosSuccessRateLevel4@@3HA ; gDQChaosSuccessRateLevel4

; 701  : 			nChaosNeedMoney = 700000;

  000d7	bf 60 ae 0a 00	 mov	 edi, 700000		; 000aae60H

; 702  : 			break;

  000dc	eb 30		 jmp	 SHORT $LN24@DevilSquar
$LN12@DevilSquar:

; 703  : 
; 704  : 		case 5:
; 705  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel5;

  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gDQChaosSuccessRateLevel5@@3HA ; gDQChaosSuccessRateLevel5
  000e4	89 8e 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], ecx

; 706  : 			nChaosNeedMoney = 1100000;

  000ea	bf e0 c8 10 00	 mov	 edi, 1100000		; 0010c8e0H

; 707  : 			break;

  000ef	eb 23		 jmp	 SHORT $LN18@DevilSquar
$LN11@DevilSquar:

; 708  : 
; 709  : 		case 6:
; 710  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel6;

  000f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gDQChaosSuccessRateLevel6@@3HA ; gDQChaosSuccessRateLevel6
  000f7	89 96 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], edx

; 711  : 			nChaosNeedMoney = 1600000;

  000fd	bf 00 6a 18 00	 mov	 edi, 1600000		; 00186a00H

; 712  : 			break;

  00102	eb 10		 jmp	 SHORT $LN18@DevilSquar
$LN10@DevilSquar:

; 713  : 		case 7:
; 714  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel7;

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDQChaosSuccessRateLevel7@@3HA ; gDQChaosSuccessRateLevel7

; 715  : 			nChaosNeedMoney = 2000000;

  00109	bf 80 84 1e 00	 mov	 edi, 2000000		; 001e8480H
$LN24@DevilSquar:

; 713  : 		case 7:
; 714  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel7;

  0010e	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
$LN18@DevilSquar:

; 726  : 			break;
; 727  : 	}
; 728  : 
; 729  : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00114	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00116	51		 push	 ecx
  00117	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0011c	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00121	f7 ef		 imul	 edi
  00123	6a 00		 push	 0
  00125	6a 64		 push	 100			; 00000064H
  00127	52		 push	 edx
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 __alldiv
  0012e	8b d8		 mov	 ebx, eax

; 730  : 
; 731  : 	if ( iChaosTaxMoney < 0 )

  00130	85 db		 test	 ebx, ebx
  00132	79 02		 jns	 SHORT $LN8@DevilSquar

; 732  : 	{
; 733  : 		iChaosTaxMoney = 0;

  00134	33 db		 xor	 ebx, ebx
$LN8@DevilSquar:

; 734  : 	}
; 735  : 
; 736  : 	nChaosNeedMoney += iChaosTaxMoney;

  00136	03 fb		 add	 edi, ebx

; 737  : 
; 738  : 	if ( nChaosNeedMoney < 0 )

  00138	79 02		 jns	 SHORT $LN7@DevilSquar

; 739  : 	{
; 740  : 		nChaosNeedMoney = 0;

  0013a	33 ff		 xor	 edi, edi
$LN7@DevilSquar:

; 741  : 	}
; 742  : 
; 743  : 	if ( (lpObj->Money - nChaosNeedMoney) < 0 )

  0013c	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00142	8b d0		 mov	 edx, eax
  00144	2b d7		 sub	 edx, edi
  00146	79 38		 jns	 SHORT $LN6@DevilSquar

; 744  : 	{
; 745  : 		LogAddTD("[DevilSquare] [%s][%s] CBMix Not Enough Money [%d] need zen [%d]",
; 746  : 			lpObj->AccountID, lpObj->Name, lpObj->Money, nChaosNeedMoney);

  00148	57		 push	 edi
  00149	50		 push	 eax
  0014a	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0014d	50		 push	 eax
  0014e	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  00151	51		 push	 ecx
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HHHNMGIM@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Not@
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 747  : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 748  : 		DataSend(aIndex, (BYTE *)&pMsg, pMsg.h.size);

  0015d	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00161	8b 4d e8	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00164	52		 push	 edx
  00165	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00168	50		 push	 eax
  00169	51		 push	 ecx
  0016a	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  0016e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00173	83 c4 20	 add	 esp, 32			; 00000020H

; 749  : 		lpObj->ChaosLock = FALSE;
; 750  : 		return 1;

  00176	b8 01 00 00 00	 mov	 eax, 1
  0017b	e9 72 01 00 00	 jmp	 $LN25@DevilSquar
$LN6@DevilSquar:

; 751  : 
; 752  : 	}
; 753  : 
; 754  : 	if ( g_CrywolfSync.GetOccupationState() == 0 && g_iCrywolfApplyMvpBenefit )

  00180	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00185	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState
  0018a	85 c0		 test	 eax, eax
  0018c	75 18		 jne	 SHORT $LN5@DevilSquar
  0018e	39 05 00 00 00
	00		 cmp	 DWORD PTR ?g_iCrywolfApplyMvpBenefit@@3HA, eax ; g_iCrywolfApplyMvpBenefit
  00194	74 10		 je	 SHORT $LN5@DevilSquar

; 755  : 	{	
; 756  : 		lpObj->ChaosSuccessRate += g_CrywolfSync.GetPlusChaosRate();

  00196	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  0019b	e8 00 00 00 00	 call	 ?GetPlusChaosRate@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetPlusChaosRate
  001a0	01 86 1c 12 00
	00		 add	 DWORD PTR [esi+4636], eax
$LN5@DevilSquar:

; 757  : 	}
; 758  : 
; 759  : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  001a6	8b 55 e0	 mov	 edx, DWORD PTR _iCharmOfLuckCount$[ebp]
  001a9	01 96 1c 12 00
	00		 add	 DWORD PTR [esi+4636], edx

; 760  : 
; 761  : 	int iRate = rand() % 100;

  001af	e8 00 00 00 00	 call	 _rand
  001b4	99		 cdq
  001b5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001ba	f7 f9		 idiv	 ecx

; 762  : 
; 763  : 	if ( bCheckType == TRUE )

  001bc	83 7d 0c 01	 cmp	 DWORD PTR _bCheckType$[ebp], 1
  001c0	75 3e		 jne	 SHORT $LN3@DevilSquar

; 764  : 	{
; 765  : 		if ( iRate < lpObj->ChaosSuccessRate )

  001c2	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001c8	7d 36		 jge	 SHORT $LN3@DevilSquar

; 766  : 		{
; 767  : 			int DevilInv = ITEMGET(14,19);	// Devil Ticket
; 768  : 			ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, DevilInv, iItemLevel, 0, 0, 0, 0, -1, 0, 0);

  001ca	8b 55 10	 mov	 edx, DWORD PTR _iItemLevel$[ebp]
  001cd	6a 00		 push	 0
  001cf	6a 00		 push	 0
  001d1	6a 00		 push	 0
  001d3	8b 06		 mov	 eax, DWORD PTR [esi]
  001d5	6a 00		 push	 0
  001d7	6a ff		 push	 -1
  001d9	6a 00		 push	 0
  001db	6a 00		 push	 0
  001dd	6a 00		 push	 0
  001df	6a 00		 push	 0
  001e1	52		 push	 edx
  001e2	68 13 1c 00 00	 push	 7187			; 00001c13H
  001e7	6a 00		 push	 0
  001e9	6a 00		 push	 0
  001eb	68 ff 00 00 00	 push	 255			; 000000ffH
  001f0	50		 push	 eax
  001f1	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend
  001f6	83 c4 3c	 add	 esp, 60			; 0000003cH

; 769  : 			fail = FALSE;

  001f9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _fail$[ebp], 0
$LN3@DevilSquar:

; 770  : 		}
; 771  : 	}
; 772  : 
; 773  : 	lpObj->Money -= nChaosNeedMoney;

  00200	29 be cc 00 00
	00		 sub	 DWORD PTR [esi+204], edi

; 774  : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00206	53		 push	 ebx
  00207	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0020c	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 775  : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00211	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00217	8b 16		 mov	 edx, DWORD PTR [esi]
  00219	51		 push	 ecx
  0021a	52		 push	 edx
  0021b	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00220	83 c4 08	 add	 esp, 8

; 776  : 
; 777  : 	if ( fail == TRUE )

  00223	83 7d e4 01	 cmp	 DWORD PTR _fail$[ebp], 1
  00227	75 58		 jne	 SHORT $LN2@DevilSquar

; 778  : 	{
; 779  : 		ChaosBoxInit(lpObj);

  00229	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022c	56		 push	 esi
  0022d	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 780  : 		GCUserChaosBoxSend(lpObj, 0);

  00232	6a 00		 push	 0
  00234	56		 push	 esi
  00235	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 781  : 		DataSend(aIndex, (BYTE *)&pMsg, pMsg.h.size);

  0023a	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0023e	8b 55 e8	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00241	50		 push	 eax
  00242	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00245	51		 push	 ecx
  00246	52		 push	 edx
  00247	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 782  : 
; 783  : 		LogAddTD("[DevilSquare,%d] [%s][%s] CBMix Fail %d Money : %d-%d", iItemLevel,
; 784  : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 785  : 			lpObj->Money, nChaosNeedMoney);

  0024c	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00252	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00258	57		 push	 edi
  00259	50		 push	 eax
  0025a	51		 push	 ecx
  0025b	8b 4d 10	 mov	 ecx, DWORD PTR _iItemLevel$[ebp]
  0025e	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  00261	52		 push	 edx
  00262	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00265	50		 push	 eax
  00266	51		 push	 ecx
  00267	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KKBIIBFP@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
  0026c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00272	83 c4 30	 add	 esp, 48			; 00000030H

; 786  : 		lpObj->ChaosLock = FALSE;

  00275	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 787  : 	}
; 788  : 	else

  0027f	eb 22		 jmp	 SHORT $LN1@DevilSquar
$LN2@DevilSquar:

; 789  : 	{
; 790  : 		LogAddTD("[DevilSquare,%d] [%s][%s] CBMix Success Rate:%d Money : %d", iItemLevel,
; 791  : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 792  : 			nChaosNeedMoney);

  00281	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00287	57		 push	 edi
  00288	52		 push	 edx
  00289	8b 55 10	 mov	 edx, DWORD PTR _iItemLevel$[ebp]
  0028c	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0028f	50		 push	 eax
  00290	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  00293	51		 push	 ecx
  00294	52		 push	 edx
  00295	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@ODHCGDBD@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002a0	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@DevilSquar:

; 793  : #if( __4GAMERS__ == 1 )
; 794  : 		g_Achievements.GD_UpdateMixData(lpObj, true);
; 795  : #endif
; 796  : 	}
; 797  : 
; 798  : 	::gObjInventoryCommit(lpObj->m_Index);

  002a3	8b 06		 mov	 eax, DWORD PTR [esi]
  002a5	50		 push	 eax
  002a6	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  002ab	83 c4 04	 add	 esp, 4
  002ae	5f		 pop	 edi
  002af	5e		 pop	 esi

; 799  : 
; 800  : 	return TRUE;

  002b0	b8 01 00 00 00	 mov	 eax, 1
  002b5	5b		 pop	 ebx

; 801  : }

  002b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b9	33 cd		 xor	 ecx, ebp
  002bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c2 0c 00	 ret	 12			; 0000000cH
$LN9@DevilSquar:

; 716  : 			break;
; 717  : 
; 718  : 		default:
; 719  : 			LogAdd("[DevilSquare] [%s][%s] Invalid DQItem Level [%d]",
; 720  : 				lpObj->AccountID, lpObj->Name, iItemLevel);

  002c6	50		 push	 eax
  002c7	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  002ca	51		 push	 ecx
  002cb	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  002ce	52		 push	 edx
  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BMAIOAHL@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5D@
  002d4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 721  : 
; 722  : 			pMsg.Result = CB_INVALID_ITEM_LEVEL;
; 723  : 			DataSend(aIndex, (BYTE *)&pMsg, pMsg.h.size);

  002da	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002de	50		 push	 eax
  002df	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  002e2	51		 push	 ecx
  002e3	57		 push	 edi
  002e4	c6 45 ef 08	 mov	 BYTE PTR _pMsg$[ebp+3], 8
  002e8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  002ed	83 c4 1c	 add	 esp, 28			; 0000001cH

; 724  : 			lpObj->ChaosLock = FALSE;
; 725  : 			return 1;

  002f0	8b c3		 mov	 eax, ebx
$LN25@DevilSquar:

; 801  : }

  002f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f5	5f		 pop	 edi
  002f6	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00300	5e		 pop	 esi
  00301	33 cd		 xor	 ecx, ebp
  00303	5b		 pop	 ebx
  00304	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00309	8b e5		 mov	 esp, ebp
  0030b	5d		 pop	 ebp
  0030c	c2 0c 00	 ret	 12			; 0000000cH
  0030f	90		 npad	 1
$LN26@DevilSquar:
  00310	00 00 00 00	 DD	 $LN17@DevilSquar
  00314	00 00 00 00	 DD	 $LN16@DevilSquar
  00318	00 00 00 00	 DD	 $LN15@DevilSquar
  0031c	00 00 00 00	 DD	 $LN14@DevilSquar
  00320	00 00 00 00	 DD	 $LN13@DevilSquar
  00324	00 00 00 00	 DD	 $LN12@DevilSquar
  00328	00 00 00 00	 DD	 $LN11@DevilSquar
  0032c	00 00 00 00	 DD	 $LN10@DevilSquar
?DevilSquareEventChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CChaosBox::DevilSquareEventChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0DA@FMJGNMLI@?$FLDevilSquare?$FN?5Too?5many?5Devil?8s?5K@ ; `string'
PUBLIC	??_C@_0CK@JNMMBAIA@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Over@ ; `string'
PUBLIC	??_C@_0CH@NMBMOEEC@?$FLDevilSquare?$FN?5Not?5Found?5Chaos?5Ge@ ; `string'
PUBLIC	??_C@_0DB@DMIHKADD@?$FLDevilSquare?$FN?5DiffLevel?5Devil?8s?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DevilSquareItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::DevilSquareItemChaosMix
;	COMDAT ??_C@_0DA@FMJGNMLI@?$FLDevilSquare?$FN?5Too?5many?5Devil?8s?5K@
CONST	SEGMENT
??_C@_0DA@FMJGNMLI@?$FLDevilSquare?$FN?5Too?5many?5Devil?8s?5K@ DB '[Devi'
	DB	'lSquare] Too many Devil''s Key or Eyes [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JNMMBAIA@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Over@
CONST	SEGMENT
??_C@_0CK@JNMMBAIA@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Over@ DB '[Devil'
	DB	'Square] Charm Of Luck Over 10% [%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NMBMOEEC@?$FLDevilSquare?$FN?5Not?5Found?5Chaos?5Ge@
CONST	SEGMENT
??_C@_0CH@NMBMOEEC@?$FLDevilSquare?$FN?5Not?5Found?5Chaos?5Ge@ DB '[Devil'
	DB	'Square] Not Found Chaos Gem [%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DMIHKADD@?$FLDevilSquare?$FN?5DiffLevel?5Devil?8s?5@
CONST	SEGMENT
??_C@_0DB@DMIHKADD@?$FLDevilSquare?$FN?5DiffLevel?5Devil?8s?5@ DB '[Devil'
	DB	'Square] DiffLevel Devil''s Key or Eyes [%d]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DevilSquareItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_itemlevel$ = -28					; size = 4
_eventitemcount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DevilSquareItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::DevilSquareItemChaosMix, COMDAT
; _this$ = ecx

; 804  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 805  : 	lpObj->ChaosLock = TRUE;
; 806  : 
; 807  : 	PMSG_CHAOSMIXRESULT pMsg;
; 808  : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	8b d9		 mov	 ebx, ecx
  00023	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0002d	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 809  : 	pMsg.Result = CB_ERROR;
; 810  : 	int aIndex = lpObj->m_Index;

  00032	8b 3e		 mov	 edi, DWORD PTR [esi]
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 811  : 	int eventitemcount;
; 812  : 	int itemlevel;
; 813  : 	int Ret = CheckDevilSquareItem(lpObj, eventitemcount, itemlevel);

  00037	8d 4d e4	 lea	 ecx, DWORD PTR _itemlevel$[ebp]
  0003a	51		 push	 ecx
  0003b	8d 55 e8	 lea	 edx, DWORD PTR _eventitemcount$[ebp]
  0003e	52		 push	 edx
  0003f	56		 push	 esi
  00040	8b cb		 mov	 ecx, ebx
  00042	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00046	e8 00 00 00 00	 call	 ?CheckDevilSquareItem@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ; CChaosBox::CheckDevilSquareItem

; 814  : 
; 815  : 	if ( Ret != FALSE )

  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 e7 00 00
	00		 je	 $LN7@DevilSquar@2

; 816  : 	{
; 817  : 		if ( Ret == 3 )

  00053	83 f8 03	 cmp	 eax, 3
  00056	75 2a		 jne	 SHORT $LN6@DevilSquar@2

; 818  : 		{
; 819  : 			pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 820  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  00058	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0005c	50		 push	 eax
  0005d	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00060	51		 push	 ecx
  00061	57		 push	 edi
  00062	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00066	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 821  : 			LogAdd("[DevilSquare] DiffLevel Devil's Key or Eyes [%d]", eventitemcount);

  0006b	8b 55 e8	 mov	 edx, DWORD PTR _eventitemcount$[ebp]
  0006e	52		 push	 edx
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@DMIHKADD@?$FLDevilSquare?$FN?5DiffLevel?5Devil?8s?5@
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0007a	83 c4 14	 add	 esp, 20			; 00000014H

; 822  : 			lpObj->ChaosLock = FALSE;
; 823  : 			return;

  0007d	e9 d4 00 00 00	 jmp	 $LN1@DevilSquar@2
$LN6@DevilSquar@2:

; 824  : 		}
; 825  : 		
; 826  : 		if ( Ret == 2 )

  00082	83 f8 02	 cmp	 eax, 2
  00085	75 2a		 jne	 SHORT $LN5@DevilSquar@2

; 827  : 		{
; 828  : 			pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 829  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  00087	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0008b	50		 push	 eax
  0008c	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0008f	51		 push	 ecx
  00090	57		 push	 edi
  00091	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00095	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 830  : 			LogAdd("[DevilSquare] Not Found Chaos Gem [%d]", eventitemcount);

  0009a	8b 55 e8	 mov	 edx, DWORD PTR _eventitemcount$[ebp]
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NMBMOEEC@?$FLDevilSquare?$FN?5Not?5Found?5Chaos?5Ge@
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000a9	83 c4 14	 add	 esp, 20			; 00000014H

; 831  : 			lpObj->ChaosLock = FALSE;
; 832  : 			
; 833  : 			return;

  000ac	e9 a5 00 00 00	 jmp	 $LN1@DevilSquar@2
$LN5@DevilSquar@2:

; 834  : 		}
; 835  : 
; 836  : 		if ( Ret == 4 )

  000b1	83 f8 04	 cmp	 eax, 4
  000b4	75 27		 jne	 SHORT $LN4@DevilSquar@2

; 837  : 		{
; 838  : 			pMsg.Result = 0xF0;
; 839  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  000b6	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000ba	50		 push	 eax
  000bb	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000be	51		 push	 ecx
  000bf	57		 push	 edi
  000c0	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  000c4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 840  : 			LogAdd("[DevilSquare] Charm Of Luck Over 10% [%d]", eventitemcount);

  000c9	8b 55 e8	 mov	 edx, DWORD PTR _eventitemcount$[ebp]
  000cc	52		 push	 edx
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@JNMMBAIA@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Over@
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000d8	83 c4 14	 add	 esp, 20			; 00000014H

; 841  : 			lpObj->ChaosLock = FALSE;
; 842  : 			
; 843  : 			return;

  000db	eb 79		 jmp	 SHORT $LN1@DevilSquar@2
$LN4@DevilSquar@2:

; 844  : 		}
; 845  : 
; 846  : 			
; 847  : 		if ( eventitemcount > 2 )

  000dd	83 7d e8 02	 cmp	 DWORD PTR _eventitemcount$[ebp], 2
  000e1	7e 27		 jle	 SHORT $LN3@DevilSquar@2

; 848  : 		{
; 849  : 			pMsg.Result = CB_TOO_MANY_ITEMS;
; 850  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  000e3	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000e7	50		 push	 eax
  000e8	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000eb	51		 push	 ecx
  000ec	57		 push	 edi
  000ed	c6 45 ef 03	 mov	 BYTE PTR _pMsg$[ebp+3], 3
  000f1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 851  : 			LogAdd("[DevilSquare] Too many Devil's Key or Eyes [%d]", eventitemcount);

  000f6	8b 55 e8	 mov	 edx, DWORD PTR _eventitemcount$[ebp]
  000f9	52		 push	 edx
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@FMJGNMLI@?$FLDevilSquare?$FN?5Too?5many?5Devil?8s?5K@
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00105	83 c4 14	 add	 esp, 20			; 00000014H

; 852  : 			lpObj->ChaosLock = FALSE;
; 853  : 			return;

  00108	eb 4c		 jmp	 SHORT $LN1@DevilSquar@2
$LN3@DevilSquar@2:

; 854  : 		}
; 855  : 
; 856  : 		if ( lpObj->Level < 10 )

  0010a	66 83 be 96 00
	00 00 0a	 cmp	 WORD PTR [esi+150], 10	; 0000000aH
  00112	7d 06		 jge	 SHORT $LN2@DevilSquar@2

; 857  : 		{
; 858  : 			pMsg.Result = CB_LOW_LEVEL_USER;

  00114	c6 45 ef 04	 mov	 BYTE PTR _pMsg$[ebp+3], 4

; 859  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);
; 860  : 			lpObj->ChaosLock = FALSE;
; 861  : 			return;

  00118	eb 2a		 jmp	 SHORT $LN10@DevilSquar@2
$LN2@DevilSquar@2:

; 862  : 		}
; 863  : 
; 864  : 		DevilSquareEventChaosMix(lpObj, Ret, itemlevel);

  0011a	8b 55 e4	 mov	 edx, DWORD PTR _itemlevel$[ebp]
  0011d	52		 push	 edx
  0011e	50		 push	 eax
  0011f	56		 push	 esi
  00120	8b cb		 mov	 ecx, ebx
  00122	e8 00 00 00 00	 call	 ?DevilSquareEventChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CChaosBox::DevilSquareEventChaosMix
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx

; 872  : 		lpObj->ChaosLock = FALSE;
; 873  : 		return;
; 874  : 	}
; 875  : 
; 876  : 	lpObj->ChaosLock = FALSE;
; 877  : }

  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 04 00	 ret	 4
$LN7@DevilSquar@2:

; 865  : 		return;
; 866  : 	}
; 867  : 		
; 868  : 	if ( eventitemcount > 1 )

  0013a	83 7d e8 01	 cmp	 DWORD PTR _eventitemcount$[ebp], 1
  0013e	7e 16		 jle	 SHORT $LN1@DevilSquar@2

; 869  : 	{
; 870  : 		pMsg.Result = CB_LACKING_MIX_ITEMS;

  00140	c6 45 ef 06	 mov	 BYTE PTR _pMsg$[ebp+3], 6
$LN10@DevilSquar@2:

; 871  : 		DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  00144	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00148	50		 push	 eax
  00149	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0014c	51		 push	 ecx
  0014d	57		 push	 edi
  0014e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@DevilSquar@2:

; 872  : 		lpObj->ChaosLock = FALSE;
; 873  : 		return;
; 874  : 	}
; 875  : 
; 876  : 	lpObj->ChaosLock = FALSE;
; 877  : }

  00156	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00159	5f		 pop	 edi
  0015a	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00164	5e		 pop	 esi
  00165	33 cd		 xor	 ecx, ebp
  00167	5b		 pop	 ebx
  00168	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c2 04 00	 ret	 4
?DevilSquareItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::DevilSquareItemChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0HO@DGIBLBAF@?$FLPlusItemLevel?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogPlusItemLevelChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z ; CChaosBox::LogPlusItemLevelChaosItem
;	COMDAT ??_C@_0HO@DGIBLBAF@?$FLPlusItemLevel?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
CONST	SEGMENT
??_C@_0HO@DGIBLBAF@?$FLPlusItemLevel?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ DB '['
	DB	'PlusItemLevel,%d] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%'
	DB	'd][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d] 380Ex:[%d] HO:[%d,%'
	DB	'd]', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LogPlusItemLevelChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_n$190275 = -20						; size = 4
_iMixLevel$ = -16					; size = 4
_ExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iPlusMixLevel$ = 12					; size = 4
?LogPlusItemLevelChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CChaosBox::LogPlusItemLevelChaosItem, COMDAT
; _this$ = ecx

; 880  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 881  : 	int iMixLevel = 0;
; 882  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 883  : 
; 884  : 	if ( iPlusMixLevel == 3 )

  00010	8b 45 0c	 mov	 eax, DWORD PTR _iPlusMixLevel$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	33 ff		 xor	 edi, edi
  0001b	89 7d f0	 mov	 DWORD PTR _iMixLevel$[ebp], edi
  0001e	83 f8 03	 cmp	 eax, 3
  00021	75 09		 jne	 SHORT $LN15@LogPlusIte

; 885  : 		iMixLevel = 1;

  00023	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _iMixLevel$[ebp], 1
  0002a	eb 44		 jmp	 SHORT $LN20@LogPlusIte
$LN15@LogPlusIte:

; 886  : 	else if ( iPlusMixLevel == 4 )

  0002c	83 f8 04	 cmp	 eax, 4
  0002f	75 09		 jne	 SHORT $LN13@LogPlusIte

; 887  : 		iMixLevel = 2;

  00031	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _iMixLevel$[ebp], 2
  00038	eb 36		 jmp	 SHORT $LN20@LogPlusIte
$LN13@LogPlusIte:

; 888  : 	else if ( iPlusMixLevel == 22 )

  0003a	83 f8 16	 cmp	 eax, 22			; 00000016H
  0003d	75 09		 jne	 SHORT $LN11@LogPlusIte

; 889  : 		iMixLevel = 3;

  0003f	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _iMixLevel$[ebp], 3
  00046	eb 28		 jmp	 SHORT $LN20@LogPlusIte
$LN11@LogPlusIte:

; 890  : 	else if ( iPlusMixLevel == 23 )

  00048	83 f8 17	 cmp	 eax, 23			; 00000017H
  0004b	75 09		 jne	 SHORT $LN9@LogPlusIte

; 891  : 		iMixLevel = 4;

  0004d	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _iMixLevel$[ebp], 4
  00054	eb 1a		 jmp	 SHORT $LN20@LogPlusIte
$LN9@LogPlusIte:

; 892  : 	else if ( iPlusMixLevel == 49 )

  00056	83 f8 31	 cmp	 eax, 49			; 00000031H
  00059	75 09		 jne	 SHORT $LN7@LogPlusIte

; 893  : 		iMixLevel = 5;

  0005b	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _iMixLevel$[ebp], 5
  00062	eb 0c		 jmp	 SHORT $LN20@LogPlusIte
$LN7@LogPlusIte:

; 894  : 	else if ( iPlusMixLevel == 50 )

  00064	83 f8 32	 cmp	 eax, 50			; 00000032H
  00067	75 07		 jne	 SHORT $LN20@LogPlusIte

; 895  : 		iMixLevel = 6;

  00069	c7 45 f0 06 00
	00 00		 mov	 DWORD PTR _iMixLevel$[ebp], 6
$LN20@LogPlusIte:

; 896  : 
; 897  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00070	89 7d ec	 mov	 DWORD PTR _n$190275[ebp], edi
$LL4@LogPlusIte:

; 898  : 	{
; 899  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00073	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00079	03 cf		 add	 ecx, edi
  0007b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00080	83 f8 01	 cmp	 eax, 1
  00083	0f 85 cb 00 00
	00		 jne	 $LN3@LogPlusIte

; 900  : 		{
; 901  : 			::ItemIsBufExOption(ExOption, &lpObj->pChaosBox[n]);

  00089	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0008f	03 c7		 add	 eax, edi
  00091	50		 push	 eax
  00092	8d 4d f4	 lea	 ecx, DWORD PTR _ExOption$[ebp]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 902  : 
; 903  : 			LogAddTD("[PlusItemLevel,%d] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%d][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d] 380Ex:[%d] HO:[%d,%d]", iMixLevel,
; 904  : 				lpObj->AccountID, lpObj->Name, n, lpObj->pChaosBox[n].GetName(), lpObj->pChaosBox[n].m_Level,
; 905  : 				lpObj->pChaosBox[n].m_Option1, lpObj->pChaosBox[n].m_Option2, lpObj->pChaosBox[n].m_Option3, 
; 906  : 				lpObj->pChaosBox[n].m_Number, (int)lpObj->pChaosBox[n].m_Durability, 
; 907  : 				ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5], ExOption[6], lpObj->pChaosBox[n].m_SetOption,
; 908  : 				lpObj->pChaosBox[n].m_ItemOptionEx >> 7,
; 909  : 				g_kJewelOfHarmonySystem.GetItemOptionLevel(&lpObj->pChaosBox[n]),
; 910  : 				g_kJewelOfHarmonySystem.GetItemStrengthenOption(&lpObj->pChaosBox[n]));

  0009b	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  000a1	8d 34 3a	 lea	 esi, DWORD PTR [edx+edi]
  000a4	83 c4 08	 add	 esp, 8
  000a7	03 d7		 add	 edx, edi
  000a9	52		 push	 edx
  000aa	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  000af	e8 00 00 00 00	 call	 ?GetItemStrengthenOption@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemStrengthenOption
  000b4	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  000ba	0f b6 c8	 movzx	 ecx, al
  000bd	51		 push	 ecx
  000be	03 d7		 add	 edx, edi
  000c0	52		 push	 edx
  000c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  000c6	e8 00 00 00 00	 call	 ?GetItemOptionLevel@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemOptionLevel
  000cb	0f b6 8e c6 00
	00 00		 movzx	 ecx, BYTE PTR [esi+198]
  000d2	d9 46 24	 fld	 DWORD PTR [esi+36]
  000d5	0f b6 96 aa 00
	00 00		 movzx	 edx, BYTE PTR [esi+170]
  000dc	0f b6 c0	 movzx	 eax, al
  000df	50		 push	 eax
  000e0	0f b6 45 fa	 movzx	 eax, BYTE PTR _ExOption$[ebp+6]
  000e4	c1 e9 07	 shr	 ecx, 7
  000e7	51		 push	 ecx
  000e8	0f b6 4d f9	 movzx	 ecx, BYTE PTR _ExOption$[ebp+5]
  000ec	52		 push	 edx
  000ed	0f b6 55 f8	 movzx	 edx, BYTE PTR _ExOption$[ebp+4]
  000f1	50		 push	 eax
  000f2	0f b6 45 f7	 movzx	 eax, BYTE PTR _ExOption$[ebp+3]
  000f6	51		 push	 ecx
  000f7	0f b6 4d f6	 movzx	 ecx, BYTE PTR _ExOption$[ebp+2]
  000fb	52		 push	 edx
  000fc	0f b6 55 f5	 movzx	 edx, BYTE PTR _ExOption$[ebp+1]
  00100	50		 push	 eax
  00101	0f b6 45 f4	 movzx	 eax, BYTE PTR _ExOption$[ebp]
  00105	51		 push	 ecx
  00106	52		 push	 edx
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 __ftol2_sse
  0010d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0010f	0f b6 96 92 00
	00 00		 movzx	 edx, BYTE PTR [esi+146]
  00116	50		 push	 eax
  00117	0f b6 86 91 00
	00 00		 movzx	 eax, BYTE PTR [esi+145]
  0011e	51		 push	 ecx
  0011f	0f b6 8e 90 00
	00 00		 movzx	 ecx, BYTE PTR [esi+144]
  00126	52		 push	 edx
  00127	0f bf 56 08	 movsx	 edx, WORD PTR [esi+8]
  0012b	50		 push	 eax
  0012c	51		 push	 ecx
  0012d	52		 push	 edx
  0012e	8b ce		 mov	 ecx, esi
  00130	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  00135	50		 push	 eax
  00136	8b 45 ec	 mov	 eax, DWORD PTR _n$190275[ebp]
  00139	50		 push	 eax
  0013a	8b 45 f0	 mov	 eax, DWORD PTR _iMixLevel$[ebp]
  0013d	8d 4b 5d	 lea	 ecx, DWORD PTR [ebx+93]
  00140	51		 push	 ecx
  00141	8d 53 52	 lea	 edx, DWORD PTR [ebx+82]
  00144	52		 push	 edx
  00145	50		 push	 eax
  00146	68 00 00 00 00	 push	 OFFSET ??_C@_0HO@DGIBLBAF@?$FLPlusItemLevel?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00151	83 c4 5c	 add	 esp, 92			; 0000005cH
$LN3@LogPlusIte:

; 896  : 
; 897  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00154	ff 45 ec	 inc	 DWORD PTR _n$190275[ebp]
  00157	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0015d	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00163	0f 8c 0a ff ff
	ff		 jl	 $LL4@LogPlusIte

; 911  : 		}
; 912  : 	}
; 913  : }

  00169	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016c	5f		 pop	 edi
  0016d	5e		 pop	 esi
  0016e	33 cd		 xor	 ecx, ebp
  00170	5b		 pop	 ebx
  00171	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
?LogPlusItemLevelChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CChaosBox::LogPlusItemLevelChaosItem
_TEXT	ENDS
PUBLIC	??_C@_0IF@FONACAKJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd@ ; `string'
PUBLIC	_sLogType$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem
;	COMDAT ??_C@_0IF@FONACAKJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd@
CONST	SEGMENT
??_C@_0IF@FONACAKJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd@ DB '['
	DB	'%s] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%u][%d] Ex:[%d,'
	DB	'%d,%d,%d,%d,%d,%d] Set:[%d] 380:[%d] HO:[%d,%d] Socket[%d,%d,'
	DB	'%d,%d,%d]', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z
_TEXT	SEGMENT
_sLogType$GSCopy$ = -20					; size = 4
_n$190288 = -16						; size = 4
_ExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_sLogType$ = 12						; size = 4
?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z PROC ; CChaosBox::LogChaosItem, COMDAT
; _this$ = ecx

; 920  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _sLogType$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi

; 921  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 922  : 
; 923  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00015	33 db		 xor	 ebx, ebx
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0001b	89 45 ec	 mov	 DWORD PTR _sLogType$GSCopy$[ebp], eax
  0001e	89 5d f0	 mov	 DWORD PTR _n$190288[ebp], ebx
$LL4@LogChaosIt:

; 924  : 	{
; 925  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00021	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00027	03 cb		 add	 ecx, ebx
  00029	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0002e	83 f8 01	 cmp	 eax, 1
  00031	0f 85 fa 00 00
	00		 jne	 $LN3@LogChaosIt

; 926  : 		{
; 927  : 			::ItemIsBufExOption(ExOption, &lpObj->pChaosBox[n]);

  00037	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  0003d	03 cb		 add	 ecx, ebx
  0003f	51		 push	 ecx
  00040	8d 55 f4	 lea	 edx, DWORD PTR _ExOption$[ebp]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 928  : 
; 929  : 			LogAddTD("[%s] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%u][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d] 380:[%d] HO:[%d,%d] Socket[%d,%d,%d,%d,%d]",
; 930  : 				sLogType, lpObj->AccountID, lpObj->Name, n, lpObj->pChaosBox[n].GetName(), lpObj->pChaosBox[n].m_Level,
; 931  : 				lpObj->pChaosBox[n].m_Option1, lpObj->pChaosBox[n].m_Option2, lpObj->pChaosBox[n].m_Option3, 
; 932  : 				lpObj->pChaosBox[n].m_Number, (int)lpObj->pChaosBox[n].m_Durability, 
; 933  : 				ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5], ExOption[6], lpObj->pChaosBox[n].m_SetOption,
; 934  : 				lpObj->pChaosBox[n].m_ItemOptionEx >> 7,
; 935  : 				g_kJewelOfHarmonySystem.GetItemStrengthenOption(&lpObj->pChaosBox[n]),
; 936  : 				g_kJewelOfHarmonySystem.GetItemOptionLevel(&lpObj->pChaosBox[n]),
; 937  : 				lpObj->pChaosBox[n].m_SocketOption[0],lpObj->pChaosBox[n].m_SocketOption[1],lpObj->pChaosBox[n].m_SocketOption[2],lpObj->pChaosBox[n].m_SocketOption[3],lpObj->pChaosBox[n].m_SocketOption[4]);

  00049	8b 87 10 12 00
	00		 mov	 eax, DWORD PTR [edi+4624]
  0004f	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00055	0f b6 94 18 cc
	00 00 00	 movzx	 edx, BYTE PTR [eax+ebx+204]
  0005d	03 c3		 add	 eax, ebx
  0005f	83 c4 08	 add	 esp, 8
  00062	52		 push	 edx
  00063	0f b6 90 ca 00
	00 00		 movzx	 edx, BYTE PTR [eax+202]
  0006a	8d 34 0b	 lea	 esi, DWORD PTR [ebx+ecx]
  0006d	0f b6 88 cb 00
	00 00		 movzx	 ecx, BYTE PTR [eax+203]
  00074	51		 push	 ecx
  00075	0f b6 88 c9 00
	00 00		 movzx	 ecx, BYTE PTR [eax+201]
  0007c	52		 push	 edx
  0007d	0f b6 90 c8 00
	00 00		 movzx	 edx, BYTE PTR [eax+200]
  00084	51		 push	 ecx
  00085	52		 push	 edx
  00086	50		 push	 eax
  00087	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  0008c	e8 00 00 00 00	 call	 ?GetItemOptionLevel@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemOptionLevel
  00091	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00097	0f b6 c0	 movzx	 eax, al
  0009a	03 cb		 add	 ecx, ebx
  0009c	50		 push	 eax
  0009d	51		 push	 ecx
  0009e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  000a3	e8 00 00 00 00	 call	 ?GetItemStrengthenOption@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemStrengthenOption
  000a8	0f b6 8e aa 00
	00 00		 movzx	 ecx, BYTE PTR [esi+170]
  000af	d9 46 24	 fld	 DWORD PTR [esi+36]
  000b2	0f b6 d0	 movzx	 edx, al
  000b5	0f b6 86 c6 00
	00 00		 movzx	 eax, BYTE PTR [esi+198]
  000bc	52		 push	 edx
  000bd	0f b6 55 fa	 movzx	 edx, BYTE PTR _ExOption$[ebp+6]
  000c1	c1 e8 07	 shr	 eax, 7
  000c4	50		 push	 eax
  000c5	0f b6 45 f9	 movzx	 eax, BYTE PTR _ExOption$[ebp+5]
  000c9	51		 push	 ecx
  000ca	0f b6 4d f8	 movzx	 ecx, BYTE PTR _ExOption$[ebp+4]
  000ce	52		 push	 edx
  000cf	0f b6 55 f7	 movzx	 edx, BYTE PTR _ExOption$[ebp+3]
  000d3	50		 push	 eax
  000d4	0f b6 45 f6	 movzx	 eax, BYTE PTR _ExOption$[ebp+2]
  000d8	51		 push	 ecx
  000d9	0f b6 4d f5	 movzx	 ecx, BYTE PTR _ExOption$[ebp+1]
  000dd	52		 push	 edx
  000de	0f b6 55 f4	 movzx	 edx, BYTE PTR _ExOption$[ebp]
  000e2	50		 push	 eax
  000e3	51		 push	 ecx
  000e4	52		 push	 edx
  000e5	e8 00 00 00 00	 call	 __ftol2_sse
  000ea	0f b6 8e 92 00
	00 00		 movzx	 ecx, BYTE PTR [esi+146]
  000f1	0f b6 96 91 00
	00 00		 movzx	 edx, BYTE PTR [esi+145]
  000f8	50		 push	 eax
  000f9	8b 06		 mov	 eax, DWORD PTR [esi]
  000fb	50		 push	 eax
  000fc	0f b6 86 90 00
	00 00		 movzx	 eax, BYTE PTR [esi+144]
  00103	51		 push	 ecx
  00104	0f bf 4e 08	 movsx	 ecx, WORD PTR [esi+8]
  00108	52		 push	 edx
  00109	50		 push	 eax
  0010a	51		 push	 ecx
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  00112	8b 55 f0	 mov	 edx, DWORD PTR _n$190288[ebp]
  00115	50		 push	 eax
  00116	52		 push	 edx
  00117	8b 55 ec	 mov	 edx, DWORD PTR _sLogType$GSCopy$[ebp]
  0011a	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0011d	50		 push	 eax
  0011e	8d 4f 52	 lea	 ecx, DWORD PTR [edi+82]
  00121	51		 push	 ecx
  00122	52		 push	 edx
  00123	68 00 00 00 00	 push	 OFFSET ??_C@_0IF@FONACAKJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd@
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0012e	83 c4 70	 add	 esp, 112		; 00000070H
$LN3@LogChaosIt:

; 921  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 922  : 
; 923  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00131	ff 45 f0	 inc	 DWORD PTR _n$190288[ebp]
  00134	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  0013a	81 fb 80 1a 00
	00		 cmp	 ebx, 6784		; 00001a80H
  00140	0f 8c db fe ff
	ff		 jl	 $LL4@LogChaosIt

; 938  : 		}
; 939  : 	}
; 940  : }

  00146	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	33 cd		 xor	 ecx, ebp
  0014d	5b		 pop	 ebx
  0014e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c2 08 00	 ret	 8
?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ENDP ; CChaosBox::LogChaosItem
_TEXT	ENDS
PUBLIC	?IsPlusItemJewel@CChaosBox@@QAEHH@Z		; CChaosBox::IsPlusItemJewel
; Function compile flags: /Ogtp
;	COMDAT ?IsPlusItemJewel@CChaosBox@@QAEHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
?IsPlusItemJewel@CChaosBox@@QAEHH@Z PROC		; CChaosBox::IsPlusItemJewel, COMDAT
; _this$ = ecx

; 1432 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 : 	switch( iType )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00006	3d 35 1c 00 00	 cmp	 eax, 7221		; 00001c35H
  0000b	7f 17		 jg	 SHORT $LN7@IsPlusItem
  0000d	74 30		 je	 SHORT $LN2@IsPlusItem
  0000f	3d 0f 18 00 00	 cmp	 eax, 6159		; 0000180fH
  00014	74 29		 je	 SHORT $LN2@IsPlusItem
  00016	3d 0c 1c 00 00	 cmp	 eax, 7180		; 00001c0cH
  0001b	7e 1c		 jle	 SHORT $LN1@IsPlusItem
  0001d	3d 0e 1c 00 00	 cmp	 eax, 7182		; 00001c0eH
  00022	eb 13		 jmp	 SHORT $LN8@IsPlusItem
$LN7@IsPlusItem:
  00024	3d 60 1c 00 00	 cmp	 eax, 7264		; 00001c60H
  00029	74 14		 je	 SHORT $LN2@IsPlusItem
  0002b	3d bc 1c 00 00	 cmp	 eax, 7356		; 00001cbcH
  00030	7e 07		 jle	 SHORT $LN1@IsPlusItem
  00032	3d be 1c 00 00	 cmp	 eax, 7358		; 00001cbeH
$LN8@IsPlusItem:
  00037	7e 06		 jle	 SHORT $LN2@IsPlusItem
$LN1@IsPlusItem:

; 1443 : 	default:
; 1444 : 		return FALSE;

  00039	33 c0		 xor	 eax, eax

; 1445 : 	}
; 1446 : }

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
$LN2@IsPlusItem:

; 1434 : 	{
; 1435 : 	case ITEMGET(14, 53):
; 1436 : 	case ITEMGET(12, 15):
; 1437 : 	case ITEMGET(14, 13):
; 1438 : 	case ITEMGET(14, 14):
; 1439 : 	case ITEMGET(14, 96):
; 1440 : 	case ITEMGET(14, 189):
; 1441 : 	case ITEMGET(14, 190):
; 1442 : 		return TRUE;

  0003f	b8 01 00 00 00	 mov	 eax, 1

; 1445 : 	}
; 1446 : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?IsPlusItemJewel@CChaosBox@@QAEHH@Z ENDP		; CChaosBox::IsPlusItemJewel
_TEXT	ENDS
PUBLIC	??_C@_0ED@JKKAJEKA@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fai@ ; `string'
PUBLIC	??_C@_0EG@BMPMHKIC@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Suc@ ; `string'
PUBLIC	??_C@_0BO@BKFHPCAO@?$FLDinorantMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0M@OEKEBNDM@DinorantMix?$AA@		; `string'
PUBLIC	__real@406fe00000000000
PUBLIC	__$ArrayPad$
PUBLIC	?PegasiaChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::PegasiaChaosMix
EXTRN	__allmul:PROC
;	COMDAT ??_C@_0ED@JKKAJEKA@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fai@
CONST	SEGMENT
??_C@_0ED@JKKAJEKA@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fai@ DB '['
	DB	'DinorantMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate '
	DB	': %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@BMPMHKIC@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Suc@
CONST	SEGMENT
??_C@_0EG@BMPMHKIC@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Suc@ DB '['
	DB	'DinorantMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRa'
	DB	'te : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BKFHPCAO@?$FLDinorantMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BO@BKFHPCAO@?$FLDinorantMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Dinor'
	DB	'antMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OEKEBNDM@DinorantMix?$AA@
CONST	SEGMENT
??_C@_0M@OEKEBNDM@DinorantMix?$AA@ DB 'DinorantMix', 00H ; `string'
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?PegasiaChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
_UniriaCount$ = -32					; size = 4
_ChoasGemCount$ = -28					; size = 4
_iCharmOfLuckCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?PegasiaChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::PegasiaChaosMix, COMDAT
; _this$ = ecx

; 1450 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 1451 : 	lpObj->ChaosLock = TRUE;
; 1452 : 	int UniriaCount = 0;

  00016	33 ff		 xor	 edi, edi
  00018	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx
  0001b	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00025	89 7d e0	 mov	 DWORD PTR _UniriaCount$[ebp], edi

; 1453 : 	int ChoasGemCount = 0;

  00028	89 7d e4	 mov	 DWORD PTR _ChoasGemCount$[ebp], edi

; 1454 : 	int iCharmOfLuckCount = 0;

  0002b	33 db		 xor	 ebx, ebx
  0002d	8d 49 00	 npad	 3
$LL19@PegasiaCha:

; 1457 : 	{
; 1458 : 		if (lpObj->pChaosBox[n].IsItem() == TRUE)

  00030	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00036	03 cf		 add	 ecx, edi
  00038	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0003d	83 f8 01	 cmp	 eax, 1
  00040	75 51		 jne	 SHORT $LN18@PegasiaCha

; 1459 : 		{
; 1460 : 			if (lpObj->pChaosBox[n].m_Type == ITEMGET(13, 2) && lpObj->pChaosBox[n].m_Durability == 255.0f)	// Uniria

  00042	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  00048	0f b7 4c 3a 06	 movzx	 ecx, WORD PTR [edx+edi+6]
  0004d	b8 02 1a 00 00	 mov	 eax, 6658		; 00001a02H
  00052	66 3b c8	 cmp	 cx, ax
  00055	75 18		 jne	 SHORT $LN15@PegasiaCha
  00057	d9 44 3a 24	 fld	 DWORD PTR [edx+edi+36]
  0005b	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@406fe00000000000
  00061	da e9		 fucompp
  00063	df e0		 fnstsw	 ax
  00065	f6 c4 44	 test	 ah, 68			; 00000044H
  00068	7a 05		 jp	 SHORT $LN15@PegasiaCha

; 1461 : 			{
; 1462 : 				UniriaCount++;

  0006a	ff 45 e0	 inc	 DWORD PTR _UniriaCount$[ebp]
  0006d	eb 24		 jmp	 SHORT $LN18@PegasiaCha
$LN15@PegasiaCha:

; 1463 : 			}
; 1464 : 			else if (lpObj->pChaosBox[n].m_Type == ITEMGET(12, 15)) // Chaos Gem

  0006f	b8 0f 18 00 00	 mov	 eax, 6159		; 0000180fH
  00074	66 3b c8	 cmp	 cx, ax
  00077	75 05		 jne	 SHORT $LN13@PegasiaCha

; 1465 : 			{
; 1466 : 				ChoasGemCount++;

  00079	ff 45 e4	 inc	 DWORD PTR _ChoasGemCount$[ebp]
  0007c	eb 15		 jmp	 SHORT $LN18@PegasiaCha
$LN13@PegasiaCha:

; 1467 : 			}
; 1468 : 			else if (lpObj->pChaosBox[n].m_Type == ITEMGET(14, 53))	// Charm Of Luck

  0007e	b8 35 1c 00 00	 mov	 eax, 7221		; 00001c35H
  00083	66 3b c8	 cmp	 cx, ax
  00086	75 0b		 jne	 SHORT $LN18@PegasiaCha

; 1469 : 			{
; 1470 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00088	d9 44 3a 24	 fld	 DWORD PTR [edx+edi+36]
  0008c	e8 00 00 00 00	 call	 __ftol2_sse
  00091	03 d8		 add	 ebx, eax
$LN18@PegasiaCha:

; 1455 : 
; 1456 : 	for (int n = 0; n < CHAOS_BOX_SIZE; n++)

  00093	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00099	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0009f	7c 8f		 jl	 SHORT $LL19@PegasiaCha

; 1471 : 			}
; 1472 : 		}
; 1473 : 	}
; 1474 : 
; 1475 : 	if (UniriaCount != 10 || ChoasGemCount != 1)

  000a1	83 7d e0 0a	 cmp	 DWORD PTR _UniriaCount$[ebp], 10 ; 0000000aH
  000a5	89 5d e8	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], ebx
  000a8	0f 85 4e 02 00
	00		 jne	 $LN9@PegasiaCha
  000ae	83 7d e4 01	 cmp	 DWORD PTR _ChoasGemCount$[ebp], 1
  000b2	0f 85 44 02 00
	00		 jne	 $LN9@PegasiaCha

; 1478 : 		return FALSE;
; 1479 : 	}
; 1480 : 
; 1481 : 	PMSG_CHAOSMIXRESULT pMsg;
; 1482 : 
; 1483 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  000b8	6a 10		 push	 16			; 00000010H
  000ba	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000bd	68 86 00 00 00	 push	 134			; 00000086H
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1484 : 	pMsg.Result = CB_ERROR;

  000cb	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 1485 : 
; 1486 : 	if ( iCharmOfLuckCount > 10 )

  000cf	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000d2	7e 27		 jle	 SHORT $LN8@PegasiaCha

; 1487 : 	{
; 1488 : 		lpObj->ChaosLock = FALSE;
; 1489 : 		pMsg.Result = 0xF0;
; 1490 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000d4	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  000d8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000da	52		 push	 edx
  000db	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000de	50		 push	 eax
  000df	51		 push	 ecx
  000e0	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000ea	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  000ee	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1491 : 
; 1492 : 		return 0;

  000f6	e9 0b 02 00 00	 jmp	 $LN25@PegasiaCha
$LN8@PegasiaCha:

; 1493 : 	}
; 1494 : 
; 1495 : 	int nChaosNeedMoney = 500000;
; 1496 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  000fb	8b 16		 mov	 edx, DWORD PTR [esi]
  000fd	52		 push	 edx
  000fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00103	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00108	6a 00		 push	 0
  0010a	99		 cdq
  0010b	68 20 a1 07 00	 push	 500000			; 0007a120H
  00110	52		 push	 edx
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 __allmul
  00117	6a 00		 push	 0
  00119	6a 64		 push	 100			; 00000064H
  0011b	52		 push	 edx
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 __alldiv
  00122	8b d8		 mov	 ebx, eax

; 1497 : 
; 1498 : 	if ( iChaosTaxMoney < 0 )

  00124	85 db		 test	 ebx, ebx
  00126	79 02		 jns	 SHORT $LN7@PegasiaCha

; 1499 : 	{
; 1500 : 		iChaosTaxMoney = 0;

  00128	33 db		 xor	 ebx, ebx
$LN7@PegasiaCha:

; 1501 : 	}
; 1502 : 
; 1503 : 	nChaosNeedMoney += iChaosTaxMoney;

  0012a	8d bb 20 a1 07
	00		 lea	 edi, DWORD PTR [ebx+500000]

; 1504 : 
; 1505 : 	if ( nChaosNeedMoney < 0 )

  00130	85 ff		 test	 edi, edi
  00132	79 02		 jns	 SHORT $LN6@PegasiaCha

; 1506 : 	{
; 1507 : 		nChaosNeedMoney = 0;

  00134	33 ff		 xor	 edi, edi
$LN6@PegasiaCha:

; 1508 : 	}
; 1509 : 
; 1510 : 	if ( lpObj->Money < nChaosNeedMoney )

  00136	39 be cc 00 00
	00		 cmp	 DWORD PTR [esi+204], edi
  0013c	7d 44		 jge	 SHORT $LN5@PegasiaCha

; 1511 : 	{
; 1512 : 		lpObj->ChaosLock = FALSE;
; 1513 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 1514 : 		
; 1515 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  0013e	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00142	8b 16		 mov	 edx, DWORD PTR [esi]
  00144	50		 push	 eax
  00145	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00148	51		 push	 ecx
  00149	52		 push	 edx
  0014a	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00154	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00158	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	5f		 pop	 edi

; 1516 : 		lpObj->ChaosLock = FALSE;

  00161	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0016b	5e		 pop	 esi

; 1517 : 
; 1518 : 		return TRUE;

  0016c	b8 01 00 00 00	 mov	 eax, 1
  00171	5b		 pop	 ebx

; 1568 : 
; 1569 : 		lpObj->ChaosLock = FALSE;
; 1570 : 		return FALSE;
; 1571 : 	}
; 1572 : }

  00172	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00175	33 cd		 xor	 ecx, ebp
  00177	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c2 04 00	 ret	 4
$LN5@PegasiaCha:

; 1519 : 	}
; 1520 : 
; 1521 : 	LogChaosItem(lpObj, "DinorantMix");

  00182	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OEKEBNDM@DinorantMix?$AA@
  0018a	56		 push	 esi
  0018b	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 1522 : 	LogAddTD("[DinorantMix] Chaos Mix Start");

  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BKFHPCAO@?$FLDinorantMix?$FN?5Chaos?5Mix?5Start?$AA@
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1523 : 	lpObj->ChaosSuccessRate = 70;	// Succes Rate for Dinorant
; 1524 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  0019b	8b 45 e8	 mov	 eax, DWORD PTR _iCharmOfLuckCount$[ebp]

; 1525 : 	lpObj->Money -= nChaosNeedMoney;

  0019e	29 be cc 00 00
	00		 sub	 DWORD PTR [esi+204], edi
  001a4	83 c4 04	 add	 esp, 4
  001a7	83 c0 46	 add	 eax, 70			; 00000046H

; 1526 : 
; 1527 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001aa	53		 push	 ebx
  001ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001b0	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
  001b6	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 1528 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001bb	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  001c1	8b 16		 mov	 edx, DWORD PTR [esi]
  001c3	51		 push	 ecx
  001c4	52		 push	 edx
  001c5	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001ca	83 c4 08	 add	 esp, 8

; 1529 : 
; 1530 : 	if ( (rand()%100 ) < lpObj->ChaosSuccessRate )

  001cd	e8 00 00 00 00	 call	 _rand
  001d2	99		 cdq
  001d3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001d8	f7 f9		 idiv	 ecx
  001da	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001e0	0f 8d cb 00 00
	00		 jge	 $LN4@PegasiaCha

; 1531 : 	{
; 1532 : 		int Dinorant = ITEMGET(13,3);
; 1533 : 		int Option3 = 0;

  001e6	33 db		 xor	 ebx, ebx

; 1534 : 
; 1535 : 		if ( (rand()% 100) < 30 )

  001e8	e8 00 00 00 00	 call	 _rand
  001ed	99		 cdq
  001ee	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001f3	f7 f9		 idiv	 ecx
  001f5	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  001f8	7d 3f		 jge	 SHORT $LN24@PegasiaCha

; 1536 : 		{
; 1537 : 			Option3 = 1 <<  ((rand()%3)) ;

  001fa	e8 00 00 00 00	 call	 _rand
  001ff	99		 cdq
  00200	b9 03 00 00 00	 mov	 ecx, 3
  00205	f7 f9		 idiv	 ecx
  00207	bb 01 00 00 00	 mov	 ebx, 1
  0020c	8b ca		 mov	 ecx, edx
  0020e	d3 e3		 shl	 ebx, cl

; 1538 : 
; 1539 : 			if ( (rand()%5) == 0 )

  00210	e8 00 00 00 00	 call	 _rand
  00215	99		 cdq
  00216	b9 05 00 00 00	 mov	 ecx, 5
  0021b	f7 f9		 idiv	 ecx
  0021d	85 d2		 test	 edx, edx
  0021f	75 18		 jne	 SHORT $LN24@PegasiaCha

; 1540 : 			{
; 1541 : 				Option3 |= 1 << (rand()%3);

  00221	e8 00 00 00 00	 call	 _rand
  00226	99		 cdq
  00227	b9 03 00 00 00	 mov	 ecx, 3
  0022c	f7 f9		 idiv	 ecx
  0022e	b8 01 00 00 00	 mov	 eax, 1
  00233	8b ca		 mov	 ecx, edx
  00235	d3 e0		 shl	 eax, cl
  00237	0b d8		 or	 ebx, eax
$LN24@PegasiaCha:

; 1542 : 			}
; 1543 : 		}
; 1544 : 
; 1545 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, Dinorant, 0, 255, 1, 0, Option3, -1, 0, 0);

  00239	6a 00		 push	 0
  0023b	6a 00		 push	 0
  0023d	6a 00		 push	 0
  0023f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00241	6a 00		 push	 0
  00243	6a ff		 push	 -1
  00245	53		 push	 ebx
  00246	6a 00		 push	 0
  00248	6a 01		 push	 1
  0024a	68 ff 00 00 00	 push	 255			; 000000ffH
  0024f	6a 00		 push	 0
  00251	68 03 1a 00 00	 push	 6659			; 00001a03H
  00256	6a 00		 push	 0
  00258	6a 00		 push	 0
  0025a	68 ff 00 00 00	 push	 255			; 000000ffH
  0025f	51		 push	 ecx
  00260	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 1546 : 		gObjInventoryCommit(lpObj->m_Index);

  00265	8b 16		 mov	 edx, DWORD PTR [esi]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 1547 : 
; 1548 : 		LogAddTD("[DinorantMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 1549 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  0026d	8b 45 e8	 mov	 eax, DWORD PTR _iCharmOfLuckCount$[ebp]
  00270	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00276	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  0027c	83 c4 40	 add	 esp, 64			; 00000040H
  0027f	50		 push	 eax
  00280	57		 push	 edi
  00281	51		 push	 ecx
  00282	52		 push	 edx
  00283	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00286	50		 push	 eax
  00287	83 c6 52	 add	 esi, 82			; 00000052H
  0028a	56		 push	 esi
  0028b	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BMPMHKIC@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Suc@
  00290	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00296	83 c4 1c	 add	 esp, 28			; 0000001cH
  00299	5f		 pop	 edi
  0029a	5e		 pop	 esi

; 1550 : 
; 1551 : #if( __4GAMERS__ == 1 )
; 1552 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 1553 : #endif
; 1554 : 
; 1555 : 		return TRUE;

  0029b	b8 01 00 00 00	 mov	 eax, 1
  002a0	5b		 pop	 ebx

; 1568 : 
; 1569 : 		lpObj->ChaosLock = FALSE;
; 1570 : 		return FALSE;
; 1571 : 	}
; 1572 : }

  002a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a4	33 cd		 xor	 ecx, ebp
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c2 04 00	 ret	 4
$LN4@PegasiaCha:

; 1556 : 	}
; 1557 : 	else
; 1558 : 	{
; 1559 : #if( __4GAMERS__ == 1 )
; 1560 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 1561 : #endif
; 1562 : 		ChaosBoxInit(lpObj);	// Errase Chaos Box

  002b1	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b4	56		 push	 esi
  002b5	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 1563 : 		GCUserChaosBoxSend(lpObj, 0);

  002ba	6a 00		 push	 0
  002bc	56		 push	 esi
  002bd	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 1564 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  002c2	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  002c6	8b 06		 mov	 eax, DWORD PTR [esi]
  002c8	51		 push	 ecx
  002c9	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  002cc	52		 push	 edx
  002cd	50		 push	 eax
  002ce	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1565 : 
; 1566 : 		LogAddTD("[DinorantMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 1567 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  002d3	8b 4d e8	 mov	 ecx, DWORD PTR _iCharmOfLuckCount$[ebp]
  002d6	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  002dc	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  002e2	51		 push	 ecx
  002e3	57		 push	 edi
  002e4	52		 push	 edx
  002e5	50		 push	 eax
  002e6	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  002e9	51		 push	 ecx
  002ea	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  002ed	52		 push	 edx
  002ee	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@JKKAJEKA@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fai@
  002f3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002f9	83 c4 30	 add	 esp, 48			; 00000030H
$LN9@PegasiaCha:

; 1476 : 	{
; 1477 : 		lpObj->ChaosLock = FALSE;

  002fc	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN25@PegasiaCha:

; 1568 : 
; 1569 : 		lpObj->ChaosLock = FALSE;
; 1570 : 		return FALSE;
; 1571 : 	}
; 1572 : }

  00306	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00309	5f		 pop	 edi
  0030a	5e		 pop	 esi
  0030b	33 cd		 xor	 ecx, ebp
  0030d	33 c0		 xor	 eax, eax
  0030f	5b		 pop	 ebx
  00310	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00315	8b e5		 mov	 esp, ebp
  00317	5d		 pop	 ebp
  00318	c2 04 00	 ret	 4
?PegasiaChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::PegasiaChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0EB@FKBAIBLL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@ ; `string'
PUBLIC	??_C@_0EE@PAFLGDEL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@ ; `string'
PUBLIC	??_C@_0BM@EFIHICLO@?$FLCircleMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_09CKGJGION@CircleMix?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CircleChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::CircleChaosMix
;	COMDAT ??_C@_0EB@FKBAIBLL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@
CONST	SEGMENT
??_C@_0EB@FKBAIBLL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@ DB '['
	DB	'CircleMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@PAFLGDEL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@
CONST	SEGMENT
??_C@_0EE@PAFLGDEL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@ DB '['
	DB	'CircleMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate'
	DB	' : %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EFIHICLO@?$FLCircleMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BM@EFIHICLO@?$FLCircleMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[CircleM'
	DB	'ix] Chaos Mix Start', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09CKGJGION@CircleMix?$AA@
CONST	SEGMENT
??_C@_09CKGJGION@CircleMix?$AA@ DB 'CircleMix', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CircleChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
_CreatureGemCount$ = -32				; size = 4
_ChoasGemCount$ = -28					; size = 4
_iCharmOfLuckCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?CircleChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::CircleChaosMix, COMDAT
; _this$ = ecx

; 1580 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 1581 : 	lpObj->ChaosLock = TRUE;
; 1582 : 
; 1583 : 	int CreatureGemCount = 0;

  00016	33 ff		 xor	 edi, edi
  00018	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx
  0001b	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00025	89 7d e0	 mov	 DWORD PTR _CreatureGemCount$[ebp], edi

; 1584 : 	int ChoasGemCount = 0;

  00028	89 7d e4	 mov	 DWORD PTR _ChoasGemCount$[ebp], edi

; 1585 : 	int iCharmOfLuckCount = 0;

  0002b	33 db		 xor	 ebx, ebx
  0002d	8d 49 00	 npad	 3
$LL26@CircleChao:

; 1588 : 	{
; 1589 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00030	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00036	03 cf		 add	 ecx, edi
  00038	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0003d	83 f8 01	 cmp	 eax, 1
  00040	75 3e		 jne	 SHORT $LN25@CircleChao

; 1590 : 		{
; 1591 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )	// Jewel of Creation

  00042	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00048	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  0004d	ba 16 1c 00 00	 mov	 edx, 7190		; 00001c16H
  00052	66 3b c2	 cmp	 ax, dx
  00055	75 05		 jne	 SHORT $LN22@CircleChao

; 1592 : 			{
; 1593 : 				CreatureGemCount++;

  00057	ff 45 e0	 inc	 DWORD PTR _CreatureGemCount$[ebp]
  0005a	eb 24		 jmp	 SHORT $LN25@CircleChao
$LN22@CircleChao:

; 1594 : 			}
; 1595 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) ) // Chaos Gem

  0005c	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00061	66 3b c2	 cmp	 ax, dx
  00064	75 05		 jne	 SHORT $LN20@CircleChao

; 1596 : 			{
; 1597 : 				ChoasGemCount++;

  00066	ff 45 e4	 inc	 DWORD PTR _ChoasGemCount$[ebp]
  00069	eb 15		 jmp	 SHORT $LN25@CircleChao
$LN20@CircleChao:

; 1598 : 			}
; 1599 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  0006b	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  00070	66 3b c2	 cmp	 ax, dx
  00073	75 0b		 jne	 SHORT $LN25@CircleChao

; 1600 : 			{
; 1601 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00075	d9 44 39 24	 fld	 DWORD PTR [ecx+edi+36]
  00079	e8 00 00 00 00	 call	 __ftol2_sse
  0007e	03 d8		 add	 ebx, eax
$LN25@CircleChao:

; 1586 : 
; 1587 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00080	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00086	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0008c	7c a2		 jl	 SHORT $LL26@CircleChao

; 1602 : 			}
; 1603 : 		}
; 1604 : 	}
; 1605 : 
; 1606 : 	if ( CreatureGemCount != 1 || ChoasGemCount != 1 )

  0008e	bf 01 00 00 00	 mov	 edi, 1
  00093	89 5d e8	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], ebx
  00096	39 7d e0	 cmp	 DWORD PTR _CreatureGemCount$[ebp], edi
  00099	0f 85 8e 02 00
	00		 jne	 $LN16@CircleChao
  0009f	39 7d e4	 cmp	 DWORD PTR _ChoasGemCount$[ebp], edi
  000a2	0f 85 85 02 00
	00		 jne	 $LN16@CircleChao

; 1607 : 	{
; 1608 : 		return FALSE;
; 1609 : 	}
; 1610 : 
; 1611 : 	PMSG_CHAOSMIXRESULT pMsg;
; 1612 : 
; 1613 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  000a8	6a 10		 push	 16			; 00000010H
  000aa	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000ad	68 86 00 00 00	 push	 134			; 00000086H
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1614 : 	pMsg.Result = CB_ERROR;

  000bb	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 1615 : 
; 1616 : 	if ( iCharmOfLuckCount > 10 )

  000bf	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000c2	7e 37		 jle	 SHORT $LN15@CircleChao

; 1617 : 	{
; 1618 : 		lpObj->ChaosLock = FALSE;
; 1619 : 		pMsg.Result = 0xF0;
; 1620 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000c4	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  000c8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ca	51		 push	 ecx
  000cb	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  000ce	52		 push	 edx
  000cf	50		 push	 eax
  000d0	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000da	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  000de	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1621 : 
; 1622 : 		return 1;

  000e6	8b c7		 mov	 eax, edi
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx

; 1719 : 
; 1720 : 		return FALSE;
; 1721 : 	}
; 1722 : }

  000eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ee	33 cd		 xor	 ecx, ebp
  000f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
$LN15@CircleChao:

; 1623 : 	}
; 1624 : 
; 1625 : 	if ( lpObj->Level < 10 )

  000fb	66 83 be 96 00
	00 00 0a	 cmp	 WORD PTR [esi+150], 10	; 0000000aH
  00103	7d 37		 jge	 SHORT $LN14@CircleChao

; 1626 : 	{
; 1627 : 		pMsg.Result = CB_LOW_LEVEL_USER;
; 1628 : 
; 1629 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00105	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00109	8b 06		 mov	 eax, DWORD PTR [esi]
  0010b	51		 push	 ecx
  0010c	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0010f	52		 push	 edx
  00110	50		 push	 eax
  00111	c6 45 ef 04	 mov	 BYTE PTR _pMsg$[ebp+3], 4
  00115	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1630 : 		lpObj->ChaosLock = FALSE;
; 1631 : 
; 1632 : 		return TRUE;

  0011d	8b c7		 mov	 eax, edi
  0011f	5f		 pop	 edi
  00120	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 1719 : 
; 1720 : 		return FALSE;
; 1721 : 	}
; 1722 : }

  0012c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012f	33 cd		 xor	 ecx, ebp
  00131	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c2 04 00	 ret	 4
$LN14@CircleChao:

; 1633 : 	}
; 1634 : 
; 1635 : 	int nChaosNeedMoney = 3000000;
; 1636 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  0013c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0013e	51		 push	 ecx
  0013f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00144	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00149	6a 00		 push	 0
  0014b	99		 cdq
  0014c	68 c0 c6 2d 00	 push	 3000000			; 002dc6c0H
  00151	52		 push	 edx
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 __allmul
  00158	6a 00		 push	 0
  0015a	6a 64		 push	 100			; 00000064H
  0015c	52		 push	 edx
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 __alldiv
  00163	8b d8		 mov	 ebx, eax

; 1637 : 
; 1638 : 	if ( iChaosTaxMoney < 0 )

  00165	85 db		 test	 ebx, ebx
  00167	79 02		 jns	 SHORT $LN13@CircleChao

; 1639 : 	{
; 1640 : 		iChaosTaxMoney = 0;

  00169	33 db		 xor	 ebx, ebx
$LN13@CircleChao:

; 1641 : 	}
; 1642 : 
; 1643 : 	nChaosNeedMoney += iChaosTaxMoney;

  0016b	8d bb c0 c6 2d
	00		 lea	 edi, DWORD PTR [ebx+3000000]

; 1644 : 
; 1645 : 	if ( nChaosNeedMoney < 0 )

  00171	85 ff		 test	 edi, edi
  00173	79 02		 jns	 SHORT $LN12@CircleChao

; 1646 : 	{
; 1647 : 		nChaosNeedMoney = 0;

  00175	33 ff		 xor	 edi, edi
$LN12@CircleChao:

; 1648 : 	}
; 1649 : 
; 1650 : 	if ( lpObj->Money < nChaosNeedMoney )

  00177	39 be cc 00 00
	00		 cmp	 DWORD PTR [esi+204], edi
  0017d	7d 44		 jge	 SHORT $LN11@CircleChao

; 1651 : 	{
; 1652 : 		lpObj->ChaosLock = FALSE;
; 1653 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 1654 : 		
; 1655 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  0017f	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00183	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00185	52		 push	 edx
  00186	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00189	50		 push	 eax
  0018a	51		 push	 ecx
  0018b	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00195	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00199	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a1	5f		 pop	 edi

; 1656 : 		lpObj->ChaosLock = FALSE;

  001a2	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001ac	5e		 pop	 esi

; 1657 : 
; 1658 : 		return TRUE;

  001ad	b8 01 00 00 00	 mov	 eax, 1
  001b2	5b		 pop	 ebx

; 1719 : 
; 1720 : 		return FALSE;
; 1721 : 	}
; 1722 : }

  001b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b6	33 cd		 xor	 ecx, ebp
  001b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c2 04 00	 ret	 4
$LN11@CircleChao:

; 1659 : 	}
; 1660 : 
; 1661 : 	LogChaosItem(lpObj, "CircleMix");

  001c3	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_09CKGJGION@CircleMix?$AA@
  001cb	56		 push	 esi
  001cc	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 1662 : 	LogAddTD("[CircleMix] Chaos Mix Start");

  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EFIHICLO@?$FLCircleMix?$FN?5Chaos?5Mix?5Start?$AA@
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1663 : 	lpObj->ChaosSuccessRate = 90;	// Succes Rate for Fruit
; 1664 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  001dc	8b 55 e8	 mov	 edx, DWORD PTR _iCharmOfLuckCount$[ebp]

; 1665 : 	lpObj->Money -= nChaosNeedMoney;

  001df	29 be cc 00 00
	00		 sub	 DWORD PTR [esi+204], edi
  001e5	83 c4 04	 add	 esp, 4
  001e8	83 c2 5a	 add	 edx, 90			; 0000005aH

; 1666 : 
; 1667 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001eb	53		 push	 ebx
  001ec	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001f1	89 96 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], edx
  001f7	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 1668 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001fc	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00202	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00204	50		 push	 eax
  00205	51		 push	 ecx
  00206	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0020b	83 c4 08	 add	 esp, 8

; 1669 : 
; 1670 : 	if ( (rand()%100 ) < lpObj->ChaosSuccessRate )

  0020e	e8 00 00 00 00	 call	 _rand
  00213	99		 cdq
  00214	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00219	f7 f9		 idiv	 ecx
  0021b	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  00221	0f 8d b1 00 00
	00		 jge	 $LN10@CircleChao

; 1671 : 	{
; 1672 : 		int Fruit = ITEMGET(13,15);	// Fruit
; 1673 : 		int FruitType;
; 1674 : 		int RandonValue = rand() % 100;

  00227	e8 00 00 00 00	 call	 _rand
  0022c	99		 cdq
  0022d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00232	f7 f9		 idiv	 ecx

; 1675 : 
; 1676 : 		if ( RandonValue < 30 )

  00234	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  00237	7d 04		 jge	 SHORT $LN9@CircleChao

; 1677 : 		{
; 1678 : 			FruitType = 0;

  00239	33 c0		 xor	 eax, eax
  0023b	eb 23		 jmp	 SHORT $LN3@CircleChao
$LN9@CircleChao:

; 1679 : 		}
; 1680 : 		else if ( RandonValue < 55 )

  0023d	83 fa 37	 cmp	 edx, 55			; 00000037H
  00240	7d 07		 jge	 SHORT $LN7@CircleChao

; 1681 : 		{
; 1682 : 			FruitType = 1;

  00242	b8 01 00 00 00	 mov	 eax, 1
  00247	eb 17		 jmp	 SHORT $LN3@CircleChao
$LN7@CircleChao:

; 1683 : 		}
; 1684 : 		else if ( RandonValue < 75 )

  00249	83 fa 4b	 cmp	 edx, 75			; 0000004bH
  0024c	7d 07		 jge	 SHORT $LN5@CircleChao

; 1685 : 		{
; 1686 : 			FruitType = 2;

  0024e	b8 02 00 00 00	 mov	 eax, 2
  00253	eb 0b		 jmp	 SHORT $LN3@CircleChao
$LN5@CircleChao:

; 1687 : 		}
; 1688 : 		else if ( RandonValue < 95 )

  00255	33 c0		 xor	 eax, eax
  00257	83 fa 5f	 cmp	 edx, 95			; 0000005fH
  0025a	0f 9d c0	 setge	 al
  0025d	83 c0 03	 add	 eax, 3
$LN3@CircleChao:

; 1689 : 		{
; 1690 : 			FruitType = 3;
; 1691 : 		}
; 1692 : 		else
; 1693 : 		{
; 1694 : 			FruitType = 4;
; 1695 : 		}
; 1696 : 
; 1697 : 		::ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, Fruit, FruitType, 255, 1, 0, 0, -1, 0, 0);

  00260	6a 00		 push	 0
  00262	6a 00		 push	 0
  00264	6a 00		 push	 0
  00266	8b 16		 mov	 edx, DWORD PTR [esi]
  00268	6a 00		 push	 0
  0026a	6a ff		 push	 -1
  0026c	6a 00		 push	 0
  0026e	6a 00		 push	 0
  00270	6a 01		 push	 1
  00272	68 ff 00 00 00	 push	 255			; 000000ffH
  00277	50		 push	 eax
  00278	68 0f 1a 00 00	 push	 6671			; 00001a0fH
  0027d	6a 00		 push	 0
  0027f	6a 00		 push	 0
  00281	68 ff 00 00 00	 push	 255			; 000000ffH
  00286	52		 push	 edx
  00287	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 1698 : 		::gObjInventoryCommit(lpObj->m_Index);

  0028c	8b 06		 mov	 eax, DWORD PTR [esi]
  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 1699 : 
; 1700 : 		LogAddTD("[CircleMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 1701 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  00294	8b 4d e8	 mov	 ecx, DWORD PTR _iCharmOfLuckCount$[ebp]
  00297	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0029d	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  002a3	83 c4 40	 add	 esp, 64			; 00000040H
  002a6	51		 push	 ecx
  002a7	57		 push	 edi
  002a8	52		 push	 edx
  002a9	50		 push	 eax
  002aa	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  002ad	51		 push	 ecx
  002ae	83 c6 52	 add	 esi, 82			; 00000052H
  002b1	56		 push	 esi
  002b2	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@PAFLGDEL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@
  002b7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002bd	83 c4 1c	 add	 esp, 28			; 0000001cH
  002c0	5f		 pop	 edi
  002c1	5e		 pop	 esi

; 1702 : #if( __4GAMERS__ == 1 )
; 1703 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 1704 : #endif
; 1705 : 		return TRUE;

  002c2	b8 01 00 00 00	 mov	 eax, 1
  002c7	5b		 pop	 ebx

; 1719 : 
; 1720 : 		return FALSE;
; 1721 : 	}
; 1722 : }

  002c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002cb	33 cd		 xor	 ecx, ebp
  002cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d2	8b e5		 mov	 esp, ebp
  002d4	5d		 pop	 ebp
  002d5	c2 04 00	 ret	 4
$LN10@CircleChao:

; 1706 : 	}
; 1707 : 	else
; 1708 : 	{
; 1709 : #if( __4GAMERS__ == 1 )
; 1710 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 1711 : #endif
; 1712 : 		ChaosBoxInit(lpObj);

  002d8	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  002db	56		 push	 esi
  002dc	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 1713 : 		GCUserChaosBoxSend(lpObj, 0);

  002e1	6a 00		 push	 0
  002e3	56		 push	 esi
  002e4	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 1714 : 
; 1715 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  002e9	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  002ed	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002ef	52		 push	 edx
  002f0	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002f3	50		 push	 eax
  002f4	51		 push	 ecx
  002f5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1716 : 		LogAddTD("[CircleMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 1717 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  002fa	8b 55 e8	 mov	 edx, DWORD PTR _iCharmOfLuckCount$[ebp]
  002fd	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00303	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00309	52		 push	 edx
  0030a	57		 push	 edi
  0030b	50		 push	 eax
  0030c	51		 push	 ecx
  0030d	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  00310	52		 push	 edx
  00311	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00314	50		 push	 eax
  00315	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@FKBAIBLL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@
  0031a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00320	83 c4 30	 add	 esp, 48			; 00000030H

; 1718 : 		lpObj->ChaosLock = FALSE;

  00323	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN16@CircleChao:

; 1719 : 
; 1720 : 		return FALSE;
; 1721 : 	}
; 1722 : }

  0032d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00330	5f		 pop	 edi
  00331	5e		 pop	 esi
  00332	33 cd		 xor	 ecx, ebp
  00334	33 c0		 xor	 eax, eax
  00336	5b		 pop	 ebx
  00337	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0033c	8b e5		 mov	 esp, ebp
  0033e	5d		 pop	 ebp
  0033f	c2 04 00	 ret	 4
?CircleChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::CircleChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0EB@GCGNBAFG@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@ ; `string'
PUBLIC	??_C@_0EE@BHIPJGFK@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@ ; `string'
PUBLIC	??_C@_0EI@LFGBMPMJ@?$FLMixSystem?$FN?$FLWingChaosMix?$FN?5WingCh@ ; `string'
PUBLIC	??_C@_0BM@JPABEGNL@?$FLWingMix?02?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_09GJEFJCKN@WingMix?02?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?WingChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::WingChaosMix
;	COMDAT ??_C@_0EB@GCGNBAFG@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@
CONST	SEGMENT
??_C@_0EB@GCGNBAFG@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@ DB '['
	DB	'WingMix,2] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@BHIPJGFK@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@
CONST	SEGMENT
??_C@_0EE@BHIPJGFK@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@ DB '['
	DB	'WingMix,2] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate'
	DB	' : %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@LFGBMPMJ@?$FLMixSystem?$FN?$FLWingChaosMix?$FN?5WingCh@
CONST	SEGMENT
??_C@_0EI@LFGBMPMJ@?$FLMixSystem?$FN?$FLWingChaosMix?$FN?5WingCh@ DB '[Mi'
	DB	'xSystem][WingChaosMix] WingCharmItemNum => %d , WingCharmInde'
	DB	'x => %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JPABEGNL@?$FLWingMix?02?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BM@JPABEGNL@?$FLWingMix?02?$FN?5Chaos?5Mix?5Start?$AA@ DB '[WingMi'
	DB	'x,2] Chaos Mix Start', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GJEFJCKN@WingMix?02?$AA@
CONST	SEGMENT
??_C@_09GJEFJCKN@WingMix?02?$AA@ DB 'WingMix,2', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?WingChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iWingNum$190665 = -56					; size = 4
_this$ = -56						; size = 4
_LokesFeathersCount$ = -52				; size = 4
_iChaosMoney$ = -48					; size = 4
_iSleeveOfLord$ = -44					; size = 4
_iOption1$190666 = -40					; size = 4
_iWingChaosMoney$ = -40					; size = 4
_iCharmOfLuckCount$ = -36				; size = 4
_WingCount$ = -32					; size = 4
_iRandomValue$190670 = -28				; size = 4
_WingIndex2$ = -28					; size = 4
_nChaosNeedMoney$ = -24					; size = 4
_ChoasGemCount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?WingChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::WingChaosMix, COMDAT
; _this$ = ecx

; 1727 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 1728 : 	lpObj->ChaosLock = TRUE;
; 1729 : 
; 1730 : 	int WingCount = 0;

  00016	33 ff		 xor	 edi, edi
  00018	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx
  0001b	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00025	89 7d e0	 mov	 DWORD PTR _WingCount$[ebp], edi

; 1731 : 	int ChoasGemCount = 0;

  00028	89 7d e8	 mov	 DWORD PTR _ChoasGemCount$[ebp], edi

; 1732 : 	int LokesFeathersCount = 0;

  0002b	89 7d cc	 mov	 DWORD PTR _LokesFeathersCount$[ebp], edi

; 1733 : 	int WingIndex = -1;
; 1734 : 	int iChaosMoney = 0;

  0002e	33 db		 xor	 ebx, ebx

; 1735 : 	int WingIndex2 = -1;

  00030	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _WingIndex2$[ebp], -1

; 1736 : 	int iWingChaosMoney = 0;

  00037	89 7d d8	 mov	 DWORD PTR _iWingChaosMoney$[ebp], edi

; 1737 : 	int iSleeveOfLord = 0;

  0003a	89 7d d4	 mov	 DWORD PTR _iSleeveOfLord$[ebp], edi

; 1738 : 	int iCharmOfLuckCount = 0;

  0003d	89 7d dc	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], edi
$LL72@WingChaosM:

; 1742 : 	{
; 1743 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00040	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00046	03 cf		 add	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004d	83 f8 01	 cmp	 eax, 1
  00050	0f 85 0f 01 00
	00		 jne	 $LN71@WingChaosM

; 1744 : 		{
; 1745 : 			if ( (lpObj->pChaosBox[n].m_Type >= ITEMGET(12,3) && lpObj->pChaosBox[n].m_Type <= ITEMGET(12,6)) || lpObj->pChaosBox[n].m_Type == ITEMGET(12,42) || lpObj->pChaosBox[n].m_Type == ITEMGET(14,30) )	

  00056	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  0005c	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]
  0005f	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00063	ba 03 18 00 00	 mov	 edx, 6147		; 00001803H
  00068	66 3b c2	 cmp	 ax, dx
  0006b	7c 0e		 jl	 SHORT $LN66@WingChaosM
  0006d	ba 06 18 00 00	 mov	 edx, 6150		; 00001806H
  00072	66 3b c2	 cmp	 ax, dx
  00075	0f 8e 32 05 00
	00		 jle	 $LN77@WingChaosM
$LN66@WingChaosM:
  0007b	ba 2a 18 00 00	 mov	 edx, 6186		; 0000182aH
  00080	66 3b c2	 cmp	 ax, dx
  00083	0f 84 24 05 00
	00		 je	 $LN77@WingChaosM
  00089	ba 1e 1c 00 00	 mov	 edx, 7198		; 00001c1eH
  0008e	66 3b c2	 cmp	 ax, dx
  00091	0f 84 16 05 00
	00		 je	 $LN77@WingChaosM

; 1746 : 			{
; 1747 : 				lpObj->ChaosLock = FALSE;
; 1748 : 
; 1749 : 				return FALSE;
; 1750 : 			}
; 1751 : 			if ( lpObj->pChaosBox[n].m_Type >= ITEMGET(12,0) && lpObj->pChaosBox[n].m_Type <= ITEMGET(12,2) ) 

  00097	ba 00 18 00 00	 mov	 edx, 6144		; 00001800H
  0009c	66 3b c2	 cmp	 ax, dx
  0009f	7c 13		 jl	 SHORT $LN65@WingChaosM
  000a1	ba 02 18 00 00	 mov	 edx, 6146		; 00001802H
  000a6	66 3b c2	 cmp	 ax, dx
  000a9	7f 09		 jg	 SHORT $LN65@WingChaosM

; 1752 : 			{
; 1753 : 				WingCount++;
; 1754 : 				WingIndex = n;
; 1755 : 				iWingChaosMoney = lpObj->pChaosBox[n].m_BuyMoney;

  000ab	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000ae	ff 45 e0	 inc	 DWORD PTR _WingCount$[ebp]
  000b1	89 55 d8	 mov	 DWORD PTR _iWingChaosMoney$[ebp], edx
$LN65@WingChaosM:

; 1756 : 			}
; 1757 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,41) )

  000b4	ba 29 18 00 00	 mov	 edx, 6185		; 00001829H
  000b9	66 3b c2	 cmp	 ax, dx
  000bc	75 0e		 jne	 SHORT $LN64@WingChaosM

; 1758 : 			{
; 1759 : 				WingCount++;
; 1760 : 				WingIndex = n;
; 1761 : 				iWingChaosMoney = lpObj->pChaosBox[n].m_BuyMoney;

  000be	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  000c1	ff 45 e0	 inc	 DWORD PTR _WingCount$[ebp]
  000c4	89 45 d8	 mov	 DWORD PTR _iWingChaosMoney$[ebp], eax
  000c7	e9 99 00 00 00	 jmp	 $LN71@WingChaosM
$LN64@WingChaosM:

; 1762 : 			}
; 1763 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) ) // Chaos

  000cc	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  000d1	66 3b c2	 cmp	 ax, dx
  000d4	75 08		 jne	 SHORT $LN62@WingChaosM

; 1764 : 			{
; 1765 : 				ChoasGemCount++;

  000d6	ff 45 e8	 inc	 DWORD PTR _ChoasGemCount$[ebp]
  000d9	e9 87 00 00 00	 jmp	 $LN71@WingChaosM
$LN62@WingChaosM:

; 1766 : 			}
; 1767 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,14) ) // Feather

  000de	ba 0e 1a 00 00	 mov	 edx, 6670		; 00001a0eH
  000e3	66 3b c2	 cmp	 ax, dx
  000e6	75 11		 jne	 SHORT $LN60@WingChaosM

; 1768 : 			{
; 1769 : 				if ( lpObj->pChaosBox[n].m_Level == 0 ) // Feather

  000e8	66 83 79 08 00	 cmp	 WORD PTR [ecx+8], 0
  000ed	75 05		 jne	 SHORT $LN59@WingChaosM

; 1770 : 				{
; 1771 : 					LokesFeathersCount++;

  000ef	ff 45 cc	 inc	 DWORD PTR _LokesFeathersCount$[ebp]

; 1772 : 				}
; 1773 : 				else	// Crst of Monarch

  000f2	eb 71		 jmp	 SHORT $LN71@WingChaosM
$LN59@WingChaosM:

; 1774 : 				{
; 1775 : 					iSleeveOfLord ++;

  000f4	ff 45 d4	 inc	 DWORD PTR _iSleeveOfLord$[ebp]

; 1776 : 				}

  000f7	eb 6c		 jmp	 SHORT $LN71@WingChaosM
$LN60@WingChaosM:

; 1777 : 			}
; 1778 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  000f9	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000fe	66 3b c2	 cmp	 ax, dx
  00101	75 0d		 jne	 SHORT $LN56@WingChaosM

; 1779 : 			{
; 1780 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00103	d9 41 24	 fld	 DWORD PTR [ecx+36]
  00106	e8 00 00 00 00	 call	 __ftol2_sse
  0010b	01 45 dc	 add	 DWORD PTR _iCharmOfLuckCount$[ebp], eax

; 1781 : 			}
; 1782 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,88) ||

  0010e	eb 55		 jmp	 SHORT $LN71@WingChaosM
$LN56@WingChaosM:

; 1783 : 				      lpObj->pChaosBox[n].m_Type == ITEMGET(13,89) ||
; 1784 : 					  lpObj->pChaosBox[n].m_Type == ITEMGET(13,90) ||
; 1785 : 					  lpObj->pChaosBox[n].m_Type == ITEMGET(13,91) ||
; 1786 : 					  lpObj->pChaosBox[n].m_Type == ITEMGET(13,92) )

  00110	ba 58 1a 00 00	 mov	 edx, 6744		; 00001a58H
  00115	66 3b c2	 cmp	 ax, dx
  00118	74 45		 je	 SHORT $LN53@WingChaosM
  0011a	ba 59 1a 00 00	 mov	 edx, 6745		; 00001a59H
  0011f	66 3b c2	 cmp	 ax, dx
  00122	74 3b		 je	 SHORT $LN53@WingChaosM
  00124	ba 5a 1a 00 00	 mov	 edx, 6746		; 00001a5aH
  00129	66 3b c2	 cmp	 ax, dx
  0012c	74 31		 je	 SHORT $LN53@WingChaosM
  0012e	ba 5b 1a 00 00	 mov	 edx, 6747		; 00001a5bH
  00133	66 3b c2	 cmp	 ax, dx
  00136	74 27		 je	 SHORT $LN53@WingChaosM
  00138	ba 5c 1a 00 00	 mov	 edx, 6748		; 00001a5cH
  0013d	66 3b c2	 cmp	 ax, dx
  00140	74 1d		 je	 SHORT $LN53@WingChaosM

; 1789 : 			}
; 1790 : 			else if ( lpObj->pChaosBox[n].IsExtItem() != FALSE )

  00142	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  00147	85 c0		 test	 eax, eax
  00149	74 1a		 je	 SHORT $LN71@WingChaosM

; 1791 : 			{
; 1792 : 				if ( lpObj->pChaosBox[n].m_Level >= 4 )

  0014b	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00151	66 83 7c 38 08
	04		 cmp	 WORD PTR [eax+edi+8], 4
  00157	7c 0c		 jl	 SHORT $LN71@WingChaosM

; 1793 : 				{
; 1794 : 					iChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  00159	03 5c 38 78	 add	 ebx, DWORD PTR [eax+edi+120]
  0015d	eb 06		 jmp	 SHORT $LN71@WingChaosM
$LN53@WingChaosM:

; 1787 : 			{
; 1788 : 				WingIndex2 = lpObj->pChaosBox[n].m_Type;

  0015f	0f bf c8	 movsx	 ecx, ax
  00162	89 4d e4	 mov	 DWORD PTR _WingIndex2$[ebp], ecx
$LN71@WingChaosM:

; 1739 : 
; 1740 : 	int n;
; 1741 : 	for ( n=0;n<CHAOS_BOX_SIZE;n++)

  00165	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0016b	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00171	0f 8c c9 fe ff
	ff		 jl	 $LL72@WingChaosM

; 1795 : 				}
; 1796 : 			}
; 1797 : 		}
; 1798 : 	}
; 1799 : 
; 1800 : 	PMSG_CHAOSMIXRESULT pMsg;
; 1801 : 
; 1802 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00177	6a 10		 push	 16			; 00000010H
  00179	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0017c	68 86 00 00 00	 push	 134			; 00000086H
  00181	52		 push	 edx
  00182	89 5d d0	 mov	 DWORD PTR _iChaosMoney$[ebp], ebx
  00185	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1803 : 	pMsg.Result = CB_ERROR;
; 1804 : 
; 1805 : 	
; 1806 : 
; 1807 : 	if ( iSleeveOfLord == 1 )

  0018a	8b 45 d4	 mov	 eax, DWORD PTR _iSleeveOfLord$[ebp]
  0018d	b9 01 00 00 00	 mov	 ecx, 1
  00192	83 c4 0c	 add	 esp, 12			; 0000000cH
  00195	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00199	3b c1		 cmp	 eax, ecx
  0019b	75 21		 jne	 SHORT $LN49@WingChaosM

; 1808 : 	{
; 1809 : 		if ( WingCount != 1 || ChoasGemCount != 1 || LokesFeathersCount != 0 )

  0019d	39 4d e0	 cmp	 DWORD PTR _WingCount$[ebp], ecx
  001a0	75 0b		 jne	 SHORT $LN81@WingChaosM
  001a2	39 4d e8	 cmp	 DWORD PTR _ChoasGemCount$[ebp], ecx
  001a5	75 06		 jne	 SHORT $LN81@WingChaosM
  001a7	83 7d cc 00	 cmp	 DWORD PTR _LokesFeathersCount$[ebp], 0
  001ab	74 34		 je	 SHORT $LN44@WingChaosM
$LN81@WingChaosM:

; 1810 : 		{
; 1811 : 			lpObj->ChaosLock = FALSE;
; 1812 : 			pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 1813 : 			DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  001ad	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001b1	8b 16		 mov	 edx, DWORD PTR [esi]
  001b3	50		 push	 eax
  001b4	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  001b7	51		 push	 ecx
  001b8	52		 push	 edx

; 1814 : 			return FALSE;

  001b9	e9 07 04 00 00	 jmp	 $LN90@WingChaosM
$LN49@WingChaosM:

; 1815 : 		}
; 1816 : 	}
; 1817 : 	else if ( LokesFeathersCount == 1 )

  001be	39 4d cc	 cmp	 DWORD PTR _LokesFeathersCount$[ebp], ecx
  001c1	0f 85 f2 03 00
	00		 jne	 $LN45@WingChaosM

; 1818 : 	{
; 1819 : 		if ( WingCount != 1 || ChoasGemCount != 1 || iSleeveOfLord != 0 )

  001c7	39 4d e0	 cmp	 DWORD PTR _WingCount$[ebp], ecx
  001ca	0f 85 f8 00 00
	00		 jne	 $LN82@WingChaosM
  001d0	39 4d e8	 cmp	 DWORD PTR _ChoasGemCount$[ebp], ecx
  001d3	0f 85 ef 00 00
	00		 jne	 $LN82@WingChaosM
  001d9	85 c0		 test	 eax, eax
  001db	0f 85 e7 00 00
	00		 jne	 $LN82@WingChaosM
$LN44@WingChaosM:

; 1833 : 
; 1834 : 		return FALSE;
; 1835 : 	}
; 1836 : 
; 1837 : 	if ( iCharmOfLuckCount > 10 )

  001e1	83 7d dc 0a	 cmp	 DWORD PTR _iCharmOfLuckCount$[ebp], 10 ; 0000000aH
  001e5	7e 22		 jle	 SHORT $LN41@WingChaosM

; 1838 : 	{
; 1839 : 		lpObj->ChaosLock = FALSE;
; 1840 : 		pMsg.Result = 0xF0;
; 1841 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  001e7	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001eb	8b 16		 mov	 edx, DWORD PTR [esi]
  001ed	50		 push	 eax
  001ee	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  001f1	51		 push	 ecx
  001f2	52		 push	 edx
  001f3	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001fd	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  00201	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00206	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@WingChaosM:

; 1842 : 	}
; 1843 : 
; 1844 : 	int nChaosNeedMoney = 5000000;
; 1845 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00209	8b 06		 mov	 eax, DWORD PTR [esi]
  0020b	50		 push	 eax
  0020c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00211	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00216	6a 00		 push	 0
  00218	99		 cdq
  00219	68 40 4b 4c 00	 push	 5000000			; 004c4b40H
  0021e	52		 push	 edx
  0021f	50		 push	 eax
  00220	e8 00 00 00 00	 call	 __allmul
  00225	6a 00		 push	 0
  00227	6a 64		 push	 100			; 00000064H
  00229	52		 push	 edx
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 __alldiv
  00230	8b f8		 mov	 edi, eax

; 1846 : 
; 1847 : 	if ( iChaosTaxMoney < 0 )

  00232	85 ff		 test	 edi, edi
  00234	79 02		 jns	 SHORT $LN40@WingChaosM

; 1848 : 	{
; 1849 : 		iChaosTaxMoney = 0;

  00236	33 ff		 xor	 edi, edi
$LN40@WingChaosM:

; 1850 : 	}
; 1851 : 
; 1852 : 	nChaosNeedMoney += iChaosTaxMoney;

  00238	8d 9f 40 4b 4c
	00		 lea	 ebx, DWORD PTR [edi+5000000]
  0023e	89 5d e8	 mov	 DWORD PTR _nChaosNeedMoney$[ebp], ebx

; 1853 : 
; 1854 : 	if ( nChaosNeedMoney < 0 )

  00241	85 db		 test	 ebx, ebx
  00243	79 05		 jns	 SHORT $LN39@WingChaosM

; 1855 : 	{
; 1856 : 		nChaosNeedMoney = 0;

  00245	33 db		 xor	 ebx, ebx
  00247	89 5d e8	 mov	 DWORD PTR _nChaosNeedMoney$[ebp], ebx
$LN39@WingChaosM:

; 1857 : 	}
; 1858 : 
; 1859 : 	if ( lpObj->Money < nChaosNeedMoney )

  0024a	39 9e cc 00 00
	00		 cmp	 DWORD PTR [esi+204], ebx
  00250	7d 3a		 jge	 SHORT $LN38@WingChaosM

; 1860 : 	{
; 1861 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 1862 : 		
; 1863 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00252	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00256	8b 06		 mov	 eax, DWORD PTR [esi]
  00258	51		 push	 ecx
  00259	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0025c	52		 push	 edx
  0025d	50		 push	 eax
  0025e	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00262	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00267	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026a	5f		 pop	 edi

; 1864 : 		lpObj->ChaosLock = FALSE;

  0026b	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00275	5e		 pop	 esi

; 1865 : 
; 1866 : 		return TRUE;

  00276	b8 01 00 00 00	 mov	 eax, 1
  0027b	5b		 pop	 ebx

; 2049 : 	}
; 2050 : }

  0027c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027f	33 cd		 xor	 ecx, ebp
  00281	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00286	8b e5		 mov	 esp, ebp
  00288	5d		 pop	 ebp
  00289	c2 04 00	 ret	 4
$LN38@WingChaosM:

; 1867 : 	}
; 1868 : 
; 1869 : 	CItem * pWing = &lpObj->pChaosBox[WingIndex];
; 1870 : 	lpObj->ChaosSuccessRate = (DWORD)((DWORD)iWingChaosMoney / (DWORD)4000000);

  0028c	b8 83 de 1b 43	 mov	 eax, 1125899907		; 431bde83H
  00291	f7 65 d8	 mul	 DWORD PTR _iWingChaosMoney$[ebp]
  00294	8b ca		 mov	 ecx, edx

; 1871 : 	lpObj->ChaosSuccessRate += iChaosMoney / 40000;

  00296	b8 ad 8b db 68	 mov	 eax, 1759218605		; 68db8badH
  0029b	f7 6d d0	 imul	 DWORD PTR _iChaosMoney$[ebp]
  0029e	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  002a1	c1 e9 14	 shr	 ecx, 20			; 00000014H
  002a4	8b c2		 mov	 eax, edx
  002a6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002a9	03 ca		 add	 ecx, edx
  002ab	03 c1		 add	 eax, ecx
  002ad	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 1872 : 
; 1873 : 	if ( lpObj->ChaosSuccessRate < 0 )

  002b3	79 0a		 jns	 SHORT $LN37@WingChaosM

; 1874 : 	{
; 1875 : 		lpObj->ChaosSuccessRate = 100;

  002b5	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H
$LN37@WingChaosM:

; 1876 : 	}
; 1877 : 
; 1878 : 	if ( lpObj->ChaosSuccessRate == 0 )

  002bf	83 be 1c 12 00
	00 00		 cmp	 DWORD PTR [esi+4636], 0
  002c6	75 24		 jne	 SHORT $LN36@WingChaosM
$LN82@WingChaosM:

; 1879 : 	{
; 1880 : 		pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 1881 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  002c8	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  002cc	8b 06		 mov	 eax, DWORD PTR [esi]
  002ce	51		 push	 ecx
  002cf	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  002d2	52		 push	 edx
  002d3	50		 push	 eax
  002d4	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  002d8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1882 : 		lpObj->ChaosLock = FALSE;

  002dd	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 1883 : 
; 1884 : 		return FALSE;

  002e7	e9 ec 02 00 00	 jmp	 $LN91@WingChaosM
$LN36@WingChaosM:

; 1885 : 	}
; 1886 : 
; 1887 : 	LogChaosItem(lpObj, "WingMix,2");

  002ec	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  002ef	68 00 00 00 00	 push	 OFFSET ??_C@_09GJEFJCKN@WingMix?02?$AA@
  002f4	56		 push	 esi
  002f5	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 1888 : 	LogAddTD("[WingMix,2] Chaos Mix Start");

  002fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JPABEGNL@?$FLWingMix?02?$FN?5Chaos?5Mix?5Start?$AA@
  002ff	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1889 : 
; 1890 : 	if ( lpObj->ChaosSuccessRate > 90 )

  00305	b8 5a 00 00 00	 mov	 eax, 90			; 0000005aH
  0030a	83 c4 04	 add	 esp, 4
  0030d	39 86 1c 12 00
	00		 cmp	 DWORD PTR [esi+4636], eax
  00313	7e 06		 jle	 SHORT $LN35@WingChaosM

; 1891 : 	{
; 1892 : 		lpObj->ChaosSuccessRate = 90;

  00315	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
$LN35@WingChaosM:

; 1893 : 	}
; 1894 : 
; 1895 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  0031b	8b 4d dc	 mov	 ecx, DWORD PTR _iCharmOfLuckCount$[ebp]
  0031e	01 8e 1c 12 00
	00		 add	 DWORD PTR [esi+4636], ecx

; 1896 : 	lpObj->Money  -= nChaosNeedMoney;

  00324	29 9e cc 00 00
	00		 sub	 DWORD PTR [esi+204], ebx

; 1897 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0032a	57		 push	 edi
  0032b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00330	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 1898 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00335	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0033b	8b 06		 mov	 eax, DWORD PTR [esi]
  0033d	52		 push	 edx
  0033e	50		 push	 eax
  0033f	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00344	83 c4 08	 add	 esp, 8

; 1899 : 
; 1900 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00347	e8 00 00 00 00	 call	 _rand
  0034c	99		 cdq
  0034d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00352	f7 f9		 idiv	 ecx
  00354	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0035a	0f 8d e6 01 00
	00		 jge	 $LN34@WingChaosM

; 1901 : 	{
; 1902 : 		int iWingLevel = 0;
; 1903 : 		int iItemType;
; 1904 : 		int iItemSubType;
; 1905 : 
; 1906 : 		if ( iSleeveOfLord != 0 )

  00360	83 7d d4 00	 cmp	 DWORD PTR _iSleeveOfLord$[ebp], 0
  00364	74 28		 je	 SHORT $LN33@WingChaosM

; 1907 : 		{
; 1908 : 			if( rand()%2 == TRUE )

  00366	e8 00 00 00 00	 call	 _rand
  0036b	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00370	79 05		 jns	 SHORT $LN86@WingChaosM
  00372	48		 dec	 eax
  00373	83 c8 fe	 or	 eax, -2			; fffffffeH
  00376	40		 inc	 eax
$LN86@WingChaosM:
  00377	83 f8 01	 cmp	 eax, 1
  0037a	75 08		 jne	 SHORT $LN32@WingChaosM

; 1909 : 			{
; 1910 : 				iItemType = 12;

  0037c	8d 78 0b	 lea	 edi, DWORD PTR [eax+11]

; 1911 : 				iItemSubType = 49;

  0037f	8d 58 30	 lea	 ebx, DWORD PTR [eax+48]

; 1912 : 			}
; 1913 : 			else

  00382	eb 27		 jmp	 SHORT $LN28@WingChaosM
$LN32@WingChaosM:

; 1914 : 			{
; 1915 : 				iItemType = 13;

  00384	bf 0d 00 00 00	 mov	 edi, 13			; 0000000dH

; 1916 : 				iItemSubType = 30;

  00389	8d 5f 11	 lea	 ebx, DWORD PTR [edi+17]

; 1917 : 			}
; 1918 : 		}
; 1919 : 		else

  0038c	eb 1d		 jmp	 SHORT $LN28@WingChaosM
$LN33@WingChaosM:

; 1920 : 		{
; 1921 : 			iItemType = 12;

  0038e	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH

; 1922 : 			int iRand = rand()%5;

  00393	e8 00 00 00 00	 call	 _rand
  00398	99		 cdq
  00399	b9 05 00 00 00	 mov	 ecx, 5
  0039e	f7 f9		 idiv	 ecx

; 1923 : 
; 1924 : 			if( iRand == 4 )
; 1925 : 			{
; 1926 : 				iItemSubType = 42;

  003a0	8d 5f 1e	 lea	 ebx, DWORD PTR [edi+30]
  003a3	83 fa 04	 cmp	 edx, 4
  003a6	74 03		 je	 SHORT $LN28@WingChaosM

; 1927 : 			}
; 1928 : 			else
; 1929 : 			{
; 1930 : 				iItemSubType = iRand + 3;

  003a8	8d 5a 03	 lea	 ebx, DWORD PTR [edx+3]
$LN28@WingChaosM:

; 1931 : 			}
; 1932 : 		}
; 1933 : 
; 1934 : 		if( WingIndex2 > -1 )

  003ab	8b 45 e4	 mov	 eax, DWORD PTR _WingIndex2$[ebp]
  003ae	83 f8 ff	 cmp	 eax, -1
  003b1	7e 4a		 jle	 SHORT $LN25@WingChaosM

; 1935 : 		{
; 1936 : 			int WingCharm = WingIndex2^ITEMGET(13,0);

  003b3	35 00 1a 00 00	 xor	 eax, 6656		; 00001a00H

; 1937 : 
; 1938 : 			switch( WingCharm )

  003b8	8d 48 a8	 lea	 ecx, DWORD PTR [eax-88]
  003bb	83 f9 04	 cmp	 ecx, 4
  003be	77 2a		 ja	 SHORT $LN19@WingChaosM
  003c0	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN92@WingChaosM[ecx*4]
$LN24@WingChaosM:

; 1939 : 			{
; 1940 : 			case 88:
; 1941 : 				iItemSubType = 5;

  003c7	bb 05 00 00 00	 mov	 ebx, 5

; 1942 : 				break;

  003cc	eb 2f		 jmp	 SHORT $LN25@WingChaosM
$LN23@WingChaosM:

; 1943 : 			case 89:
; 1944 : 				iItemSubType = 4;

  003ce	bb 04 00 00 00	 mov	 ebx, 4

; 1945 : 				break;

  003d3	eb 28		 jmp	 SHORT $LN25@WingChaosM
$LN22@WingChaosM:

; 1946 : 			case 90:
; 1947 : 				iItemSubType = 3;

  003d5	bb 03 00 00 00	 mov	 ebx, 3

; 1948 : 				break;

  003da	eb 21		 jmp	 SHORT $LN25@WingChaosM
$LN21@WingChaosM:

; 1949 : 			case 91:
; 1950 : 				iItemSubType = 42;

  003dc	bb 2a 00 00 00	 mov	 ebx, 42			; 0000002aH

; 1951 : 				break;

  003e1	eb 1a		 jmp	 SHORT $LN25@WingChaosM
$LN20@WingChaosM:

; 1952 : 			case 92:
; 1953 : 				iItemSubType = 6;

  003e3	bb 06 00 00 00	 mov	 ebx, 6

; 1954 : 				break;

  003e8	eb 13		 jmp	 SHORT $LN25@WingChaosM
$LN19@WingChaosM:

; 1955 : 			default:
; 1956 : 				LogAddTD("[MixSystem][WingChaosMix] WingCharmItemNum => %d , WingCharmIndex => %d",
; 1957 : 					WingIndex2,WingCharm);

  003ea	8b 55 e4	 mov	 edx, DWORD PTR _WingIndex2$[ebp]
  003ed	50		 push	 eax
  003ee	52		 push	 edx
  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@LFGBMPMJ@?$FLMixSystem?$FN?$FLWingChaosMix?$FN?5WingCh@
  003f4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003fa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@WingChaosM:

; 1958 : 				break;
; 1959 : 			}
; 1960 : 		}
; 1961 : 
; 1962 : 		int iWingNum = ITEMGET(iItemType, iItemSubType);

  003fd	c1 e7 09	 shl	 edi, 9
  00400	03 fb		 add	 edi, ebx

; 1963 : 		int iOption1 = 0;

  00402	33 db		 xor	 ebx, ebx
  00404	89 7d c8	 mov	 DWORD PTR _iWingNum$190665[ebp], edi
  00407	89 5d d8	 mov	 DWORD PTR _iOption1$190666[ebp], ebx

; 1964 : 		int iOption2 = 0;
; 1965 : 		int iOption3 = 0;

  0040a	33 ff		 xor	 edi, edi

; 1966 : 
; 1967 : 		if ( (rand()%5) == 0 )

  0040c	e8 00 00 00 00	 call	 _rand
  00411	99		 cdq
  00412	b9 05 00 00 00	 mov	 ecx, 5
  00417	f7 f9		 idiv	 ecx
  00419	85 d2		 test	 edx, edx
  0041b	75 07		 jne	 SHORT $LN80@WingChaosM

; 1968 : 		{
; 1969 : 			iOption1 = 1;

  0041d	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _iOption1$190666[ebp], 1
$LN80@WingChaosM:

; 1970 : 		}
; 1971 : 
; 1972 : 		int iRandomValue = rand() % 100;

  00424	e8 00 00 00 00	 call	 _rand
  00429	99		 cdq
  0042a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0042f	f7 f9		 idiv	 ecx
  00431	89 55 e4	 mov	 DWORD PTR _iRandomValue$190670[ebp], edx

; 1973 : 		int iRandomValue2 = rand() % 3;

  00434	e8 00 00 00 00	 call	 _rand
  00439	99		 cdq
  0043a	b9 03 00 00 00	 mov	 ecx, 3
  0043f	f7 f9		 idiv	 ecx

; 1974 : 
; 1975 : 		switch ( iRandomValue2 )

  00441	2b d3		 sub	 edx, ebx
  00443	74 1e		 je	 SHORT $LN15@WingChaosM
  00445	4a		 dec	 edx
  00446	74 0e		 je	 SHORT $LN13@WingChaosM
  00448	4a		 dec	 edx
  00449	75 20		 jne	 SHORT $LN14@WingChaosM

; 1990 : 
; 1991 : 			case 2:
; 1992 : 				if ( iRandomValue < 20 )

  0044b	83 7d e4 14	 cmp	 DWORD PTR _iRandomValue$190670[ebp], 20 ; 00000014H
  0044f	7d 1a		 jge	 SHORT $LN14@WingChaosM

; 1993 : 				{
; 1994 : 					iOption2 = 1;	// +4;

  00451	8d 59 fe	 lea	 ebx, DWORD PTR [ecx-2]
  00454	eb 15		 jmp	 SHORT $LN14@WingChaosM
$LN13@WingChaosM:

; 1981 : 				}
; 1982 : 				break;
; 1983 : 
; 1984 : 			case 1:
; 1985 : 				if ( iRandomValue < 10 )

  00456	83 7d e4 0a	 cmp	 DWORD PTR _iRandomValue$190670[ebp], 10 ; 0000000aH
  0045a	7d 0f		 jge	 SHORT $LN14@WingChaosM

; 1986 : 				{
; 1987 : 					iOption2 = 2;	// +8

  0045c	bb 02 00 00 00	 mov	 ebx, 2

; 1988 : 				}
; 1989 : 				break;

  00461	eb 08		 jmp	 SHORT $LN14@WingChaosM
$LN15@WingChaosM:

; 1976 : 		{
; 1977 : 			case 0:
; 1978 : 				if ( iRandomValue < 4 )

  00463	83 7d e4 04	 cmp	 DWORD PTR _iRandomValue$190670[ebp], 4
  00467	7d 02		 jge	 SHORT $LN14@WingChaosM

; 1979 : 				{
; 1980 : 					iOption2 = 3;	// +12

  00469	8b d9		 mov	 ebx, ecx
$LN14@WingChaosM:

; 1995 : 				}
; 1996 : 		}
; 1997 : 
; 1998 : 		//int ExOption;
; 1999 : 
; 2000 : 		if ( iSleeveOfLord != FALSE )
; 2001 : 		{
; 2002 : 			if ( (rand()%5) == 0 )

  0046b	e8 00 00 00 00	 call	 _rand
  00470	99		 cdq
  00471	b9 05 00 00 00	 mov	 ecx, 5
  00476	f7 f9		 idiv	 ecx
  00478	39 7d d4	 cmp	 DWORD PTR _iSleeveOfLord$[ebp], edi
  0047b	74 21		 je	 SHORT $LN9@WingChaosM
  0047d	85 d2		 test	 edx, edx
  0047f	75 4a		 jne	 SHORT $LN8@WingChaosM

; 2003 : 			{
; 2004 : 				iOption3 = 1 << (rand()%4);

  00481	e8 00 00 00 00	 call	 _rand
  00486	8b c8		 mov	 ecx, eax
  00488	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0048e	79 05		 jns	 SHORT $LN87@WingChaosM
  00490	49		 dec	 ecx
  00491	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00494	41		 inc	 ecx
$LN87@WingChaosM:
  00495	bf 01 00 00 00	 mov	 edi, 1
  0049a	d3 e7		 shl	 edi, cl

; 2005 : 			}
; 2006 : 			
; 2007 : 			iOption3 |= 0x20;
; 2008 : 		}
; 2009 : 		else

  0049c	eb 2d		 jmp	 SHORT $LN8@WingChaosM
$LN9@WingChaosM:

; 2010 : 		{
; 2011 : 			if ( (rand()%5) == 0 )

  0049e	85 d2		 test	 edx, edx
  004a0	75 16		 jne	 SHORT $LN6@WingChaosM

; 2012 : 			{
; 2013 : 				iOption3 = 1 << (rand()%3);

  004a2	e8 00 00 00 00	 call	 _rand
  004a7	99		 cdq
  004a8	b9 03 00 00 00	 mov	 ecx, 3
  004ad	f7 f9		 idiv	 ecx
  004af	bf 01 00 00 00	 mov	 edi, 1
  004b4	8b ca		 mov	 ecx, edx
  004b6	d3 e7		 shl	 edi, cl
$LN6@WingChaosM:

; 2014 : 			}
; 2015 : 
; 2016 : 			if ( (rand()%2) != 0 )

  004b8	e8 00 00 00 00	 call	 _rand
  004bd	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  004c2	79 05		 jns	 SHORT $LN88@WingChaosM
  004c4	48		 dec	 eax
  004c5	83 c8 fe	 or	 eax, -2			; fffffffeH
  004c8	40		 inc	 eax
$LN88@WingChaosM:
  004c9	74 03		 je	 SHORT $LN5@WingChaosM
$LN8@WingChaosM:

; 2017 : 			{
; 2018 : 				iOption3 |= 0x20;

  004cb	83 cf 20	 or	 edi, 32			; 00000020H
$LN5@WingChaosM:

; 2019 : 			}
; 2020 : 		}
; 2021 : 
; 2022 : 		::ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, iWingNum, iWingLevel, 0, 0, iOption1, iOption2, -1, iOption3, 0);

  004ce	8b 55 d8	 mov	 edx, DWORD PTR _iOption1$190666[ebp]
  004d1	8b 45 c8	 mov	 eax, DWORD PTR _iWingNum$190665[ebp]
  004d4	6a 00		 push	 0
  004d6	6a 00		 push	 0
  004d8	6a 00		 push	 0
  004da	8b 0e		 mov	 ecx, DWORD PTR [esi]
  004dc	57		 push	 edi
  004dd	6a ff		 push	 -1
  004df	53		 push	 ebx
  004e0	52		 push	 edx
  004e1	6a 00		 push	 0
  004e3	6a 00		 push	 0
  004e5	6a 00		 push	 0
  004e7	50		 push	 eax
  004e8	6a 00		 push	 0
  004ea	6a 00		 push	 0
  004ec	68 ff 00 00 00	 push	 255			; 000000ffH
  004f1	51		 push	 ecx
  004f2	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 2023 : 		::gObjInventoryCommit(lpObj->m_Index);

  004f7	8b 16		 mov	 edx, DWORD PTR [esi]
  004f9	52		 push	 edx
  004fa	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 2024 : 		::LogAddTD("[WingMix,2] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 2025 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  004ff	8b 45 dc	 mov	 eax, DWORD PTR _iCharmOfLuckCount$[ebp]
  00502	8b 4d e8	 mov	 ecx, DWORD PTR _nChaosNeedMoney$[ebp]
  00505	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0050b	83 c4 40	 add	 esp, 64			; 00000040H
  0050e	50		 push	 eax
  0050f	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  00515	51		 push	 ecx
  00516	52		 push	 edx
  00517	50		 push	 eax
  00518	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  0051b	51		 push	 ecx
  0051c	83 c6 52	 add	 esi, 82			; 00000052H
  0051f	56		 push	 esi
  00520	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@BHIPJGFK@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@
  00525	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0052b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0052e	5f		 pop	 edi
  0052f	5e		 pop	 esi

; 2026 : #if( __4GAMERS__ == 1 )
; 2027 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2028 : #endif
; 2029 : 		return TRUE;

  00530	b8 01 00 00 00	 mov	 eax, 1
  00535	5b		 pop	 ebx

; 2049 : 	}
; 2050 : }

  00536	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00539	33 cd		 xor	 ecx, ebp
  0053b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00540	8b e5		 mov	 esp, ebp
  00542	5d		 pop	 ebp
  00543	c2 04 00	 ret	 4
$LN34@WingChaosM:

; 2030 : 	}
; 2031 : 	else
; 2032 : 	{
; 2033 : #if( __4GAMERS__ == 1 )
; 2034 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2035 : #endif
; 2036 : 		for ( n=0;n<CHAOS_BOX_SIZE;n++)

  00546	33 ff		 xor	 edi, edi
  00548	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@WingChaosM:

; 2037 : 		{
; 2038 : 			lpObj->pChaosBox[n].Clear();

  00550	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00556	03 cf		 add	 ecx, edi
  00558	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
  0055d	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00563	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00569	7c e5		 jl	 SHORT $LL3@WingChaosM

; 2039 : 		}
; 2040 : 
; 2041 : 		GCUserChaosBoxSend(lpObj, 0);

  0056b	6a 00		 push	 0
  0056d	56		 push	 esi
  0056e	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2042 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00573	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00577	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00579	52		 push	 edx
  0057a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0057d	50		 push	 eax
  0057e	51		 push	 ecx
  0057f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2043 : 		::LogAddTD("[WingMix,2] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 2044 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  00584	8b 55 dc	 mov	 edx, DWORD PTR _iCharmOfLuckCount$[ebp]
  00587	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0058d	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00593	52		 push	 edx
  00594	53		 push	 ebx
  00595	50		 push	 eax
  00596	51		 push	 ecx
  00597	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  0059a	52		 push	 edx
  0059b	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0059e	50		 push	 eax
  0059f	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@GCGNBAFG@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@
  005a4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  005aa	83 c4 30	 add	 esp, 48			; 00000030H
$LN77@WingChaosM:

; 2045 : 		
; 2046 : 		lpObj->ChaosLock = FALSE;

  005ad	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 2047 : 
; 2048 : 		return FALSE;

  005b7	eb 22		 jmp	 SHORT $LN89@WingChaosM
$LN45@WingChaosM:

; 1832 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  005b9	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  005bd	8b 06		 mov	 eax, DWORD PTR [esi]
  005bf	51		 push	 ecx
  005c0	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  005c3	52		 push	 edx
  005c4	50		 push	 eax
$LN90@WingChaosM:

; 1820 : 		{
; 1821 : 			pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 1822 : 			DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 1823 : 			lpObj->ChaosLock = FALSE;
; 1824 : 
; 1825 : 			return FALSE;
; 1826 : 		}
; 1827 : 	}
; 1828 : 	else
; 1829 : 	{
; 1830 : 		lpObj->ChaosLock = FALSE;
; 1831 : 		pMsg.Result = CB_INCORRECT_MIX_ITEMS;

  005c5	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  005cf	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7

; 1832 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  005d3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
$LN91@WingChaosM:
  005d8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN89@WingChaosM:

; 2049 : 	}
; 2050 : }

  005db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005de	5f		 pop	 edi
  005df	5e		 pop	 esi
  005e0	33 cd		 xor	 ecx, ebp
  005e2	33 c0		 xor	 eax, eax
  005e4	5b		 pop	 ebx
  005e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005ea	8b e5		 mov	 esp, ebp
  005ec	5d		 pop	 ebp
  005ed	c2 04 00	 ret	 4
$LN92@WingChaosM:
  005f0	00 00 00 00	 DD	 $LN24@WingChaosM
  005f4	00 00 00 00	 DD	 $LN23@WingChaosM
  005f8	00 00 00 00	 DD	 $LN22@WingChaosM
  005fc	00 00 00 00	 DD	 $LN21@WingChaosM
  00600	00 00 00 00	 DD	 $LN20@WingChaosM
?WingChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::WingChaosMix
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?BloodCastleItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::BloodCastleItemChaosMix
EXTRN	?BloodCastleChaosMix@CBloodCastle@@QAE_NHH@Z:PROC ; CBloodCastle::BloodCastleChaosMix
EXTRN	?GetEventMap@CBloodCastle@@QAEHH@Z:PROC		; CBloodCastle::GetEventMap
EXTRN	?CheckChoasMixItem@CBloodCastle@@QAEHH@Z:PROC	; CBloodCastle::CheckChoasMixItem
EXTRN	?g_BloodCastle@@3VCBloodCastle@@A:BYTE		; g_BloodCastle
; Function compile flags: /Ogtp
;	COMDAT ?BloodCastleItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?BloodCastleItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::BloodCastleItemChaosMix, COMDAT
; _this$ = ecx

; 2053 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 2054 : 	lpObj->ChaosLock = TRUE;
; 2055 : 	
; 2056 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2057 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0002b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 2058 : 	pMsg.Result = CB_ERROR;
; 2059 : 
; 2060 : 	int aIndex = lpObj->m_Index;

  00030	8b 3e		 mov	 edi, DWORD PTR [esi]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2061 : 
; 2062 : 	int iRET_VAL = g_BloodCastle.CheckChoasMixItem(aIndex);

  00035	57		 push	 edi
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  0003b	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0003f	e8 00 00 00 00	 call	 ?CheckChoasMixItem@CBloodCastle@@QAEHH@Z ; CBloodCastle::CheckChoasMixItem
  00044	8b d8		 mov	 ebx, eax

; 2063 : 
; 2064 : 	int iMapNumber = g_BloodCastle.GetEventMap(iRET_VAL-1);

  00046	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00049	51		 push	 ecx
  0004a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  0004f	e8 00 00 00 00	 call	 ?GetEventMap@CBloodCastle@@QAEHH@Z ; CBloodCastle::GetEventMap

; 2065 : 
; 2066 : 	if ( BC_MAP_RANGE(iMapNumber) != FALSE )

  00054	83 f8 34	 cmp	 eax, 52			; 00000034H
  00057	74 13		 je	 SHORT $LN19@BloodCastl
  00059	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0005c	7c 20		 jl	 SHORT $LN20@BloodCastl
  0005e	33 d2		 xor	 edx, edx
  00060	83 f8 11	 cmp	 eax, 17			; 00000011H
  00063	0f 9e c2	 setle	 dl
  00066	8b c2		 mov	 eax, edx
  00068	85 c0		 test	 eax, eax
  0006a	74 12		 je	 SHORT $LN20@BloodCastl
$LN19@BloodCastl:

; 2067 : 	{
; 2068 : 		if ( g_BloodCastle.BloodCastleChaosMix(aIndex, iRET_VAL) == false )

  0006c	53		 push	 ebx
  0006d	57		 push	 edi
  0006e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  00073	e8 00 00 00 00	 call	 ?BloodCastleChaosMix@CBloodCastle@@QAE_NHH@Z ; CBloodCastle::BloodCastleChaosMix
  00078	84 c0		 test	 al, al
  0007a	75 79		 jne	 SHORT $LN9@BloodCastl

; 2069 : 		{
; 2070 : 			lpObj->ChaosLock = FALSE;
; 2071 : 		}
; 2072 : 
; 2073 : 		return;

  0007c	eb 6d		 jmp	 SHORT $LN1@BloodCastl
$LN20@BloodCastl:

; 2074 : 	}
; 2075 : 
; 2076 : 	switch ( iRET_VAL )

  0007e	83 c3 f7	 add	 ebx, -9			; fffffff7H
  00081	83 fb 06	 cmp	 ebx, 6
  00084	77 65		 ja	 SHORT $LN1@BloodCastl
  00086	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN23@BloodCastl[ebx*4]
$LN8@BloodCastl:

; 2077 : 	{
; 2078 : 		case 9:
; 2079 : 			pMsg.Result = CB_NO_BC_CORRECT_ITEMS	;

  0008d	c6 45 ef 0a	 mov	 BYTE PTR _pMsg$[ebp+3], 10 ; 0000000aH

; 2080 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);
; 2081 : 			lpObj->m_Index;
; 2082 : 			lpObj->ChaosLock = FALSE;
; 2083 : 			break;

  00091	eb 46		 jmp	 SHORT $LN21@BloodCastl
$LN7@BloodCastl:

; 2084 : 
; 2085 : 		case 10:
; 2086 : 			pMsg.Result = CB_NO_BC_CORRECT_ITEMS	;
; 2087 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);

  00093	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00097	52		 push	 edx
  00098	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0009b	c6 45 ef 0a	 mov	 BYTE PTR _pMsg$[ebp+3], 10 ; 0000000aH
  0009f	50		 push	 eax

; 2088 : 			lpObj->m_Index;
; 2089 : 			lpObj->ChaosLock = FALSE;
; 2090 : 			break;

  000a0	eb 40		 jmp	 SHORT $LN22@BloodCastl
$LN6@BloodCastl:

; 2091 : 
; 2092 : 		case 11:
; 2093 : 			pMsg.Result = CB_NO_BC_CORRECT_ITEMS	;
; 2094 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);

  000a2	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  000a6	51		 push	 ecx
  000a7	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  000aa	c6 45 ef 0a	 mov	 BYTE PTR _pMsg$[ebp+3], 10 ; 0000000aH
  000ae	52		 push	 edx

; 2095 : 			lpObj->m_Index;
; 2096 : 			lpObj->ChaosLock = FALSE;
; 2097 : 			break;

  000af	eb 31		 jmp	 SHORT $LN22@BloodCastl
$LN5@BloodCastl:

; 2098 : 
; 2099 : 		case 12:
; 2100 : 			pMsg.Result = CB_INVALID_ITEM_LEVEL	;

  000b1	c6 45 ef 08	 mov	 BYTE PTR _pMsg$[ebp+3], 8

; 2101 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);
; 2102 : 			lpObj->m_Index;
; 2103 : 			lpObj->ChaosLock = FALSE;
; 2104 : 			break;

  000b5	eb 22		 jmp	 SHORT $LN21@BloodCastl
$LN4@BloodCastl:

; 2105 : 
; 2106 : 		case 13:
; 2107 : 			pMsg.Result = CB_BC_NOT_ENOUGH_ZEN	;
; 2108 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);

  000b7	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  000bb	52		 push	 edx
  000bc	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000bf	c6 45 ef 0b	 mov	 BYTE PTR _pMsg$[ebp+3], 11 ; 0000000bH
  000c3	50		 push	 eax

; 2109 : 			lpObj->m_Index;
; 2110 : 			lpObj->ChaosLock = FALSE;
; 2111 : 			break;

  000c4	eb 1c		 jmp	 SHORT $LN22@BloodCastl
$LN3@BloodCastl:

; 2112 : 
; 2113 : 		case 14:
; 2114 : 			pMsg.Result = CB_USER_CLASS_LOW_LEVEL	;
; 2115 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);

  000c6	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  000ca	51		 push	 ecx
  000cb	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  000ce	c6 45 ef 09	 mov	 BYTE PTR _pMsg$[ebp+3], 9
  000d2	52		 push	 edx

; 2116 : 			lpObj->m_Index;
; 2117 : 			lpObj->ChaosLock = FALSE;
; 2118 : 			break;

  000d3	eb 0d		 jmp	 SHORT $LN22@BloodCastl
$LN2@BloodCastl:

; 2119 : 		case 15:
; 2120 : 			pMsg.Result = 0xF0;

  000d5	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN21@BloodCastl:

; 2121 : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  000d9	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000dd	50		 push	 eax
  000de	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000e1	51		 push	 ecx
$LN22@BloodCastl:
  000e2	57		 push	 edi
  000e3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@BloodCastl:

; 2122 : 			lpObj->ChaosLock = FALSE;
; 2123 : 			break;
; 2124 : 		default:
; 2125 : 			lpObj->ChaosLock = FALSE;

  000eb	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN9@BloodCastl:

; 2126 : 	}
; 2127 : 
; 2128 : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	33 cd		 xor	 ecx, ebp
  000fc	5b		 pop	 ebx
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c2 04 00	 ret	 4
$LN23@BloodCastl:
  00108	00 00 00 00	 DD	 $LN8@BloodCastl
  0010c	00 00 00 00	 DD	 $LN7@BloodCastl
  00110	00 00 00 00	 DD	 $LN6@BloodCastl
  00114	00 00 00 00	 DD	 $LN5@BloodCastl
  00118	00 00 00 00	 DD	 $LN4@BloodCastl
  0011c	00 00 00 00	 DD	 $LN3@BloodCastl
  00120	00 00 00 00	 DD	 $LN2@BloodCastl
?BloodCastleItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::BloodCastleItemChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0DC@ILPOEBCF@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@ ; `string'
PUBLIC	??_C@_0EC@BFAACIGE@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@ ; `string'
PUBLIC	??_C@_0BN@JHMGADIL@?$FLSetItemMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0L@DBFFCLIB@SetItemMix?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SetItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::SetItemChaosMix
EXTRN	?GetSetOptionName@CSetItemOption@@QAEPADHH@Z:PROC ; CSetItemOption::GetSetOptionName
EXTRN	?gObjChaosItemSet@@YAXHHE@Z:PROC		; gObjChaosItemSet
EXTRN	?gObjChaosBoxInsertItemPos@@YAEHVCItem@@HH@Z:PROC ; gObjChaosBoxInsertItemPos
EXTRN	?ItemByteConvert@@YAXPAEVCItem@@@Z:PROC		; ItemByteConvert
EXTRN	?MakeSetOption@CSetItemOption@@QAEHHH@Z:PROC	; CSetItemOption::MakeSetOption
EXTRN	?CheckMixContition@CSetItemOption@@QAEHHH@Z:PROC ; CSetItemOption::CheckMixContition
EXTRN	?IsSetItem@CSetItemOption@@QAEHH@Z:PROC		; CSetItemOption::IsSetItem
EXTRN	?gSetItemOption@@3VCSetItemOption@@A:BYTE	; gSetItemOption
;	COMDAT ??_C@_0DC@ILPOEBCF@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@
CONST	SEGMENT
??_C@_0DC@ILPOEBCF@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@ DB '['
	DB	'SetItemMix] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@BFAACIGE@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@
CONST	SEGMENT
??_C@_0EC@BFAACIGE@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@ DB '['
	DB	'SetItemMix] [%s][%s] CBMix Success %d Money : %d-%d (SetName:'
	DB	'%s)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JHMGADIL@?$FLSetItemMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BN@JHMGADIL@?$FLSetItemMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[SetIte'
	DB	'mMix] Chaos Mix Start', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DBFFCLIB@SetItemMix?$AA@
CONST	SEGMENT
??_C@_0L@DBFFCLIB@SetItemMix?$AA@ DB 'SetItemMix', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_BlessGemCount$ = -272					; size = 4
_this$ = -268						; size = 4
_ChoasGemCount$ = -264					; size = 4
_SoulGemCount$ = -260					; size = 4
_n$190741 = -256					; size = 4
tv697 = -252						; size = 4
_MetalOfAncientCount$ = -252				; size = 4
_MixItemCount$ = -248					; size = 4
_setoption$ = -244					; size = 4
_iMetalOfAncientItemLevel$ = -244			; size = 4
tv797 = -240						; size = 4
_Dur$190783 = -240					; size = 4
_MixSetItemIndex$ = -240				; size = 4
_iChaosMoney$ = -236					; size = 4
_Item$190782 = -232					; size = 212
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SetItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::SetItemChaosMix, COMDAT
; _this$ = ecx

; 2134 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi

; 2135 : 	lpObj->ChaosLock = TRUE;
; 2136 : 
; 2137 : 	int ChoasGemCount = 0;

  00019	33 f6		 xor	 esi, esi

; 2138 : 	int BlessGemCount = 0;
; 2139 : 	int SoulGemCount = 0;
; 2140 : 	int MetalOfAncientCount = 0;
; 2141 : 	int MixItemCount = 0;
; 2142 : 	int MixSetItemIndex = 0;
; 2143 : 	int iMixItemChaosMoney = 0;
; 2144 : 	int iChaosMoney = 0;
; 2145 : 	int iMetalOfAncientItemLevel = -1;
; 2146 : 
; 2147 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2148 : 
; 2149 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  0001b	6a 10		 push	 16			; 00000010H
  0001d	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00020	68 86 00 00 00	 push	 134			; 00000086H
  00025	50		 push	 eax
  00026	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  0002c	c7 83 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+4640], 1
  00036	89 b5 f8 fe ff
	ff		 mov	 DWORD PTR _ChoasGemCount$[ebp], esi
  0003c	89 b5 f0 fe ff
	ff		 mov	 DWORD PTR _BlessGemCount$[ebp], esi
  00042	89 b5 fc fe ff
	ff		 mov	 DWORD PTR _SoulGemCount$[ebp], esi
  00048	89 b5 04 ff ff
	ff		 mov	 DWORD PTR _MetalOfAncientCount$[ebp], esi
  0004e	89 b5 08 ff ff
	ff		 mov	 DWORD PTR _MixItemCount$[ebp], esi
  00054	89 b5 10 ff ff
	ff		 mov	 DWORD PTR _MixSetItemIndex$[ebp], esi
  0005a	33 ff		 xor	 edi, edi
  0005c	89 b5 14 ff ff
	ff		 mov	 DWORD PTR _iChaosMoney$[ebp], esi
  00062	c7 85 0c ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _iMetalOfAncientItemLevel$[ebp], -1
  0006c	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2150 : 	pMsg.Result = CB_ERROR;

  00074	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 2151 : 
; 2152 : 
; 2153 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00078	89 b5 00 ff ff
	ff		 mov	 DWORD PTR _n$190741[ebp], esi
  0007e	8b ff		 npad	 2
$LL32@SetItemCha:

; 2154 : 	{
; 2155 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00080	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00086	03 ce		 add	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0008d	83 f8 01	 cmp	 eax, 1
  00090	0f 85 80 01 00
	00		 jne	 $LN31@SetItemCha

; 2156 : 		{
; 2157 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  00096	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  0009c	0f b7 44 31 06	 movzx	 eax, WORD PTR [ecx+esi+6]
  000a1	03 ce		 add	 ecx, esi
  000a3	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  000a8	66 3b c2	 cmp	 ax, dx
  000ab	75 1b		 jne	 SHORT $LN37@SetItemCha

; 2158 : 			{
; 2159 : 				BlessGemCount++;

  000ad	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _BlessGemCount$[ebp]
  000b3	42		 inc	 edx
  000b4	89 95 f0 fe ff
	ff		 mov	 DWORD PTR _BlessGemCount$[ebp], edx

; 2160 : 
; 2161 : 				if ( BlessGemCount > 3 )

  000ba	83 fa 03	 cmp	 edx, 3
  000bd	7e 09		 jle	 SHORT $LN37@SetItemCha

; 2162 : 				{
; 2163 : 					iChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  000bf	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000c2	01 95 14 ff ff
	ff		 add	 DWORD PTR _iChaosMoney$[ebp], edx
$LN37@SetItemCha:

; 2164 : 				}
; 2165 : 			}
; 2166 : 
; 2167 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  000c8	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  000cd	66 3b c2	 cmp	 ax, dx
  000d0	75 1b		 jne	 SHORT $LN25@SetItemCha

; 2168 : 			{
; 2169 : 				SoulGemCount++;

  000d2	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _SoulGemCount$[ebp]
  000d8	42		 inc	 edx
  000d9	89 95 fc fe ff
	ff		 mov	 DWORD PTR _SoulGemCount$[ebp], edx

; 2170 : 
; 2171 : 				if ( SoulGemCount > 3 )

  000df	83 fa 03	 cmp	 edx, 3
  000e2	7e 09		 jle	 SHORT $LN25@SetItemCha

; 2172 : 				{
; 2173 : 					iChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  000e4	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000e7	01 95 14 ff ff
	ff		 add	 DWORD PTR _iChaosMoney$[ebp], edx
$LN25@SetItemCha:

; 2174 : 				}
; 2175 : 			}
; 2176 : 
; 2177 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,16) )

  000ed	ba 10 1c 00 00	 mov	 edx, 7184		; 00001c10H
  000f2	66 3b c2	 cmp	 ax, dx
  000f5	75 0e		 jne	 SHORT $LN24@SetItemCha

; 2178 : 			{
; 2179 : 				iChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  000f7	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  000fa	01 85 14 ff ff
	ff		 add	 DWORD PTR _iChaosMoney$[ebp], eax
  00100	e9 11 01 00 00	 jmp	 $LN31@SetItemCha
$LN24@SetItemCha:

; 2180 : 			}
; 2181 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  00105	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  0010a	66 3b c2	 cmp	 ax, dx
  0010d	75 0b		 jne	 SHORT $LN22@SetItemCha

; 2182 : 			{
; 2183 : 				ChoasGemCount++;

  0010f	ff 85 f8 fe ff
	ff		 inc	 DWORD PTR _ChoasGemCount$[ebp]
  00115	e9 fc 00 00 00	 jmp	 $LN31@SetItemCha
$LN22@SetItemCha:

; 2184 : 			}
; 2185 : 			else if ( lpObj->pChaosBox[n].m_Level >= 6 && lpObj->pChaosBox[n].IsExtItem() != FALSE)

  0011a	66 83 79 08 06	 cmp	 WORD PTR [ecx+8], 6
  0011f	7c 48		 jl	 SHORT $LN20@SetItemCha
  00121	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  00126	85 c0		 test	 eax, eax
  00128	74 3f		 je	 SHORT $LN20@SetItemCha

; 2186 : 			{
; 2187 : 				if ( gSetItemOption.IsSetItem(lpObj->pChaosBox[n].m_Type) != FALSE )

  0012a	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00130	0f bf 4c 06 06	 movsx	 ecx, WORD PTR [esi+eax+6]
  00135	51		 push	 ecx
  00136	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  0013b	e8 00 00 00 00	 call	 ?IsSetItem@CSetItemOption@@QAEHH@Z ; CSetItemOption::IsSetItem
  00140	85 c0		 test	 eax, eax
  00142	0f 84 ce 00 00
	00		 je	 $LN31@SetItemCha

; 2188 : 				{
; 2189 : 					MixItemCount++;
; 2190 : 					MixSetItemIndex = n;

  00148	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _n$190741[ebp]

; 2191 : 					iMixItemChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  0014e	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00154	ff 85 08 ff ff
	ff		 inc	 DWORD PTR _MixItemCount$[ebp]
  0015a	03 7c 06 78	 add	 edi, DWORD PTR [esi+eax+120]
  0015e	89 95 10 ff ff
	ff		 mov	 DWORD PTR _MixSetItemIndex$[ebp], edx

; 2192 : 				}
; 2193 : 			}

  00164	e9 ad 00 00 00	 jmp	 $LN31@SetItemCha
$LN20@SetItemCha:

; 2194 : 			else if ( ((lpObj->pChaosBox[n].m_Type >= ITEMGET(13,8) && lpObj->pChaosBox[n].m_Type < ITEMGET(13,14)) || (lpObj->pChaosBox[n].m_Type >= ITEMGET(13,21) && lpObj->pChaosBox[n].m_Type < ITEMGET(13,28) ) ) && ( lpObj->pChaosBox[n].m_Option3 >= 2  && lpObj->pChaosBox[n].m_Level >= 3 ) )	

  00169	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  0016f	0f b7 44 31 06	 movzx	 eax, WORD PTR [ecx+esi+6]
  00174	03 ce		 add	 ecx, esi
  00176	ba 08 1a 00 00	 mov	 edx, 6664		; 00001a08H
  0017b	66 3b c2	 cmp	 ax, dx
  0017e	7c 0a		 jl	 SHORT $LN15@SetItemCha
  00180	ba 0e 1a 00 00	 mov	 edx, 6670		; 00001a0eH
  00185	66 3b c2	 cmp	 ax, dx
  00188	7c 14		 jl	 SHORT $LN16@SetItemCha
$LN15@SetItemCha:
  0018a	ba 15 1a 00 00	 mov	 edx, 6677		; 00001a15H
  0018f	66 3b c2	 cmp	 ax, dx
  00192	7c 48		 jl	 SHORT $LN17@SetItemCha
  00194	ba 1c 1a 00 00	 mov	 edx, 6684		; 00001a1cH
  00199	66 3b c2	 cmp	 ax, dx
  0019c	7d 3e		 jge	 SHORT $LN17@SetItemCha
$LN16@SetItemCha:
  0019e	80 b9 92 00 00
	00 02		 cmp	 BYTE PTR [ecx+146], 2
  001a5	72 35		 jb	 SHORT $LN17@SetItemCha
  001a7	66 83 79 08 03	 cmp	 WORD PTR [ecx+8], 3
  001ac	7c 2e		 jl	 SHORT $LN17@SetItemCha

; 2195 : 			{
; 2196 : 				if ( gSetItemOption.IsSetItem(lpObj->pChaosBox[n].m_Type ) != FALSE )

  001ae	98		 cwde
  001af	50		 push	 eax
  001b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  001b5	e8 00 00 00 00	 call	 ?IsSetItem@CSetItemOption@@QAEHH@Z ; CSetItemOption::IsSetItem
  001ba	85 c0		 test	 eax, eax
  001bc	74 58		 je	 SHORT $LN31@SetItemCha

; 2197 : 				{
; 2198 : 					MixItemCount++;
; 2199 : 					MixSetItemIndex = n;

  001be	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _n$190741[ebp]

; 2200 : 					iMixItemChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  001c4	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  001ca	ff 85 08 ff ff
	ff		 inc	 DWORD PTR _MixItemCount$[ebp]
  001d0	03 7c 16 78	 add	 edi, DWORD PTR [esi+edx+120]
  001d4	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _MixSetItemIndex$[ebp], ecx

; 2201 : 				}
; 2202 : 			}

  001da	eb 3a		 jmp	 SHORT $LN31@SetItemCha
$LN17@SetItemCha:

; 2203 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,27) ) // Ancien Metal, Apply Deathway Fix here

  001dc	ba 1b 1c 00 00	 mov	 edx, 7195		; 00001c1bH
  001e1	66 3b c2	 cmp	 ax, dx
  001e4	75 12		 jne	 SHORT $LN12@SetItemCha

; 2204 : 			{
; 2205 : 				MetalOfAncientCount++;
; 2206 : 				iMetalOfAncientItemLevel = lpObj->pChaosBox[n].m_Level;

  001e6	0f bf 41 08	 movsx	 eax, WORD PTR [ecx+8]
  001ea	ff 85 04 ff ff
	ff		 inc	 DWORD PTR _MetalOfAncientCount$[ebp]
  001f0	89 85 0c ff ff
	ff		 mov	 DWORD PTR _iMetalOfAncientItemLevel$[ebp], eax

; 2207 : 			}
; 2208 : 			else

  001f6	eb 1e		 jmp	 SHORT $LN31@SetItemCha
$LN12@SetItemCha:

; 2209 : 			{
; 2210 : 				DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  001f8	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  001fc	8b 03		 mov	 eax, DWORD PTR [ebx]
  001fe	51		 push	 ecx
  001ff	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00202	52		 push	 edx
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00209	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2211 : 				lpObj->ChaosLock = FALSE;

  0020c	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
$LN31@SetItemCha:

; 2151 : 
; 2152 : 
; 2153 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00216	b9 01 00 00 00	 mov	 ecx, 1
  0021b	01 8d 00 ff ff
	ff		 add	 DWORD PTR _n$190741[ebp], ecx
  00221	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00227	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  0022d	0f 8c 4d fe ff
	ff		 jl	 $LL32@SetItemCha

; 2212 : 			}
; 2213 : 		}
; 2214 : 	}
; 2215 : 
; 2216 : 
; 2217 : 	if ( ChoasGemCount < 1 || BlessGemCount < 3 || SoulGemCount < 3 || MetalOfAncientCount != 1 || MixItemCount != 1 )

  00233	39 8d f8 fe ff
	ff		 cmp	 DWORD PTR _ChoasGemCount$[ebp], ecx
  00239	0f 8c a2 03 00
	00		 jl	 $LN9@SetItemCha
  0023f	b8 03 00 00 00	 mov	 eax, 3
  00244	39 85 f0 fe ff
	ff		 cmp	 DWORD PTR _BlessGemCount$[ebp], eax
  0024a	0f 8c 91 03 00
	00		 jl	 $LN9@SetItemCha
  00250	39 85 fc fe ff
	ff		 cmp	 DWORD PTR _SoulGemCount$[ebp], eax
  00256	0f 8c 85 03 00
	00		 jl	 $LN9@SetItemCha
  0025c	39 8d 04 ff ff
	ff		 cmp	 DWORD PTR _MetalOfAncientCount$[ebp], ecx
  00262	0f 85 79 03 00
	00		 jne	 $LN9@SetItemCha
  00268	39 8d 08 ff ff
	ff		 cmp	 DWORD PTR _MixItemCount$[ebp], ecx
  0026e	0f 85 6d 03 00
	00		 jne	 $LN9@SetItemCha

; 2220 : 		lpObj->ChaosLock = FALSE;
; 2221 : 		return;
; 2222 : 	}
; 2223 : 
; 2224 : 	LogChaosItem(lpObj, "SetItemMix");

  00274	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DBFFCLIB@SetItemMix?$AA@
  0027f	53		 push	 ebx
  00280	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2225 : 	LogAddTD("[SetItemMix] Chaos Mix Start");

  00285	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JHMGADIL@?$FLSetItemMix?$FN?5Chaos?5Mix?5Start?$AA@
  0028a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2226 : 
; 2227 : 	if ( gSetItemOption.CheckMixContition(lpObj->pChaosBox[MixSetItemIndex].m_Type, iMetalOfAncientItemLevel ) == FALSE )

  00290	8b b5 10 ff ff
	ff		 mov	 esi, DWORD PTR _MixSetItemIndex$[ebp]
  00296	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  0029c	69 f6 d4 00 00
	00		 imul	 esi, 212		; 000000d4H
  002a2	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _iMetalOfAncientItemLevel$[ebp]
  002a8	0f bf 44 32 06	 movsx	 eax, WORD PTR [edx+esi+6]
  002ad	83 c4 04	 add	 esp, 4
  002b0	51		 push	 ecx
  002b1	50		 push	 eax
  002b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  002b7	89 b5 04 ff ff
	ff		 mov	 DWORD PTR tv697[ebp], esi
  002bd	e8 00 00 00 00	 call	 ?CheckMixContition@CSetItemOption@@QAEHHH@Z ; CSetItemOption::CheckMixContition
  002c2	85 c0		 test	 eax, eax

; 2228 : 	{
; 2229 : 		DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);
; 2230 : 		lpObj->ChaosLock = FALSE;
; 2231 : 
; 2232 : 		return;

  002c4	74 45		 je	 SHORT $LN42@SetItemCha

; 2233 : 	}
; 2234 : 
; 2235 : 	lpObj->ChaosSuccessRate = iMixItemChaosMoney / 40000;
; 2236 : 	lpObj->ChaosSuccessRate = iChaosMoney / 400000;

  002c6	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  002cb	f7 ad 14 ff ff
	ff		 imul	 DWORD PTR _iChaosMoney$[ebp]
  002d1	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  002d4	8b c2		 mov	 eax, edx
  002d6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002d9	03 c2		 add	 eax, edx
  002db	89 83 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], eax

; 2237 : 
; 2238 : 	if ( lpObj->ChaosSuccessRate > 80 )

  002e1	83 f8 50	 cmp	 eax, 80			; 00000050H
  002e4	7e 0a		 jle	 SHORT $LN7@SetItemCha

; 2239 : 	{
; 2240 : 		lpObj->ChaosSuccessRate = 80;

  002e6	c7 83 1c 12 00
	00 50 00 00 00	 mov	 DWORD PTR [ebx+4636], 80 ; 00000050H
$LN7@SetItemCha:

; 2241 : 	}
; 2242 : 
; 2243 : 	int nChaosNeedMoney = (lpObj->ChaosSuccessRate - 50 ) * 1000000;

  002f0	8b bb 1c 12 00
	00		 mov	 edi, DWORD PTR [ebx+4636]
  002f6	83 ef 32	 sub	 edi, 50			; 00000032H
  002f9	69 ff 40 42 0f
	00		 imul	 edi, 1000000		; 000f4240H

; 2244 : 
; 2245 : 	if ( lpObj->Money < nChaosNeedMoney )

  002ff	39 bb cc 00 00
	00		 cmp	 DWORD PTR [ebx+204], edi
  00305	7d 15		 jge	 SHORT $LN6@SetItemCha

; 2246 : 	{
; 2247 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  00307	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
$LN42@SetItemCha:

; 2248 : 		DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  0030b	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0030f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00311	51		 push	 ecx
  00312	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00315	52		 push	 edx
  00316	50		 push	 eax

; 2249 : 		lpObj->ChaosLock = FALSE;
; 2250 : 
; 2251 : 		return;

  00317	e9 d1 02 00 00	 jmp	 $LN40@SetItemCha
$LN6@SetItemCha:

; 2252 : 	}
; 2253 : 
; 2254 : 	int setoption = gSetItemOption.MakeSetOption(lpObj->pChaosBox[MixSetItemIndex].m_Type, iMetalOfAncientItemLevel);

  0031c	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  00322	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _iMetalOfAncientItemLevel$[ebp]
  00328	0f bf 44 32 06	 movsx	 eax, WORD PTR [edx+esi+6]
  0032d	51		 push	 ecx
  0032e	50		 push	 eax
  0032f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00334	e8 00 00 00 00	 call	 ?MakeSetOption@CSetItemOption@@QAEHHH@Z ; CSetItemOption::MakeSetOption
  00339	89 85 0c ff ff
	ff		 mov	 DWORD PTR _setoption$[ebp], eax

; 2255 : 
; 2256 : 	if ( setoption == 0 )

  0033f	85 c0		 test	 eax, eax
  00341	75 14		 jne	 SHORT $LN5@SetItemCha

; 2257 : 	{
; 2258 : 		pMsg.Result = CB_ERROR;
; 2259 : 		DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  00343	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00347	51		 push	 ecx
  00348	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0034b	88 45 ef	 mov	 BYTE PTR _pMsg$[ebp+3], al
  0034e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00350	52		 push	 edx
  00351	50		 push	 eax

; 2260 : 		lpObj->ChaosLock = FALSE;
; 2261 : 
; 2262 : 		return;

  00352	e9 96 02 00 00	 jmp	 $LN40@SetItemCha
$LN5@SetItemCha:

; 2263 : 	}
; 2264 : 
; 2265 : 	lpObj->Money -= nChaosNeedMoney;

  00357	29 bb cc 00 00
	00		 sub	 DWORD PTR [ebx+204], edi
  0035d	8b 83 cc 00 00
	00		 mov	 eax, DWORD PTR [ebx+204]

; 2266 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00363	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00365	50		 push	 eax
  00366	51		 push	 ecx
  00367	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0036c	83 c4 08	 add	 esp, 8

; 2267 : 
; 2268 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  0036f	e8 00 00 00 00	 call	 _rand
  00374	99		 cdq
  00375	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0037a	f7 f9		 idiv	 ecx
  0037c	3b 93 1c 12 00
	00		 cmp	 edx, DWORD PTR [ebx+4636]
  00382	0f 8d 0d 02 00
	00		 jge	 $LN4@SetItemCha

; 2269 : 	{
; 2270 : 		lpObj->pChaosBox[MixSetItemIndex].m_SetOption = setoption;

  00388	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  0038e	8a 85 0c ff ff
	ff		 mov	 al, BYTE PTR _setoption$[ebp]
  00394	88 84 32 aa 00
	00 00		 mov	 BYTE PTR [edx+esi+170], al

; 2271 : 
; 2272 : 		if ( (rand()%100 ) < 80 )

  0039b	e8 00 00 00 00	 call	 _rand
  003a0	99		 cdq
  003a1	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  003a6	f7 f9		 idiv	 ecx
  003a8	83 fa 50	 cmp	 edx, 80			; 00000050H
  003ab	7d 17		 jge	 SHORT $LN3@SetItemCha

; 2273 : 		{
; 2274 : 			lpObj->pChaosBox[MixSetItemIndex].m_SetOption |= 4;

  003ad	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  003b3	80 8c 32 aa 00
	00 00 04	 or	 BYTE PTR [edx+esi+170], 4
  003bb	8d 84 32 aa 00
	00 00		 lea	 eax, DWORD PTR [edx+esi+170]

; 2275 : 		}
; 2276 : 		else

  003c2	eb 15		 jmp	 SHORT $LN2@SetItemCha
$LN3@SetItemCha:

; 2277 : 		{
; 2278 : 			lpObj->pChaosBox[MixSetItemIndex].m_SetOption |= 8;

  003c4	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  003ca	80 8c 30 aa 00
	00 00 08	 or	 BYTE PTR [eax+esi+170], 8
  003d2	8d 84 30 aa 00
	00 00		 lea	 eax, DWORD PTR [eax+esi+170]
$LN2@SetItemCha:

; 2279 : 		}
; 2280 : 
; 2281 : 		pMsg.Result = CB_SUCCESS;
; 2282 : 		CItem Item;

  003d9	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _Item$190782[ebp]
  003df	c6 45 ef 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1
  003e3	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 2283 : 
; 2284 : 		float Dur = (float)ItemGetDurability(lpObj->pChaosBox[MixSetItemIndex].m_Type, lpObj->pChaosBox[MixSetItemIndex].m_Level,
; 2285 : 			lpObj->pChaosBox[MixSetItemIndex].IsExtItem(), lpObj->pChaosBox[MixSetItemIndex].IsSetItem());

  003e8	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  003ee	8d 3c 31	 lea	 edi, DWORD PTR [ecx+esi]
  003f1	8d 0c 0e	 lea	 ecx, DWORD PTR [esi+ecx]
  003f4	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  003f9	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  003ff	50		 push	 eax
  00400	03 ce		 add	 ecx, esi
  00402	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  00407	0f bf 57 08	 movsx	 edx, WORD PTR [edi+8]
  0040b	50		 push	 eax
  0040c	0f bf 47 06	 movsx	 eax, WORD PTR [edi+6]
  00410	52		 push	 edx
  00411	50		 push	 eax
  00412	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability
  00417	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv797[ebp], eax

; 2286 : 
; 2287 : 		Item.m_Level = lpObj->pChaosBox[MixSetItemIndex].m_Level;

  0041d	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00423	66 8b 54 30 08	 mov	 dx, WORD PTR [eax+esi+8]
  00428	db 85 10 ff ff
	ff		 fild	 DWORD PTR tv797[ebp]
  0042e	03 c6		 add	 eax, esi
  00430	66 89 95 20 ff
	ff ff		 mov	 WORD PTR _Item$190782[ebp+8], dx
  00437	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _Dur$190783[ebp]
  0043d	83 c4 10	 add	 esp, 16			; 00000010H

; 2288 : 		Item.m_Durability = Dur * lpObj->pChaosBox[MixSetItemIndex].m_Durability / lpObj->pChaosBox[MixSetItemIndex].m_BaseDurability;

  00440	d9 40 24	 fld	 DWORD PTR [eax+36]

; 2289 : 		Item.m_JewelOfHarmonyOption = lpObj->pChaosBox[MixSetItemIndex].m_JewelOfHarmonyOption;
; 2290 : 		Item.m_bLOCKED = lpObj->pChaosBox[MixSetItemIndex].m_bLOCKED;
; 2291 : 
; 2292 : 		Item.Convert(lpObj->pChaosBox[MixSetItemIndex].m_Type, lpObj->pChaosBox[MixSetItemIndex].m_Option1, lpObj->pChaosBox[MixSetItemIndex].m_Option2,
; 2293 : 			lpObj->pChaosBox[MixSetItemIndex].m_Option3, lpObj->pChaosBox[MixSetItemIndex].m_NewOption, 
; 2294 : 			lpObj->pChaosBox[MixSetItemIndex].m_SetOption, lpObj->pChaosBox[MixSetItemIndex].m_ItemOptionEx, 0, -1, CURRENT_DB_VERSION);

  00443	6a 03		 push	 3
  00445	d8 8d 10 ff ff
	ff		 fmul	 DWORD PTR _Dur$190783[ebp]
  0044b	68 ff 00 00 00	 push	 255			; 000000ffH
  00450	6a 00		 push	 0
  00452	d8 70 2c	 fdiv	 DWORD PTR [eax+44]
  00455	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR _Item$190782[ebp+36]
  0045b	8a 88 c0 00 00
	00		 mov	 cl, BYTE PTR [eax+192]
  00461	88 4d d8	 mov	 BYTE PTR _Item$190782[ebp+192], cl
  00464	8a 90 d1 00 00
	00		 mov	 dl, BYTE PTR [eax+209]
  0046a	88 55 e9	 mov	 BYTE PTR _Item$190782[ebp+209], dl
  0046d	0f b6 88 c6 00
	00 00		 movzx	 ecx, BYTE PTR [eax+198]
  00474	0f b6 90 aa 00
	00 00		 movzx	 edx, BYTE PTR [eax+170]
  0047b	51		 push	 ecx
  0047c	0f b6 88 93 00
	00 00		 movzx	 ecx, BYTE PTR [eax+147]
  00483	52		 push	 edx
  00484	0f b6 90 92 00
	00 00		 movzx	 edx, BYTE PTR [eax+146]
  0048b	51		 push	 ecx
  0048c	0f b6 88 91 00
	00 00		 movzx	 ecx, BYTE PTR [eax+145]
  00493	52		 push	 edx
  00494	0f b6 90 90 00
	00 00		 movzx	 edx, BYTE PTR [eax+144]
  0049b	0f bf 40 06	 movsx	 eax, WORD PTR [eax+6]
  0049f	51		 push	 ecx
  004a0	52		 push	 edx
  004a1	50		 push	 eax
  004a2	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _Item$190782[ebp]
  004a8	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 2295 : 
; 2296 : 		Item.m_Number = lpObj->pChaosBox[MixSetItemIndex].m_Number;

  004ad	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  004b3	8b 14 0e	 mov	 edx, DWORD PTR [esi+ecx]

; 2297 : 
; 2298 : 		ItemByteConvert(pMsg.ItemInfo, Item);

  004b6	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  004bc	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp+4]
  004bf	8b fc		 mov	 edi, esp
  004c1	89 95 18 ff ff
	ff		 mov	 DWORD PTR _Item$190782[ebp], edx
  004c7	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  004cc	8d b5 18 ff ff
	ff		 lea	 esi, DWORD PTR _Item$190782[ebp]
  004d2	50		 push	 eax
  004d3	f3 a5		 rep movsd
  004d5	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert

; 2299 : 		ChaosBoxInit(lpObj);

  004da	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  004e0	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  004e6	53		 push	 ebx
  004e7	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2300 : 		::gObjChaosBoxInsertItemPos(lpObj->m_Index, Item, 0, -1);

  004ec	6a ff		 push	 -1
  004ee	6a 00		 push	 0
  004f0	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  004f6	8b fc		 mov	 edi, esp
  004f8	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  004fd	8d b5 18 ff ff
	ff		 lea	 esi, DWORD PTR _Item$190782[ebp]
  00503	f3 a5		 rep movsd
  00505	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00507	51		 push	 ecx
  00508	e8 00 00 00 00	 call	 ?gObjChaosBoxInsertItemPos@@YAEHVCItem@@HH@Z ; gObjChaosBoxInsertItemPos

; 2301 : 		gObjChaosItemSet(lpObj->m_Index, 0, 1);

  0050d	8b 13		 mov	 edx, DWORD PTR [ebx]
  0050f	6a 01		 push	 1
  00511	6a 00		 push	 0
  00513	52		 push	 edx
  00514	e8 00 00 00 00	 call	 ?gObjChaosItemSet@@YAXHHE@Z ; gObjChaosItemSet

; 2302 : 
; 2303 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00519	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0051d	8b 13		 mov	 edx, DWORD PTR [ebx]
  0051f	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00525	50		 push	 eax
  00526	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00529	51		 push	 ecx
  0052a	52		 push	 edx
  0052b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2304 : #if( __4GAMERS__ == 1 )
; 2305 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2306 : #endif
; 2307 : 		LogAddTD("[SetItemMix] [%s][%s] CBMix Success %d Money : %d-%d (SetName:%s)", lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 2308 : 			lpObj->Money, lpObj->ChaosMoney, gSetItemOption.GetSetOptionName(lpObj->pChaosBox[MixSetItemIndex].m_Type, setoption));

  00530	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _setoption$[ebp]
  00536	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  0053c	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv697[ebp]
  00542	83 c4 0c	 add	 esp, 12			; 0000000cH
  00545	50		 push	 eax
  00546	0f bf 44 11 06	 movsx	 eax, WORD PTR [ecx+edx+6]
  0054b	50		 push	 eax
  0054c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00551	e8 00 00 00 00	 call	 ?GetSetOptionName@CSetItemOption@@QAEPADHH@Z ; CSetItemOption::GetSetOptionName
  00556	8b 8b 18 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4632]
  0055c	8b 93 cc 00 00
	00		 mov	 edx, DWORD PTR [ebx+204]
  00562	50		 push	 eax
  00563	8b 83 1c 12 00
	00		 mov	 eax, DWORD PTR [ebx+4636]
  00569	51		 push	 ecx
  0056a	52		 push	 edx
  0056b	50		 push	 eax
  0056c	8d 4b 5d	 lea	 ecx, DWORD PTR [ebx+93]
  0056f	51		 push	 ecx
  00570	83 c3 52	 add	 ebx, 82			; 00000052H
  00573	53		 push	 ebx
  00574	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@BFAACIGE@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@
  00579	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0057f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2325 : 	}
; 2326 : }

  00582	5f		 pop	 edi
  00583	5e		 pop	 esi
  00584	5b		 pop	 ebx
  00585	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00588	33 cd		 xor	 ecx, ebp
  0058a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0058f	8b e5		 mov	 esp, ebp
  00591	5d		 pop	 ebp
  00592	c2 04 00	 ret	 4
$LN4@SetItemCha:

; 2309 : 	}
; 2310 : 	else
; 2311 : 	{
; 2312 : #if( __4GAMERS__ == 1 )
; 2313 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2314 : #endif
; 2315 : 		ChaosBoxInit(lpObj);

  00595	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0059b	53		 push	 ebx
  0059c	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2316 : 		GCUserChaosBoxSend(lpObj, 0);

  005a1	6a 00		 push	 0
  005a3	53		 push	 ebx
  005a4	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2317 : 
; 2318 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  005a9	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  005ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  005af	52		 push	 edx
  005b0	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  005b3	50		 push	 eax
  005b4	51		 push	 ecx
  005b5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2319 : 
; 2320 : 		LogAddTD("[SetItemMix] [%s][%s] CBMix Fail %d Money : %d-%d",
; 2321 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money,
; 2322 : 			nChaosNeedMoney);

  005ba	8b 93 cc 00 00
	00		 mov	 edx, DWORD PTR [ebx+204]
  005c0	8b 83 1c 12 00
	00		 mov	 eax, DWORD PTR [ebx+4636]
  005c6	57		 push	 edi
  005c7	52		 push	 edx
  005c8	50		 push	 eax
  005c9	8d 4b 5d	 lea	 ecx, DWORD PTR [ebx+93]
  005cc	51		 push	 ecx
  005cd	8d 53 52	 lea	 edx, DWORD PTR [ebx+82]
  005d0	52		 push	 edx
  005d1	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@ILPOEBCF@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@
  005d6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  005dc	83 c4 2c	 add	 esp, 44			; 0000002cH

; 2323 : 
; 2324 : 		lpObj->ChaosLock = FALSE;

  005df	eb 14		 jmp	 SHORT $LN41@SetItemCha
$LN9@SetItemCha:

; 2218 : 	{
; 2219 : 		DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  005e1	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  005e5	8b 13		 mov	 edx, DWORD PTR [ebx]
  005e7	50		 push	 eax
  005e8	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  005eb	51		 push	 ecx
  005ec	52		 push	 edx
$LN40@SetItemCha:
  005ed	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  005f2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@SetItemCha:

; 2325 : 	}
; 2326 : }

  005f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005f8	5f		 pop	 edi
  005f9	5e		 pop	 esi
  005fa	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  00604	33 cd		 xor	 ecx, ebp
  00606	5b		 pop	 ebx
  00607	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0060c	8b e5		 mov	 esp, ebp
  0060e	5d		 pop	 ebp
  0060f	c2 04 00	 ret	 4
?SetItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::SetItemChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0EE@MAGJAMAN@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@ ; `string'
PUBLIC	??_C@_0EH@JGHMMOON@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@ ; `string'
PUBLIC	??_C@_0BP@IMILBLLO@?$FLDarkHorseMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0N@LDINKAHL@DarkHorseMix?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DarkHorseChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::DarkHorseChaosMix
EXTRN	?PetItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC ; PetItemSerialCreateSend
;	COMDAT ??_C@_0EE@MAGJAMAN@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@
CONST	SEGMENT
??_C@_0EE@MAGJAMAN@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@ DB '['
	DB	'DarkHorseMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate'
	DB	' : %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@JGHMMOON@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@
CONST	SEGMENT
??_C@_0EH@JGHMMOON@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@ DB '['
	DB	'DarkHorseMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmR'
	DB	'ate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IMILBLLO@?$FLDarkHorseMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BP@IMILBLLO@?$FLDarkHorseMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Dark'
	DB	'HorseMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDINKAHL@DarkHorseMix?$AA@
CONST	SEGMENT
??_C@_0N@LDINKAHL@DarkHorseMix?$AA@ DB 'DarkHorseMix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DarkHorseChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iCharmOfLuckCount$ = -52				; size = 4
_SoulGemCount$ = -48					; size = 4
_ChoasGemCount$ = -44					; size = 4
_BlessGemCount$ = -40					; size = 4
tv446 = -36						; size = 4
_this$ = -36						; size = 4
_Add$190848 = -32					; size = 4
_CreatureGemCount$ = -32				; size = 4
_Option1$190845 = -28					; size = 4
_SoulOfDarkHorse$ = -28					; size = 4
_lc22$190851 = -24					; size = 4
_iInvalidItemCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DarkHorseChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::DarkHorseChaosMix, COMDAT
; _this$ = ecx

; 2331 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 2332 : 	lpObj->ChaosLock = TRUE;
; 2333 : 	int ChoasGemCount = 0;

  00016	33 ff		 xor	 edi, edi

; 2334 : 	int BlessGemCount = 0;
; 2335 : 	int SoulGemCount = 0;
; 2336 : 	int CreatureGemCount = 0;
; 2337 : 	int SoulOfDarkHorse = 0;
; 2338 : 	int iChaosMoney = 0;
; 2339 : 
; 2340 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2341 : 
; 2342 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	89 7d d4	 mov	 DWORD PTR _ChoasGemCount$[ebp], edi
  00033	89 7d d8	 mov	 DWORD PTR _BlessGemCount$[ebp], edi
  00036	89 7d d0	 mov	 DWORD PTR _SoulGemCount$[ebp], edi
  00039	89 7d e0	 mov	 DWORD PTR _CreatureGemCount$[ebp], edi
  0003c	89 7d e4	 mov	 DWORD PTR _SoulOfDarkHorse$[ebp], edi
  0003f	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2343 : 	pMsg.Result = CB_ERROR;

  00047	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 2344 : 	int iCharmOfLuckCount = 0;

  0004b	33 db		 xor	 ebx, ebx

; 2345 : 	int iInvalidItemCount = 0;

  0004d	89 7d e8	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
$LL34@DarkHorseC:

; 2348 : 	{
; 2349 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 78		 jne	 SHORT $LN33@DarkHorseC

; 2350 : 		{
; 2351 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  00062	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00068	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  0006d	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  00072	66 3b c2	 cmp	 ax, dx
  00075	75 05		 jne	 SHORT $LN30@DarkHorseC

; 2352 : 			{
; 2353 : 				BlessGemCount++;

  00077	ff 45 d8	 inc	 DWORD PTR _BlessGemCount$[ebp]
  0007a	eb 5e		 jmp	 SHORT $LN33@DarkHorseC
$LN30@DarkHorseC:

; 2354 : 			}
; 2355 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  0007c	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  00081	66 3b c2	 cmp	 ax, dx
  00084	75 05		 jne	 SHORT $LN28@DarkHorseC

; 2356 : 			{
; 2357 : 				SoulGemCount++;

  00086	ff 45 d0	 inc	 DWORD PTR _SoulGemCount$[ebp]
  00089	eb 4f		 jmp	 SHORT $LN33@DarkHorseC
$LN28@DarkHorseC:

; 2358 : 			}
; 2359 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )	// Creation

  0008b	ba 16 1c 00 00	 mov	 edx, 7190		; 00001c16H
  00090	66 3b c2	 cmp	 ax, dx
  00093	75 05		 jne	 SHORT $LN26@DarkHorseC

; 2360 : 			{
; 2361 : 				CreatureGemCount++;

  00095	ff 45 e0	 inc	 DWORD PTR _CreatureGemCount$[ebp]
  00098	eb 40		 jmp	 SHORT $LN33@DarkHorseC
$LN26@DarkHorseC:

; 2362 : 			}
; 2363 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )	// SUPE CHOAS HAHAHA

  0009a	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  0009f	66 3b c2	 cmp	 ax, dx
  000a2	75 05		 jne	 SHORT $LN24@DarkHorseC

; 2364 : 			{
; 2365 : 				ChoasGemCount++;

  000a4	ff 45 d4	 inc	 DWORD PTR _ChoasGemCount$[ebp]
  000a7	eb 31		 jmp	 SHORT $LN33@DarkHorseC
$LN24@DarkHorseC:

; 2366 : 			}
; 2367 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,31) && lpObj->pChaosBox[n].m_Level == 0 )	// Spirit

  000a9	ba 1f 1a 00 00	 mov	 edx, 6687		; 00001a1fH
  000ae	66 3b c2	 cmp	 ax, dx
  000b1	75 0d		 jne	 SHORT $LN22@DarkHorseC
  000b3	66 83 7c 39 08
	00		 cmp	 WORD PTR [ecx+edi+8], 0
  000b9	75 05		 jne	 SHORT $LN22@DarkHorseC

; 2368 : 			{
; 2369 : 				SoulOfDarkHorse++;

  000bb	ff 45 e4	 inc	 DWORD PTR _SoulOfDarkHorse$[ebp]
  000be	eb 1a		 jmp	 SHORT $LN33@DarkHorseC
$LN22@DarkHorseC:

; 2370 : 			}
; 2371 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  000c0	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000c5	66 3b c2	 cmp	 ax, dx
  000c8	75 0d		 jne	 SHORT $LN20@DarkHorseC

; 2372 : 			{
; 2373 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000ca	d9 44 39 24	 fld	 DWORD PTR [ecx+edi+36]
  000ce	e8 00 00 00 00	 call	 __ftol2_sse
  000d3	03 d8		 add	 ebx, eax

; 2374 : 			}
; 2375 : 			else

  000d5	eb 03		 jmp	 SHORT $LN33@DarkHorseC
$LN20@DarkHorseC:

; 2376 : 			{
; 2377 : 				iInvalidItemCount++;

  000d7	ff 45 e8	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN33@DarkHorseC:

; 2346 : 
; 2347 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000da	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000e0	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000e6	0f 8c 64 ff ff
	ff		 jl	 $LL34@DarkHorseC

; 2378 : 			}
; 2379 : 			
; 2380 : 
; 2381 : 		}
; 2382 : 	}
; 2383 : 
; 2384 : 	if ( ChoasGemCount != 1 || BlessGemCount != 5 || SoulGemCount != 5 || CreatureGemCount != 1 || SoulOfDarkHorse != 1 || iInvalidItemCount > 0 )

  000ec	b9 01 00 00 00	 mov	 ecx, 1
  000f1	89 5d cc	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], ebx
  000f4	39 4d d4	 cmp	 DWORD PTR _ChoasGemCount$[ebp], ecx
  000f7	0f 85 b6 00 00
	00		 jne	 $LN39@DarkHorseC
  000fd	b8 05 00 00 00	 mov	 eax, 5
  00102	39 45 d8	 cmp	 DWORD PTR _BlessGemCount$[ebp], eax
  00105	0f 85 a8 00 00
	00		 jne	 $LN39@DarkHorseC
  0010b	39 45 d0	 cmp	 DWORD PTR _SoulGemCount$[ebp], eax
  0010e	0f 85 9f 00 00
	00		 jne	 $LN39@DarkHorseC
  00114	39 4d e0	 cmp	 DWORD PTR _CreatureGemCount$[ebp], ecx
  00117	0f 85 96 00 00
	00		 jne	 $LN39@DarkHorseC
  0011d	39 4d e4	 cmp	 DWORD PTR _SoulOfDarkHorse$[ebp], ecx
  00120	0f 85 8d 00 00
	00		 jne	 $LN39@DarkHorseC
  00126	83 7d e8 00	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], 0
  0012a	0f 8f 83 00 00
	00		 jg	 $LN39@DarkHorseC

; 2388 : 
; 2389 : 		return;
; 2390 : 	}
; 2391 : 
; 2392 : 	if ( iCharmOfLuckCount > 10 )

  00130	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00133	7e 12		 jle	 SHORT $LN16@DarkHorseC

; 2393 : 	{
; 2394 : 		pMsg.Result = 0xF0;
; 2395 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00135	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00139	8b 16		 mov	 edx, DWORD PTR [esi]
  0013b	50		 push	 eax
  0013c	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0013f	51		 push	 ecx
  00140	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  00144	52		 push	 edx

; 2396 : 		lpObj->ChaosLock = FALSE;
; 2397 : 
; 2398 : 		return ;

  00145	eb 78		 jmp	 SHORT $LN40@DarkHorseC
$LN16@DarkHorseC:

; 2399 : 	}
; 2400 : 
; 2401 : 	LogChaosItem(lpObj, "DarkHorseMix");

  00147	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LDINKAHL@DarkHorseMix?$AA@
  0014f	56		 push	 esi
  00150	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2402 : 	LogAddTD("[DarkHorseMix] Chaos Mix Start");

  00155	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IMILBLLO@?$FLDarkHorseMix?$FN?5Chaos?5Mix?5Start?$AA@
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2403 : 	lpObj->ChaosSuccessRate = 60;
; 2404 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 2405 : 
; 2406 : 	int nChaosNeedMoney = 5000000;
; 2407 : 
; 2408 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00160	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00162	83 c4 04	 add	 esp, 4
  00165	8d 43 3c	 lea	 eax, DWORD PTR [ebx+60]
  00168	51		 push	 ecx
  00169	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0016e	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
  00174	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00179	6a 00		 push	 0
  0017b	99		 cdq
  0017c	68 40 4b 4c 00	 push	 5000000			; 004c4b40H
  00181	52		 push	 edx
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 __allmul
  00188	6a 00		 push	 0
  0018a	6a 64		 push	 100			; 00000064H
  0018c	52		 push	 edx
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 __alldiv

; 2409 : 
; 2410 : 	if ( iChaosTaxMoney < 0 )

  00193	85 c0		 test	 eax, eax
  00195	79 02		 jns	 SHORT $LN15@DarkHorseC

; 2411 : 	{
; 2412 : 		iChaosTaxMoney = 0;

  00197	33 c0		 xor	 eax, eax
$LN15@DarkHorseC:

; 2413 : 	}
; 2414 : 
; 2415 : 	nChaosNeedMoney += iChaosTaxMoney;

  00199	8d b8 40 4b 4c
	00		 lea	 edi, DWORD PTR [eax+5000000]

; 2416 : 
; 2417 : 	if ( nChaosNeedMoney < 0 )

  0019f	85 ff		 test	 edi, edi
  001a1	79 02		 jns	 SHORT $LN14@DarkHorseC

; 2418 : 	{
; 2419 : 		nChaosNeedMoney = 0;

  001a3	33 ff		 xor	 edi, edi
$LN14@DarkHorseC:

; 2420 : 	}
; 2421 : 
; 2422 : 	if ( lpObj->Money < nChaosNeedMoney )

  001a5	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  001ab	3b cf		 cmp	 ecx, edi
  001ad	7d 35		 jge	 SHORT $LN13@DarkHorseC

; 2423 : 	{
; 2424 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  001af	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
$LN39@DarkHorseC:

; 2385 : 	{
; 2386 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  001b3	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  001b7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001b9	52		 push	 edx
  001ba	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001bd	50		 push	 eax
  001be	51		 push	 ecx
$LN40@DarkHorseC:
  001bf	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001c4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@DarkHorseC:

; 2387 : 		lpObj->ChaosLock = FALSE;

  001c7	5f		 pop	 edi
  001c8	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001d2	5e		 pop	 esi
  001d3	5b		 pop	 ebx

; 2507 : 	}
; 2508 : }

  001d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d7	33 cd		 xor	 ecx, ebp
  001d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 04 00	 ret	 4
$LN13@DarkHorseC:

; 2425 : 		
; 2426 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 2427 : 		lpObj->ChaosLock = FALSE;
; 2428 : 
; 2429 : 		return;
; 2430 : 	}
; 2431 : 
; 2432 : 	lpObj->Money -= nChaosNeedMoney;

  001e4	2b cf		 sub	 ecx, edi
  001e6	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 2433 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001ec	50		 push	 eax
  001ed	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001f2	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 2434 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001f7	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  001fd	8b 06		 mov	 eax, DWORD PTR [esi]
  001ff	52		 push	 edx
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00206	83 c4 08	 add	 esp, 8

; 2435 : 
; 2436 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00209	e8 00 00 00 00	 call	 _rand
  0020e	99		 cdq
  0020f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00214	f7 f9		 idiv	 ecx
  00216	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0021c	0f 8d 06 01 00
	00		 jge	 $LN12@DarkHorseC

; 2437 : 	{
; 2438 : 		int Level = 0;
; 2439 : 		int ItemType = 13;
; 2440 : 		int ItemSubType = 4;
; 2441 : 		int ItemNum = ITEMGET(ItemType, ItemSubType);
; 2442 : 		int Option1 = 0;

  00222	33 db		 xor	 ebx, ebx
  00224	89 5d e4	 mov	 DWORD PTR _Option1$190845[ebp], ebx

; 2443 : 		int Option2 = 0;
; 2444 : 		int Option3 = 0;
; 2445 : 
; 2446 : 		int Add = 0;

  00227	89 5d e0	 mov	 DWORD PTR _Add$190848[ebp], ebx

; 2447 : 
; 2448 : 		if ( (rand()%100) < (lpObj->ChaosSuccessRate/5+6) )

  0022a	e8 00 00 00 00	 call	 _rand
  0022f	99		 cdq
  00230	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00235	f7 f9		 idiv	 ecx
  00237	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0023c	89 55 dc	 mov	 DWORD PTR tv446[ebp], edx
  0023f	f7 ae 1c 12 00
	00		 imul	 DWORD PTR [esi+4636]
  00245	d1 fa		 sar	 edx, 1
  00247	8b c2		 mov	 eax, edx
  00249	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0024c	8d 4c 02 06	 lea	 ecx, DWORD PTR [edx+eax+6]
  00250	39 4d dc	 cmp	 DWORD PTR tv446[ebp], ecx
  00253	7d 07		 jge	 SHORT $LN11@DarkHorseC

; 2449 : 		{
; 2450 : 			Add = 1;

  00255	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Add$190848[ebp], 1
$LN11@DarkHorseC:

; 2451 : 		}
; 2452 : 
; 2453 : 		if ( (rand()%5) == 0 )

  0025c	e8 00 00 00 00	 call	 _rand
  00261	99		 cdq
  00262	b9 05 00 00 00	 mov	 ecx, 5
  00267	f7 f9		 idiv	 ecx
  00269	85 d2		 test	 edx, edx
  0026b	75 07		 jne	 SHORT $LN10@DarkHorseC

; 2454 : 		{
; 2455 : 			Option1 = 1;

  0026d	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$190845[ebp], 1
$LN10@DarkHorseC:

; 2456 : 		}
; 2457 : 
; 2458 : 		int lc22 = rand()%100;	

  00274	e8 00 00 00 00	 call	 _rand
  00279	99		 cdq
  0027a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0027f	f7 f9		 idiv	 ecx
  00281	89 55 e8	 mov	 DWORD PTR _lc22$190851[ebp], edx

; 2459 : 		int lc23 = rand()%3;

  00284	e8 00 00 00 00	 call	 _rand
  00289	99		 cdq
  0028a	b9 03 00 00 00	 mov	 ecx, 3
  0028f	f7 f9		 idiv	 ecx

; 2460 : 		//int lc24 = lc23;
; 2461 : 
; 2462 : 		switch ( lc23 )

  00291	2b d3		 sub	 edx, ebx
  00293	74 1e		 je	 SHORT $LN7@DarkHorseC
  00295	4a		 dec	 edx
  00296	74 0e		 je	 SHORT $LN5@DarkHorseC
  00298	4a		 dec	 edx
  00299	75 20		 jne	 SHORT $LN6@DarkHorseC

; 2477 : 
; 2478 : 			case 2:
; 2479 : 				if ( lc22 <  20 )

  0029b	83 7d e8 14	 cmp	 DWORD PTR _lc22$190851[ebp], 20 ; 00000014H
  0029f	7d 1a		 jge	 SHORT $LN6@DarkHorseC

; 2480 : 				{
; 2481 : 					Option2 = 1;

  002a1	8d 59 fe	 lea	 ebx, DWORD PTR [ecx-2]

; 2482 : 				}
; 2483 : 				break;

  002a4	eb 15		 jmp	 SHORT $LN6@DarkHorseC
$LN5@DarkHorseC:

; 2468 : 				}
; 2469 : 				break;
; 2470 : 
; 2471 : 			case 1:
; 2472 : 				if ( lc22 <  10 )

  002a6	83 7d e8 0a	 cmp	 DWORD PTR _lc22$190851[ebp], 10 ; 0000000aH
  002aa	7d 0f		 jge	 SHORT $LN6@DarkHorseC

; 2473 : 				{
; 2474 : 					Option2 = 2;

  002ac	bb 02 00 00 00	 mov	 ebx, 2

; 2475 : 				}
; 2476 : 				break;

  002b1	eb 08		 jmp	 SHORT $LN6@DarkHorseC
$LN7@DarkHorseC:

; 2463 : 		{
; 2464 : 			case 0:
; 2465 : 				if ( lc22 <  4 )

  002b3	83 7d e8 04	 cmp	 DWORD PTR _lc22$190851[ebp], 4
  002b7	7d 02		 jge	 SHORT $LN6@DarkHorseC

; 2466 : 				{
; 2467 : 					Option2 = 3;

  002b9	8b d9		 mov	 ebx, ecx
$LN6@DarkHorseC:

; 2484 : 		}
; 2485 : #if( __4GAMERS__ == 1 )
; 2486 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2487 : #endif
; 2488 : 		::PetItemSerialCreateSend(lpObj->m_Index, -2, 0, 0, ItemNum, Level, 0,Add,  Option1, Option2, -1, 0, 0); 

  002bb	8b 55 e4	 mov	 edx, DWORD PTR _Option1$190845[ebp]
  002be	8b 45 e0	 mov	 eax, DWORD PTR _Add$190848[ebp]
  002c1	6a 00		 push	 0
  002c3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002c5	6a 00		 push	 0
  002c7	6a ff		 push	 -1
  002c9	53		 push	 ebx
  002ca	52		 push	 edx
  002cb	50		 push	 eax
  002cc	6a 00		 push	 0
  002ce	6a 00		 push	 0
  002d0	68 04 1a 00 00	 push	 6660			; 00001a04H
  002d5	6a 00		 push	 0
  002d7	6a 00		 push	 0
  002d9	68 fe 00 00 00	 push	 254			; 000000feH
  002de	51		 push	 ecx
  002df	e8 00 00 00 00	 call	 ?PetItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; PetItemSerialCreateSend

; 2489 : 		::gObjInventoryCommit(lpObj->m_Index);

  002e4	8b 16		 mov	 edx, DWORD PTR [esi]
  002e6	52		 push	 edx
  002e7	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 2490 : 		LogAddTD("[DarkHorseMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 2491 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 2492 : 			lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  002ec	8b 45 cc	 mov	 eax, DWORD PTR _iCharmOfLuckCount$[ebp]
  002ef	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  002f5	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  002fb	50		 push	 eax
  002fc	57		 push	 edi
  002fd	51		 push	 ecx
  002fe	52		 push	 edx
  002ff	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00302	50		 push	 eax
  00303	83 c6 52	 add	 esi, 82			; 00000052H
  00306	56		 push	 esi
  00307	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@JGHMMOON@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@
  0030c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2507 : 	}
; 2508 : }

  00312	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00315	83 c4 54	 add	 esp, 84			; 00000054H
  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	33 cd		 xor	 ecx, ebp
  0031c	5b		 pop	 ebx
  0031d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00322	8b e5		 mov	 esp, ebp
  00324	5d		 pop	 ebp
  00325	c2 04 00	 ret	 4
$LN12@DarkHorseC:

; 2493 : 	}
; 2494 : 	else
; 2495 : 	{
; 2496 : #if( __4GAMERS__ == 1 )
; 2497 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2498 : #endif
; 2499 : 		ChaosBoxInit(lpObj);

  00328	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032b	56		 push	 esi
  0032c	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2500 : 		GCUserChaosBoxSend(lpObj, 1);

  00331	6a 01		 push	 1
  00333	56		 push	 esi
  00334	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2501 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00339	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0033d	8b 06		 mov	 eax, DWORD PTR [esi]
  0033f	51		 push	 ecx
  00340	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00343	52		 push	 edx
  00344	50		 push	 eax
  00345	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2502 : 
; 2503 : 		LogAddTD("[DarkHorseMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 2504 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 2505 : 			lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  0034a	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00350	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00356	53		 push	 ebx
  00357	57		 push	 edi
  00358	51		 push	 ecx
  00359	52		 push	 edx
  0035a	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0035d	50		 push	 eax
  0035e	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  00361	51		 push	 ecx
  00362	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MAGJAMAN@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@
  00367	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0036d	83 c4 30	 add	 esp, 48			; 00000030H

; 2506 : 		lpObj->ChaosLock = FALSE;

  00370	e9 52 fe ff ff	 jmp	 $LN41@DarkHorseC
?DarkHorseChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::DarkHorseChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0EF@ENJLGEHL@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ ; `string'
PUBLIC	??_C@_0EI@DIJHKIBN@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ ; `string'
PUBLIC	??_C@_0CA@HOBPNGGO@?$FLDarkSpiritMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0O@OCFEOMDO@DarkSpiritMix?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DarkSpiritChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::DarkSpiritChaosMix
;	COMDAT ??_C@_0EF@ENJLGEHL@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
CONST	SEGMENT
??_C@_0EF@ENJLGEHL@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ DB '['
	DB	'DarkSpiritMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRat'
	DB	'e : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@DIJHKIBN@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
CONST	SEGMENT
??_C@_0EI@DIJHKIBN@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ DB '['
	DB	'DarkSpiritMix] [%s][%s] CBMix Success %d Money : %d-%d, Charm'
	DB	'Rate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HOBPNGGO@?$FLDarkSpiritMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0CA@HOBPNGGO@?$FLDarkSpiritMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Dar'
	DB	'kSpiritMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OCFEOMDO@DarkSpiritMix?$AA@
CONST	SEGMENT
??_C@_0O@OCFEOMDO@DarkSpiritMix?$AA@ DB 'DarkSpiritMix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DarkSpiritChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iCharmOfLuckCount$ = -52				; size = 4
_SoulGemCount$ = -48					; size = 4
_ChoasGemCount$ = -44					; size = 4
_BlessGemCount$ = -40					; size = 4
tv446 = -36						; size = 4
_this$ = -36						; size = 4
_Add$190925 = -32					; size = 4
_CreatureGemCount$ = -32				; size = 4
_Option1$190922 = -28					; size = 4
_SoulOfSpirit$ = -28					; size = 4
_lc22$190928 = -24					; size = 4
_iInvalidItemCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DarkSpiritChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::DarkSpiritChaosMix, COMDAT
; _this$ = ecx

; 2516 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 2517 : 	lpObj->ChaosLock = TRUE;
; 2518 : 	int ChoasGemCount = 0;

  00016	33 ff		 xor	 edi, edi

; 2519 : 	int BlessGemCount = 0;
; 2520 : 	int SoulGemCount = 0;
; 2521 : 	int CreatureGemCount = 0;
; 2522 : 	int SoulOfSpirit = 0;
; 2523 : 	int iChaosMoney = 0;
; 2524 : 
; 2525 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2526 : 
; 2527 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	89 7d d4	 mov	 DWORD PTR _ChoasGemCount$[ebp], edi
  00033	89 7d d8	 mov	 DWORD PTR _BlessGemCount$[ebp], edi
  00036	89 7d d0	 mov	 DWORD PTR _SoulGemCount$[ebp], edi
  00039	89 7d e0	 mov	 DWORD PTR _CreatureGemCount$[ebp], edi
  0003c	89 7d e4	 mov	 DWORD PTR _SoulOfSpirit$[ebp], edi
  0003f	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2528 : 	pMsg.Result = CB_ERROR;

  00047	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 2529 : 	int iCharmOfLuckCount = 0;

  0004b	33 db		 xor	 ebx, ebx

; 2530 : 	int iInvalidItemCount = 0;

  0004d	89 7d e8	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
$LL34@DarkSpirit:

; 2533 : 	{
; 2534 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 7c		 jne	 SHORT $LN33@DarkSpirit

; 2535 : 		{
; 2536 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  00062	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00068	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  0006d	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  00072	66 3b c2	 cmp	 ax, dx
  00075	75 05		 jne	 SHORT $LN30@DarkSpirit

; 2537 : 			{
; 2538 : 				BlessGemCount++;

  00077	ff 45 d8	 inc	 DWORD PTR _BlessGemCount$[ebp]
  0007a	eb 62		 jmp	 SHORT $LN33@DarkSpirit
$LN30@DarkSpirit:

; 2539 : 			}
; 2540 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  0007c	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  00081	66 3b c2	 cmp	 ax, dx
  00084	75 05		 jne	 SHORT $LN28@DarkSpirit

; 2541 : 			{
; 2542 : 				SoulGemCount++;

  00086	ff 45 d0	 inc	 DWORD PTR _SoulGemCount$[ebp]
  00089	eb 53		 jmp	 SHORT $LN33@DarkSpirit
$LN28@DarkSpirit:

; 2543 : 			}
; 2544 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )	// Creation

  0008b	ba 16 1c 00 00	 mov	 edx, 7190		; 00001c16H
  00090	66 3b c2	 cmp	 ax, dx
  00093	75 05		 jne	 SHORT $LN26@DarkSpirit

; 2545 : 			{
; 2546 : 				CreatureGemCount++;

  00095	ff 45 e0	 inc	 DWORD PTR _CreatureGemCount$[ebp]
  00098	eb 44		 jmp	 SHORT $LN33@DarkSpirit
$LN26@DarkSpirit:

; 2547 : 			}
; 2548 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )	// SUPE CHOAS HAHAHA

  0009a	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  0009f	66 3b c2	 cmp	 ax, dx
  000a2	75 05		 jne	 SHORT $LN24@DarkSpirit

; 2549 : 			{
; 2550 : 				ChoasGemCount++;

  000a4	ff 45 d4	 inc	 DWORD PTR _ChoasGemCount$[ebp]
  000a7	eb 35		 jmp	 SHORT $LN33@DarkSpirit
$LN24@DarkSpirit:

; 2551 : 			}
; 2552 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,31) && lpObj->pChaosBox[n].m_Level == 1 )	// Spirit

  000a9	ba 1f 1a 00 00	 mov	 edx, 6687		; 00001a1fH
  000ae	66 3b c2	 cmp	 ax, dx
  000b1	75 11		 jne	 SHORT $LN22@DarkSpirit
  000b3	ba 01 00 00 00	 mov	 edx, 1
  000b8	66 39 54 39 08	 cmp	 WORD PTR [ecx+edi+8], dx
  000bd	75 05		 jne	 SHORT $LN22@DarkSpirit

; 2553 : 			{
; 2554 : 				SoulOfSpirit++;

  000bf	01 55 e4	 add	 DWORD PTR _SoulOfSpirit$[ebp], edx
  000c2	eb 1a		 jmp	 SHORT $LN33@DarkSpirit
$LN22@DarkSpirit:

; 2555 : 			}
; 2556 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  000c4	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000c9	66 3b c2	 cmp	 ax, dx
  000cc	75 0d		 jne	 SHORT $LN20@DarkSpirit

; 2557 : 			{
; 2558 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000ce	d9 44 39 24	 fld	 DWORD PTR [ecx+edi+36]
  000d2	e8 00 00 00 00	 call	 __ftol2_sse
  000d7	03 d8		 add	 ebx, eax

; 2559 : 			}
; 2560 : 			else

  000d9	eb 03		 jmp	 SHORT $LN33@DarkSpirit
$LN20@DarkSpirit:

; 2561 : 			{
; 2562 : 				iInvalidItemCount++;

  000db	ff 45 e8	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN33@DarkSpirit:

; 2531 : 
; 2532 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000de	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000e4	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000ea	0f 8c 60 ff ff
	ff		 jl	 $LL34@DarkSpirit

; 2563 : 			}
; 2564 : 		}
; 2565 : 	}
; 2566 : 
; 2567 : 	if ( ChoasGemCount != 1 || BlessGemCount != 2 || SoulGemCount != 2 || CreatureGemCount != 1 || SoulOfSpirit != 1 || iInvalidItemCount > 0 )

  000f0	b9 01 00 00 00	 mov	 ecx, 1
  000f5	89 5d cc	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], ebx
  000f8	39 4d d4	 cmp	 DWORD PTR _ChoasGemCount$[ebp], ecx
  000fb	0f 85 b6 00 00
	00		 jne	 $LN39@DarkSpirit
  00101	b8 02 00 00 00	 mov	 eax, 2
  00106	39 45 d8	 cmp	 DWORD PTR _BlessGemCount$[ebp], eax
  00109	0f 85 a8 00 00
	00		 jne	 $LN39@DarkSpirit
  0010f	39 45 d0	 cmp	 DWORD PTR _SoulGemCount$[ebp], eax
  00112	0f 85 9f 00 00
	00		 jne	 $LN39@DarkSpirit
  00118	39 4d e0	 cmp	 DWORD PTR _CreatureGemCount$[ebp], ecx
  0011b	0f 85 96 00 00
	00		 jne	 $LN39@DarkSpirit
  00121	39 4d e4	 cmp	 DWORD PTR _SoulOfSpirit$[ebp], ecx
  00124	0f 85 8d 00 00
	00		 jne	 $LN39@DarkSpirit
  0012a	83 7d e8 00	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], 0
  0012e	0f 8f 83 00 00
	00		 jg	 $LN39@DarkSpirit

; 2571 : 
; 2572 : 		return;
; 2573 : 	}
; 2574 : 
; 2575 : 	if ( iCharmOfLuckCount > 10 )

  00134	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00137	7e 12		 jle	 SHORT $LN16@DarkSpirit

; 2576 : 	{
; 2577 : 		pMsg.Result = 0xF0;
; 2578 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00139	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0013d	8b 16		 mov	 edx, DWORD PTR [esi]
  0013f	50		 push	 eax
  00140	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00143	51		 push	 ecx
  00144	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  00148	52		 push	 edx

; 2579 : 		lpObj->ChaosLock = FALSE;
; 2580 : 
; 2581 : 		return ;

  00149	eb 78		 jmp	 SHORT $LN40@DarkSpirit
$LN16@DarkSpirit:

; 2582 : 	}
; 2583 : 
; 2584 : 	LogChaosItem(lpObj, "DarkSpiritMix");

  0014b	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OCFEOMDO@DarkSpiritMix?$AA@
  00153	56		 push	 esi
  00154	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2585 : 	LogAddTD("[DarkSpiritMix] Chaos Mix Start");

  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HOBPNGGO@?$FLDarkSpiritMix?$FN?5Chaos?5Mix?5Start?$AA@
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2586 : 	lpObj->ChaosSuccessRate = 60;
; 2587 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 2588 : 
; 2589 : 	int nChaosNeedMoney = 1000000;
; 2590 : 
; 2591 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00164	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00166	83 c4 04	 add	 esp, 4
  00169	8d 43 3c	 lea	 eax, DWORD PTR [ebx+60]
  0016c	51		 push	 ecx
  0016d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00172	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
  00178	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0017d	6a 00		 push	 0
  0017f	99		 cdq
  00180	68 40 42 0f 00	 push	 1000000			; 000f4240H
  00185	52		 push	 edx
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 __allmul
  0018c	6a 00		 push	 0
  0018e	6a 64		 push	 100			; 00000064H
  00190	52		 push	 edx
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 __alldiv

; 2592 : 
; 2593 : 	if ( iChaosTaxMoney < 0 )

  00197	85 c0		 test	 eax, eax
  00199	79 02		 jns	 SHORT $LN15@DarkSpirit

; 2594 : 	{
; 2595 : 		iChaosTaxMoney = 0;

  0019b	33 c0		 xor	 eax, eax
$LN15@DarkSpirit:

; 2596 : 	}
; 2597 : 
; 2598 : 	nChaosNeedMoney += iChaosTaxMoney;

  0019d	8d b8 40 42 0f
	00		 lea	 edi, DWORD PTR [eax+1000000]

; 2599 : 
; 2600 : 	if ( nChaosNeedMoney < 0 )

  001a3	85 ff		 test	 edi, edi
  001a5	79 02		 jns	 SHORT $LN14@DarkSpirit

; 2601 : 	{
; 2602 : 		nChaosNeedMoney = 0;

  001a7	33 ff		 xor	 edi, edi
$LN14@DarkSpirit:

; 2603 : 	}
; 2604 : 
; 2605 : 	if ( lpObj->Money < nChaosNeedMoney )

  001a9	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  001af	3b cf		 cmp	 ecx, edi
  001b1	7d 35		 jge	 SHORT $LN13@DarkSpirit

; 2606 : 	{
; 2607 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  001b3	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
$LN39@DarkSpirit:

; 2568 : 	{
; 2569 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  001b7	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  001bb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001bd	52		 push	 edx
  001be	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001c1	50		 push	 eax
  001c2	51		 push	 ecx
$LN40@DarkSpirit:
  001c3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001c8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@DarkSpirit:

; 2570 : 		lpObj->ChaosLock = FALSE;

  001cb	5f		 pop	 edi
  001cc	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001d6	5e		 pop	 esi
  001d7	5b		 pop	 ebx

; 2690 : 	}
; 2691 : }

  001d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001db	33 cd		 xor	 ecx, ebp
  001dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c2 04 00	 ret	 4
$LN13@DarkSpirit:

; 2608 : 		
; 2609 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 2610 : 		lpObj->ChaosLock = FALSE;
; 2611 : 
; 2612 : 		return;
; 2613 : 	}
; 2614 : 
; 2615 : 	lpObj->Money -= nChaosNeedMoney;

  001e8	2b cf		 sub	 ecx, edi
  001ea	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 2616 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001f0	50		 push	 eax
  001f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001f6	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 2617 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001fb	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  00201	8b 06		 mov	 eax, DWORD PTR [esi]
  00203	52		 push	 edx
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0020a	83 c4 08	 add	 esp, 8

; 2618 : 
; 2619 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  0020d	e8 00 00 00 00	 call	 _rand
  00212	99		 cdq
  00213	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00218	f7 f9		 idiv	 ecx
  0021a	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  00220	0f 8d 06 01 00
	00		 jge	 $LN12@DarkSpirit

; 2620 : 	{
; 2621 : 		int Level = 0;
; 2622 : 		int ItemType = 13;
; 2623 : 		int ItemSubType = 5;
; 2624 : 		int ItemNum = ITEMGET(ItemType, ItemSubType);
; 2625 : 		int Option1 = 0;

  00226	33 db		 xor	 ebx, ebx
  00228	89 5d e4	 mov	 DWORD PTR _Option1$190922[ebp], ebx

; 2626 : 		int Option2 = 0;
; 2627 : 		int Option3 = 0;
; 2628 : 
; 2629 : 		int Add = 0;

  0022b	89 5d e0	 mov	 DWORD PTR _Add$190925[ebp], ebx

; 2630 : 
; 2631 : 		if ( (rand()%100) < (lpObj->ChaosSuccessRate/5+6) )

  0022e	e8 00 00 00 00	 call	 _rand
  00233	99		 cdq
  00234	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00239	f7 f9		 idiv	 ecx
  0023b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00240	89 55 dc	 mov	 DWORD PTR tv446[ebp], edx
  00243	f7 ae 1c 12 00
	00		 imul	 DWORD PTR [esi+4636]
  00249	d1 fa		 sar	 edx, 1
  0024b	8b c2		 mov	 eax, edx
  0024d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00250	8d 4c 02 06	 lea	 ecx, DWORD PTR [edx+eax+6]
  00254	39 4d dc	 cmp	 DWORD PTR tv446[ebp], ecx
  00257	7d 07		 jge	 SHORT $LN11@DarkSpirit

; 2632 : 		{
; 2633 : 			Add = 1;

  00259	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Add$190925[ebp], 1
$LN11@DarkSpirit:

; 2634 : 		}
; 2635 : 
; 2636 : 		if ( (rand()%5) == 0 )

  00260	e8 00 00 00 00	 call	 _rand
  00265	99		 cdq
  00266	b9 05 00 00 00	 mov	 ecx, 5
  0026b	f7 f9		 idiv	 ecx
  0026d	85 d2		 test	 edx, edx
  0026f	75 07		 jne	 SHORT $LN10@DarkSpirit

; 2637 : 		{
; 2638 : 			Option1 = 1;

  00271	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$190922[ebp], 1
$LN10@DarkSpirit:

; 2639 : 		}
; 2640 : 
; 2641 : 		int lc22 = rand()%100;	

  00278	e8 00 00 00 00	 call	 _rand
  0027d	99		 cdq
  0027e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00283	f7 f9		 idiv	 ecx
  00285	89 55 e8	 mov	 DWORD PTR _lc22$190928[ebp], edx

; 2642 : 		int lc23 = rand()%3;

  00288	e8 00 00 00 00	 call	 _rand
  0028d	99		 cdq
  0028e	b9 03 00 00 00	 mov	 ecx, 3
  00293	f7 f9		 idiv	 ecx

; 2643 : //		int lc24 = lc23;
; 2644 : 
; 2645 : 		switch ( lc23 )

  00295	2b d3		 sub	 edx, ebx
  00297	74 1e		 je	 SHORT $LN7@DarkSpirit
  00299	4a		 dec	 edx
  0029a	74 0e		 je	 SHORT $LN5@DarkSpirit
  0029c	4a		 dec	 edx
  0029d	75 20		 jne	 SHORT $LN6@DarkSpirit

; 2660 : 
; 2661 : 			case 2:
; 2662 : 				if ( lc22 <  20 )

  0029f	83 7d e8 14	 cmp	 DWORD PTR _lc22$190928[ebp], 20 ; 00000014H
  002a3	7d 1a		 jge	 SHORT $LN6@DarkSpirit

; 2663 : 				{
; 2664 : 					Option2 = 1;

  002a5	8d 59 fe	 lea	 ebx, DWORD PTR [ecx-2]

; 2665 : 				}
; 2666 : 				break;

  002a8	eb 15		 jmp	 SHORT $LN6@DarkSpirit
$LN5@DarkSpirit:

; 2651 : 				}
; 2652 : 				break;
; 2653 : 
; 2654 : 			case 1:
; 2655 : 				if ( lc22 <  10 )

  002aa	83 7d e8 0a	 cmp	 DWORD PTR _lc22$190928[ebp], 10 ; 0000000aH
  002ae	7d 0f		 jge	 SHORT $LN6@DarkSpirit

; 2656 : 				{
; 2657 : 					Option2 = 2;

  002b0	bb 02 00 00 00	 mov	 ebx, 2

; 2658 : 				}
; 2659 : 				break;

  002b5	eb 08		 jmp	 SHORT $LN6@DarkSpirit
$LN7@DarkSpirit:

; 2646 : 		{
; 2647 : 			case 0:
; 2648 : 				if ( lc22 <  4 )

  002b7	83 7d e8 04	 cmp	 DWORD PTR _lc22$190928[ebp], 4
  002bb	7d 02		 jge	 SHORT $LN6@DarkSpirit

; 2649 : 				{
; 2650 : 					Option2 = 3;

  002bd	8b d9		 mov	 ebx, ecx
$LN6@DarkSpirit:

; 2667 : 		}
; 2668 : #if( __4GAMERS__ == 1 )
; 2669 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2670 : #endif
; 2671 : 		::PetItemSerialCreateSend(lpObj->m_Index, -2, 0, 0, ItemNum, Level, 0, Add, Option1, Option2, -1, 0, 0); 

  002bf	8b 55 e4	 mov	 edx, DWORD PTR _Option1$190922[ebp]
  002c2	8b 45 e0	 mov	 eax, DWORD PTR _Add$190925[ebp]
  002c5	6a 00		 push	 0
  002c7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002c9	6a 00		 push	 0
  002cb	6a ff		 push	 -1
  002cd	53		 push	 ebx
  002ce	52		 push	 edx
  002cf	50		 push	 eax
  002d0	6a 00		 push	 0
  002d2	6a 00		 push	 0
  002d4	68 05 1a 00 00	 push	 6661			; 00001a05H
  002d9	6a 00		 push	 0
  002db	6a 00		 push	 0
  002dd	68 fe 00 00 00	 push	 254			; 000000feH
  002e2	51		 push	 ecx
  002e3	e8 00 00 00 00	 call	 ?PetItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; PetItemSerialCreateSend

; 2672 : 		::gObjInventoryCommit(lpObj->m_Index);

  002e8	8b 16		 mov	 edx, DWORD PTR [esi]
  002ea	52		 push	 edx
  002eb	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 2673 : 		LogAddTD("[DarkSpiritMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 2674 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 2675 : 			lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  002f0	8b 45 cc	 mov	 eax, DWORD PTR _iCharmOfLuckCount$[ebp]
  002f3	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  002f9	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  002ff	50		 push	 eax
  00300	57		 push	 edi
  00301	51		 push	 ecx
  00302	52		 push	 edx
  00303	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00306	50		 push	 eax
  00307	83 c6 52	 add	 esi, 82			; 00000052H
  0030a	56		 push	 esi
  0030b	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@DIJHKIBN@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
  00310	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2690 : 	}
; 2691 : }

  00316	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00319	83 c4 54	 add	 esp, 84			; 00000054H
  0031c	5f		 pop	 edi
  0031d	5e		 pop	 esi
  0031e	33 cd		 xor	 ecx, ebp
  00320	5b		 pop	 ebx
  00321	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00326	8b e5		 mov	 esp, ebp
  00328	5d		 pop	 ebp
  00329	c2 04 00	 ret	 4
$LN12@DarkSpirit:

; 2676 : 	}
; 2677 : 	else
; 2678 : 	{
; 2679 : #if( __4GAMERS__ == 1 )
; 2680 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2681 : #endif
; 2682 : 		ChaosBoxInit(lpObj);

  0032c	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032f	56		 push	 esi
  00330	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2683 : 		GCUserChaosBoxSend(lpObj, 1);

  00335	6a 01		 push	 1
  00337	56		 push	 esi
  00338	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2684 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0033d	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00341	8b 06		 mov	 eax, DWORD PTR [esi]
  00343	51		 push	 ecx
  00344	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00347	52		 push	 edx
  00348	50		 push	 eax
  00349	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2685 : 
; 2686 : 		LogAddTD("[DarkSpiritMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 2687 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 2688 : 			lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  0034e	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00354	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  0035a	53		 push	 ebx
  0035b	57		 push	 edi
  0035c	51		 push	 ecx
  0035d	52		 push	 edx
  0035e	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00361	50		 push	 eax
  00362	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  00365	51		 push	 ecx
  00366	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@ENJLGEHL@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00371	83 c4 30	 add	 esp, 48			; 00000030H

; 2689 : 		lpObj->ChaosLock = FALSE;

  00374	e9 52 fe ff ff	 jmp	 $LN41@DarkSpirit
?DarkSpiritChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::DarkSpiritChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0DG@ECHLAENJ@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ ; `string'
PUBLIC	??_C@_0DJ@CHGCMDK@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ ; `string'
PUBLIC	??_C@_0CB@EBJOJCKF@?$FLBlessPotionMix?$FN?5Chaos?5Mix?5Start@ ; `string'
PUBLIC	??_C@_0P@NBHFIPDI@BlessPotionMix?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?BlessPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::BlessPotionChaosMix
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
;	COMDAT ??_C@_0DG@ECHLAENJ@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
CONST	SEGMENT
??_C@_0DG@ECHLAENJ@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ DB '['
	DB	'BlessPotionMix] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CHGCMDK@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
CONST	SEGMENT
??_C@_0DJ@CHGCMDK@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ DB '['
	DB	'BlessPotionMix] [%s][%s] CBMix Success %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EBJOJCKF@?$FLBlessPotionMix?$FN?5Chaos?5Mix?5Start@
CONST	SEGMENT
??_C@_0CB@EBJOJCKF@?$FLBlessPotionMix?$FN?5Chaos?5Mix?5Start@ DB '[BlessP'
	DB	'otionMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NBHFIPDI@BlessPotionMix?$AA@
CONST	SEGMENT
??_C@_0P@NBHFIPDI@BlessPotionMix?$AA@ DB 'BlessPotionMix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?BlessPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
_iInvalidItemCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?BlessPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::BlessPotionChaosMix, COMDAT
; _this$ = ecx

; 2700 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 2701 : 	lpObj->ChaosLock = TRUE;
; 2702 : 	int iBlessGemCount = 0;
; 2703 : 	int iChaosMoney = 0;
; 2704 : 	int iInvalidItemCount = 0;
; 2705 : 
; 2706 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2707 : 
; 2708 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	33 ff		 xor	 edi, edi
  00022	50		 push	 eax
  00023	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	33 db		 xor	 ebx, ebx
  00032	89 7d e8	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  00035	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2709 : 	pMsg.Result = CB_ERROR;

  0003d	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
$LL16@BlessPotio:

; 2712 : 	{
; 2713 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00040	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00046	03 cf		 add	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 18		 jne	 SHORT $LN15@BlessPotio

; 2714 : 		{
; 2715 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  00052	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00058	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  0005d	66 39 54 39 06	 cmp	 WORD PTR [ecx+edi+6], dx
  00062	75 03		 jne	 SHORT $LN12@BlessPotio

; 2716 : 			{
; 2717 : 				iBlessGemCount++;

  00064	43		 inc	 ebx

; 2718 : 			}
; 2719 : 			else

  00065	eb 03		 jmp	 SHORT $LN15@BlessPotio
$LN12@BlessPotio:

; 2720 : 			{
; 2721 : 				iInvalidItemCount++;

  00067	ff 45 e8	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN15@BlessPotio:

; 2710 : 
; 2711 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0006a	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00070	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00076	7c c8		 jl	 SHORT $LL16@BlessPotio

; 2722 : 			}
; 2723 : 		}
; 2724 : 	}
; 2725 : 
; 2726 : 	if ( iBlessGemCount == 0 )

  00078	85 db		 test	 ebx, ebx
  0007a	0f 84 ca 01 00
	00		 je	 $LN1@BlessPotio

; 2727 : 		return;
; 2728 : 
; 2729 : 	if ( iInvalidItemCount > 0 )

  00080	83 7d e8 00	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], 0
  00084	0f 8f c0 01 00
	00		 jg	 $LN1@BlessPotio

; 2730 : 		return;
; 2731 : 
; 2732 : 	if ( iBlessGemCount == 0 || iInvalidItemCount > 0 )
; 2733 : 	{
; 2734 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 2735 : 		lpObj->ChaosLock = FALSE;
; 2736 : 		return;
; 2737 : 	}
; 2738 : 
; 2739 : 	if ( iBlessGemCount > 25 )

  0008a	83 fb 19	 cmp	 ebx, 25			; 00000019H
  0008d	7e 31		 jle	 SHORT $LN6@BlessPotio

; 2740 : 	{
; 2741 : 		MsgOutput(lpObj->m_Index, lMsg.Get(MSGGET(6,201)));

  0008f	68 c9 06 00 00	 push	 1737			; 000006c9H
  00094	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00099	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0009e	50		 push	 eax
  0009f	8b 06		 mov	 eax, DWORD PTR [esi]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 2742 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000a7	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  000ab	8b 06		 mov	 eax, DWORD PTR [esi]
  000ad	51		 push	 ecx
  000ae	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  000b1	52		 push	 edx
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000b8	83 c4 14	 add	 esp, 20			; 00000014H

; 2743 : 		lpObj->ChaosLock = FALSE;
; 2744 : 
; 2745 : 		return;

  000bb	e9 80 01 00 00	 jmp	 $LN21@BlessPotio
$LN6@BlessPotio:

; 2746 : 	}
; 2747 : 
; 2748 : 	LogChaosItem(lpObj, "BlessPotionMix");

  000c0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NBHFIPDI@BlessPotionMix?$AA@
  000c8	56		 push	 esi
  000c9	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2749 : 	LogAddTD("[BlessPotionMix] Chaos Mix Start");

  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@EBJOJCKF@?$FLBlessPotionMix?$FN?5Chaos?5Mix?5Start@
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2750 : 	lpObj->ChaosSuccessRate = 100;
; 2751 : 
; 2752 : 	int nChaosNeedMoney = 100000;
; 2753 : 
; 2754 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  000d9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000db	83 c4 04	 add	 esp, 4
  000de	51		 push	 ecx
  000df	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000e4	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H
  000ee	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  000f3	6a 00		 push	 0
  000f5	99		 cdq
  000f6	68 a0 86 01 00	 push	 100000			; 000186a0H
  000fb	52		 push	 edx
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 __allmul
  00102	6a 00		 push	 0
  00104	6a 64		 push	 100			; 00000064H
  00106	52		 push	 edx
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 __alldiv

; 2755 : 
; 2756 : 	if ( iChaosTaxMoney < 0 )

  0010d	85 c0		 test	 eax, eax
  0010f	79 02		 jns	 SHORT $LN5@BlessPotio

; 2757 : 	{
; 2758 : 		iChaosTaxMoney = 0;

  00111	33 c0		 xor	 eax, eax
$LN5@BlessPotio:

; 2759 : 	}
; 2760 : 
; 2761 : 	nChaosNeedMoney += iChaosTaxMoney;

  00113	8d b8 a0 86 01
	00		 lea	 edi, DWORD PTR [eax+100000]

; 2762 : 
; 2763 : 	if ( nChaosNeedMoney < 0 )

  00119	85 ff		 test	 edi, edi
  0011b	79 02		 jns	 SHORT $LN4@BlessPotio

; 2764 : 	{
; 2765 : 		nChaosNeedMoney = 0;

  0011d	33 ff		 xor	 edi, edi
$LN4@BlessPotio:

; 2766 : 	}
; 2767 : 
; 2768 : 	if ( lpObj->Money < nChaosNeedMoney )

  0011f	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00125	3b cf		 cmp	 ecx, edi
  00127	7d 1d		 jge	 SHORT $LN3@BlessPotio

; 2769 : 	{
; 2770 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 2771 : 		
; 2772 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00129	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  0012d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0012f	52		 push	 edx
  00130	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00133	50		 push	 eax
  00134	51		 push	 ecx
  00135	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00139	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2773 : 		lpObj->ChaosLock = FALSE;
; 2774 : 
; 2775 : 		return;

  00141	e9 fa 00 00 00	 jmp	 $LN21@BlessPotio
$LN3@BlessPotio:

; 2776 : 	}
; 2777 : 
; 2778 : 	lpObj->Money -= nChaosNeedMoney;

  00146	2b cf		 sub	 ecx, edi
  00148	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 2779 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0014e	50		 push	 eax
  0014f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00154	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 2780 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00159	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0015f	8b 06		 mov	 eax, DWORD PTR [esi]
  00161	52		 push	 edx
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00168	83 c4 08	 add	 esp, 8

; 2781 : 
; 2782 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  0016b	e8 00 00 00 00	 call	 _rand
  00170	99		 cdq
  00171	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00176	f7 f9		 idiv	 ecx
  00178	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0017e	7d 79		 jge	 SHORT $LN2@BlessPotio

; 2783 : 	{
; 2784 : 		int ItemNum = ITEMGET(14,7);
; 2785 : 		int Level = 0;
; 2786 : 		int Dur = iBlessGemCount * 10;
; 2787 : 
; 2788 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ItemNum, Level, Dur, 0, 0, 0, -1, 0, 0);

  00180	6a 00		 push	 0
  00182	6a 00		 push	 0
  00184	6a 00		 push	 0
  00186	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00188	6a 00		 push	 0
  0018a	6a ff		 push	 -1
  0018c	8a d3		 mov	 dl, bl
  0018e	6a 00		 push	 0
  00190	02 d2		 add	 dl, dl
  00192	6a 00		 push	 0
  00194	02 d2		 add	 dl, dl
  00196	02 da		 add	 bl, dl
  00198	6a 00		 push	 0
  0019a	02 db		 add	 bl, bl
  0019c	0f b6 c3	 movzx	 eax, bl
  0019f	50		 push	 eax
  001a0	6a 00		 push	 0
  001a2	68 07 1c 00 00	 push	 7175			; 00001c07H
  001a7	6a 00		 push	 0
  001a9	6a 00		 push	 0
  001ab	68 ff 00 00 00	 push	 255			; 000000ffH
  001b0	51		 push	 ecx
  001b1	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 2789 : 		::gObjInventoryCommit(lpObj->m_Index);

  001b6	8b 16		 mov	 edx, DWORD PTR [esi]
  001b8	52		 push	 edx
  001b9	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 2790 : #if( __4GAMERS__ == 1 )
; 2791 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2792 : #endif
; 2793 : 		LogAddTD("[BlessPotionMix] [%s][%s] CBMix Success %d Money : %d-%d",
; 2794 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 2795 : 			lpObj->Money, nChaosNeedMoney);

  001be	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  001c4	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  001ca	83 c4 40	 add	 esp, 64			; 00000040H
  001cd	57		 push	 edi
  001ce	50		 push	 eax
  001cf	51		 push	 ecx
  001d0	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  001d3	52		 push	 edx
  001d4	83 c6 52	 add	 esi, 82			; 00000052H
  001d7	56		 push	 esi
  001d8	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@CHGCMDK@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
  001dd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001e3	83 c4 18	 add	 esp, 24			; 00000018H
  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	5b		 pop	 ebx

; 2811 : 	}
; 2812 : }

  001e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ec	33 cd		 xor	 ecx, ebp
  001ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f3	8b e5		 mov	 esp, ebp
  001f5	5d		 pop	 ebp
  001f6	c2 04 00	 ret	 4
$LN2@BlessPotio:

; 2796 : 	}
; 2797 : 	else
; 2798 : 	{
; 2799 : #if( __4GAMERS__ == 1 )
; 2800 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2801 : #endif
; 2802 : 		ChaosBoxInit(lpObj);

  001f9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001fc	56		 push	 esi
  001fd	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2803 : 		::GCUserChaosBoxSend(lpObj, 1);

  00202	6a 01		 push	 1
  00204	56		 push	 esi
  00205	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2804 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0020a	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0020e	8b 16		 mov	 edx, DWORD PTR [esi]
  00210	50		 push	 eax
  00211	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00214	51		 push	 ecx
  00215	52		 push	 edx
  00216	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2805 : 
; 2806 : 		LogAddTD("[BlessPotionMix] [%s][%s] CBMix Fail %d Money : %d-%d",
; 2807 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 2808 : 			lpObj->Money, nChaosNeedMoney);

  0021b	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00221	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00227	57		 push	 edi
  00228	50		 push	 eax
  00229	51		 push	 ecx
  0022a	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  0022d	52		 push	 edx
  0022e	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00231	50		 push	 eax
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ECHLAENJ@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
  00237	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0023d	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN21@BlessPotio:

; 2809 : 
; 2810 : 		lpObj->ChaosLock = FALSE;

  00240	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN1@BlessPotio:

; 2811 : 	}
; 2812 : }

  0024a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024d	5f		 pop	 edi
  0024e	5e		 pop	 esi
  0024f	33 cd		 xor	 ecx, ebp
  00251	5b		 pop	 ebx
  00252	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00257	8b e5		 mov	 esp, ebp
  00259	5d		 pop	 ebp
  0025a	c2 04 00	 ret	 4
?BlessPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::BlessPotionChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0DF@MJBBEIMO@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ ; `string'
PUBLIC	??_C@_0DI@OKLEBBAL@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ ; `string'
PUBLIC	??_C@_0CA@GHNNBMIL@?$FLSoulPotionMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0O@KAEODMHN@SoulPotionMix?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SoulPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::SoulPotionChaosMix
;	COMDAT ??_C@_0DF@MJBBEIMO@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
CONST	SEGMENT
??_C@_0DF@MJBBEIMO@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ DB '['
	DB	'SoulPotionMix] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OKLEBBAL@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
CONST	SEGMENT
??_C@_0DI@OKLEBBAL@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ DB '['
	DB	'SoulPotionMix] [%s][%s] CBMix Success %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GHNNBMIL@?$FLSoulPotionMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0CA@GHNNBMIL@?$FLSoulPotionMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Sou'
	DB	'lPotionMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KAEODMHN@SoulPotionMix?$AA@
CONST	SEGMENT
??_C@_0O@KAEODMHN@SoulPotionMix?$AA@ DB 'SoulPotionMix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SoulPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
_iInvalidItemCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SoulPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::SoulPotionChaosMix, COMDAT
; _this$ = ecx

; 2817 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 2818 : 	lpObj->ChaosLock = TRUE;
; 2819 : 	int iSoulGemCount = 0;
; 2820 : 	int iChaosMoney = 0;
; 2821 : 	int iInvalidItemCount = 0;
; 2822 : 
; 2823 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2824 : 
; 2825 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	33 ff		 xor	 edi, edi
  00022	50		 push	 eax
  00023	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	33 db		 xor	 ebx, ebx
  00032	89 7d e8	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  00035	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2826 : 	pMsg.Result = CB_ERROR;

  0003d	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
$LL14@SoulPotion:

; 2829 : 	{
; 2830 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00040	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00046	03 cf		 add	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 18		 jne	 SHORT $LN13@SoulPotion

; 2831 : 		{
; 2832 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  00052	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00058	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  0005d	66 39 54 39 06	 cmp	 WORD PTR [ecx+edi+6], dx
  00062	75 03		 jne	 SHORT $LN10@SoulPotion

; 2833 : 			{
; 2834 : 				iSoulGemCount++;

  00064	43		 inc	 ebx

; 2835 : 			}
; 2836 : 			else

  00065	eb 03		 jmp	 SHORT $LN13@SoulPotion
$LN10@SoulPotion:

; 2837 : 			{
; 2838 : 				iInvalidItemCount++;

  00067	ff 45 e8	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN13@SoulPotion:

; 2827 : 
; 2828 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0006a	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00070	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00076	7c c8		 jl	 SHORT $LL14@SoulPotion

; 2839 : 			}
; 2840 : 		}
; 2841 : 	}
; 2842 : 
; 2843 : 	if ( iSoulGemCount == 0 )

  00078	85 db		 test	 ebx, ebx
  0007a	0f 84 ca 01 00
	00		 je	 $LN1@SoulPotion

; 2844 : 		return;
; 2845 : 
; 2846 : 	if ( iInvalidItemCount > 0 )

  00080	83 7d e8 00	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], 0
  00084	0f 8f c0 01 00
	00		 jg	 $LN1@SoulPotion

; 2847 : 		return;
; 2848 : 
; 2849 : 	if ( iSoulGemCount > 25 )

  0008a	83 fb 19	 cmp	 ebx, 25			; 00000019H
  0008d	7e 31		 jle	 SHORT $LN6@SoulPotion

; 2850 : 	{
; 2851 : 		MsgOutput(lpObj->m_Index, lMsg.Get(MSGGET(6,201)));

  0008f	68 c9 06 00 00	 push	 1737			; 000006c9H
  00094	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00099	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0009e	50		 push	 eax
  0009f	8b 06		 mov	 eax, DWORD PTR [esi]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 2852 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000a7	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  000ab	8b 06		 mov	 eax, DWORD PTR [esi]
  000ad	51		 push	 ecx
  000ae	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  000b1	52		 push	 edx
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000b8	83 c4 14	 add	 esp, 20			; 00000014H

; 2853 : 		lpObj->ChaosLock = FALSE;
; 2854 : 
; 2855 : 		return;

  000bb	e9 80 01 00 00	 jmp	 $LN19@SoulPotion
$LN6@SoulPotion:

; 2856 : 	}
; 2857 : 
; 2858 : 	LogChaosItem(lpObj, "SoulPotionMix");

  000c0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KAEODMHN@SoulPotionMix?$AA@
  000c8	56		 push	 esi
  000c9	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2859 : 	LogAddTD("[SoulPotionMix] Chaos Mix Start");

  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GHNNBMIL@?$FLSoulPotionMix?$FN?5Chaos?5Mix?5Start?$AA@
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2860 : 	lpObj->ChaosSuccessRate = 100;
; 2861 : 
; 2862 : 	int nChaosNeedMoney = 50000;
; 2863 : 
; 2864 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  000d9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000db	83 c4 04	 add	 esp, 4
  000de	51		 push	 ecx
  000df	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000e4	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H
  000ee	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  000f3	6a 00		 push	 0
  000f5	99		 cdq
  000f6	68 50 c3 00 00	 push	 50000			; 0000c350H
  000fb	52		 push	 edx
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 __allmul
  00102	6a 00		 push	 0
  00104	6a 64		 push	 100			; 00000064H
  00106	52		 push	 edx
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 __alldiv

; 2865 : 
; 2866 : 	if ( iChaosTaxMoney < 0 )

  0010d	85 c0		 test	 eax, eax
  0010f	79 02		 jns	 SHORT $LN5@SoulPotion

; 2867 : 	{
; 2868 : 		iChaosTaxMoney = 0;

  00111	33 c0		 xor	 eax, eax
$LN5@SoulPotion:

; 2869 : 	}
; 2870 : 
; 2871 : 	nChaosNeedMoney += iChaosTaxMoney;

  00113	8d b8 50 c3 00
	00		 lea	 edi, DWORD PTR [eax+50000]

; 2872 : 
; 2873 : 	if ( nChaosNeedMoney < 0 )

  00119	85 ff		 test	 edi, edi
  0011b	79 02		 jns	 SHORT $LN4@SoulPotion

; 2874 : 	{
; 2875 : 		nChaosNeedMoney = 0;

  0011d	33 ff		 xor	 edi, edi
$LN4@SoulPotion:

; 2876 : 	}
; 2877 : 
; 2878 : 	if ( lpObj->Money < nChaosNeedMoney )

  0011f	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00125	3b cf		 cmp	 ecx, edi
  00127	7d 1d		 jge	 SHORT $LN3@SoulPotion

; 2879 : 	{
; 2880 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 2881 : 		
; 2882 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00129	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  0012d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0012f	52		 push	 edx
  00130	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00133	50		 push	 eax
  00134	51		 push	 ecx
  00135	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00139	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2883 : 		lpObj->ChaosLock = FALSE;
; 2884 : 
; 2885 : 		return;

  00141	e9 fa 00 00 00	 jmp	 $LN19@SoulPotion
$LN3@SoulPotion:

; 2886 : 	}
; 2887 : 
; 2888 : 	lpObj->Money -= nChaosNeedMoney;

  00146	2b cf		 sub	 ecx, edi
  00148	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 2889 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0014e	50		 push	 eax
  0014f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00154	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 2890 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00159	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0015f	8b 06		 mov	 eax, DWORD PTR [esi]
  00161	52		 push	 edx
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00168	83 c4 08	 add	 esp, 8

; 2891 : 
; 2892 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  0016b	e8 00 00 00 00	 call	 _rand
  00170	99		 cdq
  00171	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00176	f7 f9		 idiv	 ecx
  00178	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0017e	7d 79		 jge	 SHORT $LN2@SoulPotion

; 2893 : 	{
; 2894 : 		int ItemNum = ITEMGET(14,7);
; 2895 : 		int Level = 1;
; 2896 : 		int Dur = iSoulGemCount * 10;
; 2897 : 
; 2898 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ItemNum, Level, Dur, 0, 0, 0, -1, 0, 0);

  00180	6a 00		 push	 0
  00182	6a 00		 push	 0
  00184	6a 00		 push	 0
  00186	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00188	6a 00		 push	 0
  0018a	6a ff		 push	 -1
  0018c	8a d3		 mov	 dl, bl
  0018e	6a 00		 push	 0
  00190	02 d2		 add	 dl, dl
  00192	6a 00		 push	 0
  00194	02 d2		 add	 dl, dl
  00196	02 da		 add	 bl, dl
  00198	6a 00		 push	 0
  0019a	02 db		 add	 bl, bl
  0019c	0f b6 c3	 movzx	 eax, bl
  0019f	50		 push	 eax
  001a0	6a 01		 push	 1
  001a2	68 07 1c 00 00	 push	 7175			; 00001c07H
  001a7	6a 00		 push	 0
  001a9	6a 00		 push	 0
  001ab	68 ff 00 00 00	 push	 255			; 000000ffH
  001b0	51		 push	 ecx
  001b1	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 2899 : 		::gObjInventoryCommit(lpObj->m_Index);

  001b6	8b 16		 mov	 edx, DWORD PTR [esi]
  001b8	52		 push	 edx
  001b9	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 2900 : #if( __4GAMERS__ == 1 )
; 2901 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2902 : #endif
; 2903 : 		LogAddTD("[SoulPotionMix] [%s][%s] CBMix Success %d Money : %d-%d",
; 2904 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 2905 : 			lpObj->Money, nChaosNeedMoney);

  001be	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  001c4	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  001ca	83 c4 40	 add	 esp, 64			; 00000040H
  001cd	57		 push	 edi
  001ce	50		 push	 eax
  001cf	51		 push	 ecx
  001d0	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  001d3	52		 push	 edx
  001d4	83 c6 52	 add	 esi, 82			; 00000052H
  001d7	56		 push	 esi
  001d8	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OKLEBBAL@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
  001dd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001e3	83 c4 18	 add	 esp, 24			; 00000018H
  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	5b		 pop	 ebx

; 2921 : 	}
; 2922 : }

  001e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ec	33 cd		 xor	 ecx, ebp
  001ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f3	8b e5		 mov	 esp, ebp
  001f5	5d		 pop	 ebp
  001f6	c2 04 00	 ret	 4
$LN2@SoulPotion:

; 2906 : 	}
; 2907 : 	else
; 2908 : 	{
; 2909 : #if( __4GAMERS__ == 1 )
; 2910 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2911 : #endif
; 2912 : 		ChaosBoxInit(lpObj);

  001f9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001fc	56		 push	 esi
  001fd	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2913 : 		::GCUserChaosBoxSend(lpObj, 1);

  00202	6a 01		 push	 1
  00204	56		 push	 esi
  00205	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2914 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0020a	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0020e	8b 16		 mov	 edx, DWORD PTR [esi]
  00210	50		 push	 eax
  00211	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00214	51		 push	 ecx
  00215	52		 push	 edx
  00216	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2915 : 
; 2916 : 		LogAddTD("[SoulPotionMix] [%s][%s] CBMix Fail %d Money : %d-%d",
; 2917 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 2918 : 			lpObj->Money, nChaosNeedMoney);

  0021b	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00221	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00227	57		 push	 edi
  00228	50		 push	 eax
  00229	51		 push	 ecx
  0022a	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  0022d	52		 push	 edx
  0022e	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00231	50		 push	 eax
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@MJBBEIMO@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
  00237	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0023d	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN19@SoulPotion:

; 2919 : 
; 2920 : 		lpObj->ChaosLock = FALSE;

  00240	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN1@SoulPotion:

; 2921 : 	}
; 2922 : }

  0024a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024d	5f		 pop	 edi
  0024e	5e		 pop	 esi
  0024f	33 cd		 xor	 ecx, ebp
  00251	5b		 pop	 ebx
  00252	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00257	8b e5		 mov	 esp, ebp
  00259	5d		 pop	 ebp
  0025a	c2 04 00	 ret	 4
?SoulPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::SoulPotionChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0DE@PMLDDIAP@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@ ; `string'
PUBLIC	??_C@_0DH@GNDOFGHL@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@ ; `string'
PUBLIC	??_C@_0BP@OKAOMBJE@?$FLLifeStoneMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0N@FJGBJPII@LifeStoneMix?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LifeStoneChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LifeStoneChaosMix
;	COMDAT ??_C@_0DE@PMLDDIAP@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@
CONST	SEGMENT
??_C@_0DE@PMLDDIAP@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@ DB '['
	DB	'LifeStoneMix] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GNDOFGHL@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@
CONST	SEGMENT
??_C@_0DH@GNDOFGHL@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@ DB '['
	DB	'LifeStoneMix] [%s][%s] CBMix Success %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OKAOMBJE@?$FLLifeStoneMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BP@OKAOMBJE@?$FLLifeStoneMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Life'
	DB	'StoneMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FJGBJPII@LifeStoneMix?$AA@
CONST	SEGMENT
??_C@_0N@FJGBJPII@LifeStoneMix?$AA@ DB 'LifeStoneMix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LifeStoneChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
_iBlessGemCount$ = -36					; size = 4
_iSoulGemCount$ = -32					; size = 4
_iInvalidItemCount$ = -28				; size = 4
_iProtectionGemCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?LifeStoneChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::LifeStoneChaosMix, COMDAT
; _this$ = ecx

; 2929 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 2930 : 	lpObj->ChaosLock = TRUE;
; 2931 : 	int iChoasGemCount = 0;
; 2932 : 	int iBlessGemCount = 0;
; 2933 : 	int iSoulGemCount = 0;
; 2934 : 	int iProtectionGemCount = 0;
; 2935 : 	int iInvalidItemCount = 0;
; 2936 : 	int iChaosMoney = 0;
; 2937 : 
; 2938 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2939 : 
; 2940 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	33 ff		 xor	 edi, edi
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	33 db		 xor	 ebx, ebx
  00032	89 7d dc	 mov	 DWORD PTR _iBlessGemCount$[ebp], edi
  00035	89 7d e0	 mov	 DWORD PTR _iSoulGemCount$[ebp], edi
  00038	89 7d e8	 mov	 DWORD PTR _iProtectionGemCount$[ebp], edi
  0003b	89 7d e4	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  0003e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2941 : 	pMsg.Result = CB_ERROR;

  00046	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL19@LifeStoneC:

; 2945 : 	{
; 2946 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	b9 01 00 00 00	 mov	 ecx, 1
  00062	3b c1		 cmp	 eax, ecx
  00064	75 49		 jne	 SHORT $LN18@LifeStoneC

; 2947 : 		{
; 2948 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  00066	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  0006c	0f b7 44 3a 06	 movzx	 eax, WORD PTR [edx+edi+6]
  00071	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  00076	66 3b c2	 cmp	 ax, dx
  00079	75 05		 jne	 SHORT $LN15@LifeStoneC

; 2949 : 			{
; 2950 : 				iBlessGemCount++;

  0007b	01 4d dc	 add	 DWORD PTR _iBlessGemCount$[ebp], ecx
  0007e	eb 2f		 jmp	 SHORT $LN18@LifeStoneC
$LN15@LifeStoneC:

; 2951 : 			}
; 2952 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  00080	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  00085	66 3b c2	 cmp	 ax, dx
  00088	75 05		 jne	 SHORT $LN13@LifeStoneC

; 2953 : 			{
; 2954 : 				iSoulGemCount++;

  0008a	01 4d e0	 add	 DWORD PTR _iSoulGemCount$[ebp], ecx
  0008d	eb 20		 jmp	 SHORT $LN18@LifeStoneC
$LN13@LifeStoneC:

; 2955 : 			}
; 2956 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,31) )	// Guardian Jewel

  0008f	ba 1f 1c 00 00	 mov	 edx, 7199		; 00001c1fH
  00094	66 3b c2	 cmp	 ax, dx
  00097	75 05		 jne	 SHORT $LN11@LifeStoneC

; 2957 : 			{
; 2958 : 				iProtectionGemCount++;

  00099	01 4d e8	 add	 DWORD PTR _iProtectionGemCount$[ebp], ecx
  0009c	eb 11		 jmp	 SHORT $LN18@LifeStoneC
$LN11@LifeStoneC:

; 2959 : 			}
; 2960 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )	// Habla pe super CHOAS

  0009e	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  000a3	66 3b c2	 cmp	 ax, dx
  000a6	75 04		 jne	 SHORT $LN9@LifeStoneC

; 2961 : 			{
; 2962 : 				iChoasGemCount++;

  000a8	03 d9		 add	 ebx, ecx

; 2963 : 			}
; 2964 : 			else 

  000aa	eb 03		 jmp	 SHORT $LN18@LifeStoneC
$LN9@LifeStoneC:

; 2965 : 			{
; 2966 : 				iInvalidItemCount++;

  000ac	01 4d e4	 add	 DWORD PTR _iInvalidItemCount$[ebp], ecx
$LN18@LifeStoneC:

; 2942 : 
; 2943 : 
; 2944 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000af	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000b5	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000bb	7c 93		 jl	 SHORT $LL19@LifeStoneC

; 2967 : 			}
; 2968 : 		}
; 2969 : 	}
; 2970 : 
; 2971 : 	if ( iChoasGemCount != 1 || iBlessGemCount != 5 || iSoulGemCount != 5 || iProtectionGemCount != 1 || iInvalidItemCount > 0 )

  000bd	3b d9		 cmp	 ebx, ecx
  000bf	0f 85 99 01 00
	00		 jne	 $LN24@LifeStoneC
  000c5	b8 05 00 00 00	 mov	 eax, 5
  000ca	39 45 dc	 cmp	 DWORD PTR _iBlessGemCount$[ebp], eax
  000cd	0f 85 8b 01 00
	00		 jne	 $LN24@LifeStoneC
  000d3	39 45 e0	 cmp	 DWORD PTR _iSoulGemCount$[ebp], eax
  000d6	0f 85 82 01 00
	00		 jne	 $LN24@LifeStoneC
  000dc	39 4d e8	 cmp	 DWORD PTR _iProtectionGemCount$[ebp], ecx
  000df	0f 85 79 01 00
	00		 jne	 $LN24@LifeStoneC
  000e5	83 7d e4 00	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], 0
  000e9	0f 8f 6f 01 00
	00		 jg	 $LN24@LifeStoneC

; 2974 : 		lpObj->ChaosLock = FALSE;
; 2975 : 
; 2976 : 		return;
; 2977 : 	}
; 2978 : 
; 2979 : 	LogChaosItem(lpObj, "LifeStoneMix");

  000ef	8b 5d d8	 mov	 ebx, DWORD PTR _this$[ebp]
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FJGBJPII@LifeStoneMix?$AA@
  000f7	56		 push	 esi
  000f8	8b cb		 mov	 ecx, ebx
  000fa	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2980 : 	LogAddTD("[LifeStoneMix] Chaos Mix Start");

  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OKAOMBJE@?$FLLifeStoneMix?$FN?5Chaos?5Mix?5Start?$AA@
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2981 : 	lpObj->ChaosSuccessRate = 100;
; 2982 : 
; 2983 : 	int nChaosNeedMoney = 5000000;
; 2984 : 
; 2985 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  0010a	8b 06		 mov	 eax, DWORD PTR [esi]
  0010c	83 c4 04	 add	 esp, 4
  0010f	50		 push	 eax
  00110	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00115	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H
  0011f	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00124	6a 00		 push	 0
  00126	99		 cdq
  00127	68 40 4b 4c 00	 push	 5000000			; 004c4b40H
  0012c	52		 push	 edx
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 __allmul
  00133	6a 00		 push	 0
  00135	6a 64		 push	 100			; 00000064H
  00137	52		 push	 edx
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 __alldiv

; 2986 : 
; 2987 : 	if ( iChaosTaxMoney < 0 )

  0013e	85 c0		 test	 eax, eax
  00140	79 02		 jns	 SHORT $LN5@LifeStoneC

; 2988 : 	{
; 2989 : 		iChaosTaxMoney = 0;

  00142	33 c0		 xor	 eax, eax
$LN5@LifeStoneC:

; 2990 : 	}
; 2991 : 
; 2992 : 	nChaosNeedMoney += iChaosTaxMoney;

  00144	8d b8 40 4b 4c
	00		 lea	 edi, DWORD PTR [eax+5000000]

; 2993 : 
; 2994 : 	if ( nChaosNeedMoney < 0 )

  0014a	85 ff		 test	 edi, edi
  0014c	79 02		 jns	 SHORT $LN4@LifeStoneC

; 2995 : 	{
; 2996 : 		nChaosNeedMoney = 0;

  0014e	33 ff		 xor	 edi, edi
$LN4@LifeStoneC:

; 2997 : 	}
; 2998 : 
; 2999 : 	if ( lpObj->Money < nChaosNeedMoney )

  00150	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00156	3b cf		 cmp	 ecx, edi
  00158	7d 15		 jge	 SHORT $LN3@LifeStoneC

; 3000 : 	{
; 3001 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 3002 : 		
; 3003 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  0015a	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0015e	8b 06		 mov	 eax, DWORD PTR [esi]
  00160	51		 push	 ecx
  00161	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00164	52		 push	 edx
  00165	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00169	50		 push	 eax

; 3004 : 		lpObj->ChaosLock = FALSE;
; 3005 : 
; 3006 : 		return;

  0016a	e9 fb 00 00 00	 jmp	 $LN25@LifeStoneC
$LN3@LifeStoneC:

; 3007 : 	}
; 3008 : 
; 3009 : 	lpObj->Money -= nChaosNeedMoney;

  0016f	2b cf		 sub	 ecx, edi
  00171	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 3010 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00177	50		 push	 eax
  00178	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0017d	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3011 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00182	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00188	8b 16		 mov	 edx, DWORD PTR [esi]
  0018a	51		 push	 ecx
  0018b	52		 push	 edx
  0018c	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00191	83 c4 08	 add	 esp, 8

; 3012 : 
; 3013 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00194	e8 00 00 00 00	 call	 _rand
  00199	99		 cdq
  0019a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0019f	f7 f9		 idiv	 ecx
  001a1	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001a7	7d 6d		 jge	 SHORT $LN2@LifeStoneC

; 3014 : 	{
; 3015 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ITEMGET(13,11) , 1, 0, 0, 0, 0, -1, 0, 0);

  001a9	6a 00		 push	 0
  001ab	6a 00		 push	 0
  001ad	6a 00		 push	 0
  001af	8b 16		 mov	 edx, DWORD PTR [esi]
  001b1	6a 00		 push	 0
  001b3	6a ff		 push	 -1
  001b5	6a 00		 push	 0
  001b7	6a 00		 push	 0
  001b9	6a 00		 push	 0
  001bb	6a 00		 push	 0
  001bd	6a 01		 push	 1
  001bf	68 0b 1a 00 00	 push	 6667			; 00001a0bH
  001c4	6a 00		 push	 0
  001c6	6a 00		 push	 0
  001c8	68 ff 00 00 00	 push	 255			; 000000ffH
  001cd	52		 push	 edx
  001ce	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3016 : 		::gObjInventoryCommit(lpObj->m_Index);

  001d3	8b 06		 mov	 eax, DWORD PTR [esi]
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 3017 : #if( __4GAMERS__ == 1 )
; 3018 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3019 : #endif
; 3020 : 		LogAddTD("[LifeStoneMix] [%s][%s] CBMix Success %d Money : %d-%d",
; 3021 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 3022 : 			lpObj->Money, nChaosNeedMoney);

  001db	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  001e1	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  001e7	83 c4 40	 add	 esp, 64			; 00000040H
  001ea	57		 push	 edi
  001eb	51		 push	 ecx
  001ec	52		 push	 edx
  001ed	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001f0	50		 push	 eax
  001f1	83 c6 52	 add	 esi, 82			; 00000052H
  001f4	56		 push	 esi
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@GNDOFGHL@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00200	83 c4 18	 add	 esp, 24			; 00000018H
  00203	5f		 pop	 edi
  00204	5e		 pop	 esi
  00205	5b		 pop	 ebx

; 3038 : 	}
; 3039 : }

  00206	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00209	33 cd		 xor	 ecx, ebp
  0020b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c2 04 00	 ret	 4
$LN2@LifeStoneC:

; 3023 : 	}
; 3024 : 	else
; 3025 : 	{
; 3026 : #if( __4GAMERS__ == 1 )
; 3027 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3028 : #endif
; 3029 : 		ChaosBoxInit(lpObj);

  00216	56		 push	 esi
  00217	8b cb		 mov	 ecx, ebx
  00219	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3030 : 		::GCUserChaosBoxSend(lpObj, 1);

  0021e	6a 01		 push	 1
  00220	56		 push	 esi
  00221	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3031 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00226	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0022a	8b 06		 mov	 eax, DWORD PTR [esi]
  0022c	51		 push	 ecx
  0022d	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00230	52		 push	 edx
  00231	50		 push	 eax
  00232	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3032 : 
; 3033 : 		LogAddTD("[LifeStoneMix] [%s][%s] CBMix Fail %d Money : %d-%d",
; 3034 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 3035 : 			lpObj->Money, nChaosNeedMoney);

  00237	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0023d	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00243	57		 push	 edi
  00244	51		 push	 ecx
  00245	52		 push	 edx
  00246	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00249	50		 push	 eax
  0024a	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  0024d	51		 push	 ecx
  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@PMLDDIAP@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@
  00253	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00259	83 c4 2c	 add	 esp, 44			; 0000002cH

; 3036 : 
; 3037 : 		lpObj->ChaosLock = FALSE;

  0025c	eb 14		 jmp	 SHORT $LN26@LifeStoneC
$LN24@LifeStoneC:

; 2972 : 	{
; 2973 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0025e	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00262	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00264	52		 push	 edx
  00265	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00268	50		 push	 eax
  00269	51		 push	 ecx
$LN25@LifeStoneC:
  0026a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0026f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN26@LifeStoneC:

; 3038 : 	}
; 3039 : }

  00272	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00275	5f		 pop	 edi
  00276	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00280	5e		 pop	 esi
  00281	33 cd		 xor	 ecx, ebp
  00283	5b		 pop	 ebx
  00284	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00289	8b e5		 mov	 esp, ebp
  0028b	5d		 pop	 ebp
  0028c	c2 04 00	 ret	 4
?LifeStoneChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::LifeStoneChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0DH@JBMEKCLH@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0FB@PDPGCOFM@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0DN@CFIDABAI@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0DE@FILNLJPO@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0BH@FJMEBBCF@Hidden?5TreasureBox?5Mix?$AA@ ; `string'
PUBLIC	??_C@_0DE@OHGHLCDC@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?HiddenTreasureBoxItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::HiddenTreasureBoxItemMix
;	COMDAT ??_C@_0DH@JBMEKCLH@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DH@JBMEKCLH@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Hidden TreasureBox Event] [%s][%s] CBMix Fail Rate:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@PDPGCOFM@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0FB@PDPGCOFM@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Hidden TreasureBox Event] [%s][%s] CBMix Failed - iCrystalMix'
	DB	'Type is wrong : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@CFIDABAI@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DN@CFIDABAI@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Hidden TreasureBox Event] [%s][%s] CBMix Success:%d Type:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FILNLJPO@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DE@FILNLJPO@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Hidden TreasureBox Event] [%s][%s] Chaos Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FJMEBBCF@Hidden?5TreasureBox?5Mix?$AA@
CONST	SEGMENT
??_C@_0BH@FJMEBBCF@Hidden?5TreasureBox?5Mix?$AA@ DB 'Hidden TreasureBox M'
	DB	'ix', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@OHGHLCDC@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DE@OHGHLCDC@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Hidden TreasureBox Event] [%s][%s] Item Mix Failed', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?HiddenTreasureBoxItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
_iInvalidItemCount$ = -40				; size = 4
_iRedCrystal$ = -36					; size = 4
tv329 = -32						; size = 4
_iBlueCrystal$ = -32					; size = 4
_iBlackCrystal$ = -28					; size = 4
_iCrystalMixType$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?HiddenTreasureBoxItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::HiddenTreasureBoxItemMix, COMDAT
; _this$ = ecx

; 3047 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 3048 : 	lpObj->ChaosLock = TRUE;
; 3049 : 	int iBlueCrystal = 0;
; 3050 : 	int iRedCrystal = 0;
; 3051 : 	int iBlackCrystal = 0;
; 3052 : 	int iInvalidItemCount = 0;
; 3053 : 	int iChaosMoney = 0;
; 3054 : 
; 3055 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3056 : 
; 3057 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	33 ff		 xor	 edi, edi
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	bb 01 00 00 00	 mov	 ebx, 1
  00027	50		 push	 eax
  00028	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	89 9e 20 12 00
	00		 mov	 DWORD PTR [esi+4640], ebx
  00031	89 7d e0	 mov	 DWORD PTR _iBlueCrystal$[ebp], edi
  00034	89 7d dc	 mov	 DWORD PTR _iRedCrystal$[ebp], edi
  00037	89 7d e4	 mov	 DWORD PTR _iBlackCrystal$[ebp], edi
  0003a	89 7d d8	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  0003d	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3058 : 	pMsg.Result = CB_ERROR;

  00045	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL31@HiddenTrea:

; 3062 : 	{
; 3063 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	3b c3		 cmp	 eax, ebx
  0005f	75 35		 jne	 SHORT $LN30@HiddenTrea

; 3064 : 		{
; 3065 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,26) )

  00061	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00067	ba 1a 18 00 00	 mov	 edx, 6170		; 0000181aH
  0006c	66 39 54 38 06	 cmp	 WORD PTR [eax+edi+6], dx
  00071	75 20		 jne	 SHORT $LN27@HiddenTrea

; 3066 : 			{
; 3067 : 				switch ( lpObj->pChaosBox[n].m_Level )

  00073	0f bf 44 38 08	 movsx	 eax, WORD PTR [eax+edi+8]
  00078	2b c3		 sub	 eax, ebx
  0007a	74 12		 je	 SHORT $LN24@HiddenTrea
  0007c	2b c3		 sub	 eax, ebx
  0007e	74 09		 je	 SHORT $LN23@HiddenTrea
  00080	2b c3		 sub	 eax, ebx
  00082	75 12		 jne	 SHORT $LN30@HiddenTrea

; 3075 : 					case 3:
; 3076 : 						iBlackCrystal++;

  00084	01 5d e4	 add	 DWORD PTR _iBlackCrystal$[ebp], ebx

; 3077 : 						break;

  00087	eb 0d		 jmp	 SHORT $LN30@HiddenTrea
$LN23@HiddenTrea:

; 3071 : 						break;
; 3072 : 					case 2:
; 3073 : 						iBlueCrystal++;

  00089	01 5d e0	 add	 DWORD PTR _iBlueCrystal$[ebp], ebx

; 3074 : 						break;

  0008c	eb 08		 jmp	 SHORT $LN30@HiddenTrea
$LN24@HiddenTrea:

; 3068 : 				{
; 3069 : 					case 1:
; 3070 : 						iRedCrystal++;

  0008e	01 5d dc	 add	 DWORD PTR _iRedCrystal$[ebp], ebx

; 3078 : 				}
; 3079 : 			}
; 3080 : 			else

  00091	eb 03		 jmp	 SHORT $LN30@HiddenTrea
$LN27@HiddenTrea:

; 3081 : 			{
; 3082 : 				iInvalidItemCount++;

  00093	01 5d d8	 add	 DWORD PTR _iInvalidItemCount$[ebp], ebx
$LN30@HiddenTrea:

; 3059 : 
; 3060 : 
; 3061 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00096	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0009c	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000a2	7c ac		 jl	 SHORT $LL31@HiddenTrea

; 3083 : 			}
; 3084 : 		}
; 3085 : 	}
; 3086 : 
; 3087 : 	int iCrystalMixType = -1;
; 3088 : 
; 3089 : 	if ( iInvalidItemCount == 0 )

  000a4	33 ff		 xor	 edi, edi
  000a6	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _iCrystalMixType$[ebp], -1
  000ad	39 7d d8	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], edi
  000b0	0f 85 4d 02 00
	00		 jne	 $LN20@HiddenTrea

; 3090 : 	{
; 3091 : 		if ( iBlueCrystal == 7 )

  000b6	8b 45 e0	 mov	 eax, DWORD PTR _iBlueCrystal$[ebp]
  000b9	83 f8 07	 cmp	 eax, 7
  000bc	75 24		 jne	 SHORT $LN19@HiddenTrea

; 3092 : 		{
; 3093 : 			if ( iRedCrystal == 0 && iBlackCrystal == 0 )

  000be	39 7d dc	 cmp	 DWORD PTR _iRedCrystal$[ebp], edi
  000c1	0f 85 ae 00 00
	00		 jne	 $LN9@HiddenTrea
  000c7	39 7d e4	 cmp	 DWORD PTR _iBlackCrystal$[ebp], edi
  000ca	0f 85 a5 00 00
	00		 jne	 $LN9@HiddenTrea

; 3094 : 			{
; 3095 : 				iCrystalMixType = 0;

  000d0	89 7d e8	 mov	 DWORD PTR _iCrystalMixType$[ebp], edi

; 3096 : 				lpObj->ChaosSuccessRate = 100;

  000d3	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 3097 : 			}
; 3098 : 		}

  000dd	e9 93 00 00 00	 jmp	 $LN9@HiddenTrea
$LN19@HiddenTrea:

; 3099 : 		else if ( iRedCrystal == 5 )

  000e2	8b 4d dc	 mov	 ecx, DWORD PTR _iRedCrystal$[ebp]
  000e5	83 f9 05	 cmp	 ecx, 5
  000e8	75 1c		 jne	 SHORT $LN16@HiddenTrea

; 3100 : 		{
; 3101 : 			if ( iBlueCrystal == 0 && iBlackCrystal == 0 )

  000ea	3b c7		 cmp	 eax, edi
  000ec	0f 85 83 00 00
	00		 jne	 $LN9@HiddenTrea
  000f2	39 7d e4	 cmp	 DWORD PTR _iBlackCrystal$[ebp], edi
  000f5	75 7e		 jne	 SHORT $LN9@HiddenTrea

; 3102 : 			{
; 3103 : 				iCrystalMixType = 1;

  000f7	89 5d e8	 mov	 DWORD PTR _iCrystalMixType$[ebp], ebx

; 3104 : 				lpObj->ChaosSuccessRate = 100;

  000fa	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 3105 : 			}
; 3106 : 		}

  00104	eb 6f		 jmp	 SHORT $LN9@HiddenTrea
$LN16@HiddenTrea:

; 3107 : 		else if ( iBlackCrystal == 3 )

  00106	8b 55 e4	 mov	 edx, DWORD PTR _iBlackCrystal$[ebp]
  00109	83 fa 03	 cmp	 edx, 3
  0010c	75 1b		 jne	 SHORT $LN13@HiddenTrea

; 3108 : 		{
; 3109 : 			if ( iRedCrystal == 0 && iBlueCrystal == 0 )

  0010e	3b cf		 cmp	 ecx, edi
  00110	75 63		 jne	 SHORT $LN9@HiddenTrea
  00112	3b c7		 cmp	 eax, edi
  00114	75 5f		 jne	 SHORT $LN9@HiddenTrea

; 3110 : 			{
; 3111 : 				iCrystalMixType = 2;

  00116	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _iCrystalMixType$[ebp], 2

; 3112 : 				lpObj->ChaosSuccessRate = 100;

  0011d	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 3113 : 			}
; 3114 : 		}

  00127	eb 4c		 jmp	 SHORT $LN9@HiddenTrea
$LN13@HiddenTrea:

; 3115 : 		else if ( iBlueCrystal == 1 && iRedCrystal == 1 && iBlackCrystal == 1 )

  00129	3b c3		 cmp	 eax, ebx
  0012b	75 1b		 jne	 SHORT $LN10@HiddenTrea
  0012d	3b cb		 cmp	 ecx, ebx
  0012f	75 17		 jne	 SHORT $LN10@HiddenTrea
  00131	3b d3		 cmp	 edx, ebx
  00133	75 13		 jne	 SHORT $LN10@HiddenTrea

; 3116 : 		{
; 3117 : 			{
; 3118 : 				iCrystalMixType = 3;

  00135	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _iCrystalMixType$[ebp], 3

; 3119 : 				lpObj->ChaosSuccessRate = 100;

  0013c	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 3120 : 			}
; 3121 : 		}
; 3122 : 		else

  00146	eb 2d		 jmp	 SHORT $LN9@HiddenTrea
$LN10@HiddenTrea:

; 3123 : 		{
; 3124 : 			LogAddTD("[Hidden TreasureBox Event] [%s][%s] Item Mix Failed",
; 3125 : 				lpObj->AccountID, lpObj->Name);

  00148	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0014b	50		 push	 eax
  0014c	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  0014f	51		 push	 ecx
  00150	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OHGHLCDC@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3126 : 		
; 3127 : 			DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0015b	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  0015f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00161	52		 push	 edx
  00162	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00165	50		 push	 eax
  00166	51		 push	 ecx
  00167	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0016c	83 c4 18	 add	 esp, 24			; 00000018H

; 3128 : 			lpObj->ChaosLock = FALSE;

  0016f	89 be 20 12 00
	00		 mov	 DWORD PTR [esi+4640], edi
$LN9@HiddenTrea:

; 3137 : 		lpObj->ChaosLock = FALSE;
; 3138 : 
; 3139 : 		return;
; 3140 : 	}
; 3141 : 
; 3142 : 
; 3143 : 	LogChaosItem(lpObj, "Hidden TreasureBox Mix");

  00175	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FJMEBBCF@Hidden?5TreasureBox?5Mix?$AA@
  0017d	56		 push	 esi
  0017e	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3144 : 	LogAddTD("[Hidden TreasureBox Event] [%s][%s] Chaos Mix Start",
; 3145 : 		lpObj->AccountID, lpObj->Name);

  00183	8d 7e 5d	 lea	 edi, DWORD PTR [esi+93]
  00186	57		 push	 edi
  00187	8d 5e 52	 lea	 ebx, DWORD PTR [esi+82]
  0018a	53		 push	 ebx
  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@FILNLJPO@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3146 : 
; 3147 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00196	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  0019c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019f	89 55 e0	 mov	 DWORD PTR tv329[ebp], edx
  001a2	e8 00 00 00 00	 call	 _rand
  001a7	99		 cdq
  001a8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001ad	f7 f9		 idiv	 ecx
  001af	8b 45 e0	 mov	 eax, DWORD PTR tv329[ebp]
  001b2	3b d0		 cmp	 edx, eax
  001b4	0f 8d ec 00 00
	00		 jge	 $LN7@HiddenTrea

; 3148 : 	{
; 3149 : 		switch ( iCrystalMixType )

  001ba	8b 45 e8	 mov	 eax, DWORD PTR _iCrystalMixType$[ebp]
  001bd	85 c0		 test	 eax, eax
  001bf	0f 88 a2 00 00
	00		 js	 $LN2@HiddenTrea
  001c5	83 f8 02	 cmp	 eax, 2
  001c8	7e 30		 jle	 SHORT $LN4@HiddenTrea
  001ca	83 f8 03	 cmp	 eax, 3
  001cd	0f 85 94 00 00
	00		 jne	 $LN2@HiddenTrea

; 3153 : 				break;
; 3154 : 			case 3:
; 3155 : 				ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ITEMGET(12,26) , 5, 1, 0, 0, 0, -1, 0, 0);

  001d3	6a 00		 push	 0
  001d5	6a 00		 push	 0
  001d7	6a 00		 push	 0
  001d9	8b 16		 mov	 edx, DWORD PTR [esi]
  001db	6a 00		 push	 0
  001dd	6a ff		 push	 -1
  001df	6a 00		 push	 0
  001e1	6a 00		 push	 0
  001e3	6a 00		 push	 0
  001e5	6a 01		 push	 1
  001e7	6a 05		 push	 5
  001e9	68 1a 18 00 00	 push	 6170			; 0000181aH
  001ee	6a 00		 push	 0
  001f0	6a 00		 push	 0
  001f2	68 ff 00 00 00	 push	 255			; 000000ffH
  001f7	52		 push	 edx

; 3156 : 				break;

  001f8	eb 25		 jmp	 SHORT $LN36@HiddenTrea
$LN4@HiddenTrea:

; 3150 : 		{
; 3151 : 			case 0:	case 1:	case 2:
; 3152 : 				ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ITEMGET(12,26) , 4, 1, 0, 0, 0, -1, 0, 0);

  001fa	6a 00		 push	 0
  001fc	6a 00		 push	 0
  001fe	6a 00		 push	 0
  00200	8b 06		 mov	 eax, DWORD PTR [esi]
  00202	6a 00		 push	 0
  00204	6a ff		 push	 -1
  00206	6a 00		 push	 0
  00208	6a 00		 push	 0
  0020a	6a 00		 push	 0
  0020c	6a 01		 push	 1
  0020e	6a 04		 push	 4
  00210	68 1a 18 00 00	 push	 6170			; 0000181aH
  00215	6a 00		 push	 0
  00217	6a 00		 push	 0
  00219	68 ff 00 00 00	 push	 255			; 000000ffH
  0021e	50		 push	 eax
$LN36@HiddenTrea:
  0021f	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3162 : 				return;
; 3163 : 		}
; 3164 : #if( __4GAMERS__ == 1 )
; 3165 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3166 : #endif
; 3167 : 		::gObjInventoryCommit(lpObj->m_Index);

  00224	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00226	83 c4 3c	 add	 esp, 60			; 0000003cH
  00229	51		 push	 ecx
  0022a	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 3168 : 		LogAddTD("[Hidden TreasureBox Event] [%s][%s] CBMix Success:%d Type:%d",
; 3169 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, iCrystalMixType);

  0022f	8b 55 e8	 mov	 edx, DWORD PTR _iCrystalMixType$[ebp]
  00232	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  00238	52		 push	 edx
  00239	50		 push	 eax
  0023a	57		 push	 edi
  0023b	53		 push	 ebx
  0023c	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@CFIDABAI@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00247	83 c4 18	 add	 esp, 24			; 00000018H
  0024a	5f		 pop	 edi

; 3184 : 	}
; 3185 : 
; 3186 : 	lpObj->ChaosLock = FALSE;

  0024b	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00255	5e		 pop	 esi
  00256	5b		 pop	 ebx

; 3187 : }

  00257	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025a	33 cd		 xor	 ecx, ebp
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c2 04 00	 ret	 4
$LN2@HiddenTrea:

; 3157 : 			default:
; 3158 : 				LogAddTD("[Hidden TreasureBox Event] [%s][%s] CBMix Failed - iCrystalMixType is wrong : %d",
; 3159 : 					lpObj->AccountID, lpObj->Name, iCrystalMixType);

  00267	50		 push	 eax
  00268	57		 push	 edi
  00269	53		 push	 ebx
  0026a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@PDPGCOFM@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3160 : 				DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00275	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00279	8b 06		 mov	 eax, DWORD PTR [esi]
  0027b	51		 push	 ecx
  0027c	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0027f	52		 push	 edx
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00286	83 c4 1c	 add	 esp, 28			; 0000001cH
  00289	5f		 pop	 edi

; 3161 : 				lpObj->ChaosLock = FALSE;

  0028a	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00294	5e		 pop	 esi
  00295	5b		 pop	 ebx

; 3187 : }

  00296	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00299	33 cd		 xor	 ecx, ebp
  0029b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a0	8b e5		 mov	 esp, ebp
  002a2	5d		 pop	 ebp
  002a3	c2 04 00	 ret	 4
$LN7@HiddenTrea:

; 3170 : 	}
; 3171 : 	else
; 3172 : 	{
; 3173 : #if( __4GAMERS__ == 1 )
; 3174 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3175 : #endif
; 3176 : 		LogAddTD("[Hidden TreasureBox Event] [%s][%s] CBMix Fail Rate:%d",
; 3177 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate);

  002a6	50		 push	 eax
  002a7	57		 push	 edi
  002a8	53		 push	 ebx
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@JBMEKCLH@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  002ae	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3178 : 
; 3179 : 		ChaosBoxInit(lpObj);

  002b4	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  002b7	83 c4 10	 add	 esp, 16			; 00000010H
  002ba	56		 push	 esi
  002bb	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3180 : 		::GCUserChaosBoxSend(lpObj, 1);

  002c0	6a 01		 push	 1
  002c2	56		 push	 esi
  002c3	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3181 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  002c8	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  002cc	8b 06		 mov	 eax, DWORD PTR [esi]
  002ce	51		 push	 ecx
  002cf	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  002d2	52		 push	 edx
  002d3	50		 push	 eax
  002d4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  002d9	83 c4 14	 add	 esp, 20			; 00000014H

; 3182 : 
; 3183 : 		lpObj->ChaosLock = FALSE;

  002dc	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  002e6	5f		 pop	 edi

; 3184 : 	}
; 3185 : 
; 3186 : 	lpObj->ChaosLock = FALSE;

  002e7	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  002f1	5e		 pop	 esi
  002f2	5b		 pop	 ebx

; 3187 : }

  002f3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f6	33 cd		 xor	 ecx, ebp
  002f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002fd	8b e5		 mov	 esp, ebp
  002ff	5d		 pop	 ebp
  00300	c2 04 00	 ret	 4
$LN20@HiddenTrea:

; 3129 : 		}
; 3130 : 	}
; 3131 : 	else
; 3132 : 	{
; 3133 : 		LogAddTD("[Hidden TreasureBox Event] [%s][%s] Item Mix Failed",
; 3134 : 			lpObj->AccountID, lpObj->Name);

  00303	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  00306	51		 push	 ecx
  00307	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  0030a	52		 push	 edx
  0030b	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OHGHLCDC@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  00310	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3135 : 	
; 3136 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00316	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0031a	8b 16		 mov	 edx, DWORD PTR [esi]
  0031c	50		 push	 eax
  0031d	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00320	51		 push	 ecx
  00321	52		 push	 edx
  00322	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3187 : }

  00327	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0032a	83 c4 18	 add	 esp, 24			; 00000018H
  0032d	89 be 20 12 00
	00		 mov	 DWORD PTR [esi+4640], edi
  00333	5f		 pop	 edi
  00334	5e		 pop	 esi
  00335	33 cd		 xor	 ecx, ebp
  00337	5b		 pop	 ebx
  00338	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0033d	8b e5		 mov	 esp, ebp
  0033f	5d		 pop	 ebp
  00340	c2 04 00	 ret	 4
?HiddenTreasureBoxItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::HiddenTreasureBoxItemMix
_TEXT	ENDS
PUBLIC	??_C@_0EM@IAKFEJP@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0EP@MODCEFAF@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0CH@FLCJIMPD@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5Mix@ ; `string'
PUBLIC	??_C@_0BD@FNEHOIBM@Fenrir_01Level_Mix?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Fenrir_01Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::Fenrir_01Level_Mix
EXTRN	?g_iFenrir_01Level_MixRate@@3HA:DWORD		; g_iFenrir_01Level_MixRate
;	COMDAT ??_C@_0EM@IAKFEJP@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EM@IAKFEJP@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 01] [%s][%s] CBMix Fail %d Money : %d-%d, C'
	DB	'harmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@MODCEFAF@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EP@MODCEFAF@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 01] [%s][%s] CBMix Success %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FLCJIMPD@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5Mix@
CONST	SEGMENT
??_C@_0CH@FLCJIMPD@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5Mix@ DB '['
	DB	'Fenrir Mix][Level 01] Chaos Mix Start', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FNEHOIBM@Fenrir_01Level_Mix?$AA@
CONST	SEGMENT
??_C@_0BD@FNEHOIBM@Fenrir_01Level_Mix?$AA@ DB 'Fenrir_01Level_Mix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Fenrir_01Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
_iStuffCount_01$ = -36					; size = 4
_iStuffCount_02$ = -32					; size = 4
_iInvalidItemCount$ = -28				; size = 4
_iChaosGemCount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?Fenrir_01Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::Fenrir_01Level_Mix, COMDAT
; _this$ = ecx

; 3194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 3195 : 	lpObj->ChaosLock = TRUE;
; 3196 : 	int iStuffCount_01 = 0;
; 3197 : 	int iStuffCount_02 = 0;
; 3198 : 	int iChaosGemCount = 0;
; 3199 : 	int iInvalidItemCount = 0;
; 3200 : 	int iChaosMoney = 0;
; 3201 : 	int iCharmOfLuckCount = 0;
; 3202 : 
; 3203 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3204 : 
; 3205 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	33 ff		 xor	 edi, edi
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	89 7d dc	 mov	 DWORD PTR _iStuffCount_01$[ebp], edi
  00033	89 7d e0	 mov	 DWORD PTR _iStuffCount_02$[ebp], edi
  00036	89 7d e8	 mov	 DWORD PTR _iChaosGemCount$[ebp], edi
  00039	89 7d e4	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  0003c	33 db		 xor	 ebx, ebx
  0003e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3206 : 	pMsg.Result = CB_ERROR;

  00046	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL20@Fenrir_01L:

; 3210 : 	{
; 3211 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 63		 jne	 SHORT $LN19@Fenrir_01L

; 3212 : 		{
; 3213 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,32) )

  00062	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00068	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  0006d	03 cf		 add	 ecx, edi
  0006f	ba 20 1a 00 00	 mov	 edx, 6688		; 00001a20H
  00074	66 3b c2	 cmp	 ax, dx
  00077	75 0d		 jne	 SHORT $LN16@Fenrir_01L

; 3214 : 			{
; 3215 : 				iStuffCount_01 += (int)lpObj->pChaosBox[n].m_Durability;

  00079	d9 41 24	 fld	 DWORD PTR [ecx+36]
  0007c	e8 00 00 00 00	 call	 __ftol2_sse
  00081	01 45 dc	 add	 DWORD PTR _iStuffCount_01$[ebp], eax
  00084	eb 3f		 jmp	 SHORT $LN19@Fenrir_01L
$LN16@Fenrir_01L:

; 3216 : 			}
; 3217 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,33) )

  00086	ba 21 1a 00 00	 mov	 edx, 6689		; 00001a21H
  0008b	66 3b c2	 cmp	 ax, dx
  0008e	75 0d		 jne	 SHORT $LN14@Fenrir_01L

; 3218 : 			{
; 3219 : 				iStuffCount_02 += (int)lpObj->pChaosBox[n].m_Durability;

  00090	d9 41 24	 fld	 DWORD PTR [ecx+36]
  00093	e8 00 00 00 00	 call	 __ftol2_sse
  00098	01 45 e0	 add	 DWORD PTR _iStuffCount_02$[ebp], eax
  0009b	eb 28		 jmp	 SHORT $LN19@Fenrir_01L
$LN14@Fenrir_01L:

; 3220 : 			}
; 3221 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  0009d	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  000a2	66 3b c2	 cmp	 ax, dx
  000a5	75 05		 jne	 SHORT $LN12@Fenrir_01L

; 3222 : 			{
; 3223 : 				iChaosGemCount++;

  000a7	ff 45 e8	 inc	 DWORD PTR _iChaosGemCount$[ebp]
  000aa	eb 19		 jmp	 SHORT $LN19@Fenrir_01L
$LN12@Fenrir_01L:

; 3224 : 			}
; 3225 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  000ac	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000b1	66 3b c2	 cmp	 ax, dx
  000b4	75 0c		 jne	 SHORT $LN10@Fenrir_01L

; 3226 : 			{
; 3227 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000b6	d9 41 24	 fld	 DWORD PTR [ecx+36]
  000b9	e8 00 00 00 00	 call	 __ftol2_sse
  000be	03 d8		 add	 ebx, eax

; 3228 : 			}
; 3229 : 			else

  000c0	eb 03		 jmp	 SHORT $LN19@Fenrir_01L
$LN10@Fenrir_01L:

; 3230 : 			{
; 3231 : 				iInvalidItemCount++;

  000c2	ff 45 e4	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN19@Fenrir_01L:

; 3207 : 
; 3208 : 
; 3209 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000c5	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000cb	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000d1	0f 8c 79 ff ff
	ff		 jl	 $LL20@Fenrir_01L

; 3232 : 			}
; 3233 : 		}
; 3234 : 	}
; 3235 : 
; 3236 : 	if ( iStuffCount_01 != 20 || iStuffCount_02 != 20 || iChaosGemCount != 1 || iInvalidItemCount > 0 )

  000d7	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  000dc	39 45 dc	 cmp	 DWORD PTR _iStuffCount_01$[ebp], eax
  000df	75 71		 jne	 SHORT $LN25@Fenrir_01L
  000e1	39 45 e0	 cmp	 DWORD PTR _iStuffCount_02$[ebp], eax
  000e4	75 6c		 jne	 SHORT $LN25@Fenrir_01L
  000e6	83 7d e8 01	 cmp	 DWORD PTR _iChaosGemCount$[ebp], 1
  000ea	75 66		 jne	 SHORT $LN25@Fenrir_01L
  000ec	83 7d e4 00	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], 0
  000f0	7f 60		 jg	 SHORT $LN25@Fenrir_01L

; 3240 : 
; 3241 : 		return;
; 3242 : 	}
; 3243 : 	
; 3244 : 	if ( iCharmOfLuckCount > 10 )

  000f2	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000f5	7e 12		 jle	 SHORT $LN6@Fenrir_01L

; 3245 : 	{
; 3246 : 		pMsg.Result = 0xF0;
; 3247 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000f7	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000fb	8b 16		 mov	 edx, DWORD PTR [esi]
  000fd	50		 push	 eax
  000fe	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00101	51		 push	 ecx
  00102	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  00106	52		 push	 edx

; 3248 : 		lpObj->ChaosLock = FALSE;
; 3249 : 
; 3250 : 		return;

  00107	eb 55		 jmp	 SHORT $LN26@Fenrir_01L
$LN6@Fenrir_01L:

; 3251 : 	}
; 3252 : 
; 3253 : 	LogChaosItem(lpObj, "Fenrir_01Level_Mix");

  00109	8b 7d d8	 mov	 edi, DWORD PTR _this$[ebp]
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FNEHOIBM@Fenrir_01Level_Mix?$AA@
  00111	56		 push	 esi
  00112	8b cf		 mov	 ecx, edi
  00114	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3254 : 	LogAddTD("[Fenrir Mix][Level 01] Chaos Mix Start");

  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FLCJIMPD@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5Mix@
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3255 : 
; 3256 : 	lpObj->ChaosSuccessRate = g_iFenrir_01Level_MixRate;
; 3257 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 3258 : 	int nChaosNeedMoney = 0;
; 3259 : 
; 3260 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00124	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iFenrir_01Level_MixRate@@3HA ; g_iFenrir_01Level_MixRate
  0012b	83 c4 04	 add	 esp, 4
  0012e	51		 push	 ecx
  0012f	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
  00135	01 9e 1c 12 00
	00		 add	 DWORD PTR [esi+4636], ebx
  0013b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00140	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos

; 3261 : 
; 3262 : 	if ( iChaosTaxMoney < 0 )
; 3263 : 	{
; 3264 : 		iChaosTaxMoney = 0;
; 3265 : 	}
; 3266 : 
; 3267 : 	nChaosNeedMoney += iChaosTaxMoney;
; 3268 : 
; 3269 : 	if ( nChaosNeedMoney < 0 )
; 3270 : 	{
; 3271 : 		nChaosNeedMoney = 0;
; 3272 : 	}
; 3273 : 
; 3274 : 	if ( lpObj->Money < nChaosNeedMoney )

  00145	83 be cc 00 00
	00 00		 cmp	 DWORD PTR [esi+204], 0
  0014c	7d 35		 jge	 SHORT $LN3@Fenrir_01L

; 3275 : 	{
; 3276 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0014e	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
$LN25@Fenrir_01L:

; 3237 : 	{
; 3238 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00152	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00156	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00158	52		 push	 edx
  00159	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0015c	50		 push	 eax
  0015d	51		 push	 ecx
$LN26@Fenrir_01L:
  0015e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00163	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@Fenrir_01L:

; 3239 : 		lpObj->ChaosLock = FALSE;

  00166	5f		 pop	 edi
  00167	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx

; 3318 : 	}
; 3319 : }

  00173	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00176	33 cd		 xor	 ecx, ebp
  00178	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c2 04 00	 ret	 4
$LN3@Fenrir_01L:

; 3277 : 		
; 3278 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 3279 : 		lpObj->ChaosLock = FALSE;
; 3280 : 
; 3281 : 		return;
; 3282 : 	}
; 3283 : 
; 3284 : 	lpObj->Money -= nChaosNeedMoney;
; 3285 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00183	6a 00		 push	 0
  00185	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0018a	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3286 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  0018f	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  00195	8b 06		 mov	 eax, DWORD PTR [esi]
  00197	52		 push	 edx
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0019e	83 c4 08	 add	 esp, 8

; 3287 : 
; 3288 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  001a1	e8 00 00 00 00	 call	 _rand
  001a6	99		 cdq
  001a7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001ac	f7 f9		 idiv	 ecx
  001ae	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001b4	7d 6f		 jge	 SHORT $LN2@Fenrir_01L

; 3289 : 	{
; 3290 : 		int type = ITEMGET(13,35);
; 3291 : 		int level = 0;
; 3292 : 		int dur = 1;
; 3293 : 
; 3294 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, type , level, dur, 0, 0, 0, -1, 0, 0);

  001b6	6a 00		 push	 0
  001b8	6a 00		 push	 0
  001ba	6a 00		 push	 0
  001bc	8b 16		 mov	 edx, DWORD PTR [esi]
  001be	6a 00		 push	 0
  001c0	6a ff		 push	 -1
  001c2	6a 00		 push	 0
  001c4	6a 00		 push	 0
  001c6	6a 00		 push	 0
  001c8	6a 01		 push	 1
  001ca	6a 00		 push	 0
  001cc	68 23 1a 00 00	 push	 6691			; 00001a23H
  001d1	6a 00		 push	 0
  001d3	6a 00		 push	 0
  001d5	68 ff 00 00 00	 push	 255			; 000000ffH
  001da	52		 push	 edx
  001db	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3295 : 		::gObjInventoryCommit(lpObj->m_Index);

  001e0	8b 06		 mov	 eax, DWORD PTR [esi]
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 3296 : #if( __4GAMERS__ == 1 )
; 3297 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3298 : #endif
; 3299 : 		LogAddTD("[Fenrir Mix][Level 01] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 3300 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3301 : 			iCharmOfLuckCount);

  001e8	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  001ee	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  001f4	83 c4 40	 add	 esp, 64			; 00000040H
  001f7	53		 push	 ebx
  001f8	6a 00		 push	 0
  001fa	51		 push	 ecx
  001fb	52		 push	 edx
  001fc	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001ff	50		 push	 eax
  00200	83 c6 52	 add	 esi, 82			; 00000052H
  00203	56		 push	 esi
  00204	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@MODCEFAF@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00209	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3318 : 	}
; 3319 : }

  0020f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00212	83 c4 1c	 add	 esp, 28			; 0000001cH
  00215	5f		 pop	 edi
  00216	5e		 pop	 esi
  00217	33 cd		 xor	 ecx, ebp
  00219	5b		 pop	 ebx
  0021a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021f	8b e5		 mov	 esp, ebp
  00221	5d		 pop	 ebp
  00222	c2 04 00	 ret	 4
$LN2@Fenrir_01L:

; 3302 : 
; 3303 : 	}
; 3304 : 	else
; 3305 : 	{
; 3306 : #if( __4GAMERS__ == 1 )
; 3307 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3308 : #endif
; 3309 : 		ChaosBoxInit(lpObj);

  00225	56		 push	 esi
  00226	8b cf		 mov	 ecx, edi
  00228	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3310 : 		::GCUserChaosBoxSend(lpObj, 0);

  0022d	6a 00		 push	 0
  0022f	56		 push	 esi
  00230	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3311 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00235	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00239	8b 06		 mov	 eax, DWORD PTR [esi]
  0023b	51		 push	 ecx
  0023c	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0023f	52		 push	 edx
  00240	50		 push	 eax
  00241	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3312 : 
; 3313 : 		LogAddTD("[Fenrir Mix][Level 01] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 3314 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3315 : 			iCharmOfLuckCount);

  00246	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0024c	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00252	53		 push	 ebx
  00253	6a 00		 push	 0
  00255	51		 push	 ecx
  00256	52		 push	 edx
  00257	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0025a	50		 push	 eax
  0025b	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  0025e	51		 push	 ecx
  0025f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@IAKFEJP@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00264	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0026a	83 c4 30	 add	 esp, 48			; 00000030H

; 3316 : 
; 3317 : 		lpObj->ChaosLock = FALSE;

  0026d	e9 f4 fe ff ff	 jmp	 $LN27@Fenrir_01L
?Fenrir_01Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::Fenrir_01Level_Mix
_TEXT	ENDS
PUBLIC	??_C@_0EM@COLFGAOG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0EP@HFOGELBG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0CH@PIHPAKFK@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5Mix@ ; `string'
PUBLIC	??_C@_0BD@MEKFIOBN@Fenrir_02Level_Mix?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Fenrir_02Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::Fenrir_02Level_Mix
EXTRN	?g_iFenrir_02Level_MixRate@@3HA:DWORD		; g_iFenrir_02Level_MixRate
;	COMDAT ??_C@_0EM@COLFGAOG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EM@COLFGAOG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 02] [%s][%s] CBMix Fail %d Money : %d-%d, C'
	DB	'harmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@HFOGELBG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EP@HFOGELBG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 02] [%s][%s] CBMix Success %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PIHPAKFK@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5Mix@
CONST	SEGMENT
??_C@_0CH@PIHPAKFK@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5Mix@ DB '['
	DB	'Fenrir Mix][Level 02] Chaos Mix Start', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MEKFIOBN@Fenrir_02Level_Mix?$AA@
CONST	SEGMENT
??_C@_0BD@MEKFIOBN@Fenrir_02Level_Mix?$AA@ DB 'Fenrir_02Level_Mix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Fenrir_02Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
_iStuffCount_01$ = -36					; size = 4
_iStuffCount_02$ = -32					; size = 4
_iInvalidItemCount$ = -28				; size = 4
_iChaosGemCount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?Fenrir_02Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::Fenrir_02Level_Mix, COMDAT
; _this$ = ecx

; 3323 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 3324 : 	lpObj->ChaosLock = TRUE;
; 3325 : 	int iStuffCount_01 = 0;
; 3326 : 	int iStuffCount_02 = 0;
; 3327 : 	int iChaosGemCount = 0;
; 3328 : 	int iInvalidItemCount = 0;
; 3329 : 	int iChaosMoney = 0;
; 3330 : 	int iCharmOfLuckCount = 0;
; 3331 : 
; 3332 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3333 : 
; 3334 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	33 ff		 xor	 edi, edi
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	89 7d dc	 mov	 DWORD PTR _iStuffCount_01$[ebp], edi
  00033	89 7d e0	 mov	 DWORD PTR _iStuffCount_02$[ebp], edi
  00036	89 7d e8	 mov	 DWORD PTR _iChaosGemCount$[ebp], edi
  00039	89 7d e4	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  0003c	33 db		 xor	 ebx, ebx
  0003e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3335 : 	pMsg.Result = CB_ERROR;

  00046	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL20@Fenrir_02L:

; 3339 : 	{
; 3340 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 5b		 jne	 SHORT $LN19@Fenrir_02L

; 3341 : 		{
; 3342 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,34) )

  00062	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00068	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  0006d	ba 22 1a 00 00	 mov	 edx, 6690		; 00001a22H
  00072	66 3b c2	 cmp	 ax, dx
  00075	75 0e		 jne	 SHORT $LN16@Fenrir_02L

; 3343 : 			{
; 3344 : 				iStuffCount_01 += (int)lpObj->pChaosBox[n].m_Durability;

  00077	d9 44 39 24	 fld	 DWORD PTR [ecx+edi+36]
  0007b	e8 00 00 00 00	 call	 __ftol2_sse
  00080	01 45 dc	 add	 DWORD PTR _iStuffCount_01$[ebp], eax
  00083	eb 38		 jmp	 SHORT $LN19@Fenrir_02L
$LN16@Fenrir_02L:

; 3345 : 			}
; 3346 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,35) )

  00085	ba 23 1a 00 00	 mov	 edx, 6691		; 00001a23H
  0008a	66 3b c2	 cmp	 ax, dx
  0008d	75 05		 jne	 SHORT $LN14@Fenrir_02L

; 3347 : 			{
; 3348 : 				iStuffCount_02 ++;

  0008f	ff 45 e0	 inc	 DWORD PTR _iStuffCount_02$[ebp]
  00092	eb 29		 jmp	 SHORT $LN19@Fenrir_02L
$LN14@Fenrir_02L:

; 3349 : 			}
; 3350 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  00094	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00099	66 3b c2	 cmp	 ax, dx
  0009c	75 05		 jne	 SHORT $LN12@Fenrir_02L

; 3351 : 			{
; 3352 : 				iChaosGemCount++;

  0009e	ff 45 e8	 inc	 DWORD PTR _iChaosGemCount$[ebp]
  000a1	eb 1a		 jmp	 SHORT $LN19@Fenrir_02L
$LN12@Fenrir_02L:

; 3353 : 			}
; 3354 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  000a3	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000a8	66 3b c2	 cmp	 ax, dx
  000ab	75 0d		 jne	 SHORT $LN10@Fenrir_02L

; 3355 : 			{
; 3356 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000ad	d9 44 39 24	 fld	 DWORD PTR [ecx+edi+36]
  000b1	e8 00 00 00 00	 call	 __ftol2_sse
  000b6	03 d8		 add	 ebx, eax

; 3357 : 			}
; 3358 : 			else

  000b8	eb 03		 jmp	 SHORT $LN19@Fenrir_02L
$LN10@Fenrir_02L:

; 3359 : 			{
; 3360 : 				iInvalidItemCount++;

  000ba	ff 45 e4	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN19@Fenrir_02L:

; 3336 : 
; 3337 : 
; 3338 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000bd	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000c3	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000c9	7c 85		 jl	 SHORT $LL20@Fenrir_02L

; 3361 : 			}
; 3362 : 		}
; 3363 : 	}
; 3364 : 
; 3365 : 	if ( iStuffCount_01 != 10 || iStuffCount_02 != 5 || iChaosGemCount != 1 || iInvalidItemCount > 0 )

  000cb	83 7d dc 0a	 cmp	 DWORD PTR _iStuffCount_01$[ebp], 10 ; 0000000aH
  000cf	75 72		 jne	 SHORT $LN25@Fenrir_02L
  000d1	83 7d e0 05	 cmp	 DWORD PTR _iStuffCount_02$[ebp], 5
  000d5	75 6c		 jne	 SHORT $LN25@Fenrir_02L
  000d7	83 7d e8 01	 cmp	 DWORD PTR _iChaosGemCount$[ebp], 1
  000db	75 66		 jne	 SHORT $LN25@Fenrir_02L
  000dd	83 7d e4 00	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], 0
  000e1	7f 60		 jg	 SHORT $LN25@Fenrir_02L

; 3369 : 
; 3370 : 		return;
; 3371 : 	}
; 3372 : 	
; 3373 : 	if ( iCharmOfLuckCount > 10 )

  000e3	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000e6	7e 12		 jle	 SHORT $LN6@Fenrir_02L

; 3374 : 	{
; 3375 : 		pMsg.Result = 0xF0;
; 3376 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000e8	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000ec	8b 16		 mov	 edx, DWORD PTR [esi]
  000ee	50		 push	 eax
  000ef	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000f2	51		 push	 ecx
  000f3	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  000f7	52		 push	 edx

; 3377 : 		lpObj->ChaosLock = FALSE;
; 3378 : 
; 3379 : 		return;

  000f8	eb 55		 jmp	 SHORT $LN26@Fenrir_02L
$LN6@Fenrir_02L:

; 3380 : 	}
; 3381 : 
; 3382 : 	LogChaosItem(lpObj, "Fenrir_02Level_Mix");

  000fa	8b 7d d8	 mov	 edi, DWORD PTR _this$[ebp]
  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MEKFIOBN@Fenrir_02Level_Mix?$AA@
  00102	56		 push	 esi
  00103	8b cf		 mov	 ecx, edi
  00105	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3383 : 	LogAddTD("[Fenrir Mix][Level 02] Chaos Mix Start");

  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PIHPAKFK@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5Mix@
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3384 : 
; 3385 : 	lpObj->ChaosSuccessRate = g_iFenrir_02Level_MixRate;
; 3386 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 3387 : 	int nChaosNeedMoney = 0;
; 3388 : 
; 3389 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00115	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iFenrir_02Level_MixRate@@3HA ; g_iFenrir_02Level_MixRate
  0011c	83 c4 04	 add	 esp, 4
  0011f	51		 push	 ecx
  00120	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
  00126	01 9e 1c 12 00
	00		 add	 DWORD PTR [esi+4636], ebx
  0012c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00131	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos

; 3390 : 
; 3391 : 	if ( iChaosTaxMoney < 0 )
; 3392 : 	{
; 3393 : 		iChaosTaxMoney = 0;
; 3394 : 	}
; 3395 : 
; 3396 : 	nChaosNeedMoney += iChaosTaxMoney;
; 3397 : 
; 3398 : 	if ( nChaosNeedMoney < 0 )
; 3399 : 	{
; 3400 : 		nChaosNeedMoney = 0;
; 3401 : 	}
; 3402 : 
; 3403 : 	if ( lpObj->Money < nChaosNeedMoney )

  00136	83 be cc 00 00
	00 00		 cmp	 DWORD PTR [esi+204], 0
  0013d	7d 35		 jge	 SHORT $LN3@Fenrir_02L

; 3404 : 	{
; 3405 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0013f	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
$LN25@Fenrir_02L:

; 3366 : 	{
; 3367 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00143	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00147	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00149	52		 push	 edx
  0014a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0014d	50		 push	 eax
  0014e	51		 push	 ecx
$LN26@Fenrir_02L:
  0014f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00154	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@Fenrir_02L:

; 3368 : 		lpObj->ChaosLock = FALSE;

  00157	5f		 pop	 edi
  00158	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00162	5e		 pop	 esi
  00163	5b		 pop	 ebx

; 3447 : 	}
; 3448 : }

  00164	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00167	33 cd		 xor	 ecx, ebp
  00169	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c2 04 00	 ret	 4
$LN3@Fenrir_02L:

; 3406 : 		
; 3407 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 3408 : 		lpObj->ChaosLock = FALSE;
; 3409 : 
; 3410 : 		return;
; 3411 : 	}
; 3412 : 
; 3413 : 	lpObj->Money -= nChaosNeedMoney;
; 3414 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00174	6a 00		 push	 0
  00176	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0017b	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3415 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00180	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  00186	8b 06		 mov	 eax, DWORD PTR [esi]
  00188	52		 push	 edx
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0018f	83 c4 08	 add	 esp, 8

; 3416 : 
; 3417 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00192	e8 00 00 00 00	 call	 _rand
  00197	99		 cdq
  00198	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0019d	f7 f9		 idiv	 ecx
  0019f	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001a5	7d 6f		 jge	 SHORT $LN2@Fenrir_02L

; 3418 : 	{
; 3419 : 		int type = ITEMGET(13,36);
; 3420 : 		int level = 0;
; 3421 : 		int dur = 1;
; 3422 : 
; 3423 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, type , level, dur, 0, 0, 0, -1, 0, 0);

  001a7	6a 00		 push	 0
  001a9	6a 00		 push	 0
  001ab	6a 00		 push	 0
  001ad	8b 16		 mov	 edx, DWORD PTR [esi]
  001af	6a 00		 push	 0
  001b1	6a ff		 push	 -1
  001b3	6a 00		 push	 0
  001b5	6a 00		 push	 0
  001b7	6a 00		 push	 0
  001b9	6a 01		 push	 1
  001bb	6a 00		 push	 0
  001bd	68 24 1a 00 00	 push	 6692			; 00001a24H
  001c2	6a 00		 push	 0
  001c4	6a 00		 push	 0
  001c6	68 ff 00 00 00	 push	 255			; 000000ffH
  001cb	52		 push	 edx
  001cc	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3424 : 		::gObjInventoryCommit(lpObj->m_Index);

  001d1	8b 06		 mov	 eax, DWORD PTR [esi]
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 3425 : #if( __4GAMERS__ == 1 )
; 3426 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3427 : #endif
; 3428 : 		LogAddTD("[Fenrir Mix][Level 02] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 3429 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3430 : 			iCharmOfLuckCount);

  001d9	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  001df	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  001e5	83 c4 40	 add	 esp, 64			; 00000040H
  001e8	53		 push	 ebx
  001e9	6a 00		 push	 0
  001eb	51		 push	 ecx
  001ec	52		 push	 edx
  001ed	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001f0	50		 push	 eax
  001f1	83 c6 52	 add	 esi, 82			; 00000052H
  001f4	56		 push	 esi
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HFOGELBG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3447 : 	}
; 3448 : }

  00200	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00203	83 c4 1c	 add	 esp, 28			; 0000001cH
  00206	5f		 pop	 edi
  00207	5e		 pop	 esi
  00208	33 cd		 xor	 ecx, ebp
  0020a	5b		 pop	 ebx
  0020b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c2 04 00	 ret	 4
$LN2@Fenrir_02L:

; 3431 : 
; 3432 : 	}
; 3433 : 	else
; 3434 : 	{
; 3435 : #if( __4GAMERS__ == 1 )
; 3436 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3437 : #endif
; 3438 : 		ChaosBoxInit(lpObj);

  00216	56		 push	 esi
  00217	8b cf		 mov	 ecx, edi
  00219	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3439 : 		::GCUserChaosBoxSend(lpObj, 0);

  0021e	6a 00		 push	 0
  00220	56		 push	 esi
  00221	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3440 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00226	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0022a	8b 06		 mov	 eax, DWORD PTR [esi]
  0022c	51		 push	 ecx
  0022d	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00230	52		 push	 edx
  00231	50		 push	 eax
  00232	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3441 : 
; 3442 : 		LogAddTD("[Fenrir Mix][Level 02] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 3443 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3444 : 			iCharmOfLuckCount);

  00237	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0023d	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00243	53		 push	 ebx
  00244	6a 00		 push	 0
  00246	51		 push	 ecx
  00247	52		 push	 edx
  00248	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0024b	50		 push	 eax
  0024c	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  0024f	51		 push	 ecx
  00250	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@COLFGAOG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0025b	83 c4 30	 add	 esp, 48			; 00000030H

; 3445 : 
; 3446 : 		lpObj->ChaosLock = FALSE;

  0025e	e9 f4 fe ff ff	 jmp	 $LN27@Fenrir_02L
?Fenrir_02Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::Fenrir_02Level_Mix
_TEXT	ENDS
PUBLIC	??_C@_0EM@DDCAHDDB@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0EP@BMKKEOOH@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0CH@CPJNIKAC@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5Chaos?5Mix@ ; `string'
PUBLIC	??_C@_0BD@FCLFBNN@Fenrir_03Level_Mix?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Fenrir_03Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::Fenrir_03Level_Mix
EXTRN	?g_iFenrir_03Level_MixRate@@3HA:DWORD		; g_iFenrir_03Level_MixRate
;	COMDAT ??_C@_0EM@DDCAHDDB@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EM@DDCAHDDB@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 03] [%s][%s] CBMix Fail %d Money : %d-%d, C'
	DB	'harmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@BMKKEOOH@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EP@BMKKEOOH@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 03] [%s][%s] CBMix Success %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CPJNIKAC@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5Chaos?5Mix@
CONST	SEGMENT
??_C@_0CH@CPJNIKAC@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5Chaos?5Mix@ DB '['
	DB	'Fenrir Mix][Level 03] Chaos Mix Start', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FCLFBNN@Fenrir_03Level_Mix?$AA@
CONST	SEGMENT
??_C@_0BD@FCLFBNN@Fenrir_03Level_Mix?$AA@ DB 'Fenrir_03Level_Mix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Fenrir_03Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
_iStuffCount_01$ = -36					; size = 4
_iLifeGemCount$ = -32					; size = 4
_iInvalidItemCount$ = -28				; size = 4
_iChaosGemCount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?Fenrir_03Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::Fenrir_03Level_Mix, COMDAT
; _this$ = ecx

; 3454 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 3455 : 	lpObj->ChaosLock = TRUE;
; 3456 : 	int iStuffCount_01 = 0;
; 3457 : 	int iLifeGemCount = 0;
; 3458 : 	int iChaosGemCount = 0;
; 3459 : 	int iInvalidItemCount = 0;
; 3460 : 	int iChaosMoney = 0;
; 3461 : 	int iCharmOfLuckCount = 0;
; 3462 : 
; 3463 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3464 : 
; 3465 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	33 ff		 xor	 edi, edi
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	89 7d dc	 mov	 DWORD PTR _iStuffCount_01$[ebp], edi
  00033	89 7d e0	 mov	 DWORD PTR _iLifeGemCount$[ebp], edi
  00036	89 7d e8	 mov	 DWORD PTR _iChaosGemCount$[ebp], edi
  00039	89 7d e4	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  0003c	33 db		 xor	 ebx, ebx
  0003e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3466 : 	pMsg.Result = CB_ERROR;

  00046	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL20@Fenrir_03L:

; 3470 : 	{
; 3471 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 52		 jne	 SHORT $LN19@Fenrir_03L

; 3472 : 		{
; 3473 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,36) )

  00062	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00068	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  0006d	ba 24 1a 00 00	 mov	 edx, 6692		; 00001a24H
  00072	66 3b c2	 cmp	 ax, dx
  00075	75 05		 jne	 SHORT $LN16@Fenrir_03L

; 3474 : 			{
; 3475 : 				iStuffCount_01 ++;

  00077	ff 45 dc	 inc	 DWORD PTR _iStuffCount_01$[ebp]
  0007a	eb 38		 jmp	 SHORT $LN19@Fenrir_03L
$LN16@Fenrir_03L:

; 3476 : 			}
; 3477 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,16) )

  0007c	ba 10 1c 00 00	 mov	 edx, 7184		; 00001c10H
  00081	66 3b c2	 cmp	 ax, dx
  00084	75 05		 jne	 SHORT $LN14@Fenrir_03L

; 3478 : 			{
; 3479 : 				iLifeGemCount ++;

  00086	ff 45 e0	 inc	 DWORD PTR _iLifeGemCount$[ebp]
  00089	eb 29		 jmp	 SHORT $LN19@Fenrir_03L
$LN14@Fenrir_03L:

; 3480 : 			}
; 3481 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  0008b	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00090	66 3b c2	 cmp	 ax, dx
  00093	75 05		 jne	 SHORT $LN12@Fenrir_03L

; 3482 : 			{
; 3483 : 				iChaosGemCount++;

  00095	ff 45 e8	 inc	 DWORD PTR _iChaosGemCount$[ebp]
  00098	eb 1a		 jmp	 SHORT $LN19@Fenrir_03L
$LN12@Fenrir_03L:

; 3484 : 			}
; 3485 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  0009a	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0009f	66 3b c2	 cmp	 ax, dx
  000a2	75 0d		 jne	 SHORT $LN10@Fenrir_03L

; 3486 : 			{
; 3487 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000a4	d9 44 39 24	 fld	 DWORD PTR [ecx+edi+36]
  000a8	e8 00 00 00 00	 call	 __ftol2_sse
  000ad	03 d8		 add	 ebx, eax

; 3488 : 			}
; 3489 : 			else

  000af	eb 03		 jmp	 SHORT $LN19@Fenrir_03L
$LN10@Fenrir_03L:

; 3490 : 			{
; 3491 : 				iInvalidItemCount++;

  000b1	ff 45 e4	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN19@Fenrir_03L:

; 3467 : 
; 3468 : 
; 3469 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000b4	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000ba	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000c0	7c 8e		 jl	 SHORT $LL20@Fenrir_03L

; 3492 : 			}
; 3493 : 		}
; 3494 : 	}
; 3495 : 
; 3496 : 	if ( iStuffCount_01 != 1 || iLifeGemCount != 3 || iChaosGemCount != 1 || iInvalidItemCount > 0 )

  000c2	b8 01 00 00 00	 mov	 eax, 1
  000c7	39 45 dc	 cmp	 DWORD PTR _iStuffCount_01$[ebp], eax
  000ca	0f 85 ab 00 00
	00		 jne	 $LN25@Fenrir_03L
  000d0	83 7d e0 03	 cmp	 DWORD PTR _iLifeGemCount$[ebp], 3
  000d4	0f 85 a1 00 00
	00		 jne	 $LN25@Fenrir_03L
  000da	39 45 e8	 cmp	 DWORD PTR _iChaosGemCount$[ebp], eax
  000dd	0f 85 98 00 00
	00		 jne	 $LN25@Fenrir_03L
  000e3	83 7d e4 00	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], 0
  000e7	0f 8f 8e 00 00
	00		 jg	 $LN25@Fenrir_03L

; 3500 : 
; 3501 : 		return;
; 3502 : 	}
; 3503 : 	
; 3504 : 	if ( iCharmOfLuckCount > 10 )

  000ed	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000f0	7e 15		 jle	 SHORT $LN6@Fenrir_03L

; 3505 : 	{
; 3506 : 		pMsg.Result = 0xF0;
; 3507 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000f2	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000f6	8b 16		 mov	 edx, DWORD PTR [esi]
  000f8	50		 push	 eax
  000f9	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000fc	51		 push	 ecx
  000fd	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  00101	52		 push	 edx

; 3508 : 		lpObj->ChaosLock = FALSE;
; 3509 : 
; 3510 : 		return;

  00102	e9 80 00 00 00	 jmp	 $LN26@Fenrir_03L
$LN6@Fenrir_03L:

; 3511 : 	}
; 3512 : 
; 3513 : 	LogChaosItem(lpObj, "Fenrir_03Level_Mix");

  00107	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FCLFBNN@Fenrir_03Level_Mix?$AA@
  0010f	56		 push	 esi
  00110	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3514 : 	LogAddTD("[Fenrir Mix][Level 03] Chaos Mix Start");

  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@CPJNIKAC@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5Chaos?5Mix@
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3515 : 
; 3516 : 	lpObj->ChaosSuccessRate = g_iFenrir_03Level_MixRate;
; 3517 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 3518 : 	int nChaosNeedMoney = 10000000;
; 3519 : 
; 3520 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00120	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iFenrir_03Level_MixRate@@3HA ; g_iFenrir_03Level_MixRate
  00127	83 c4 04	 add	 esp, 4
  0012a	51		 push	 ecx
  0012b	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
  00131	01 9e 1c 12 00
	00		 add	 DWORD PTR [esi+4636], ebx
  00137	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0013c	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00141	6a 00		 push	 0
  00143	99		 cdq
  00144	68 80 96 98 00	 push	 10000000		; 00989680H
  00149	52		 push	 edx
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 __allmul
  00150	6a 00		 push	 0
  00152	6a 64		 push	 100			; 00000064H
  00154	52		 push	 edx
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 __alldiv

; 3521 : 
; 3522 : 	if ( iChaosTaxMoney < 0 )

  0015b	85 c0		 test	 eax, eax
  0015d	79 02		 jns	 SHORT $LN5@Fenrir_03L

; 3523 : 	{
; 3524 : 		iChaosTaxMoney = 0;

  0015f	33 c0		 xor	 eax, eax
$LN5@Fenrir_03L:

; 3525 : 	}
; 3526 : 
; 3527 : 	nChaosNeedMoney += iChaosTaxMoney;

  00161	8d b8 80 96 98
	00		 lea	 edi, DWORD PTR [eax+10000000]

; 3528 : 
; 3529 : 	if ( nChaosNeedMoney < 0 )

  00167	85 ff		 test	 edi, edi
  00169	79 02		 jns	 SHORT $LN4@Fenrir_03L

; 3530 : 	{
; 3531 : 		nChaosNeedMoney = 0;

  0016b	33 ff		 xor	 edi, edi
$LN4@Fenrir_03L:

; 3532 : 	}
; 3533 : 
; 3534 : 	if ( lpObj->Money < nChaosNeedMoney )

  0016d	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00173	3b cf		 cmp	 ecx, edi
  00175	7d 35		 jge	 SHORT $LN3@Fenrir_03L

; 3535 : 	{
; 3536 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  00177	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
$LN25@Fenrir_03L:

; 3497 : 	{
; 3498 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0017b	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  0017f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00181	52		 push	 edx
  00182	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00185	50		 push	 eax
  00186	51		 push	 ecx
$LN26@Fenrir_03L:
  00187	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0018c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@Fenrir_03L:

; 3499 : 		lpObj->ChaosLock = FALSE;

  0018f	5f		 pop	 edi
  00190	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0019a	5e		 pop	 esi
  0019b	5b		 pop	 ebx

; 3579 : 	}
; 3580 : }

  0019c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019f	33 cd		 xor	 ecx, ebp
  001a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c2 04 00	 ret	 4
$LN3@Fenrir_03L:

; 3537 : 		
; 3538 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 3539 : 		lpObj->ChaosLock = FALSE;
; 3540 : 
; 3541 : 		return;
; 3542 : 	}
; 3543 : 
; 3544 : 	lpObj->Money -= nChaosNeedMoney;

  001ac	2b cf		 sub	 ecx, edi
  001ae	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 3545 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001b4	50		 push	 eax
  001b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001ba	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3546 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001bf	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  001c5	8b 06		 mov	 eax, DWORD PTR [esi]
  001c7	52		 push	 edx
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001ce	83 c4 08	 add	 esp, 8

; 3547 : 
; 3548 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  001d1	e8 00 00 00 00	 call	 _rand
  001d6	99		 cdq
  001d7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001dc	f7 f9		 idiv	 ecx
  001de	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001e4	7d 71		 jge	 SHORT $LN2@Fenrir_03L

; 3549 : 	{
; 3550 : 		int type = ITEMGET(13,37);
; 3551 : 		int level = 0;
; 3552 : 		int dur = 255;
; 3553 : 		int op1 = 1;
; 3554 : 
; 3555 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, type , level, dur, op1, 0, 0, -1, 0, 0);

  001e6	6a 00		 push	 0
  001e8	6a 00		 push	 0
  001ea	6a 00		 push	 0
  001ec	8b 16		 mov	 edx, DWORD PTR [esi]
  001ee	6a 00		 push	 0
  001f0	6a ff		 push	 -1
  001f2	6a 00		 push	 0
  001f4	6a 00		 push	 0
  001f6	6a 01		 push	 1
  001f8	68 ff 00 00 00	 push	 255			; 000000ffH
  001fd	6a 00		 push	 0
  001ff	68 25 1a 00 00	 push	 6693			; 00001a25H
  00204	6a 00		 push	 0
  00206	6a 00		 push	 0
  00208	68 ff 00 00 00	 push	 255			; 000000ffH
  0020d	52		 push	 edx
  0020e	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3556 : 		::gObjInventoryCommit(lpObj->m_Index);

  00213	8b 06		 mov	 eax, DWORD PTR [esi]
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 3557 : #if( __4GAMERS__ == 1 )
; 3558 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3559 : #endif
; 3560 : 		LogAddTD("[Fenrir Mix][Level 03] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 3561 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3562 : 			iCharmOfLuckCount);

  0021b	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00221	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00227	83 c4 40	 add	 esp, 64			; 00000040H
  0022a	53		 push	 ebx
  0022b	57		 push	 edi
  0022c	51		 push	 ecx
  0022d	52		 push	 edx
  0022e	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00231	50		 push	 eax
  00232	83 c6 52	 add	 esi, 82			; 00000052H
  00235	56		 push	 esi
  00236	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@BMKKEOOH@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  0023b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3579 : 	}
; 3580 : }

  00241	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00244	83 c4 1c	 add	 esp, 28			; 0000001cH
  00247	5f		 pop	 edi
  00248	5e		 pop	 esi
  00249	33 cd		 xor	 ecx, ebp
  0024b	5b		 pop	 ebx
  0024c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00251	8b e5		 mov	 esp, ebp
  00253	5d		 pop	 ebp
  00254	c2 04 00	 ret	 4
$LN2@Fenrir_03L:

; 3563 : 
; 3564 : 	}
; 3565 : 	else
; 3566 : 	{
; 3567 : #if( __4GAMERS__ == 1 )
; 3568 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3569 : #endif
; 3570 : 		ChaosBoxInit(lpObj);

  00257	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0025a	56		 push	 esi
  0025b	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3571 : 		::GCUserChaosBoxSend(lpObj, 0);

  00260	6a 00		 push	 0
  00262	56		 push	 esi
  00263	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3572 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00268	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0026c	8b 06		 mov	 eax, DWORD PTR [esi]
  0026e	51		 push	 ecx
  0026f	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00272	52		 push	 edx
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3573 : 
; 3574 : 		LogAddTD("[Fenrir Mix][Level 03] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 3575 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3576 : 			iCharmOfLuckCount);

  00279	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0027f	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00285	53		 push	 ebx
  00286	57		 push	 edi
  00287	51		 push	 ecx
  00288	52		 push	 edx
  00289	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0028c	50		 push	 eax
  0028d	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  00290	51		 push	 ecx
  00291	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@DDCAHDDB@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00296	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0029c	83 c4 30	 add	 esp, 48			; 00000030H

; 3577 : 
; 3578 : 		lpObj->ChaosLock = FALSE;

  0029f	e9 eb fe ff ff	 jmp	 $LN27@Fenrir_03L
?Fenrir_03Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::Fenrir_03Level_Mix
_TEXT	ENDS
PUBLIC	??_C@_0EM@GDMLAIBE@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0EP@NJDPFBHB@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0CH@GFKDABEJ@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5Chaos?5Mix@ ; `string'
PUBLIC	??_C@_0BD@CMBAEEFO@Fenrir_04Level_Mix?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Fenrir_04Upgrade_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::Fenrir_04Upgrade_Mix
;	COMDAT ??_C@_0EM@GDMLAIBE@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EM@GDMLAIBE@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 04] [%s][%s] CBMix Fail %d Money : %d-%d, C'
	DB	'harmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@NJDPFBHB@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EP@NJDPFBHB@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 04] [%s][%s] CBMix Success %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GFKDABEJ@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5Chaos?5Mix@
CONST	SEGMENT
??_C@_0CH@GFKDABEJ@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5Chaos?5Mix@ DB '['
	DB	'Fenrir Mix][Level 04] Chaos Mix Start', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CMBAEEFO@Fenrir_04Level_Mix?$AA@
CONST	SEGMENT
??_C@_0BD@CMBAEEFO@Fenrir_04Level_Mix?$AA@ DB 'Fenrir_04Level_Mix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Fenrir_04Upgrade_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
_iInvalidItemCount$ = -64				; size = 4
_iLifeGemCount$ = -60					; size = 4
_iChaosGemCount$ = -56					; size = 4
_bFenrirDamageDec$ = -52				; size = 4
_iStuffCount_01$ = -48					; size = 4
_bFenrirDamageInc$ = -44				; size = 4
_iDefendStuffPrice$ = -40				; size = 4
_iAttackStuffCount$ = -36				; size = 4
_iCharmOfLuckCount$ = -32				; size = 4
_iDefendStuffCount$ = -28				; size = 4
_iChaosMoney$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?Fenrir_04Upgrade_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::Fenrir_04Upgrade_Mix, COMDAT
; _this$ = ecx

; 3584 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 3585 : 	lpObj->ChaosLock = TRUE;
; 3586 : 	int iStuffCount_01 = 0;

  00016	33 ff		 xor	 edi, edi

; 3587 : 	int iLifeGemCount = 0;
; 3588 : 	int iChaosGemCount = 0;
; 3589 : 	int iAttackStuffCount = 0;
; 3590 : 	int iDefendStuffCount = 0;
; 3591 : 	int iAttackStuffPrice = 0;
; 3592 : 	int iDefendStuffPrice = 0;
; 3593 : 	int iInvalidItemCount = 0;
; 3594 : 	int iChaosMoney = 0;
; 3595 : 	BOOL bFenrirDamageInc = FALSE;
; 3596 : 	BOOL bFenrirDamageDec = FALSE;
; 3597 : 	int iCharmOfLuckCount = 0;
; 3598 : 
; 3599 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3600 : 
; 3601 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	89 7d d0	 mov	 DWORD PTR _iStuffCount_01$[ebp], edi
  00033	89 7d c4	 mov	 DWORD PTR _iLifeGemCount$[ebp], edi
  00036	89 7d c8	 mov	 DWORD PTR _iChaosGemCount$[ebp], edi
  00039	89 7d dc	 mov	 DWORD PTR _iAttackStuffCount$[ebp], edi
  0003c	89 7d e4	 mov	 DWORD PTR _iDefendStuffCount$[ebp], edi
  0003f	33 db		 xor	 ebx, ebx
  00041	89 7d d8	 mov	 DWORD PTR _iDefendStuffPrice$[ebp], edi
  00044	89 7d c0	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  00047	89 7d d4	 mov	 DWORD PTR _bFenrirDamageInc$[ebp], edi
  0004a	89 7d cc	 mov	 DWORD PTR _bFenrirDamageDec$[ebp], edi
  0004d	89 7d e0	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], edi
  00050	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3602 : 	pMsg.Result = CB_ERROR;

  00058	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0005b	eb 03 8d 49 00	 npad	 5
$LL33@Fenrir_04U:

; 3606 : 	{
; 3607 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00060	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00066	03 cf		 add	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	83 f8 01	 cmp	 eax, 1
  00070	0f 85 ad 00 00
	00		 jne	 $LN32@Fenrir_04U

; 3608 : 		{
; 3609 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,37) )

  00076	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  0007c	0f b7 4c 38 06	 movzx	 ecx, WORD PTR [eax+edi+6]
  00081	03 c7		 add	 eax, edi
  00083	ba 25 1a 00 00	 mov	 edx, 6693		; 00001a25H
  00088	66 3b ca	 cmp	 cx, dx
  0008b	75 08		 jne	 SHORT $LN29@Fenrir_04U

; 3610 : 			{
; 3611 : 				iStuffCount_01 ++;

  0008d	ff 45 d0	 inc	 DWORD PTR _iStuffCount_01$[ebp]
  00090	e9 8e 00 00 00	 jmp	 $LN32@Fenrir_04U
$LN29@Fenrir_04U:

; 3612 : 			}
; 3613 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,16) )

  00095	ba 10 1c 00 00	 mov	 edx, 7184		; 00001c10H
  0009a	66 3b ca	 cmp	 cx, dx
  0009d	75 05		 jne	 SHORT $LN27@Fenrir_04U

; 3614 : 			{
; 3615 : 				iLifeGemCount ++;

  0009f	ff 45 c4	 inc	 DWORD PTR _iLifeGemCount$[ebp]
  000a2	eb 7f		 jmp	 SHORT $LN32@Fenrir_04U
$LN27@Fenrir_04U:

; 3616 : 			}
; 3617 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  000a4	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  000a9	66 3b ca	 cmp	 cx, dx
  000ac	75 05		 jne	 SHORT $LN25@Fenrir_04U

; 3618 : 			{
; 3619 : 				iChaosGemCount++;

  000ae	ff 45 c8	 inc	 DWORD PTR _iChaosGemCount$[ebp]

; 3620 : 			}
; 3621 : 			else if ( lpObj->pChaosBox[n].m_Type >= ITEMGET(0,0) &&

  000b1	eb 70		 jmp	 SHORT $LN32@Fenrir_04U
$LN25@Fenrir_04U:

; 3622 : 					  lpObj->pChaosBox[n].m_Type < ITEMGET(6,0) &&
; 3623 : 					  lpObj->pChaosBox[n].m_Level >= 4 &&
; 3624 : 					  lpObj->pChaosBox[n].m_Option3 >= 1)

  000b3	66 85 c9	 test	 cx, cx
  000b6	78 22		 js	 SHORT $LN23@Fenrir_04U
  000b8	ba 00 0c 00 00	 mov	 edx, 3072		; 00000c00H
  000bd	66 3b ca	 cmp	 cx, dx
  000c0	7d 18		 jge	 SHORT $LN23@Fenrir_04U
  000c2	66 83 78 08 04	 cmp	 WORD PTR [eax+8], 4
  000c7	7c 11		 jl	 SHORT $LN23@Fenrir_04U
  000c9	80 b8 92 00 00
	00 01		 cmp	 BYTE PTR [eax+146], 1
  000d0	72 08		 jb	 SHORT $LN23@Fenrir_04U

; 3625 : 			{
; 3626 : 				iAttackStuffCount++;

  000d2	ff 45 dc	 inc	 DWORD PTR _iAttackStuffCount$[ebp]

; 3627 : 				iAttackStuffPrice += lpObj->pChaosBox[n].m_BuyMoney;

  000d5	03 58 78	 add	 ebx, DWORD PTR [eax+120]

; 3628 : 			}
; 3629 : 			else if ( lpObj->pChaosBox[n].m_Type >= ITEMGET(6,0) &&

  000d8	eb 49		 jmp	 SHORT $LN32@Fenrir_04U
$LN23@Fenrir_04U:

; 3630 : 					  lpObj->pChaosBox[n].m_Type < ITEMGET(12,0) &&
; 3631 : 					  lpObj->pChaosBox[n].m_Level >= 4 &&
; 3632 : 					  lpObj->pChaosBox[n].m_Option3 >= 1)

  000da	ba 00 0c 00 00	 mov	 edx, 3072		; 00000c00H
  000df	66 3b ca	 cmp	 cx, dx
  000e2	7c 25		 jl	 SHORT $LN21@Fenrir_04U
  000e4	ba 00 18 00 00	 mov	 edx, 6144		; 00001800H
  000e9	66 3b ca	 cmp	 cx, dx
  000ec	7d 1b		 jge	 SHORT $LN21@Fenrir_04U
  000ee	66 83 78 08 04	 cmp	 WORD PTR [eax+8], 4
  000f3	7c 14		 jl	 SHORT $LN21@Fenrir_04U
  000f5	80 b8 92 00 00
	00 01		 cmp	 BYTE PTR [eax+146], 1
  000fc	72 0b		 jb	 SHORT $LN21@Fenrir_04U

; 3633 : 			{
; 3634 : 				iDefendStuffCount++;
; 3635 : 				iDefendStuffPrice += lpObj->pChaosBox[n].m_BuyMoney;

  000fe	8b 40 78	 mov	 eax, DWORD PTR [eax+120]
  00101	ff 45 e4	 inc	 DWORD PTR _iDefendStuffCount$[ebp]
  00104	01 45 d8	 add	 DWORD PTR _iDefendStuffPrice$[ebp], eax
  00107	eb 1a		 jmp	 SHORT $LN32@Fenrir_04U
$LN21@Fenrir_04U:

; 3636 : 			}
; 3637 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00109	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0010e	66 3b ca	 cmp	 cx, dx
  00111	75 0d		 jne	 SHORT $LN19@Fenrir_04U

; 3638 : 			{
; 3639 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00113	d9 40 24	 fld	 DWORD PTR [eax+36]
  00116	e8 00 00 00 00	 call	 __ftol2_sse
  0011b	01 45 e0	 add	 DWORD PTR _iCharmOfLuckCount$[ebp], eax

; 3640 : 			}
; 3641 : 			else

  0011e	eb 03		 jmp	 SHORT $LN32@Fenrir_04U
$LN19@Fenrir_04U:

; 3642 : 			{
; 3643 : 				iInvalidItemCount++;

  00120	ff 45 c0	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN32@Fenrir_04U:

; 3603 : 
; 3604 : 
; 3605 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00123	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00129	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0012f	0f 8c 2b ff ff
	ff		 jl	 $LL33@Fenrir_04U

; 3644 : 			}
; 3645 : 		}
; 3646 : 	}
; 3647 : 
; 3648 : 	if ( iStuffCount_01 != 1 || iLifeGemCount != 5 || iChaosGemCount != 1 || ( iAttackStuffCount == 0 && iDefendStuffCount == 0 ) || iInvalidItemCount > 0 )

  00135	b9 01 00 00 00	 mov	 ecx, 1
  0013a	39 4d d0	 cmp	 DWORD PTR _iStuffCount_01$[ebp], ecx
  0013d	0f 85 6d 02 00
	00		 jne	 $LN43@Fenrir_04U
  00143	83 7d c4 05	 cmp	 DWORD PTR _iLifeGemCount$[ebp], 5
  00147	0f 85 63 02 00
	00		 jne	 $LN43@Fenrir_04U
  0014d	39 4d c8	 cmp	 DWORD PTR _iChaosGemCount$[ebp], ecx
  00150	0f 85 5a 02 00
	00		 jne	 $LN43@Fenrir_04U
  00156	8b 45 dc	 mov	 eax, DWORD PTR _iAttackStuffCount$[ebp]
  00159	33 ff		 xor	 edi, edi
  0015b	3b c7		 cmp	 eax, edi
  0015d	75 09		 jne	 SHORT $LN39@Fenrir_04U
  0015f	39 7d e4	 cmp	 DWORD PTR _iDefendStuffCount$[ebp], edi
  00162	0f 84 4a 02 00
	00		 je	 $LN16@Fenrir_04U
$LN39@Fenrir_04U:
  00168	39 7d c0	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], edi
  0016b	0f 8f 41 02 00
	00		 jg	 $LN16@Fenrir_04U

; 3652 : 
; 3653 : 		return;
; 3654 : 	}
; 3655 : 	
; 3656 : 	if ( iCharmOfLuckCount > 10 )

  00171	83 7d e0 0a	 cmp	 DWORD PTR _iCharmOfLuckCount$[ebp], 10 ; 0000000aH
  00175	7e 15		 jle	 SHORT $LN14@Fenrir_04U

; 3657 : 	{
; 3658 : 		pMsg.Result = 0xF0;
; 3659 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00177	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0017b	8b 16		 mov	 edx, DWORD PTR [esi]
  0017d	50		 push	 eax
  0017e	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00181	51		 push	 ecx
  00182	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  00186	52		 push	 edx

; 3660 : 		lpObj->ChaosLock = FALSE;
; 3661 : 
; 3662 : 		return;

  00187	e9 32 02 00 00	 jmp	 $LN44@Fenrir_04U
$LN14@Fenrir_04U:

; 3663 : 	}
; 3664 : 
; 3665 : 	if ( iAttackStuffCount > 0 )

  0018c	3b c7		 cmp	 eax, edi
  0018e	7e 05		 jle	 SHORT $LN40@Fenrir_04U

; 3666 : 	{
; 3667 : 		bFenrirDamageInc = TRUE;

  00190	89 4d d4	 mov	 DWORD PTR _bFenrirDamageInc$[ebp], ecx

; 3668 : 		iChaosMoney = iAttackStuffPrice;

  00193	eb 02		 jmp	 SHORT $LN13@Fenrir_04U
$LN40@Fenrir_04U:
  00195	8b df		 mov	 ebx, edi
$LN13@Fenrir_04U:

; 3669 : 	}
; 3670 : 
; 3671 : 	if ( iDefendStuffCount > 0 )

  00197	39 7d e4	 cmp	 DWORD PTR _iDefendStuffCount$[ebp], edi
  0019a	7e 0f		 jle	 SHORT $LN41@Fenrir_04U

; 3672 : 	{
; 3673 : 		bFenrirDamageDec = TRUE;

  0019c	8b c1		 mov	 eax, ecx

; 3674 : 		iChaosMoney = iDefendStuffPrice;

  0019e	8b 4d d8	 mov	 ecx, DWORD PTR _iDefendStuffPrice$[ebp]
  001a1	89 45 cc	 mov	 DWORD PTR _bFenrirDamageDec$[ebp], eax
  001a4	89 4d e8	 mov	 DWORD PTR _iChaosMoney$[ebp], ecx
  001a7	8b d9		 mov	 ebx, ecx
  001a9	eb 02		 jmp	 SHORT $LN12@Fenrir_04U
$LN41@Fenrir_04U:
  001ab	8b c7		 mov	 eax, edi
$LN12@Fenrir_04U:

; 3675 : 	}
; 3676 : 
; 3677 : 	if ( bFenrirDamageInc && bFenrirDamageDec )

  001ad	39 7d d4	 cmp	 DWORD PTR _bFenrirDamageInc$[ebp], edi
  001b0	74 09		 je	 SHORT $LN38@Fenrir_04U
  001b2	3b c7		 cmp	 eax, edi
  001b4	74 0d		 je	 SHORT $LN10@Fenrir_04U

; 3678 : 	{
; 3679 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 3680 : 		lpObj->ChaosLock = FALSE;
; 3681 : 
; 3682 : 		return;

  001b6	e9 f7 01 00 00	 jmp	 $LN16@Fenrir_04U
$LN38@Fenrir_04U:

; 3683 : 	}
; 3684 : 
; 3685 : 	if ( !bFenrirDamageInc && !bFenrirDamageDec )

  001bb	3b c7		 cmp	 eax, edi

; 3686 : 	{
; 3687 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 3688 : 		lpObj->ChaosLock = FALSE;
; 3689 : 
; 3690 : 		return;

  001bd	0f 84 ef 01 00
	00		 je	 $LN16@Fenrir_04U
$LN10@Fenrir_04U:

; 3691 : 	}
; 3692 : 
; 3693 : 	LogChaosItem(lpObj, "Fenrir_04Level_Mix");

  001c3	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CMBAEEFO@Fenrir_04Level_Mix?$AA@
  001cb	56		 push	 esi
  001cc	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3694 : 	LogAddTD("[Fenrir Mix][Level 04] Chaos Mix Start");

  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GFKDABEJ@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5Chaos?5Mix@
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3695 : 
; 3696 : 	int nChaosNeedMoney = 10000000;
; 3697 : 
; 3698 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  001dc	8b 16		 mov	 edx, DWORD PTR [esi]
  001de	83 c4 04	 add	 esp, 4
  001e1	52		 push	 edx
  001e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001e7	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  001ec	57		 push	 edi
  001ed	99		 cdq
  001ee	68 80 96 98 00	 push	 10000000		; 00989680H
  001f3	52		 push	 edx
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 __allmul
  001fa	57		 push	 edi
  001fb	6a 64		 push	 100			; 00000064H
  001fd	52		 push	 edx
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 __alldiv

; 3699 : 
; 3700 : 	if ( iChaosTaxMoney < 0 )

  00204	3b c7		 cmp	 eax, edi
  00206	7d 02		 jge	 SHORT $LN9@Fenrir_04U

; 3701 : 	{
; 3702 : 		iChaosTaxMoney = 0;

  00208	33 c0		 xor	 eax, eax
$LN9@Fenrir_04U:

; 3703 : 	}
; 3704 : 
; 3705 : 	nChaosNeedMoney += iChaosTaxMoney;

  0020a	8d b8 80 96 98
	00		 lea	 edi, DWORD PTR [eax+10000000]

; 3706 : 
; 3707 : 	if ( nChaosNeedMoney < 0 )

  00210	85 ff		 test	 edi, edi
  00212	79 02		 jns	 SHORT $LN8@Fenrir_04U

; 3708 : 	{
; 3709 : 		nChaosNeedMoney = 0;

  00214	33 ff		 xor	 edi, edi
$LN8@Fenrir_04U:

; 3710 : 	}
; 3711 : 
; 3712 : 	if ( lpObj->Money < nChaosNeedMoney )

  00216	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0021c	3b cf		 cmp	 ecx, edi
  0021e	7d 24		 jge	 SHORT $LN7@Fenrir_04U

; 3713 : 	{
; 3714 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 3715 : 		
; 3716 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00220	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00224	8b 16		 mov	 edx, DWORD PTR [esi]
  00226	50		 push	 eax
  00227	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0022a	51		 push	 ecx
  0022b	52		 push	 edx
  0022c	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00230	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3717 : 		lpObj->ChaosLock = FALSE;

  00235	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 3718 : 
; 3719 : 		return;

  0023f	e9 85 01 00 00	 jmp	 $LN45@Fenrir_04U
$LN7@Fenrir_04U:

; 3720 : 	}
; 3721 : 
; 3722 : 	lpObj->Money -= nChaosNeedMoney;

  00244	2b cf		 sub	 ecx, edi
  00246	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 3723 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0024c	50		 push	 eax
  0024d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00252	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3724 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00257	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0025d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0025f	50		 push	 eax
  00260	51		 push	 ecx
  00261	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00266	83 c4 08	 add	 esp, 8

; 3725 : 
; 3726 : 	if ( iChaosMoney > 1000000 )

  00269	81 fb 40 42 0f
	00		 cmp	 ebx, 1000000		; 000f4240H
  0026f	7e 0a		 jle	 SHORT $LN6@Fenrir_04U

; 3727 : 		iChaosMoney = 1000000;

  00271	c7 45 e8 40 42
	0f 00		 mov	 DWORD PTR _iChaosMoney$[ebp], 1000000 ; 000f4240H
  00278	8b 5d e8	 mov	 ebx, DWORD PTR _iChaosMoney$[ebp]
$LN6@Fenrir_04U:

; 3728 : 
; 3729 : 	lpObj->ChaosSuccessRate = iChaosMoney * 100 / 1000000;

  0027b	6b db 64	 imul	 ebx, 100		; 00000064H
  0027e	8b cb		 mov	 ecx, ebx
  00280	b8 83 de 1b 43	 mov	 eax, 1125899907		; 431bde83H
  00285	f7 e9		 imul	 ecx
  00287	c1 fa 12	 sar	 edx, 18			; 00000012H
  0028a	8b c2		 mov	 eax, edx
  0028c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0028f	03 c2		 add	 eax, edx
  00291	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 3730 : 
; 3731 : 	if ( lpObj->ChaosSuccessRate > 79 )

  00297	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  0029a	7e 0a		 jle	 SHORT $LN5@Fenrir_04U

; 3732 : 		lpObj->ChaosSuccessRate = 79;

  0029c	c7 86 1c 12 00
	00 4f 00 00 00	 mov	 DWORD PTR [esi+4636], 79 ; 0000004fH
$LN5@Fenrir_04U:

; 3733 : 
; 3734 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  002a6	8b 5d e0	 mov	 ebx, DWORD PTR _iCharmOfLuckCount$[ebp]
  002a9	01 9e 1c 12 00
	00		 add	 DWORD PTR [esi+4636], ebx

; 3735 : 
; 3736 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  002af	e8 00 00 00 00	 call	 _rand
  002b4	99		 cdq
  002b5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  002ba	f7 f9		 idiv	 ecx
  002bc	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  002c2	0f 8d 83 00 00
	00		 jge	 $LN4@Fenrir_04U

; 3737 : 	{
; 3738 : 		int type = ITEMGET(13,37);
; 3739 : 		int level = 0;
; 3740 : 		int dur = 255;
; 3741 : 		int op1 = 1;
; 3742 : 		int nop = 0;

  002c8	33 c0		 xor	 eax, eax

; 3743 : 
; 3744 : 		if ( bFenrirDamageInc )

  002ca	39 45 d4	 cmp	 DWORD PTR _bFenrirDamageInc$[ebp], eax
  002cd	74 03		 je	 SHORT $LN42@Fenrir_04U

; 3745 : 		{
; 3746 : 			nop |= 1;

  002cf	8d 41 9d	 lea	 eax, DWORD PTR [ecx-99]
$LN42@Fenrir_04U:

; 3747 : 		}
; 3748 : 
; 3749 : 		if ( bFenrirDamageDec )

  002d2	83 7d cc 00	 cmp	 DWORD PTR _bFenrirDamageDec$[ebp], 0
  002d6	74 03		 je	 SHORT $LN2@Fenrir_04U

; 3750 : 		{
; 3751 : 			nop |= 2;

  002d8	83 c8 02	 or	 eax, 2
$LN2@Fenrir_04U:

; 3752 : 		}
; 3753 : 
; 3754 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, type , level, dur, op1, 0, 0, -1, nop, 0);

  002db	6a 00		 push	 0
  002dd	6a 00		 push	 0
  002df	6a 00		 push	 0
  002e1	8b 16		 mov	 edx, DWORD PTR [esi]
  002e3	50		 push	 eax
  002e4	6a ff		 push	 -1
  002e6	6a 00		 push	 0
  002e8	6a 00		 push	 0
  002ea	6a 01		 push	 1
  002ec	68 ff 00 00 00	 push	 255			; 000000ffH
  002f1	6a 00		 push	 0
  002f3	68 25 1a 00 00	 push	 6693			; 00001a25H
  002f8	6a 00		 push	 0
  002fa	6a 00		 push	 0
  002fc	68 ff 00 00 00	 push	 255			; 000000ffH
  00301	52		 push	 edx
  00302	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3755 : 		::gObjInventoryCommit(lpObj->m_Index);

  00307	8b 06		 mov	 eax, DWORD PTR [esi]
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 3756 : #if( __4GAMERS__ == 1 )
; 3757 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3758 : #endif
; 3759 : 		LogAddTD("[Fenrir Mix][Level 04] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 3760 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3761 : 			iCharmOfLuckCount);

  0030f	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00315	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  0031b	83 c4 40	 add	 esp, 64			; 00000040H
  0031e	53		 push	 ebx
  0031f	57		 push	 edi
  00320	51		 push	 ecx
  00321	52		 push	 edx
  00322	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00325	50		 push	 eax
  00326	83 c6 52	 add	 esi, 82			; 00000052H
  00329	56		 push	 esi
  0032a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@NJDPFBHB@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00335	83 c4 1c	 add	 esp, 28			; 0000001cH
  00338	5f		 pop	 edi
  00339	5e		 pop	 esi
  0033a	5b		 pop	 ebx

; 3778 : 	}
; 3779 : }

  0033b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033e	33 cd		 xor	 ecx, ebp
  00340	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00345	8b e5		 mov	 esp, ebp
  00347	5d		 pop	 ebp
  00348	c2 04 00	 ret	 4
$LN4@Fenrir_04U:

; 3762 : 
; 3763 : 	}
; 3764 : 	else
; 3765 : 	{
; 3766 : #if( __4GAMERS__ == 1 )
; 3767 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3768 : #endif
; 3769 : 		ChaosBoxInit(lpObj);

  0034b	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0034e	56		 push	 esi
  0034f	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3770 : 		::GCUserChaosBoxSend(lpObj, 0);

  00354	6a 00		 push	 0
  00356	56		 push	 esi
  00357	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3771 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0035c	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00360	8b 06		 mov	 eax, DWORD PTR [esi]
  00362	51		 push	 ecx
  00363	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00366	52		 push	 edx
  00367	50		 push	 eax
  00368	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3772 : 
; 3773 : 		LogAddTD("[Fenrir Mix][Level 04] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 3774 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3775 : 			iCharmOfLuckCount);

  0036d	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00373	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00379	53		 push	 ebx
  0037a	57		 push	 edi
  0037b	51		 push	 ecx
  0037c	52		 push	 edx
  0037d	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00380	50		 push	 eax
  00381	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  00384	51		 push	 ecx
  00385	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GDMLAIBE@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  0038a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00390	83 c4 30	 add	 esp, 48			; 00000030H
  00393	5f		 pop	 edi

; 3776 : 
; 3777 : 		lpObj->ChaosLock = FALSE;

  00394	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0039e	5e		 pop	 esi
  0039f	5b		 pop	 ebx

; 3778 : 	}
; 3779 : }

  003a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a3	33 cd		 xor	 ecx, ebp
  003a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003aa	8b e5		 mov	 esp, ebp
  003ac	5d		 pop	 ebp
  003ad	c2 04 00	 ret	 4
$LN43@Fenrir_04U:

; 3776 : 
; 3777 : 		lpObj->ChaosLock = FALSE;

  003b0	33 ff		 xor	 edi, edi
$LN16@Fenrir_04U:

; 3649 : 	{
; 3650 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  003b2	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  003b6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003b8	52		 push	 edx
  003b9	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  003bc	50		 push	 eax
  003bd	51		 push	 ecx
$LN44@Fenrir_04U:
  003be	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3651 : 		lpObj->ChaosLock = FALSE;

  003c3	89 be 20 12 00
	00		 mov	 DWORD PTR [esi+4640], edi
$LN45@Fenrir_04U:

; 3778 : 	}
; 3779 : }

  003c9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  003cf	5f		 pop	 edi
  003d0	5e		 pop	 esi
  003d1	33 cd		 xor	 ecx, ebp
  003d3	5b		 pop	 ebx
  003d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003d9	8b e5		 mov	 esp, ebp
  003db	5d		 pop	 ebp
  003dc	c2 04 00	 ret	 4
?Fenrir_04Upgrade_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::Fenrir_04Upgrade_Mix
_TEXT	ENDS
PUBLIC	??_C@_0FO@MOBDMAKD@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@ ; `string'
PUBLIC	??_C@_0FI@CLIKDBCN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@ ; `string'
PUBLIC	??_C@_0CO@IFFECFCD@?$FLPotionMix?$FN?$FLShieldPotion?5Lv1?5Mix@ ; `string'
PUBLIC	??_C@_0CA@MBDGDKKM@PotionMix?$FN?$FLShieldPotion?5Lv1?5Mix?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ShieldPotionLv1_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ShieldPotionLv1_Mix
EXTRN	?g_iShieldPotionLv1MixSuccessRate@@3HA:DWORD	; g_iShieldPotionLv1MixSuccessRate
EXTRN	?g_iShieldPotionLv1MixMoney@@3HA:DWORD		; g_iShieldPotionLv1MixMoney
EXTRN	?g_ShieldSystemOn@@3HA:DWORD			; g_ShieldSystemOn
;	COMDAT ??_C@_0FO@MOBDMAKD@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@
CONST	SEGMENT
??_C@_0FO@MOBDMAKD@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv1 Potion Mix [%s][%s] CBMix Fail %'
	DB	'd Money : %d-%d, CharmRate : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@CLIKDBCN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@
CONST	SEGMENT
??_C@_0FI@CLIKDBCN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv1 Potion Mix Success [%s][%s], Mon'
	DB	'ey(%d-%d), CharmRate : %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IFFECFCD@?$FLPotionMix?$FN?$FLShieldPotion?5Lv1?5Mix@
CONST	SEGMENT
??_C@_0CO@IFFECFCD@?$FLPotionMix?$FN?$FLShieldPotion?5Lv1?5Mix@ DB '[Poti'
	DB	'onMix][ShieldPotion Lv1 Mix] - Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MBDGDKKM@PotionMix?$FN?$FLShieldPotion?5Lv1?5Mix?$AA@
CONST	SEGMENT
??_C@_0CA@MBDGDKKM@PotionMix?$FN?$FLShieldPotion?5Lv1?5Mix?$AA@ DB 'Potio'
	DB	'nMix][ShieldPotion Lv1 Mix', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ShieldPotionLv1_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_iInvalidItemCount$ = -28				; size = 4
_iHealthPotionCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?ShieldPotionLv1_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ShieldPotionLv1_Mix, COMDAT
; _this$ = ecx

; 3785 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 3786 : 	int iHealthPotionCount = 0;

  00016	33 ff		 xor	 edi, edi

; 3787 : 	int iInvalidItemCount = 0;
; 3788 : 	int iChaosMixPrice = 0;
; 3789 : 	int iCharmOfLuckCount = 0;

  00018	33 db		 xor	 ebx, ebx
  0001a	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  0001d	89 7d e8	 mov	 DWORD PTR _iHealthPotionCount$[ebp], edi
  00020	89 7d e4	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi

; 3790 : 
; 3791 : 	if ( g_ShieldSystemOn == FALSE )

  00023	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, edi ; g_ShieldSystemOn
  00029	0f 84 55 02 00
	00		 je	 $LN18@ShieldPoti

; 3792 : 		return;
; 3793 : 
; 3794 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3795 : 
; 3796 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  0002f	6a 10		 push	 16			; 00000010H
  00031	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00034	68 86 00 00 00	 push	 134			; 00000086H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3797 : 	pMsg.Result = CB_ERROR;

  00042	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00045	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL16@ShieldPoti:

; 3800 : 	{
; 3801 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 3d		 jne	 SHORT $LN15@ShieldPoti

; 3802 : 		{
; 3803 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,3) )

  00062	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00068	0f b7 4c 38 06	 movzx	 ecx, WORD PTR [eax+edi+6]
  0006d	ba 03 1c 00 00	 mov	 edx, 7171		; 00001c03H
  00072	66 3b ca	 cmp	 cx, dx
  00075	75 0e		 jne	 SHORT $LN12@ShieldPoti

; 3804 : 			{
; 3805 : 				iHealthPotionCount+= (int)lpObj->pChaosBox[n].m_Durability;

  00077	d9 44 38 24	 fld	 DWORD PTR [eax+edi+36]
  0007b	e8 00 00 00 00	 call	 __ftol2_sse
  00080	01 45 e8	 add	 DWORD PTR _iHealthPotionCount$[ebp], eax
  00083	eb 1a		 jmp	 SHORT $LN15@ShieldPoti
$LN12@ShieldPoti:

; 3806 : 			}
; 3807 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00085	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0008a	66 3b ca	 cmp	 cx, dx
  0008d	75 0d		 jne	 SHORT $LN10@ShieldPoti

; 3808 : 			{
; 3809 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  0008f	d9 44 38 24	 fld	 DWORD PTR [eax+edi+36]
  00093	e8 00 00 00 00	 call	 __ftol2_sse
  00098	03 d8		 add	 ebx, eax

; 3810 : 			}
; 3811 : 			else

  0009a	eb 03		 jmp	 SHORT $LN15@ShieldPoti
$LN10@ShieldPoti:

; 3812 : 			{
; 3813 : 				iInvalidItemCount++;

  0009c	ff 45 e4	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN15@ShieldPoti:

; 3798 : 
; 3799 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0009f	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000a5	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000ab	7c a3		 jl	 SHORT $LL16@ShieldPoti

; 3814 : 			}
; 3815 : 		}
; 3816 : 	}
; 3817 : 
; 3818 : 	if ( iInvalidItemCount > 0 || iHealthPotionCount != 3 )

  000ad	33 ff		 xor	 edi, edi
  000af	39 7d e4	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], edi
  000b2	0f 8f b2 01 00
	00		 jg	 $LN7@ShieldPoti
  000b8	83 7d e8 03	 cmp	 DWORD PTR _iHealthPotionCount$[ebp], 3
  000bc	0f 85 a8 01 00
	00		 jne	 $LN7@ShieldPoti

; 3822 : 
; 3823 : 		return;
; 3824 : 	}
; 3825 : 
; 3826 : 	if ( iCharmOfLuckCount > 10 )

  000c2	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000c5	7e 15		 jle	 SHORT $LN6@ShieldPoti

; 3827 : 	{
; 3828 : 		pMsg.Result = 0xF0;
; 3829 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000c7	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000cb	8b 16		 mov	 edx, DWORD PTR [esi]
  000cd	50		 push	 eax
  000ce	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000d1	51		 push	 ecx
  000d2	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  000d6	52		 push	 edx

; 3830 : 		lpObj->ChaosLock = FALSE;
; 3831 : 
; 3832 : 		return;

  000d7	e9 9a 01 00 00	 jmp	 $LN23@ShieldPoti
$LN6@ShieldPoti:

; 3833 : 	}
; 3834 : 
; 3835 : 	iChaosMixPrice = g_iShieldPotionLv1MixMoney;
; 3836 : 	int iChaosTaxMoney = iChaosMixPrice * g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / 100;

  000dc	8b 06		 mov	 eax, DWORD PTR [esi]
  000de	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_iShieldPotionLv1MixMoney@@3HA ; g_iShieldPotionLv1MixMoney
  000e4	50		 push	 eax
  000e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000ea	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  000ef	8b c8		 mov	 ecx, eax
  000f1	0f af cf	 imul	 ecx, edi
  000f4	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000f9	f7 e9		 imul	 ecx
  000fb	c1 fa 05	 sar	 edx, 5
  000fe	8b c2		 mov	 eax, edx
  00100	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00103	03 c2		 add	 eax, edx

; 3837 : 
; 3838 : 	if ( iChaosTaxMoney < 0 )

  00105	79 02		 jns	 SHORT $LN22@ShieldPoti

; 3839 : 	{
; 3840 : 		iChaosTaxMoney = 0;

  00107	33 c0		 xor	 eax, eax
$LN22@ShieldPoti:

; 3841 : 	}
; 3842 : 
; 3843 : 	iChaosMixPrice += iChaosTaxMoney;

  00109	03 f8		 add	 edi, eax

; 3844 : 
; 3845 : 	if ( iChaosMixPrice < 0 )

  0010b	79 02		 jns	 SHORT $LN4@ShieldPoti

; 3846 : 	{
; 3847 : 		iChaosMixPrice = 0;

  0010d	33 ff		 xor	 edi, edi
$LN4@ShieldPoti:

; 3848 : 	}
; 3849 : 
; 3850 : 	if ( lpObj->Money < iChaosMixPrice )

  0010f	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00115	3b cf		 cmp	 ecx, edi
  00117	7d 24		 jge	 SHORT $LN3@ShieldPoti

; 3851 : 	{
; 3852 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 3853 : 		
; 3854 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00119	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0011d	8b 06		 mov	 eax, DWORD PTR [esi]
  0011f	51		 push	 ecx
  00120	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00123	52		 push	 edx
  00124	50		 push	 eax
  00125	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00129	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3855 : 		lpObj->ChaosLock = FALSE;

  0012e	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 3856 : 
; 3857 : 		return;

  00138	e9 44 01 00 00	 jmp	 $LN24@ShieldPoti
$LN3@ShieldPoti:

; 3858 : 	}
; 3859 : 
; 3860 : 	lpObj->Money -= iChaosMixPrice;

  0013d	2b cf		 sub	 ecx, edi
  0013f	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 3861 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00145	50		 push	 eax
  00146	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0014b	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3862 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00150	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00156	8b 16		 mov	 edx, DWORD PTR [esi]
  00158	51		 push	 ecx
  00159	52		 push	 edx
  0015a	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 3863 : 
; 3864 : 	LogChaosItem(lpObj, "PotionMix][ShieldPotion Lv1 Mix");

  0015f	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00162	83 c4 08	 add	 esp, 8
  00165	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MBDGDKKM@PotionMix?$FN?$FLShieldPotion?5Lv1?5Mix?$AA@
  0016a	56		 push	 esi
  0016b	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3865 : 	LogAddTD("[PotionMix][ShieldPotion Lv1 Mix] - Mix Start");

  00170	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@IFFECFCD@?$FLPotionMix?$FN?$FLShieldPotion?5Lv1?5Mix@
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0017b	83 c4 04	 add	 esp, 4

; 3866 : 	
; 3867 : 	int iRate = rand() % 100;

  0017e	e8 00 00 00 00	 call	 _rand
  00183	99		 cdq
  00184	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00189	f7 f9		 idiv	 ecx

; 3868 : 	iRate -= iCharmOfLuckCount;

  0018b	2b d3		 sub	 edx, ebx

; 3869 : 
; 3870 : 	if ( iRate < g_iShieldPotionLv1MixSuccessRate )

  0018d	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iShieldPotionLv1MixSuccessRate@@3HA ; g_iShieldPotionLv1MixSuccessRate
  00193	7d 70		 jge	 SHORT $LN2@ShieldPoti

; 3871 : 	{
; 3872 : 		int ItemNum = ITEMGET(14,35);
; 3873 : 
; 3874 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ItemNum, 0, 1, 0, 0, 0, lpObj->m_Index, 0, 0);

  00195	8b 06		 mov	 eax, DWORD PTR [esi]
  00197	6a 00		 push	 0
  00199	6a 00		 push	 0
  0019b	6a 00		 push	 0
  0019d	6a 00		 push	 0
  0019f	50		 push	 eax
  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	6a 00		 push	 0
  001a6	6a 01		 push	 1
  001a8	6a 00		 push	 0
  001aa	68 23 1c 00 00	 push	 7203			; 00001c23H
  001af	6a 00		 push	 0
  001b1	6a 00		 push	 0
  001b3	68 ff 00 00 00	 push	 255			; 000000ffH
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3875 : 		::gObjInventoryCommit(lpObj->m_Index);

  001be	8b 16		 mov	 edx, DWORD PTR [esi]
  001c0	52		 push	 edx
  001c1	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 3876 : 
; 3877 : 		LogAddTD("[ChaosMix][Shield Potion] Lv1 Potion Mix Success [%s][%s], Money(%d-%d), CharmRate : %d",
; 3878 : 			lpObj->AccountID, lpObj->Name, 	lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);

  001c6	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  001cc	83 c4 40	 add	 esp, 64			; 00000040H
  001cf	53		 push	 ebx
  001d0	57		 push	 edi
  001d1	50		 push	 eax
  001d2	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  001d5	51		 push	 ecx
  001d6	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  001d9	52		 push	 edx
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@CLIKDBCN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001e5	83 c4 18	 add	 esp, 24			; 00000018H
  001e8	5f		 pop	 edi

; 3889 : 	}
; 3890 : 
; 3891 : 	lpObj->ChaosLock = FALSE;

  001e9	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx

; 3892 : }

  001f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f8	33 cd		 xor	 ecx, ebp
  001fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 04 00	 ret	 4
$LN2@ShieldPoti:

; 3879 : 	}
; 3880 : 	else
; 3881 : 	{
; 3882 : 		ChaosBoxInit(lpObj);

  00205	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00208	56		 push	 esi
  00209	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3883 : 		::GCUserChaosBoxSend(lpObj, 0);

  0020e	6a 00		 push	 0
  00210	56		 push	 esi
  00211	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3884 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00216	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0021a	8b 16		 mov	 edx, DWORD PTR [esi]
  0021c	50		 push	 eax
  0021d	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00220	51		 push	 ecx
  00221	52		 push	 edx
  00222	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3885 : 
; 3886 : 		LogAddTD("[ChaosMix][Shield Potion] Lv1 Potion Mix [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 3887 : 			lpObj->AccountID, lpObj->Name, 	g_iShieldPotionLv1MixSuccessRate,
; 3888 : 			lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);

  00227	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0022d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_iShieldPotionLv1MixSuccessRate@@3HA ; g_iShieldPotionLv1MixSuccessRate
  00233	53		 push	 ebx
  00234	57		 push	 edi
  00235	50		 push	 eax
  00236	51		 push	 ecx
  00237	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  0023a	52		 push	 edx
  0023b	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0023e	50		 push	 eax
  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@MOBDMAKD@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@
  00244	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0024a	83 c4 30	 add	 esp, 48			; 00000030H
  0024d	5f		 pop	 edi

; 3889 : 	}
; 3890 : 
; 3891 : 	lpObj->ChaosLock = FALSE;

  0024e	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00258	5e		 pop	 esi
  00259	5b		 pop	 ebx

; 3892 : }

  0025a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025d	33 cd		 xor	 ecx, ebp
  0025f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00264	8b e5		 mov	 esp, ebp
  00266	5d		 pop	 ebp
  00267	c2 04 00	 ret	 4
$LN7@ShieldPoti:

; 3819 : 	{
; 3820 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  0026a	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0026e	8b 06		 mov	 eax, DWORD PTR [esi]
  00270	51		 push	 ecx
  00271	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00274	52		 push	 edx
  00275	50		 push	 eax
$LN23@ShieldPoti:
  00276	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3821 : 		lpObj->ChaosLock = FALSE;

  0027b	89 be 20 12 00
	00		 mov	 DWORD PTR [esi+4640], edi
$LN24@ShieldPoti:

; 3819 : 	{
; 3820 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00281	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@ShieldPoti:

; 3892 : }

  00284	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00287	5f		 pop	 edi
  00288	5e		 pop	 esi
  00289	33 cd		 xor	 ecx, ebp
  0028b	5b		 pop	 ebx
  0028c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00291	8b e5		 mov	 esp, ebp
  00293	5d		 pop	 ebp
  00294	c2 04 00	 ret	 4
?ShieldPotionLv1_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ShieldPotionLv1_Mix
_TEXT	ENDS
PUBLIC	??_C@_0FO@BECJDHIC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@ ; `string'
PUBLIC	??_C@_0FI@KPIPKEPN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@ ; `string'
PUBLIC	??_C@_0CO@CGACKDIK@?$FLPotionMix?$FN?$FLShieldPotion?5Lv2?5Mix@ ; `string'
PUBLIC	??_C@_0CA@EHKCEIAC@PotionMix?$FN?$FLShieldPotion?5Lv2?5Mix?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ShieldPotionLv2_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ShieldPotionLv2_Mix
EXTRN	?g_iShieldPotionLv2MixSuccessRate@@3HA:DWORD	; g_iShieldPotionLv2MixSuccessRate
EXTRN	?g_iShieldPotionLv2MixMoney@@3HA:DWORD		; g_iShieldPotionLv2MixMoney
;	COMDAT ??_C@_0FO@BECJDHIC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@
CONST	SEGMENT
??_C@_0FO@BECJDHIC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv2 Potion Mix [%s][%s] CBMix Fail %'
	DB	'd Money : %d-%d, CharmRate : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@KPIPKEPN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@
CONST	SEGMENT
??_C@_0FI@KPIPKEPN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv2 Potion Mix Success [%s][%s], Mon'
	DB	'ey(%d-%d), CharmRate : %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CGACKDIK@?$FLPotionMix?$FN?$FLShieldPotion?5Lv2?5Mix@
CONST	SEGMENT
??_C@_0CO@CGACKDIK@?$FLPotionMix?$FN?$FLShieldPotion?5Lv2?5Mix@ DB '[Poti'
	DB	'onMix][ShieldPotion Lv2 Mix] - Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EHKCEIAC@PotionMix?$FN?$FLShieldPotion?5Lv2?5Mix?$AA@
CONST	SEGMENT
??_C@_0CA@EHKCEIAC@PotionMix?$FN?$FLShieldPotion?5Lv2?5Mix?$AA@ DB 'Potio'
	DB	'nMix][ShieldPotion Lv2 Mix', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ShieldPotionLv2_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_iInvalidItemCount$ = -28				; size = 4
_iHealthPotionCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?ShieldPotionLv2_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ShieldPotionLv2_Mix, COMDAT
; _this$ = ecx

; 3898 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 3899 : 	int iHealthPotionCount = 0;
; 3900 : 	int iInvalidItemCount = 0;
; 3901 : 	int iChaosMixPrice = 0;
; 3902 : 	int iCharmOfLuckCount = 0;
; 3903 : 
; 3904 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3905 : 
; 3906 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	33 ff		 xor	 edi, edi
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	89 7d e8	 mov	 DWORD PTR _iHealthPotionCount$[ebp], edi
  00029	89 7d e4	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3907 : 	pMsg.Result = CB_ERROR;

  00036	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL16@ShieldPoti@2:

; 3910 : 	{
; 3911 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00040	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00046	03 cf		 add	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 3d		 jne	 SHORT $LN15@ShieldPoti@2

; 3912 : 		{
; 3913 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,38) )

  00052	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00058	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  0005b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0005f	ba 26 1c 00 00	 mov	 edx, 7206		; 00001c26H
  00064	66 3b ca	 cmp	 cx, dx
  00067	75 0d		 jne	 SHORT $LN12@ShieldPoti@2

; 3914 : 			{
; 3915 : 				iHealthPotionCount+= (int)lpObj->pChaosBox[n].m_Durability;

  00069	d9 40 24	 fld	 DWORD PTR [eax+36]
  0006c	e8 00 00 00 00	 call	 __ftol2_sse
  00071	01 45 e8	 add	 DWORD PTR _iHealthPotionCount$[ebp], eax
  00074	eb 19		 jmp	 SHORT $LN15@ShieldPoti@2
$LN12@ShieldPoti@2:

; 3916 : 			}
; 3917 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00076	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0007b	66 3b ca	 cmp	 cx, dx
  0007e	75 0c		 jne	 SHORT $LN10@ShieldPoti@2

; 3918 : 			{
; 3919 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00080	d9 40 24	 fld	 DWORD PTR [eax+36]
  00083	e8 00 00 00 00	 call	 __ftol2_sse
  00088	03 d8		 add	 ebx, eax

; 3920 : 			}
; 3921 : 			else

  0008a	eb 03		 jmp	 SHORT $LN15@ShieldPoti@2
$LN10@ShieldPoti@2:

; 3922 : 			{
; 3923 : 				iInvalidItemCount++;

  0008c	ff 45 e4	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN15@ShieldPoti@2:

; 3908 : 
; 3909 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0008f	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00095	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0009b	7c a3		 jl	 SHORT $LL16@ShieldPoti@2

; 3924 : 			}
; 3925 : 		}
; 3926 : 	}
; 3927 : 
; 3928 : 	if ( iInvalidItemCount > 0 || iHealthPotionCount != 3 )

  0009d	33 ff		 xor	 edi, edi
  0009f	39 7d e4	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], edi
  000a2	0f 8f af 01 00
	00		 jg	 $LN7@ShieldPoti@2
  000a8	83 7d e8 03	 cmp	 DWORD PTR _iHealthPotionCount$[ebp], 3
  000ac	0f 85 a5 01 00
	00		 jne	 $LN7@ShieldPoti@2

; 3932 : 
; 3933 : 		return;
; 3934 : 	}
; 3935 : 
; 3936 : 	if ( iCharmOfLuckCount > 10 )

  000b2	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000b5	7e 15		 jle	 SHORT $LN6@ShieldPoti@2

; 3937 : 	{
; 3938 : 		pMsg.Result = 0xF0;
; 3939 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000b7	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000bb	8b 16		 mov	 edx, DWORD PTR [esi]
  000bd	50		 push	 eax
  000be	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000c1	51		 push	 ecx
  000c2	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  000c6	52		 push	 edx

; 3940 : 		lpObj->ChaosLock = FALSE;
; 3941 : 
; 3942 : 		return;

  000c7	e9 97 01 00 00	 jmp	 $LN22@ShieldPoti@2
$LN6@ShieldPoti@2:

; 3943 : 	}
; 3944 : 
; 3945 : 	iChaosMixPrice = g_iShieldPotionLv2MixMoney;
; 3946 : 	int iChaosTaxMoney = iChaosMixPrice * g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / 100;

  000cc	8b 06		 mov	 eax, DWORD PTR [esi]
  000ce	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_iShieldPotionLv2MixMoney@@3HA ; g_iShieldPotionLv2MixMoney
  000d4	50		 push	 eax
  000d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000da	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  000df	8b c8		 mov	 ecx, eax
  000e1	0f af cf	 imul	 ecx, edi
  000e4	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000e9	f7 e9		 imul	 ecx
  000eb	c1 fa 05	 sar	 edx, 5
  000ee	8b c2		 mov	 eax, edx
  000f0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f3	03 c2		 add	 eax, edx

; 3947 : 
; 3948 : 	if ( iChaosTaxMoney < 0 )

  000f5	79 02		 jns	 SHORT $LN21@ShieldPoti@2

; 3949 : 	{
; 3950 : 		iChaosTaxMoney = 0;

  000f7	33 c0		 xor	 eax, eax
$LN21@ShieldPoti@2:

; 3951 : 	}
; 3952 : 
; 3953 : 	iChaosMixPrice += iChaosTaxMoney;

  000f9	03 f8		 add	 edi, eax

; 3954 : 
; 3955 : 	if ( iChaosMixPrice < 0 )

  000fb	79 02		 jns	 SHORT $LN4@ShieldPoti@2

; 3956 : 	{
; 3957 : 		iChaosMixPrice = 0;

  000fd	33 ff		 xor	 edi, edi
$LN4@ShieldPoti@2:

; 3958 : 	}
; 3959 : 
; 3960 : 	if ( lpObj->Money < iChaosMixPrice )

  000ff	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00105	3b cf		 cmp	 ecx, edi
  00107	7d 24		 jge	 SHORT $LN3@ShieldPoti@2

; 3961 : 	{
; 3962 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 3963 : 		
; 3964 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00109	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0010d	8b 06		 mov	 eax, DWORD PTR [esi]
  0010f	51		 push	 ecx
  00110	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00113	52		 push	 edx
  00114	50		 push	 eax
  00115	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00119	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3965 : 		lpObj->ChaosLock = FALSE;

  0011e	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 3966 : 
; 3967 : 		return;

  00128	e9 41 01 00 00	 jmp	 $LN23@ShieldPoti@2
$LN3@ShieldPoti@2:

; 3968 : 	}
; 3969 : 
; 3970 : 	lpObj->Money -= iChaosMixPrice;

  0012d	2b cf		 sub	 ecx, edi
  0012f	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 3971 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00135	50		 push	 eax
  00136	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0013b	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3972 : 	
; 3973 : 	LogChaosItem(lpObj, "PotionMix][ShieldPotion Lv2 Mix");

  00140	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00143	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EHKCEIAC@PotionMix?$FN?$FLShieldPotion?5Lv2?5Mix?$AA@
  00148	56		 push	 esi
  00149	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3974 : 	LogAddTD("[PotionMix][ShieldPotion Lv2 Mix] - Mix Start");

  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@CGACKDIK@?$FLPotionMix?$FN?$FLShieldPotion?5Lv2?5Mix@
  00153	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3975 : 
; 3976 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00159	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0015f	8b 16		 mov	 edx, DWORD PTR [esi]
  00161	51		 push	 ecx
  00162	52		 push	 edx
  00163	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00168	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3977 : 	int iRate = rand() % 100;

  0016b	e8 00 00 00 00	 call	 _rand
  00170	99		 cdq
  00171	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00176	f7 f9		 idiv	 ecx

; 3978 : 	iRate -= iCharmOfLuckCount;

  00178	2b d3		 sub	 edx, ebx

; 3979 : 
; 3980 : 	if ( iRate < g_iShieldPotionLv2MixSuccessRate )

  0017a	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iShieldPotionLv2MixSuccessRate@@3HA ; g_iShieldPotionLv2MixSuccessRate
  00180	7d 70		 jge	 SHORT $LN2@ShieldPoti@2

; 3981 : 	{
; 3982 : 		int ItemNum = ITEMGET(14,36);
; 3983 : 
; 3984 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ItemNum, 0, 1, 0, 0, 0, lpObj->m_Index, 0, 0);

  00182	8b 06		 mov	 eax, DWORD PTR [esi]
  00184	6a 00		 push	 0
  00186	6a 00		 push	 0
  00188	6a 00		 push	 0
  0018a	6a 00		 push	 0
  0018c	50		 push	 eax
  0018d	6a 00		 push	 0
  0018f	6a 00		 push	 0
  00191	6a 00		 push	 0
  00193	6a 01		 push	 1
  00195	6a 00		 push	 0
  00197	68 24 1c 00 00	 push	 7204			; 00001c24H
  0019c	6a 00		 push	 0
  0019e	6a 00		 push	 0
  001a0	68 ff 00 00 00	 push	 255			; 000000ffH
  001a5	50		 push	 eax
  001a6	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3985 : 		::gObjInventoryCommit(lpObj->m_Index);

  001ab	8b 16		 mov	 edx, DWORD PTR [esi]
  001ad	52		 push	 edx
  001ae	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 3986 : 
; 3987 : 		LogAddTD("[ChaosMix][Shield Potion] Lv2 Potion Mix Success [%s][%s], Money(%d-%d), CharmRate : %d",
; 3988 : 			lpObj->AccountID, lpObj->Name, 	lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);

  001b3	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  001b9	83 c4 40	 add	 esp, 64			; 00000040H
  001bc	53		 push	 ebx
  001bd	57		 push	 edi
  001be	50		 push	 eax
  001bf	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  001c2	51		 push	 ecx
  001c3	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  001c6	52		 push	 edx
  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@KPIPKEPN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@
  001cc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001d2	83 c4 18	 add	 esp, 24			; 00000018H
  001d5	5f		 pop	 edi

; 3999 : 	}
; 4000 : 
; 4001 : 	lpObj->ChaosLock = FALSE;

  001d6	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001e0	5e		 pop	 esi
  001e1	5b		 pop	 ebx

; 4002 : }

  001e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e5	33 cd		 xor	 ecx, ebp
  001e7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 04 00	 ret	 4
$LN2@ShieldPoti@2:

; 3989 : 	}
; 3990 : 	else
; 3991 : 	{
; 3992 : 		ChaosBoxInit(lpObj);

  001f2	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f5	56		 push	 esi
  001f6	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3993 : 		::GCUserChaosBoxSend(lpObj, 0);

  001fb	6a 00		 push	 0
  001fd	56		 push	 esi
  001fe	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3994 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00203	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00207	8b 16		 mov	 edx, DWORD PTR [esi]
  00209	50		 push	 eax
  0020a	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0020d	51		 push	 ecx
  0020e	52		 push	 edx
  0020f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3995 : 
; 3996 : 		LogAddTD("[ChaosMix][Shield Potion] Lv2 Potion Mix [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 3997 : 			lpObj->AccountID, lpObj->Name, 	g_iShieldPotionLv2MixSuccessRate,
; 3998 : 			lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);

  00214	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0021a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_iShieldPotionLv2MixSuccessRate@@3HA ; g_iShieldPotionLv2MixSuccessRate
  00220	53		 push	 ebx
  00221	57		 push	 edi
  00222	50		 push	 eax
  00223	51		 push	 ecx
  00224	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  00227	52		 push	 edx
  00228	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0022b	50		 push	 eax
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@BECJDHIC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@
  00231	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00237	83 c4 30	 add	 esp, 48			; 00000030H
  0023a	5f		 pop	 edi

; 3999 : 	}
; 4000 : 
; 4001 : 	lpObj->ChaosLock = FALSE;

  0023b	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00245	5e		 pop	 esi
  00246	5b		 pop	 ebx

; 4002 : }

  00247	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024a	33 cd		 xor	 ecx, ebp
  0024c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00251	8b e5		 mov	 esp, ebp
  00253	5d		 pop	 ebp
  00254	c2 04 00	 ret	 4
$LN7@ShieldPoti@2:

; 3929 : 	{
; 3930 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00257	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0025b	8b 06		 mov	 eax, DWORD PTR [esi]
  0025d	51		 push	 ecx
  0025e	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00261	52		 push	 edx
  00262	50		 push	 eax
$LN22@ShieldPoti@2:
  00263	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3931 : 		lpObj->ChaosLock = FALSE;

  00268	89 be 20 12 00
	00		 mov	 DWORD PTR [esi+4640], edi
$LN23@ShieldPoti@2:

; 4002 : }

  0026e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00271	83 c4 0c	 add	 esp, 12			; 0000000cH
  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	33 cd		 xor	 ecx, ebp
  00278	5b		 pop	 ebx
  00279	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027e	8b e5		 mov	 esp, ebp
  00280	5d		 pop	 ebp
  00281	c2 04 00	 ret	 4
?ShieldPotionLv2_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ShieldPotionLv2_Mix
_TEXT	ENDS
PUBLIC	??_C@_0FO@FNMAJKJN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@ ; `string'
PUBLIC	??_C@_0FI@GFFMCKHC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@ ; `string'
PUBLIC	??_C@_0CO@PBOACDNC@?$FLPotionMix?$FN?$FLShieldPotion?5Lv3?5Mix@ ; `string'
PUBLIC	??_C@_0CA@IMPOJLKH@PotionMix?$FN?$FLShieldPotion?5Lv3?5Mix?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ShieldPotionLv3_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ShieldPotionLv3_Mix
EXTRN	?g_iShieldPotionLv3MixSuccessRate@@3HA:DWORD	; g_iShieldPotionLv3MixSuccessRate
EXTRN	?g_iShieldPotionLv3MixMoney@@3HA:DWORD		; g_iShieldPotionLv3MixMoney
;	COMDAT ??_C@_0FO@FNMAJKJN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@
CONST	SEGMENT
??_C@_0FO@FNMAJKJN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv3 Potion Mix [%s][%s] CBMix Fail %'
	DB	'd Money : %d-%d, CharmRate : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@GFFMCKHC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@
CONST	SEGMENT
??_C@_0FI@GFFMCKHC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv3 Potion Mix Success [%s][%s], Mon'
	DB	'ey(%d-%d), CharmRate : %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PBOACDNC@?$FLPotionMix?$FN?$FLShieldPotion?5Lv3?5Mix@
CONST	SEGMENT
??_C@_0CO@PBOACDNC@?$FLPotionMix?$FN?$FLShieldPotion?5Lv3?5Mix@ DB '[Poti'
	DB	'onMix][ShieldPotion Lv3 Mix] - Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IMPOJLKH@PotionMix?$FN?$FLShieldPotion?5Lv3?5Mix?$AA@
CONST	SEGMENT
??_C@_0CA@IMPOJLKH@PotionMix?$FN?$FLShieldPotion?5Lv3?5Mix?$AA@ DB 'Potio'
	DB	'nMix][ShieldPotion Lv3 Mix', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ShieldPotionLv3_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_iInvalidItemCount$ = -28				; size = 4
_iHealthPotionCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?ShieldPotionLv3_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ShieldPotionLv3_Mix, COMDAT
; _this$ = ecx

; 4006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 4007 : 	int iHealthPotionCount = 0;
; 4008 : 	int iInvalidItemCount = 0;
; 4009 : 	int iChaosMixPrice = 0;
; 4010 : 	int iCharmOfLuckCount = 0;
; 4011 : 
; 4012 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4013 : 
; 4014 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	33 ff		 xor	 edi, edi
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	89 7d e8	 mov	 DWORD PTR _iHealthPotionCount$[ebp], edi
  00029	89 7d e4	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4015 : 	pMsg.Result = CB_ERROR;

  00036	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL16@ShieldPoti@3:

; 4018 : 	{
; 4019 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00040	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00046	03 cf		 add	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 3d		 jne	 SHORT $LN15@ShieldPoti@3

; 4020 : 		{
; 4021 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,39) )

  00052	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00058	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  0005b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0005f	ba 27 1c 00 00	 mov	 edx, 7207		; 00001c27H
  00064	66 3b ca	 cmp	 cx, dx
  00067	75 0d		 jne	 SHORT $LN12@ShieldPoti@3

; 4022 : 			{
; 4023 : 				iHealthPotionCount+= (int)lpObj->pChaosBox[n].m_Durability;

  00069	d9 40 24	 fld	 DWORD PTR [eax+36]
  0006c	e8 00 00 00 00	 call	 __ftol2_sse
  00071	01 45 e8	 add	 DWORD PTR _iHealthPotionCount$[ebp], eax
  00074	eb 19		 jmp	 SHORT $LN15@ShieldPoti@3
$LN12@ShieldPoti@3:

; 4024 : 			}
; 4025 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00076	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0007b	66 3b ca	 cmp	 cx, dx
  0007e	75 0c		 jne	 SHORT $LN10@ShieldPoti@3

; 4026 : 			{
; 4027 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00080	d9 40 24	 fld	 DWORD PTR [eax+36]
  00083	e8 00 00 00 00	 call	 __ftol2_sse
  00088	03 d8		 add	 ebx, eax

; 4028 : 			}
; 4029 : 			else

  0008a	eb 03		 jmp	 SHORT $LN15@ShieldPoti@3
$LN10@ShieldPoti@3:

; 4030 : 			{
; 4031 : 				iInvalidItemCount++;

  0008c	ff 45 e4	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN15@ShieldPoti@3:

; 4016 : 
; 4017 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0008f	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00095	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0009b	7c a3		 jl	 SHORT $LL16@ShieldPoti@3

; 4032 : 			}
; 4033 : 		}
; 4034 : 	}
; 4035 : 
; 4036 : 	if ( iInvalidItemCount > 0 || iHealthPotionCount != 3 )

  0009d	33 ff		 xor	 edi, edi
  0009f	39 7d e4	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], edi
  000a2	0f 8f b2 01 00
	00		 jg	 $LN7@ShieldPoti@3
  000a8	83 7d e8 03	 cmp	 DWORD PTR _iHealthPotionCount$[ebp], 3
  000ac	0f 85 a8 01 00
	00		 jne	 $LN7@ShieldPoti@3

; 4040 : 
; 4041 : 		return;
; 4042 : 	}
; 4043 : 
; 4044 : 	if ( iCharmOfLuckCount > 10 )

  000b2	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000b5	7e 15		 jle	 SHORT $LN6@ShieldPoti@3

; 4045 : 	{
; 4046 : 		pMsg.Result = 0xF0;
; 4047 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000b7	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000bb	8b 16		 mov	 edx, DWORD PTR [esi]
  000bd	50		 push	 eax
  000be	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000c1	51		 push	 ecx
  000c2	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  000c6	52		 push	 edx

; 4048 : 		lpObj->ChaosLock = FALSE;
; 4049 : 
; 4050 : 		return;

  000c7	e9 9a 01 00 00	 jmp	 $LN22@ShieldPoti@3
$LN6@ShieldPoti@3:

; 4051 : 	}
; 4052 : 
; 4053 : 	iChaosMixPrice = g_iShieldPotionLv3MixMoney;
; 4054 : 	int iChaosTaxMoney = iChaosMixPrice * g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / 100;

  000cc	8b 06		 mov	 eax, DWORD PTR [esi]
  000ce	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_iShieldPotionLv3MixMoney@@3HA ; g_iShieldPotionLv3MixMoney
  000d4	50		 push	 eax
  000d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000da	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  000df	8b c8		 mov	 ecx, eax
  000e1	0f af cf	 imul	 ecx, edi
  000e4	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000e9	f7 e9		 imul	 ecx
  000eb	c1 fa 05	 sar	 edx, 5
  000ee	8b c2		 mov	 eax, edx
  000f0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f3	03 c2		 add	 eax, edx

; 4055 : 
; 4056 : 	if ( iChaosTaxMoney < 0 )

  000f5	79 02		 jns	 SHORT $LN21@ShieldPoti@3

; 4057 : 	{
; 4058 : 		iChaosTaxMoney = 0;

  000f7	33 c0		 xor	 eax, eax
$LN21@ShieldPoti@3:

; 4059 : 	}
; 4060 : 
; 4061 : 	iChaosMixPrice += iChaosTaxMoney;

  000f9	03 f8		 add	 edi, eax

; 4062 : 
; 4063 : 	if ( iChaosMixPrice < 0 )

  000fb	79 02		 jns	 SHORT $LN4@ShieldPoti@3

; 4064 : 	{
; 4065 : 		iChaosMixPrice = 0;

  000fd	33 ff		 xor	 edi, edi
$LN4@ShieldPoti@3:

; 4066 : 	}
; 4067 : 
; 4068 : 	if ( lpObj->Money < iChaosMixPrice )

  000ff	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00105	3b cf		 cmp	 ecx, edi
  00107	7d 24		 jge	 SHORT $LN3@ShieldPoti@3

; 4069 : 	{
; 4070 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 4071 : 		
; 4072 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00109	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0010d	8b 06		 mov	 eax, DWORD PTR [esi]
  0010f	51		 push	 ecx
  00110	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00113	52		 push	 edx
  00114	50		 push	 eax
  00115	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00119	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4073 : 		lpObj->ChaosLock = FALSE;

  0011e	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 4074 : 
; 4075 : 		return;

  00128	e9 44 01 00 00	 jmp	 $LN23@ShieldPoti@3
$LN3@ShieldPoti@3:

; 4076 : 	}
; 4077 : 
; 4078 : 	lpObj->Money -= iChaosMixPrice;

  0012d	2b cf		 sub	 ecx, edi
  0012f	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 4079 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00135	50		 push	 eax
  00136	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0013b	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 4080 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00140	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00146	8b 16		 mov	 edx, DWORD PTR [esi]
  00148	51		 push	 ecx
  00149	52		 push	 edx
  0014a	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 4081 : 	
; 4082 : 	LogChaosItem(lpObj, "PotionMix][ShieldPotion Lv3 Mix");

  0014f	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00152	83 c4 08	 add	 esp, 8
  00155	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IMPOJLKH@PotionMix?$FN?$FLShieldPotion?5Lv3?5Mix?$AA@
  0015a	56		 push	 esi
  0015b	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 4083 : 	LogAddTD("[PotionMix][ShieldPotion Lv3 Mix] - Mix Start");

  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@PBOACDNC@?$FLPotionMix?$FN?$FLShieldPotion?5Lv3?5Mix@
  00165	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0016b	83 c4 04	 add	 esp, 4

; 4084 : 
; 4085 : 	int iRate = rand() % 100;

  0016e	e8 00 00 00 00	 call	 _rand
  00173	99		 cdq
  00174	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00179	f7 f9		 idiv	 ecx

; 4086 : 	iRate -= iCharmOfLuckCount;

  0017b	2b d3		 sub	 edx, ebx

; 4087 : 
; 4088 : 	if ( iRate < g_iShieldPotionLv3MixSuccessRate )

  0017d	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iShieldPotionLv3MixSuccessRate@@3HA ; g_iShieldPotionLv3MixSuccessRate
  00183	7d 70		 jge	 SHORT $LN2@ShieldPoti@3

; 4089 : 	{
; 4090 : 		int ItemNum = ITEMGET(14,37);
; 4091 : 
; 4092 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ItemNum, 0, 1, 0, 0, 0, lpObj->m_Index, 0, 0);

  00185	8b 06		 mov	 eax, DWORD PTR [esi]
  00187	6a 00		 push	 0
  00189	6a 00		 push	 0
  0018b	6a 00		 push	 0
  0018d	6a 00		 push	 0
  0018f	50		 push	 eax
  00190	6a 00		 push	 0
  00192	6a 00		 push	 0
  00194	6a 00		 push	 0
  00196	6a 01		 push	 1
  00198	6a 00		 push	 0
  0019a	68 25 1c 00 00	 push	 7205			; 00001c25H
  0019f	6a 00		 push	 0
  001a1	6a 00		 push	 0
  001a3	68 ff 00 00 00	 push	 255			; 000000ffH
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 4093 : 		::gObjInventoryCommit(lpObj->m_Index);

  001ae	8b 16		 mov	 edx, DWORD PTR [esi]
  001b0	52		 push	 edx
  001b1	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 4094 : 
; 4095 : 		LogAddTD("[ChaosMix][Shield Potion] Lv3 Potion Mix Success [%s][%s], Money(%d-%d), CharmRate : %d",
; 4096 : 			lpObj->AccountID, lpObj->Name, 	lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);

  001b6	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  001bc	83 c4 40	 add	 esp, 64			; 00000040H
  001bf	53		 push	 ebx
  001c0	57		 push	 edi
  001c1	50		 push	 eax
  001c2	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  001c5	51		 push	 ecx
  001c6	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  001c9	52		 push	 edx
  001ca	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@GFFMCKHC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001d5	83 c4 18	 add	 esp, 24			; 00000018H
  001d8	5f		 pop	 edi

; 4107 : 	}
; 4108 : 
; 4109 : 	lpObj->ChaosLock = FALSE;

  001d9	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001e3	5e		 pop	 esi
  001e4	5b		 pop	 ebx

; 4110 : }

  001e5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e8	33 cd		 xor	 ecx, ebp
  001ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c2 04 00	 ret	 4
$LN2@ShieldPoti@3:

; 4097 : 	}
; 4098 : 	else
; 4099 : 	{
; 4100 : 		ChaosBoxInit(lpObj);

  001f5	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f8	56		 push	 esi
  001f9	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 4101 : 		::GCUserChaosBoxSend(lpObj, 0);

  001fe	6a 00		 push	 0
  00200	56		 push	 esi
  00201	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 4102 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00206	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0020a	8b 16		 mov	 edx, DWORD PTR [esi]
  0020c	50		 push	 eax
  0020d	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00210	51		 push	 ecx
  00211	52		 push	 edx
  00212	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4103 : 
; 4104 : 		LogAddTD("[ChaosMix][Shield Potion] Lv3 Potion Mix [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 4105 : 			lpObj->AccountID, lpObj->Name, 	g_iShieldPotionLv3MixSuccessRate,
; 4106 : 			lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);

  00217	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0021d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_iShieldPotionLv3MixSuccessRate@@3HA ; g_iShieldPotionLv3MixSuccessRate
  00223	53		 push	 ebx
  00224	57		 push	 edi
  00225	50		 push	 eax
  00226	51		 push	 ecx
  00227	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  0022a	52		 push	 edx
  0022b	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0022e	50		 push	 eax
  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@FNMAJKJN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0023a	83 c4 30	 add	 esp, 48			; 00000030H
  0023d	5f		 pop	 edi

; 4107 : 	}
; 4108 : 
; 4109 : 	lpObj->ChaosLock = FALSE;

  0023e	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00248	5e		 pop	 esi
  00249	5b		 pop	 ebx

; 4110 : }

  0024a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024d	33 cd		 xor	 ecx, ebp
  0024f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00254	8b e5		 mov	 esp, ebp
  00256	5d		 pop	 ebp
  00257	c2 04 00	 ret	 4
$LN7@ShieldPoti@3:

; 4037 : 	{
; 4038 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  0025a	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0025e	8b 06		 mov	 eax, DWORD PTR [esi]
  00260	51		 push	 ecx
  00261	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00264	52		 push	 edx
  00265	50		 push	 eax
$LN22@ShieldPoti@3:
  00266	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4039 : 		lpObj->ChaosLock = FALSE;

  0026b	89 be 20 12 00
	00		 mov	 DWORD PTR [esi+4640], edi
$LN23@ShieldPoti@3:

; 4110 : }

  00271	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00274	83 c4 0c	 add	 esp, 12			; 0000000cH
  00277	5f		 pop	 edi
  00278	5e		 pop	 esi
  00279	33 cd		 xor	 ecx, ebp
  0027b	5b		 pop	 ebx
  0027c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 04 00	 ret	 4
?ShieldPotionLv3_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ShieldPotionLv3_Mix
_TEXT	ENDS
PUBLIC	?IsCondorItem@CChaosBox@@QAEHH@Z		; CChaosBox::IsCondorItem
; Function compile flags: /Ogtp
;	COMDAT ?IsCondorItem@CChaosBox@@QAEHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
?IsCondorItem@CChaosBox@@QAEHH@Z PROC			; CChaosBox::IsCondorItem, COMDAT
; _this$ = ecx

; 4113 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 : 	if( iType == iCondorStone ||
; 4115 : 		iType == iCondorFeather )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00006	3b 41 20	 cmp	 eax, DWORD PTR [ecx+32]
  00009	74 0b		 je	 SHORT $LN1@IsCondorIt
  0000b	3b 41 1c	 cmp	 eax, DWORD PTR [ecx+28]
  0000e	74 06		 je	 SHORT $LN1@IsCondorIt

; 4118 : 	}
; 4119 : return FALSE;

  00010	33 c0		 xor	 eax, eax

; 4120 : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN1@IsCondorIt:

; 4116 : 	{
; 4117 : 		return TRUE;

  00016	b8 01 00 00 00	 mov	 eax, 1

; 4120 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?IsCondorItem@CChaosBox@@QAEHH@Z ENDP			; CChaosBox::IsCondorItem
_TEXT	ENDS
PUBLIC	?Is1stLevelWing@CChaosBox@@QAEHH@Z		; CChaosBox::Is1stLevelWing
; Function compile flags: /Ogtp
;	COMDAT ?Is1stLevelWing@CChaosBox@@QAEHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
?Is1stLevelWing@CChaosBox@@QAEHH@Z PROC			; CChaosBox::Is1stLevelWing, COMDAT
; _this$ = ecx

; 4123 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4124 : 	if( iType == ITEMGET(12,0) ||
; 4125 : 		iType == ITEMGET(12,1) ||
; 4126 : 		iType == ITEMGET(12,2) ||
; 4127 : 		iType == ITEMGET(12,41) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00006	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  0000b	74 1b		 je	 SHORT $LN1@Is1stLevel
  0000d	3d 01 18 00 00	 cmp	 eax, 6145		; 00001801H
  00012	74 14		 je	 SHORT $LN1@Is1stLevel
  00014	3d 02 18 00 00	 cmp	 eax, 6146		; 00001802H
  00019	74 0d		 je	 SHORT $LN1@Is1stLevel
  0001b	3d 29 18 00 00	 cmp	 eax, 6185		; 00001829H
  00020	74 06		 je	 SHORT $LN1@Is1stLevel

; 4130 : 	}
; 4131 : return FALSE;

  00022	33 c0		 xor	 eax, eax

; 4132 : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN1@Is1stLevel:

; 4128 : 	{
; 4129 : 		return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 4132 : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Is1stLevelWing@CChaosBox@@QAEHH@Z ENDP			; CChaosBox::Is1stLevelWing
_TEXT	ENDS
PUBLIC	?Is2ndLevelWing@CChaosBox@@QAEHH@Z		; CChaosBox::Is2ndLevelWing
; Function compile flags: /Ogtp
;	COMDAT ?Is2ndLevelWing@CChaosBox@@QAEHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
?Is2ndLevelWing@CChaosBox@@QAEHH@Z PROC			; CChaosBox::Is2ndLevelWing, COMDAT
; _this$ = ecx

; 4135 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4136 : 	if( iType == ITEMGET(12,3) ||
; 4137 : 		iType == ITEMGET(12,4) ||
; 4138 : 		iType == ITEMGET(12,5) ||
; 4139 : 		iType == ITEMGET(12,6) ||
; 4140 : 		iType == ITEMGET(13,30) ||
; 4141 : 		iType == ITEMGET(12,42) ||
; 4142 : 		iType == ITEMGET(12,49) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00006	3d 03 18 00 00	 cmp	 eax, 6147		; 00001803H
  0000b	74 30		 je	 SHORT $LN1@Is2ndLevel
  0000d	3d 04 18 00 00	 cmp	 eax, 6148		; 00001804H
  00012	74 29		 je	 SHORT $LN1@Is2ndLevel
  00014	3d 05 18 00 00	 cmp	 eax, 6149		; 00001805H
  00019	74 22		 je	 SHORT $LN1@Is2ndLevel
  0001b	3d 06 18 00 00	 cmp	 eax, 6150		; 00001806H
  00020	74 1b		 je	 SHORT $LN1@Is2ndLevel
  00022	3d 1e 1a 00 00	 cmp	 eax, 6686		; 00001a1eH
  00027	74 14		 je	 SHORT $LN1@Is2ndLevel
  00029	3d 2a 18 00 00	 cmp	 eax, 6186		; 0000182aH
  0002e	74 0d		 je	 SHORT $LN1@Is2ndLevel
  00030	3d 31 18 00 00	 cmp	 eax, 6193		; 00001831H
  00035	74 06		 je	 SHORT $LN1@Is2ndLevel

; 4145 : 	}
; 4146 : return FALSE;

  00037	33 c0		 xor	 eax, eax

; 4147 : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN1@Is2ndLevel:

; 4143 : 	{
; 4144 : 		return TRUE;

  0003d	b8 01 00 00 00	 mov	 eax, 1

; 4147 : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?Is2ndLevelWing@CChaosBox@@QAEHH@Z ENDP			; CChaosBox::Is2ndLevelWing
_TEXT	ENDS
PUBLIC	?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions
; Function compile flags: /Ogtp
;	COMDAT ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_iLevel$ = 12						; size = 2
_iOption1$ = 16						; size = 1
_iOption2$ = 20						; size = 1
_iOption3$ = 24						; size = 1
_iSetOption$ = 28					; size = 1
_iExcOption$ = 32					; size = 1
?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z PROC ; CChaosBox::CheckItemOptions, COMDAT
; _this$ = ecx

; 4150 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4151 : 	if( lpItem == FALSE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 06		 jne	 SHORT $LN13@CheckItemO
$LN16@CheckItemO:

; 4152 : 	{
; 4153 : 		return false;

  0000a	33 c0		 xor	 eax, eax

; 4204 : }

  0000c	5d		 pop	 ebp
  0000d	c2 1c 00	 ret	 28			; 0000001cH
$LN13@CheckItemO:

; 4154 : 	}
; 4155 : 
; 4156 : 	if( iLevel != FALSE )

  00010	66 8b 4d 0c	 mov	 cx, WORD PTR _iLevel$[ebp]
  00014	66 85 c9	 test	 cx, cx
  00017	74 06		 je	 SHORT $LN11@CheckItemO

; 4157 : 	{
; 4158 : 		if( lpItem->m_Level < iLevel )

  00019	66 39 48 08	 cmp	 WORD PTR [eax+8], cx

; 4159 : 		{
; 4160 : 			return FALSE;

  0001d	7c eb		 jl	 SHORT $LN16@CheckItemO
$LN11@CheckItemO:

; 4161 : 		}
; 4162 : 	}
; 4163 : 
; 4164 : 	if( iOption1 != FALSE )

  0001f	8a 4d 10	 mov	 cl, BYTE PTR _iOption1$[ebp]
  00022	84 c9		 test	 cl, cl
  00024	74 08		 je	 SHORT $LN9@CheckItemO

; 4165 : 	{
; 4166 : 		if( lpItem->m_Option1 < iOption1 )

  00026	38 88 90 00 00
	00		 cmp	 BYTE PTR [eax+144], cl

; 4167 : 		{
; 4168 : 			return FALSE;

  0002c	72 dc		 jb	 SHORT $LN16@CheckItemO
$LN9@CheckItemO:

; 4169 : 		}
; 4170 : 	}
; 4171 : 
; 4172 : 	if( iOption2 != FALSE )

  0002e	8a 4d 14	 mov	 cl, BYTE PTR _iOption2$[ebp]
  00031	84 c9		 test	 cl, cl
  00033	74 08		 je	 SHORT $LN7@CheckItemO

; 4173 : 	{
; 4174 : 		if( lpItem->m_Option2 < iOption2 )

  00035	38 88 91 00 00
	00		 cmp	 BYTE PTR [eax+145], cl

; 4175 : 		{
; 4176 : 			return FALSE;

  0003b	72 cd		 jb	 SHORT $LN16@CheckItemO
$LN7@CheckItemO:

; 4177 : 		}
; 4178 : 	}
; 4179 : 
; 4180 : 	if( iOption3 != FALSE )

  0003d	8a 4d 18	 mov	 cl, BYTE PTR _iOption3$[ebp]
  00040	84 c9		 test	 cl, cl
  00042	74 08		 je	 SHORT $LN5@CheckItemO

; 4181 : 	{
; 4182 : 		if( lpItem->m_Option3 < iOption3 )

  00044	38 88 92 00 00
	00		 cmp	 BYTE PTR [eax+146], cl

; 4183 : 		{
; 4184 : 			return FALSE;

  0004a	72 be		 jb	 SHORT $LN16@CheckItemO
$LN5@CheckItemO:

; 4185 : 		}
; 4186 : 	}
; 4187 : 
; 4188 : 	if( iSetOption != FALSE )

  0004c	80 7d 1c 00	 cmp	 BYTE PTR _iSetOption$[ebp], 0
  00050	74 09		 je	 SHORT $LN3@CheckItemO

; 4189 : 	{
; 4190 : 		if( lpItem->m_SetOption == FALSE )

  00052	80 b8 aa 00 00
	00 00		 cmp	 BYTE PTR [eax+170], 0

; 4191 : 		{
; 4192 : 			return FALSE;

  00059	74 af		 je	 SHORT $LN16@CheckItemO
$LN3@CheckItemO:

; 4193 : 		}
; 4194 : 	}
; 4195 : 
; 4196 : 	if( iExcOption != FALSE )

  0005b	80 7d 20 00	 cmp	 BYTE PTR _iExcOption$[ebp], 0
  0005f	74 09		 je	 SHORT $LN1@CheckItemO

; 4197 : 	{
; 4198 : 		if( lpItem->m_NewOption == FALSE )

  00061	80 b8 93 00 00
	00 00		 cmp	 BYTE PTR [eax+147], 0

; 4199 : 		{
; 4200 : 			return FALSE;

  00068	74 a0		 je	 SHORT $LN16@CheckItemO
$LN1@CheckItemO:

; 4201 : 		}
; 4202 : 	}
; 4203 : return TRUE;

  0006a	b8 01 00 00 00	 mov	 eax, 1

; 4204 : }

  0006f	5d		 pop	 ebp
  00070	c2 1c 00	 ret	 28			; 0000001cH
?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ENDP ; CChaosBox::CheckItemOptions
_TEXT	ENDS
PUBLIC	??_C@_0FP@MMBGDNIO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ ; `string'
PUBLIC	??_C@_0DI@EGPAKGJE@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ ; `string'
PUBLIC	??_C@_0DL@JMGPLGGO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ ; `string'
PUBLIC	??_C@_0EE@GIAICFLK@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ ; `string'
PUBLIC	??_C@_0CM@BFLNDPMH@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Chao@ ; `string'
PUBLIC	??_C@_0BD@DBGJDJHA@Castle?5Special?5Mix?$AA@	; `string'
PUBLIC	??_C@_0ED@INAPNAEI@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ ; `string'
PUBLIC	??_C@_0DG@INONCDCO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CastleSpecialItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::CastleSpecialItemMix
EXTRN	?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z:PROC ; EventItemBagManager::OpenSpecial
EXTRN	?g_EventItemBagManager@@3VEventItemBagManager@@A:BYTE ; g_EventItemBagManager
EXTRN	?g_iCastleItemMixLimit@@3HA:DWORD		; g_iCastleItemMixLimit
EXTRN	?CheckCastleOwnerMember@CCastleSiege@@QAEHH@Z:PROC ; CCastleSiege::CheckCastleOwnerMember
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
;	COMDAT ??_C@_0FP@MMBGDNIO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
CONST	SEGMENT
??_C@_0FP@MMBGDNIO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ DB '['
	DB	'CastleSpecialMix] [%s][%s] Item Mix Failed - Item Error (DG:%'
	DB	'd, BGx10:%d, SGx10:%d, Other:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@EGPAKGJE@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
CONST	SEGMENT
??_C@_0DI@EGPAKGJE@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ DB '['
	DB	'CastleSpecialMix] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@JMGPLGGO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
CONST	SEGMENT
??_C@_0DL@JMGPLGGO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ DB '['
	DB	'CastleSpecialMix] [%s][%s] CBMix Success %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GIAICFLK@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
CONST	SEGMENT
??_C@_0EE@GIAICFLK@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ DB '['
	DB	'CastleSpecialMix] [%s][%s] Item Mix Failed - Lack of Money (%'
	DB	'd/%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BFLNDPMH@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Chao@
CONST	SEGMENT
??_C@_0CM@BFLNDPMH@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Chao@ DB '['
	DB	'CastleSpecialMix] [%s][%s] Chaos Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DBGJDJHA@Castle?5Special?5Mix?$AA@
CONST	SEGMENT
??_C@_0BD@DBGJDJHA@Castle?5Special?5Mix?$AA@ DB 'Castle Special Mix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@INAPNAEI@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
CONST	SEGMENT
??_C@_0ED@INAPNAEI@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ DB '['
	DB	'CastleSpecialMix] [%s][%s] Item Mix Failed - Mix Count Limit '
	DB	'Over', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@INONCDCO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
CONST	SEGMENT
??_C@_0DG@INONCDCO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ DB '['
	DB	'CastleSpecialMix] [%s][%s] Item Mix Failed - No Auth', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CastleSpecialItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
_iBlessGemMixCount$ = -32				; size = 4
_iInvalidItemCount$ = -28				; size = 4
_iDefendGemCount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?CastleSpecialItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::CastleSpecialItemMix, COMDAT
; _this$ = ecx

; 4209 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 4210 : 	lpObj->ChaosLock = TRUE;
; 4211 : 	int iDefendGemCount = 0;
; 4212 : 	int iBlessGemMixCount = 0;
; 4213 : 	int iSoulGemMixCount = 0;
; 4214 : 	int iInvalidItemCount =0;
; 4215 : 	int iChaosMoney = 0;
; 4216 : 
; 4217 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4218 : 	PHeadSetB((PBYTE)&pMsg,0x86,sizeof(pMsg));

  00016	6a 10		 push	 16			; 00000010H
  00018	33 ff		 xor	 edi, edi
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	89 7d e8	 mov	 DWORD PTR _iDefendGemCount$[ebp], edi
  00033	89 7d e0	 mov	 DWORD PTR _iBlessGemMixCount$[ebp], edi
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e4	 mov	 DWORD PTR _iInvalidItemCount$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 4219 : 	pMsg.Result = CB_ERROR;
; 4220 : 
; 4221 : 	if(g_CastleSiege.CheckCastleOwnerMember(lpObj->m_Index) != FALSE )

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	51		 push	 ecx
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0004b	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0004e	e8 00 00 00 00	 call	 ?CheckCastleOwnerMember@CCastleSiege@@QAEHH@Z ; CCastleSiege::CheckCastleOwnerMember
  00053	85 c0		 test	 eax, eax
  00055	0f 84 af 02 00
	00		 je	 $LN19@CastleSpec

; 4222 : 	{
; 4223 : 		if(lpObj->GuildStatus != G_MASTER)

  0005b	81 be 28 06 00
	00 80 00 00 00	 cmp	 DWORD PTR [esi+1576], 128 ; 00000080H
  00065	74 24		 je	 SHORT $LN18@CastleSpec

; 4224 : 		{
; 4225 : 			LogAddTD("[CastleSpecialMix] [%s][%s] Item Mix Failed - No Auth",
; 4226 : 				lpObj->AccountID,lpObj->Name);

  00067	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  0006a	52		 push	 edx
  0006b	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@INONCDCO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4227 : 			DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);

  0007a	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0007e	8b 06		 mov	 eax, DWORD PTR [esi]
  00080	51		 push	 ecx
  00081	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00084	52		 push	 edx
  00085	50		 push	 eax

; 4228 : 			lpObj->ChaosLock = FALSE;
; 4229 : 			return;

  00086	e9 9e 02 00 00	 jmp	 $LN26@CastleSpec
$LN18@CastleSpec:

; 4237 : 		lpObj->ChaosLock = FALSE;
; 4238 : 		return;
; 4239 : 	}
; 4240 : 
; 4241 : 	if(g_iCastleItemMixLimit <= 0)

  0008b	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?g_iCastleItemMixLimit@@3HA, edi ; g_iCastleItemMixLimit
  00091	7f 1d		 jg	 SHORT $LL16@CastleSpec

; 4242 : 	{
; 4243 : 		LogAddTD("[CastleSpecialMix] [%s][%s] Item Mix Failed - Mix Count Limit Over",
; 4244 : 			lpObj->AccountID,lpObj->Name);

  00093	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  00096	51		 push	 ecx
  00097	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  0009a	52		 push	 edx
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@INAPNAEI@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@

; 4245 : 		DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);
; 4246 : 		lpObj->ChaosLock = FALSE;
; 4247 : 		return;

  000a0	e9 72 02 00 00	 jmp	 $LN27@CastleSpec
  000a5	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL16@CastleSpec:

; 4251 : 	{
; 4252 : 		if(lpObj->pChaosBox[n].IsItem() == TRUE)

  000b0	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  000b6	03 cf		 add	 ecx, edi
  000b8	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000bd	83 f8 01	 cmp	 eax, 1
  000c0	75 4d		 jne	 SHORT $LN14@CastleSpec

; 4253 : 		{
; 4254 : 			if(lpObj->pChaosBox[n].m_Type == ITEMGET(12,30))

  000c2	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  000c8	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  000cd	ba 1e 18 00 00	 mov	 edx, 6174		; 0000181eH
  000d2	66 3b c2	 cmp	 ax, dx
  000d5	75 11		 jne	 SHORT $LN11@CastleSpec

; 4255 : 			{
; 4256 : 				iBlessGemMixCount += (lpObj->pChaosBox[n].m_Level + 1);

  000d7	0f bf 44 39 08	 movsx	 eax, WORD PTR [ecx+edi+8]
  000dc	8b 4d e0	 mov	 ecx, DWORD PTR _iBlessGemMixCount$[ebp]
  000df	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  000e3	89 55 e0	 mov	 DWORD PTR _iBlessGemMixCount$[ebp], edx
  000e6	eb 27		 jmp	 SHORT $LN14@CastleSpec
$LN11@CastleSpec:

; 4257 : 			}
; 4258 : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(12,31))

  000e8	ba 1f 18 00 00	 mov	 edx, 6175		; 0000181fH
  000ed	66 3b c2	 cmp	 ax, dx
  000f0	75 0b		 jne	 SHORT $LN9@CastleSpec

; 4259 : 			{
; 4260 : 				iSoulGemMixCount += (lpObj->pChaosBox[n].m_Level + 1);

  000f2	0f bf 44 39 08	 movsx	 eax, WORD PTR [ecx+edi+8]
  000f7	8d 5c 03 01	 lea	 ebx, DWORD PTR [ebx+eax+1]
  000fb	eb 12		 jmp	 SHORT $LN14@CastleSpec
$LN9@CastleSpec:

; 4261 : 			}
; 4262 : #ifdef __NOVUS__
; 4263 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(12, 138) && lpObj->pChaosBox[n].m_Level == 2 )
; 4264 : 			{
; 4265 : 				iDefendGemCount++;
; 4266 : 			}
; 4267 : #else
; 4268 : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(14,31))

  000fd	b9 1f 1c 00 00	 mov	 ecx, 7199		; 00001c1fH
  00102	66 3b c1	 cmp	 ax, cx
  00105	75 05		 jne	 SHORT $LN7@CastleSpec

; 4269 : 			{
; 4270 : 				iDefendGemCount++;

  00107	ff 45 e8	 inc	 DWORD PTR _iDefendGemCount$[ebp]

; 4271 : 			}
; 4272 : #endif
; 4273 : 			else

  0010a	eb 03		 jmp	 SHORT $LN14@CastleSpec
$LN7@CastleSpec:

; 4274 : 			{
; 4275 : 				iInvalidItemCount++;

  0010c	ff 45 e4	 inc	 DWORD PTR _iInvalidItemCount$[ebp]
$LN14@CastleSpec:

; 4248 : 	}
; 4249 : 
; 4250 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0010f	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00115	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0011b	7c 93		 jl	 SHORT $LL16@CastleSpec

; 4276 : 			}
; 4277 : 		}
; 4278 : 	}
; 4279 : 
; 4280 : 	if(iBlessGemMixCount != 3
; 4281 : 		|| iSoulGemMixCount != 3
; 4282 : #ifdef __NOVUS__
; 4283 : 		|| iDefendGemCount != 1
; 4284 : #else
; 4285 : 		|| iDefendGemCount != 30
; 4286 : #endif
; 4287 : 		|| iInvalidItemCount > 0)

  0011d	8b 45 e0	 mov	 eax, DWORD PTR _iBlessGemMixCount$[ebp]
  00120	83 f8 03	 cmp	 eax, 3
  00123	0f 85 93 01 00
	00		 jne	 $LN24@CastleSpec
  00129	3b d8		 cmp	 ebx, eax
  0012b	0f 85 8b 01 00
	00		 jne	 $LN24@CastleSpec
  00131	83 7d e8 1e	 cmp	 DWORD PTR _iDefendGemCount$[ebp], 30 ; 0000001eH
  00135	0f 85 81 01 00
	00		 jne	 $LN24@CastleSpec
  0013b	83 7d e4 00	 cmp	 DWORD PTR _iInvalidItemCount$[ebp], 0
  0013f	0f 8f 77 01 00
	00		 jg	 $LN24@CastleSpec

; 4293 : 		return;
; 4294 : 	}
; 4295 : 
; 4296 : 	LogChaosItem(lpObj,"Castle Special Mix");

  00145	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DBGJDJHA@Castle?5Special?5Mix?$AA@
  0014d	56		 push	 esi
  0014e	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 4297 : 	LogAddTD("[CastleSpecialMix] [%s][%s] Chaos Mix Start",
; 4298 : 		lpObj->AccountID,lpObj->Name);

  00153	8d 7e 5d	 lea	 edi, DWORD PTR [esi+93]
  00156	57		 push	 edi
  00157	8d 5e 52	 lea	 ebx, DWORD PTR [esi+82]
  0015a	53		 push	 ebx
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BFLNDPMH@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Chao@
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4299 : 
; 4300 : 	lpObj->ChaosSuccessRate = 100;
; 4301 : 	int nChaosNeedMoney = 1000000000;
; 4302 : 
; 4303 : 	if(lpObj->Money < nChaosNeedMoney)

  00166	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0016c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016f	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H
  00179	3d 00 ca 9a 3b	 cmp	 eax, 1000000000		; 3b9aca00H
  0017e	7d 48		 jge	 SHORT $LN3@CastleSpec

; 4304 : 	{
; 4305 : 		LogAddTD("[CastleSpecialMix] [%s][%s] Item Mix Failed - Lack of Money (%d/%d)",
; 4306 : 			lpObj->AccountID,lpObj->Name,lpObj->Money,nChaosNeedMoney);

  00180	68 00 ca 9a 3b	 push	 1000000000		; 3b9aca00H
  00185	50		 push	 eax
  00186	57		 push	 edi
  00187	53		 push	 ebx
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@GIAICFLK@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4307 : 		pMsg.Result = 2;
; 4308 : 		DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);

  00193	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	52		 push	 edx
  0019a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0019d	50		 push	 eax
  0019e	51		 push	 ecx
  0019f	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  001a3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001a8	83 c4 20	 add	 esp, 32			; 00000020H
  001ab	5f		 pop	 edi

; 4309 : 		lpObj->ChaosLock = FALSE;

  001ac	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001b6	5e		 pop	 esi
  001b7	5b		 pop	 ebx

; 4340 : }

  001b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bb	33 cd		 xor	 ecx, ebp
  001bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c2 04 00	 ret	 4
$LN3@CastleSpec:

; 4310 : 		return;
; 4311 : 	}
; 4312 : 
; 4313 : 	lpObj->Money -= nChaosNeedMoney;
; 4314 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  001c8	8b 16		 mov	 edx, DWORD PTR [esi]
  001ca	05 00 36 65 c4	 add	 eax, -1000000000	; c4653600H
  001cf	50		 push	 eax
  001d0	52		 push	 edx
  001d1	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  001d7	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001dc	83 c4 08	 add	 esp, 8

; 4315 : 
; 4316 : 	if(rand() % 100 < lpObj->ChaosSuccessRate)

  001df	e8 00 00 00 00	 call	 _rand
  001e4	99		 cdq
  001e5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001ea	f7 f9		 idiv	 ecx
  001ec	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001f2	7d 66		 jge	 SHORT $LN2@CastleSpec

; 4317 : 	{
; 4318 : #if( __4GAMERS__ == 1 )
; 4319 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 4320 : #endif
; 4321 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::CastleMix, lpObj->m_Index, 255, 0, 0);

  001f4	8b 16		 mov	 edx, DWORD PTR [esi]
  001f6	6a 00		 push	 0
  001f8	6a 00		 push	 0
  001fa	68 ff 00 00 00	 push	 255			; 000000ffH
  001ff	52		 push	 edx
  00200	6a 00		 push	 0
  00202	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  00207	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial

; 4322 : 		gObjInventoryCommit(lpObj->m_Index);

  0020c	8b 06		 mov	 eax, DWORD PTR [esi]
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 4323 : 		LogAddTD("[CastleSpecialMix] [%s][%s] CBMix Success %d Money : %d-%d",
; 4324 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,nChaosNeedMoney);

  00214	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0021a	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00220	68 00 ca 9a 3b	 push	 1000000000		; 3b9aca00H
  00225	51		 push	 ecx
  00226	52		 push	 edx
  00227	57		 push	 edi
  00228	53		 push	 ebx
  00229	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@JMGPLGGO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00234	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4325 : 		g_iCastleItemMixLimit--;

  00237	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?g_iCastleItemMixLimit@@3HA ; g_iCastleItemMixLimit
  0023d	5f		 pop	 edi

; 4337 : 	}
; 4338 : 
; 4339 : 	lpObj->ChaosLock = FALSE;

  0023e	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00248	5e		 pop	 esi
  00249	5b		 pop	 ebx

; 4340 : }

  0024a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024d	33 cd		 xor	 ecx, ebp
  0024f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00254	8b e5		 mov	 esp, ebp
  00256	5d		 pop	 ebp
  00257	c2 04 00	 ret	 4
$LN2@CastleSpec:

; 4326 : 	}
; 4327 : 	else
; 4328 : 	{
; 4329 : #if( __4GAMERS__ == 1 )
; 4330 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 4331 : #endif
; 4332 : 		ChaosBoxInit(lpObj);

  0025a	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025d	56		 push	 esi
  0025e	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 4333 : 		GCUserChaosBoxSend(lpObj,1);

  00263	6a 01		 push	 1
  00265	56		 push	 esi
  00266	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 4334 : 		DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);

  0026b	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0026f	8b 16		 mov	 edx, DWORD PTR [esi]
  00271	50		 push	 eax
  00272	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00275	51		 push	 ecx
  00276	52		 push	 edx
  00277	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4335 : 		LogAddTD("[CastleSpecialMix] [%s][%s] CBMix Fail %d Money : %d-%d",
; 4336 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,nChaosNeedMoney);

  0027c	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00282	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00288	68 00 ca 9a 3b	 push	 1000000000		; 3b9aca00H
  0028d	50		 push	 eax
  0028e	51		 push	 ecx
  0028f	57		 push	 edi
  00290	53		 push	 ebx
  00291	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EGPAKGJE@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
  00296	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0029c	83 c4 2c	 add	 esp, 44			; 0000002cH
  0029f	5f		 pop	 edi

; 4337 : 	}
; 4338 : 
; 4339 : 	lpObj->ChaosLock = FALSE;

  002a0	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  002aa	5e		 pop	 esi
  002ab	5b		 pop	 ebx

; 4340 : }

  002ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002af	33 cd		 xor	 ecx, ebp
  002b1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b6	8b e5		 mov	 esp, ebp
  002b8	5d		 pop	 ebp
  002b9	c2 04 00	 ret	 4
$LN24@CastleSpec:

; 4288 : 	{
; 4289 : 		LogAddTD("[CastleSpecialMix] [%s][%s] Item Mix Failed - Item Error (DG:%d, BGx10:%d, SGx10:%d, Other:%d)",
; 4290 : 			lpObj->AccountID,lpObj->Name,iBlessGemMixCount,iSoulGemMixCount,iDefendGemCount,iInvalidItemCount);

  002bc	8b 55 e4	 mov	 edx, DWORD PTR _iInvalidItemCount$[ebp]
  002bf	8b 4d e8	 mov	 ecx, DWORD PTR _iDefendGemCount$[ebp]
  002c2	52		 push	 edx
  002c3	51		 push	 ecx
  002c4	53		 push	 ebx
  002c5	50		 push	 eax
  002c6	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  002c9	52		 push	 edx
  002ca	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  002cd	50		 push	 eax
  002ce	68 00 00 00 00	 push	 OFFSET ??_C@_0FP@MMBGDNIO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
  002d3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4291 : 		DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);

  002d9	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  002dd	8b 06		 mov	 eax, DWORD PTR [esi]
  002df	51		 push	 ecx
  002e0	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  002e3	52		 push	 edx
  002e4	50		 push	 eax
  002e5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  002ea	83 c4 28	 add	 esp, 40			; 00000028H
  002ed	5f		 pop	 edi

; 4292 : 		lpObj->ChaosLock = FALSE;

  002ee	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  002f8	5e		 pop	 esi
  002f9	5b		 pop	 ebx

; 4340 : }

  002fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002fd	33 cd		 xor	 ecx, ebp
  002ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00304	8b e5		 mov	 esp, ebp
  00306	5d		 pop	 ebp
  00307	c2 04 00	 ret	 4
$LN19@CastleSpec:

; 4230 : 		}
; 4231 : 	}
; 4232 : 	else
; 4233 : 	{
; 4234 : 		LogAddTD("[CastleSpecialMix] [%s][%s] Item Mix Failed - No Auth",
; 4235 : 			lpObj->AccountID,lpObj->Name);

  0030a	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  0030d	51		 push	 ecx
  0030e	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  00311	52		 push	 edx
  00312	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@INONCDCO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
$LN27@CastleSpec:
  00317	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4236 : 		DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);

  0031d	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00321	8b 16		 mov	 edx, DWORD PTR [esi]
  00323	50		 push	 eax
  00324	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00327	51		 push	 ecx
  00328	52		 push	 edx
$LN26@CastleSpec:
  00329	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4340 : }

  0032e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00331	83 c4 18	 add	 esp, 24			; 00000018H
  00334	89 be 20 12 00
	00		 mov	 DWORD PTR [esi+4640], edi
  0033a	5f		 pop	 edi
  0033b	5e		 pop	 esi
  0033c	33 cd		 xor	 ecx, ebp
  0033e	5b		 pop	 ebx
  0033f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00344	8b e5		 mov	 esp, ebp
  00346	5d		 pop	 ebp
  00347	c2 04 00	 ret	 4
?CastleSpecialItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::CastleSpecialItemMix
_TEXT	ENDS
PUBLIC	?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z	; CChaosBox::RandomLevelDown
; Function compile flags: /Ogtp
;	COMDAT ?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z PROC	; CChaosBox::RandomLevelDown, COMDAT
; _this$ = ecx

; 4853 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4854 : 	if( lpItem == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 70		 je	 SHORT $LN4@RandomLeve

; 4855 : 		return;
; 4856 : 
; 4857 : 	if( rand()%2 < 1 )

  0000b	e8 00 00 00 00	 call	 _rand
  00010	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00015	79 05		 jns	 SHORT $LN6@RandomLeve
  00017	48		 dec	 eax
  00018	83 c8 fe	 or	 eax, -2			; fffffffeH
  0001b	40		 inc	 eax
$LN6@RandomLeve:
  0001c	83 f8 01	 cmp	 eax, 1
  0001f	7d 07		 jge	 SHORT $LN2@RandomLeve

; 4858 : 	{
; 4859 : 		lpItem->m_Level -= 2;

  00021	66 83 46 08 fe	 add	 WORD PTR [esi+8], -2	; fffffffeH

; 4860 : 	}
; 4861 : 	else

  00026	eb 05		 jmp	 SHORT $LN1@RandomLeve
$LN2@RandomLeve:

; 4862 : 	{
; 4863 : 		lpItem->m_Level -= 3;

  00028	66 83 46 08 fd	 add	 WORD PTR [esi+8], -3	; fffffffdH
$LN1@RandomLeve:

; 4864 : 	}
; 4865 : 
; 4866 : 	lpItem->m_Option3 = 0;
; 4867 : 	lpItem->Convert(lpItem->m_Type,lpItem->m_Option1,lpItem->m_Option2,lpItem->m_Option3,lpItem->m_NewOption,lpItem->m_SetOption,lpItem->m_ItemOptionEx, lpItem->m_SocketOption, lpItem->m_SocketBonus,3);

  0002d	0f b6 86 c7 00
	00 00		 movzx	 eax, BYTE PTR [esi+199]
  00034	0f b6 96 c6 00
	00 00		 movzx	 edx, BYTE PTR [esi+198]
  0003b	6a 03		 push	 3
  0003d	50		 push	 eax
  0003e	0f b6 86 aa 00
	00 00		 movzx	 eax, BYTE PTR [esi+170]
  00045	8d 8e c8 00 00
	00		 lea	 ecx, DWORD PTR [esi+200]
  0004b	51		 push	 ecx
  0004c	0f b6 8e 93 00
	00 00		 movzx	 ecx, BYTE PTR [esi+147]
  00053	52		 push	 edx
  00054	0f b6 96 91 00
	00 00		 movzx	 edx, BYTE PTR [esi+145]
  0005b	50		 push	 eax
  0005c	0f b6 86 90 00
	00 00		 movzx	 eax, BYTE PTR [esi+144]
  00063	51		 push	 ecx
  00064	0f bf 4e 06	 movsx	 ecx, WORD PTR [esi+6]
  00068	6a 00		 push	 0
  0006a	52		 push	 edx
  0006b	50		 push	 eax
  0006c	51		 push	 ecx
  0006d	8b ce		 mov	 ecx, esi
  0006f	c6 86 92 00 00
	00 00		 mov	 BYTE PTR [esi+146], 0
  00076	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert
$LN4@RandomLeve:
  0007b	5e		 pop	 esi

; 4868 : }

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z ENDP	; CChaosBox::RandomLevelDown
_TEXT	ENDS
PUBLIC	??_C@_0IK@DOPMBJCB@?$FLCashShop?$FN?$FLChaosCardMix?$FN?5?9?5User?$CI@ ; `string'
PUBLIC	??_C@_0DO@IIKCCCHD@?$FLChaosMix?$FN?$FLChaosCardMix?$FN?5Chaos?5C@ ; `string'
PUBLIC	??_C@_0EO@BNKLGMLJ@?$FLChaosMix?$FN?$FLLotteryItemMix?$FN?5Lotte@ ; `string'
PUBLIC	??_C@_0O@CJDOCADP@ChaosCardMini?$AA@		; `string'
PUBLIC	??_C@_0O@LHLDBNJL@ChaosCardRare?$AA@		; `string'
PUBLIC	??_C@_0O@PAMPMNGB@ChaosCardGold?$AA@		; `string'
PUBLIC	??_C@_09KIGHELLC@ChaosCard?$AA@			; `string'
PUBLIC	??_C@_0M@JCBFJDIJ@CashLottery?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LotteryItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LotteryItemMix
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?GetItem@CCashLottery@@QAEHPBDPAVCItem@@@Z:PROC	; CCashLottery::GetItem
EXTRN	?g_Lottery@@3VCCashLottery@@A:BYTE		; g_Lottery
EXTRN	?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z:PROC ; CheckInventoryEmptySpace
;	COMDAT ??_C@_0IK@DOPMBJCB@?$FLCashShop?$FN?$FLChaosCardMix?$FN?5?9?5User?$CI@
CONST	SEGMENT
??_C@_0IK@DOPMBJCB@?$FLCashShop?$FN?$FLChaosCardMix?$FN?5?9?5User?$CI@ DB '['
	DB	'CashShop][ChaosCardMix] - User(ID:%s,Name:%s) Item(Name:%s,Ty'
	DB	'pe:%d,Level:%d,Dur:%d,Skill:%d,Luck:%d,AddOption:%d,Ex:(%d,%d'
	DB	',%d,%d,%d,%d))', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@IIKCCCHD@?$FLChaosMix?$FN?$FLChaosCardMix?$FN?5Chaos?5C@
CONST	SEGMENT
??_C@_0DO@IIKCCCHD@?$FLChaosMix?$FN?$FLChaosCardMix?$FN?5Chaos?5C@ DB '[C'
	DB	'haosMix][ChaosCardMix] Chaos Card Item Mix Success [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@BNKLGMLJ@?$FLChaosMix?$FN?$FLLotteryItemMix?$FN?5Lotte@
CONST	SEGMENT
??_C@_0EO@BNKLGMLJ@?$FLChaosMix?$FN?$FLLotteryItemMix?$FN?5Lotte@ DB '[Ch'
	DB	'aosMix][LotteryItemMix] Lottery Item Mix Failed. Can''t Get I'
	DB	'tem from List.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CJDOCADP@ChaosCardMini?$AA@
CONST	SEGMENT
??_C@_0O@CJDOCADP@ChaosCardMini?$AA@ DB 'ChaosCardMini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LHLDBNJL@ChaosCardRare?$AA@
CONST	SEGMENT
??_C@_0O@LHLDBNJL@ChaosCardRare?$AA@ DB 'ChaosCardRare', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PAMPMNGB@ChaosCardGold?$AA@
CONST	SEGMENT
??_C@_0O@PAMPMNGB@ChaosCardGold?$AA@ DB 'ChaosCardGold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KIGHELLC@ChaosCard?$AA@
CONST	SEGMENT
??_C@_09KIGHELLC@ChaosCard?$AA@ DB 'ChaosCard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCBFJDIJ@CashLottery?$AA@
CONST	SEGMENT
??_C@_0M@JCBFJDIJ@CashLottery?$AA@ DB 'CashLottery', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LotteryItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iOtherItemCount$ = -252				; size = 4
tv375 = -248						; size = 4
tv373 = -248						; size = 4
_this$ = -248						; size = 4
tv401 = -244						; size = 4
tv378 = -242						; size = 2
_LotteryItem$ = -240					; size = 212
_pMsg$ = -28						; size = 16
_btExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?LotteryItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::LotteryItemMix, COMDAT
; _this$ = ecx

; 4871 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00018	57		 push	 edi

; 4872 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4873 : 
; 4874 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00019	6a 10		 push	 16			; 00000010H
  0001b	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001e	68 86 00 00 00	 push	 134			; 00000086H
  00023	50		 push	 eax
  00024	89 8d 08 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  0002a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 4875 : 	pMsg.Result = CB_ERROR;
; 4876 : 
; 4877 : 	int iChaosCardCount = 0;

  0002f	33 ff		 xor	 edi, edi
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	c6 45 e7 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00038	33 db		 xor	 ebx, ebx

; 4878 : 	int iOtherItemCount = 0;

  0003a	89 bd 04 ff ff
	ff		 mov	 DWORD PTR _iOtherItemCount$[ebp], edi

; 4884 : 	{
; 4885 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00040	89 bd 0c ff ff
	ff		 mov	 DWORD PTR tv401[ebp], edi
  00046	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL29@LotteryIte:
  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 8d 0c ff ff
	ff		 add	 ecx, DWORD PTR tv401[ebp]
  0005c	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00061	83 f8 01	 cmp	 eax, 1
  00064	75 5f		 jne	 SHORT $LN23@LotteryIte

; 4886 : 		{
; 4887 : 			if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,54) )

  00066	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0006c	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR tv401[ebp]
  00072	0f b7 44 0a 06	 movzx	 eax, WORD PTR [edx+ecx+6]
  00077	b9 36 1c 00 00	 mov	 ecx, 7222		; 00001c36H
  0007c	66 3b c1	 cmp	 ax, cx
  0007f	75 08		 jne	 SHORT $LN20@LotteryIte

; 4888 : 			{
; 4889 : 				iChaosCardType = 1;

  00081	bf 01 00 00 00	 mov	 edi, 1

; 4890 : 				iChaosCardCount++;

  00086	43		 inc	 ebx
  00087	eb 3c		 jmp	 SHORT $LN23@LotteryIte
$LN20@LotteryIte:

; 4891 : 			}
; 4892 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,92) )

  00089	ba 5c 1c 00 00	 mov	 edx, 7260		; 00001c5cH
  0008e	66 3b c2	 cmp	 ax, dx
  00091	75 08		 jne	 SHORT $LN18@LotteryIte

; 4893 : 			{
; 4894 : 				iChaosCardType = 2;

  00093	bf 02 00 00 00	 mov	 edi, 2

; 4895 : 				iChaosCardCount++;

  00098	43		 inc	 ebx
  00099	eb 2a		 jmp	 SHORT $LN23@LotteryIte
$LN18@LotteryIte:

; 4896 : 			}
; 4897 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,93) )

  0009b	b9 5d 1c 00 00	 mov	 ecx, 7261		; 00001c5dH
  000a0	66 3b c1	 cmp	 ax, cx
  000a3	75 08		 jne	 SHORT $LN16@LotteryIte

; 4898 : 			{
; 4899 : 				iChaosCardType = 3;

  000a5	bf 03 00 00 00	 mov	 edi, 3

; 4900 : 				iChaosCardCount++;

  000aa	43		 inc	 ebx
  000ab	eb 18		 jmp	 SHORT $LN23@LotteryIte
$LN16@LotteryIte:

; 4901 : 			}
; 4902 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,95) )

  000ad	ba 5f 1c 00 00	 mov	 edx, 7263		; 00001c5fH
  000b2	66 3b c2	 cmp	 ax, dx
  000b5	75 08		 jne	 SHORT $LN14@LotteryIte

; 4903 : 			{
; 4904 : 				iChaosCardType = 4;

  000b7	bf 04 00 00 00	 mov	 edi, 4

; 4905 : 				iChaosCardCount++;

  000bc	43		 inc	 ebx

; 4906 : 			}
; 4907 : 			else

  000bd	eb 06		 jmp	 SHORT $LN23@LotteryIte
$LN14@LotteryIte:

; 4908 : 			{
; 4909 : 				iOtherItemCount++;

  000bf	ff 85 04 ff ff
	ff		 inc	 DWORD PTR _iOtherItemCount$[ebp]
$LN23@LotteryIte:

; 4879 : 	int iHeight = 0;
; 4880 : 	int iWidth = 0;
; 4881 : 	int iChaosCardType = 0;
; 4882 : 
; 4883 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000c5	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv401[ebp]
  000cb	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  000d0	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv401[ebp], eax
  000d6	3d 80 1a 00 00	 cmp	 eax, 6784		; 00001a80H
  000db	0f 8c 6f ff ff
	ff		 jl	 $LL29@LotteryIte

; 4910 : 			}
; 4911 : 		}
; 4912 : 	}
; 4913 : 
; 4914 : 	if( iOtherItemCount > 0 || iChaosCardCount != 1 )

  000e1	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _iOtherItemCount$[ebp], 0
  000e8	0f 8f 06 02 00
	00		 jg	 $LN11@LotteryIte
  000ee	83 fb 01	 cmp	 ebx, 1
  000f1	0f 85 fd 01 00
	00		 jne	 $LN11@LotteryIte

; 4917 : 		lpObj->ChaosLock = FALSE;
; 4918 : 		return;
; 4919 : 	}
; 4920 : 
; 4921 : 	if( iChaosCardType == 0 )

  000f7	85 ff		 test	 edi, edi

; 4922 : 	{
; 4923 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 4924 : 		lpObj->ChaosLock = FALSE;
; 4925 : 		return;

  000f9	74 26		 je	 SHORT $LN33@LotteryIte

; 4926 : 	}
; 4927 : 
; 4928 : 	LogChaosItem(lpObj, "CashLottery");

  000fb	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCBFJDIJ@CashLottery?$AA@
  00106	56		 push	 esi
  00107	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 4929 : 	iHeight = 4;
; 4930 : 	iWidth = 2;
; 4931 : 
; 4932 : 	if( !CheckInventoryEmptySpace(lpObj,iHeight,iWidth) )

  0010c	6a 02		 push	 2
  0010e	6a 04		 push	 4
  00110	56		 push	 esi
  00111	e8 00 00 00 00	 call	 ?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z ; CheckInventoryEmptySpace
  00116	83 c4 0c	 add	 esp, 12			; 0000000cH
  00119	85 c0		 test	 eax, eax
  0011b	75 15		 jne	 SHORT $LN9@LotteryIte

; 4933 : 	{
; 4934 : 		pMsg.Result = 0xF1;

  0011d	c6 45 e7 f1	 mov	 BYTE PTR _pMsg$[ebp+3], 241 ; 000000f1H
$LN33@LotteryIte:

; 4935 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00121	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00125	8b 16		 mov	 edx, DWORD PTR [esi]
  00127	50		 push	 eax
  00128	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0012b	51		 push	 ecx
  0012c	52		 push	 edx

; 4936 : 		lpObj->ChaosLock = FALSE;
; 4937 : 		return;

  0012d	e9 ce 01 00 00	 jmp	 $LN31@LotteryIte
$LN9@LotteryIte:

; 4938 : 	}
; 4939 : 
; 4940 : 	CItem LotteryItem;

  00132	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _LotteryItem$[ebp]
  00138	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 4941 : 
; 4942 : 	if( iChaosCardType == 1 )

  0013d	83 ff 01	 cmp	 edi, 1
  00140	75 0e		 jne	 SHORT $LN8@LotteryIte

; 4943 : 	{
; 4944 : 		g_Lottery.GetItem("ChaosCard",&LotteryItem);

  00142	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _LotteryItem$[ebp]
  00148	50		 push	 eax
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_09KIGHELLC@ChaosCard?$AA@
  0014e	eb 37		 jmp	 SHORT $LN32@LotteryIte
$LN8@LotteryIte:

; 4945 : 	}
; 4946 : 	else if( iChaosCardType == 2 )

  00150	83 ff 02	 cmp	 edi, 2
  00153	75 0e		 jne	 SHORT $LN6@LotteryIte

; 4947 : 	{
; 4948 : 		g_Lottery.GetItem("ChaosCardGold",&LotteryItem);

  00155	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _LotteryItem$[ebp]
  0015b	51		 push	 ecx
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PAMPMNGB@ChaosCardGold?$AA@
  00161	eb 24		 jmp	 SHORT $LN32@LotteryIte
$LN6@LotteryIte:

; 4949 : 	}
; 4950 : 	else if( iChaosCardType == 3 )

  00163	83 ff 03	 cmp	 edi, 3
  00166	75 0e		 jne	 SHORT $LN4@LotteryIte

; 4951 : 	{
; 4952 : 		g_Lottery.GetItem("ChaosCardRare",&LotteryItem);

  00168	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR _LotteryItem$[ebp]
  0016e	52		 push	 edx
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LHLDBNJL@ChaosCardRare?$AA@
  00174	eb 11		 jmp	 SHORT $LN32@LotteryIte
$LN4@LotteryIte:

; 4953 : 	}
; 4954 : 	else if( iChaosCardType == 4 )

  00176	83 ff 04	 cmp	 edi, 4
  00179	75 16		 jne	 SHORT $LN2@LotteryIte

; 4955 : 	{
; 4956 : 		g_Lottery.GetItem("ChaosCardMini",&LotteryItem);

  0017b	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _LotteryItem$[ebp]
  00181	50		 push	 eax
  00182	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CJDOCADP@ChaosCardMini?$AA@
$LN32@LotteryIte:
  00187	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Lottery@@3VCCashLottery@@A ; g_Lottery
  0018c	e8 00 00 00 00	 call	 ?GetItem@CCashLottery@@QAEHPBDPAVCItem@@@Z ; CCashLottery::GetItem
$LN2@LotteryIte:

; 4957 : 	}
; 4958 : 
; 4959 : 	if( LotteryItem.IsItem() == FALSE )

  00191	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _LotteryItem$[ebp]
  00197	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0019c	85 c0		 test	 eax, eax
  0019e	75 3c		 jne	 SHORT $LN1@LotteryIte

; 4960 : 	{
; 4961 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  001a0	0f b6 4d e5	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  001a4	8b 06		 mov	 eax, DWORD PTR [esi]
  001a6	51		 push	 ecx
  001a7	8d 55 e4	 lea	 edx, DWORD PTR _pMsg$[ebp]
  001aa	52		 push	 edx
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4962 : 		lpObj->ChaosLock = FALSE;
; 4963 : 		LogAddTD("[ChaosMix][LotteryItemMix] Lottery Item Mix Failed. Can't Get Item from List.");

  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@BNKLGMLJ@?$FLChaosMix?$FN?$FLLotteryItemMix?$FN?5Lotte@
  001b6	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001c6	83 c4 10	 add	 esp, 16			; 00000010H
  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx

; 4983 : }

  001cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cf	33 cd		 xor	 ecx, ebp
  001d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c2 04 00	 ret	 4
$LN1@LotteryIte:

; 4964 : 		return;
; 4965 : 	}
; 4966 : 
; 4967 : 	ItemSerialCreateSend(lpObj->m_Index,255,0,0,LotteryItem.m_Type,LotteryItem.m_Level,(BYTE)LotteryItem.m_Durability,LotteryItem.m_Option1,
; 4968 : 		LotteryItem.m_Option2,LotteryItem.m_Option3,lpObj->m_Index,LotteryItem.m_NewOption,0);

  001dc	8b 55 a3	 mov	 edx, DWORD PTR _LotteryItem$[ebp+147]
  001df	d9 85 34 ff ff
	ff		 fld	 DWORD PTR _LotteryItem$[ebp+36]
  001e5	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001e7	d9 bd 0e ff ff
	ff		 fnstcw	 WORD PTR tv378[ebp]
  001ed	8b 45 a2	 mov	 eax, DWORD PTR _LotteryItem$[ebp+146]
  001f0	6a 00		 push	 0
  001f2	6a 00		 push	 0
  001f4	6a 00		 push	 0
  001f6	52		 push	 edx
  001f7	8b 55 a1	 mov	 edx, DWORD PTR _LotteryItem$[ebp+145]
  001fa	51		 push	 ecx
  001fb	50		 push	 eax
  001fc	8b 45 a0	 mov	 eax, DWORD PTR _LotteryItem$[ebp+144]
  001ff	52		 push	 edx
  00200	50		 push	 eax
  00201	0f b7 85 0e ff
	ff ff		 movzx	 eax, WORD PTR tv378[ebp]
  00208	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0020d	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv375[ebp], eax
  00213	d9 ad 08 ff ff
	ff		 fldcw	 WORD PTR tv375[ebp]
  00219	db 9d 08 ff ff
	ff		 fistp	 DWORD PTR tv373[ebp]
  0021f	8a 95 08 ff ff
	ff		 mov	 dl, BYTE PTR tv373[ebp]
  00225	0f b6 c2	 movzx	 eax, dl
  00228	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _LotteryItem$[ebp+8]
  0022e	d9 ad 0e ff ff
	ff		 fldcw	 WORD PTR tv378[ebp]
  00234	50		 push	 eax
  00235	0f bf 85 16 ff
	ff ff		 movsx	 eax, WORD PTR _LotteryItem$[ebp+6]
  0023c	52		 push	 edx
  0023d	50		 push	 eax
  0023e	6a 00		 push	 0
  00240	6a 00		 push	 0
  00242	68 ff 00 00 00	 push	 255			; 000000ffH
  00247	51		 push	 ecx
  00248	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 4969 : 	gObjInventoryCommit(lpObj->m_Index);

  0024d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0024f	51		 push	 ecx
  00250	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00255	83 c4 40	 add	 esp, 64			; 00000040H

; 4970 : 
; 4971 : 	LogAddTD("[ChaosMix][ChaosCardMix] Chaos Card Item Mix Success [%s][%s]",
; 4972 : 		lpObj->AccountID,lpObj->Name);

  00258	8d 7e 5d	 lea	 edi, DWORD PTR [esi+93]
  0025b	57		 push	 edi
  0025c	8d 5e 52	 lea	 ebx, DWORD PTR [esi+82]
  0025f	53		 push	 ebx
  00260	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@IIKCCCHD@?$FLChaosMix?$FN?$FLChaosCardMix?$FN?5Chaos?5C@
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4973 : 
; 4974 : 	BYTE btExOption[MAX_EXOPTION_SIZE];
; 4975 : 
; 4976 : 	ItemIsBufExOption(btExOption, &LotteryItem);

  0026b	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR _LotteryItem$[ebp]
  00271	52		 push	 edx
  00272	8d 45 f4	 lea	 eax, DWORD PTR _btExOption$[ebp]
  00275	50		 push	 eax
  00276	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 4977 : 	
; 4978 : 	LogAddTD("[CashShop][ChaosCardMix] - User(ID:%s,Name:%s) Item(Name:%s,Type:%d,Level:%d,Dur:%d,Skill:%d,Luck:%d,AddOption:%d,Ex:(%d,%d,%d,%d,%d,%d))",
; 4979 : 		lpObj->AccountID, lpObj->Name, ItemAttribute[LotteryItem.m_Type].Name,
; 4980 : 		LotteryItem.m_Type, LotteryItem.m_Level, (int)LotteryItem.m_Durability,
; 4981 : 		LotteryItem.m_Option1, LotteryItem.m_Option2, LotteryItem.m_Option3,
; 4982 : 		btExOption[0], btExOption[1], btExOption[2], btExOption[3], btExOption[4], btExOption[5]);

  0027b	d9 85 34 ff ff
	ff		 fld	 DWORD PTR _LotteryItem$[ebp+36]
  00281	0f b6 4d f9	 movzx	 ecx, BYTE PTR _btExOption$[ebp+5]
  00285	0f b6 55 f8	 movzx	 edx, BYTE PTR _btExOption$[ebp+4]
  00289	0f b6 45 f7	 movzx	 eax, BYTE PTR _btExOption$[ebp+3]
  0028d	0f bf b5 16 ff
	ff ff		 movsx	 esi, WORD PTR _LotteryItem$[ebp+6]
  00294	83 c4 14	 add	 esp, 20			; 00000014H
  00297	51		 push	 ecx
  00298	0f b6 4d f6	 movzx	 ecx, BYTE PTR _btExOption$[ebp+2]
  0029c	52		 push	 edx
  0029d	0f b6 55 f5	 movzx	 edx, BYTE PTR _btExOption$[ebp+1]
  002a1	50		 push	 eax
  002a2	0f b6 45 f4	 movzx	 eax, BYTE PTR _btExOption$[ebp]
  002a6	51		 push	 ecx
  002a7	0f b6 4d a2	 movzx	 ecx, BYTE PTR _LotteryItem$[ebp+146]
  002ab	52		 push	 edx
  002ac	0f b6 55 a1	 movzx	 edx, BYTE PTR _LotteryItem$[ebp+145]
  002b0	50		 push	 eax
  002b1	0f b6 45 a0	 movzx	 eax, BYTE PTR _LotteryItem$[ebp+144]
  002b5	51		 push	 ecx
  002b6	52		 push	 edx
  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 __ftol2_sse
  002bd	0f bf 8d 18 ff
	ff ff		 movsx	 ecx, WORD PTR _LotteryItem$[ebp+8]
  002c4	50		 push	 eax
  002c5	51		 push	 ecx
  002c6	56		 push	 esi
  002c7	6b f6 70	 imul	 esi, 112		; 00000070H
  002ca	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  002d0	56		 push	 esi
  002d1	57		 push	 edi
  002d2	53		 push	 ebx
  002d3	68 00 00 00 00	 push	 OFFSET ??_C@_0IK@DOPMBJCB@?$FLCashShop?$FN?$FLChaosCardMix?$FN?5?9?5User?$CI@
  002d8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002de	83 c4 40	 add	 esp, 64			; 00000040H
  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi
  002e3	5b		 pop	 ebx

; 4983 : }

  002e4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e7	33 cd		 xor	 ecx, ebp
  002e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c2 04 00	 ret	 4
$LN11@LotteryIte:

; 4915 : 	{
; 4916 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  002f4	0f b6 55 e5	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  002f8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002fa	52		 push	 edx
  002fb	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002fe	50		 push	 eax
  002ff	51		 push	 ecx
$LN31@LotteryIte:
  00300	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4983 : }

  00305	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00308	83 c4 0c	 add	 esp, 12			; 0000000cH
  0030b	5f		 pop	 edi
  0030c	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00316	5e		 pop	 esi
  00317	33 cd		 xor	 ecx, ebp
  00319	5b		 pop	 ebx
  0031a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031f	8b e5		 mov	 esp, ebp
  00321	5d		 pop	 ebp
  00322	c2 04 00	 ret	 4
?LotteryItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::LotteryItemMix
_TEXT	ENDS
PUBLIC	??_C@_0DA@LOGFDBNL@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CherryBlossomMix?5Fail?5?$CF@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CherryBlossomMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::CherryBlossomMix
;	COMDAT ??_C@_0DA@LOGFDBNL@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CherryBlossomMix?5Fail?5?$CF@
CONST	SEGMENT
??_C@_0DA@LOGFDBNL@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CherryBlossomMix?5Fail?5?$CF@ DB '['
	DB	'%s][%s] CherryBlossomMix Fail %d Money : %d-%d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CherryBlossomMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
tv343 = -36						; size = 4
tv341 = -36						; size = 4
tv346 = -30						; size = 2
_pTmp$ = -28						; size = 8
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?CherryBlossomMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::CherryBlossomMix, COMDAT
; _this$ = ecx

; 4994 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 4995 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4996 : 
; 4997 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  00024	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 4998 : 	pMsg.Result = CB_ERROR;
; 4999 : 
; 5000 : 	lpObj->ChaosLock = TRUE;
; 5001 : 
; 5002 : 	pMixTmp pTmp = {0};

  00029	33 c0		 xor	 eax, eax
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002e	89 45 e5	 mov	 DWORD PTR _pTmp$[ebp+1], eax
  00031	66 89 45 e9	 mov	 WORD PTR _pTmp$[ebp+5], ax
  00035	88 45 eb	 mov	 BYTE PTR _pTmp$[ebp+7], al

; 5005 : 	{
; 5006 : 		if( lpObj->pChaosBox[n].IsItem() == FALSE )

  00038	8b 7d e8	 mov	 edi, DWORD PTR _pTmp$[ebp+4]
  0003b	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0003f	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00049	c6 45 e4 00	 mov	 BYTE PTR _pTmp$[ebp], 0
  0004d	33 db		 xor	 ebx, ebx
  0004f	90		 npad	 1
$LL23@CherryBlos:
  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cb		 add	 ecx, ebx
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	85 c0		 test	 eax, eax
  0005f	74 6c		 je	 SHORT $LN22@CherryBlos

; 5007 : 			continue;
; 5008 : 
; 5009 : 		if( pTmp.m_Item == FALSE )

  00061	85 ff		 test	 edi, edi
  00063	75 37		 jne	 SHORT $LN29@CherryBlos

; 5010 : 		{
; 5011 : 			pTmp.m_Item = lpObj->pChaosBox[n].m_Type;

  00065	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0006b	0f bf 7c 19 06	 movsx	 edi, WORD PTR [ecx+ebx+6]

; 5012 : 
; 5013 : 			if( pTmp.m_Item == ITEMGET(14,88) )

  00070	81 ff 58 1c 00
	00		 cmp	 edi, 7256		; 00001c58H
  00076	75 06		 jne	 SHORT $LN18@CherryBlos

; 5014 : 			{
; 5015 : 				pTmp.NeedDur = 10;

  00078	c6 45 e6 0a	 mov	 BYTE PTR _pTmp$[ebp+2], 10 ; 0000000aH
  0007c	eb 1a		 jmp	 SHORT $LN13@CherryBlos
$LN18@CherryBlos:

; 5016 : 			}
; 5017 : 			else if( pTmp.m_Item == ITEMGET(14,89) )

  0007e	81 ff 59 1c 00
	00		 cmp	 edi, 7257		; 00001c59H
  00084	75 06		 jne	 SHORT $LN16@CherryBlos

; 5018 : 			{
; 5019 : 				pTmp.NeedDur = 30;

  00086	c6 45 e6 1e	 mov	 BYTE PTR _pTmp$[ebp+2], 30 ; 0000001eH
  0008a	eb 0c		 jmp	 SHORT $LN13@CherryBlos
$LN16@CherryBlos:

; 5020 : 			}
; 5021 : 			else if( pTmp.m_Item == ITEMGET(14,90) )

  0008c	81 ff 5a 1c 00
	00		 cmp	 edi, 7258		; 00001c5aH
  00092	75 4d		 jne	 SHORT $LN14@CherryBlos

; 5022 : 			{
; 5023 : 				pTmp.NeedDur = 255;

  00094	c6 45 e6 ff	 mov	 BYTE PTR _pTmp$[ebp+2], 255 ; 000000ffH
$LN13@CherryBlos:

; 5029 : 			}
; 5030 : 
; 5031 : 			pTmp.bOk = TRUE;

  00098	c6 45 e4 01	 mov	 BYTE PTR _pTmp$[ebp], 1
$LN29@CherryBlos:

; 5032 : 		}
; 5033 : 
; 5034 : 		if( pTmp.m_Item == lpObj->pChaosBox[n].m_Type )

  0009c	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  000a2	0f bf 4c 18 06	 movsx	 ecx, WORD PTR [eax+ebx+6]
  000a7	3b f9		 cmp	 edi, ecx
  000a9	75 3a		 jne	 SHORT $LN12@CherryBlos

; 5035 : 		{
; 5036 : 			pTmp.Dur += (int)lpObj->pChaosBox[n].m_Durability;

  000ab	d9 44 18 24	 fld	 DWORD PTR [eax+ebx+36]
  000af	d9 7d e2	 fnstcw	 WORD PTR tv346[ebp]
  000b2	0f b7 45 e2	 movzx	 eax, WORD PTR tv346[ebp]
  000b6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000bb	89 45 dc	 mov	 DWORD PTR tv343[ebp], eax
  000be	d9 6d dc	 fldcw	 WORD PTR tv343[ebp]
  000c1	db 5d dc	 fistp	 DWORD PTR tv341[ebp]
  000c4	8a 55 dc	 mov	 dl, BYTE PTR tv341[ebp]
  000c7	00 55 e5	 add	 BYTE PTR _pTmp$[ebp+1], dl
  000ca	d9 6d e2	 fldcw	 WORD PTR tv346[ebp]
$LN22@CherryBlos:

; 5003 : 
; 5004 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000cd	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  000d3	81 fb 80 1a 00
	00		 cmp	 ebx, 6784		; 00001a80H
  000d9	0f 8c 71 ff ff
	ff		 jl	 $LL23@CherryBlos

; 5029 : 			}
; 5030 : 
; 5031 : 			pTmp.bOk = TRUE;

  000df	eb 08		 jmp	 SHORT $LN21@CherryBlos
$LN14@CherryBlos:

; 5024 : 			}
; 5025 : 			else
; 5026 : 			{
; 5027 : 				pTmp.m_Item = 0;

  000e1	33 ff		 xor	 edi, edi

; 5028 : 				continue;

  000e3	eb e8		 jmp	 SHORT $LN22@CherryBlos
$LN12@CherryBlos:

; 5037 : 		}
; 5038 : 		else
; 5039 : 		{
; 5040 : 			pTmp.bOk = FALSE;

  000e5	c6 45 e4 00	 mov	 BYTE PTR _pTmp$[ebp], 0
$LN21@CherryBlos:

; 5041 : 			break;
; 5042 : 		}
; 5043 : 	}
; 5044 : 
; 5045 : 	if( pTmp.Dur != pTmp.NeedDur )

  000e9	8a 45 e6	 mov	 al, BYTE PTR _pTmp$[ebp+2]
  000ec	38 45 e5	 cmp	 BYTE PTR _pTmp$[ebp+1], al
  000ef	74 04		 je	 SHORT $LN10@CherryBlos

; 5046 : 	{
; 5047 : 		pTmp.bOk = FALSE;

  000f1	c6 45 e4 00	 mov	 BYTE PTR _pTmp$[ebp], 0
$LN10@CherryBlos:

; 5048 : 	}
; 5049 : 
; 5050 : 	if( pTmp.m_Item == FALSE || pTmp.bOk == FALSE )

  000f5	85 ff		 test	 edi, edi
  000f7	0f 84 d7 00 00
	00		 je	 $LN8@CherryBlos
  000fd	80 7d e4 00	 cmp	 BYTE PTR _pTmp$[ebp], 0
  00101	0f 84 cd 00 00
	00		 je	 $LN8@CherryBlos

; 5054 : 		lpObj->ChaosLock = FALSE;
; 5055 : 		return;
; 5056 : 	}
; 5057 : 
; 5058 : 	int iHeight = 4;
; 5059 : 	int iWidth = 2;
; 5060 : 
; 5061 : 	if( !CheckInventoryEmptySpace(lpObj, iHeight, iWidth) )

  00107	6a 02		 push	 2
  00109	6a 04		 push	 4
  0010b	56		 push	 esi
  0010c	e8 00 00 00 00	 call	 ?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z ; CheckInventoryEmptySpace
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
  00114	85 c0		 test	 eax, eax
  00116	75 09		 jne	 SHORT $LN7@CherryBlos

; 5062 : 	{
; 5063 : 		pMsg.Result = 0xF1;

  00118	c6 45 ef f1	 mov	 BYTE PTR _pMsg$[ebp+3], 241 ; 000000f1H

; 5064 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5065 : 		lpObj->ChaosLock = FALSE;
; 5066 : 		return;

  0011c	e9 b7 00 00 00	 jmp	 $LN31@CherryBlos
$LN7@CherryBlos:

; 5067 : 	}
; 5068 : 
; 5069 : 	int bResult = 0;
; 5070 : 
; 5071 : 	if( pTmp.m_Item == ITEMGET(14,88) )

  00121	81 ff 58 1c 00
	00		 cmp	 edi, 7256		; 00001c58H
  00127	75 10		 jne	 SHORT $LN6@CherryBlos

; 5072 : 	{
; 5073 : 		bResult = g_EventItemBagManager.OpenSpecial(EventBagSpecial::CherryMixWhite, lpObj->m_Index, 0xFF, 0, 0);

  00129	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0012b	6a 00		 push	 0
  0012d	6a 00		 push	 0
  0012f	68 ff 00 00 00	 push	 255			; 000000ffH
  00134	51		 push	 ecx
  00135	6a 0f		 push	 15			; 0000000fH
  00137	eb 2e		 jmp	 SHORT $LN32@CherryBlos
$LN6@CherryBlos:

; 5074 : 	}
; 5075 : 	else if( pTmp.m_Item == ITEMGET(14,89) )

  00139	81 ff 59 1c 00
	00		 cmp	 edi, 7257		; 00001c59H
  0013f	75 10		 jne	 SHORT $LN4@CherryBlos

; 5076 : 	{
; 5077 : 		bResult = g_EventItemBagManager.OpenSpecial(EventBagSpecial::CherryMixRed, lpObj->m_Index, 0xFF, 0, 0);

  00141	8b 16		 mov	 edx, DWORD PTR [esi]
  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	68 ff 00 00 00	 push	 255			; 000000ffH
  0014c	52		 push	 edx
  0014d	6a 10		 push	 16			; 00000010H
  0014f	eb 16		 jmp	 SHORT $LN32@CherryBlos
$LN4@CherryBlos:

; 5078 : 	}
; 5079 : 	else if( pTmp.m_Item == ITEMGET(14,90) )

  00151	81 ff 5a 1c 00
	00		 cmp	 edi, 7258		; 00001c5aH
  00157	75 1f		 jne	 SHORT $LN30@CherryBlos

; 5080 : 	{
; 5081 : 		bResult = g_EventItemBagManager.OpenSpecial(EventBagSpecial::CherryMixGold, lpObj->m_Index, 0xFF, 0, 0);

  00159	8b 06		 mov	 eax, DWORD PTR [esi]
  0015b	6a 00		 push	 0
  0015d	6a 00		 push	 0
  0015f	68 ff 00 00 00	 push	 255			; 000000ffH
  00164	50		 push	 eax
  00165	6a 11		 push	 17			; 00000011H
$LN32@CherryBlos:
  00167	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  0016c	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
  00171	0f b6 c0	 movzx	 eax, al

; 5082 : 	}
; 5083 : 
; 5084 : 	if( bResult == false )

  00174	85 c0		 test	 eax, eax
  00176	75 4f		 jne	 SHORT $LN1@CherryBlos
$LN30@CherryBlos:

; 5085 : 	{
; 5086 : 		ChaosBoxInit(lpObj);

  00178	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017b	56		 push	 esi
  0017c	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 5087 : 		GCUserChaosBoxSend(lpObj,0);

  00181	6a 00		 push	 0
  00183	56		 push	 esi
  00184	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5088 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00189	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0018d	8b 06		 mov	 eax, DWORD PTR [esi]
  0018f	51		 push	 ecx
  00190	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00193	52		 push	 edx
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5089 : 		LogAddTD("[%s][%s] CherryBlossomMix Fail %d Money : %d-%d",
; 5090 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,lpObj->ChaosMoney);

  0019a	8b 8e 18 12 00
	00		 mov	 ecx, DWORD PTR [esi+4632]
  001a0	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  001a6	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  001ac	51		 push	 ecx
  001ad	52		 push	 edx
  001ae	50		 push	 eax
  001af	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  001b2	51		 push	 ecx
  001b3	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  001b6	52		 push	 edx
  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@LOGFDBNL@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CherryBlossomMix?5Fail?5?$CF@
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001c2	83 c4 2c	 add	 esp, 44			; 0000002cH

; 5091 : 		lpObj->ChaosLock = FALSE;
; 5092 : 		return;

  001c5	eb 25		 jmp	 SHORT $LN33@CherryBlos
$LN1@CherryBlos:

; 5093 : 	}
; 5094 : 
; 5095 : 	gObjInventoryCommit(lpObj->m_Index);

  001c7	8b 06		 mov	 eax, DWORD PTR [esi]
  001c9	50		 push	 eax
  001ca	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  001cf	83 c4 04	 add	 esp, 4

; 5096 : 	lpObj->ChaosLock = FALSE;

  001d2	eb 18		 jmp	 SHORT $LN33@CherryBlos
$LN8@CherryBlos:

; 5051 : 	{
; 5052 : 		pMsg.Result = 0;

  001d4	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
$LN31@CherryBlos:

; 5053 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  001d8	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  001dc	8b 06		 mov	 eax, DWORD PTR [esi]
  001de	51		 push	 ecx
  001df	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  001e2	52		 push	 edx
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN33@CherryBlos:

; 5097 : }

  001ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ef	5f		 pop	 edi
  001f0	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001fa	5e		 pop	 esi
  001fb	33 cd		 xor	 ecx, ebp
  001fd	5b		 pop	 ebx
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	8b e5		 mov	 esp, ebp
  00205	5d		 pop	 ebp
  00206	c2 04 00	 ret	 4
?CherryBlossomMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::CherryBlossomMix
_TEXT	ENDS
PUBLIC	??_C@_0GB@PMDDOCCB@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@ ; `string'
PUBLIC	??_C@_0FP@NDMOHONO@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?IllusionTemple_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::IllusionTemple_Mix
;	COMDAT ??_C@_0GB@PMDDOCCB@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@
CONST	SEGMENT
??_C@_0GB@PMDDOCCB@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@ DB '[C'
	DB	'haosMix][Illusion Temple] Illusion Ticket [%s][%s] CBMix Fail'
	DB	' %d Money : %d-%d, CharmRate : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FP@NDMOHONO@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@
CONST	SEGMENT
??_C@_0FP@NDMOHONO@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@ DB '[C'
	DB	'haosMix][Illusion Temple] Illusion Ticket Mix Success [%s][%s'
	DB	'], Money(%d-%d), CharmRate : %d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?IllusionTemple_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iCharmOfLuckCount$ = -48				; size = 4
_PaperLevel$ = -44					; size = 4
_PaperCount$ = -40					; size = 4
_PotionCount$ = -36					; size = 4
_ChaosCount$ = -32					; size = 4
_PotionLevel$ = -28					; size = 4
_OtherItemCount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?IllusionTemple_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::IllusionTemple_Mix, COMDAT
; _this$ = ecx

; 5100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 5101 : 	lpObj->ChaosLock = TRUE;
; 5102 : 
; 5103 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5104 : 
; 5105 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0002b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 5106 : 	pMsg.Result = CB_ERROR;
; 5107 : 
; 5108 : 	int PaperCount = 0;

  00030	33 ff		 xor	 edi, edi

; 5109 : 	int PotionCount = 0;
; 5110 : 	int ChaosCount = 0;
; 5111 : 	int PotionLevel = -1;

  00032	83 c8 ff	 or	 eax, -1
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
  00038	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0003c	89 7d d8	 mov	 DWORD PTR _PaperCount$[ebp], edi
  0003f	89 7d dc	 mov	 DWORD PTR _PotionCount$[ebp], edi
  00042	89 7d e0	 mov	 DWORD PTR _ChaosCount$[ebp], edi
  00045	89 45 e4	 mov	 DWORD PTR _PotionLevel$[ebp], eax

; 5112 : 	int PaperLevel = -1;

  00048	89 45 d4	 mov	 DWORD PTR _PaperLevel$[ebp], eax

; 5113 : 	int OtherItemCount = 0;

  0004b	89 7d e8	 mov	 DWORD PTR _OtherItemCount$[ebp], edi

; 5114 : 	int iCharmOfLuckCount = 0;

  0004e	33 db		 xor	 ebx, ebx
$LL24@IllusionTe:

; 5117 : 	{
; 5118 : 		if(lpObj->pChaosBox[n].IsItem() == TRUE)

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 61		 jne	 SHORT $LN23@IllusionTe

; 5119 : 		{
; 5120 : 			if(lpObj->pChaosBox[n].m_Type == ITEMGET(13,49))

  00062	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00068	0f b7 4c 38 06	 movzx	 ecx, WORD PTR [eax+edi+6]
  0006d	03 c7		 add	 eax, edi
  0006f	ba 31 1a 00 00	 mov	 edx, 6705		; 00001a31H
  00074	66 3b ca	 cmp	 cx, dx
  00077	75 0c		 jne	 SHORT $LN20@IllusionTe

; 5121 : 			{
; 5122 : 				PaperCount++;
; 5123 : 				PaperLevel = lpObj->pChaosBox[n].m_Level;

  00079	0f bf 40 08	 movsx	 eax, WORD PTR [eax+8]
  0007d	ff 45 d8	 inc	 DWORD PTR _PaperCount$[ebp]
  00080	89 45 d4	 mov	 DWORD PTR _PaperLevel$[ebp], eax
  00083	eb 3e		 jmp	 SHORT $LN23@IllusionTe
$LN20@IllusionTe:

; 5124 : 			}
; 5125 : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(13,50))

  00085	ba 32 1a 00 00	 mov	 edx, 6706		; 00001a32H
  0008a	66 3b ca	 cmp	 cx, dx
  0008d	75 0c		 jne	 SHORT $LN18@IllusionTe

; 5126 : 			{
; 5127 : 				PotionCount++;
; 5128 : 				PotionLevel = lpObj->pChaosBox[n].m_Level;

  0008f	0f bf 40 08	 movsx	 eax, WORD PTR [eax+8]
  00093	ff 45 dc	 inc	 DWORD PTR _PotionCount$[ebp]
  00096	89 45 e4	 mov	 DWORD PTR _PotionLevel$[ebp], eax
  00099	eb 28		 jmp	 SHORT $LN23@IllusionTe
$LN18@IllusionTe:

; 5129 : 			}
; 5130 : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(12,15))

  0009b	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  000a0	66 3b ca	 cmp	 cx, dx
  000a3	75 05		 jne	 SHORT $LN16@IllusionTe

; 5131 : 			{
; 5132 : 				ChaosCount++;

  000a5	ff 45 e0	 inc	 DWORD PTR _ChaosCount$[ebp]
  000a8	eb 19		 jmp	 SHORT $LN23@IllusionTe
$LN16@IllusionTe:

; 5133 : 			}
; 5134 : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(14,53))

  000aa	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000af	66 3b ca	 cmp	 cx, dx
  000b2	75 0c		 jne	 SHORT $LN14@IllusionTe

; 5135 : 			{
; 5136 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000b4	d9 40 24	 fld	 DWORD PTR [eax+36]
  000b7	e8 00 00 00 00	 call	 __ftol2_sse
  000bc	03 d8		 add	 ebx, eax

; 5137 : 			}
; 5138 : 			else

  000be	eb 03		 jmp	 SHORT $LN23@IllusionTe
$LN14@IllusionTe:

; 5139 : 			{
; 5140 : 				OtherItemCount++;

  000c0	ff 45 e8	 inc	 DWORD PTR _OtherItemCount$[ebp]
$LN23@IllusionTe:

; 5115 : 
; 5116 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000c3	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000c9	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000cf	0f 8c 7b ff ff
	ff		 jl	 $LL24@IllusionTe

; 5141 : 			}
; 5142 : 		}
; 5143 : 	}
; 5144 : 
; 5145 : 	if(PaperCount != 1 || PotionCount != 1 || ChaosCount != 1 || OtherItemCount != 0 || PotionLevel != PaperLevel)

  000d5	b8 01 00 00 00	 mov	 eax, 1
  000da	89 5d d0	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], ebx
  000dd	39 45 d8	 cmp	 DWORD PTR _PaperCount$[ebp], eax
  000e0	0f 85 c6 01 00
	00		 jne	 $LN31@IllusionTe
  000e6	39 45 dc	 cmp	 DWORD PTR _PotionCount$[ebp], eax
  000e9	0f 85 bd 01 00
	00		 jne	 $LN31@IllusionTe
  000ef	39 45 e0	 cmp	 DWORD PTR _ChaosCount$[ebp], eax
  000f2	0f 85 b4 01 00
	00		 jne	 $LN31@IllusionTe
  000f8	33 ff		 xor	 edi, edi
  000fa	39 7d e8	 cmp	 DWORD PTR _OtherItemCount$[ebp], edi
  000fd	0f 85 ab 01 00
	00		 jne	 $LN11@IllusionTe
  00103	8b 45 e4	 mov	 eax, DWORD PTR _PotionLevel$[ebp]
  00106	3b 45 d4	 cmp	 eax, DWORD PTR _PaperLevel$[ebp]
  00109	0f 85 9f 01 00
	00		 jne	 $LN11@IllusionTe

; 5149 : 		return;
; 5150 : 	}
; 5151 : 
; 5152 : 	if(PotionLevel < 1 || PotionLevel > IT_MAXTEMPLE)

  0010f	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00112	83 f9 05	 cmp	 ecx, 5
  00115	0f 87 93 01 00
	00		 ja	 $LN11@IllusionTe

; 5157 : 	}
; 5158 : 
; 5159 : 	if(iCharmOfLuckCount > 10)

  0011b	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  0011e	7e 15		 jle	 SHORT $LN8@IllusionTe

; 5160 : 	{
; 5161 : 		pMsg.Result = 0xF0;
; 5162 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00120	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00124	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00126	52		 push	 edx
  00127	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0012a	50		 push	 eax
  0012b	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  0012f	51		 push	 ecx

; 5163 : 		lpObj->ChaosLock = FALSE;
; 5164 : 		return;

  00130	e9 85 01 00 00	 jmp	 $LN32@IllusionTe
$LN8@IllusionTe:

; 5165 : 	}
; 5166 : 
; 5167 : 	int nChaosNeedMoney = 300000 + (PotionLevel-1) * 200000;

  00135	8b f8		 mov	 edi, eax

; 5168 : 
; 5169 : 	if(lpObj->Money < nChaosNeedMoney)

  00137	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0013d	69 ff 40 0d 03
	00		 imul	 edi, 200000		; 00030d40H
  00143	81 c7 a0 86 01
	00		 add	 edi, 100000		; 000186a0H
  00149	3b c7		 cmp	 eax, edi
  0014b	7d 24		 jge	 SHORT $LN7@IllusionTe

; 5170 : 	{
; 5171 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 5172 : 		
; 5173 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  0014d	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00151	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00153	52		 push	 edx
  00154	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00157	50		 push	 eax
  00158	51		 push	 ecx
  00159	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  0015d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5174 : 		lpObj->ChaosLock = FALSE;

  00162	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 5175 : 		return;

  0016c	e9 54 01 00 00	 jmp	 $LN33@IllusionTe
$LN7@IllusionTe:

; 5176 : 	}
; 5177 : 
; 5178 : 	lpObj->Money -= nChaosNeedMoney;
; 5179 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  00171	8b 16		 mov	 edx, DWORD PTR [esi]
  00173	2b c7		 sub	 eax, edi
  00175	50		 push	 eax
  00176	52		 push	 edx
  00177	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  0017d	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 5180 : 
; 5181 : 	lpObj->ChaosSuccessRate = 70;
; 5182 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  00182	8d 43 46	 lea	 eax, DWORD PTR [ebx+70]
  00185	83 c4 08	 add	 esp, 8
  00188	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 5183 : 
; 5184 : 	if(rand()%100 < lpObj->ChaosSuccessRate)

  0018e	e8 00 00 00 00	 call	 _rand
  00193	99		 cdq
  00194	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00199	f7 f9		 idiv	 ecx
  0019b	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001a1	7d 72		 jge	 SHORT $LN6@IllusionTe

; 5185 : 	{
; 5186 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,ITEMGET(13,51),PotionLevel,1,0,0,0,lpObj->m_Index,0,0);

  001a3	8b 06		 mov	 eax, DWORD PTR [esi]
  001a5	8b 55 e4	 mov	 edx, DWORD PTR _PotionLevel$[ebp]
  001a8	6a 00		 push	 0
  001aa	6a 00		 push	 0
  001ac	6a 00		 push	 0
  001ae	6a 00		 push	 0
  001b0	50		 push	 eax
  001b1	6a 00		 push	 0
  001b3	6a 00		 push	 0
  001b5	6a 00		 push	 0
  001b7	6a 01		 push	 1
  001b9	52		 push	 edx
  001ba	68 33 1a 00 00	 push	 6707			; 00001a33H
  001bf	6a 00		 push	 0
  001c1	6a 00		 push	 0
  001c3	68 ff 00 00 00	 push	 255			; 000000ffH
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 5187 : 		gObjInventoryCommit(lpObj->m_Index);

  001ce	8b 06		 mov	 eax, DWORD PTR [esi]
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 5188 : 
; 5189 : 		LogAddTD("[ChaosMix][Illusion Temple] Illusion Ticket Mix Success [%s][%s], Money(%d-%d), CharmRate : %d",
; 5190 : 			lpObj->AccountID, lpObj->Name, 	lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  001d6	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  001dc	83 c4 40	 add	 esp, 64			; 00000040H
  001df	53		 push	 ebx
  001e0	57		 push	 edi
  001e1	51		 push	 ecx
  001e2	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  001e5	52		 push	 edx
  001e6	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  001e9	50		 push	 eax
  001ea	68 00 00 00 00	 push	 OFFSET ??_C@_0FP@NDMOHONO@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001f5	83 c4 18	 add	 esp, 24			; 00000018H
  001f8	5f		 pop	 edi

; 5208 : 	}	
; 5209 : 	lpObj->ChaosLock = FALSE;

  001f9	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00203	5e		 pop	 esi
  00204	5b		 pop	 ebx

; 5210 : }

  00205	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00208	33 cd		 xor	 ecx, ebp
  0020a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020f	8b e5		 mov	 esp, ebp
  00211	5d		 pop	 ebp
  00212	c2 04 00	 ret	 4
$LN6@IllusionTe:

; 5191 : 	}
; 5192 : 	else
; 5193 : 	{
; 5194 : 		for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  00215	33 db		 xor	 ebx, ebx
  00217	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL4@IllusionTe:

; 5195 : 		{
; 5196 : 			if(lpObj->pChaosBox[n].IsItem() == TRUE)

  00220	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00226	03 cb		 add	 ecx, ebx
  00228	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0022d	83 f8 01	 cmp	 eax, 1
  00230	75 0d		 jne	 SHORT $LN3@IllusionTe

; 5197 : 			{
; 5198 : 				lpObj->pChaosBox[n].Clear();

  00232	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00238	03 cb		 add	 ecx, ebx
  0023a	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
$LN3@IllusionTe:

; 5191 : 	}
; 5192 : 	else
; 5193 : 	{
; 5194 : 		for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0023f	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  00245	81 fb 80 1a 00
	00		 cmp	 ebx, 6784		; 00001a80H
  0024b	7c d3		 jl	 SHORT $LL4@IllusionTe

; 5199 : 			}
; 5200 : 		}
; 5201 : 
; 5202 : 
; 5203 : 		GCUserChaosBoxSend(lpObj,0);

  0024d	6a 00		 push	 0
  0024f	56		 push	 esi
  00250	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5204 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00255	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00259	8b 06		 mov	 eax, DWORD PTR [esi]
  0025b	51		 push	 ecx
  0025c	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0025f	52		 push	 edx
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5205 : 
; 5206 : 		LogAddTD("[ChaosMix][Illusion Temple] Illusion Ticket [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 5207 : 			lpObj->AccountID, lpObj->Name, 	lpObj->ChaosSuccessRate,lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);

  00266	8b 4d d0	 mov	 ecx, DWORD PTR _iCharmOfLuckCount$[ebp]
  00269	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0026f	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  00275	51		 push	 ecx
  00276	57		 push	 edi
  00277	52		 push	 edx
  00278	50		 push	 eax
  00279	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  0027c	51		 push	 ecx
  0027d	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  00280	52		 push	 edx
  00281	68 00 00 00 00	 push	 OFFSET ??_C@_0GB@PMDDOCCB@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@
  00286	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0028c	83 c4 30	 add	 esp, 48			; 00000030H
  0028f	5f		 pop	 edi

; 5208 : 	}	
; 5209 : 	lpObj->ChaosLock = FALSE;

  00290	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0029a	5e		 pop	 esi
  0029b	5b		 pop	 ebx

; 5210 : }

  0029c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029f	33 cd		 xor	 ecx, ebp
  002a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a6	8b e5		 mov	 esp, ebp
  002a8	5d		 pop	 ebp
  002a9	c2 04 00	 ret	 4
$LN31@IllusionTe:

; 5153 : 	{
; 5154 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 5155 : 		lpObj->ChaosLock = FALSE;
; 5156 : 		return;

  002ac	33 ff		 xor	 edi, edi
$LN11@IllusionTe:

; 5146 : 	{
; 5147 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  002ae	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002b2	8b 16		 mov	 edx, DWORD PTR [esi]
  002b4	50		 push	 eax
  002b5	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  002b8	51		 push	 ecx
  002b9	52		 push	 edx
$LN32@IllusionTe:
  002ba	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5148 : 		lpObj->ChaosLock = FALSE;

  002bf	89 be 20 12 00
	00		 mov	 DWORD PTR [esi+4640], edi
$LN33@IllusionTe:

; 5210 : }

  002c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002cb	5f		 pop	 edi
  002cc	5e		 pop	 esi
  002cd	33 cd		 xor	 ecx, ebp
  002cf	5b		 pop	 ebx
  002d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d5	8b e5		 mov	 esp, ebp
  002d7	5d		 pop	 ebp
  002d8	c2 04 00	 ret	 4
?IllusionTemple_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::IllusionTemple_Mix
_TEXT	ENDS
PUBLIC	??_C@_0DE@JCNMJOBM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@ ; `string'
PUBLIC	??_C@_0GC@HFAHDNLD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Succes@ ; `string'
PUBLIC	??_C@_0CC@FJMAMNGP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@ ; `string'
PUBLIC	??_C@_0M@PHAOGDNK@SeedExtract?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SeedExtractMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::SeedExtractMix
EXTRN	?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z:PROC ; CSocketItems::GetSeedOption
EXTRN	?GetOptionRate@CSocketItems@@QAEEXZ:PROC	; CSocketItems::GetOptionRate
EXTRN	?g_SocketItem@@3VCSocketItems@@A:BYTE		; g_SocketItem
EXTRN	?g_SeedExtractMoney@@3HA:DWORD			; g_SeedExtractMoney
;	COMDAT ??_C@_0DE@JCNMJOBM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@
CONST	SEGMENT
??_C@_0DE@JCNMJOBM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@ DB '['
	DB	'%s][%s] Seed Extract Mix Failed - SeedData is NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@HFAHDNLD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Succes@
CONST	SEGMENT
??_C@_0GC@HFAHDNLD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Succes@ DB '['
	DB	'%s][%s] Seed Extract Mix Success - SeedInfo ( Index : %d, Typ'
	DB	'e : %d, Level : %d, ItemCode : %d )', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FJMAMNGP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@
CONST	SEGMENT
??_C@_0CC@FJMAMNGP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@ DB '['
	DB	'%s][%s] Seed Extract Mix Failed.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PHAOGDNK@SeedExtract?$AA@
CONST	SEGMENT
??_C@_0M@PHAOGDNK@SeedExtract?$AA@ DB 'SeedExtract', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SeedExtractMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iExcItemCount$ = -72					; size = 4
_iHarmonyCount$ = -68					; size = 4
_SeedRate$191994 = -64					; size = 1
_this$ = -64						; size = 4
_iOtherItemCount$ = -60					; size = 4
_iCreationPos$ = -56					; size = 4
_iAncItemPos$ = -52					; size = 4
_iChaosPos$ = -48					; size = 4
_iChaosCount$ = -44					; size = 4
_iHarmonyPos$ = -40					; size = 4
_iAncItemCount$ = -36					; size = 4
_iExcItemPos$ = -32					; size = 4
_iCreationCount$ = -28					; size = 4
_iItemValue$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SeedExtractMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::SeedExtractMix, COMDAT
; _this$ = ecx

; 5213 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 5214 : 	int iExcItemCount = 0;

  00016	33 ff		 xor	 edi, edi

; 5215 : 	int iAncItemCount = 0;
; 5216 : 	int iHarmonyCount = 0;
; 5217 : 	int iChaosCount = 0;
; 5218 : 	int iCreationCount = 0;
; 5219 : 	int iOtherItemCount = 0;
; 5220 : 	int iChaosMixRate = 0;
; 5221 : 	DWORD iItemValue = 0;
; 5222 : 	int iMixNeedMoney = 0;
; 5223 : 	int iChaosTaxMoney = 0;
; 5224 : 	int iAncItemPos = 0;
; 5225 : 	int iExcItemPos = 0;
; 5226 : 	int iHarmonyPos = 0;
; 5227 : 	int iChaosPos = 0;
; 5228 : 	int iCreationPos = 0;
; 5229 : 
; 5230 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5231 : 
; 5232 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	89 7d b8	 mov	 DWORD PTR _iExcItemCount$[ebp], edi
  00029	89 7d dc	 mov	 DWORD PTR _iAncItemCount$[ebp], edi
  0002c	89 7d bc	 mov	 DWORD PTR _iHarmonyCount$[ebp], edi
  0002f	89 7d d4	 mov	 DWORD PTR _iChaosCount$[ebp], edi
  00032	89 7d e4	 mov	 DWORD PTR _iCreationCount$[ebp], edi
  00035	89 7d c4	 mov	 DWORD PTR _iOtherItemCount$[ebp], edi
  00038	89 7d e8	 mov	 DWORD PTR _iItemValue$[ebp], edi
  0003b	89 7d cc	 mov	 DWORD PTR _iAncItemPos$[ebp], edi
  0003e	89 7d e0	 mov	 DWORD PTR _iExcItemPos$[ebp], edi
  00041	89 7d d8	 mov	 DWORD PTR _iHarmonyPos$[ebp], edi
  00044	89 7d d0	 mov	 DWORD PTR _iChaosPos$[ebp], edi
  00047	89 7d c8	 mov	 DWORD PTR _iCreationPos$[ebp], edi
  0004a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5233 : 	pMsg.Result = CB_ERROR;

  00052	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 5234 : 
; 5235 : 	lpObj->ChaosLock = TRUE;

  00056	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1

; 5238 : 	{
; 5239 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00060	33 db		 xor	 ebx, ebx
$LL24@SeedExtrac:
  00062	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00068	03 cb		 add	 ecx, ebx
  0006a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006f	83 f8 01	 cmp	 eax, 1
  00072	0f 85 b5 00 00
	00		 jne	 $LN23@SeedExtrac

; 5240 : 		{
; 5241 : 			if( lpObj->pChaosBox[n].IsExtItem() == TRUE && lpObj->pChaosBox[n].m_Level >= 4 &&
; 5242 : 				lpObj->pChaosBox[n].m_bLOCKED == FALSE )

  00078	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0007e	03 cb		 add	 ecx, ebx
  00080	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  00085	83 f8 01	 cmp	 eax, 1
  00088	75 27		 jne	 SHORT $LN20@SeedExtrac
  0008a	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00090	66 83 7c 18 08
	04		 cmp	 WORD PTR [eax+ebx+8], 4
  00096	7c 19		 jl	 SHORT $LN20@SeedExtrac
  00098	80 bc 18 d1 00
	00 00 00	 cmp	 BYTE PTR [eax+ebx+209], 0
  000a0	75 0f		 jne	 SHORT $LN20@SeedExtrac

; 5243 : 			{
; 5244 : 				iExcItemCount++;
; 5245 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  000a2	8b 54 18 78	 mov	 edx, DWORD PTR [eax+ebx+120]
  000a6	ff 45 b8	 inc	 DWORD PTR _iExcItemCount$[ebp]
  000a9	01 55 e8	 add	 DWORD PTR _iItemValue$[ebp], edx

; 5246 : 				iExcItemPos = n;

  000ac	89 7d e0	 mov	 DWORD PTR _iExcItemPos$[ebp], edi

; 5247 : 			}
; 5248 : 			else if( lpObj->pChaosBox[n].IsSetItem() && lpObj->pChaosBox[n].m_Level >= 4 &&

  000af	eb 7c		 jmp	 SHORT $LN23@SeedExtrac
$LN20@SeedExtrac:

; 5249 : 				lpObj->pChaosBox[n].m_bLOCKED == FALSE )

  000b1	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  000b7	03 cb		 add	 ecx, ebx
  000b9	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  000be	85 c0		 test	 eax, eax
  000c0	74 27		 je	 SHORT $LN18@SeedExtrac
  000c2	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  000c8	66 83 7c 18 08
	04		 cmp	 WORD PTR [eax+ebx+8], 4
  000ce	7c 19		 jl	 SHORT $LN18@SeedExtrac
  000d0	80 bc 18 d1 00
	00 00 00	 cmp	 BYTE PTR [eax+ebx+209], 0
  000d8	75 0f		 jne	 SHORT $LN18@SeedExtrac

; 5250 : 			{
; 5251 : 				iAncItemCount++;
; 5252 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  000da	8b 4c 18 78	 mov	 ecx, DWORD PTR [eax+ebx+120]
  000de	ff 45 dc	 inc	 DWORD PTR _iAncItemCount$[ebp]
  000e1	01 4d e8	 add	 DWORD PTR _iItemValue$[ebp], ecx

; 5253 : 				iAncItemPos = n;

  000e4	89 7d cc	 mov	 DWORD PTR _iAncItemPos$[ebp], edi
  000e7	eb 44		 jmp	 SHORT $LN23@SeedExtrac
$LN18@SeedExtrac:

; 5254 : 			}
; 5255 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,42) )

  000e9	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  000ef	0f b7 44 1a 06	 movzx	 eax, WORD PTR [edx+ebx+6]
  000f4	b9 2a 1c 00 00	 mov	 ecx, 7210		; 00001c2aH
  000f9	66 3b c1	 cmp	 ax, cx
  000fc	75 08		 jne	 SHORT $LN16@SeedExtrac

; 5256 : 			{
; 5257 : 				iHarmonyCount++;

  000fe	ff 45 bc	 inc	 DWORD PTR _iHarmonyCount$[ebp]

; 5258 : 				iHarmonyPos = n;

  00101	89 7d d8	 mov	 DWORD PTR _iHarmonyPos$[ebp], edi
  00104	eb 27		 jmp	 SHORT $LN23@SeedExtrac
$LN16@SeedExtrac:

; 5259 : 			}
; 5260 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  00106	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  0010b	66 3b c2	 cmp	 ax, dx
  0010e	75 08		 jne	 SHORT $LN14@SeedExtrac

; 5261 : 			{
; 5262 : 				iChaosCount++;

  00110	ff 45 d4	 inc	 DWORD PTR _iChaosCount$[ebp]

; 5263 : 				iChaosPos = n;

  00113	89 7d d0	 mov	 DWORD PTR _iChaosPos$[ebp], edi
  00116	eb 15		 jmp	 SHORT $LN23@SeedExtrac
$LN14@SeedExtrac:

; 5264 : 			}
; 5265 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )

  00118	b9 16 1c 00 00	 mov	 ecx, 7190		; 00001c16H
  0011d	66 3b c1	 cmp	 ax, cx
  00120	75 08		 jne	 SHORT $LN12@SeedExtrac

; 5266 : 			{
; 5267 : 				iCreationCount++;

  00122	ff 45 e4	 inc	 DWORD PTR _iCreationCount$[ebp]

; 5268 : 				iCreationPos = n;

  00125	89 7d c8	 mov	 DWORD PTR _iCreationPos$[ebp], edi

; 5269 : 			}
; 5270 : 			else

  00128	eb 03		 jmp	 SHORT $LN23@SeedExtrac
$LN12@SeedExtrac:

; 5271 : 			{
; 5272 : 				iOtherItemCount++;

  0012a	ff 45 c4	 inc	 DWORD PTR _iOtherItemCount$[ebp]
$LN23@SeedExtrac:

; 5236 : 
; 5237 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0012d	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  00133	47		 inc	 edi
  00134	81 fb 80 1a 00
	00		 cmp	 ebx, 6784		; 00001a80H
  0013a	0f 8c 22 ff ff
	ff		 jl	 $LL24@SeedExtrac

; 5273 : 			}
; 5274 : 		}
; 5275 : 	}
; 5276 : 
; 5277 : 	if( iOtherItemCount > 0 )

  00140	33 ff		 xor	 edi, edi
  00142	39 7d c4	 cmp	 DWORD PTR _iOtherItemCount$[ebp], edi
  00145	7e 11		 jle	 SHORT $LN10@SeedExtrac

; 5278 : 	{
; 5279 : 		pMsg.Result = 7;
; 5280 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00147	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  0014b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014d	52		 push	 edx
  0014e	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00151	50		 push	 eax
  00152	51		 push	 ecx

; 5281 : 		lpObj->ChaosLock = FALSE;
; 5282 : 		return;

  00153	e9 14 03 00 00	 jmp	 $LN29@SeedExtrac
$LN10@SeedExtrac:

; 5283 : 	}
; 5284 : 
; 5285 : 	if( iExcItemCount != 1 ||
; 5286 : 		iAncItemCount != 1 ||
; 5287 : 		iHarmonyCount != 1 ||
; 5288 : 		iChaosCount != 1 ||
; 5289 : 		iCreationCount != 1 )

  00158	b8 01 00 00 00	 mov	 eax, 1
  0015d	39 45 b8	 cmp	 DWORD PTR _iExcItemCount$[ebp], eax
  00160	0f 85 fa 02 00
	00		 jne	 $LN8@SeedExtrac
  00166	39 45 dc	 cmp	 DWORD PTR _iAncItemCount$[ebp], eax
  00169	0f 85 f1 02 00
	00		 jne	 $LN8@SeedExtrac
  0016f	39 45 bc	 cmp	 DWORD PTR _iHarmonyCount$[ebp], eax
  00172	0f 85 e8 02 00
	00		 jne	 $LN8@SeedExtrac
  00178	39 45 d4	 cmp	 DWORD PTR _iChaosCount$[ebp], eax
  0017b	0f 85 df 02 00
	00		 jne	 $LN8@SeedExtrac
  00181	39 45 e4	 cmp	 DWORD PTR _iCreationCount$[ebp], eax
  00184	0f 85 d6 02 00
	00		 jne	 $LN8@SeedExtrac

; 5294 : 		return;
; 5295 : 	}
; 5296 : 
; 5297 : 	iChaosTaxMoney = (int)((__int64)g_SeedExtractMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  0018a	8b 16		 mov	 edx, DWORD PTR [esi]
  0018c	52		 push	 edx
  0018d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00192	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00197	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?g_SeedExtractMoney@@3HA ; g_SeedExtractMoney
  0019d	f7 eb		 imul	 ebx
  0019f	57		 push	 edi
  001a0	6a 64		 push	 100			; 00000064H
  001a2	52		 push	 edx
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 __alldiv
  001a9	8b f8		 mov	 edi, eax

; 5298 : 
; 5299 : 	if( iChaosTaxMoney < 0 )

  001ab	85 ff		 test	 edi, edi
  001ad	79 02		 jns	 SHORT $LN7@SeedExtrac

; 5300 : 		iChaosTaxMoney = 0;

  001af	33 ff		 xor	 edi, edi
$LN7@SeedExtrac:

; 5301 : 
; 5302 : 	iMixNeedMoney = g_SeedExtractMoney + iChaosTaxMoney;

  001b1	03 df		 add	 ebx, edi

; 5303 : 
; 5304 : 	if( lpObj->Money < iMixNeedMoney )

  001b3	39 9e cc 00 00
	00		 cmp	 DWORD PTR [esi+204], ebx
  001b9	7d 24		 jge	 SHORT $LN6@SeedExtrac

; 5305 : 	{
; 5306 : 		pMsg.Result = 2;
; 5307 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  001bb	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001bf	8b 16		 mov	 edx, DWORD PTR [esi]
  001c1	50		 push	 eax
  001c2	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  001c5	51		 push	 ecx
  001c6	52		 push	 edx
  001c7	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  001cb	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5308 : 		lpObj->ChaosLock = FALSE;

  001d0	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 5309 : 		return;

  001da	e9 9c 02 00 00	 jmp	 $LN30@SeedExtrac
$LN6@SeedExtrac:

; 5310 : 	}
; 5311 : 
; 5312 : 	LogChaosItem(lpObj, "SeedExtract");

  001df	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PHAOGDNK@SeedExtract?$AA@
  001e7	56		 push	 esi
  001e8	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5313 : 	lpObj->Money -= iMixNeedMoney;

  001ed	29 9e cc 00 00
	00		 sub	 DWORD PTR [esi+204], ebx

; 5314 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001f3	57		 push	 edi
  001f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001f9	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 5315 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  001fe	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00204	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00206	50		 push	 eax
  00207	51		 push	 ecx
  00208	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 5316 : 
; 5317 : 	iChaosMixRate = 80 + (iItemValue / 2000000);

  0020d	b8 83 de 1b 43	 mov	 eax, 1125899907		; 431bde83H
  00212	f7 65 e8	 mul	 DWORD PTR _iItemValue$[ebp]
  00215	8b fa		 mov	 edi, edx
  00217	c1 ef 13	 shr	 edi, 19			; 00000013H
  0021a	83 c7 50	 add	 edi, 80			; 00000050H
  0021d	83 c4 08	 add	 esp, 8

; 5318 : 
; 5319 : 	if( iChaosMixRate > 90 )

  00220	83 ff 5a	 cmp	 edi, 90			; 0000005aH
  00223	7e 05		 jle	 SHORT $LN5@SeedExtrac

; 5320 : 		iChaosMixRate = 90;

  00225	bf 5a 00 00 00	 mov	 edi, 90			; 0000005aH
$LN5@SeedExtrac:

; 5321 : 
; 5322 : 	if( rand()%100 > iChaosMixRate )

  0022a	e8 00 00 00 00	 call	 _rand
  0022f	99		 cdq
  00230	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00235	f7 f9		 idiv	 ecx
  00237	3b d7		 cmp	 edx, edi
  00239	0f 8e ce 00 00
	00		 jle	 $LN4@SeedExtrac

; 5323 : 	{
; 5324 : 		lpObj->pChaosBox[iAncItemPos].m_Level -= rand()%3;

  0023f	8b 45 cc	 mov	 eax, DWORD PTR _iAncItemPos$[ebp]
  00242	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  00248	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  0024e	8d 7c 10 08	 lea	 edi, DWORD PTR [eax+edx+8]
  00252	e8 00 00 00 00	 call	 _rand
  00257	99		 cdq
  00258	b9 03 00 00 00	 mov	 ecx, 3
  0025d	f7 f9		 idiv	 ecx

; 5325 : 		lpObj->pChaosBox[iExcItemPos].m_Level -= rand()%3;

  0025f	8b 45 e0	 mov	 eax, DWORD PTR _iExcItemPos$[ebp]
  00262	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  00268	66 29 17	 sub	 WORD PTR [edi], dx
  0026b	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  00271	8d 7c 10 08	 lea	 edi, DWORD PTR [eax+edx+8]
  00275	e8 00 00 00 00	 call	 _rand
  0027a	99		 cdq
  0027b	b9 03 00 00 00	 mov	 ecx, 3
  00280	f7 f9		 idiv	 ecx

; 5326 : 		lpObj->pChaosBox[iHarmonyPos].Clear();

  00282	8b 4d d8	 mov	 ecx, DWORD PTR _iHarmonyPos$[ebp]
  00285	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0028b	66 29 17	 sub	 WORD PTR [edi], dx
  0028e	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  00294	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5327 : 		lpObj->pChaosBox[iChaosPos].Clear();

  00299	8b 4d d0	 mov	 ecx, DWORD PTR _iChaosPos$[ebp]
  0029c	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  002a2	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  002a8	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5328 : 		lpObj->pChaosBox[iCreationPos].Clear();

  002ad	8b 4d c8	 mov	 ecx, DWORD PTR _iCreationPos$[ebp]
  002b0	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  002b6	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  002bc	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5329 : 
; 5330 : 		GCUserChaosBoxSend(lpObj,0);

  002c1	6a 00		 push	 0
  002c3	56		 push	 esi
  002c4	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5331 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  002c9	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  002cd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002cf	52		 push	 edx
  002d0	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002d3	50		 push	 eax
  002d4	51		 push	 ecx
  002d5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5332 : 		lpObj->ChaosLock = FALSE;
; 5333 : 
; 5334 : 		LogAddTD("[%s][%s] Seed Extract Mix Failed.",lpObj->AccountID,lpObj->Name);

  002da	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  002dd	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  002e7	52		 push	 edx
  002e8	83 c6 52	 add	 esi, 82			; 00000052H
  002eb	56		 push	 esi
  002ec	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FJMAMNGP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@
  002f1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002f7	83 c4 20	 add	 esp, 32			; 00000020H
  002fa	5f		 pop	 edi
  002fb	5e		 pop	 esi
  002fc	5b		 pop	 ebx

; 5367 : 		}
; 5368 : 	}
; 5369 : }

  002fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00300	33 cd		 xor	 ecx, ebp
  00302	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00307	8b e5		 mov	 esp, ebp
  00309	5d		 pop	 ebp
  0030a	c2 04 00	 ret	 4
$LN4@SeedExtrac:

; 5335 : 	}
; 5336 : 	else
; 5337 : 	{
; 5338 : 		BYTE SeedRate = 0;
; 5339 : 		SeedRate = g_SocketItem.GetOptionRate();

  0030d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00312	e8 00 00 00 00	 call	 ?GetOptionRate@CSocketItems@@QAEEXZ ; CSocketItems::GetOptionRate
  00317	88 45 c0	 mov	 BYTE PTR _SeedRate$191994[ebp], al

; 5340 : 
; 5341 : 		_SOCKET_SEED_DATA* tmpSeed;
; 5342 : 		tmpSeed = g_SocketItem.GetSeedOption(SeedRate);

  0031a	8b 45 c0	 mov	 eax, DWORD PTR _SeedRate$191994[ebp]
  0031d	50		 push	 eax
  0031e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00323	e8 00 00 00 00	 call	 ?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z ; CSocketItems::GetSeedOption
  00328	8b f8		 mov	 edi, eax

; 5343 : 
; 5344 : 		if( tmpSeed != NULL )

  0032a	85 ff		 test	 edi, edi
  0032c	74 75		 je	 SHORT $LN2@SeedExtrac

; 5345 : 		{
; 5346 : 			pMsg.Result = TRUE;
; 5347 : 
; 5348 : 			ItemSerialCreateSend(lpObj->m_Index,0xFF,0,0,tmpSeed->SeedItem,tmpSeed->btIndex,1,0,0,0,lpObj->m_Index,0,0);

  0032e	8b 06		 mov	 eax, DWORD PTR [esi]
  00330	6a 00		 push	 0
  00332	6a 00		 push	 0
  00334	6a 00		 push	 0
  00336	6a 00		 push	 0
  00338	50		 push	 eax
  00339	6a 00		 push	 0
  0033b	6a 00		 push	 0
  0033d	6a 00		 push	 0
  0033f	c6 45 ef 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1
  00343	0f b6 4f 02	 movzx	 ecx, BYTE PTR [edi+2]
  00347	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  0034a	6a 01		 push	 1
  0034c	51		 push	 ecx
  0034d	52		 push	 edx
  0034e	6a 00		 push	 0
  00350	6a 00		 push	 0
  00352	68 ff 00 00 00	 push	 255			; 000000ffH
  00357	50		 push	 eax
  00358	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 5349 : 			gObjInventoryCommit(lpObj->m_Index);

  0035d	8b 06		 mov	 eax, DWORD PTR [esi]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 5350 : 			LogAddTD("[%s][%s] Seed Extract Mix Success - SeedInfo ( Index : %d, Type : %d, Level : %d, ItemCode : %d )",
; 5351 : 				lpObj->AccountID,lpObj->Name,tmpSeed->btOption,tmpSeed->btGroup,tmpSeed->btIndex,tmpSeed->SeedItem);

  00365	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00368	0f b6 57 02	 movzx	 edx, BYTE PTR [edi+2]
  0036c	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  00370	83 c4 40	 add	 esp, 64			; 00000040H
  00373	51		 push	 ecx
  00374	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00377	52		 push	 edx
  00378	50		 push	 eax
  00379	51		 push	 ecx
  0037a	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  0037d	52		 push	 edx
  0037e	83 c6 52	 add	 esi, 82			; 00000052H
  00381	56		 push	 esi
  00382	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@HFAHDNLD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Succes@
  00387	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0038d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00390	5f		 pop	 edi
  00391	5e		 pop	 esi
  00392	5b		 pop	 ebx

; 5367 : 		}
; 5368 : 	}
; 5369 : }

  00393	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00396	33 cd		 xor	 ecx, ebp
  00398	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039d	8b e5		 mov	 esp, ebp
  0039f	5d		 pop	 ebp
  003a0	c2 04 00	 ret	 4
$LN2@SeedExtrac:

; 5352 : 
; 5353 : 		}
; 5354 : 		else
; 5355 : 		{
; 5356 : 			lpObj->pChaosBox[iAncItemPos].m_Level -= rand()%3;

  003a3	8b 45 cc	 mov	 eax, DWORD PTR _iAncItemPos$[ebp]
  003a6	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  003ac	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  003b2	8d 7c 08 08	 lea	 edi, DWORD PTR [eax+ecx+8]
  003b6	e8 00 00 00 00	 call	 _rand
  003bb	99		 cdq
  003bc	b9 03 00 00 00	 mov	 ecx, 3
  003c1	f7 f9		 idiv	 ecx

; 5357 : 			lpObj->pChaosBox[iExcItemPos].m_Level -= rand()%3;

  003c3	8b 45 e0	 mov	 eax, DWORD PTR _iExcItemPos$[ebp]
  003c6	69 c0 d4 00 00
	00		 imul	 eax, 212		; 000000d4H
  003cc	66 29 17	 sub	 WORD PTR [edi], dx
  003cf	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  003d5	8d 7c 10 08	 lea	 edi, DWORD PTR [eax+edx+8]
  003d9	e8 00 00 00 00	 call	 _rand
  003de	99		 cdq
  003df	b9 03 00 00 00	 mov	 ecx, 3
  003e4	f7 f9		 idiv	 ecx

; 5358 : 			lpObj->pChaosBox[iHarmonyPos].Clear();

  003e6	8b 4d d8	 mov	 ecx, DWORD PTR _iHarmonyPos$[ebp]
  003e9	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  003ef	66 29 17	 sub	 WORD PTR [edi], dx
  003f2	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  003f8	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5359 : 			lpObj->pChaosBox[iChaosPos].Clear();

  003fd	8b 4d d0	 mov	 ecx, DWORD PTR _iChaosPos$[ebp]
  00400	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  00406	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  0040c	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5360 : 			lpObj->pChaosBox[iCreationPos].Clear();

  00411	8b 4d c8	 mov	 ecx, DWORD PTR _iCreationPos$[ebp]
  00414	69 c9 d4 00 00
	00		 imul	 ecx, 212		; 000000d4H
  0041a	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  00420	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5361 : 
; 5362 : 			GCUserChaosBoxSend(lpObj,0);

  00425	6a 00		 push	 0
  00427	56		 push	 esi
  00428	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5363 : 
; 5364 : 			LogAddTD("[%s][%s] Seed Extract Mix Failed - SeedData is NULL",lpObj->AccountID,lpObj->Name);

  0042d	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  00430	52		 push	 edx
  00431	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00434	50		 push	 eax
  00435	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@JCNMJOBM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@
  0043a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00440	83 c4 14	 add	 esp, 20			; 00000014H
  00443	5f		 pop	 edi

; 5365 : 
; 5366 : 			lpObj->ChaosLock = FALSE;

  00444	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0044e	5e		 pop	 esi
  0044f	5b		 pop	 ebx

; 5367 : 		}
; 5368 : 	}
; 5369 : }

  00450	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00453	33 cd		 xor	 ecx, ebp
  00455	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0045a	8b e5		 mov	 esp, ebp
  0045c	5d		 pop	 ebp
  0045d	c2 04 00	 ret	 4
$LN8@SeedExtrac:

; 5290 : 	{
; 5291 : 		pMsg.Result = 7;
; 5292 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00460	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00464	8b 06		 mov	 eax, DWORD PTR [esi]
  00466	51		 push	 ecx
  00467	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0046a	52		 push	 edx
  0046b	50		 push	 eax
$LN29@SeedExtrac:
  0046c	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00470	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5293 : 		lpObj->ChaosLock = FALSE;

  00475	89 be 20 12 00
	00		 mov	 DWORD PTR [esi+4640], edi
$LN30@SeedExtrac:

; 5367 : 		}
; 5368 : 	}
; 5369 : }

  0047b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00481	5f		 pop	 edi
  00482	5e		 pop	 esi
  00483	33 cd		 xor	 ecx, ebp
  00485	5b		 pop	 ebx
  00486	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0048b	8b e5		 mov	 esp, ebp
  0048d	5d		 pop	 ebp
  0048e	c2 04 00	 ret	 4
?SeedExtractMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::SeedExtractMix
_TEXT	ENDS
PUBLIC	??_C@_0ED@CPANCMOB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ ; `string'
PUBLIC	??_C@_0HB@BGNJLNEH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ ; `string'
PUBLIC	??_C@_0CK@CENILOLB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ ; `string'
PUBLIC	??_C@_0BE@GFFNMAOC@SeedSphereComposite?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::SeedSphereCompositeMix
EXTRN	??1_SOCKET_SPHERE_OPTION@@QAE@XZ:PROC		; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION
EXTRN	?IsOptionSet@CSocketItems@@QAEEPAU_SOCKET_SPHERE_OPTION@@EE@Z:PROC ; CSocketItems::IsOptionSet
EXTRN	?GetSphereLevel@CSocketItems@@QAEEH@Z:PROC	; CSocketItems::GetSphereLevel
EXTRN	?GetSeedOption@CSocketItems@@QAEEHE@Z:PROC	; CSocketItems::GetSeedOption
EXTRN	??0_SOCKET_SPHERE_OPTION@@QAE@XZ:PROC		; _SOCKET_SPHERE_OPTION::_SOCKET_SPHERE_OPTION
EXTRN	?g_SphereCompositeMoney@@3HA:DWORD		; g_SphereCompositeMoney
EXTRN	?IsSphereItem@CSocketItems@@QAEEH@Z:PROC	; CSocketItems::IsSphereItem
EXTRN	?IsSeedItem@CSocketItems@@QAEEH@Z:PROC		; CSocketItems::IsSeedItem
;	COMDAT ??_C@_0ED@CPANCMOB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
CONST	SEGMENT
??_C@_0ED@CPANCMOB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ DB '['
	DB	'%s][%s] SeedSphere Composite Mix Failed - SeedSphere Data is '
	DB	'NULL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0HB@BGNJLNEH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
CONST	SEGMENT
??_C@_0HB@BGNJLNEH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ DB '['
	DB	'%s][%s] SeedSphere Composite Mix Success - SeedSphere Info ( '
	DB	'Index : %d, Type : %d, Level : %d, ItemCode : %d )', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CENILOLB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
CONST	SEGMENT
??_C@_0CK@CENILOLB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ DB '['
	DB	'%s][%s] SeedSphere Composite Mix Failed.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GFFNMAOC@SeedSphereComposite?$AA@
CONST	SEGMENT
??_C@_0BE@GFFNMAOC@SeedSphereComposite?$AA@ DB 'SeedSphereComposite', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z$0
__ehfuncinfo$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_tmpSphere$192050 = -80					; size = 16
_iChaosCount$ = -64					; size = 4
_iSeedCount$ = -60					; size = 4
_iSphereCount$ = -56					; size = 4
_iOtherItemCount$ = -52					; size = 4
_this$ = -48						; size = 4
_btOption$192048 = -44					; size = 1
_lpSeed$ = -44						; size = 4
_btLevel$192049 = -40					; size = 1
_lpSphere$ = -40					; size = 4
_iMixNeedMoney$ = -36					; size = 4
_iCreationCount$ = -36					; size = 4
_pMsg$ = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpObj$ = 8						; size = 4
?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::SeedSphereCompositeMix, COMDAT
; _this$ = ecx

; 5372 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  0002e	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 5373 : 	int iSeedCount = 0;

  00031	33 ff		 xor	 edi, edi

; 5374 : 	int iSphereCount = 0;
; 5375 : 	int iOtherItemCount = 0;
; 5376 : 	int iChaosCount = 0;
; 5377 : 	int iCreationCount = 0;
; 5378 : 	int iChaosTaxMoney = 0;
; 5379 : 	int iMixNeedMoney = 0;
; 5380 : 	DWORD iItemValue = 0;
; 5381 : 	int iChaosMixRate = 0;
; 5382 : 	CItem* lpSeed = NULL;
; 5383 : 	CItem* lpSphere = NULL;
; 5384 : 
; 5385 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5386 : 
; 5387 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00033	6a 10		 push	 16			; 00000010H
  00035	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00038	68 86 00 00 00	 push	 134			; 00000086H
  0003d	50		 push	 eax
  0003e	89 7d c4	 mov	 DWORD PTR _iSeedCount$[ebp], edi
  00041	89 7d c8	 mov	 DWORD PTR _iSphereCount$[ebp], edi
  00044	89 7d cc	 mov	 DWORD PTR _iOtherItemCount$[ebp], edi
  00047	89 7d c0	 mov	 DWORD PTR _iChaosCount$[ebp], edi
  0004a	89 7d dc	 mov	 DWORD PTR _iCreationCount$[ebp], edi
  0004d	89 7d d4	 mov	 DWORD PTR _lpSeed$[ebp], edi
  00050	89 7d d8	 mov	 DWORD PTR _lpSphere$[ebp], edi
  00053	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5388 : 	pMsg.Result = CB_ERROR;

  0005b	c6 45 e3 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 5389 : 
; 5390 : 	lpObj->ChaosLock = TRUE;

  0005f	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1

; 5393 : 	{
; 5394 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00069	33 db		 xor	 ebx, ebx
  0006b	eb 03 8d 49 00	 npad	 5
$LL22@SeedSphere:
  00070	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00076	03 cb		 add	 ecx, ebx
  00078	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0007d	83 f8 01	 cmp	 eax, 1
  00080	0f 85 86 00 00
	00		 jne	 $LN21@SeedSphere

; 5395 : 		{
; 5396 : 			if( g_SocketItem.IsSeedItem(lpObj->pChaosBox[n].m_Type) == TRUE )

  00086	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0008c	0f bf 54 19 06	 movsx	 edx, WORD PTR [ecx+ebx+6]
  00091	52		 push	 edx
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00097	e8 00 00 00 00	 call	 ?IsSeedItem@CSocketItems@@QAEEH@Z ; CSocketItems::IsSeedItem
  0009c	3c 01		 cmp	 al, 1
  0009e	75 13		 jne	 SHORT $LN18@SeedSphere

; 5397 : 			{
; 5398 : 				iSeedCount++;
; 5399 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  000a0	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  000a6	ff 45 c4	 inc	 DWORD PTR _iSeedCount$[ebp]
  000a9	03 c3		 add	 eax, ebx
  000ab	03 78 78	 add	 edi, DWORD PTR [eax+120]

; 5400 : 				lpSeed = &lpObj->pChaosBox[n];

  000ae	89 45 d4	 mov	 DWORD PTR _lpSeed$[ebp], eax
  000b1	eb 59		 jmp	 SHORT $LN21@SeedSphere
$LN18@SeedSphere:

; 5401 : 			}
; 5402 : 			else if( g_SocketItem.IsSphereItem(lpObj->pChaosBox[n].m_Type) == TRUE )

  000b3	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  000b9	0f bf 54 19 06	 movsx	 edx, WORD PTR [ecx+ebx+6]
  000be	52		 push	 edx
  000bf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  000c4	e8 00 00 00 00	 call	 ?IsSphereItem@CSocketItems@@QAEEH@Z ; CSocketItems::IsSphereItem
  000c9	3c 01		 cmp	 al, 1
  000cb	75 13		 jne	 SHORT $LN16@SeedSphere

; 5403 : 			{
; 5404 : 				iSphereCount++;
; 5405 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  000cd	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  000d3	ff 45 c8	 inc	 DWORD PTR _iSphereCount$[ebp]
  000d6	03 c3		 add	 eax, ebx
  000d8	03 78 78	 add	 edi, DWORD PTR [eax+120]

; 5406 : 				lpSphere = &lpObj->pChaosBox[n];

  000db	89 45 d8	 mov	 DWORD PTR _lpSphere$[ebp], eax
  000de	eb 2c		 jmp	 SHORT $LN21@SeedSphere
$LN16@SeedSphere:

; 5407 : 			}
; 5408 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  000e0	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  000e6	0f b7 44 19 06	 movzx	 eax, WORD PTR [ecx+ebx+6]
  000eb	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  000f0	66 3b c2	 cmp	 ax, dx
  000f3	75 05		 jne	 SHORT $LN14@SeedSphere

; 5409 : 			{
; 5410 : 				iChaosCount++;

  000f5	ff 45 c0	 inc	 DWORD PTR _iChaosCount$[ebp]
  000f8	eb 12		 jmp	 SHORT $LN21@SeedSphere
$LN14@SeedSphere:

; 5411 : 			}
; 5412 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )

  000fa	b9 16 1c 00 00	 mov	 ecx, 7190		; 00001c16H
  000ff	66 3b c1	 cmp	 ax, cx
  00102	75 05		 jne	 SHORT $LN12@SeedSphere

; 5413 : 			{
; 5414 : 				iCreationCount++;

  00104	ff 45 dc	 inc	 DWORD PTR _iCreationCount$[ebp]

; 5415 : 			}
; 5416 : 			else

  00107	eb 03		 jmp	 SHORT $LN21@SeedSphere
$LN12@SeedSphere:

; 5417 : 			{
; 5418 : 				iOtherItemCount++;

  00109	ff 45 cc	 inc	 DWORD PTR _iOtherItemCount$[ebp]
$LN21@SeedSphere:

; 5391 : 
; 5392 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0010c	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  00112	81 fb 80 1a 00
	00		 cmp	 ebx, 6784		; 00001a80H
  00118	0f 8c 52 ff ff
	ff		 jl	 $LL22@SeedSphere

; 5419 : 			}
; 5420 : 		}
; 5421 : 	}
; 5422 : 
; 5423 : 	if( iOtherItemCount > 0 )

  0011e	33 db		 xor	 ebx, ebx
  00120	39 5d cc	 cmp	 DWORD PTR _iOtherItemCount$[ebp], ebx

; 5424 : 	{
; 5425 : 		pMsg.Result = 7;
; 5426 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5427 : 		lpObj->ChaosLock = FALSE;
; 5428 : 		return;

  00123	0f 8f 29 02 00
	00		 jg	 $LN8@SeedSphere

; 5429 : 	}
; 5430 : 
; 5431 : 	if( iSeedCount != 1 ||
; 5432 : 		iSphereCount != 1 ||
; 5433 : 		iChaosCount != 1 ||
; 5434 : 		iCreationCount != 1 )

  00129	b8 01 00 00 00	 mov	 eax, 1
  0012e	39 45 c4	 cmp	 DWORD PTR _iSeedCount$[ebp], eax
  00131	0f 85 1b 02 00
	00		 jne	 $LN8@SeedSphere
  00137	39 45 c8	 cmp	 DWORD PTR _iSphereCount$[ebp], eax
  0013a	0f 85 12 02 00
	00		 jne	 $LN8@SeedSphere
  00140	39 45 c0	 cmp	 DWORD PTR _iChaosCount$[ebp], eax
  00143	0f 85 09 02 00
	00		 jne	 $LN8@SeedSphere
  00149	39 45 dc	 cmp	 DWORD PTR _iCreationCount$[ebp], eax
  0014c	0f 85 00 02 00
	00		 jne	 $LN8@SeedSphere

; 5439 : 		return;
; 5440 : 	}
; 5441 : 
; 5442 : 	iChaosTaxMoney = (int)((__int64)g_SphereCompositeMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00152	8b 16		 mov	 edx, DWORD PTR [esi]
  00154	52		 push	 edx
  00155	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0015a	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0015f	f7 2d 00 00 00
	00		 imul	 DWORD PTR ?g_SphereCompositeMoney@@3HA ; g_SphereCompositeMoney
  00165	53		 push	 ebx
  00166	6a 64		 push	 100			; 00000064H
  00168	52		 push	 edx
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 __alldiv
  0016f	8b d8		 mov	 ebx, eax

; 5443 : 
; 5444 : 	if( iChaosTaxMoney < 0 )

  00171	85 db		 test	 ebx, ebx
  00173	79 02		 jns	 SHORT $LN7@SeedSphere

; 5445 : 		iChaosTaxMoney = 0;

  00175	33 db		 xor	 ebx, ebx
$LN7@SeedSphere:

; 5446 : 
; 5447 : 	iMixNeedMoney = g_SphereCompositeMoney + iChaosTaxMoney;

  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_SphereCompositeMoney@@3HA ; g_SphereCompositeMoney
  0017c	03 c3		 add	 eax, ebx
  0017e	89 45 dc	 mov	 DWORD PTR _iMixNeedMoney$[ebp], eax

; 5448 : 
; 5449 : 	if( lpObj->Money < iMixNeedMoney )

  00181	39 86 cc 00 00
	00		 cmp	 DWORD PTR [esi+204], eax
  00187	7d 24		 jge	 SHORT $LN6@SeedSphere

; 5450 : 	{
; 5451 : 		pMsg.Result = 2;
; 5452 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00189	0f b6 4d e1	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0018d	8b 06		 mov	 eax, DWORD PTR [esi]
  0018f	51		 push	 ecx
  00190	8d 55 e0	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00193	52		 push	 edx
  00194	50		 push	 eax
  00195	c6 45 e3 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00199	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5453 : 		lpObj->ChaosLock = FALSE;

  0019e	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 5454 : 		return;

  001a8	e9 c0 01 00 00	 jmp	 $LN29@SeedSphere
$LN6@SeedSphere:

; 5455 : 	}
; 5456 : 
; 5457 : 	LogChaosItem(lpObj,"SeedSphereComposite");

  001ad	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GFFNMAOC@SeedSphereComposite?$AA@
  001b5	56		 push	 esi
  001b6	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5458 : 
; 5459 : 	iChaosMixRate = 80 + (iItemValue / 200000);

  001bb	b8 8f 58 8b 4f	 mov	 eax, 1334532239		; 4f8b588fH
  001c0	f7 e7		 mul	 edi
  001c2	2b fa		 sub	 edi, edx
  001c4	d1 ef		 shr	 edi, 1
  001c6	03 fa		 add	 edi, edx
  001c8	c1 ef 11	 shr	 edi, 17			; 00000011H
  001cb	83 c7 50	 add	 edi, 80			; 00000050H

; 5460 : 
; 5461 : 	if( iChaosMixRate > 90 )

  001ce	83 ff 5a	 cmp	 edi, 90			; 0000005aH
  001d1	7e 05		 jle	 SHORT $LN5@SeedSphere

; 5462 : 		iChaosMixRate = 90;

  001d3	bf 5a 00 00 00	 mov	 edi, 90			; 0000005aH
$LN5@SeedSphere:

; 5463 : 
; 5464 : 	lpObj->Money -= iMixNeedMoney;

  001d8	8b 4d dc	 mov	 ecx, DWORD PTR _iMixNeedMoney$[ebp]
  001db	29 8e cc 00 00
	00		 sub	 DWORD PTR [esi+204], ecx

; 5465 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001e1	53		 push	 ebx
  001e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001e7	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 5466 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  001ec	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  001f2	8b 06		 mov	 eax, DWORD PTR [esi]
  001f4	52		 push	 edx
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001fb	83 c4 08	 add	 esp, 8

; 5467 : 
; 5468 : 
; 5469 : 	if( rand()%100 > iChaosMixRate )

  001fe	e8 00 00 00 00	 call	 _rand
  00203	99		 cdq
  00204	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00209	f7 f9		 idiv	 ecx
  0020b	3b d7		 cmp	 edx, edi
  0020d	7e 36		 jle	 SHORT $LN4@SeedSphere

; 5470 : 	{
; 5471 : 		ChaosBoxInit(lpObj);

  0020f	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00212	56		 push	 esi
  00213	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 5472 : 		GCUserChaosBoxSend(lpObj,0);

  00218	6a 00		 push	 0
  0021a	56		 push	 esi
  0021b	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5473 : 		LogAddTD("[%s][%s] SeedSphere Composite Mix Failed.",lpObj->AccountID,lpObj->Name);

  00220	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  00223	52		 push	 edx
  00224	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00227	50		 push	 eax
  00228	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CENILOLB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
  0022d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00233	83 c4 14	 add	 esp, 20			; 00000014H

; 5505 : 
; 5506 : 	lpObj->ChaosLock = FALSE;

  00236	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00240	e9 2b 01 00 00	 jmp	 $LN23@SeedSphere
$LN4@SeedSphere:

; 5474 : 	}
; 5475 : 	else
; 5476 : 	{
; 5477 : 		BYTE btOption = 0;
; 5478 : 		BYTE btLevel = 0;
; 5479 : 
; 5480 : 		_SOCKET_SPHERE_OPTION tmpSphere;

  00245	8d 4d b0	 lea	 ecx, DWORD PTR _tmpSphere$192050[ebp]
  00248	e8 00 00 00 00	 call	 ??0_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::_SOCKET_SPHERE_OPTION

; 5481 : 
; 5482 : 		btOption = g_SocketItem.GetSeedOption(lpSeed->m_Type,lpSeed->m_Level);

  0024d	8b 45 d4	 mov	 eax, DWORD PTR _lpSeed$[ebp]
  00250	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00254	0f bf 50 06	 movsx	 edx, WORD PTR [eax+6]
  00258	51		 push	 ecx
  00259	52		 push	 edx
  0025a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  0025f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00266	e8 00 00 00 00	 call	 ?GetSeedOption@CSocketItems@@QAEEHE@Z ; CSocketItems::GetSeedOption
  0026b	88 45 d4	 mov	 BYTE PTR _btOption$192048[ebp], al

; 5483 : 		btLevel = g_SocketItem.GetSphereLevel(lpSphere->m_Type);

  0026e	8b 45 d8	 mov	 eax, DWORD PTR _lpSphere$[ebp]
  00271	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00275	51		 push	 ecx
  00276	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  0027b	e8 00 00 00 00	 call	 ?GetSphereLevel@CSocketItems@@QAEEH@Z ; CSocketItems::GetSphereLevel
  00280	88 45 d8	 mov	 BYTE PTR _btLevel$192049[ebp], al

; 5484 : 
; 5485 : 		g_SocketItem.IsOptionSet(&tmpSphere,btOption,btLevel);

  00283	8b 55 d8	 mov	 edx, DWORD PTR _btLevel$192049[ebp]
  00286	8b 45 d4	 mov	 eax, DWORD PTR _btOption$192048[ebp]
  00289	52		 push	 edx
  0028a	50		 push	 eax
  0028b	8d 4d b0	 lea	 ecx, DWORD PTR _tmpSphere$192050[ebp]
  0028e	51		 push	 ecx
  0028f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00294	e8 00 00 00 00	 call	 ?IsOptionSet@CSocketItems@@QAEEPAU_SOCKET_SPHERE_OPTION@@EE@Z ; CSocketItems::IsOptionSet

; 5486 : 
; 5487 : 		if( tmpSphere.SeedItem != 0 )

  00299	8b 4d b4	 mov	 ecx, DWORD PTR _tmpSphere$192050[ebp+4]
  0029c	85 c9		 test	 ecx, ecx
  0029e	74 70		 je	 SHORT $LN2@SeedSphere

; 5488 : 		{
; 5489 : 			pMsg.Result = TRUE;
; 5490 : 
; 5491 : 			ItemSerialCreateSend(lpObj->m_Index,0xFF,0,0,tmpSphere.SeedItem,tmpSphere.btIndex,1,0,0,0,lpObj->m_Index,0,0);

  002a0	8b 06		 mov	 eax, DWORD PTR [esi]
  002a2	8b 55 b8	 mov	 edx, DWORD PTR _tmpSphere$192050[ebp+8]
  002a5	6a 00		 push	 0
  002a7	6a 00		 push	 0
  002a9	6a 00		 push	 0
  002ab	6a 00		 push	 0
  002ad	50		 push	 eax
  002ae	6a 00		 push	 0
  002b0	6a 00		 push	 0
  002b2	6a 00		 push	 0
  002b4	6a 01		 push	 1
  002b6	52		 push	 edx
  002b7	51		 push	 ecx
  002b8	6a 00		 push	 0
  002ba	6a 00		 push	 0
  002bc	68 ff 00 00 00	 push	 255			; 000000ffH
  002c1	50		 push	 eax
  002c2	c6 45 e3 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1
  002c6	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 5492 : 			gObjInventoryCommit(lpObj->m_Index);

  002cb	8b 06		 mov	 eax, DWORD PTR [esi]
  002cd	50		 push	 eax
  002ce	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 5493 : 			LogAddTD("[%s][%s] SeedSphere Composite Mix Success - SeedSphere Info ( Index : %d, Type : %d, Level : %d, ItemCode : %d )",
; 5494 : 				lpObj->AccountID,lpObj->Name,tmpSphere.btOptionId,tmpSphere.btGroup,tmpSphere.btLevel,tmpSphere.SeedItem);

  002d3	8b 4d b4	 mov	 ecx, DWORD PTR _tmpSphere$192050[ebp+4]
  002d6	0f b6 55 bc	 movzx	 edx, BYTE PTR _tmpSphere$192050[ebp+12]
  002da	0f b6 45 b2	 movzx	 eax, BYTE PTR _tmpSphere$192050[ebp+2]
  002de	83 c4 40	 add	 esp, 64			; 00000040H
  002e1	51		 push	 ecx
  002e2	0f b6 4d b0	 movzx	 ecx, BYTE PTR _tmpSphere$192050[ebp]
  002e6	52		 push	 edx
  002e7	50		 push	 eax
  002e8	51		 push	 ecx
  002e9	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  002ec	52		 push	 edx
  002ed	83 c6 52	 add	 esi, 82			; 00000052H
  002f0	56		 push	 esi
  002f1	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@BGNJLNEH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
  002f6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002fc	83 c4 1c	 add	 esp, 28			; 0000001cH

; 5495 : 			return;

  002ff	8d 4d b0	 lea	 ecx, DWORD PTR _tmpSphere$192050[ebp]
  00302	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00309	e8 00 00 00 00	 call	 ??1_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION
  0030e	eb 60		 jmp	 SHORT $LN23@SeedSphere
$LN2@SeedSphere:

; 5496 : 		}
; 5497 : 		else
; 5498 : 		{
; 5499 : 			ChaosBoxInit(lpObj);

  00310	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00313	56		 push	 esi
  00314	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 5500 : 			GCUserChaosBoxSend(lpObj,0);

  00319	6a 00		 push	 0
  0031b	56		 push	 esi
  0031c	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5501 : 			LogAddTD("[%s][%s] SeedSphere Composite Mix Failed - SeedSphere Data is NULL",
; 5502 : 				lpObj->AccountID,lpObj->Name);

  00321	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00324	50		 push	 eax
  00325	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  00328	51		 push	 ecx
  00329	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CPANCMOB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
  0032e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00334	83 c4 14	 add	 esp, 20			; 00000014H

; 5503 : 		}
; 5504 : 	}

  00337	8d 4d b0	 lea	 ecx, DWORD PTR _tmpSphere$192050[ebp]
  0033a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00341	e8 00 00 00 00	 call	 ??1_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION

; 5505 : 
; 5506 : 	lpObj->ChaosLock = FALSE;

  00346	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00350	eb 1e		 jmp	 SHORT $LN23@SeedSphere
$LN8@SeedSphere:

; 5435 : 	{
; 5436 : 		pMsg.Result = 7;
; 5437 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00352	0f b6 55 e1	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00356	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00358	52		 push	 edx
  00359	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0035c	50		 push	 eax
  0035d	51		 push	 ecx
  0035e	c6 45 e3 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00362	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5438 : 		lpObj->ChaosLock = FALSE;

  00367	89 9e 20 12 00
	00		 mov	 DWORD PTR [esi+4640], ebx
$LN29@SeedSphere:

; 5435 : 	{
; 5436 : 		pMsg.Result = 7;
; 5437 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0036d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN23@SeedSphere:

; 5507 : }

  00370	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00373	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0037a	59		 pop	 ecx
  0037b	5f		 pop	 edi
  0037c	5e		 pop	 esi
  0037d	5b		 pop	 ebx
  0037e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00381	33 cd		 xor	 ecx, ebp
  00383	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00388	8b e5		 mov	 esp, ebp
  0038a	5d		 pop	 ebp
  0038b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR _tmpSphere$192050[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION
__ehhandler$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::SeedSphereCompositeMix
PUBLIC	??_C@_0II@KCLKEHBN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5SeedSphere?5Mix?5Succ@ ; `string'
PUBLIC	??_C@_0DO@KKBOJPIF@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5W@ ; `string'
PUBLIC	??_C@_0DC@BKFDMAJM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5S@ ; `string'
PUBLIC	??_C@_0O@CGCDEDIJ@SetSeedSphere?$AA@		; `string'
PUBLIC	_Pos$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z ; CChaosBox::SetSeedSphereMix
EXTRN	?ItemSetSeedSphere@CSocketItems@@QAEEPAVCItem@@EE@Z:PROC ; CSocketItems::ItemSetSeedSphere
EXTRN	?IsItemType@CSocketItems@@QAEEPAVCItem@@E@Z:PROC ; CSocketItems::IsItemType
EXTRN	?GetSphereOption@CSocketItems@@QAEEGE@Z:PROC	; CSocketItems::GetSphereOption
EXTRN	?g_SphereSetMoney@@3HA:DWORD			; g_SphereSetMoney
EXTRN	?CheckMountItem@CSocketItems@@QAEEPAVCItem@@GE@Z:PROC ; CSocketItems::CheckMountItem
EXTRN	?IsSeedSphereItem@CSocketItems@@QAEEH@Z:PROC	; CSocketItems::IsSeedSphereItem
EXTRN	?IsSocketItem@CSocketItems@@QAE_NH@Z:PROC	; CSocketItems::IsSocketItem
;	COMDAT ??_C@_0II@KCLKEHBN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5SeedSphere?5Mix?5Succ@
CONST	SEGMENT
??_C@_0II@KCLKEHBN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5SeedSphere?5Mix?5Succ@ DB '['
	DB	'%s][%s] Set SeedSphere Mix Success - ItemInfo ( Name : %s, It'
	DB	'emCode : %d, Level : %d, SocketOption[%d,%d,%d,%d,%d], BonusO'
	DB	'ption : %d )', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@KKBOJPIF@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5W@
CONST	SEGMENT
??_C@_0DO@KKBOJPIF@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5W@ DB '['
	DB	'%s][%s] Set Seed Mix Failed - Wrong Item Type for Set Socket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BKFDMAJM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5S@
CONST	SEGMENT
??_C@_0DC@BKFDMAJM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5S@ DB '['
	DB	'%s][%s] Set Seed Mix Failed - SeedSphere is NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CGCDEDIJ@SetSeedSphere?$AA@
CONST	SEGMENT
??_C@_0O@CGCDEDIJ@SetSeedSphere?$AA@ DB 'SetSeedSphere', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z
_TEXT	SEGMENT
_this$ = -264						; size = 4
_iChaosCount$ = -260					; size = 4
_iOtherItemCount$ = -256				; size = 4
_iItemCount$ = -252					; size = 4
_iSeedSphereCount$ = -248				; size = 4
_iMixNeedMoney$ = -244					; size = 4
_iCreationCount$ = -244					; size = 4
_btOption$ = -240					; size = 1
_lpSeedSphere$ = -240					; size = 4
tv560 = -236						; size = 4
_Pos$GSCopy$ = -236					; size = 1
_dur$ = -236						; size = 4
_tmpItem$ = -232					; size = 212
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_Pos$ = 12						; size = 1
?SetSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z PROC ; CChaosBox::SetSeedSphereMix, COMDAT
; _this$ = ecx

; 5510 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 5583 : 		lpObj->ChaosLock = FALSE;

  00013	8a 45 0c	 mov	 al, BYTE PTR _Pos$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0001a	56		 push	 esi
  0001b	33 f6		 xor	 esi, esi
  0001d	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  00023	57		 push	 edi
  00024	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _tmpItem$[ebp]
  0002a	88 85 14 ff ff
	ff		 mov	 BYTE PTR _Pos$GSCopy$[ebp], al
  00030	89 b5 04 ff ff
	ff		 mov	 DWORD PTR _iItemCount$[ebp], esi
  00036	89 b5 00 ff ff
	ff		 mov	 DWORD PTR _iOtherItemCount$[ebp], esi
  0003c	89 b5 08 ff ff
	ff		 mov	 DWORD PTR _iSeedSphereCount$[ebp], esi
  00042	89 b5 fc fe ff
	ff		 mov	 DWORD PTR _iChaosCount$[ebp], esi
  00048	89 b5 0c ff ff
	ff		 mov	 DWORD PTR _iCreationCount$[ebp], esi
  0004e	89 b5 10 ff ff
	ff		 mov	 DWORD PTR _lpSeedSphere$[ebp], esi
  00054	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  00059	6a 10		 push	 16			; 00000010H
  0005b	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0005e	68 86 00 00 00	 push	 134			; 00000086H
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006c	80 bd 14 ff ff
	ff 05		 cmp	 BYTE PTR _Pos$GSCopy$[ebp], 5
  00073	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00077	72 20		 jb	 SHORT $LN21@SetSeedSph

; 5511 : 	int iItemCount = 0;
; 5512 : 	int iOtherItemCount = 0;
; 5513 : 	int iSeedSphereCount = 0;
; 5514 : 	int iChaosCount = 0;
; 5515 : 	int iCreationCount = 0;
; 5516 : 	CItem* lpItem = 0;
; 5517 : 	CItem* lpSeedSphere = 0;
; 5518 : 	CItem tmpItem;
; 5519 : 	int iChaosTaxMoney = 0;
; 5520 : 	int iMixNeedMoney = 0;
; 5521 : 
; 5522 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5523 : 
; 5524 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));
; 5525 : 	pMsg.Result = CB_ERROR;
; 5526 : 
; 5527 : 	if( Pos >= MAX_SOCKET_COUNT )
; 5528 : 	{
; 5529 : 		pMsg.Result = 7;
; 5530 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00079	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  0007d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0007f	52		 push	 edx
  00080	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00083	50		 push	 eax
  00084	51		 push	 ecx
  00085	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00089	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5531 : 		lpObj->ChaosLock = FALSE;

  0008e	89 b3 20 12 00
	00		 mov	 DWORD PTR [ebx+4640], esi

; 5532 : 		return;

  00094	e9 88 04 00 00	 jmp	 $LN26@SetSeedSph
$LN21@SetSeedSph:

; 5533 : 	}
; 5534 : 
; 5535 : 	lpObj->ChaosLock = TRUE;

  00099	c7 83 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+4640], 1
  000a3	33 ff		 xor	 edi, edi
  000a5	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL20@SetSeedSph:

; 5538 : 	{
; 5539 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  000b0	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  000b6	03 cf		 add	 ecx, edi
  000b8	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000bd	83 f8 01	 cmp	 eax, 1
  000c0	0f 85 a2 00 00
	00		 jne	 $LN19@SetSeedSph

; 5540 : 		{
; 5541 : 			if( g_SocketItem.IsSocketItem(lpObj->pChaosBox[n].m_Type) == TRUE &&
; 5542 : 				lpObj->pChaosBox[n].m_SocketOption[Pos] == (BYTE)-2)

  000c6	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  000cc	0f bf 44 3a 06	 movsx	 eax, WORD PTR [edx+edi+6]
  000d1	50		 push	 eax
  000d2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  000d7	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  000dc	3c 01		 cmp	 al, 1
  000de	75 23		 jne	 SHORT $LN16@SetSeedSph
  000e0	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  000e6	0f b6 95 14 ff
	ff ff		 movzx	 edx, BYTE PTR _Pos$GSCopy$[ebp]
  000ed	03 c7		 add	 eax, edi
  000ef	80 bc 02 c8 00
	00 00 fe	 cmp	 BYTE PTR [edx+eax+200], 254 ; 000000feH
  000f7	75 0a		 jne	 SHORT $LN16@SetSeedSph

; 5543 : 			{
; 5544 : 				iItemCount++;

  000f9	ff 85 04 ff ff
	ff		 inc	 DWORD PTR _iItemCount$[ebp]

; 5545 : 				lpItem = &lpObj->pChaosBox[n];

  000ff	8b f0		 mov	 esi, eax
  00101	eb 65		 jmp	 SHORT $LN19@SetSeedSph
$LN16@SetSeedSph:

; 5546 : 			}
; 5547 : 			else if( g_SocketItem.IsSeedSphereItem(lpObj->pChaosBox[n].m_Type) == TRUE )

  00103	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00109	0f bf 4c 38 06	 movsx	 ecx, WORD PTR [eax+edi+6]
  0010e	51		 push	 ecx
  0010f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00114	e8 00 00 00 00	 call	 ?IsSeedSphereItem@CSocketItems@@QAEEH@Z ; CSocketItems::IsSeedSphereItem
  00119	3c 01		 cmp	 al, 1
  0011b	75 16		 jne	 SHORT $LN14@SetSeedSph

; 5548 : 			{
; 5549 : 				iSeedSphereCount++;
; 5550 : 				lpSeedSphere = &lpObj->pChaosBox[n];

  0011d	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00123	ff 85 08 ff ff
	ff		 inc	 DWORD PTR _iSeedSphereCount$[ebp]
  00129	03 c7		 add	 eax, edi
  0012b	89 85 10 ff ff
	ff		 mov	 DWORD PTR _lpSeedSphere$[ebp], eax
  00131	eb 35		 jmp	 SHORT $LN19@SetSeedSph
$LN14@SetSeedSph:

; 5551 : 			}
; 5552 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  00133	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  00139	0f b7 44 3a 06	 movzx	 eax, WORD PTR [edx+edi+6]
  0013e	b9 0f 18 00 00	 mov	 ecx, 6159		; 0000180fH
  00143	66 3b c1	 cmp	 ax, cx
  00146	75 08		 jne	 SHORT $LN12@SetSeedSph

; 5553 : 			{
; 5554 : 				iChaosCount++;

  00148	ff 85 fc fe ff
	ff		 inc	 DWORD PTR _iChaosCount$[ebp]
  0014e	eb 18		 jmp	 SHORT $LN19@SetSeedSph
$LN12@SetSeedSph:

; 5555 : 			}
; 5556 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )

  00150	ba 16 1c 00 00	 mov	 edx, 7190		; 00001c16H
  00155	66 3b c2	 cmp	 ax, dx
  00158	75 08		 jne	 SHORT $LN10@SetSeedSph

; 5557 : 			{
; 5558 : 				iCreationCount++;

  0015a	ff 85 0c ff ff
	ff		 inc	 DWORD PTR _iCreationCount$[ebp]

; 5559 : 			}
; 5560 : 			else

  00160	eb 06		 jmp	 SHORT $LN19@SetSeedSph
$LN10@SetSeedSph:

; 5561 : 			{
; 5562 : 				iOtherItemCount++;

  00162	ff 85 00 ff ff
	ff		 inc	 DWORD PTR _iOtherItemCount$[ebp]
$LN19@SetSeedSph:

; 5536 : 
; 5537 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  00168	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0016e	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00174	0f 8c 36 ff ff
	ff		 jl	 $LL20@SetSeedSph

; 5563 : 			}
; 5564 : 		}
; 5565 : 	}
; 5566 : 
; 5567 : 
; 5568 : 	if( iOtherItemCount > 0 )

  0017a	33 ff		 xor	 edi, edi
  0017c	39 bd 00 ff ff
	ff		 cmp	 DWORD PTR _iOtherItemCount$[ebp], edi
  00182	7e 11		 jle	 SHORT $LN8@SetSeedSph
$LN28@SetSeedSph:

; 5569 : 	{
; 5570 : 		pMsg.Result = 7;
; 5571 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00184	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00188	8b 13		 mov	 edx, DWORD PTR [ebx]
  0018a	50		 push	 eax
  0018b	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0018e	51		 push	 ecx
  0018f	52		 push	 edx

; 5572 : 		lpObj->ChaosLock = FALSE;
; 5573 : 		return;

  00190	e9 7d 03 00 00	 jmp	 $LN27@SetSeedSph
$LN8@SetSeedSph:

; 5574 : 	}
; 5575 : 
; 5576 : 	if( iItemCount != 1 ||
; 5577 : 		iSeedSphereCount != 1 ||
; 5578 : 		iChaosCount != 1 ||
; 5579 : 		iCreationCount != 1 )

  00195	b8 01 00 00 00	 mov	 eax, 1
  0019a	39 85 04 ff ff
	ff		 cmp	 DWORD PTR _iItemCount$[ebp], eax
  001a0	0f 85 60 03 00
	00		 jne	 $LN6@SetSeedSph
  001a6	39 85 08 ff ff
	ff		 cmp	 DWORD PTR _iSeedSphereCount$[ebp], eax
  001ac	0f 85 54 03 00
	00		 jne	 $LN6@SetSeedSph
  001b2	39 85 fc fe ff
	ff		 cmp	 DWORD PTR _iChaosCount$[ebp], eax
  001b8	0f 85 48 03 00
	00		 jne	 $LN6@SetSeedSph
  001be	39 85 0c ff ff
	ff		 cmp	 DWORD PTR _iCreationCount$[ebp], eax
  001c4	0f 85 3c 03 00
	00		 jne	 $LN6@SetSeedSph

; 5584 : 		return;
; 5585 : 	}
; 5586 : 
; 5587 : 	if( g_SocketItem.CheckMountItem(lpItem,lpSeedSphere->m_Type,lpSeedSphere->m_Level) == FALSE )

  001ca	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _lpSeedSphere$[ebp]
  001d0	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  001d4	0f b7 50 06	 movzx	 edx, WORD PTR [eax+6]
  001d8	51		 push	 ecx
  001d9	52		 push	 edx
  001da	56		 push	 esi
  001db	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  001e0	e8 00 00 00 00	 call	 ?CheckMountItem@CSocketItems@@QAEEPAVCItem@@GE@Z ; CSocketItems::CheckMountItem
  001e5	84 c0		 test	 al, al

; 5588 : 	{
; 5589 : 		pMsg.Result = 7;
; 5590 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5591 : 		lpObj->ChaosLock = FALSE;
; 5592 : 		return;

  001e7	74 9b		 je	 SHORT $LN28@SetSeedSph

; 5593 : 	}
; 5594 : 
; 5595 : 	iChaosTaxMoney = (int)((__int64)g_SphereSetMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  001e9	8b 03		 mov	 eax, DWORD PTR [ebx]
  001eb	50		 push	 eax
  001ec	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001f1	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  001f6	f7 2d 00 00 00
	00		 imul	 DWORD PTR ?g_SphereSetMoney@@3HA ; g_SphereSetMoney
  001fc	57		 push	 edi
  001fd	6a 64		 push	 100			; 00000064H
  001ff	52		 push	 edx
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 __alldiv
  00206	8b f8		 mov	 edi, eax

; 5596 : 
; 5597 : 	if( iChaosTaxMoney < 0 )

  00208	85 ff		 test	 edi, edi
  0020a	79 02		 jns	 SHORT $LN4@SetSeedSph

; 5598 : 		iChaosTaxMoney = 0;

  0020c	33 ff		 xor	 edi, edi
$LN4@SetSeedSph:

; 5599 : 
; 5600 : 	iMixNeedMoney = g_SphereSetMoney +iChaosTaxMoney;

  0020e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_SphereSetMoney@@3HA ; g_SphereSetMoney
  00213	03 c7		 add	 eax, edi
  00215	89 85 0c ff ff
	ff		 mov	 DWORD PTR _iMixNeedMoney$[ebp], eax

; 5601 : 
; 5602 : 	if( lpObj->Money < iMixNeedMoney )

  0021b	39 83 cc 00 00
	00		 cmp	 DWORD PTR [ebx+204], eax
  00221	7d 24		 jge	 SHORT $LN3@SetSeedSph

; 5603 : 	{
; 5604 : 		pMsg.Result = 2;
; 5605 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00223	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00227	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00229	52		 push	 edx
  0022a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0022d	50		 push	 eax
  0022e	51		 push	 ecx
  0022f	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00233	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5606 : 		lpObj->ChaosLock = FALSE;

  00238	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0

; 5607 : 		return;

  00242	e9 da 02 00 00	 jmp	 $LN26@SetSeedSph
$LN3@SetSeedSph:

; 5608 : 	}
; 5609 : 
; 5610 : 	LogChaosItem(lpObj,"SetSeedSphere");

  00247	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CGCDEDIJ@SetSeedSphere?$AA@
  00252	53		 push	 ebx
  00253	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5611 : 	BYTE btOption = 0;
; 5612 : 
; 5613 : 	btOption = g_SocketItem.GetSphereOption(lpSeedSphere->m_Type,lpSeedSphere->m_Level);

  00258	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _lpSeedSphere$[ebp]
  0025e	0f b6 50 08	 movzx	 edx, BYTE PTR [eax+8]
  00262	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  00266	52		 push	 edx
  00267	50		 push	 eax
  00268	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  0026d	e8 00 00 00 00	 call	 ?GetSphereOption@CSocketItems@@QAEEGE@Z ; CSocketItems::GetSphereOption
  00272	88 85 10 ff ff
	ff		 mov	 BYTE PTR _btOption$[ebp], al

; 5614 : 
; 5615 : 	if( btOption == (BYTE)-1 )

  00278	3c ff		 cmp	 al, 255			; 000000ffH
  0027a	75 48		 jne	 SHORT $LN2@SetSeedSph

; 5616 : 	{
; 5617 : 		pMsg.Result = 7;
; 5618 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0027c	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00280	8b 03		 mov	 eax, DWORD PTR [ebx]
  00282	51		 push	 ecx
  00283	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00286	52		 push	 edx
  00287	50		 push	 eax
  00288	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  0028c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5619 : 		lpObj->ChaosLock = FALSE;
; 5620 : 		LogAddTD("[%s][%s] Set Seed Mix Failed - SeedSphere is NULL",
; 5621 : 			lpObj->AccountID,lpObj->Name);

  00291	8d 4b 5d	 lea	 ecx, DWORD PTR [ebx+93]
  00294	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  0029e	51		 push	 ecx
  0029f	83 c3 52	 add	 ebx, 82			; 00000052H
  002a2	53		 push	 ebx
  002a3	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BKFDMAJM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5S@
  002a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002ae	83 c4 18	 add	 esp, 24			; 00000018H

; 5663 : }

  002b1	5f		 pop	 edi
  002b2	5e		 pop	 esi
  002b3	5b		 pop	 ebx
  002b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b7	33 cd		 xor	 ecx, ebp
  002b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002be	8b e5		 mov	 esp, ebp
  002c0	5d		 pop	 ebp
  002c1	c2 08 00	 ret	 8
$LN2@SetSeedSph:

; 5622 : 		return;
; 5623 : 	}
; 5624 : 
; 5625 : 	if( g_SocketItem.IsItemType(lpItem,btOption) == FALSE )

  002c4	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _btOption$[ebp]
  002ca	52		 push	 edx
  002cb	56		 push	 esi
  002cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  002d1	e8 00 00 00 00	 call	 ?IsItemType@CSocketItems@@QAEEPAVCItem@@E@Z ; CSocketItems::IsItemType
  002d6	84 c0		 test	 al, al
  002d8	75 48		 jne	 SHORT $LN1@SetSeedSph

; 5626 : 	{
; 5627 : 		pMsg.Result = 7;
; 5628 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  002da	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002de	8b 13		 mov	 edx, DWORD PTR [ebx]
  002e0	50		 push	 eax
  002e1	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  002e4	51		 push	 ecx
  002e5	52		 push	 edx
  002e6	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  002ea	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5629 : 		lpObj->ChaosLock = FALSE;
; 5630 : 		LogAddTD("[%s][%s] Set Seed Mix Failed - Wrong Item Type for Set Socket",
; 5631 : 			lpObj->AccountID,lpObj->Name);

  002ef	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  002f2	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  002fc	50		 push	 eax
  002fd	83 c3 52	 add	 ebx, 82			; 00000052H
  00300	53		 push	 ebx
  00301	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@KKBOJPIF@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5W@
  00306	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0030c	83 c4 18	 add	 esp, 24			; 00000018H

; 5663 : }

  0030f	5f		 pop	 edi
  00310	5e		 pop	 esi
  00311	5b		 pop	 ebx
  00312	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00315	33 cd		 xor	 ecx, ebp
  00317	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031c	8b e5		 mov	 esp, ebp
  0031e	5d		 pop	 ebp
  0031f	c2 08 00	 ret	 8
$LN1@SetSeedSph:

; 5632 : 		return;
; 5633 : 	}
; 5634 : 
; 5635 : 	lpObj->Money -= iMixNeedMoney;

  00322	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _iMixNeedMoney$[ebp]
  00328	29 8b cc 00 00
	00		 sub	 DWORD PTR [ebx+204], ecx

; 5636 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0032e	57		 push	 edi
  0032f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00334	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 5637 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  00339	8b 93 cc 00 00
	00		 mov	 edx, DWORD PTR [ebx+204]
  0033f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00341	52		 push	 edx
  00342	50		 push	 eax
  00343	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 5638 : 
; 5639 : 	g_SocketItem.ItemSetSeedSphere(lpItem,btOption,Pos);

  00348	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _Pos$GSCopy$[ebp]
  0034e	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _btOption$[ebp]
  00354	83 c4 08	 add	 esp, 8
  00357	51		 push	 ecx
  00358	52		 push	 edx
  00359	56		 push	 esi
  0035a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  0035f	e8 00 00 00 00	 call	 ?ItemSetSeedSphere@CSocketItems@@QAEEPAVCItem@@EE@Z ; CSocketItems::ItemSetSeedSphere

; 5640 : 	float dur = (float)ItemGetDurability(lpItem->m_Type,lpItem->m_Level,lpItem->IsExtItem(),lpItem->IsSetItem());

  00364	8b ce		 mov	 ecx, esi
  00366	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  0036b	50		 push	 eax
  0036c	8b ce		 mov	 ecx, esi
  0036e	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  00373	0f bf 4e 06	 movsx	 ecx, WORD PTR [esi+6]
  00377	50		 push	 eax
  00378	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  0037c	50		 push	 eax
  0037d	51		 push	 ecx
  0037e	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability

; 5641 : 
; 5642 : 	tmpItem.m_Number = lpItem->m_Number;

  00383	8b 16		 mov	 edx, DWORD PTR [esi]
  00385	89 95 18 ff ff
	ff		 mov	 DWORD PTR _tmpItem$[ebp], edx
  0038b	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv560[ebp], eax

; 5643 : 	tmpItem.m_Level = lpItem->m_Level;

  00391	66 8b 46 08	 mov	 ax, WORD PTR [esi+8]
  00395	db 85 14 ff ff
	ff		 fild	 DWORD PTR tv560[ebp]
  0039b	66 89 85 20 ff
	ff ff		 mov	 WORD PTR _tmpItem$[ebp+8], ax
  003a2	83 c4 10	 add	 esp, 16			; 00000010H

; 5644 : 	tmpItem.m_Durability = dur * lpItem->m_Durability / lpItem->m_BaseDurability;
; 5645 : 	tmpItem.m_JewelOfHarmonyOption = lpItem->m_JewelOfHarmonyOption;
; 5646 : 	tmpItem.m_bLOCKED = lpItem->m_bLOCKED;
; 5647 : 
; 5648 : 	tmpItem.Convert(lpItem->m_Type,lpItem->m_Option1,lpItem->m_Option2,lpItem->m_Option3,lpItem->m_NewOption,lpItem->m_SetOption,lpItem->m_ItemOptionEx,&lpItem->m_SocketOption[0],lpItem->m_SocketBonus,3);

  003a5	6a 03		 push	 3
  003a7	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR _dur$[ebp]
  003ad	d9 46 24	 fld	 DWORD PTR [esi+36]
  003b0	d8 8d 14 ff ff
	ff		 fmul	 DWORD PTR _dur$[ebp]
  003b6	d8 76 2c	 fdiv	 DWORD PTR [esi+44]
  003b9	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR _tmpItem$[ebp+36]
  003bf	8a 8e c0 00 00
	00		 mov	 cl, BYTE PTR [esi+192]
  003c5	88 4d d8	 mov	 BYTE PTR _tmpItem$[ebp+192], cl
  003c8	8a 96 d1 00 00
	00		 mov	 dl, BYTE PTR [esi+209]
  003ce	88 55 e9	 mov	 BYTE PTR _tmpItem$[ebp+209], dl
  003d1	0f b6 86 c7 00
	00 00		 movzx	 eax, BYTE PTR [esi+199]
  003d8	0f b6 96 c6 00
	00 00		 movzx	 edx, BYTE PTR [esi+198]
  003df	50		 push	 eax
  003e0	0f b6 86 aa 00
	00 00		 movzx	 eax, BYTE PTR [esi+170]
  003e7	8d 8e c8 00 00
	00		 lea	 ecx, DWORD PTR [esi+200]
  003ed	51		 push	 ecx
  003ee	0f b6 8e 93 00
	00 00		 movzx	 ecx, BYTE PTR [esi+147]
  003f5	52		 push	 edx
  003f6	0f b6 96 92 00
	00 00		 movzx	 edx, BYTE PTR [esi+146]
  003fd	50		 push	 eax
  003fe	0f b6 86 91 00
	00 00		 movzx	 eax, BYTE PTR [esi+145]
  00405	51		 push	 ecx
  00406	0f b6 8e 90 00
	00 00		 movzx	 ecx, BYTE PTR [esi+144]
  0040d	52		 push	 edx
  0040e	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  00412	50		 push	 eax
  00413	51		 push	 ecx
  00414	52		 push	 edx
  00415	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _tmpItem$[ebp]
  0041b	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 5649 : 	lpObj->ChaosLock = FALSE;
; 5650 : 
; 5651 : 	ItemByteConvert(&pMsg.ItemInfo[0],tmpItem);

  00420	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00426	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp+4]
  00429	8b fc		 mov	 edi, esp
  0042b	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00430	8d b5 18 ff ff
	ff		 lea	 esi, DWORD PTR _tmpItem$[ebp]
  00436	50		 push	 eax
  00437	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  00441	f3 a5		 rep movsd
  00443	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert

; 5652 : 	ChaosBoxInit(lpObj);

  00448	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0044e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00454	53		 push	 ebx
  00455	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 5653 : 	gObjChaosBoxInsertItemPos(lpObj->m_Index,tmpItem,0,-1);

  0045a	6a ff		 push	 -1
  0045c	6a 00		 push	 0
  0045e	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00464	8b fc		 mov	 edi, esp
  00466	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  0046b	8d b5 18 ff ff
	ff		 lea	 esi, DWORD PTR _tmpItem$[ebp]
  00471	f3 a5		 rep movsd
  00473	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00475	51		 push	 ecx
  00476	e8 00 00 00 00	 call	 ?gObjChaosBoxInsertItemPos@@YAEHVCItem@@HH@Z ; gObjChaosBoxInsertItemPos

; 5654 : 	gObjChaosItemSet(lpObj->m_Index,0,1);

  0047b	8b 13		 mov	 edx, DWORD PTR [ebx]
  0047d	6a 01		 push	 1
  0047f	6a 00		 push	 0
  00481	52		 push	 edx
  00482	e8 00 00 00 00	 call	 ?gObjChaosItemSet@@YAXHHE@Z ; gObjChaosItemSet
  00487	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH

; 5655 : 	GCUserChaosBoxSend(lpObj,0);

  0048d	6a 00		 push	 0
  0048f	53		 push	 ebx
  00490	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5656 : 
; 5657 : 	LogAddTD("[%s][%s] Set SeedSphere Mix Success - ItemInfo ( Name : %s, ItemCode : %d, Level : %d, SocketOption[%d,%d,%d,%d,%d], BonusOption : %d )",
; 5658 : 		lpObj->AccountID,lpObj->Name,ItemAttribute[tmpItem.m_Type].Name,tmpItem.m_Type,tmpItem.m_Level,
; 5659 : 		tmpItem.m_SocketOption[0],tmpItem.m_SocketOption[1],tmpItem.m_SocketOption[2],tmpItem.m_SocketOption[3],tmpItem.m_SocketOption[4],
; 5660 : 		tmpItem.m_SocketBonus);

  00495	0f b6 4d df	 movzx	 ecx, BYTE PTR _tmpItem$[ebp+199]
  00499	0f b6 55 e4	 movzx	 edx, BYTE PTR _tmpItem$[ebp+204]
  0049d	0f bf 85 1e ff
	ff ff		 movsx	 eax, WORD PTR _tmpItem$[ebp+6]
  004a4	51		 push	 ecx
  004a5	0f b6 4d e3	 movzx	 ecx, BYTE PTR _tmpItem$[ebp+203]
  004a9	52		 push	 edx
  004aa	0f b6 55 e2	 movzx	 edx, BYTE PTR _tmpItem$[ebp+202]
  004ae	51		 push	 ecx
  004af	0f b6 4d e1	 movzx	 ecx, BYTE PTR _tmpItem$[ebp+201]
  004b3	52		 push	 edx
  004b4	0f b6 55 e0	 movzx	 edx, BYTE PTR _tmpItem$[ebp+200]
  004b8	51		 push	 ecx
  004b9	0f bf 8d 20 ff
	ff ff		 movsx	 ecx, WORD PTR _tmpItem$[ebp+8]
  004c0	52		 push	 edx
  004c1	51		 push	 ecx
  004c2	50		 push	 eax
  004c3	6b c0 70	 imul	 eax, 112		; 00000070H
  004c6	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  004cb	50		 push	 eax
  004cc	8d 53 5d	 lea	 edx, DWORD PTR [ebx+93]
  004cf	52		 push	 edx
  004d0	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  004d3	50		 push	 eax
  004d4	68 00 00 00 00	 push	 OFFSET ??_C@_0II@KCLKEHBN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5SeedSphere?5Mix?5Succ@
  004d9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 5661 : 
; 5662 : 	DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  004df	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  004e3	8b 03		 mov	 eax, DWORD PTR [ebx]
  004e5	51		 push	 ecx
  004e6	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  004e9	52		 push	 edx
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  004f0	83 c4 44	 add	 esp, 68			; 00000044H

; 5663 : }

  004f3	5f		 pop	 edi
  004f4	5e		 pop	 esi
  004f5	5b		 pop	 ebx
  004f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004f9	33 cd		 xor	 ecx, ebp
  004fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00500	8b e5		 mov	 esp, ebp
  00502	5d		 pop	 ebp
  00503	c2 08 00	 ret	 8
$LN6@SetSeedSph:

; 5580 : 	{
; 5581 : 		pMsg.Result = 7;
; 5582 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00506	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0050a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0050c	51		 push	 ecx
  0050d	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00510	52		 push	 edx
  00511	50		 push	 eax
$LN27@SetSeedSph:
  00512	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00516	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5583 : 		lpObj->ChaosLock = FALSE;

  0051b	89 bb 20 12 00
	00		 mov	 DWORD PTR [ebx+4640], edi
$LN26@SetSeedSph:

; 5663 : }

  00521	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00524	83 c4 0c	 add	 esp, 12			; 0000000cH
  00527	5f		 pop	 edi
  00528	5e		 pop	 esi
  00529	33 cd		 xor	 ecx, ebp
  0052b	5b		 pop	 ebx
  0052c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00531	8b e5		 mov	 esp, ebp
  00533	5d		 pop	 ebp
  00534	c2 08 00	 ret	 8
?SetSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z ENDP ; CChaosBox::SetSeedSphereMix
_TEXT	ENDS
PUBLIC	??_C@_0IH@MCNGCFGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Remove?5Succe@ ; `string'
PUBLIC	??_C@_0BB@CFKCJMNE@SeedSphereRemove?$AA@	; `string'
PUBLIC	_Pos$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?RemoveSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z ; CChaosBox::RemoveSeedSphereMix
EXTRN	?ItemRemoveSeedSphere@CSocketItems@@QAEEPAVCItem@@E@Z:PROC ; CSocketItems::ItemRemoveSeedSphere
EXTRN	?g_SphereRemoveMoney@@3HA:DWORD			; g_SphereRemoveMoney
;	COMDAT ??_C@_0IH@MCNGCFGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Remove?5Succe@
CONST	SEGMENT
??_C@_0IH@MCNGCFGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Remove?5Succe@ DB '['
	DB	'%s][%s] SeedSphere Remove Success - ItemInfo ( Name : %s, Ite'
	DB	'mCode : %d, Level : %d, SocketOption[%d,%d,%d,%d,%d], BonusOp'
	DB	'tion : %d )', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CFKCJMNE@SeedSphereRemove?$AA@
CONST	SEGMENT
??_C@_0BB@CFKCJMNE@SeedSphereRemove?$AA@ DB 'SeedSphereRemove', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?RemoveSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
_Pos$GSCopy$ = -36					; size = 1
_iItemPos$ = -32					; size = 4
_iOtherItemCount$ = -28					; size = 4
_iItemCount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_Pos$ = 12						; size = 1
?RemoveSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z PROC ; CChaosBox::RemoveSeedSphereMix, COMDAT
; _this$ = ecx

; 5666 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8a 5d 0c	 mov	 bl, BYTE PTR _Pos$[ebp]
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00018	57		 push	 edi

; 5667 : 	int iItemCount = 0;
; 5668 : 	int iOtherItemCount = 0;
; 5669 : 	int tmp = 0;
; 5670 : 	int iItemPos = 0;
; 5671 : 	int tmp2 = 0;
; 5672 : 	int iChaosTaxMoney = 0;
; 5673 : 	int iMixNeedMoney = 0;
; 5674 : 
; 5675 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5676 : 
; 5677 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00019	6a 10		 push	 16			; 00000010H
  0001b	33 ff		 xor	 edi, edi
  0001d	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00020	68 86 00 00 00	 push	 134			; 00000086H
  00025	50		 push	 eax
  00026	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  00029	88 5d dc	 mov	 BYTE PTR _Pos$GSCopy$[ebp], bl
  0002c	89 7d e8	 mov	 DWORD PTR _iItemCount$[ebp], edi
  0002f	89 7d e4	 mov	 DWORD PTR _iOtherItemCount$[ebp], edi
  00032	89 7d e0	 mov	 DWORD PTR _iItemPos$[ebp], edi
  00035	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5678 : 	pMsg.Result = CB_ERROR;

  0003d	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 5679 : 
; 5680 : 	if( Pos >= MAX_SOCKET_COUNT )

  00041	80 fb 05	 cmp	 bl, 5
  00044	72 31		 jb	 SHORT $LN11@RemoveSeed

; 5681 : 	{
; 5682 : 		pMsg.Result = 7;
; 5683 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00046	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	51		 push	 ecx
  0004d	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00050	52		 push	 edx
  00051	50		 push	 eax
  00052	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00056	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5684 : 		lpObj->ChaosLock = FALSE;

  0005e	89 be 20 12 00
	00		 mov	 DWORD PTR [esi+4640], edi
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx

; 5756 : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 08 00	 ret	 8
$LN11@RemoveSeed:

; 5685 : 		return;
; 5686 : 	}
; 5687 : 
; 5688 : 	lpObj->ChaosLock = TRUE;

  00077	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1

; 5689 : 
; 5690 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  00081	33 db		 xor	 ebx, ebx
$LL10@RemoveSeed:

; 5691 : 	{
; 5692 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00083	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00089	03 cf		 add	 ecx, edi
  0008b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00090	83 f8 01	 cmp	 eax, 1
  00093	75 3e		 jne	 SHORT $LN9@RemoveSeed

; 5693 : 		{
; 5694 : 			if( g_SocketItem.IsSocketItem(lpObj->pChaosBox[n].m_Type) == TRUE &&
; 5695 : 				lpObj->pChaosBox[n].m_SocketOption[Pos] != 0xFF &&
; 5696 : 				lpObj->pChaosBox[n].m_SocketOption[Pos] != 0xFE )

  00095	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0009b	0f bf 54 39 06	 movsx	 edx, WORD PTR [ecx+edi+6]
  000a0	52		 push	 edx
  000a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  000a6	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  000ab	3c 01		 cmp	 al, 1
  000ad	75 21		 jne	 SHORT $LN6@RemoveSeed
  000af	0f b6 45 dc	 movzx	 eax, BYTE PTR _Pos$GSCopy$[ebp]
  000b3	03 86 10 12 00
	00		 add	 eax, DWORD PTR [esi+4624]
  000b9	8a 84 38 c8 00
	00 00		 mov	 al, BYTE PTR [eax+edi+200]
  000c0	3c ff		 cmp	 al, 255			; 000000ffH
  000c2	74 0c		 je	 SHORT $LN6@RemoveSeed
  000c4	3c fe		 cmp	 al, 254			; 000000feH
  000c6	74 08		 je	 SHORT $LN6@RemoveSeed

; 5697 : 			{
; 5698 : 				iItemCount++;

  000c8	ff 45 e8	 inc	 DWORD PTR _iItemCount$[ebp]

; 5699 : 				iItemPos = n;

  000cb	89 5d e0	 mov	 DWORD PTR _iItemPos$[ebp], ebx

; 5700 : 			}
; 5701 : 			else

  000ce	eb 03		 jmp	 SHORT $LN9@RemoveSeed
$LN6@RemoveSeed:

; 5702 : 			{
; 5703 : 				iOtherItemCount++;

  000d0	ff 45 e4	 inc	 DWORD PTR _iOtherItemCount$[ebp]
$LN9@RemoveSeed:

; 5689 : 
; 5690 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000d3	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000d9	43		 inc	 ebx
  000da	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000e0	7c a1		 jl	 SHORT $LL10@RemoveSeed

; 5704 : 			}
; 5705 : 		}
; 5706 : 	}
; 5707 : 
; 5708 : 	if( iOtherItemCount > 0 )

  000e2	33 db		 xor	 ebx, ebx
  000e4	39 5d e4	 cmp	 DWORD PTR _iOtherItemCount$[ebp], ebx
  000e7	7e 31		 jle	 SHORT $LN4@RemoveSeed
$LN16@RemoveSeed:

; 5709 : 	{
; 5710 : 		pMsg.Result = 7;
; 5711 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  000e9	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  000ed	8b 06		 mov	 eax, DWORD PTR [esi]
  000ef	51		 push	 ecx
  000f0	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  000f3	52		 push	 edx
  000f4	50		 push	 eax
  000f5	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  000f9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00101	5f		 pop	 edi

; 5712 : 		lpObj->ChaosLock = FALSE;

  00102	89 9e 20 12 00
	00		 mov	 DWORD PTR [esi+4640], ebx
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx

; 5756 : }

  0010a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010d	33 cd		 xor	 ecx, ebp
  0010f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 08 00	 ret	 8
$LN4@RemoveSeed:

; 5713 : 		return;
; 5714 : 	}
; 5715 : 
; 5716 : 	if( iItemCount != 1 )

  0011a	83 7d e8 01	 cmp	 DWORD PTR _iItemCount$[ebp], 1

; 5717 : 	{
; 5718 : 		pMsg.Result = 7;
; 5719 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5720 : 		lpObj->ChaosLock = FALSE;
; 5721 : 		return;

  0011e	75 c9		 jne	 SHORT $LN16@RemoveSeed

; 5722 : 	}
; 5723 : 
; 5724 : 	iChaosTaxMoney = (int)((__int64)g_SphereRemoveMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00120	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00122	51		 push	 ecx
  00123	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00128	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0012d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_SphereRemoveMoney@@3HA ; g_SphereRemoveMoney
  00133	f7 ef		 imul	 edi
  00135	53		 push	 ebx
  00136	6a 64		 push	 100			; 00000064H
  00138	52		 push	 edx
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 __alldiv

; 5725 : 
; 5726 : 	if( iChaosTaxMoney < 0 )

  0013f	3b c3		 cmp	 eax, ebx
  00141	7d 02		 jge	 SHORT $LN2@RemoveSeed

; 5727 : 		iChaosTaxMoney = 0;

  00143	33 c0		 xor	 eax, eax
$LN2@RemoveSeed:

; 5728 : 
; 5729 : 	iMixNeedMoney = g_SphereRemoveMoney +iChaosTaxMoney;
; 5730 : 
; 5731 : 	if( lpObj->Money < iMixNeedMoney )

  00145	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0014b	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  0014e	3b ca		 cmp	 ecx, edx
  00150	7d 31		 jge	 SHORT $LN1@RemoveSeed

; 5732 : 	{
; 5733 : 		pMsg.Result = 2;
; 5734 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00152	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00156	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00158	52		 push	 edx
  00159	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0015c	50		 push	 eax
  0015d	51		 push	 ecx
  0015e	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00162	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00167	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016a	5f		 pop	 edi

; 5735 : 		lpObj->ChaosLock = FALSE;

  0016b	89 9e 20 12 00
	00		 mov	 DWORD PTR [esi+4640], ebx
  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx

; 5756 : }

  00173	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00176	33 cd		 xor	 ecx, ebp
  00178	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c2 08 00	 ret	 8
$LN1@RemoveSeed:

; 5736 : 		return;
; 5737 : 	}
; 5738 : 
; 5739 : 	lpObj->Money -= iMixNeedMoney;

  00183	2b ca		 sub	 ecx, edx
  00185	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 5740 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0018b	50		 push	 eax
  0018c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00191	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 5741 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  00196	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0019c	8b 06		 mov	 eax, DWORD PTR [esi]
  0019e	52		 push	 edx
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 5742 : 
; 5743 : 	LogChaosItem(lpObj,"SeedSphereRemove");

  001a5	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a8	83 c4 08	 add	 esp, 8
  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CFKCJMNE@SeedSphereRemove?$AA@
  001b0	56		 push	 esi
  001b1	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5744 : 	g_SocketItem.ItemRemoveSeedSphere(&lpObj->pChaosBox[iItemPos],Pos);

  001b6	8b 7d e0	 mov	 edi, DWORD PTR _iItemPos$[ebp]
  001b9	8b 4d dc	 mov	 ecx, DWORD PTR _Pos$GSCopy$[ebp]
  001bc	69 ff d4 00 00
	00		 imul	 edi, 212		; 000000d4H
  001c2	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  001c8	51		 push	 ecx
  001c9	03 d7		 add	 edx, edi
  001cb	52		 push	 edx
  001cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  001d1	e8 00 00 00 00	 call	 ?ItemRemoveSeedSphere@CSocketItems@@QAEEPAVCItem@@E@Z ; CSocketItems::ItemRemoveSeedSphere

; 5745 : 	lpObj->ChaosLock = FALSE;
; 5746 : 
; 5747 : 	gObjInventoryCommit(lpObj->m_Index);

  001d6	8b 06		 mov	 eax, DWORD PTR [esi]
  001d8	50		 push	 eax
  001d9	89 9e 20 12 00
	00		 mov	 DWORD PTR [esi+4640], ebx
  001df	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 5748 : 	GCUserChaosBoxSend(lpObj,0);

  001e4	53		 push	 ebx
  001e5	56		 push	 esi
  001e6	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5749 : 
; 5750 : 	LogAddTD("[%s][%s] SeedSphere Remove Success - ItemInfo ( Name : %s, ItemCode : %d, Level : %d, SocketOption[%d,%d,%d,%d,%d], BonusOption : %d )",
; 5751 : 		lpObj->AccountID,lpObj->Name,ItemAttribute[lpObj->pChaosBox[iItemPos].m_Type].Name,lpObj->pChaosBox[iItemPos].m_Type,lpObj->pChaosBox[iItemPos].m_Level,
; 5752 : 		lpObj->pChaosBox[iItemPos].m_SocketOption[0],lpObj->pChaosBox[iItemPos].m_SocketOption[1],lpObj->pChaosBox[iItemPos].m_SocketOption[2],lpObj->pChaosBox[iItemPos].m_SocketOption[3],lpObj->pChaosBox[iItemPos].m_SocketOption[4],
; 5753 : 		lpObj->pChaosBox[iItemPos].m_SocketBonus);

  001eb	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  001f1	0f b6 94 38 c7
	00 00 00	 movzx	 edx, BYTE PTR [eax+edi+199]
  001f9	52		 push	 edx
  001fa	0f b6 94 38 cc
	00 00 00	 movzx	 edx, BYTE PTR [eax+edi+204]
  00202	03 c7		 add	 eax, edi
  00204	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  00208	52		 push	 edx
  00209	0f b6 90 cb 00
	00 00		 movzx	 edx, BYTE PTR [eax+203]
  00210	52		 push	 edx
  00211	0f b6 90 ca 00
	00 00		 movzx	 edx, BYTE PTR [eax+202]
  00218	52		 push	 edx
  00219	0f b6 90 c9 00
	00 00		 movzx	 edx, BYTE PTR [eax+201]
  00220	52		 push	 edx
  00221	0f b6 90 c8 00
	00 00		 movzx	 edx, BYTE PTR [eax+200]
  00228	0f bf 40 08	 movsx	 eax, WORD PTR [eax+8]
  0022c	52		 push	 edx
  0022d	50		 push	 eax
  0022e	51		 push	 ecx
  0022f	6b c9 70	 imul	 ecx, 112		; 00000070H
  00232	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  00238	51		 push	 ecx
  00239	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  0023c	51		 push	 ecx
  0023d	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  00240	52		 push	 edx
  00241	68 00 00 00 00	 push	 OFFSET ??_C@_0IH@MCNGCFGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Remove?5Succe@
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 5754 : 
; 5755 : 	DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0024c	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00250	8b 16		 mov	 edx, DWORD PTR [esi]
  00252	50		 push	 eax
  00253	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00256	51		 push	 ecx
  00257	52		 push	 edx
  00258	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5756 : }

  0025d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00260	83 c4 48	 add	 esp, 72			; 00000048H
  00263	5f		 pop	 edi
  00264	5e		 pop	 esi
  00265	33 cd		 xor	 ecx, ebp
  00267	5b		 pop	 ebx
  00268	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026d	8b e5		 mov	 esp, ebp
  0026f	5d		 pop	 ebp
  00270	c2 08 00	 ret	 8
?RemoveSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z ENDP ; CChaosBox::RemoveSeedSphereMix
_TEXT	ENDS
PUBLIC	??_C@_0DF@GJBOIKGG@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ ; `string'
PUBLIC	??_C@_0DI@FEKMLFCO@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ ; `string'
PUBLIC	??_C@_0BN@PDFCNBKK@?$FLSecromicon?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0L@FKBLGOD@Secromicon?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SecromiconMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::SecromiconMix
;	COMDAT ??_C@_0DF@GJBOIKGG@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
CONST	SEGMENT
??_C@_0DF@GJBOIKGG@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ DB '['
	DB	'Secromicon Mix][%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@FEKMLFCO@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
CONST	SEGMENT
??_C@_0DI@FEKMLFCO@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ DB '['
	DB	'Secromicon Mix][%s][%s] CBMix Success %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PDFCNBKK@?$FLSecromicon?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BN@PDFCNBKK@?$FLSecromicon?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Secrom'
	DB	'icon] Chaos Mix Start', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FKBLGOD@Secromicon?$AA@
CONST	SEGMENT
??_C@_0L@FKBLGOD@Secromicon?$AA@ DB 'Secromicon', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SecromiconMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
_iSecromiconPart2$ = -40				; size = 4
_iSecromiconPart3$ = -36				; size = 4
_iSecromiconPart4$ = -32				; size = 4
_iSecromiconPart6$ = -28				; size = 4
_iSecromiconPart5$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SecromiconMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::SecromiconMix, COMDAT
; _this$ = ecx

; 5759 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 5760 : 	lpObj->ChaosLock = TRUE;
; 5761 : 
; 5762 : 	int iNeedChaosMoney;
; 5763 : 	int iSecromiconPart1 = 0;

  00016	33 ff		 xor	 edi, edi

; 5764 : 	int iSecromiconPart2 = 0;
; 5765 : 	int iSecromiconPart3 = 0;
; 5766 : 	int iSecromiconPart4 = 0;
; 5767 : 	int iSecromiconPart5 = 0;
; 5768 : 	int iSecromiconPart6 = 0;
; 5769 : 	int iOtherItemCount = 0;
; 5770 : 
; 5771 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5772 : 
; 5773 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	33 db		 xor	 ebx, ebx
  00032	89 7d d8	 mov	 DWORD PTR _iSecromiconPart2$[ebp], edi
  00035	89 7d dc	 mov	 DWORD PTR _iSecromiconPart3$[ebp], edi
  00038	89 7d e0	 mov	 DWORD PTR _iSecromiconPart4$[ebp], edi
  0003b	89 7d e8	 mov	 DWORD PTR _iSecromiconPart5$[ebp], edi
  0003e	89 7d e4	 mov	 DWORD PTR _iSecromiconPart6$[ebp], edi
  00041	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5774 : 	pMsg.Result = CB_ERROR;

  00049	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0004c	8d 64 24 00	 npad	 4
$LL23@Secromicon:

; 5777 : 	{
; 5778 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	b9 01 00 00 00	 mov	 ecx, 1
  00062	3b c1		 cmp	 eax, ecx
  00064	75 62		 jne	 SHORT $LN22@Secromicon

; 5779 : 		{
; 5780 : 			if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,103) )

  00066	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  0006c	0f b7 44 3a 06	 movzx	 eax, WORD PTR [edx+edi+6]
  00071	ba 67 1c 00 00	 mov	 edx, 7271		; 00001c67H
  00076	66 3b c2	 cmp	 ax, dx
  00079	75 04		 jne	 SHORT $LN19@Secromicon

; 5781 : 			{
; 5782 : 				iSecromiconPart1++;

  0007b	03 d9		 add	 ebx, ecx
  0007d	eb 49		 jmp	 SHORT $LN22@Secromicon
$LN19@Secromicon:

; 5783 : 			}
; 5784 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,104) )

  0007f	ba 68 1c 00 00	 mov	 edx, 7272		; 00001c68H
  00084	66 3b c2	 cmp	 ax, dx
  00087	75 05		 jne	 SHORT $LN17@Secromicon

; 5785 : 			{
; 5786 : 				iSecromiconPart2++;

  00089	01 4d d8	 add	 DWORD PTR _iSecromiconPart2$[ebp], ecx
  0008c	eb 3a		 jmp	 SHORT $LN22@Secromicon
$LN17@Secromicon:

; 5787 : 			}
; 5788 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,105) )

  0008e	ba 69 1c 00 00	 mov	 edx, 7273		; 00001c69H
  00093	66 3b c2	 cmp	 ax, dx
  00096	75 05		 jne	 SHORT $LN15@Secromicon

; 5789 : 			{
; 5790 : 				iSecromiconPart3++;

  00098	01 4d dc	 add	 DWORD PTR _iSecromiconPart3$[ebp], ecx
  0009b	eb 2b		 jmp	 SHORT $LN22@Secromicon
$LN15@Secromicon:

; 5791 : 			}
; 5792 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,106) )

  0009d	ba 6a 1c 00 00	 mov	 edx, 7274		; 00001c6aH
  000a2	66 3b c2	 cmp	 ax, dx
  000a5	75 05		 jne	 SHORT $LN13@Secromicon

; 5793 : 			{
; 5794 : 				iSecromiconPart4++;

  000a7	01 4d e0	 add	 DWORD PTR _iSecromiconPart4$[ebp], ecx
  000aa	eb 1c		 jmp	 SHORT $LN22@Secromicon
$LN13@Secromicon:

; 5795 : 			}
; 5796 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,107) )

  000ac	ba 6b 1c 00 00	 mov	 edx, 7275		; 00001c6bH
  000b1	66 3b c2	 cmp	 ax, dx
  000b4	75 05		 jne	 SHORT $LN11@Secromicon

; 5797 : 			{
; 5798 : 				iSecromiconPart5++;

  000b6	01 4d e8	 add	 DWORD PTR _iSecromiconPart5$[ebp], ecx
  000b9	eb 0d		 jmp	 SHORT $LN22@Secromicon
$LN11@Secromicon:

; 5799 : 			}
; 5800 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,108) )

  000bb	ba 6c 1c 00 00	 mov	 edx, 7276		; 00001c6cH
  000c0	66 3b c2	 cmp	 ax, dx
  000c3	75 03		 jne	 SHORT $LN22@Secromicon

; 5801 : 			{
; 5802 : 				iSecromiconPart6++;

  000c5	01 4d e4	 add	 DWORD PTR _iSecromiconPart6$[ebp], ecx
$LN22@Secromicon:

; 5775 : 
; 5776 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000c8	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000ce	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000d4	0f 8c 76 ff ff
	ff		 jl	 $LL23@Secromicon

; 5803 : 			}
; 5804 : 			else
; 5805 : 			{
; 5806 : 				iOtherItemCount = 0;
; 5807 : 			}
; 5808 : 		}
; 5809 : 	}
; 5810 : 
; 5811 : 	if( iOtherItemCount != 0 ||
; 5812 : 		iSecromiconPart1 != 1 ||
; 5813 : 		iSecromiconPart2 != 1 ||
; 5814 : 		iSecromiconPart3 != 1 ||
; 5815 : 		iSecromiconPart4 != 1 ||
; 5816 : 		iSecromiconPart5 != 1 ||
; 5817 : 		iSecromiconPart6 != 1 )

  000da	3b d9		 cmp	 ebx, ecx
  000dc	0f 85 8b 01 00
	00		 jne	 $LN6@Secromicon
  000e2	39 4d d8	 cmp	 DWORD PTR _iSecromiconPart2$[ebp], ecx
  000e5	0f 85 82 01 00
	00		 jne	 $LN6@Secromicon
  000eb	39 4d dc	 cmp	 DWORD PTR _iSecromiconPart3$[ebp], ecx
  000ee	0f 85 79 01 00
	00		 jne	 $LN6@Secromicon
  000f4	39 4d e0	 cmp	 DWORD PTR _iSecromiconPart4$[ebp], ecx
  000f7	0f 85 70 01 00
	00		 jne	 $LN6@Secromicon
  000fd	39 4d e8	 cmp	 DWORD PTR _iSecromiconPart5$[ebp], ecx
  00100	0f 85 67 01 00
	00		 jne	 $LN6@Secromicon
  00106	39 4d e4	 cmp	 DWORD PTR _iSecromiconPart6$[ebp], ecx
  00109	0f 85 5e 01 00
	00		 jne	 $LN6@Secromicon

; 5821 : 		lpObj->ChaosLock = FALSE;
; 5822 : 		return;
; 5823 : 	}
; 5824 : 
; 5825 : 	LogChaosItem(lpObj, "Secromicon");

  0010f	8b 5d d4	 mov	 ebx, DWORD PTR _this$[ebp]
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FKBLGOD@Secromicon?$AA@
  00117	56		 push	 esi
  00118	8b cb		 mov	 ecx, ebx
  0011a	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5826 : 	LogAddTD("[Secromicon] Chaos Mix Start");

  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PDFCNBKK@?$FLSecromicon?$FN?5Chaos?5Mix?5Start?$AA@
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 5827 : 
; 5828 : 	lpObj->ChaosSuccessRate = 100;
; 5829 : 	iNeedChaosMoney = 1000000;
; 5830 : 
; 5831 : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  0012a	8b 06		 mov	 eax, DWORD PTR [esi]
  0012c	83 c4 04	 add	 esp, 4
  0012f	50		 push	 eax
  00130	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00135	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H
  0013f	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00144	6a 00		 push	 0
  00146	99		 cdq
  00147	68 40 42 0f 00	 push	 1000000			; 000f4240H
  0014c	52		 push	 edx
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 __allmul
  00153	6a 00		 push	 0
  00155	6a 64		 push	 100			; 00000064H
  00157	52		 push	 edx
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 __alldiv

; 5832 : 
; 5833 : 	if ( iChaosTaxMoney < 0 )

  0015e	85 c0		 test	 eax, eax
  00160	79 02		 jns	 SHORT $LN5@Secromicon

; 5834 : 	{
; 5835 : 		iChaosTaxMoney = 0;

  00162	33 c0		 xor	 eax, eax
$LN5@Secromicon:

; 5836 : 	}
; 5837 : 
; 5838 : 	iNeedChaosMoney += iChaosTaxMoney;

  00164	8d b8 40 42 0f
	00		 lea	 edi, DWORD PTR [eax+1000000]

; 5839 : 
; 5840 : 	if ( iNeedChaosMoney < 0 )

  0016a	85 ff		 test	 edi, edi
  0016c	79 02		 jns	 SHORT $LN4@Secromicon

; 5841 : 	{
; 5842 : 		iNeedChaosMoney = 0;

  0016e	33 ff		 xor	 edi, edi
$LN4@Secromicon:

; 5843 : 	}
; 5844 : 
; 5845 : 	if(lpObj->Money < iNeedChaosMoney)

  00170	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00176	3b cf		 cmp	 ecx, edi
  00178	7d 15		 jge	 SHORT $LN3@Secromicon

; 5846 : 	{
; 5847 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 5848 : 		
; 5849 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  0017a	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0017e	8b 06		 mov	 eax, DWORD PTR [esi]
  00180	51		 push	 ecx
  00181	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00184	52		 push	 edx
  00185	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00189	50		 push	 eax

; 5850 : 		lpObj->ChaosLock = FALSE;
; 5851 : 		return;

  0018a	e9 ee 00 00 00	 jmp	 $LN28@Secromicon
$LN3@Secromicon:

; 5852 : 	}
; 5853 : 
; 5854 : 	lpObj->Money -= iNeedChaosMoney;

  0018f	2b cf		 sub	 ecx, edi
  00191	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 5855 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00197	50		 push	 eax
  00198	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0019d	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 5856 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  001a2	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  001a8	8b 16		 mov	 edx, DWORD PTR [esi]
  001aa	51		 push	 ecx
  001ab	52		 push	 edx
  001ac	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001b1	83 c4 08	 add	 esp, 8

; 5857 : 
; 5858 : 	if( rand()%100 < lpObj->ChaosSuccessRate )

  001b4	e8 00 00 00 00	 call	 _rand
  001b9	99		 cdq
  001ba	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001bf	f7 f9		 idiv	 ecx
  001c1	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001c7	7d 5c		 jge	 SHORT $LN2@Secromicon

; 5859 : 	{
; 5860 : 		int Item = ITEMGET(14,109);
; 5861 : #if( __4GAMERS__ == 1 )
; 5862 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 5863 : #endif
; 5864 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,0,0,0,0,0,-1,0,0);

  001c9	6a 00		 push	 0
  001cb	6a 00		 push	 0
  001cd	6a 00		 push	 0
  001cf	8b 16		 mov	 edx, DWORD PTR [esi]
  001d1	6a 00		 push	 0
  001d3	6a ff		 push	 -1
  001d5	6a 00		 push	 0
  001d7	6a 00		 push	 0
  001d9	6a 00		 push	 0
  001db	6a 00		 push	 0
  001dd	6a 00		 push	 0
  001df	68 6d 1c 00 00	 push	 7277			; 00001c6dH
  001e4	6a 00		 push	 0
  001e6	6a 00		 push	 0
  001e8	68 ff 00 00 00	 push	 255			; 000000ffH
  001ed	52		 push	 edx
  001ee	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 5865 : 		gObjInventoryCommit(lpObj->m_Index);

  001f3	8b 06		 mov	 eax, DWORD PTR [esi]
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 5866 : 		LogAddTD("[Secromicon Mix][%s][%s] CBMix Success %d Money : %d-%d",
; 5867 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney);

  001fb	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00201	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00207	83 c4 40	 add	 esp, 64			; 00000040H
  0020a	57		 push	 edi
  0020b	51		 push	 ecx
  0020c	52		 push	 edx
  0020d	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00210	50		 push	 eax
  00211	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  00214	51		 push	 ecx
  00215	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@FEKMLFCO@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
  0021a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00220	83 c4 18	 add	 esp, 24			; 00000018H

; 5868 : 	}
; 5869 : 	else

  00223	eb 60		 jmp	 SHORT $LN1@Secromicon
$LN2@Secromicon:

; 5870 : 	{
; 5871 : #if( __4GAMERS__ == 1 )
; 5872 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 5873 : #endif
; 5874 : 		ChaosBoxInit(lpObj);

  00225	56		 push	 esi
  00226	8b cb		 mov	 ecx, ebx
  00228	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 5875 : 		GCUserChaosBoxSend(lpObj,0);

  0022d	6a 00		 push	 0
  0022f	56		 push	 esi
  00230	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5876 : 
; 5877 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00235	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00239	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0023b	52		 push	 edx
  0023c	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0023f	50		 push	 eax
  00240	51		 push	 ecx
  00241	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5878 : 
; 5879 : 		LogAddTD("[Secromicon Mix][%s][%s] CBMix Fail %d Money : %d-%d",
; 5880 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney);

  00246	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0024c	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  00252	57		 push	 edi
  00253	52		 push	 edx
  00254	50		 push	 eax
  00255	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  00258	51		 push	 ecx
  00259	8d 56 52	 lea	 edx, DWORD PTR [esi+82]
  0025c	52		 push	 edx
  0025d	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@GJBOIKGG@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
  00262	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00268	83 c4 2c	 add	 esp, 44			; 0000002cH

; 5881 : 	}
; 5882 : 	lpObj->ChaosLock = FALSE;

  0026b	eb 18		 jmp	 SHORT $LN1@Secromicon
$LN6@Secromicon:

; 5818 : 	{
; 5819 : 		pMsg.Result = 7;
; 5820 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0026d	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00271	8b 16		 mov	 edx, DWORD PTR [esi]
  00273	50		 push	 eax
  00274	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00277	51		 push	 ecx
  00278	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  0027c	52		 push	 edx
$LN28@Secromicon:
  0027d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00282	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Secromicon:

; 5883 : }

  00285	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00288	5f		 pop	 edi
  00289	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00293	5e		 pop	 esi
  00294	33 cd		 xor	 ecx, ebp
  00296	5b		 pop	 ebx
  00297	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029c	8b e5		 mov	 esp, ebp
  0029e	5d		 pop	 ebp
  0029f	c2 04 00	 ret	 4
?SecromiconMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::SecromiconMix
_TEXT	ENDS
PUBLIC	??_C@_0HB@FMOBPLCD@?$FLLuckySystem?$FN?$FLItemMix?$FN?5?9?5User?$CIID@ ; `string'
PUBLIC	??_C@_0DM@LHKABBDI@?$FLLuckySystem?$FN?$FLItemMix?$FN?5Chaos?5Car@ ; `string'
PUBLIC	??_C@_0BO@IIPPLEDJ@?$FLLuckySystem?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0M@JDLPAJDH@LuckySystem?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LuckySystemItemCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LuckySystemItemCreate
EXTRN	?GenSetOption@CSetItemOption@@QAEHH@Z:PROC	; CSetItemOption::GenSetOption
;	COMDAT ??_C@_0HB@FMOBPLCD@?$FLLuckySystem?$FN?$FLItemMix?$FN?5?9?5User?$CIID@
CONST	SEGMENT
??_C@_0HB@FMOBPLCD@?$FLLuckySystem?$FN?$FLItemMix?$FN?5?9?5User?$CIID@ DB '['
	DB	'LuckySystem][ItemMix] - User(ID:%s,Name:%s) Item(Name:%s,Type'
	DB	':%d,Level:%d,Dur:%d,Skill:%d,Luck:%d,AddOption:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LHKABBDI@?$FLLuckySystem?$FN?$FLItemMix?$FN?5Chaos?5Car@
CONST	SEGMENT
??_C@_0DM@LHKABBDI@?$FLLuckySystem?$FN?$FLItemMix?$FN?5Chaos?5Car@ DB '[L'
	DB	'uckySystem][ItemMix] Chaos Card Item Mix Success [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IIPPLEDJ@?$FLLuckySystem?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BO@IIPPLEDJ@?$FLLuckySystem?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Lucky'
	DB	'System] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JDLPAJDH@LuckySystem?$AA@
CONST	SEGMENT
??_C@_0M@JDLPAJDH@LuckySystem?$AA@ DB 'LuckySystem', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LuckySystemItemCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_ItemGroup$ = -48					; size = 4
_Level$ = -48						; size = 4
_this$ = -48						; size = 4
_Option3$ = -44						; size = 4
_LuckyCard$ = -44					; size = 4
_Option2$ = -40						; size = 4
_iOtherItemCount$ = -40					; size = 4
_pMsg$ = -36						; size = 16
_gear_2$ = -20						; size = 7
_gear_1$ = -12						; size = 7
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?LuckySystemItemCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::LuckySystemItemCreate, COMDAT
; _this$ = ecx

; 5886 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5887 : 	lpObj->ChaosLock = TRUE;
; 5888 : 
; 5889 : 	CItem* LuckyCard = NULL;
; 5890 : 	int iLuckyCardCount = 0;
; 5891 : 	int iOtherItemCount = 0;
; 5892 : 
; 5893 : 	BYTE gear_1[MAX_TYPE_PLAYER] = {64,62,63,62,62,65,62};

  00016	b0 3e		 mov	 al, 62			; 0000003eH

; 5894 : 	BYTE gear_2[MAX_TYPE_PLAYER] = {69,67,68,71,66,70,72};
; 5895 : 
; 5896 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5897 : 
; 5898 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	88 45 fa	 mov	 BYTE PTR _gear_1$[ebp+6], al
  0001d	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00020	33 f6		 xor	 esi, esi
  00022	68 86 00 00 00	 push	 134			; 00000086H
  00027	50		 push	 eax
  00028	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 87 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+4640], 1
  00035	89 75 d4	 mov	 DWORD PTR _LuckyCard$[ebp], esi
  00038	33 db		 xor	 ebx, ebx
  0003a	89 75 d8	 mov	 DWORD PTR _iOtherItemCount$[ebp], esi
  0003d	c7 45 f4 40 3e
	3f 3e		 mov	 DWORD PTR _gear_1$[ebp], 1044332096 ; 3e3f3e40H
  00044	66 c7 45 f8 3e
	41		 mov	 WORD PTR _gear_1$[ebp+4], 16702 ; 0000413eH
  0004a	c7 45 ec 45 43
	44 47		 mov	 DWORD PTR _gear_2$[ebp], 1195656005 ; 47444345H
  00051	66 c7 45 f0 42
	46		 mov	 WORD PTR _gear_2$[ebp+4], 17986 ; 00004642H
  00057	c6 45 f2 48	 mov	 BYTE PTR _gear_2$[ebp+6], 72 ; 00000048H
  0005b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5899 : 	pMsg.Result = CB_ERROR;

  00063	88 5d df	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00066	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL25@LuckySyste:

; 5902 : 	{
; 5903 : 		if( lpObj->pChaosBox[n].IsItem() )

  00070	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00076	03 ce		 add	 ecx, esi
  00078	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0007d	85 c0		 test	 eax, eax
  0007f	74 2a		 je	 SHORT $LN24@LuckySyste

; 5904 : 		{
; 5905 : 			if( lpObj->pChaosBox[n].m_Type >= ITEMGET(13,135) &&
; 5906 : 				lpObj->pChaosBox[n].m_Type <= ITEMGET(13,144) )

  00081	8b 87 10 12 00
	00		 mov	 eax, DWORD PTR [edi+4624]
  00087	0f b7 4c 30 06	 movzx	 ecx, WORD PTR [eax+esi+6]
  0008c	03 c6		 add	 eax, esi
  0008e	ba 87 1a 00 00	 mov	 edx, 6791		; 00001a87H
  00093	66 3b ca	 cmp	 cx, dx
  00096	7c 10		 jl	 SHORT $LN21@LuckySyste
  00098	ba 90 1a 00 00	 mov	 edx, 6800		; 00001a90H
  0009d	66 3b ca	 cmp	 cx, dx
  000a0	7f 06		 jg	 SHORT $LN21@LuckySyste

; 5907 : 			{
; 5908 : 				LuckyCard = &lpObj->pChaosBox[n];

  000a2	89 45 d4	 mov	 DWORD PTR _LuckyCard$[ebp], eax

; 5909 : 				iLuckyCardCount++;

  000a5	43		 inc	 ebx

; 5910 : 			}
; 5911 : 			else

  000a6	eb 03		 jmp	 SHORT $LN24@LuckySyste
$LN21@LuckySyste:

; 5912 : 			{
; 5913 : 				iOtherItemCount++;

  000a8	ff 45 d8	 inc	 DWORD PTR _iOtherItemCount$[ebp]
$LN24@LuckySyste:

; 5900 : 
; 5901 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000ab	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  000b1	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  000b7	7c b7		 jl	 SHORT $LL25@LuckySyste

; 5914 : 			}
; 5915 : 		}
; 5916 : 	}
; 5917 : 
; 5918 : 	if( iLuckyCardCount != 1 ||
; 5919 : 		iOtherItemCount != 0 )

  000b9	83 fb 01	 cmp	 ebx, 1
  000bc	0f 85 1b 02 00
	00		 jne	 $LN32@LuckySyste
  000c2	33 db		 xor	 ebx, ebx
  000c4	39 5d d8	 cmp	 DWORD PTR _iOtherItemCount$[ebp], ebx
  000c7	0f 85 12 02 00
	00		 jne	 $LN18@LuckySyste

; 5923 : 		lpObj->ChaosLock = FALSE;
; 5924 : 		return;
; 5925 : 	}
; 5926 : 
; 5927 : 	if( lpObj->Class == CLASS_MAGUMSA && 
; 5928 : 		(LuckyCard->m_Type == ITEMGET(13, 137) || LuckyCard->m_Type == ITEMGET(13, 142) ) )

  000cd	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  000d4	8b 75 d4	 mov	 esi, DWORD PTR _LuckyCard$[ebp]
  000d7	83 f8 03	 cmp	 eax, 3
  000da	75 2c		 jne	 SHORT $LN17@LuckySyste
  000dc	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  000e0	ba 89 1a 00 00	 mov	 edx, 6793		; 00001a89H
  000e5	66 3b ca	 cmp	 cx, dx
  000e8	74 0a		 je	 SHORT $LN16@LuckySyste
  000ea	ba 8e 1a 00 00	 mov	 edx, 6798		; 00001a8eH
  000ef	66 3b ca	 cmp	 cx, dx
  000f2	75 14		 jne	 SHORT $LN17@LuckySyste
$LN16@LuckySyste:

; 5929 : 	{
; 5930 : 		pMsg.Result = 0;
; 5931 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  000f4	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000f8	8b 17		 mov	 edx, DWORD PTR [edi]
  000fa	50		 push	 eax
  000fb	8d 4d dc	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000fe	51		 push	 ecx
  000ff	88 5d df	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00102	52		 push	 edx

; 5932 : 		lpObj->ChaosLock = FALSE;
; 5933 : 		return;

  00103	e9 e7 01 00 00	 jmp	 $LN38@LuckySyste
$LN17@LuckySyste:

; 5934 : 	}
; 5935 : 
; 5936 : 	if( lpObj->Class == CLASS_FIGHTER && 
; 5937 : 		(LuckyCard->m_Type == ITEMGET(13,138) || LuckyCard->m_Type == ITEMGET(13,143) ) )

  00108	83 f8 06	 cmp	 eax, 6
  0010b	75 18		 jne	 SHORT $LN15@LuckySyste
  0010d	0f b7 46 06	 movzx	 eax, WORD PTR [esi+6]
  00111	b9 8a 1a 00 00	 mov	 ecx, 6794		; 00001a8aH
  00116	66 3b c1	 cmp	 ax, cx
  00119	74 d9		 je	 SHORT $LN16@LuckySyste
  0011b	ba 8f 1a 00 00	 mov	 edx, 6799		; 00001a8fH
  00120	66 3b c2	 cmp	 ax, dx

; 5938 : 	{
; 5939 : 		pMsg.Result = 0;
; 5940 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5941 : 		lpObj->ChaosLock = FALSE;
; 5942 : 		return;

  00123	74 cf		 je	 SHORT $LN16@LuckySyste
$LN15@LuckySyste:

; 5943 : 	}
; 5944 : 
; 5945 : 	LogChaosItem(lpObj, "LuckySystem");

  00125	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JDLPAJDH@LuckySystem?$AA@
  0012d	57		 push	 edi
  0012e	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5946 : 	LogAddTD("[LuckySystem] Chaos Mix Start");

  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IIPPLEDJ@?$FLLuckySystem?$FN?5Chaos?5Mix?5Start?$AA@
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0013e	83 c4 04	 add	 esp, 4

; 5947 : 
; 5948 : 	int ItemGroup;
; 5949 : 	int Item;
; 5950 : 	int Level;
; 5951 : 	int Option1;
; 5952 : 	int Option2;
; 5953 : 	int Option3;
; 5954 : 
; 5955 : 	Option1 = TRUE;
; 5956 : 	Option2 = 0;

  00141	89 5d d8	 mov	 DWORD PTR _Option2$[ebp], ebx

; 5957 : 	Option3 = 0;

  00144	89 5d d4	 mov	 DWORD PTR _Option3$[ebp], ebx

; 5958 : 	Level = rand()%10;

  00147	e8 00 00 00 00	 call	 _rand
  0014c	99		 cdq
  0014d	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00152	f7 f9		 idiv	 ecx
  00154	89 55 d0	 mov	 DWORD PTR _Level$[ebp], edx

; 5959 : 
; 5960 : 	if( rand()%2 )	{

  00157	e8 00 00 00 00	 call	 _rand
  0015c	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00161	79 05		 jns	 SHORT $LN34@LuckySyste
  00163	48		 dec	 eax
  00164	83 c8 fe	 or	 eax, -2			; fffffffeH
  00167	40		 inc	 eax
$LN34@LuckySyste:
  00168	74 1a		 je	 SHORT $LN33@LuckySyste

; 5961 : 		if( rand()%2 )	{

  0016a	e8 00 00 00 00	 call	 _rand
  0016f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00174	79 05		 jns	 SHORT $LN35@LuckySyste
  00176	48		 dec	 eax
  00177	83 c8 fe	 or	 eax, -2			; fffffffeH
  0017a	40		 inc	 eax
$LN35@LuckySyste:
  0017b	74 07		 je	 SHORT $LN33@LuckySyste

; 5962 : 			Option2 = TRUE;

  0017d	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _Option2$[ebp], 1
$LN33@LuckySyste:

; 5963 : 		}
; 5964 : 	}
; 5965 : 
; 5966 : 	if( rand()%2 )	{

  00184	e8 00 00 00 00	 call	 _rand
  00189	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0018e	79 05		 jns	 SHORT $LN36@LuckySyste
  00190	48		 dec	 eax
  00191	83 c8 fe	 or	 eax, -2			; fffffffeH
  00194	40		 inc	 eax
$LN36@LuckySyste:
  00195	74 11		 je	 SHORT $LN11@LuckySyste

; 5967 : 		Option3 = 1+rand()%3;

  00197	e8 00 00 00 00	 call	 _rand
  0019c	99		 cdq
  0019d	b9 03 00 00 00	 mov	 ecx, 3
  001a2	f7 f9		 idiv	 ecx
  001a4	42		 inc	 edx
  001a5	89 55 d4	 mov	 DWORD PTR _Option3$[ebp], edx
$LN11@LuckySyste:

; 5968 : 	}
; 5969 : 
; 5970 : 	if( rand()%2 )	{

  001a8	e8 00 00 00 00	 call	 _rand
  001ad	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001b2	79 05		 jns	 SHORT $LN37@LuckySyste
  001b4	48		 dec	 eax
  001b5	83 c8 fe	 or	 eax, -2			; fffffffeH
  001b8	40		 inc	 eax
$LN37@LuckySyste:
  001b9	74 10		 je	 SHORT $LN10@LuckySyste

; 5971 : 		Level = rand()%15;

  001bb	e8 00 00 00 00	 call	 _rand
  001c0	99		 cdq
  001c1	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  001c6	f7 f9		 idiv	 ecx
  001c8	89 55 d0	 mov	 DWORD PTR _Level$[ebp], edx
$LN10@LuckySyste:

; 5972 : 	}
; 5973 : 
; 5974 : 	switch( LuckyCard->m_Type )

  001cb	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  001cf	0f bf c1	 movsx	 eax, cx
  001d2	05 79 e5 ff ff	 add	 eax, -6791		; ffffe579H
  001d7	83 f8 09	 cmp	 eax, 9
  001da	77 2a		 ja	 SHORT $LN30@LuckySyste
  001dc	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN40@LuckySyste[eax*4]
$LN7@LuckySyste:

; 5975 : 	{
; 5976 : 	case ITEMGET(13,135):
; 5977 : 	case ITEMGET(13,140):
; 5978 : 		ItemGroup = 8;

  001e3	b8 08 00 00 00	 mov	 eax, 8

; 5979 : 		break;

  001e8	eb 1f		 jmp	 SHORT $LN8@LuckySyste
$LN6@LuckySyste:

; 5980 : 	case ITEMGET(13,136):
; 5981 : 	case ITEMGET(13,141):
; 5982 : 		ItemGroup = 9;

  001ea	b8 09 00 00 00	 mov	 eax, 9

; 5983 : 		break;

  001ef	eb 18		 jmp	 SHORT $LN8@LuckySyste
$LN5@LuckySyste:

; 5984 : 	case ITEMGET(13,137):
; 5985 : 	case ITEMGET(13,142):
; 5986 : 		ItemGroup = 7;

  001f1	b8 07 00 00 00	 mov	 eax, 7

; 5987 : 		break;

  001f6	eb 11		 jmp	 SHORT $LN8@LuckySyste
$LN4@LuckySyste:

; 5988 : 	case ITEMGET(13,138):
; 5989 : 	case ITEMGET(13,143):
; 5990 : 		ItemGroup = 10;

  001f8	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH

; 5991 : 		break;

  001fd	eb 0a		 jmp	 SHORT $LN8@LuckySyste
$LN3@LuckySyste:

; 5992 : 	case ITEMGET(13,139):
; 5993 : 	case ITEMGET(13,144):
; 5994 : 		ItemGroup = 11;

  001ff	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  00204	eb 03		 jmp	 SHORT $LN8@LuckySyste
$LN30@LuckySyste:
  00206	8b 45 d0	 mov	 eax, DWORD PTR _ItemGroup$[ebp]
$LN8@LuckySyste:

; 5995 : 		break;
; 5996 : 	}
; 5997 : 
; 5998 : 	if( LuckyCard->m_Type >= ITEMGET(13,135) && LuckyCard->m_Type <= ITEMGET(13,139) )

  00209	ba 87 1a 00 00	 mov	 edx, 6791		; 00001a87H
  0020e	66 3b ca	 cmp	 cx, dx
  00211	7c 18		 jl	 SHORT $LN2@LuckySyste
  00213	ba 8b 1a 00 00	 mov	 edx, 6795		; 00001a8bH
  00218	66 3b ca	 cmp	 cx, dx
  0021b	7f 0e		 jg	 SHORT $LN2@LuckySyste

; 5999 : 	{
; 6000 : 		Item = ITEMGET(ItemGroup,gear_1[lpObj->Class]);

  0021d	0f b7 8f 90 00
	00 00		 movzx	 ecx, WORD PTR [edi+144]
  00224	0f b6 74 0d f4	 movzx	 esi, BYTE PTR _gear_1$[ebp+ecx]

; 6001 : 	}
; 6002 : 	else

  00229	eb 0c		 jmp	 SHORT $LN39@LuckySyste
$LN2@LuckySyste:

; 6003 : 	{
; 6004 : 		Item = ITEMGET(ItemGroup,gear_2[lpObj->Class]);

  0022b	0f b7 97 90 00
	00 00		 movzx	 edx, WORD PTR [edi+144]
  00232	0f b6 74 15 ec	 movzx	 esi, BYTE PTR _gear_2$[ebp+edx]
$LN39@LuckySyste:

; 6005 : 	}
; 6006 : 
; 6007 : 	ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,Level,0,Option1,Option2,Option3,lpObj->m_Index,0,gSetItemOption.GenSetOption(Item));

  00237	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00239	6a 00		 push	 0
  0023b	c1 e0 09	 shl	 eax, 9
  0023e	03 f0		 add	 esi, eax
  00240	6a 00		 push	 0
  00242	56		 push	 esi
  00243	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00248	e8 00 00 00 00	 call	 ?GenSetOption@CSetItemOption@@QAEHH@Z ; CSetItemOption::GenSetOption
  0024d	8b 4d d8	 mov	 ecx, DWORD PTR _Option2$[ebp]
  00250	8b 55 d0	 mov	 edx, DWORD PTR _Level$[ebp]
  00253	50		 push	 eax
  00254	8b 45 d4	 mov	 eax, DWORD PTR _Option3$[ebp]
  00257	6a 00		 push	 0
  00259	53		 push	 ebx
  0025a	50		 push	 eax
  0025b	51		 push	 ecx
  0025c	6a 01		 push	 1
  0025e	6a 00		 push	 0
  00260	52		 push	 edx
  00261	56		 push	 esi
  00262	6a 00		 push	 0
  00264	6a 00		 push	 0
  00266	68 ff 00 00 00	 push	 255			; 000000ffH
  0026b	53		 push	 ebx
  0026c	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 6008 : 	gObjInventoryCommit(lpObj->m_Index);

  00271	8b 07		 mov	 eax, DWORD PTR [edi]
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00279	83 c4 40	 add	 esp, 64			; 00000040H

; 6009 : 
; 6010 : 	LogAddTD("[LuckySystem][ItemMix] Chaos Card Item Mix Success [%s][%s]",lpObj->AccountID,lpObj->Name);

  0027c	8d 5f 5d	 lea	 ebx, DWORD PTR [edi+93]
  0027f	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00282	53		 push	 ebx
  00283	50		 push	 eax
  00284	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LHKABBDI@?$FLLuckySystem?$FN?$FLItemMix?$FN?5Chaos?5Car@
  00289	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 6011 : 	LogAddTD("[LuckySystem][ItemMix] - User(ID:%s,Name:%s) Item(Name:%s,Type:%d,Level:%d,Dur:%d,Skill:%d,Luck:%d,AddOption:%d)",
; 6012 : 		lpObj->AccountID, lpObj->Name, ItemAttribute[Item].Name,
; 6013 : 		Item, Level, (int)255,
; 6014 : 		Option1, Option2, Option3);

  0028f	8b 4d d4	 mov	 ecx, DWORD PTR _Option3$[ebp]
  00292	8b 55 d8	 mov	 edx, DWORD PTR _Option2$[ebp]
  00295	8b 45 d0	 mov	 eax, DWORD PTR _Level$[ebp]
  00298	51		 push	 ecx
  00299	52		 push	 edx
  0029a	6a 01		 push	 1
  0029c	68 ff 00 00 00	 push	 255			; 000000ffH
  002a1	50		 push	 eax
  002a2	56		 push	 esi
  002a3	6b f6 70	 imul	 esi, 112		; 00000070H
  002a6	81 c6 00 00 00
	00		 add	 esi, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  002ac	56		 push	 esi
  002ad	53		 push	 ebx
  002ae	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  002b1	50		 push	 eax
  002b2	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@FMOBPLCD@?$FLLuckySystem?$FN?$FLItemMix?$FN?5?9?5User?$CIID@
  002b7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002bd	83 c4 34	 add	 esp, 52			; 00000034H

; 6015 : 
; 6016 : 	lpObj->ChaosLock = FALSE;

  002c0	c7 87 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+4640], 0
  002ca	5f		 pop	 edi
  002cb	5e		 pop	 esi
  002cc	5b		 pop	 ebx

; 6017 : }

  002cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d0	33 cd		 xor	 ecx, ebp
  002d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d7	8b e5		 mov	 esp, ebp
  002d9	5d		 pop	 ebp
  002da	c2 04 00	 ret	 4
$LN32@LuckySyste:

; 5995 : 		break;
; 5996 : 	}
; 5997 : 
; 5998 : 	if( LuckyCard->m_Type >= ITEMGET(13,135) && LuckyCard->m_Type <= ITEMGET(13,139) )

  002dd	33 db		 xor	 ebx, ebx
$LN18@LuckySyste:

; 5920 : 	{
; 5921 : 		pMsg.Result = 0;
; 5922 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  002df	0f b6 4d dd	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  002e3	8b 07		 mov	 eax, DWORD PTR [edi]
  002e5	51		 push	 ecx
  002e6	8d 55 dc	 lea	 edx, DWORD PTR _pMsg$[ebp]
  002e9	52		 push	 edx
  002ea	c6 45 df 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  002ee	50		 push	 eax
$LN38@LuckySyste:
  002ef	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 6017 : }

  002f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f7	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fa	89 9f 20 12 00
	00		 mov	 DWORD PTR [edi+4640], ebx
  00300	5f		 pop	 edi
  00301	5e		 pop	 esi
  00302	33 cd		 xor	 ecx, ebp
  00304	5b		 pop	 ebx
  00305	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030a	8b e5		 mov	 esp, ebp
  0030c	5d		 pop	 ebp
  0030d	c2 04 00	 ret	 4
$LN40@LuckySyste:
  00310	00 00 00 00	 DD	 $LN7@LuckySyste
  00314	00 00 00 00	 DD	 $LN6@LuckySyste
  00318	00 00 00 00	 DD	 $LN5@LuckySyste
  0031c	00 00 00 00	 DD	 $LN4@LuckySyste
  00320	00 00 00 00	 DD	 $LN3@LuckySyste
  00324	00 00 00 00	 DD	 $LN7@LuckySyste
  00328	00 00 00 00	 DD	 $LN6@LuckySyste
  0032c	00 00 00 00	 DD	 $LN5@LuckySyste
  00330	00 00 00 00	 DD	 $LN4@LuckySyste
  00334	00 00 00 00	 DD	 $LN3@LuckySyste
?LuckySystemItemCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::LuckySystemItemCreate
_TEXT	ENDS
PUBLIC	??_C@_0DG@LBFHIFGE@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@ ; `string'
PUBLIC	??_C@_0DJ@MAMOGFAN@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__$ArrayPad$
PUBLIC	?LuckySystemJewelCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LuckySystemJewelCreate
;	COMDAT ??_C@_0DG@LBFHIFGE@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@
CONST	SEGMENT
??_C@_0DG@LBFHIFGE@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@ DB '['
	DB	'LuckySystem][JewelOfExtension][%s][%s] CBMix Fail %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MAMOGFAN@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@
CONST	SEGMENT
??_C@_0DJ@MAMOGFAN@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@ DB '['
	DB	'LuckySystem][JewelOfExtension][%s][%s] CBMix Success %d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LuckySystemJewelCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_iLuckyItemDurability$ = -28				; size = 4
_iOtherItemCount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?LuckySystemJewelCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::LuckySystemJewelCreate, COMDAT
; _this$ = ecx

; 6020 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 6021 : 	lpObj->ChaosLock = TRUE;
; 6022 : 
; 6023 : 	int iLuckyItemCount = 0;
; 6024 : 	float iLuckyItemDurability = 0;

  00010	d9 ee		 fldz
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	d9 5d e4	 fstp	 DWORD PTR _iLuckyItemDurability$[ebp]
  00017	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001a	57		 push	 edi

; 6025 : 	int iOtherItemCount = 0;
; 6026 : 
; 6027 : 	PMSG_CHAOSMIXRESULT pMsg;
; 6028 : 
; 6029 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  0001b	6a 10		 push	 16			; 00000010H
  0001d	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00020	68 86 00 00 00	 push	 134			; 00000086H
  00025	33 ff		 xor	 edi, edi
  00027	50		 push	 eax
  00028	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00035	33 db		 xor	 ebx, ebx
  00037	89 7d e8	 mov	 DWORD PTR _iOtherItemCount$[ebp], edi
  0003a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6030 : 	pMsg.Result = CB_ERROR;

  00042	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00045	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL12@LuckySyste@2:

; 6033 : 	{
; 6034 : 		if( lpObj->pChaosBox[n].IsItem() )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	85 c0		 test	 eax, eax
  0005f	74 1d		 je	 SHORT $LN11@LuckySyste@2

; 6035 : 		{
; 6036 : 			if( lpObj->pChaosBox[n].m_bLuckySet )

  00061	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00067	80 bc 38 ce 00
	00 00 00	 cmp	 BYTE PTR [eax+edi+206], 0
  0006f	74 0a		 je	 SHORT $LN8@LuckySyste@2

; 6037 : 			{
; 6038 : 				iLuckyItemDurability = lpObj->pChaosBox[n].m_Durability;

  00071	d9 44 38 24	 fld	 DWORD PTR [eax+edi+36]

; 6039 : 				iLuckyItemCount++;

  00075	43		 inc	 ebx
  00076	d9 5d e4	 fstp	 DWORD PTR _iLuckyItemDurability$[ebp]

; 6040 : 			}
; 6041 : 			else

  00079	eb 03		 jmp	 SHORT $LN11@LuckySyste@2
$LN8@LuckySyste@2:

; 6042 : 			{
; 6043 : 				iOtherItemCount++;

  0007b	ff 45 e8	 inc	 DWORD PTR _iOtherItemCount$[ebp]
$LN11@LuckySyste@2:

; 6031 : 
; 6032 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0007e	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00084	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0008a	7c c4		 jl	 SHORT $LL12@LuckySyste@2

; 6044 : 			}
; 6045 : 		}
; 6046 : 	}
; 6047 : 
; 6048 : 	if( iLuckyItemCount != 1 ||
; 6049 : 		iOtherItemCount != 0 )

  0008c	83 fb 01	 cmp	 ebx, 1
  0008f	0f 85 f9 00 00
	00		 jne	 $LN17@LuckySyste@2
  00095	83 7d e8 00	 cmp	 DWORD PTR _iOtherItemCount$[ebp], 0
  00099	0f 85 ef 00 00
	00		 jne	 $LN17@LuckySyste@2

; 6053 : 		lpObj->ChaosLock = FALSE;
; 6054 : 		return;
; 6055 : 	}
; 6056 : 
; 6057 : 	LogChaosItem(lpObj, "LuckySystem");

  0009f	8b 7d e0	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JDLPAJDH@LuckySystem?$AA@
  000a7	56		 push	 esi
  000a8	8b cf		 mov	 ecx, edi
  000aa	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 6058 : 	LogAddTD("[LuckySystem] Chaos Mix Start");

  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IIPPLEDJ@?$FLLuckySystem?$FN?5Chaos?5Mix?5Start?$AA@
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 6059 : 
; 6060 : 	if( iLuckyItemDurability == 255 )

  000ba	d9 45 e4	 fld	 DWORD PTR _iLuckyItemDurability$[ebp]
  000bd	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@406fe00000000000
  000c3	83 c4 04	 add	 esp, 4
  000c6	da e9		 fucompp
  000c8	df e0		 fnstsw	 ax
  000ca	f6 c4 44	 test	 ah, 68			; 00000044H
  000cd	7a 0c		 jp	 SHORT $LN4@LuckySyste@2

; 6061 : 	{
; 6062 : 		lpObj->ChaosSuccessRate = 60;

  000cf	c7 86 1c 12 00
	00 3c 00 00 00	 mov	 DWORD PTR [esi+4636], 60 ; 0000003cH

; 6063 : 	}
; 6064 : 	else

  000d9	eb 0a		 jmp	 SHORT $LN3@LuckySyste@2
$LN4@LuckySyste@2:

; 6065 : 	{
; 6066 : 		lpObj->ChaosSuccessRate = 10;

  000db	c7 86 1c 12 00
	00 0a 00 00 00	 mov	 DWORD PTR [esi+4636], 10 ; 0000000aH
$LN3@LuckySyste@2:

; 6067 : 	}
; 6068 : 
; 6069 : 	if( rand()%100 < lpObj->ChaosSuccessRate )

  000e5	e8 00 00 00 00	 call	 _rand
  000ea	99		 cdq
  000eb	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000f0	f7 f9		 idiv	 ecx
  000f2	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  000f8	7d 54		 jge	 SHORT $LN2@LuckySyste@2

; 6070 : 	{
; 6071 : 		int Item = ITEMGET(14,160);
; 6072 : #if( __4GAMERS__ == 1 )
; 6073 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 6074 : #endif
; 6075 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,0,0,0,0,0,-1,0,0);

  000fa	6a 00		 push	 0
  000fc	6a 00		 push	 0
  000fe	6a 00		 push	 0
  00100	8b 16		 mov	 edx, DWORD PTR [esi]
  00102	6a 00		 push	 0
  00104	6a ff		 push	 -1
  00106	6a 00		 push	 0
  00108	6a 00		 push	 0
  0010a	6a 00		 push	 0
  0010c	6a 00		 push	 0
  0010e	6a 00		 push	 0
  00110	68 a0 1c 00 00	 push	 7328			; 00001ca0H
  00115	6a 00		 push	 0
  00117	6a 00		 push	 0
  00119	68 ff 00 00 00	 push	 255			; 000000ffH
  0011e	52		 push	 edx
  0011f	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 6076 : 		gObjInventoryCommit(lpObj->m_Index);

  00124	8b 06		 mov	 eax, DWORD PTR [esi]
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 6077 : 		LogAddTD("[LuckySystem][JewelOfExtension][%s][%s] CBMix Success %d",
; 6078 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate);

  0012c	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00132	83 c4 40	 add	 esp, 64			; 00000040H
  00135	51		 push	 ecx
  00136	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  00139	52		 push	 edx
  0013a	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0013d	50		 push	 eax
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@MAMOGFAN@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00149	83 c4 10	 add	 esp, 16			; 00000010H

; 6079 : 	}
; 6080 : 	else

  0014c	eb 58		 jmp	 SHORT $LN1@LuckySyste@2
$LN2@LuckySyste@2:

; 6081 : 	{
; 6082 : #if( __4GAMERS__ == 1 )
; 6083 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 6084 : #endif
; 6085 : 		ChaosBoxInit(lpObj);

  0014e	56		 push	 esi
  0014f	8b cf		 mov	 ecx, edi
  00151	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 6086 : 		GCUserChaosBoxSend(lpObj,0);

  00156	6a 00		 push	 0
  00158	56		 push	 esi
  00159	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 6087 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0015e	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00162	8b 06		 mov	 eax, DWORD PTR [esi]
  00164	51		 push	 ecx
  00165	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00168	52		 push	 edx
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 6088 : 		LogAddTD("[LuckySystem][JewelOfExtension][%s][%s] CBMix Fail %d",
; 6089 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate);

  0016f	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00175	51		 push	 ecx
  00176	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  00179	52		 push	 edx
  0017a	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0017d	50		 push	 eax
  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@LBFHIFGE@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00189	83 c4 24	 add	 esp, 36			; 00000024H

; 6090 : 	}
; 6091 : 
; 6092 : 	lpObj->ChaosLock = FALSE;

  0018c	eb 18		 jmp	 SHORT $LN1@LuckySyste@2
$LN17@LuckySyste@2:

; 6050 : 	{
; 6051 : 		pMsg.Result = 7;
; 6052 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0018e	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00192	8b 06		 mov	 eax, DWORD PTR [esi]
  00194	51		 push	 ecx
  00195	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00198	52		 push	 edx
  00199	50		 push	 eax
  0019a	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  0019e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@LuckySyste@2:

; 6093 : }

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	5f		 pop	 edi
  001aa	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001b4	5e		 pop	 esi
  001b5	33 cd		 xor	 ecx, ebp
  001b7	5b		 pop	 ebx
  001b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c2 04 00	 ret	 4
?LuckySystemJewelCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::LuckySystemJewelCreate
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GoldenNSilverBoxMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::GoldenNSilverBoxMix
; Function compile flags: /Ogtp
;	COMDAT ?GoldenNSilverBoxMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_nGoldenKey$ = -36					; size = 4
_nEtcItem$ = -32					; size = 4
_nSilverBox$ = -28					; size = 4
_nGoldenBox$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GoldenNSilverBoxMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::GoldenNSilverBoxMix, COMDAT
; _this$ = ecx

; 6096 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 6097 : 	PMSG_CHAOSMIXRESULT pMsg;
; 6098 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	6a 10		 push	 16			; 00000010H
  00018	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 6099 : 	// ----
; 6100 : 	pMsg.Result				= CB_ERROR;	//ebp-11
; 6101 : 	int nGoldenKey			= 0;		//ebp-18

  00026	33 f6		 xor	 esi, esi
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002b	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0002f	89 75 dc	 mov	 DWORD PTR _nGoldenKey$[ebp], esi

; 6102 : 	int nSilverKey			= 0;		//ebp-1c

  00032	33 db		 xor	 ebx, ebx

; 6103 : 	int nGoldenBox			= 0;		//ebp-20

  00034	89 75 e8	 mov	 DWORD PTR _nGoldenBox$[ebp], esi

; 6104 : 	int nSilverBox			= 0;		//ebp-24

  00037	89 75 e4	 mov	 DWORD PTR _nSilverBox$[ebp], esi

; 6105 : 	int nEtcItem			= 0;		//ebp-28

  0003a	89 75 e0	 mov	 DWORD PTR _nEtcItem$[ebp], esi

; 6106 : 	int nType				= 0;		//ebp-2c
; 6107 : 	bool bCheckSourceItem	= false;	//ebp-30
; 6108 : 	lpObj->ChaosLock		= true;

  0003d	c7 87 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+4640], 1
  00047	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL19@GoldenNSil:

; 6111 : 	{
; 6112 : 		if( lpObj->pChaosBox[i].IsItem() )

  00050	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00056	03 ce		 add	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	85 c0		 test	 eax, eax
  0005f	74 48		 je	 SHORT $LN18@GoldenNSil

; 6113 : 		{
; 6114 : 			if( lpObj->pChaosBox[i].m_Type == ITEMGET(14, 113) )

  00061	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00067	0f b7 44 31 06	 movzx	 eax, WORD PTR [ecx+esi+6]
  0006c	ba 71 1c 00 00	 mov	 edx, 7281		; 00001c71H
  00071	66 3b c2	 cmp	 ax, dx
  00074	75 05		 jne	 SHORT $LN15@GoldenNSil

; 6115 : 			{
; 6116 : 				nGoldenKey++;

  00076	ff 45 dc	 inc	 DWORD PTR _nGoldenKey$[ebp]
  00079	eb 2e		 jmp	 SHORT $LN18@GoldenNSil
$LN15@GoldenNSil:

; 6117 : 			}
; 6118 : 			else if( lpObj->pChaosBox[i].m_Type == ITEMGET(14, 112) )

  0007b	b9 70 1c 00 00	 mov	 ecx, 7280		; 00001c70H
  00080	66 3b c1	 cmp	 ax, cx
  00083	75 03		 jne	 SHORT $LN13@GoldenNSil

; 6119 : 			{
; 6120 : 				nSilverKey++;

  00085	43		 inc	 ebx
  00086	eb 21		 jmp	 SHORT $LN18@GoldenNSil
$LN13@GoldenNSil:

; 6121 : 			}
; 6122 : 			else if( lpObj->pChaosBox[i].m_Type == ITEMGET(14, 121) )

  00088	ba 79 1c 00 00	 mov	 edx, 7289		; 00001c79H
  0008d	66 3b c2	 cmp	 ax, dx
  00090	75 05		 jne	 SHORT $LN11@GoldenNSil

; 6123 : 			{
; 6124 : 				nGoldenBox++;

  00092	ff 45 e8	 inc	 DWORD PTR _nGoldenBox$[ebp]
  00095	eb 12		 jmp	 SHORT $LN18@GoldenNSil
$LN11@GoldenNSil:

; 6125 : 			}
; 6126 : 			else if( lpObj->pChaosBox[i].m_Type == ITEMGET(14, 122) )

  00097	b9 7a 1c 00 00	 mov	 ecx, 7290		; 00001c7aH
  0009c	66 3b c1	 cmp	 ax, cx
  0009f	75 05		 jne	 SHORT $LN9@GoldenNSil

; 6127 : 			{
; 6128 : 				nSilverBox++;

  000a1	ff 45 e4	 inc	 DWORD PTR _nSilverBox$[ebp]

; 6129 : 			}
; 6130 : 			else

  000a4	eb 03		 jmp	 SHORT $LN18@GoldenNSil
$LN9@GoldenNSil:

; 6131 : 			{
; 6132 : 				nEtcItem++;

  000a6	ff 45 e0	 inc	 DWORD PTR _nEtcItem$[ebp]
$LN18@GoldenNSil:

; 6109 : 	// ----
; 6110 : 	for( int i = 0; i < CHAOS_BOX_SIZE; i++ )	//ebp-34

  000a9	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  000af	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  000b5	7c 99		 jl	 SHORT $LL19@GoldenNSil

; 6133 : 			}
; 6134 : 		}
; 6135 : 	}
; 6136 : 	// ----
; 6137 : 	if( nEtcItem >= 1 || nGoldenKey != 1 && nSilverKey != 1 )

  000b7	b8 01 00 00 00	 mov	 eax, 1
  000bc	39 45 e0	 cmp	 DWORD PTR _nEtcItem$[ebp], eax
  000bf	7d 77		 jge	 SHORT $LN28@GoldenNSil
  000c1	8b 4d dc	 mov	 ecx, DWORD PTR _nGoldenKey$[ebp]
  000c4	3b c8		 cmp	 ecx, eax

; 6138 : 	{
; 6139 : 		bCheckSourceItem = false;
; 6140 : 	}
; 6141 : 	else if( nGoldenKey == 1 && nGoldenBox == 1 && !nSilverKey && !nSilverBox )

  000c6	75 15		 jne	 SHORT $LN27@GoldenNSil
  000c8	39 45 e8	 cmp	 DWORD PTR _nGoldenBox$[ebp], eax
  000cb	75 10		 jne	 SHORT $LN27@GoldenNSil
  000cd	85 db		 test	 ebx, ebx
  000cf	75 0c		 jne	 SHORT $LN27@GoldenNSil
  000d1	39 5d e4	 cmp	 DWORD PTR _nSilverBox$[ebp], ebx
  000d4	75 62		 jne	 SHORT $LN28@GoldenNSil

; 6142 : 	{
; 6143 : 		nType = ITEMGET(14, 123);

  000d6	b8 7b 1c 00 00	 mov	 eax, 7291		; 00001c7bH

; 6144 : 		bCheckSourceItem = true;

  000db	eb 17		 jmp	 SHORT $LN26@GoldenNSil
$LN27@GoldenNSil:

; 6145 : 	}
; 6146 : 	else if( nSilverKey == 1 && nSilverBox == 1 && !nGoldenKey && !nGoldenBox )

  000dd	3b d8		 cmp	 ebx, eax
  000df	75 57		 jne	 SHORT $LN28@GoldenNSil
  000e1	39 45 e4	 cmp	 DWORD PTR _nSilverBox$[ebp], eax
  000e4	75 52		 jne	 SHORT $LN28@GoldenNSil
  000e6	85 c9		 test	 ecx, ecx
  000e8	75 4e		 jne	 SHORT $LN28@GoldenNSil
  000ea	39 4d e8	 cmp	 DWORD PTR _nGoldenBox$[ebp], ecx
  000ed	75 49		 jne	 SHORT $LN28@GoldenNSil

; 6147 : 	{
; 6148 : 		nType = ITEMGET(14, 124);

  000ef	b8 7c 1c 00 00	 mov	 eax, 7292		; 00001c7cH
$LN26@GoldenNSil:

; 6149 : 		bCheckSourceItem = true;
; 6150 : 	}
; 6151 : 	// ----
; 6152 : 	if( bCheckSourceItem )
; 6153 : 	{
; 6154 : 		ItemSerialCreateSend(lpObj->m_Index, 0xFF, 0, 0, nType, 0, 0, 0, 0, 0, -1, 0, 0);

  000f4	6a 00		 push	 0
  000f6	6a 00		 push	 0
  000f8	6a 00		 push	 0
  000fa	8b 17		 mov	 edx, DWORD PTR [edi]
  000fc	6a 00		 push	 0
  000fe	6a ff		 push	 -1
  00100	6a 00		 push	 0
  00102	6a 00		 push	 0
  00104	6a 00		 push	 0
  00106	6a 00		 push	 0
  00108	6a 00		 push	 0
  0010a	50		 push	 eax
  0010b	6a 00		 push	 0
  0010d	6a 00		 push	 0
  0010f	68 ff 00 00 00	 push	 255			; 000000ffH
  00114	52		 push	 edx
  00115	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 6155 : 		gObjInventoryCommit(lpObj->m_Index);

  0011a	8b 07		 mov	 eax, DWORD PTR [edi]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00122	83 c4 40	 add	 esp, 64			; 00000040H
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx

; 6161 : 	lpObj->ChaosLock = false;
; 6162 : }

  00128	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012b	33 cd		 xor	 ecx, ebp
  0012d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 04 00	 ret	 4
$LN28@GoldenNSil:

; 6156 : 		return;
; 6157 : 	}
; 6158 : 	// ----
; 6159 : 	pMsg.Result = 1;
; 6160 : 	DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00138	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0013c	51		 push	 ecx
  0013d	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00140	88 45 ef	 mov	 BYTE PTR _pMsg$[ebp+3], al
  00143	8b 07		 mov	 eax, DWORD PTR [edi]
  00145	52		 push	 edx
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 6161 : 	lpObj->ChaosLock = false;
; 6162 : }

  0014c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00152	c7 87 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+4640], 0
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	33 cd		 xor	 ecx, ebp
  00160	5b		 pop	 ebx
  00161	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 04 00	 ret	 4
?GoldenNSilverBoxMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::GoldenNSilverBoxMix
_TEXT	ENDS
PUBLIC	??_C@_0EF@KKFOLCFG@?$FLSocketItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ ; `string'
PUBLIC	??_C@_0FC@BOLCPPFJ@?$FLSocketItemMix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0CA@JPBHABAH@?$FLSocketItemMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0O@DEOFBGCG@SocketItemMix?$AA@		; `string'
PUBLIC	_lpObj$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SocketItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z ; CChaosBox::SocketItemMix
;	COMDAT ??_C@_0EF@KKFOLCFG@?$FLSocketItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
CONST	SEGMENT
??_C@_0EF@KKFOLCFG@?$FLSocketItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ DB '['
	DB	'SocketItemMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRat'
	DB	'e : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@BOLCPPFJ@?$FLSocketItemMix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0FC@BOLCPPFJ@?$FLSocketItemMix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'SocketItemMix][Level 02] [%s][%s] CBMix Success %d Money : %d'
	DB	'-%d, CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JPBHABAH@?$FLSocketItemMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0CA@JPBHABAH@?$FLSocketItemMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Soc'
	DB	'ketItemMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DEOFBGCG@SocketItemMix?$AA@
CONST	SEGMENT
??_C@_0O@DEOFBGCG@SocketItemMix?$AA@ DB 'SocketItemMix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SocketItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
_iOtherItemCount$ = -80					; size = 4
_iCharmOfLuckCount$ = -76				; size = 4
_Option2$192434 = -72					; size = 4
_iSocketItemCount$ = -72				; size = 4
tv810 = -68						; size = 4
_lpObj$GSCopy$ = -64					; size = 4
_iSocketItem$ = -60					; size = 4
_pMsg$ = -56						; size = 16
_iMaterialCount$ = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iMixId$ = 12						; size = 4
?SocketItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z PROC	; CChaosBox::SocketItemMix, COMDAT
; _this$ = ecx

; 6165 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 6172 : 	int iRecipeCount = 0;
; 6173 : 	int iMaterial1Index = -1;
; 6174 : 	int iMaterial2Index = -1;
; 6175 : 	int iMaterialCount[9] = {0};
; 6176 : 	int iCharmOfLuckCount = 0;
; 6177 : 	int iOtherItemCount = 0;
; 6178 : 
; 6179 : 	PMSG_CHAOSMIXRESULT pMsg;
; 6180 : 
; 6181 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00013	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx
  00016	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 6166 : 	lpObj->ChaosLock = TRUE;
; 6167 : 
; 6168 : 	int iSocketItem = -1;

  00019	89 45 c0	 mov	 DWORD PTR _lpObj$GSCopy$[ebp], eax
  0001c	c7 80 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+4640], 1

; 6169 : 	int iNeedChaosMoney;
; 6170 : 
; 6171 : 	int iSocketItemCount = 0;

  00026	33 c0		 xor	 eax, eax

; 6172 : 	int iRecipeCount = 0;
; 6173 : 	int iMaterial1Index = -1;
; 6174 : 	int iMaterial2Index = -1;
; 6175 : 	int iMaterialCount[9] = {0};
; 6176 : 	int iCharmOfLuckCount = 0;
; 6177 : 	int iOtherItemCount = 0;
; 6178 : 
; 6179 : 	PMSG_CHAOSMIXRESULT pMsg;
; 6180 : 
; 6181 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00028	6a 10		 push	 16			; 00000010H
  0002a	89 45 b8	 mov	 DWORD PTR _iSocketItemCount$[ebp], eax
  0002d	89 45 d8	 mov	 DWORD PTR _iMaterialCount$[ebp], eax
  00030	89 45 dc	 mov	 DWORD PTR _iMaterialCount$[ebp+4], eax
  00033	89 45 e0	 mov	 DWORD PTR _iMaterialCount$[ebp+8], eax
  00036	89 45 e4	 mov	 DWORD PTR _iMaterialCount$[ebp+12], eax
  00039	89 45 e8	 mov	 DWORD PTR _iMaterialCount$[ebp+16], eax
  0003c	89 45 ec	 mov	 DWORD PTR _iMaterialCount$[ebp+20], eax
  0003f	89 45 f0	 mov	 DWORD PTR _iMaterialCount$[ebp+24], eax
  00042	89 45 f4	 mov	 DWORD PTR _iMaterialCount$[ebp+28], eax
  00045	89 45 f8	 mov	 DWORD PTR _iMaterialCount$[ebp+32], eax
  00048	89 45 b4	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], eax
  0004b	89 45 b0	 mov	 DWORD PTR _iOtherItemCount$[ebp], eax
  0004e	8d 45 c8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00051	83 cb ff	 or	 ebx, -1
  00054	68 86 00 00 00	 push	 134			; 00000086H
  00059	50		 push	 eax
  0005a	89 5d c4	 mov	 DWORD PTR _iSocketItem$[ebp], ebx
  0005d	33 f6		 xor	 esi, esi
  0005f	8b fb		 mov	 edi, ebx
  00061	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6182 : 	pMsg.Result = CB_ERROR;

  00069	c6 45 cb 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 6185 : 		if( !lpObj->pChaosBox[n].IsItem() )

  0006d	89 75 bc	 mov	 DWORD PTR tv810[ebp], esi
$LL81@SocketItem:
  00070	8b 4d c0	 mov	 ecx, DWORD PTR _lpObj$GSCopy$[ebp]
  00073	8b 89 10 12 00
	00		 mov	 ecx, DWORD PTR [ecx+4624]
  00079	03 4d bc	 add	 ecx, DWORD PTR tv810[ebp]
  0007c	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00081	85 c0		 test	 eax, eax
  00083	0f 84 6b 02 00
	00		 je	 $LN72@SocketItem

; 6186 : 			continue;
; 6187 : 
; 6188 : 		if( g_SocketItem.IsSocketItem(lpObj->pChaosBox[n].m_Type) &&
; 6189 : 			lpObj->pChaosBox[n].m_Level >= 7 &&
; 6190 : 			lpObj->pChaosBox[n].m_Option3 >= 1 )

  00089	8b 55 c0	 mov	 edx, DWORD PTR _lpObj$GSCopy$[ebp]
  0008c	8b 82 10 12 00
	00		 mov	 eax, DWORD PTR [edx+4624]
  00092	8b 4d bc	 mov	 ecx, DWORD PTR tv810[ebp]
  00095	0f bf 54 01 06	 movsx	 edx, WORD PTR [ecx+eax+6]
  0009a	52		 push	 edx
  0009b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  000a0	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  000a5	84 c0		 test	 al, al
  000a7	74 26		 je	 SHORT $LN82@SocketItem
  000a9	8b 45 c0	 mov	 eax, DWORD PTR _lpObj$GSCopy$[ebp]
  000ac	8b 88 10 12 00
	00		 mov	 ecx, DWORD PTR [eax+4624]
  000b2	8b 45 bc	 mov	 eax, DWORD PTR tv810[ebp]
  000b5	66 83 7c 08 08
	07		 cmp	 WORD PTR [eax+ecx+8], 7
  000bb	7c 12		 jl	 SHORT $LN82@SocketItem
  000bd	80 bc 08 92 00
	00 00 01	 cmp	 BYTE PTR [eax+ecx+146], 1
  000c5	72 08		 jb	 SHORT $LN82@SocketItem

; 6191 : 		{
; 6192 : 			iSocketItemCount++;

  000c7	ff 45 b8	 inc	 DWORD PTR _iSocketItemCount$[ebp]
  000ca	e9 25 02 00 00	 jmp	 $LN72@SocketItem
$LN82@SocketItem:

; 6193 : 		}
; 6194 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,191) )

  000cf	8b 45 c0	 mov	 eax, DWORD PTR _lpObj$GSCopy$[ebp]
  000d2	8b 88 10 12 00
	00		 mov	 ecx, DWORD PTR [eax+4624]
  000d8	03 4d bc	 add	 ecx, DWORD PTR tv810[ebp]
  000db	ba bf 1c 00 00	 mov	 edx, 7359		; 00001cbfH
  000e0	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  000e4	66 3b c2	 cmp	 ax, dx
  000e7	75 12		 jne	 SHORT $LN67@SocketItem

; 6195 : 		{
; 6196 : 			iSocketItem = ITEMGET(0,29);
; 6197 : 			iMaterial1Index = 0;

  000e9	33 ff		 xor	 edi, edi
  000eb	c7 45 c4 1d 00
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 29 ; 0000001dH

; 6198 : 			iMaterial2Index = 8;

  000f2	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]

; 6199 : 			iRecipeCount++;

  000f5	46		 inc	 esi
  000f6	e9 f9 01 00 00	 jmp	 $LN72@SocketItem
$LN67@SocketItem:

; 6200 : 		}
; 6201 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,192) )

  000fb	ba c0 1c 00 00	 mov	 edx, 7360		; 00001cc0H
  00100	66 3b c2	 cmp	 ax, dx
  00103	75 15		 jne	 SHORT $LN65@SocketItem

; 6202 : 		{
; 6203 : 			iSocketItem = ITEMGET(0,36);
; 6204 : 			iMaterial1Index = 1;

  00105	bf 01 00 00 00	 mov	 edi, 1
  0010a	c7 45 c4 24 00
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 36 ; 00000024H

; 6205 : 			iMaterial2Index = 5;

  00111	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]

; 6206 : 			iRecipeCount++;

  00114	46		 inc	 esi
  00115	e9 da 01 00 00	 jmp	 $LN72@SocketItem
$LN65@SocketItem:

; 6207 : 		}
; 6208 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,193) )

  0011a	ba c1 1c 00 00	 mov	 edx, 7361		; 00001cc1H
  0011f	66 3b c2	 cmp	 ax, dx
  00122	75 15		 jne	 SHORT $LN63@SocketItem

; 6209 : 		{
; 6210 : 			iSocketItem = ITEMGET(0,37);
; 6211 : 			
; 6212 : 			iMaterial1Index = 2;

  00124	bf 02 00 00 00	 mov	 edi, 2
  00129	c7 45 c4 25 00
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 37 ; 00000025H

; 6213 : 			iMaterial2Index = 8;

  00130	8d 5f 06	 lea	 ebx, DWORD PTR [edi+6]

; 6214 : 			iRecipeCount++;

  00133	46		 inc	 esi
  00134	e9 bb 01 00 00	 jmp	 $LN72@SocketItem
$LN63@SocketItem:

; 6215 : 		}
; 6216 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,194) )

  00139	ba c2 1c 00 00	 mov	 edx, 7362		; 00001cc2H
  0013e	66 3b c2	 cmp	 ax, dx
  00141	75 15		 jne	 SHORT $LN61@SocketItem

; 6217 : 		{
; 6218 : 			iSocketItem = ITEMGET(3,12);
; 6219 : 			iMaterial1Index = 3;

  00143	bf 03 00 00 00	 mov	 edi, 3
  00148	c7 45 c4 0c 06
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 1548 ; 0000060cH

; 6220 : 			iMaterial2Index = 5;

  0014f	8d 5f 02	 lea	 ebx, DWORD PTR [edi+2]

; 6221 : 			iRecipeCount++;

  00152	46		 inc	 esi
  00153	e9 9c 01 00 00	 jmp	 $LN72@SocketItem
$LN61@SocketItem:

; 6222 : 		}
; 6223 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,195) )

  00158	ba c3 1c 00 00	 mov	 edx, 7363		; 00001cc3H
  0015d	66 3b c2	 cmp	 ax, dx
  00160	75 15		 jne	 SHORT $LN59@SocketItem

; 6224 : 		{
; 6225 : 			iSocketItem = ITEMGET(2,20);
; 6226 : 			iMaterial1Index = 2;

  00162	bf 02 00 00 00	 mov	 edi, 2
  00167	c7 45 c4 14 04
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 1044 ; 00000414H

; 6227 : 			iMaterial2Index = 6;

  0016e	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]

; 6228 : 			iRecipeCount++;

  00171	46		 inc	 esi
  00172	e9 7d 01 00 00	 jmp	 $LN72@SocketItem
$LN59@SocketItem:

; 6229 : 		}
; 6230 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,196) )

  00177	ba c4 1c 00 00	 mov	 edx, 7364		; 00001cc4H
  0017c	66 3b c2	 cmp	 ax, dx
  0017f	75 12		 jne	 SHORT $LN57@SocketItem

; 6231 : 		{
; 6232 : 			iSocketItem = ITEMGET(4,25);
; 6233 : 			iMaterial1Index = 0;

  00181	33 ff		 xor	 edi, edi
  00183	c7 45 c4 19 08
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 2073 ; 00000819H

; 6234 : 			iMaterial2Index = 5;

  0018a	8d 5f 05	 lea	 ebx, DWORD PTR [edi+5]

; 6235 : 			iRecipeCount++;

  0018d	46		 inc	 esi
  0018e	e9 61 01 00 00	 jmp	 $LN72@SocketItem
$LN57@SocketItem:

; 6236 : 		}
; 6237 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,197) )

  00193	ba c5 1c 00 00	 mov	 edx, 7365		; 00001cc5H
  00198	66 3b c2	 cmp	 ax, dx
  0019b	75 15		 jne	 SHORT $LN55@SocketItem

; 6238 : 		{
; 6239 : 			iSocketItem = ITEMGET(4,26);
; 6240 : 			iMaterial1Index = 4;

  0019d	bf 04 00 00 00	 mov	 edi, 4
  001a2	c7 45 c4 1a 08
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 2074 ; 0000081aH

; 6241 : 			iMaterial2Index = 7;

  001a9	8d 5f 03	 lea	 ebx, DWORD PTR [edi+3]

; 6242 : 			iRecipeCount++;

  001ac	46		 inc	 esi
  001ad	e9 42 01 00 00	 jmp	 $LN72@SocketItem
$LN55@SocketItem:

; 6243 : 		}
; 6244 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,198) )

  001b2	ba c6 1c 00 00	 mov	 edx, 7366		; 00001cc6H
  001b7	66 3b c2	 cmp	 ax, dx
  001ba	75 15		 jne	 SHORT $LN53@SocketItem

; 6245 : 		{
; 6246 : 			iSocketItem = ITEMGET(5,35);
; 6247 : 			iMaterial1Index = 2;

  001bc	bf 02 00 00 00	 mov	 edi, 2
  001c1	c7 45 c4 23 0a
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 2595 ; 00000a23H

; 6248 : 			iMaterial2Index = 5;

  001c8	8d 5f 03	 lea	 ebx, DWORD PTR [edi+3]

; 6249 : 			iRecipeCount++;

  001cb	46		 inc	 esi
  001cc	e9 23 01 00 00	 jmp	 $LN72@SocketItem
$LN53@SocketItem:

; 6250 : 		}
; 6251 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,199) )

  001d1	ba c7 1c 00 00	 mov	 edx, 7367		; 00001cc7H
  001d6	66 3b c2	 cmp	 ax, dx
  001d9	75 15		 jne	 SHORT $LN51@SocketItem

; 6252 : 		{
; 6253 : 			iSocketItem = ITEMGET(5,37);
; 6254 : 			iMaterial1Index = 4;

  001db	bf 04 00 00 00	 mov	 edi, 4
  001e0	c7 45 c4 25 0a
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 2597 ; 00000a25H

; 6255 : 			iMaterial2Index = 6;

  001e7	8d 5f 02	 lea	 ebx, DWORD PTR [edi+2]

; 6256 : 			iRecipeCount++;

  001ea	46		 inc	 esi
  001eb	e9 04 01 00 00	 jmp	 $LN72@SocketItem
$LN51@SocketItem:

; 6257 : 		}
; 6258 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,200) )

  001f0	ba c8 1c 00 00	 mov	 edx, 7368		; 00001cc8H
  001f5	66 3b c2	 cmp	 ax, dx
  001f8	75 15		 jne	 SHORT $LN49@SocketItem

; 6259 : 		{
; 6260 : 			iSocketItem = ITEMGET(0,30);
; 6261 : 			iMaterial1Index = 4;

  001fa	bf 04 00 00 00	 mov	 edi, 4
  001ff	c7 45 c4 1e 00
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 30 ; 0000001eH

; 6262 : 			iMaterial2Index = 8;

  00206	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]

; 6263 : 			iRecipeCount++;

  00209	46		 inc	 esi
  0020a	e9 e5 00 00 00	 jmp	 $LN72@SocketItem
$LN49@SocketItem:

; 6264 : 		}
; 6265 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,201) )

  0020f	ba c9 1c 00 00	 mov	 edx, 7369		; 00001cc9H
  00214	66 3b c2	 cmp	 ax, dx
  00217	75 15		 jne	 SHORT $LN47@SocketItem

; 6266 : 		{
; 6267 : 			iSocketItem = ITEMGET(2,19);
; 6268 : 			iMaterial1Index = 1;

  00219	bf 01 00 00 00	 mov	 edi, 1
  0021e	c7 45 c4 13 04
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 1043 ; 00000413H

; 6269 : 			iMaterial2Index = 7;

  00225	8d 5f 06	 lea	 ebx, DWORD PTR [edi+6]

; 6270 : 			iRecipeCount++;

  00228	46		 inc	 esi
  00229	e9 c6 00 00 00	 jmp	 $LN72@SocketItem
$LN47@SocketItem:

; 6271 : 		}
; 6272 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,202) )

  0022e	ba ca 1c 00 00	 mov	 edx, 7370		; 00001ccaH
  00233	66 3b c2	 cmp	 ax, dx
  00236	75 15		 jne	 SHORT $LN45@SocketItem

; 6273 : 		{
; 6274 : 			iSocketItem = ITEMGET(5,32);
; 6275 : 			iMaterial1Index = 4;

  00238	bf 04 00 00 00	 mov	 edi, 4
  0023d	c7 45 c4 20 0a
	00 00		 mov	 DWORD PTR _iSocketItem$[ebp], 2592 ; 00000a20H

; 6276 : 			iMaterial2Index = 5;

  00244	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]

; 6277 : 			iRecipeCount++;

  00247	46		 inc	 esi
  00248	e9 a7 00 00 00	 jmp	 $LN72@SocketItem
$LN45@SocketItem:

; 6278 : 		}
; 6279 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,180) )

  0024d	ba b4 1c 00 00	 mov	 edx, 7348		; 00001cb4H
  00252	66 3b c2	 cmp	 ax, dx
  00255	75 08		 jne	 SHORT $LN43@SocketItem

; 6280 : 		{
; 6281 : 			iMaterialCount[0]++;

  00257	ff 45 d8	 inc	 DWORD PTR _iMaterialCount$[ebp]
  0025a	e9 95 00 00 00	 jmp	 $LN72@SocketItem
$LN43@SocketItem:

; 6282 : 		}
; 6283 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,181) )

  0025f	ba b5 1c 00 00	 mov	 edx, 7349		; 00001cb5H
  00264	66 3b c2	 cmp	 ax, dx
  00267	75 08		 jne	 SHORT $LN41@SocketItem

; 6284 : 		{
; 6285 : 			iMaterialCount[1]++;

  00269	ff 45 dc	 inc	 DWORD PTR _iMaterialCount$[ebp+4]
  0026c	e9 83 00 00 00	 jmp	 $LN72@SocketItem
$LN41@SocketItem:

; 6286 : 		}
; 6287 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,182) )

  00271	ba b6 1c 00 00	 mov	 edx, 7350		; 00001cb6H
  00276	66 3b c2	 cmp	 ax, dx
  00279	75 05		 jne	 SHORT $LN39@SocketItem

; 6288 : 		{
; 6289 : 			iMaterialCount[2]++;

  0027b	ff 45 e0	 inc	 DWORD PTR _iMaterialCount$[ebp+8]
  0027e	eb 74		 jmp	 SHORT $LN72@SocketItem
$LN39@SocketItem:

; 6290 : 		}
; 6291 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,183) )

  00280	ba b7 1c 00 00	 mov	 edx, 7351		; 00001cb7H
  00285	66 3b c2	 cmp	 ax, dx
  00288	75 05		 jne	 SHORT $LN37@SocketItem

; 6292 : 		{
; 6293 : 			iMaterialCount[3]++;

  0028a	ff 45 e4	 inc	 DWORD PTR _iMaterialCount$[ebp+12]
  0028d	eb 65		 jmp	 SHORT $LN72@SocketItem
$LN37@SocketItem:

; 6294 : 		}
; 6295 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,184) )

  0028f	ba b8 1c 00 00	 mov	 edx, 7352		; 00001cb8H
  00294	66 3b c2	 cmp	 ax, dx
  00297	75 05		 jne	 SHORT $LN35@SocketItem

; 6296 : 		{
; 6297 : 			iMaterialCount[4]++;

  00299	ff 45 e8	 inc	 DWORD PTR _iMaterialCount$[ebp+16]
  0029c	eb 56		 jmp	 SHORT $LN72@SocketItem
$LN35@SocketItem:

; 6298 : 		}
; 6299 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,185) )

  0029e	ba b9 1c 00 00	 mov	 edx, 7353		; 00001cb9H
  002a3	66 3b c2	 cmp	 ax, dx
  002a6	75 05		 jne	 SHORT $LN33@SocketItem

; 6300 : 		{
; 6301 : 			iMaterialCount[5]++;

  002a8	ff 45 ec	 inc	 DWORD PTR _iMaterialCount$[ebp+20]
  002ab	eb 47		 jmp	 SHORT $LN72@SocketItem
$LN33@SocketItem:

; 6302 : 		}
; 6303 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,186) )

  002ad	ba ba 1c 00 00	 mov	 edx, 7354		; 00001cbaH
  002b2	66 3b c2	 cmp	 ax, dx
  002b5	75 05		 jne	 SHORT $LN31@SocketItem

; 6304 : 		{
; 6305 : 			iMaterialCount[6]++;

  002b7	ff 45 f0	 inc	 DWORD PTR _iMaterialCount$[ebp+24]
  002ba	eb 38		 jmp	 SHORT $LN72@SocketItem
$LN31@SocketItem:

; 6306 : 		}
; 6307 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,187) )

  002bc	ba bb 1c 00 00	 mov	 edx, 7355		; 00001cbbH
  002c1	66 3b c2	 cmp	 ax, dx
  002c4	75 05		 jne	 SHORT $LN29@SocketItem

; 6308 : 		{
; 6309 : 			iMaterialCount[7]++;

  002c6	ff 45 f4	 inc	 DWORD PTR _iMaterialCount$[ebp+28]
  002c9	eb 29		 jmp	 SHORT $LN72@SocketItem
$LN29@SocketItem:

; 6310 : 		}
; 6311 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,188) )

  002cb	ba bc 1c 00 00	 mov	 edx, 7356		; 00001cbcH
  002d0	66 3b c2	 cmp	 ax, dx
  002d3	75 05		 jne	 SHORT $LN27@SocketItem

; 6312 : 		{
; 6313 : 			iMaterialCount[8]++;

  002d5	ff 45 f8	 inc	 DWORD PTR _iMaterialCount$[ebp+32]
  002d8	eb 1a		 jmp	 SHORT $LN72@SocketItem
$LN27@SocketItem:

; 6314 : 		}
; 6315 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )

  002da	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  002df	66 3b c2	 cmp	 ax, dx
  002e2	75 0d		 jne	 SHORT $LN25@SocketItem

; 6316 : 		{
; 6317 : 			iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  002e4	d9 41 24	 fld	 DWORD PTR [ecx+36]
  002e7	e8 00 00 00 00	 call	 __ftol2_sse
  002ec	01 45 b4	 add	 DWORD PTR _iCharmOfLuckCount$[ebp], eax

; 6318 : 		}
; 6319 : 		else

  002ef	eb 03		 jmp	 SHORT $LN72@SocketItem
$LN25@SocketItem:

; 6320 : 		{
; 6321 : 			iOtherItemCount++;

  002f1	ff 45 b0	 inc	 DWORD PTR _iOtherItemCount$[ebp]
$LN72@SocketItem:

; 6183 : 
; 6184 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)	{

  002f4	8b 45 bc	 mov	 eax, DWORD PTR tv810[ebp]
  002f7	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  002fc	89 45 bc	 mov	 DWORD PTR tv810[ebp], eax
  002ff	3d 80 1a 00 00	 cmp	 eax, 6784		; 00001a80H
  00304	0f 8c 66 fd ff
	ff		 jl	 $LL81@SocketItem

; 6322 : 		}
; 6323 : 	}
; 6324 : 
; 6325 : 	if( iCharmOfLuckCount > 10 )	{

  0030a	83 7d b4 0a	 cmp	 DWORD PTR _iCharmOfLuckCount$[ebp], 10 ; 0000000aH
  0030e	7e 18		 jle	 SHORT $LN23@SocketItem

; 6326 : 		pMsg.Result = 0xF0;
; 6327 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00310	0f b6 45 c9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00314	8b 75 c0	 mov	 esi, DWORD PTR _lpObj$GSCopy$[ebp]
  00317	8b 16		 mov	 edx, DWORD PTR [esi]
  00319	50		 push	 eax
  0031a	8d 4d c8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0031d	51		 push	 ecx
  0031e	c6 45 cb f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  00322	52		 push	 edx

; 6328 : 		lpObj->ChaosLock = FALSE;
; 6329 : 		return;

  00323	e9 6e 02 00 00	 jmp	 $LN86@SocketItem
$LN23@SocketItem:

; 6330 : 	}
; 6331 : 
; 6332 : 	if( iOtherItemCount != 0 ||
; 6333 : 		iSocketItemCount != 3 ||
; 6334 : 		iRecipeCount != 1 ||
; 6335 : 		iMaterial1Index == -1 ||
; 6336 : 		iMaterial2Index == -1 )

  00328	83 7d b0 00	 cmp	 DWORD PTR _iOtherItemCount$[ebp], 0
  0032c	0f 85 51 02 00
	00		 jne	 $LN21@SocketItem
  00332	83 7d b8 03	 cmp	 DWORD PTR _iSocketItemCount$[ebp], 3
  00336	0f 85 47 02 00
	00		 jne	 $LN21@SocketItem
  0033c	b9 01 00 00 00	 mov	 ecx, 1
  00341	3b f1		 cmp	 esi, ecx
  00343	0f 85 3a 02 00
	00		 jne	 $LN21@SocketItem
  00349	83 ff ff	 cmp	 edi, -1
  0034c	0f 84 31 02 00
	00		 je	 $LN21@SocketItem
  00352	83 fb ff	 cmp	 ebx, -1
  00355	0f 84 28 02 00
	00		 je	 $LN21@SocketItem

; 6340 : 		lpObj->ChaosLock = FALSE;
; 6341 : 		return;
; 6342 : 	}
; 6343 : 
; 6344 : 	for(int i = 0; i < 9; i++)	{

  0035b	33 c0		 xor	 eax, eax
  0035d	8d 49 00	 npad	 3
$LL20@SocketItem:

; 6345 : 		if( i == iMaterial1Index && iMaterialCount[i] == 2 )

  00360	3b c7		 cmp	 eax, edi
  00362	75 07		 jne	 SHORT $LN17@SocketItem
  00364	83 7c 85 d8 02	 cmp	 DWORD PTR _iMaterialCount$[ebp+eax*4], 2
  00369	74 15		 je	 SHORT $LN19@SocketItem
$LN17@SocketItem:

; 6346 : 			continue;
; 6347 : 
; 6348 : 		if( i == iMaterial2Index && iMaterialCount[i] == 1 )

  0036b	3b c3		 cmp	 eax, ebx
  0036d	75 06		 jne	 SHORT $LN16@SocketItem
  0036f	39 4c 85 d8	 cmp	 DWORD PTR _iMaterialCount$[ebp+eax*4], ecx
  00373	74 0b		 je	 SHORT $LN19@SocketItem
$LN16@SocketItem:

; 6349 : 			continue;
; 6350 : 
; 6351 : 		if( iMaterialCount[i] != 0 )	{

  00375	83 7c 85 d8 00	 cmp	 DWORD PTR _iMaterialCount$[ebp+eax*4], 0
  0037a	0f 85 8a 00 00
	00		 jne	 $LN78@SocketItem
$LN19@SocketItem:

; 6340 : 		lpObj->ChaosLock = FALSE;
; 6341 : 		return;
; 6342 : 	}
; 6343 : 
; 6344 : 	for(int i = 0; i < 9; i++)	{

  00380	03 c1		 add	 eax, ecx
  00382	83 f8 09	 cmp	 eax, 9
  00385	7c d9		 jl	 SHORT $LL20@SocketItem

; 6356 : 		}
; 6357 : 	}
; 6358 : 
; 6359 : 	LogChaosItem(lpObj, "SocketItemMix");

  00387	8b 75 c0	 mov	 esi, DWORD PTR _lpObj$GSCopy$[ebp]
  0038a	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  0038d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DEOFBGCG@SocketItemMix?$AA@
  00392	56		 push	 esi
  00393	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 6360 : 	LogAddTD("[SocketItemMix] Chaos Mix Start");

  00398	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JPBHABAH@?$FLSocketItemMix?$FN?5Chaos?5Mix?5Start?$AA@
  0039d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 6361 : 
; 6362 : 	lpObj->ChaosSuccessRate = 40;
; 6363 : 	iNeedChaosMoney = 1000000;
; 6364 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 6365 : 
; 6366 : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  003a3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003a5	8b 7d b4	 mov	 edi, DWORD PTR _iCharmOfLuckCount$[ebp]
  003a8	83 c4 04	 add	 esp, 4
  003ab	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  003ae	51		 push	 ecx
  003af	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  003b4	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
  003ba	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  003bf	6a 00		 push	 0
  003c1	99		 cdq
  003c2	68 40 42 0f 00	 push	 1000000			; 000f4240H
  003c7	52		 push	 edx
  003c8	50		 push	 eax
  003c9	e8 00 00 00 00	 call	 __allmul
  003ce	6a 00		 push	 0
  003d0	6a 64		 push	 100			; 00000064H
  003d2	52		 push	 edx
  003d3	50		 push	 eax
  003d4	e8 00 00 00 00	 call	 __alldiv

; 6367 : 
; 6368 : 	if ( iChaosTaxMoney < 0 )

  003d9	85 c0		 test	 eax, eax
  003db	79 02		 jns	 SHORT $LN14@SocketItem

; 6369 : 	{
; 6370 : 		iChaosTaxMoney = 0;

  003dd	33 c0		 xor	 eax, eax
$LN14@SocketItem:

; 6371 : 	}
; 6372 : 
; 6373 : 	iNeedChaosMoney += iChaosTaxMoney;

  003df	8d 98 40 42 0f
	00		 lea	 ebx, DWORD PTR [eax+1000000]

; 6374 : 
; 6375 : 	if ( iNeedChaosMoney < 0 )

  003e5	85 db		 test	 ebx, ebx
  003e7	79 02		 jns	 SHORT $LN13@SocketItem

; 6376 : 	{
; 6377 : 		iNeedChaosMoney = 0;

  003e9	33 db		 xor	 ebx, ebx
$LN13@SocketItem:

; 6378 : 	}
; 6379 : 
; 6380 : 	if(lpObj->Money < iNeedChaosMoney)

  003eb	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  003f1	3b cb		 cmp	 ecx, ebx
  003f3	7d 29		 jge	 SHORT $LN12@SocketItem

; 6381 : 	{
; 6382 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 6383 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  003f5	0f b6 55 c9	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  003f9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003fb	52		 push	 edx
  003fc	8d 45 c8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  003ff	50		 push	 eax
  00400	c6 45 cb 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00404	51		 push	 ecx

; 6384 : 		lpObj->ChaosLock = FALSE;
; 6385 : 		return;

  00405	e9 8c 01 00 00	 jmp	 $LN86@SocketItem
$LN78@SocketItem:

; 6352 : 			pMsg.Result = 7;
; 6353 : 			DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0040a	0f b6 45 c9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0040e	8b 75 c0	 mov	 esi, DWORD PTR _lpObj$GSCopy$[ebp]
  00411	8b 16		 mov	 edx, DWORD PTR [esi]
  00413	50		 push	 eax
  00414	8d 4d c8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00417	51		 push	 ecx
  00418	52		 push	 edx

; 6354 : 			lpObj->ChaosLock = FALSE;
; 6355 : 			return;

  00419	e9 74 01 00 00	 jmp	 $LN87@SocketItem
$LN12@SocketItem:

; 6386 : 	}
; 6387 : 
; 6388 : 	lpObj->Money -= iNeedChaosMoney;

  0041e	2b cb		 sub	 ecx, ebx
  00420	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 6389 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00426	50		 push	 eax
  00427	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0042c	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 6390 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  00431	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  00437	8b 06		 mov	 eax, DWORD PTR [esi]
  00439	52		 push	 edx
  0043a	50		 push	 eax
  0043b	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00440	83 c4 08	 add	 esp, 8

; 6391 : 
; 6392 : 	if( rand() % 100 < lpObj->ChaosSuccessRate )

  00443	e8 00 00 00 00	 call	 _rand
  00448	99		 cdq
  00449	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0044e	f7 f9		 idiv	 ecx
  00450	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  00456	0f 8d dd 00 00
	00		 jge	 $LN11@SocketItem

; 6393 : 	{
; 6394 : 		int Option1 = TRUE;
; 6395 : 		int Option2 = 0;

  0045c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _Option2$192434[ebp], 0

; 6396 : 
; 6397 : 		if( rand() % 1000 <= 50 )	{

  00463	e8 00 00 00 00	 call	 _rand
  00468	99		 cdq
  00469	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0046e	f7 f9		 idiv	 ecx
  00470	83 fa 32	 cmp	 edx, 50			; 00000032H
  00473	7f 07		 jg	 SHORT $LN84@SocketItem

; 6398 : 			Option2 = TRUE;

  00475	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR _Option2$192434[ebp], 1
$LN84@SocketItem:

; 6399 : 		}
; 6400 : 
; 6401 : 		int Rand1 = rand() % 4;

  0047c	e8 00 00 00 00	 call	 _rand
  00481	8b f8		 mov	 edi, eax
  00483	81 e7 03 00 00
	80		 and	 edi, -2147483645	; 80000003H
  00489	79 05		 jns	 SHORT $LN85@SocketItem
  0048b	4f		 dec	 edi
  0048c	83 cf fc	 or	 edi, -4			; fffffffcH
  0048f	47		 inc	 edi
$LN85@SocketItem:

; 6402 : 		int Rand2 = rand() % 1000;

  00490	e8 00 00 00 00	 call	 _rand
  00495	99		 cdq
  00496	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0049b	f7 f9		 idiv	 ecx

; 6403 : 
; 6404 : 		int Option3 = 0;

  0049d	33 c0		 xor	 eax, eax

; 6405 : 
; 6406 : 		switch( Rand1 )

  0049f	4f		 dec	 edi
  004a0	74 1c		 je	 SHORT $LN7@SocketItem
  004a2	4f		 dec	 edi
  004a3	74 0d		 je	 SHORT $LN5@SocketItem
  004a5	4f		 dec	 edi
  004a6	75 20		 jne	 SHORT $LN6@SocketItem

; 6420 : 		case 3:
; 6421 : 			if( Rand2 < 30 )

  004a8	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  004ab	7d 1b		 jge	 SHORT $LN6@SocketItem

; 6422 : 			{
; 6423 : 				Option3 = 3;

  004ad	8d 47 03	 lea	 eax, DWORD PTR [edi+3]

; 6424 : 			}
; 6425 : 			break;

  004b0	eb 16		 jmp	 SHORT $LN6@SocketItem
$LN5@SocketItem:

; 6412 : 			}
; 6413 : 			break;
; 6414 : 		case 2:
; 6415 : 			if( Rand2 < 60 )

  004b2	83 fa 3c	 cmp	 edx, 60			; 0000003cH
  004b5	7d 11		 jge	 SHORT $LN6@SocketItem

; 6416 : 			{
; 6417 : 				Option3 = 2;

  004b7	b8 02 00 00 00	 mov	 eax, 2

; 6418 : 			}
; 6419 : 			break;

  004bc	eb 0a		 jmp	 SHORT $LN6@SocketItem
$LN7@SocketItem:

; 6407 : 		{
; 6408 : 		case 1:
; 6409 : 			if( Rand2 < 120 )

  004be	83 fa 78	 cmp	 edx, 120		; 00000078H
  004c1	7d 05		 jge	 SHORT $LN6@SocketItem

; 6410 : 			{
; 6411 : 				Option3 = 1;

  004c3	b8 01 00 00 00	 mov	 eax, 1
$LN6@SocketItem:

; 6426 : 		}
; 6427 : #if( __4GAMERS__ == 1 )
; 6428 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 6429 : #endif
; 6430 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,iSocketItem,0,0,Option1,Option2,Option3,-1,0,0);

  004c8	8b 55 b8	 mov	 edx, DWORD PTR _Option2$192434[ebp]
  004cb	6a 00		 push	 0
  004cd	6a 00		 push	 0
  004cf	6a 00		 push	 0
  004d1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  004d3	6a 00		 push	 0
  004d5	6a ff		 push	 -1
  004d7	50		 push	 eax
  004d8	8b 45 c4	 mov	 eax, DWORD PTR _iSocketItem$[ebp]
  004db	52		 push	 edx
  004dc	6a 01		 push	 1
  004de	6a 00		 push	 0
  004e0	6a 00		 push	 0
  004e2	50		 push	 eax
  004e3	6a 00		 push	 0
  004e5	6a 00		 push	 0
  004e7	68 ff 00 00 00	 push	 255			; 000000ffH
  004ec	51		 push	 ecx
  004ed	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 6431 : 		gObjInventoryCommit(lpObj->m_Index);

  004f2	8b 16		 mov	 edx, DWORD PTR [esi]
  004f4	52		 push	 edx
  004f5	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 6432 : 		LogAddTD("[SocketItemMix][Level 02] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 6433 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);

  004fa	8b 45 b4	 mov	 eax, DWORD PTR _iCharmOfLuckCount$[ebp]
  004fd	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00503	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00509	83 c4 40	 add	 esp, 64			; 00000040H
  0050c	50		 push	 eax
  0050d	53		 push	 ebx
  0050e	51		 push	 ecx
  0050f	52		 push	 edx
  00510	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00513	50		 push	 eax
  00514	83 c6 52	 add	 esi, 82			; 00000052H
  00517	56		 push	 esi
  00518	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@BOLCPPFJ@?$FLSocketItemMix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
  0051d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00523	83 c4 1c	 add	 esp, 28			; 0000001cH
  00526	5f		 pop	 edi
  00527	5e		 pop	 esi
  00528	5b		 pop	 ebx

; 6448 : 	}
; 6449 : }

  00529	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0052c	33 cd		 xor	 ecx, ebp
  0052e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00533	8b e5		 mov	 esp, ebp
  00535	5d		 pop	 ebp
  00536	c2 08 00	 ret	 8
$LN11@SocketItem:

; 6434 : 	}
; 6435 : 	else
; 6436 : 	{
; 6437 : #if( __4GAMERS__ == 1 )
; 6438 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 6439 : #endif
; 6440 : 		ChaosBoxInit(lpObj);

  00539	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  0053c	56		 push	 esi
  0053d	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 6441 : 		GCUserChaosBoxSend(lpObj,0);

  00542	6a 00		 push	 0
  00544	56		 push	 esi
  00545	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 6442 : 
; 6443 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0054a	0f b6 4d c9	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0054e	8b 06		 mov	 eax, DWORD PTR [esi]
  00550	51		 push	 ecx
  00551	8d 55 c8	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00554	52		 push	 edx
  00555	50		 push	 eax
  00556	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 6444 : 
; 6445 : 		LogAddTD("[SocketItemMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 6446 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);

  0055b	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00561	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00567	57		 push	 edi
  00568	53		 push	 ebx
  00569	51		 push	 ecx
  0056a	52		 push	 edx
  0056b	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0056e	50		 push	 eax
  0056f	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  00572	51		 push	 ecx
  00573	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@KKFOLCFG@?$FLSocketItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
  00578	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0057e	83 c4 30	 add	 esp, 48			; 00000030H

; 6447 : 		lpObj->ChaosLock = FALSE;

  00581	eb 1b		 jmp	 SHORT $LN88@SocketItem
$LN21@SocketItem:

; 6339 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00583	0f b6 55 c9	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00587	8b 75 c0	 mov	 esi, DWORD PTR _lpObj$GSCopy$[ebp]
  0058a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0058c	52		 push	 edx
  0058d	8d 45 c8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00590	50		 push	 eax
  00591	51		 push	 ecx
$LN87@SocketItem:

; 6337 : 	{
; 6338 : 		pMsg.Result = 7;

  00592	c6 45 cb 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN86@SocketItem:

; 6339 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00596	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0059b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN88@SocketItem:

; 6448 : 	}
; 6449 : }

  0059e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005a1	5f		 pop	 edi
  005a2	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  005ac	5e		 pop	 esi
  005ad	33 cd		 xor	 ecx, ebp
  005af	5b		 pop	 ebx
  005b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005b5	8b e5		 mov	 esp, ebp
  005b7	5d		 pop	 ebp
  005b8	c2 08 00	 ret	 8
?SocketItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP	; CChaosBox::SocketItemMix
_TEXT	ENDS
PUBLIC	??_C@_0EC@CJEGAMMB@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@ ; `string'
PUBLIC	??_C@_0EF@KFBIJMHJ@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@ ; `string'
PUBLIC	??_C@_0BN@FNIHKHMB@?$FL25Wing?5Mix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0M@OFDFPMHD@25WingLevel?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Wing25Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z	; CChaosBox::Wing25Mix
;	COMDAT ??_C@_0EC@CJEGAMMB@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@
CONST	SEGMENT
??_C@_0EC@CJEGAMMB@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@ DB '['
	DB	'25Wing Mix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate :'
	DB	' %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@KFBIJMHJ@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@
CONST	SEGMENT
??_C@_0EF@KFBIJMHJ@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@ DB '['
	DB	'25Wing Mix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRat'
	DB	'e : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FNIHKHMB@?$FL25Wing?5Mix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BN@FNIHKHMB@?$FL25Wing?5Mix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[25Win'
	DB	'g Mix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFDFPMHD@25WingLevel?$AA@
CONST	SEGMENT
??_C@_0M@OFDFPMHD@25WingLevel?$AA@ DB '25WingLevel', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Wing25Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
_iWingCount$ = -52					; size = 4
_iChaosCount$ = -48					; size = 4
_iCreationCount$ = -44					; size = 4
_Item$192510 = -40					; size = 4
_iWingValue$ = -40					; size = 4
_iCharmOfLuckCount$ = -36				; size = 4
_Option2$192512 = -32					; size = 4
_iMaterialID$ = -32					; size = 4
_Option3$192514 = -28					; size = 4
_iOtherItemCount$ = -28					; size = 4
_ExcOption$192515 = -24					; size = 4
_iMaterialCount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?Wing25Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::Wing25Mix, COMDAT
; _this$ = ecx

; 6452 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 6453 : 	lpObj->ChaosLock = TRUE;
; 6454 : 
; 6455 : 	int iNeedChaosMoney;
; 6456 : 	int iWingID = -1;
; 6457 : 	int iMaterialID = -1;
; 6458 : 
; 6459 : 	int iWingValue = 0;

  00016	33 ff		 xor	 edi, edi

; 6460 : 	int iWingCount = 0;
; 6461 : 	int iChaosCount = 0;
; 6462 : 	int iCreationCount = 0;
; 6463 : 	int iMaterialCount = 0;
; 6464 : 	int iOtherItemCount = 0;
; 6465 : 	int iCharmOfLuckCount = 0;
; 6466 : 
; 6467 : 	PMSG_CHAOSMIXRESULT pMsg;
; 6468 : 
; 6469 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	83 cb ff	 or	 ebx, -1
  00025	50		 push	 eax
  00026	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx
  00029	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00033	89 5d e0	 mov	 DWORD PTR _iMaterialID$[ebp], ebx
  00036	89 7d d8	 mov	 DWORD PTR _iWingValue$[ebp], edi
  00039	89 7d cc	 mov	 DWORD PTR _iWingCount$[ebp], edi
  0003c	89 7d d0	 mov	 DWORD PTR _iChaosCount$[ebp], edi
  0003f	89 7d d4	 mov	 DWORD PTR _iCreationCount$[ebp], edi
  00042	89 7d e8	 mov	 DWORD PTR _iMaterialCount$[ebp], edi
  00045	89 7d e4	 mov	 DWORD PTR _iOtherItemCount$[ebp], edi
  00048	89 7d dc	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], edi
  0004b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6470 : 	pMsg.Result = CB_ERROR;

  00053	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00057	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL44@Wing25Mix:

; 6473 : 
; 6474 : 		if( !lpObj->pChaosBox[n].IsItem() )

  00060	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00066	03 cf		 add	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	85 c0		 test	 eax, eax
  0006f	0f 84 a5 00 00
	00		 je	 $LN43@Wing25Mix

; 6475 : 			continue;
; 6476 : 
; 6477 : 		if( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  00075	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0007b	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  00080	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00085	66 3b c2	 cmp	 ax, dx
  00088	75 08		 jne	 SHORT $LN40@Wing25Mix

; 6478 : 		{
; 6479 : 			iChaosCount++;

  0008a	ff 45 d0	 inc	 DWORD PTR _iChaosCount$[ebp]
  0008d	e9 88 00 00 00	 jmp	 $LN43@Wing25Mix
$LN40@Wing25Mix:

; 6480 : 		}
; 6481 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )

  00092	ba 16 1c 00 00	 mov	 edx, 7190		; 00001c16H
  00097	66 3b c2	 cmp	 ax, dx
  0009a	75 05		 jne	 SHORT $LN38@Wing25Mix

; 6482 : 		{
; 6483 : 			iCreationCount++;

  0009c	ff 45 d4	 inc	 DWORD PTR _iCreationCount$[ebp]

; 6484 : 		}
; 6485 : 		else if( (lpObj->pChaosBox[n].m_Type >= ITEMGET(12,3) && lpObj->pChaosBox[n].m_Type <= ITEMGET(12,6)) ||

  0009f	eb 79		 jmp	 SHORT $LN43@Wing25Mix
$LN38@Wing25Mix:

; 6486 : 			lpObj->pChaosBox[n].m_Type == ITEMGET(12,42) ||
; 6487 : 			lpObj->pChaosBox[n].m_Type == ITEMGET(12,49) ||
; 6488 : 			lpObj->pChaosBox[n].m_Type == ITEMGET(13,30) )

  000a1	ba 03 18 00 00	 mov	 edx, 6147		; 00001803H
  000a6	66 3b c2	 cmp	 ax, dx
  000a9	7c 0a		 jl	 SHORT $LN34@Wing25Mix
  000ab	ba 06 18 00 00	 mov	 edx, 6150		; 00001806H
  000b0	66 3b c2	 cmp	 ax, dx
  000b3	7e 58		 jle	 SHORT $LN35@Wing25Mix
$LN34@Wing25Mix:
  000b5	ba 2a 18 00 00	 mov	 edx, 6186		; 0000182aH
  000ba	66 3b c2	 cmp	 ax, dx
  000bd	74 4e		 je	 SHORT $LN35@Wing25Mix
  000bf	ba 31 18 00 00	 mov	 edx, 6193		; 00001831H
  000c4	66 3b c2	 cmp	 ax, dx
  000c7	74 44		 je	 SHORT $LN35@Wing25Mix
  000c9	ba 1e 1a 00 00	 mov	 edx, 6686		; 00001a1eH
  000ce	66 3b c2	 cmp	 ax, dx
  000d1	74 3a		 je	 SHORT $LN35@Wing25Mix

; 6493 : 		}
; 6494 : 		else if( (lpObj->pChaosBox[n].m_Type >= ITEMGET(14,176) && lpObj->pChaosBox[n].m_Type <= ITEMGET(14,179)) )

  000d3	ba b0 1c 00 00	 mov	 edx, 7344		; 00001cb0H
  000d8	66 3b c2	 cmp	 ax, dx
  000db	7c 13		 jl	 SHORT $LN32@Wing25Mix
  000dd	ba b3 1c 00 00	 mov	 edx, 7347		; 00001cb3H
  000e2	66 3b c2	 cmp	 ax, dx
  000e5	7f 09		 jg	 SHORT $LN32@Wing25Mix

; 6495 : 		{
; 6496 : 			iMaterialID = lpObj->pChaosBox[n].m_Type;
; 6497 : 			iMaterialCount++;

  000e7	ff 45 e8	 inc	 DWORD PTR _iMaterialCount$[ebp]
  000ea	98		 cwde
  000eb	89 45 e0	 mov	 DWORD PTR _iMaterialID$[ebp], eax
  000ee	eb 2a		 jmp	 SHORT $LN43@Wing25Mix
$LN32@Wing25Mix:

; 6498 : 		}
; 6499 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )

  000f0	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000f5	66 3b c2	 cmp	 ax, dx
  000f8	75 0e		 jne	 SHORT $LN30@Wing25Mix

; 6500 : 		{
; 6501 : 			iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000fa	d9 44 39 24	 fld	 DWORD PTR [ecx+edi+36]
  000fe	e8 00 00 00 00	 call	 __ftol2_sse
  00103	01 45 dc	 add	 DWORD PTR _iCharmOfLuckCount$[ebp], eax

; 6502 : 		}
; 6503 : 		else

  00106	eb 12		 jmp	 SHORT $LN43@Wing25Mix
$LN30@Wing25Mix:

; 6504 : 		{
; 6505 : 			iOtherItemCount++;

  00108	ff 45 e4	 inc	 DWORD PTR _iOtherItemCount$[ebp]
  0010b	eb 0d		 jmp	 SHORT $LN43@Wing25Mix
$LN35@Wing25Mix:

; 6489 : 		{
; 6490 : 			iWingID = lpObj->pChaosBox[n].m_Type;
; 6491 : 			iWingValue = lpObj->pChaosBox[n].m_BuyMoney;
; 6492 : 			iWingCount++;

  0010d	ff 45 cc	 inc	 DWORD PTR _iWingCount$[ebp]
  00110	0f bf d8	 movsx	 ebx, ax
  00113	8b 44 39 78	 mov	 eax, DWORD PTR [ecx+edi+120]
  00117	89 45 d8	 mov	 DWORD PTR _iWingValue$[ebp], eax
$LN43@Wing25Mix:

; 6471 : 
; 6472 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)	{

  0011a	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00120	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00126	0f 8c 34 ff ff
	ff		 jl	 $LL44@Wing25Mix

; 6506 : 		}
; 6507 : 
; 6508 : 	}
; 6509 : 
; 6510 : 	if( iCharmOfLuckCount > 10 )	{

  0012c	83 7d dc 0a	 cmp	 DWORD PTR _iCharmOfLuckCount$[ebp], 10 ; 0000000aH
  00130	7e 09		 jle	 SHORT $LN28@Wing25Mix

; 6511 : 		pMsg.Result = 0xF0;

  00132	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H

; 6512 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 6513 : 		lpObj->ChaosLock = FALSE;
; 6514 : 		return;

  00136	e9 d4 02 00 00	 jmp	 $LN53@Wing25Mix
$LN28@Wing25Mix:

; 6515 : 	}
; 6516 : 
; 6517 : 	if( iOtherItemCount != 0 ||
; 6518 : 		iMaterialCount != 1 ||
; 6519 : 		iWingCount != 1 ||
; 6520 : 		iCreationCount != 1 ||
; 6521 : 		iChaosCount != 1 )

  0013b	83 7d e4 00	 cmp	 DWORD PTR _iOtherItemCount$[ebp], 0
  0013f	0f 85 c6 02 00
	00		 jne	 $LN26@Wing25Mix
  00145	bf 01 00 00 00	 mov	 edi, 1
  0014a	39 7d e8	 cmp	 DWORD PTR _iMaterialCount$[ebp], edi
  0014d	0f 85 b8 02 00
	00		 jne	 $LN26@Wing25Mix
  00153	39 7d cc	 cmp	 DWORD PTR _iWingCount$[ebp], edi
  00156	0f 85 af 02 00
	00		 jne	 $LN26@Wing25Mix
  0015c	39 7d d4	 cmp	 DWORD PTR _iCreationCount$[ebp], edi
  0015f	0f 85 a6 02 00
	00		 jne	 $LN26@Wing25Mix
  00165	39 7d d0	 cmp	 DWORD PTR _iChaosCount$[ebp], edi
  00168	0f 85 9d 02 00
	00		 jne	 $LN26@Wing25Mix

; 6525 : 		lpObj->ChaosLock = FALSE;
; 6526 : 		return;
; 6527 : 	}
; 6528 : 
; 6529 : 	LogChaosItem(lpObj, "25WingLevel");

  0016e	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00171	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OFDFPMHD@25WingLevel?$AA@
  00176	56		 push	 esi
  00177	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 6530 : 	LogAddTD("[25Wing Mix] Chaos Mix Start");

  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FNIHKHMB@?$FL25Wing?5Mix?$FN?5Chaos?5Mix?5Start?$AA@
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00187	83 c4 04	 add	 esp, 4

; 6531 : 
; 6532 : 	int iDivValue = 9000000;

  0018a	b9 40 54 89 00	 mov	 ecx, 9000000		; 00895440H

; 6533 : 
; 6534 : 	if( iWingID == ITEMGET(13,30) || iWingID == ITEMGET(12,49) )	

  0018f	81 fb 1e 1a 00
	00		 cmp	 ebx, 6686		; 00001a1eH
  00195	74 08		 je	 SHORT $LN24@Wing25Mix
  00197	81 fb 31 18 00
	00		 cmp	 ebx, 6193		; 00001831H
  0019d	75 05		 jne	 SHORT $LN25@Wing25Mix
$LN24@Wing25Mix:

; 6535 : 	{
; 6536 : 		iDivValue = 500000;

  0019f	b9 20 a1 07 00	 mov	 ecx, 500000		; 0007a120H
$LN25@Wing25Mix:

; 6537 : 	}
; 6538 : 
; 6539 : 	lpObj->ChaosSuccessRate = iWingValue/iDivValue;

  001a4	8b 45 d8	 mov	 eax, DWORD PTR _iWingValue$[ebp]
  001a7	99		 cdq
  001a8	f7 f9		 idiv	 ecx
  001aa	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 6540 : 
; 6541 : 	if( lpObj->ChaosSuccessRate < 0 )

  001b0	85 c0		 test	 eax, eax
  001b2	79 06		 jns	 SHORT $LN23@Wing25Mix

; 6542 : 		lpObj->ChaosSuccessRate = 1;

  001b4	89 be 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], edi
$LN23@Wing25Mix:

; 6543 : 
; 6544 : 	if( lpObj->ChaosSuccessRate > 60 )

  001ba	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  001bf	39 86 1c 12 00
	00		 cmp	 DWORD PTR [esi+4636], eax
  001c5	7e 06		 jle	 SHORT $LN22@Wing25Mix

; 6545 : 		lpObj->ChaosSuccessRate = 60;

  001c7	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
$LN22@Wing25Mix:

; 6546 : 
; 6547 : 	iNeedChaosMoney = lpObj->ChaosSuccessRate*100000;

  001cd	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]

; 6548 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 6549 : 
; 6550 : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  001d3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d5	8b 5d dc	 mov	 ebx, DWORD PTR _iCharmOfLuckCount$[ebp]
  001d8	8b f8		 mov	 edi, eax
  001da	03 c3		 add	 eax, ebx
  001dc	69 ff a0 86 01
	00		 imul	 edi, 100000		; 000186a0H
  001e2	51		 push	 ecx
  001e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001e8	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
  001ee	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  001f3	f7 ef		 imul	 edi
  001f5	6a 00		 push	 0
  001f7	6a 64		 push	 100			; 00000064H
  001f9	52		 push	 edx
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 __alldiv

; 6551 : 
; 6552 : 	if ( iChaosTaxMoney < 0 )

  00200	85 c0		 test	 eax, eax
  00202	79 02		 jns	 SHORT $LN21@Wing25Mix

; 6553 : 	{
; 6554 : 		iChaosTaxMoney = 0;

  00204	33 c0		 xor	 eax, eax
$LN21@Wing25Mix:

; 6555 : 	}
; 6556 : 
; 6557 : 	iNeedChaosMoney += iChaosTaxMoney;

  00206	03 f8		 add	 edi, eax

; 6558 : 
; 6559 : 	if ( iNeedChaosMoney < 0 )

  00208	79 02		 jns	 SHORT $LN20@Wing25Mix

; 6560 : 	{
; 6561 : 		iNeedChaosMoney = 0;

  0020a	33 ff		 xor	 edi, edi
$LN20@Wing25Mix:

; 6562 : 	}
; 6563 : 
; 6564 : 	if(lpObj->Money < iNeedChaosMoney)

  0020c	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00212	3b cf		 cmp	 ecx, edi
  00214	7d 15		 jge	 SHORT $LN19@Wing25Mix

; 6565 : 	{
; 6566 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 6567 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00216	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  0021a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0021c	52		 push	 edx
  0021d	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00220	50		 push	 eax
  00221	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00225	51		 push	 ecx

; 6568 : 		lpObj->ChaosLock = FALSE;
; 6569 : 		return;

  00226	e9 f0 01 00 00	 jmp	 $LN54@Wing25Mix
$LN19@Wing25Mix:

; 6570 : 	}
; 6571 : 
; 6572 : 	lpObj->Money -= iNeedChaosMoney;

  0022b	2b cf		 sub	 ecx, edi
  0022d	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 6573 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00233	50		 push	 eax
  00234	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00239	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 6574 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  0023e	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  00244	8b 06		 mov	 eax, DWORD PTR [esi]
  00246	52		 push	 edx
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0024d	83 c4 08	 add	 esp, 8

; 6575 : 
; 6576 : 	if( rand() % 100 < lpObj->ChaosSuccessRate )

  00250	e8 00 00 00 00	 call	 _rand
  00255	99		 cdq
  00256	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0025b	f7 f9		 idiv	 ecx
  0025d	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  00263	0f 8d 58 01 00
	00		 jge	 $LN18@Wing25Mix

; 6577 : 	{
; 6578 : 		int Item = ITEMGET(12,262+(iMaterialID-ITEMGET(14,176)));

  00269	8b 55 e0	 mov	 edx, DWORD PTR _iMaterialID$[ebp]
  0026c	81 c2 56 fc ff
	ff		 add	 edx, -938		; fffffc56H

; 6579 : 
; 6580 : 		int Option1 = 0;
; 6581 : 		int Option2 = 0;

  00272	33 db		 xor	 ebx, ebx
  00274	89 55 d8	 mov	 DWORD PTR _Item$192510[ebp], edx
  00277	89 5d e0	 mov	 DWORD PTR _Option2$192512[ebp], ebx

; 6582 : 
; 6583 : 		if( rand() % 1000 <= iOptionRate )

  0027a	e8 00 00 00 00	 call	 _rand
  0027f	99		 cdq
  00280	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00285	f7 f9		 idiv	 ecx
  00287	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0028a	3b 50 40	 cmp	 edx, DWORD PTR [eax+64]
  0028d	7f 07		 jg	 SHORT $LN17@Wing25Mix

; 6584 : 		{
; 6585 : 			Option2 = TRUE;

  0028f	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _Option2$192512[ebp], 1
$LN17@Wing25Mix:

; 6586 : 		}
; 6587 : 
; 6588 : 		int Option3 = 0;
; 6589 : 		int ExcOption = 0;

  00296	89 5d e8	 mov	 DWORD PTR _ExcOption$192515[ebp], ebx

; 6590 : 
; 6591 : 		int Rand = rand() % 1000;

  00299	e8 00 00 00 00	 call	 _rand
  0029e	99		 cdq
  0029f	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  002a4	f7 f9		 idiv	 ecx

; 6592 : 
; 6593 : 		if( Rand < 400 )

  002a6	81 fa 90 01 00
	00		 cmp	 edx, 400		; 00000190H
  002ac	7d 07		 jge	 SHORT $LN16@Wing25Mix

; 6594 : 		{
; 6595 : 			ExcOption |= 0x10;

  002ae	c7 45 e8 10 00
	00 00		 mov	 DWORD PTR _ExcOption$192515[ebp], 16 ; 00000010H
$LN16@Wing25Mix:

; 6596 : 		}
; 6597 : 
; 6598 : 		int Rand2 = rand() % 4;

  002b5	e8 00 00 00 00	 call	 _rand
  002ba	8b d8		 mov	 ebx, eax
  002bc	81 e3 03 00 00
	80		 and	 ebx, -2147483645	; 80000003H
  002c2	79 05		 jns	 SHORT $LN51@Wing25Mix
  002c4	4b		 dec	 ebx
  002c5	83 cb fc	 or	 ebx, -4			; fffffffcH
  002c8	43		 inc	 ebx
$LN51@Wing25Mix:

; 6599 : 		int Rand3 = rand() % 1000;

  002c9	e8 00 00 00 00	 call	 _rand
  002ce	99		 cdq
  002cf	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  002d4	f7 f9		 idiv	 ecx

; 6600 : 
; 6601 : 		Option3 = 0;
; 6602 : 
; 6603 : 		switch( Rand2 )

  002d6	4b		 dec	 ebx
  002d7	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Option3$192514[ebp], 0
  002de	74 22		 je	 SHORT $LN13@Wing25Mix
  002e0	4b		 dec	 ebx
  002e1	74 11		 je	 SHORT $LN11@Wing25Mix
  002e3	4b		 dec	 ebx
  002e4	75 28		 jne	 SHORT $LN50@Wing25Mix

; 6613 : 		case 3:
; 6614 : 			if( Rand3 < 30 )

  002e6	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  002e9	7d 23		 jge	 SHORT $LN50@Wing25Mix

; 6615 : 				Option3 = 3;

  002eb	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _Option3$192514[ebp], 3

; 6616 : 			break;

  002f2	eb 1a		 jmp	 SHORT $LN50@Wing25Mix
$LN11@Wing25Mix:

; 6608 : 			break;
; 6609 : 		case 2:
; 6610 : 			if( Rand3 < 60 )

  002f4	83 fa 3c	 cmp	 edx, 60			; 0000003cH
  002f7	7d 15		 jge	 SHORT $LN50@Wing25Mix

; 6611 : 				Option3 = 2;

  002f9	c7 45 e4 02 00
	00 00		 mov	 DWORD PTR _Option3$192514[ebp], 2

; 6612 : 			break;

  00300	eb 0c		 jmp	 SHORT $LN50@Wing25Mix
$LN13@Wing25Mix:

; 6604 : 		{
; 6605 : 		case 1:
; 6606 : 			if( Rand3 < 120 )

  00302	83 fa 78	 cmp	 edx, 120		; 00000078H
  00305	7d 07		 jge	 SHORT $LN50@Wing25Mix

; 6607 : 				Option3 = 1;

  00307	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option3$192514[ebp], 1
$LN50@Wing25Mix:

; 6617 : 		}
; 6618 : 
; 6619 : 		int Rand4 = rand() % 2;

  0030e	e8 00 00 00 00	 call	 _rand
  00313	8b d8		 mov	 ebx, eax
  00315	81 e3 01 00 00
	80		 and	 ebx, -2147483647	; 80000001H
  0031b	79 05		 jns	 SHORT $LN52@Wing25Mix
  0031d	4b		 dec	 ebx
  0031e	83 cb fe	 or	 ebx, -2			; fffffffeH
  00321	43		 inc	 ebx
$LN52@Wing25Mix:

; 6620 : 		int Rand5 = rand() % 1000;

  00322	e8 00 00 00 00	 call	 _rand
  00327	99		 cdq
  00328	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0032d	f7 f9		 idiv	 ecx

; 6621 : 
; 6622 : 		switch( Rand4 )

  0032f	83 eb 00	 sub	 ebx, 0
  00332	74 0e		 je	 SHORT $LN5@Wing25Mix
  00334	4b		 dec	 ebx
  00335	75 14		 jne	 SHORT $LN49@Wing25Mix

; 6628 : 			}
; 6629 : 			break;
; 6630 : 		case 1:
; 6631 : 			if( Rand5 < 20 )

  00337	83 fa 14	 cmp	 edx, 20			; 00000014H
  0033a	7d 0f		 jge	 SHORT $LN49@Wing25Mix

; 6632 : 			{
; 6633 : 				ExcOption |= 0x02;

  0033c	83 4d e8 02	 or	 DWORD PTR _ExcOption$192515[ebp], 2

; 6634 : 			}
; 6635 : 			break;

  00340	eb 09		 jmp	 SHORT $LN49@Wing25Mix
$LN5@Wing25Mix:

; 6623 : 		{
; 6624 : 		case 0:
; 6625 : 			if( Rand5 < 40 )

  00342	83 fa 28	 cmp	 edx, 40			; 00000028H
  00345	7d 04		 jge	 SHORT $LN49@Wing25Mix

; 6626 : 			{
; 6627 : 				ExcOption |= 0x01;

  00347	83 4d e8 01	 or	 DWORD PTR _ExcOption$192515[ebp], 1
$LN49@Wing25Mix:

; 6636 : 		}
; 6637 : #if( __4GAMERS__ == 1 )
; 6638 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 6639 : #endif
; 6640 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,0,0,Option1,Option2,Option3,-1,ExcOption,0);

  0034b	8b 55 e8	 mov	 edx, DWORD PTR _ExcOption$192515[ebp]
  0034e	8b 45 e4	 mov	 eax, DWORD PTR _Option3$192514[ebp]
  00351	8b 4d e0	 mov	 ecx, DWORD PTR _Option2$192512[ebp]
  00354	6a 00		 push	 0
  00356	6a 00		 push	 0
  00358	6a 00		 push	 0
  0035a	52		 push	 edx
  0035b	8b 55 d8	 mov	 edx, DWORD PTR _Item$192510[ebp]
  0035e	6a ff		 push	 -1
  00360	50		 push	 eax
  00361	8b 06		 mov	 eax, DWORD PTR [esi]
  00363	51		 push	 ecx
  00364	6a 00		 push	 0
  00366	6a 00		 push	 0
  00368	6a 00		 push	 0
  0036a	52		 push	 edx
  0036b	6a 00		 push	 0
  0036d	6a 00		 push	 0
  0036f	68 ff 00 00 00	 push	 255			; 000000ffH
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 6641 : 		gObjInventoryCommit(lpObj->m_Index);

  0037a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0037c	51		 push	 ecx
  0037d	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 6642 : 		LogAddTD("[25Wing Mix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 6643 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);

  00382	8b 55 dc	 mov	 edx, DWORD PTR _iCharmOfLuckCount$[ebp]
  00385	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0038b	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00391	83 c4 40	 add	 esp, 64			; 00000040H
  00394	52		 push	 edx
  00395	57		 push	 edi
  00396	50		 push	 eax
  00397	51		 push	 ecx
  00398	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  0039b	52		 push	 edx
  0039c	83 c6 52	 add	 esi, 82			; 00000052H
  0039f	56		 push	 esi
  003a0	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@KFBIJMHJ@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@
  003a5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003ab	83 c4 1c	 add	 esp, 28			; 0000001cH
  003ae	5f		 pop	 edi
  003af	5e		 pop	 esi
  003b0	5b		 pop	 ebx

; 6659 : 	}
; 6660 : }

  003b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003b4	33 cd		 xor	 ecx, ebp
  003b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003bb	8b e5		 mov	 esp, ebp
  003bd	5d		 pop	 ebp
  003be	c2 04 00	 ret	 4
$LN18@Wing25Mix:

; 6644 : 	}
; 6645 : 	else
; 6646 : 	{
; 6647 : #if( __4GAMERS__ == 1 )
; 6648 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 6649 : #endif
; 6650 : 		ChaosBoxInit(lpObj);

  003c1	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  003c4	56		 push	 esi
  003c5	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 6651 : 		GCUserChaosBoxSend(lpObj,0);

  003ca	6a 00		 push	 0
  003cc	56		 push	 esi
  003cd	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 6652 : 
; 6653 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  003d2	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  003d6	8b 16		 mov	 edx, DWORD PTR [esi]
  003d8	50		 push	 eax
  003d9	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  003dc	51		 push	 ecx
  003dd	52		 push	 edx
  003de	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 6654 : 
; 6655 : 		LogAddTD("[25Wing Mix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 6656 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);

  003e3	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  003e9	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  003ef	53		 push	 ebx
  003f0	57		 push	 edi
  003f1	50		 push	 eax
  003f2	51		 push	 ecx
  003f3	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  003f6	52		 push	 edx
  003f7	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  003fa	50		 push	 eax
  003fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@CJEGAMMB@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@
  00400	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00406	83 c4 30	 add	 esp, 48			; 00000030H

; 6657 : 
; 6658 : 		lpObj->ChaosLock = FALSE;

  00409	eb 18		 jmp	 SHORT $LN55@Wing25Mix
$LN26@Wing25Mix:

; 6522 : 	{
; 6523 : 		pMsg.Result = 7;

  0040b	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN53@Wing25Mix:

; 6524 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0040f	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00413	8b 06		 mov	 eax, DWORD PTR [esi]
  00415	51		 push	 ecx
  00416	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00419	52		 push	 edx
  0041a	50		 push	 eax
$LN54@Wing25Mix:
  0041b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00420	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN55@Wing25Mix:

; 6659 : 	}
; 6660 : }

  00423	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00426	5f		 pop	 edi
  00427	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00431	5e		 pop	 esi
  00432	33 cd		 xor	 ecx, ebp
  00434	5b		 pop	 ebx
  00435	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0043a	8b e5		 mov	 esp, ebp
  0043c	5d		 pop	 ebp
  0043d	c2 04 00	 ret	 4
?Wing25Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::Wing25Mix
_TEXT	ENDS
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8a 5d 08	 mov	 bl, BYTE PTR ___flags$[ebp]
  0002e	f6 c3 02	 test	 bl, 2
  00031	74 3b		 je	 SHORT $LN3@vector@2
  00033	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00036	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  0003b	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003e	50		 push	 eax
  0003f	68 40 27 00 00	 push	 10048			; 00002740H
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0004a	f6 c3 01	 test	 bl, 1
  0004d	74 09		 je	 SHORT $LN2@vector@2
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00055	83 c4 04	 add	 esp, 4
$LN2@vector@2:
  00058	8b c7		 mov	 eax, edi
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN3@vector@2:
  0006e	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  00080	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00092	f6 c3 01	 test	 bl, 1
  00095	74 09		 je	 SHORT $LN1@vector@2
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009d	83 c4 04	 add	 esp, 4
$LN1@vector@2:
  000a0	8b c6		 mov	 eax, esi
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_GCChaosBox@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCChaosBox@@UAEPAXI@Z PROC				; CChaosBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CChaosBox@@UAE@XZ	; CChaosBox::~CChaosBox
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCChaosBox@@UAEPAXI@Z ENDP				; CChaosBox::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?ChaosBoxSpecialItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxSpecialItemDown
; Function compile flags: /Ogtp
;	COMDAT ?ChaosBoxSpecialItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?ChaosBoxSpecialItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ChaosBoxSpecialItemDown, COMDAT
; _this$ = ecx

; 1414 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 1415 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000a	33 db		 xor	 ebx, ebx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	33 f6		 xor	 esi, esi
$LL5@ChaosBoxSp:

; 1416 : 	{
; 1417 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00011	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00017	03 ce		 add	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001e	83 f8 01	 cmp	 eax, 1
  00021	75 38		 jne	 SHORT $LN4@ChaosBoxSp

; 1418 : 		{
; 1419 : 			lpObj->pChaosBox[n].m_Level = 0;

  00023	8b 87 10 12 00
	00		 mov	 eax, DWORD PTR [edi+4624]
  00029	33 c9		 xor	 ecx, ecx
  0002b	66 89 4c 30 08	 mov	 WORD PTR [eax+esi+8], cx

; 1420 : 			int iType = lpObj->pChaosBox[n].m_Type;
; 1421 : 
; 1422 : 			if( IsPlusItemJewel(iType) == TRUE )

  00030	8b 97 10 12 00
	00		 mov	 edx, DWORD PTR [edi+4624]
  00036	0f bf 44 32 06	 movsx	 eax, WORD PTR [edx+esi+6]
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?IsPlusItemJewel@CChaosBox@@QAEHH@Z ; CChaosBox::IsPlusItemJewel
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 12		 jne	 SHORT $LN4@ChaosBoxSp

; 1423 : 			{
; 1424 : 				lpObj->pChaosBox[n].Clear();

  00049	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]
  0004c	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 1425 : 				lpObj->pChaosBoxMap[n] = 0xFF;

  00051	8b 8f 14 12 00
	00		 mov	 ecx, DWORD PTR [edi+4628]
  00057	c6 04 0b ff	 mov	 BYTE PTR [ebx+ecx], 255	; 000000ffH
$LN4@ChaosBoxSp:

; 1415 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0005b	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00061	43		 inc	 ebx
  00062	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  00068	7c a7		 jl	 SHORT $LL5@ChaosBoxSp
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx

; 1426 : 			}
; 1427 : 		}
; 1428 : 	}
; 1429 : }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?ChaosBoxSpecialItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ChaosBoxSpecialItemDown
_TEXT	ENDS
PUBLIC	?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxWingMixItemDown
; Function compile flags: /Ogtp
;	COMDAT ?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ChaosBoxWingMixItemDown, COMDAT
; _this$ = ecx

; 4824 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 4825 : 	if( lpObj->pChaosBox == FALSE )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	83 bb 10 12 00
	00 00		 cmp	 DWORD PTR [ebx+4624], 0
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx
  00011	0f 84 97 00 00
	00		 je	 $LN8@ChaosBoxWi

; 4826 : 		return;
; 4827 : 
; 4828 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  00017	57		 push	 edi
  00018	33 ff		 xor	 edi, edi
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL10@ChaosBoxWi:

; 4829 : 	{
; 4830 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00020	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00026	03 cf		 add	 ecx, edi
  00028	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0002d	83 f8 01	 cmp	 eax, 1
  00030	75 69		 jne	 SHORT $LN9@ChaosBoxWi

; 4831 : 		{
; 4832 : 			if( Is2ndLevelWing(lpObj->pChaosBox[n].m_Type) != FALSE )

  00032	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00038	0f bf 4c 07 06	 movsx	 ecx, WORD PTR [edi+eax+6]
  0003d	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  00040	51		 push	 ecx
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?Is2ndLevelWing@CChaosBox@@QAEHH@Z ; CChaosBox::Is2ndLevelWing
  00048	85 c0		 test	 eax, eax
  0004a	74 08		 je	 SHORT $LN6@ChaosBoxWi

; 4833 : 			{
; 4834 : 				RandomLevelDown(&lpObj->pChaosBox[n]);

  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z ; CChaosBox::RandomLevelDown
  00052	eb 47		 jmp	 SHORT $LN9@ChaosBoxWi
$LN6@ChaosBoxWi:

; 4835 : 			}
; 4836 : 			else if( CheckItemOptions(&lpObj->pChaosBox[n],0,0,0,0,1,0) != FALSE )

  00054	6a 00		 push	 0
  00056	6a 01		 push	 1
  00058	6a 00		 push	 0
  0005a	6a 00		 push	 0
  0005c	6a 00		 push	 0
  0005e	6a 00		 push	 0
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions

; 4837 : 			{
; 4838 : 				RandomLevelDown(&lpObj->pChaosBox[n]);

  00066	8b ce		 mov	 ecx, esi
  00068	85 c0		 test	 eax, eax
  0006a	74 08		 je	 SHORT $LN4@ChaosBoxWi
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z ; CChaosBox::RandomLevelDown
  00072	eb 27		 jmp	 SHORT $LN9@ChaosBoxWi
$LN4@ChaosBoxWi:

; 4839 : 			}
; 4840 : 			else if( CheckItemOptions(&lpObj->pChaosBox[n],0,0,0,0,0,1) != FALSE )

  00074	6a 01		 push	 1
  00076	6a 00		 push	 0
  00078	6a 00		 push	 0
  0007a	6a 00		 push	 0
  0007c	6a 00		 push	 0
  0007e	6a 00		 push	 0
  00080	52		 push	 edx
  00081	e8 00 00 00 00	 call	 ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions
  00086	85 c0		 test	 eax, eax
  00088	74 0a		 je	 SHORT $LN2@ChaosBoxWi

; 4841 : 			{
; 4842 : 				RandomLevelDown(&lpObj->pChaosBox[n]);

  0008a	52		 push	 edx
  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 ?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z ; CChaosBox::RandomLevelDown

; 4843 : 			}
; 4844 : 			else

  00092	eb 07		 jmp	 SHORT $LN9@ChaosBoxWi
$LN2@ChaosBoxWi:

; 4845 : 			{
; 4846 : 				lpObj->pChaosBox[n].Clear();

  00094	8b ca		 mov	 ecx, edx
  00096	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
$LN9@ChaosBoxWi:

; 4826 : 		return;
; 4827 : 
; 4828 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0009b	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000a1	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000a7	0f 8c 73 ff ff
	ff		 jl	 $LL10@ChaosBoxWi
  000ad	5f		 pop	 edi
$LN8@ChaosBoxWi:
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx

; 4847 : 			}
; 4848 : 		}
; 4849 : 	}
; 4850 : }

  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ChaosBoxWingMixItemDown
_TEXT	ENDS
PUBLIC	??_C@_0EK@JJBHLEGP@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ ; `string'
PUBLIC	??_C@_0EN@NDGFLPHI@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ ; `string'
PUBLIC	??_C@_0ED@HJNGDDFB@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5N@ ; `string'
PUBLIC	??_C@_0CA@BGIGBHFB@?$FLPlusItemLevel?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0DL@KGOODEAG@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5C@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?PlusItemLevelChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@H@Z ; CChaosBox::PlusItemLevelChaosMix
EXTRN	?IsPentagram@CElementalSystem@@QAEHH@Z:PROC	; CElementalSystem::IsPentagram
EXTRN	?GetItemOptions@CSocketItems@@QAEXPAVCItem@@PAE1@Z:PROC ; CSocketItems::GetItemOptions
EXTRN	?gc_ChaosMixPlusItemLevel_Max@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_Max
EXTRN	?gc_ChaosMixPlusItemLevel_Luck@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_Luck
EXTRN	?gc_ChaosMixPlusItemLevel_3_1@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_3_1
EXTRN	?gc_ChaosMixPlusItemLevel_2_1@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_2_1
EXTRN	?gc_ChaosMixPlusItemLevel_1_1@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_1_1
EXTRN	?gc_ChaosMixPlusItemLevel_3_2@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_3_2
EXTRN	?gc_ChaosMixPlusItemLevel_2_2@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_2_2
EXTRN	?gc_ChaosMixPlusItemLevel_1_2@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_1_2
EXTRN	?gc_ChaosMixPlusItemLevel_3_3@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_3_3
EXTRN	?gc_ChaosMixPlusItemLevel_2_3@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_2_3
EXTRN	?gc_ChaosMixPlusItemLevel_1_3@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_1_3
EXTRN	?CheckSocketOption@CSocketItems@@QAE_NPAVCItem@@@Z:PROC ; CSocketItems::CheckSocketOption
EXTRN	?Is380Item@CItemSystemFor380@@QAEHPBVCItem@@@Z:PROC ; CItemSystemFor380::Is380Item
EXTRN	?g_kItemSystemFor380@@3VCItemSystemFor380@@A:BYTE ; g_kItemSystemFor380
;	COMDAT ??_C@_0EK@JJBHLEGP@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
CONST	SEGMENT
??_C@_0EK@JJBHLEGP@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ DB '['
	DB	'PlusItemLevel] [%s][%s] CBMix Fail %d Money : %d-%d [%d], Cha'
	DB	'rmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@NDGFLPHI@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
CONST	SEGMENT
??_C@_0EN@NDGFLPHI@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ DB '['
	DB	'PlusItemLevel] [%s][%s] CBMix Success %d Money : %d-%d [%d], '
	DB	'CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@HJNGDDFB@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5N@
CONST	SEGMENT
??_C@_0ED@HJNGDDFB@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5N@ DB '['
	DB	'PlusItemLevel] [%s][%s] CBMix Not Enough Money [%d] need zen '
	DB	'[%d]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BGIGBHFB@?$FLPlusItemLevel?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0CA@BGIGBHFB@?$FLPlusItemLevel?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Plu'
	DB	'sItemLevel] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@KGOODEAG@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5C@
CONST	SEGMENT
??_C@_0DL@KGOODEAG@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5C@ DB '['
	DB	'PlusItemLevel] [%s][%s] CBMix Charm of luck over 10% (%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?PlusItemLevelChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$ = -312						; size = 4
_SocketBonus$190424 = -308				; size = 1
_OtherItemFound$ = -308					; size = 4
_iCharmOfLuckCount$ = -304				; size = 4
_Plus9ItemCount$ = -300					; size = 4
_Plus12ItemCount$ = -296				; size = 4
_Plus13ItemCount$ = -292				; size = 4
_PlusItemPos$ = -288					; size = 4
_BlessGemCount$ = -284					; size = 4
_ChaosGemCount$ = -280					; size = 4
_SoulGemCount$ = -276					; size = 4
tv1564 = -272						; size = 4
_Dur$190421 = -272					; size = 4
_iChristmasItem$ = -272					; size = 4
_Plus14ItemCount$ = -268				; size = 4
_Plus10ItemCount$ = -264				; size = 4
_btRateType$ = -257					; size = 1
_Item$190420 = -256					; size = 212
_pResult$190351 = -44					; size = 16
_pResult$190345 = -44					; size = 16
_pMsg$ = -28						; size = 16
_SocketOptions$190423 = -12				; size = 5
_Plus11ItemCount$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_mixType$ = 12						; size = 4
?PlusItemLevelChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CChaosBox::PlusItemLevelChaosMix, COMDAT
; _this$ = ecx

; 948  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00017	56		 push	 esi

; 949  : 	int ChaosGemCount = 0;

  00018	33 f6		 xor	 esi, esi
  0001a	57		 push	 edi
  0001b	89 8d c8 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  00021	89 b5 e8 fe ff
	ff		 mov	 DWORD PTR _ChaosGemCount$[ebp], esi

; 950  : 	int BlessGemCount = 0;

  00027	89 b5 e4 fe ff
	ff		 mov	 DWORD PTR _BlessGemCount$[ebp], esi

; 951  : 	int SoulGemCount = 0;

  0002d	89 b5 ec fe ff
	ff		 mov	 DWORD PTR _SoulGemCount$[ebp], esi

; 952  : 	int Plus9ItemCount = 0;

  00033	89 b5 d4 fe ff
	ff		 mov	 DWORD PTR _Plus9ItemCount$[ebp], esi

; 953  : 	int Plus10ItemCount = 0;

  00039	89 b5 f8 fe ff
	ff		 mov	 DWORD PTR _Plus10ItemCount$[ebp], esi

; 954  : 	int PlusItemPos = -1;

  0003f	c7 85 e0 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _PlusItemPos$[ebp], -1

; 955  : 	int OtherItemFound = 0;

  00049	89 b5 cc fe ff
	ff		 mov	 DWORD PTR _OtherItemFound$[ebp], esi

; 956  : 	int Plus11ItemCount = 0;

  0004f	89 75 f4	 mov	 DWORD PTR _Plus11ItemCount$[ebp], esi

; 957  : 	int Plus12ItemCount = 0;

  00052	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR _Plus12ItemCount$[ebp], esi

; 958  : 	int Plus13ItemCount = 0;

  00058	89 b5 dc fe ff
	ff		 mov	 DWORD PTR _Plus13ItemCount$[ebp], esi

; 959  : 	int Plus14ItemCount = 0;

  0005e	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _Plus14ItemCount$[ebp], esi

; 960  : 	int ExtraBlessGemCount = 0;
; 961  : 	int ExtraSoulGemCount = 0;
; 962  : 	int iChristmasItem = 0;

  00064	89 b5 f0 fe ff
	ff		 mov	 DWORD PTR _iChristmasItem$[ebp], esi

; 963  : 	int iCharmOfLuckCount = 0;

  0006a	89 b5 d0 fe ff
	ff		 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], esi

; 967  : 	{
; 968  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00070	33 ff		 xor	 edi, edi
$LL95@PlusItemLe:
  00072	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00078	03 cf		 add	 ecx, edi
  0007a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0007f	83 f8 01	 cmp	 eax, 1
  00082	0f 85 fa 00 00
	00		 jne	 $LN94@PlusItemLe

; 969  : 		{
; 970  : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  00088	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0008e	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]
  00091	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00095	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  0009a	66 3b c2	 cmp	 ax, dx
  0009d	75 0b		 jne	 SHORT $LN91@PlusItemLe

; 971  : 			{
; 972  : 				ChaosGemCount++;

  0009f	ff 85 e8 fe ff
	ff		 inc	 DWORD PTR _ChaosGemCount$[ebp]
  000a5	e9 d8 00 00 00	 jmp	 $LN94@PlusItemLe
$LN91@PlusItemLe:

; 973  : 			}
; 974  : 			else if (  lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  000aa	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  000af	66 3b c2	 cmp	 ax, dx
  000b2	75 0b		 jne	 SHORT $LN89@PlusItemLe

; 975  : 			{
; 976  : 				BlessGemCount++;

  000b4	ff 85 e4 fe ff
	ff		 inc	 DWORD PTR _BlessGemCount$[ebp]
  000ba	e9 c3 00 00 00	 jmp	 $LN94@PlusItemLe
$LN89@PlusItemLe:

; 977  : 			}
; 978  : 			else if (  lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  000bf	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  000c4	66 3b c2	 cmp	 ax, dx
  000c7	75 0b		 jne	 SHORT $LN87@PlusItemLe

; 979  : 			{
; 980  : 				SoulGemCount++;

  000c9	ff 85 ec fe ff
	ff		 inc	 DWORD PTR _SoulGemCount$[ebp]
  000cf	e9 ae 00 00 00	 jmp	 $LN94@PlusItemLe
$LN87@PlusItemLe:

; 981  : 			}
; 982  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  000d4	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000d9	66 3b c2	 cmp	 ax, dx
  000dc	75 13		 jne	 SHORT $LN85@PlusItemLe

; 983  : 			{
; 984  : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000de	d9 41 24	 fld	 DWORD PTR [ecx+36]
  000e1	e8 00 00 00 00	 call	 __ftol2_sse
  000e6	01 85 d0 fe ff
	ff		 add	 DWORD PTR _iCharmOfLuckCount$[ebp], eax
  000ec	e9 91 00 00 00	 jmp	 $LN94@PlusItemLe
$LN85@PlusItemLe:

; 985  : 			}
; 986  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,96) )

  000f1	ba 60 1c 00 00	 mov	 edx, 7264		; 00001c60H
  000f6	66 3b c2	 cmp	 ax, dx
  000f9	75 08		 jne	 SHORT $LN83@PlusItemLe

; 987  : 			{
; 988  : 				iChristmasItem += 1;

  000fb	ff 85 f0 fe ff
	ff		 inc	 DWORD PTR _iChristmasItem$[ebp]
  00101	eb 7f		 jmp	 SHORT $LN94@PlusItemLe
$LN83@PlusItemLe:

; 989  : 			}
; 990  : 			else if ( lpObj->pChaosBox[n].m_Level == 9 )

  00103	0f b7 41 08	 movzx	 eax, WORD PTR [ecx+8]
  00107	66 83 f8 09	 cmp	 ax, 9
  0010b	75 0e		 jne	 SHORT $LN81@PlusItemLe

; 991  : 			{
; 992  : 				Plus9ItemCount++;

  0010d	ff 85 d4 fe ff
	ff		 inc	 DWORD PTR _Plus9ItemCount$[ebp]

; 993  : 				PlusItemPos = n;

  00113	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _PlusItemPos$[ebp], esi
  00119	eb 67		 jmp	 SHORT $LN94@PlusItemLe
$LN81@PlusItemLe:

; 994  : 			}
; 995  : 			else if ( lpObj->pChaosBox[n].m_Level == 10 )

  0011b	66 83 f8 0a	 cmp	 ax, 10			; 0000000aH
  0011f	75 0e		 jne	 SHORT $LN79@PlusItemLe

; 996  : 			{
; 997  : 				Plus10ItemCount++;

  00121	ff 85 f8 fe ff
	ff		 inc	 DWORD PTR _Plus10ItemCount$[ebp]

; 998  : 				PlusItemPos = n;

  00127	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _PlusItemPos$[ebp], esi
  0012d	eb 53		 jmp	 SHORT $LN94@PlusItemLe
$LN79@PlusItemLe:

; 999  : 			}
; 1000 : 			else if ( lpObj->pChaosBox[n].m_Level == 11 )

  0012f	66 83 f8 0b	 cmp	 ax, 11			; 0000000bH
  00133	75 0b		 jne	 SHORT $LN77@PlusItemLe

; 1001 : 			{
; 1002 : 				Plus11ItemCount++;

  00135	ff 45 f4	 inc	 DWORD PTR _Plus11ItemCount$[ebp]

; 1003 : 				PlusItemPos = n;

  00138	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _PlusItemPos$[ebp], esi
  0013e	eb 42		 jmp	 SHORT $LN94@PlusItemLe
$LN77@PlusItemLe:

; 1004 : 			}
; 1005 : 			else if ( lpObj->pChaosBox[n].m_Level == 12 )

  00140	66 83 f8 0c	 cmp	 ax, 12			; 0000000cH
  00144	75 0e		 jne	 SHORT $LN75@PlusItemLe

; 1006 : 			{
; 1007 : 				Plus12ItemCount++;

  00146	ff 85 d8 fe ff
	ff		 inc	 DWORD PTR _Plus12ItemCount$[ebp]

; 1008 : 				PlusItemPos = n;

  0014c	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _PlusItemPos$[ebp], esi
  00152	eb 2e		 jmp	 SHORT $LN94@PlusItemLe
$LN75@PlusItemLe:

; 1009 : 			}
; 1010 : 			else if ( lpObj->pChaosBox[n].m_Level == 13 )

  00154	66 83 f8 0d	 cmp	 ax, 13			; 0000000dH
  00158	75 0e		 jne	 SHORT $LN73@PlusItemLe

; 1011 : 			{
; 1012 : 				Plus13ItemCount++;

  0015a	ff 85 dc fe ff
	ff		 inc	 DWORD PTR _Plus13ItemCount$[ebp]

; 1013 : 				PlusItemPos = n;

  00160	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _PlusItemPos$[ebp], esi
  00166	eb 1a		 jmp	 SHORT $LN94@PlusItemLe
$LN73@PlusItemLe:

; 1014 : 			}
; 1015 : 			else if ( lpObj->pChaosBox[n].m_Level == 14 )

  00168	66 83 f8 0e	 cmp	 ax, 14			; 0000000eH
  0016c	75 0e		 jne	 SHORT $LN71@PlusItemLe

; 1016 : 			{
; 1017 : 				Plus14ItemCount++;

  0016e	ff 85 f4 fe ff
	ff		 inc	 DWORD PTR _Plus14ItemCount$[ebp]

; 1018 : 				PlusItemPos = n;

  00174	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _PlusItemPos$[ebp], esi

; 1019 : 			}
; 1020 : 			else

  0017a	eb 06		 jmp	 SHORT $LN94@PlusItemLe
$LN71@PlusItemLe:

; 1021 : 			{
; 1022 : 				OtherItemFound ++;

  0017c	ff 85 cc fe ff
	ff		 inc	 DWORD PTR _OtherItemFound$[ebp]
$LN94@PlusItemLe:

; 964  : 	BYTE btItemLuckValue = 0;
; 965  : 	
; 966  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00182	b9 01 00 00 00	 mov	 ecx, 1
  00187	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0018d	03 f1		 add	 esi, ecx
  0018f	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00195	0f 8c d7 fe ff
	ff		 jl	 $LL95@PlusItemLe

; 1023 : 			}
; 1024 : 		}
; 1025 : 	}
; 1026 : 
; 1027 : 	if ( iCharmOfLuckCount > 10 )

  0019b	83 bd d0 fe ff
	ff 0a		 cmp	 DWORD PTR _iCharmOfLuckCount$[ebp], 10 ; 0000000aH
  001a2	7e 49		 jle	 SHORT $LN69@PlusItemLe

; 1028 : 	{
; 1029 : 		PMSG_CHAOSMIXRESULT pResult;
; 1030 : 
; 1031 : 		PHeadSetB((LPBYTE)&pResult, 0x86, sizeof(pResult));

  001a4	6a 10		 push	 16			; 00000010H
  001a6	8d 45 d4	 lea	 eax, DWORD PTR _pResult$190345[ebp]
  001a9	68 86 00 00 00	 push	 134			; 00000086H
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1032 : 
; 1033 : 		LogAddTD("[PlusItemLevel] [%s][%s] CBMix Charm of luck over 10% (%d)",
; 1034 : 			lpObj->AccountID, lpObj->Name, iCharmOfLuckCount);

  001b4	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _iCharmOfLuckCount$[ebp]
  001ba	51		 push	 ecx
  001bb	8d 53 5d	 lea	 edx, DWORD PTR [ebx+93]
  001be	52		 push	 edx
  001bf	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  001c2	50		 push	 eax
  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@KGOODEAG@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5C@
  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1035 : 
; 1036 : 		pResult.Result = 0xF0;
; 1037 : 
; 1038 : 		DataSend(lpObj->m_Index, (LPBYTE)&pResult, pResult.h.size);

  001ce	0f b6 4d d5	 movzx	 ecx, BYTE PTR _pResult$190345[ebp+1]
  001d2	8b 03		 mov	 eax, DWORD PTR [ebx]
  001d4	51		 push	 ecx
  001d5	8d 55 d4	 lea	 edx, DWORD PTR _pResult$190345[ebp]
  001d8	52		 push	 edx
  001d9	50		 push	 eax
  001da	c6 45 d7 f0	 mov	 BYTE PTR _pResult$190345[ebp+3], 240 ; 000000f0H
  001de	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001e3	83 c4 28	 add	 esp, 40			; 00000028H

; 1039 : 
; 1040 : 		lpObj->ChaosLock = FALSE;
; 1041 : 
; 1042 : 		return 0;

  001e6	33 c0		 xor	 eax, eax
  001e8	e9 50 08 00 00	 jmp	 $LN129@PlusItemLe
$LN69@PlusItemLe:

; 1043 : 	}
; 1044 : 
; 1045 : 	if ( OtherItemFound != FALSE )

  001ed	33 f6		 xor	 esi, esi
  001ef	39 b5 cc fe ff
	ff		 cmp	 DWORD PTR _OtherItemFound$[ebp], esi

; 1046 : 	{
; 1047 : 		return FALSE;

  001f5	75 36		 jne	 SHORT $LN132@PlusItemLe

; 1048 : 	}
; 1049 : 
; 1050 : 	if ( iChristmasItem > 1 )

  001f7	39 8d f0 fe ff
	ff		 cmp	 DWORD PTR _iChristmasItem$[ebp], ecx
  001fd	7e 43		 jle	 SHORT $LN67@PlusItemLe

; 1051 : 	{
; 1052 : 		PMSG_CHAOSMIXRESULT pResult;
; 1053 : 		PHeadSetB((LPBYTE)&pResult, 0x86, sizeof(pResult));

  001ff	6a 10		 push	 16			; 00000010H
  00201	8d 4d d4	 lea	 ecx, DWORD PTR _pResult$190351[ebp]
  00204	68 86 00 00 00	 push	 134			; 00000086H
  00209	51		 push	 ecx
  0020a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1054 : 
; 1055 : 		pResult.Result = 7;
; 1056 : 
; 1057 : 		DataSend(lpObj->m_Index, (LPBYTE)&pResult, pResult.h.size);

  0020f	0f b6 55 d5	 movzx	 edx, BYTE PTR _pResult$190351[ebp+1]
  00213	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00215	52		 push	 edx
  00216	8d 45 d4	 lea	 eax, DWORD PTR _pResult$190351[ebp]
  00219	50		 push	 eax
  0021a	51		 push	 ecx
  0021b	c6 45 d7 07	 mov	 BYTE PTR _pResult$190351[ebp+3], 7
  0021f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00224	83 c4 18	 add	 esp, 24			; 00000018H

; 1058 : 		lpObj->ChaosLock = FALSE;

  00227	89 b3 20 12 00
	00		 mov	 DWORD PTR [ebx+4640], esi
$LN132@PlusItemLe:

; 1059 : 		return 0;

  0022d	33 c0		 xor	 eax, eax

; 1411 : }

  0022f	5f		 pop	 edi
  00230	5e		 pop	 esi
  00231	5b		 pop	 ebx
  00232	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00235	33 cd		 xor	 ecx, ebp
  00237	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023c	8b e5		 mov	 esp, ebp
  0023e	5d		 pop	 ebp
  0023f	c2 08 00	 ret	 8
$LN67@PlusItemLe:

; 1060 : 	}
; 1061 : 
; 1062 : 	lpObj->ChaosMoney = 0;
; 1063 : 	int MixType = 0;
; 1064 : 
; 1065 : 	if ( Plus9ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 1 && SoulGemCount == 1 && Plus10ItemCount == 0 && Plus11ItemCount == 0 && Plus12ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  00242	8b bd d4 fe ff
	ff		 mov	 edi, DWORD PTR _Plus9ItemCount$[ebp]
  00248	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _BlessGemCount$[ebp]
  0024e	89 b3 18 12 00
	00		 mov	 DWORD PTR [ebx+4632], esi
  00254	3b f9		 cmp	 edi, ecx
  00256	75 63		 jne	 SHORT $LN113@PlusItemLe
  00258	39 8d e8 fe ff
	ff		 cmp	 DWORD PTR _ChaosGemCount$[ebp], ecx
  0025e	75 5b		 jne	 SHORT $LN113@PlusItemLe
  00260	3b c1		 cmp	 eax, ecx
  00262	75 57		 jne	 SHORT $LN113@PlusItemLe
  00264	39 8d ec fe ff
	ff		 cmp	 DWORD PTR _SoulGemCount$[ebp], ecx
  0026a	75 4f		 jne	 SHORT $LN113@PlusItemLe
  0026c	39 b5 f8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$[ebp], esi
  00272	75 47		 jne	 SHORT $LN113@PlusItemLe
  00274	8b 55 f4	 mov	 edx, DWORD PTR _Plus11ItemCount$[ebp]
  00277	3b d6		 cmp	 edx, esi
  00279	0f 85 a3 00 00
	00		 jne	 $LN64@PlusItemLe
  0027f	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _Plus12ItemCount$[ebp]
  00285	3b ce		 cmp	 ecx, esi
  00287	0f 85 fa 00 00
	00		 jne	 $LN126@PlusItemLe
  0028d	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _Plus13ItemCount$[ebp]
  00293	3b c6		 cmp	 eax, esi
  00295	0f 85 46 01 00
	00		 jne	 $LN123@PlusItemLe
  0029b	39 b5 f4 fe ff
	ff		 cmp	 DWORD PTR _Plus14ItemCount$[ebp], esi
  002a1	0f 85 88 01 00
	00		 jne	 $LN119@PlusItemLe

; 1066 : 	{
; 1067 : 		MixType = CHAOS_TYPE_UPGRADE_10;

  002a7	be 03 00 00 00	 mov	 esi, 3

; 1068 : 		lpObj->ChaosMoney = 2000000;

  002ac	c7 83 18 12 00
	00 80 84 1e 00	 mov	 DWORD PTR [ebx+4632], 2000000 ; 001e8480H

; 1069 : 		ExtraBlessGemCount = BlessGemCount - 1;
; 1070 : 		ExtraSoulGemCount = SoulGemCount - 1;

  002b6	e9 c3 01 00 00	 jmp	 $LN121@PlusItemLe
$LN113@PlusItemLe:

; 1071 : 	}
; 1072 : 	else if ( Plus10ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 2 && SoulGemCount == 2 && Plus9ItemCount == 0 && Plus11ItemCount == 0 && Plus12ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  002bb	39 8d f8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$[ebp], ecx
  002c1	75 5c		 jne	 SHORT $LN115@PlusItemLe
  002c3	39 8d e8 fe ff
	ff		 cmp	 DWORD PTR _ChaosGemCount$[ebp], ecx
  002c9	75 54		 jne	 SHORT $LN115@PlusItemLe
  002cb	83 f8 02	 cmp	 eax, 2
  002ce	75 4f		 jne	 SHORT $LN115@PlusItemLe
  002d0	39 85 ec fe ff
	ff		 cmp	 DWORD PTR _SoulGemCount$[ebp], eax
  002d6	75 47		 jne	 SHORT $LN115@PlusItemLe
  002d8	3b fe		 cmp	 edi, esi
  002da	75 43		 jne	 SHORT $LN115@PlusItemLe
  002dc	8b 55 f4	 mov	 edx, DWORD PTR _Plus11ItemCount$[ebp]
  002df	3b d6		 cmp	 edx, esi
  002e1	75 3f		 jne	 SHORT $LN64@PlusItemLe
  002e3	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _Plus12ItemCount$[ebp]
  002e9	3b ce		 cmp	 ecx, esi
  002eb	0f 85 96 00 00
	00		 jne	 $LN126@PlusItemLe
  002f1	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _Plus13ItemCount$[ebp]
  002f7	3b c6		 cmp	 eax, esi
  002f9	0f 85 e2 00 00
	00		 jne	 $LN123@PlusItemLe
  002ff	39 b5 f4 fe ff
	ff		 cmp	 DWORD PTR _Plus14ItemCount$[ebp], esi
  00305	0f 85 24 01 00
	00		 jne	 $LN119@PlusItemLe

; 1073 : 	{
; 1074 : 		MixType = CHAOS_TYPE_UPGRADE_11;

  0030b	be 04 00 00 00	 mov	 esi, 4

; 1075 : 		lpObj->ChaosMoney = 4000000;

  00310	c7 83 18 12 00
	00 00 09 3d 00	 mov	 DWORD PTR [ebx+4632], 4000000 ; 003d0900H

; 1076 : 		ExtraBlessGemCount = BlessGemCount - 2;
; 1077 : 		ExtraSoulGemCount = SoulGemCount - 2;

  0031a	e9 5f 01 00 00	 jmp	 $LN121@PlusItemLe
$LN115@PlusItemLe:

; 1071 : 	}
; 1072 : 	else if ( Plus10ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 2 && SoulGemCount == 2 && Plus9ItemCount == 0 && Plus11ItemCount == 0 && Plus12ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  0031f	8b 55 f4	 mov	 edx, DWORD PTR _Plus11ItemCount$[ebp]
$LN64@PlusItemLe:

; 1078 : 	}
; 1079 : 	else if ( Plus11ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 3 && SoulGemCount == 3 && Plus9ItemCount == 0 && Plus10ItemCount == 0 && Plus12ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  00322	3b d1		 cmp	 edx, ecx
  00324	75 59		 jne	 SHORT $LN125@PlusItemLe
  00326	39 8d e8 fe ff
	ff		 cmp	 DWORD PTR _ChaosGemCount$[ebp], ecx
  0032c	75 51		 jne	 SHORT $LN125@PlusItemLe
  0032e	83 f8 03	 cmp	 eax, 3
  00331	75 4c		 jne	 SHORT $LN125@PlusItemLe
  00333	39 85 ec fe ff
	ff		 cmp	 DWORD PTR _SoulGemCount$[ebp], eax
  00339	75 44		 jne	 SHORT $LN125@PlusItemLe
  0033b	3b fe		 cmp	 edi, esi
  0033d	75 40		 jne	 SHORT $LN125@PlusItemLe
  0033f	39 b5 f8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$[ebp], esi
  00345	75 38		 jne	 SHORT $LN125@PlusItemLe
  00347	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _Plus12ItemCount$[ebp]
  0034d	3b ce		 cmp	 ecx, esi
  0034f	75 36		 jne	 SHORT $LN126@PlusItemLe
  00351	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _Plus13ItemCount$[ebp]
  00357	3b c6		 cmp	 eax, esi
  00359	0f 85 82 00 00
	00		 jne	 $LN123@PlusItemLe
  0035f	39 b5 f4 fe ff
	ff		 cmp	 DWORD PTR _Plus14ItemCount$[ebp], esi
  00365	0f 85 c4 00 00
	00		 jne	 $LN119@PlusItemLe

; 1080 : 	{
; 1081 : 		MixType = CHAOS_TYPE_UPGRADE_12;

  0036b	be 16 00 00 00	 mov	 esi, 22			; 00000016H

; 1082 : 		lpObj->ChaosMoney = 6000000;

  00370	c7 83 18 12 00
	00 80 8d 5b 00	 mov	 DWORD PTR [ebx+4632], 6000000 ; 005b8d80H

; 1083 : 		ExtraBlessGemCount = BlessGemCount - 3;
; 1084 : 		ExtraSoulGemCount = SoulGemCount - 3;

  0037a	e9 ff 00 00 00	 jmp	 $LN121@PlusItemLe
$LN125@PlusItemLe:

; 1078 : 	}
; 1079 : 	else if ( Plus11ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 3 && SoulGemCount == 3 && Plus9ItemCount == 0 && Plus10ItemCount == 0 && Plus12ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  0037f	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _Plus12ItemCount$[ebp]
  00385	eb 06		 jmp	 SHORT $LN62@PlusItemLe
$LN126@PlusItemLe:
  00387	8b bd d4 fe ff
	ff		 mov	 edi, DWORD PTR _Plus9ItemCount$[ebp]
$LN62@PlusItemLe:

; 1085 : 	}
; 1086 : 	else if ( Plus12ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 4 && SoulGemCount == 4 && Plus9ItemCount == 0 && Plus10ItemCount == 0 && Plus11ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  0038d	83 f9 01	 cmp	 ecx, 1
  00390	75 49		 jne	 SHORT $LN122@PlusItemLe
  00392	39 8d e8 fe ff
	ff		 cmp	 DWORD PTR _ChaosGemCount$[ebp], ecx
  00398	75 41		 jne	 SHORT $LN122@PlusItemLe
  0039a	83 f8 04	 cmp	 eax, 4
  0039d	75 3c		 jne	 SHORT $LN122@PlusItemLe
  0039f	39 85 ec fe ff
	ff		 cmp	 DWORD PTR _SoulGemCount$[ebp], eax
  003a5	75 34		 jne	 SHORT $LN122@PlusItemLe
  003a7	85 ff		 test	 edi, edi
  003a9	75 30		 jne	 SHORT $LN122@PlusItemLe
  003ab	39 b5 f8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$[ebp], esi
  003b1	75 28		 jne	 SHORT $LN122@PlusItemLe
  003b3	85 d2		 test	 edx, edx
  003b5	75 24		 jne	 SHORT $LN122@PlusItemLe
  003b7	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _Plus13ItemCount$[ebp]
  003bd	85 c0		 test	 eax, eax
  003bf	75 20		 jne	 SHORT $LN123@PlusItemLe
  003c1	39 b5 f4 fe ff
	ff		 cmp	 DWORD PTR _Plus14ItemCount$[ebp], esi
  003c7	75 66		 jne	 SHORT $LN119@PlusItemLe

; 1087 : 	{
; 1088 : 		MixType = CHAOS_TYPE_UPGRADE_13;

  003c9	8d 71 16	 lea	 esi, DWORD PTR [ecx+22]

; 1089 : 		lpObj->ChaosMoney = 8000000;

  003cc	c7 83 18 12 00
	00 00 12 7a 00	 mov	 DWORD PTR [ebx+4632], 8000000 ; 007a1200H

; 1090 : 		ExtraBlessGemCount = BlessGemCount - 4;
; 1091 : 		ExtraSoulGemCount = SoulGemCount - 4;

  003d6	e9 a3 00 00 00	 jmp	 $LN121@PlusItemLe
$LN122@PlusItemLe:

; 1085 : 	}
; 1086 : 	else if ( Plus12ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 4 && SoulGemCount == 4 && Plus9ItemCount == 0 && Plus10ItemCount == 0 && Plus11ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  003db	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _Plus13ItemCount$[ebp]
$LN123@PlusItemLe:

; 1092 : 	}
; 1093 : 	else if ( Plus13ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 5 && SoulGemCount == 5 && Plus9ItemCount == 0 && Plus10ItemCount == 0 && Plus11ItemCount == 0 && Plus12ItemCount == 0 && Plus14ItemCount == 0)

  003e1	83 f8 01	 cmp	 eax, 1
  003e4	75 49		 jne	 SHORT $LN119@PlusItemLe
  003e6	39 85 e8 fe ff
	ff		 cmp	 DWORD PTR _ChaosGemCount$[ebp], eax
  003ec	75 41		 jne	 SHORT $LN119@PlusItemLe
  003ee	83 bd e4 fe ff
	ff 05		 cmp	 DWORD PTR _BlessGemCount$[ebp], 5
  003f5	75 38		 jne	 SHORT $LN119@PlusItemLe
  003f7	83 bd ec fe ff
	ff 05		 cmp	 DWORD PTR _SoulGemCount$[ebp], 5
  003fe	75 2f		 jne	 SHORT $LN119@PlusItemLe
  00400	39 b5 d4 fe ff
	ff		 cmp	 DWORD PTR _Plus9ItemCount$[ebp], esi
  00406	75 27		 jne	 SHORT $LN119@PlusItemLe
  00408	39 b5 f8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$[ebp], esi
  0040e	75 1f		 jne	 SHORT $LN119@PlusItemLe
  00410	85 d2		 test	 edx, edx
  00412	75 1b		 jne	 SHORT $LN119@PlusItemLe
  00414	85 c9		 test	 ecx, ecx
  00416	75 17		 jne	 SHORT $LN119@PlusItemLe
  00418	39 b5 f4 fe ff
	ff		 cmp	 DWORD PTR _Plus14ItemCount$[ebp], esi
  0041e	75 0f		 jne	 SHORT $LN119@PlusItemLe

; 1094 : 	{
; 1095 : 		MixType = CHAOS_TYPE_UPGRADE_14;

  00420	8d 70 30	 lea	 esi, DWORD PTR [eax+48]

; 1096 : 		lpObj->ChaosMoney = 10000000;

  00423	c7 83 18 12 00
	00 80 96 98 00	 mov	 DWORD PTR [ebx+4632], 10000000 ; 00989680H

; 1097 : 		ExtraBlessGemCount = BlessGemCount - 5;
; 1098 : 		ExtraSoulGemCount = SoulGemCount - 5;

  0042d	eb 4f		 jmp	 SHORT $LN121@PlusItemLe
$LN119@PlusItemLe:

; 1099 : 	}
; 1100 : 	else if ( Plus14ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 6 && SoulGemCount == 6 && Plus9ItemCount == 0 && Plus10ItemCount == 0 && Plus11ItemCount == 0 && Plus12ItemCount == 0 && Plus13ItemCount == 0)

  0042f	83 bd f4 fe ff
	ff 01		 cmp	 DWORD PTR _Plus14ItemCount$[ebp], 1
  00436	75 46		 jne	 SHORT $LN121@PlusItemLe
  00438	83 bd e8 fe ff
	ff 01		 cmp	 DWORD PTR _ChaosGemCount$[ebp], 1
  0043f	75 3d		 jne	 SHORT $LN121@PlusItemLe
  00441	83 bd e4 fe ff
	ff 06		 cmp	 DWORD PTR _BlessGemCount$[ebp], 6
  00448	75 34		 jne	 SHORT $LN121@PlusItemLe
  0044a	83 bd ec fe ff
	ff 06		 cmp	 DWORD PTR _SoulGemCount$[ebp], 6
  00451	75 2b		 jne	 SHORT $LN121@PlusItemLe
  00453	39 b5 d4 fe ff
	ff		 cmp	 DWORD PTR _Plus9ItemCount$[ebp], esi
  00459	75 23		 jne	 SHORT $LN121@PlusItemLe
  0045b	39 b5 f8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$[ebp], esi
  00461	75 1b		 jne	 SHORT $LN121@PlusItemLe
  00463	85 d2		 test	 edx, edx
  00465	75 17		 jne	 SHORT $LN121@PlusItemLe
  00467	85 c9		 test	 ecx, ecx
  00469	75 13		 jne	 SHORT $LN121@PlusItemLe
  0046b	85 c0		 test	 eax, eax
  0046d	75 0f		 jne	 SHORT $LN121@PlusItemLe

; 1101 : 	{
; 1102 : 		MixType = CHAOS_TYPE_UPGRADE_15;

  0046f	be 32 00 00 00	 mov	 esi, 50			; 00000032H

; 1103 : 		lpObj->ChaosMoney = 12000000;

  00474	c7 83 18 12 00
	00 00 1b b7 00	 mov	 DWORD PTR [ebx+4632], 12000000 ; 00b71b00H
$LN121@PlusItemLe:

; 1104 : 		ExtraBlessGemCount = BlessGemCount - 6;
; 1105 : 		ExtraSoulGemCount = SoulGemCount - 6;
; 1106 : 	}
; 1107 : 
; 1108 : 	if ( MixType != mixType )

  0047e	3b 75 0c	 cmp	 esi, DWORD PTR _mixType$[ebp]

; 1109 : 	{
; 1110 : 		MixType = 0;
; 1111 : 	}
; 1112 : 
; 1113 : 	if ( MixType == 0 )

  00481	0f 85 a6 fd ff
	ff		 jne	 $LN132@PlusItemLe
  00487	85 f6		 test	 esi, esi

; 1114 : 	{
; 1115 : 		return FALSE;

  00489	0f 84 9e fd ff
	ff		 je	 $LN132@PlusItemLe

; 1116 : 	}
; 1117 : 
; 1118 : 	PMSG_CHAOSMIXRESULT pMsg;
; 1119 : 
; 1120 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  0048f	6a 10		 push	 16			; 00000010H
  00491	8d 55 e4	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00494	68 86 00 00 00	 push	 134			; 00000086H
  00499	52		 push	 edx
  0049a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1121 : 	pMsg.Result = CB_ERROR;
; 1122 : 	lpObj->ChaosLock = TRUE;
; 1123 : 	LogPlusItemLevelChaosItem(lpObj, MixType);

  0049f	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  004a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a8	56		 push	 esi
  004a9	53		 push	 ebx
  004aa	c6 45 e7 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  004ae	c7 83 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+4640], 1
  004b8	e8 00 00 00 00	 call	 ?LogPlusItemLevelChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z ; CChaosBox::LogPlusItemLevelChaosItem

; 1124 : 	LogAddTD("[PlusItemLevel] Chaos Mix Start");

  004bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@BGIGBHFB@?$FLPlusItemLevel?$FN?5Chaos?5Mix?5Start?$AA@
  004c2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1125 : 
; 1126 : 	int iChaosTaxMoney = (int)((__int64)lpObj->ChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  004c8	8b 03		 mov	 eax, DWORD PTR [ebx]
  004ca	83 c4 04	 add	 esp, 4
  004cd	50		 push	 eax
  004ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  004d3	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  004d8	f7 ab 18 12 00
	00		 imul	 DWORD PTR [ebx+4632]
  004de	33 f6		 xor	 esi, esi
  004e0	56		 push	 esi
  004e1	6a 64		 push	 100			; 00000064H
  004e3	52		 push	 edx
  004e4	50		 push	 eax
  004e5	e8 00 00 00 00	 call	 __alldiv

; 1127 : 
; 1128 : 	if ( iChaosTaxMoney < 0 )

  004ea	3b c6		 cmp	 eax, esi
  004ec	7d 02		 jge	 SHORT $LN53@PlusItemLe

; 1129 : 	{
; 1130 : 		iChaosTaxMoney = 0;

  004ee	33 c0		 xor	 eax, eax
$LN53@PlusItemLe:

; 1131 : 	}
; 1132 : 
; 1133 : 	lpObj->ChaosMoney += iChaosTaxMoney;

  004f0	01 83 18 12 00
	00		 add	 DWORD PTR [ebx+4632], eax

; 1134 : 
; 1135 : 	if ( lpObj->ChaosMoney < 0 )

  004f6	79 06		 jns	 SHORT $LN52@PlusItemLe

; 1136 : 	{
; 1137 : 		lpObj->ChaosMoney = 0;

  004f8	89 b3 18 12 00
	00		 mov	 DWORD PTR [ebx+4632], esi
$LN52@PlusItemLe:

; 1138 : 	}
; 1139 : 
; 1140 : 	if ( lpObj->Money < lpObj->ChaosMoney )

  004fe	8b 93 18 12 00
	00		 mov	 edx, DWORD PTR [ebx+4632]
  00504	8b 8b cc 00 00
	00		 mov	 ecx, DWORD PTR [ebx+204]
  0050a	3b ca		 cmp	 ecx, edx
  0050c	7d 4b		 jge	 SHORT $LN51@PlusItemLe

; 1141 : 	{
; 1142 : 		LogAddTD("[PlusItemLevel] [%s][%s] CBMix Not Enough Money [%d] need zen [%d]",
; 1143 : 			lpObj->AccountID, lpObj->Name, lpObj->Money, lpObj->ChaosMoney);

  0050e	52		 push	 edx
  0050f	51		 push	 ecx
  00510	8d 4b 5d	 lea	 ecx, DWORD PTR [ebx+93]
  00513	51		 push	 ecx
  00514	8d 53 52	 lea	 edx, DWORD PTR [ebx+82]
  00517	52		 push	 edx
  00518	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@HJNGDDFB@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5N@
  0051d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1144 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 1145 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00523	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00527	8b 13		 mov	 edx, DWORD PTR [ebx]
  00529	50		 push	 eax
  0052a	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0052d	51		 push	 ecx
  0052e	52		 push	 edx
  0052f	c6 45 e7 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00533	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00538	83 c4 20	 add	 esp, 32			; 00000020H

; 1146 : 		lpObj->ChaosLock = FALSE;

  0053b	89 b3 20 12 00
	00		 mov	 DWORD PTR [ebx+4640], esi

; 1147 : 		
; 1148 : 		return TRUE;

  00541	b8 01 00 00 00	 mov	 eax, 1

; 1411 : }

  00546	5f		 pop	 edi
  00547	5e		 pop	 esi
  00548	5b		 pop	 ebx
  00549	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0054c	33 cd		 xor	 ecx, ebp
  0054e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00553	8b e5		 mov	 esp, ebp
  00555	5d		 pop	 ebp
  00556	c2 08 00	 ret	 8
$LN51@PlusItemLe:

; 1149 : 	}
; 1150 : 
; 1151 : 	lpObj->Money -= lpObj->ChaosMoney;

  00559	2b ca		 sub	 ecx, edx
  0055b	89 8b cc 00 00
	00		 mov	 DWORD PTR [ebx+204], ecx

; 1152 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00561	50		 push	 eax
  00562	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00567	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 1153 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  0056c	8b 83 cc 00 00
	00		 mov	 eax, DWORD PTR [ebx+204]
  00572	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00574	50		 push	 eax
  00575	51		 push	 ecx
  00576	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 1154 : 
; 1155 : 	BYTE btRateType = 0;
; 1156 : 
; 1157 : 	if( lpObj->pChaosBox[PlusItemPos].IsExtItem() == TRUE ||
; 1158 : 		lpObj->pChaosBox[PlusItemPos].IsSetItem() == TRUE ||
; 1159 : 		g_kItemSystemFor380.Is380Item(&lpObj->pChaosBox[PlusItemPos]) == TRUE )

  0057b	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _PlusItemPos$[ebp]
  00581	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00587	69 f6 d4 00 00
	00		 imul	 esi, 212		; 000000d4H
  0058d	83 c4 08	 add	 esp, 8
  00590	03 ce		 add	 ecx, esi
  00592	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  00597	83 f8 01	 cmp	 eax, 1
  0059a	74 31		 je	 SHORT $LN49@PlusItemLe
  0059c	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  005a2	03 ce		 add	 ecx, esi
  005a4	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  005a9	83 f8 01	 cmp	 eax, 1
  005ac	74 1f		 je	 SHORT $LN49@PlusItemLe
  005ae	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  005b4	03 d6		 add	 edx, esi
  005b6	52		 push	 edx
  005b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kItemSystemFor380@@3VCItemSystemFor380@@A ; g_kItemSystemFor380
  005bc	e8 00 00 00 00	 call	 ?Is380Item@CItemSystemFor380@@QAEHPBVCItem@@@Z ; CItemSystemFor380::Is380Item

; 1162 : 	}
; 1163 : 	else
; 1164 : 	{
; 1165 : 		btRateType = 1;

  005c1	c6 85 ff fe ff
	ff 01		 mov	 BYTE PTR _btRateType$[ebp], 1
  005c8	83 f8 01	 cmp	 eax, 1
  005cb	75 07		 jne	 SHORT $LN48@PlusItemLe
$LN49@PlusItemLe:

; 1160 : 	{
; 1161 : 		btRateType = 2;

  005cd	c6 85 ff fe ff
	ff 02		 mov	 BYTE PTR _btRateType$[ebp], 2
$LN48@PlusItemLe:

; 1166 : 	}
; 1167 : 
; 1168 : 	if( g_SocketItem.CheckSocketOption(&lpObj->pChaosBox[PlusItemPos]) == TRUE )

  005d4	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  005da	03 c6		 add	 eax, esi
  005dc	50		 push	 eax
  005dd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  005e2	e8 00 00 00 00	 call	 ?CheckSocketOption@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::CheckSocketOption

; 1169 : 	{
; 1170 : 		btRateType = 3;

  005e7	b1 03		 mov	 cl, 3
  005e9	3c 01		 cmp	 al, 1
  005eb	74 06		 je	 SHORT $LN47@PlusItemLe
  005ed	8a 8d ff fe ff
	ff		 mov	 cl, BYTE PTR _btRateType$[ebp]
$LN47@PlusItemLe:

; 1171 : 	}
; 1172 : 
; 1173 : 	if( ( lpObj->pChaosBox[PlusItemPos].m_Type >= ITEMGET(12,0) && lpObj->pChaosBox[PlusItemPos].m_Type <= ITEMGET(12,6) ) ||
; 1174 : 		( lpObj->pChaosBox[PlusItemPos].m_Type >= ITEMGET(12,36) && lpObj->pChaosBox[PlusItemPos].m_Type <= ITEMGET(12,43) ) ||
; 1175 : 		( lpObj->pChaosBox[PlusItemPos].m_Type >= ITEMGET(12,262) && lpObj->pChaosBox[PlusItemPos].m_Type <= ITEMGET(12,267) ) || 
; 1176 : 		( lpObj->pChaosBox[PlusItemPos].m_Type == ITEMGET(13,30) || 
; 1177 : 		  lpObj->pChaosBox[PlusItemPos].m_Type == ITEMGET(12,49) ||
; 1178 : 		  lpObj->pChaosBox[PlusItemPos].m_Type == ITEMGET(12,50) )
; 1179 : #if (CUSTOM_WINGS == 1)
; 1180 : 		|| lpObj->pChaosBox[PlusItemPos].m_Type >= ITEMGET(12,440) && lpObj->pChaosBox[PlusItemPos].m_Type <= ITEMGET(12,445) 
; 1181 : #endif
; 1182 : 		)

  005f3	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  005f9	0f b7 44 32 06	 movzx	 eax, WORD PTR [edx+esi+6]
  005fe	bf 00 18 00 00	 mov	 edi, 6144		; 00001800H
  00603	66 3b c7	 cmp	 ax, di
  00606	7c 0a		 jl	 SHORT $LN44@PlusItemLe
  00608	bf 06 18 00 00	 mov	 edi, 6150		; 00001806H
  0060d	66 3b c7	 cmp	 ax, di
  00610	7e 46		 jle	 SHORT $LN41@PlusItemLe
$LN44@PlusItemLe:
  00612	bf 24 18 00 00	 mov	 edi, 6180		; 00001824H
  00617	66 3b c7	 cmp	 ax, di
  0061a	7c 0a		 jl	 SHORT $LN43@PlusItemLe
  0061c	bf 2b 18 00 00	 mov	 edi, 6187		; 0000182bH
  00621	66 3b c7	 cmp	 ax, di
  00624	7e 32		 jle	 SHORT $LN41@PlusItemLe
$LN43@PlusItemLe:
  00626	bf 06 19 00 00	 mov	 edi, 6406		; 00001906H
  0062b	66 3b c7	 cmp	 ax, di
  0062e	7c 0a		 jl	 SHORT $LN42@PlusItemLe
  00630	bf 0b 19 00 00	 mov	 edi, 6411		; 0000190bH
  00635	66 3b c7	 cmp	 ax, di
  00638	7e 1e		 jle	 SHORT $LN41@PlusItemLe
$LN42@PlusItemLe:
  0063a	bf 1e 1a 00 00	 mov	 edi, 6686		; 00001a1eH
  0063f	66 3b c7	 cmp	 ax, di
  00642	74 14		 je	 SHORT $LN41@PlusItemLe
  00644	bf 31 18 00 00	 mov	 edi, 6193		; 00001831H
  00649	66 3b c7	 cmp	 ax, di
  0064c	74 0a		 je	 SHORT $LN41@PlusItemLe
  0064e	bf 32 18 00 00	 mov	 edi, 6194		; 00001832H
  00653	66 3b c7	 cmp	 ax, di
  00656	75 0d		 jne	 SHORT $LN46@PlusItemLe
$LN41@PlusItemLe:

; 1183 : 	{
; 1184 : 		btRateType = 1;

  00658	c6 85 ff fe ff
	ff 01		 mov	 BYTE PTR _btRateType$[ebp], 1
  0065f	8a 8d ff fe ff
	ff		 mov	 cl, BYTE PTR _btRateType$[ebp]
$LN46@PlusItemLe:

; 1185 : 	}
; 1186 : 
; 1187 : #if (__CUSTOM__ == 1)
; 1188 : 	
; 1189 : 	if( lpObj->pChaosBox[PlusItemPos].m_Level == 9 || lpObj->pChaosBox[PlusItemPos].m_Level == 10 )

  00665	0f b7 44 32 08	 movzx	 eax, WORD PTR [edx+esi+8]
  0066a	66 83 f8 09	 cmp	 ax, 9
  0066e	0f 84 8e 00 00
	00		 je	 $LN39@PlusItemLe
  00674	66 83 f8 0a	 cmp	 ax, 10			; 0000000aH
  00678	0f 84 84 00 00
	00		 je	 $LN39@PlusItemLe

; 1202 : 		}
; 1203 : 	}
; 1204 : 	else if( lpObj->pChaosBox[PlusItemPos].m_Level == 11 || lpObj->pChaosBox[PlusItemPos].m_Level == 12 )

  0067e	66 83 f8 0b	 cmp	 ax, 11			; 0000000bH
  00682	74 4c		 je	 SHORT $LN31@PlusItemLe
  00684	66 83 f8 0c	 cmp	 ax, 12			; 0000000cH
  00688	74 46		 je	 SHORT $LN31@PlusItemLe

; 1219 : 	else if( lpObj->pChaosBox[PlusItemPos].m_Level == 13 || lpObj->pChaosBox[PlusItemPos].m_Level == 14 )

  0068a	66 83 f8 0d	 cmp	 ax, 13			; 0000000dH
  0068e	74 15		 je	 SHORT $LN23@PlusItemLe
  00690	66 83 f8 0e	 cmp	 ax, 14			; 0000000eH
  00694	74 0f		 je	 SHORT $LN23@PlusItemLe

; 1235 : 	{
; 1236 : 		lpObj->ChaosSuccessRate = 45;

  00696	c7 83 1c 12 00
	00 2d 00 00 00	 mov	 DWORD PTR [ebx+4636], 45 ; 0000002dH
  006a0	e9 8c 00 00 00	 jmp	 $LN34@PlusItemLe
$LN23@PlusItemLe:

; 1220 : 	{
; 1221 : 		if( btRateType == 1 )

  006a5	80 f9 01	 cmp	 cl, 1
  006a8	75 07		 jne	 SHORT $LN22@PlusItemLe

; 1222 : 		{
; 1223 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_1_3;

  006aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_1_3@@3HA ; gc_ChaosMixPlusItemLevel_1_3
  006af	eb 7a		 jmp	 SHORT $LN130@PlusItemLe
$LN22@PlusItemLe:

; 1224 : 		}
; 1225 : 		else if( btRateType == 2 )

  006b1	80 f9 02	 cmp	 cl, 2
  006b4	75 0e		 jne	 SHORT $LN20@PlusItemLe

; 1226 : 		{
; 1227 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_2_3;

  006b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gc_ChaosMixPlusItemLevel_2_3@@3HA ; gc_ChaosMixPlusItemLevel_2_3
  006bc	89 8b 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], ecx
  006c2	eb 6d		 jmp	 SHORT $LN34@PlusItemLe
$LN20@PlusItemLe:

; 1228 : 		}
; 1229 : 		else if( btRateType == 3 )

  006c4	80 f9 03	 cmp	 cl, 3
  006c7	75 68		 jne	 SHORT $LN34@PlusItemLe

; 1230 : 		{
; 1231 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_3_3;

  006c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_3_3@@3HA ; gc_ChaosMixPlusItemLevel_3_3

; 1232 : 		}
; 1233 : 	}
; 1234 : 	else

  006ce	eb 5b		 jmp	 SHORT $LN130@PlusItemLe
$LN31@PlusItemLe:

; 1205 : 	{
; 1206 : 		if( btRateType == 1 )

  006d0	80 f9 01	 cmp	 cl, 1
  006d3	75 0e		 jne	 SHORT $LN30@PlusItemLe

; 1207 : 		{
; 1208 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_1_2;

  006d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gc_ChaosMixPlusItemLevel_1_2@@3HA ; gc_ChaosMixPlusItemLevel_1_2
  006db	89 8b 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], ecx
  006e1	eb 4e		 jmp	 SHORT $LN34@PlusItemLe
$LN30@PlusItemLe:

; 1209 : 		}
; 1210 : 		else if( btRateType == 2 )

  006e3	80 f9 02	 cmp	 cl, 2
  006e6	75 07		 jne	 SHORT $LN28@PlusItemLe

; 1211 : 		{
; 1212 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_2_2;

  006e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_2_2@@3HA ; gc_ChaosMixPlusItemLevel_2_2
  006ed	eb 3c		 jmp	 SHORT $LN130@PlusItemLe
$LN28@PlusItemLe:

; 1213 : 		}
; 1214 : 		else if( btRateType == 3 )

  006ef	80 f9 03	 cmp	 cl, 3
  006f2	75 3d		 jne	 SHORT $LN34@PlusItemLe

; 1215 : 		{
; 1216 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_3_2;

  006f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gc_ChaosMixPlusItemLevel_3_2@@3HA ; gc_ChaosMixPlusItemLevel_3_2
  006fa	89 8b 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], ecx

; 1217 : 		}
; 1218 : 	}

  00700	eb 2f		 jmp	 SHORT $LN34@PlusItemLe
$LN39@PlusItemLe:

; 1190 : 	{
; 1191 : 		if( btRateType == 1 )

  00702	80 f9 01	 cmp	 cl, 1
  00705	75 07		 jne	 SHORT $LN38@PlusItemLe

; 1192 : 		{
; 1193 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_1_1;

  00707	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_1_1@@3HA ; gc_ChaosMixPlusItemLevel_1_1
  0070c	eb 1d		 jmp	 SHORT $LN130@PlusItemLe
$LN38@PlusItemLe:

; 1194 : 		}
; 1195 : 		else if( btRateType == 2 )

  0070e	80 f9 02	 cmp	 cl, 2
  00711	75 0e		 jne	 SHORT $LN36@PlusItemLe

; 1196 : 		{
; 1197 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_2_1;

  00713	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gc_ChaosMixPlusItemLevel_2_1@@3HA ; gc_ChaosMixPlusItemLevel_2_1
  00719	89 8b 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], ecx
  0071f	eb 10		 jmp	 SHORT $LN34@PlusItemLe
$LN36@PlusItemLe:

; 1198 : 		}
; 1199 : 		else if( btRateType == 3 )

  00721	80 f9 03	 cmp	 cl, 3
  00724	75 0b		 jne	 SHORT $LN34@PlusItemLe

; 1200 : 		{
; 1201 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_3_1;

  00726	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_3_1@@3HA ; gc_ChaosMixPlusItemLevel_3_1
$LN130@PlusItemLe:
  0072b	89 83 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], eax
$LN34@PlusItemLe:

; 1237 : 	}
; 1238 : 
; 1239 : 	if( lpObj->pChaosBox[PlusItemPos].m_Option2 )

  00731	80 bc 32 91 00
	00 00 00	 cmp	 BYTE PTR [edx+esi+145], 0
  00739	74 0c		 je	 SHORT $LN16@PlusItemLe

; 1240 : 	{
; 1241 : 		lpObj->ChaosSuccessRate += gc_ChaosMixPlusItemLevel_Luck;

  0073b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gc_ChaosMixPlusItemLevel_Luck@@3HA ; gc_ChaosMixPlusItemLevel_Luck
  00741	01 8b 1c 12 00
	00		 add	 DWORD PTR [ebx+4636], ecx
$LN16@PlusItemLe:

; 1242 : 	}
; 1243 : 
; 1244 : 	if( lpObj->ChaosSuccessRate > gc_ChaosMixPlusItemLevel_Max )

  00747	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_Max@@3HA ; gc_ChaosMixPlusItemLevel_Max
  0074c	39 83 1c 12 00
	00		 cmp	 DWORD PTR [ebx+4636], eax
  00752	7e 06		 jle	 SHORT $LN15@PlusItemLe

; 1245 : 	{
; 1246 : 		lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_Max;

  00754	89 83 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], eax
$LN15@PlusItemLe:

; 1247 : 	}
; 1248 : 
; 1249 : #else
; 1250 : 	
; 1251 : 	if( lpObj->pChaosBox[PlusItemPos].m_Level == 9 || lpObj->pChaosBox[PlusItemPos].m_Level == 10 )
; 1252 : 	{
; 1253 : 		if( btRateType == 1 )
; 1254 : 		{
; 1255 : 			lpObj->ChaosSuccessRate = 60;
; 1256 : 		}
; 1257 : 		else if( btRateType == 2 )
; 1258 : 		{
; 1259 : 			lpObj->ChaosSuccessRate = 50;
; 1260 : 		}
; 1261 : 		else if( btRateType == 3 )
; 1262 : 		{
; 1263 : 			lpObj->ChaosSuccessRate = 40;
; 1264 : 		}
; 1265 : 	}
; 1266 : 	else if( lpObj->pChaosBox[PlusItemPos].m_Level == 11 || lpObj->pChaosBox[PlusItemPos].m_Level == 12 )
; 1267 : 	{
; 1268 : 		if( btRateType == 1 )
; 1269 : 		{
; 1270 : 			lpObj->ChaosSuccessRate = 55;
; 1271 : 		}
; 1272 : 		else if( btRateType == 2 )
; 1273 : 		{
; 1274 : 			lpObj->ChaosSuccessRate = 45;
; 1275 : 		}
; 1276 : 		else if( btRateType == 3 )
; 1277 : 		{
; 1278 : 			lpObj->ChaosSuccessRate = 35;
; 1279 : 		}
; 1280 : 	}
; 1281 : 	else if( lpObj->pChaosBox[PlusItemPos].m_Level == 13 || lpObj->pChaosBox[PlusItemPos].m_Level == 14 )
; 1282 : 	{
; 1283 : 		if( btRateType == 1 )
; 1284 : 		{
; 1285 : 			lpObj->ChaosSuccessRate = 20;
; 1286 : 		}
; 1287 : 		else if( btRateType == 2 )
; 1288 : 		{
; 1289 : 			lpObj->ChaosSuccessRate = 10;
; 1290 : 		}
; 1291 : 		else if( btRateType == 3 )
; 1292 : 		{
; 1293 : 			lpObj->ChaosSuccessRate = 5;
; 1294 : 		}
; 1295 : 	}
; 1296 : 	else
; 1297 : 	{
; 1298 : 		lpObj->ChaosSuccessRate = 45;
; 1299 : 	}
; 1300 : 
; 1301 : 	if( lpObj->pChaosBox[PlusItemPos].m_Option2 )
; 1302 : 	{
; 1303 : 		lpObj->ChaosSuccessRate += 20;
; 1304 : 	}
; 1305 : 
; 1306 : 	if( lpObj->ChaosSuccessRate > 75 )
; 1307 : 	{
; 1308 : 		lpObj->ChaosSuccessRate = 75;
; 1309 : 	}
; 1310 : 
; 1311 : #endif
; 1312 : 
; 1313 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  0075a	8b bd d0 fe ff
	ff		 mov	 edi, DWORD PTR _iCharmOfLuckCount$[ebp]
  00760	01 bb 1c 12 00
	00		 add	 DWORD PTR [ebx+4636], edi

; 1314 : 
; 1315 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00766	e8 00 00 00 00	 call	 _rand
  0076b	99		 cdq
  0076c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00771	f7 f9		 idiv	 ecx
  00773	3b 93 1c 12 00
	00		 cmp	 edx, DWORD PTR [ebx+4636]
  00779	0f 8d 48 02 00
	00		 jge	 $LN14@PlusItemLe

; 1316 : 	{
; 1317 : 		lpObj->pChaosBox[PlusItemPos].m_Level++;

  0077f	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  00785	66 ff 44 16 08	 inc	 WORD PTR [esi+edx+8]
  0078a	8d 44 16 08	 lea	 eax, DWORD PTR [esi+edx+8]

; 1318 : 		pMsg.Result = CB_SUCCESS;
; 1319 : 
; 1320 : 		CItem Item;

  0078e	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _Item$190420[ebp]
  00794	c6 45 e7 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1
  00798	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 1321 : 
; 1322 : 		float Dur = (float)ItemGetDurability(lpObj->pChaosBox[PlusItemPos].m_Type, lpObj->pChaosBox[PlusItemPos].m_Level,
; 1323 : 			lpObj->pChaosBox[PlusItemPos].IsExtItem(), lpObj->pChaosBox[PlusItemPos].IsSetItem());

  0079d	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  007a3	8b c8		 mov	 ecx, eax
  007a5	03 ce		 add	 ecx, esi
  007a7	8d 3c 06	 lea	 edi, DWORD PTR [esi+eax]
  007aa	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  007af	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  007b5	50		 push	 eax
  007b6	03 ce		 add	 ecx, esi
  007b8	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  007bd	0f bf 4f 08	 movsx	 ecx, WORD PTR [edi+8]
  007c1	0f bf 57 06	 movsx	 edx, WORD PTR [edi+6]
  007c5	50		 push	 eax
  007c6	51		 push	 ecx
  007c7	52		 push	 edx
  007c8	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability
  007cd	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv1564[ebp], eax

; 1324 : 
; 1325 : 		Item.m_Level = lpObj->pChaosBox[PlusItemPos].m_Level;

  007d3	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  007d9	66 8b 4c 30 08	 mov	 cx, WORD PTR [eax+esi+8]
  007de	db 85 f0 fe ff
	ff		 fild	 DWORD PTR tv1564[ebp]
  007e4	03 c6		 add	 eax, esi
  007e6	66 89 8d 08 ff
	ff ff		 mov	 WORD PTR _Item$190420[ebp+8], cx
  007ed	d9 9d f0 fe ff
	ff		 fstp	 DWORD PTR _Dur$190421[ebp]
  007f3	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		Item.m_Durability = Dur * lpObj->pChaosBox[PlusItemPos].m_Durability / lpObj->pChaosBox[PlusItemPos].m_BaseDurability;

  007f6	d9 40 24	 fld	 DWORD PTR [eax+36]
  007f9	d8 8d f0 fe ff
	ff		 fmul	 DWORD PTR _Dur$190421[ebp]
  007ff	d8 70 2c	 fdiv	 DWORD PTR [eax+44]
  00802	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _Item$190420[ebp+36]

; 1327 : 		Item.m_JewelOfHarmonyOption = lpObj->pChaosBox[PlusItemPos].m_JewelOfHarmonyOption;

  00808	8a 90 c0 00 00
	00		 mov	 dl, BYTE PTR [eax+192]
  0080e	88 55 c0	 mov	 BYTE PTR _Item$190420[ebp+192], dl

; 1328 : 		Item.m_bLOCKED = lpObj->pChaosBox[PlusItemPos].m_bLOCKED;

  00811	8a 88 d1 00 00
	00		 mov	 cl, BYTE PTR [eax+209]
  00817	88 4d d1	 mov	 BYTE PTR _Item$190420[ebp+209], cl

; 1329 : 
; 1330 : 		BYTE SocketOptions[MAX_SOCKET_COUNT];
; 1331 : 		BYTE SocketBonus;
; 1332 : 
; 1333 : 		if( g_SocketItem.IsSocketItem(lpObj->pChaosBox[PlusItemPos].m_Type) )

  0081a	0f bf 50 06	 movsx	 edx, WORD PTR [eax+6]
  0081e	52		 push	 edx
  0081f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00824	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  00829	84 c0		 test	 al, al
  0082b	74 20		 je	 SHORT $LN13@PlusItemLe

; 1334 : 		{
; 1335 : 			g_SocketItem.GetItemOptions(&lpObj->pChaosBox[PlusItemPos],&SocketOptions[0],&SocketBonus);

  0082d	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  00833	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _SocketBonus$190424[ebp]
  00839	50		 push	 eax
  0083a	8d 4d f4	 lea	 ecx, DWORD PTR _SocketOptions$190423[ebp]
  0083d	51		 push	 ecx
  0083e	03 d6		 add	 edx, esi
  00840	52		 push	 edx
  00841	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00846	e8 00 00 00 00	 call	 ?GetItemOptions@CSocketItems@@QAEXPAVCItem@@PAE1@Z ; CSocketItems::GetItemOptions
  0084b	eb 65		 jmp	 SHORT $LN102@PlusItemLe
$LN13@PlusItemLe:

; 1336 : 		}
; 1337 : 		else if( g_ElementalSystem.IsPentagram(lpObj->pChaosBox[PlusItemPos].m_Type) )

  0084d	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00853	0f bf 4c 06 06	 movsx	 ecx, WORD PTR [esi+eax+6]
  00858	51		 push	 ecx
  00859	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ElementalSystem@@3VCElementalSystem@@A ; g_ElementalSystem
  0085e	e8 00 00 00 00	 call	 ?IsPentagram@CElementalSystem@@QAEHH@Z ; CElementalSystem::IsPentagram
  00863	85 c0		 test	 eax, eax
  00865	74 4b		 je	 SHORT $LN102@PlusItemLe

; 1338 : 		{
; 1339 : 			SocketBonus = lpObj->pChaosBox[PlusItemPos].m_SocketBonus;

  00867	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  0086d	8a 84 16 c7 00
	00 00		 mov	 al, BYTE PTR [esi+edx+199]
  00874	88 85 cc fe ff
	ff		 mov	 BYTE PTR _SocketBonus$190424[ebp], al

; 1340 : 			for(int i = 0; i < 5; i++)	{
; 1341 : 				SocketOptions[i] = lpObj->pChaosBox[PlusItemPos].m_SocketOption[i];

  0087a	8b ca		 mov	 ecx, edx
  0087c	0f b6 94 0e c8
	00 00 00	 movzx	 edx, BYTE PTR [esi+ecx+200]
  00884	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00887	88 55 f4	 mov	 BYTE PTR _SocketOptions$190423[ebp], dl
  0088a	0f b6 88 c9 00
	00 00		 movzx	 ecx, BYTE PTR [eax+201]
  00891	88 4d f5	 mov	 BYTE PTR _SocketOptions$190423[ebp+1], cl
  00894	0f b6 90 ca 00
	00 00		 movzx	 edx, BYTE PTR [eax+202]
  0089b	88 55 f6	 mov	 BYTE PTR _SocketOptions$190423[ebp+2], dl
  0089e	0f b6 88 cb 00
	00 00		 movzx	 ecx, BYTE PTR [eax+203]
  008a5	88 4d f7	 mov	 BYTE PTR _SocketOptions$190423[ebp+3], cl
  008a8	0f b6 90 cc 00
	00 00		 movzx	 edx, BYTE PTR [eax+204]
  008af	88 55 f8	 mov	 BYTE PTR _SocketOptions$190423[ebp+4], dl
$LN102@PlusItemLe:

; 1342 : 			}
; 1343 : 		}
; 1344 : 
; 1345 : 		Item.Convert(lpObj->pChaosBox[PlusItemPos].m_Type, lpObj->pChaosBox[PlusItemPos].m_Option1, lpObj->pChaosBox[PlusItemPos].m_Option2,
; 1346 : 			lpObj->pChaosBox[PlusItemPos].m_Option3, lpObj->pChaosBox[PlusItemPos].m_NewOption, 
; 1347 : 			lpObj->pChaosBox[PlusItemPos].m_SetOption, lpObj->pChaosBox[PlusItemPos].m_ItemOptionEx, SocketOptions, SocketBonus, CURRENT_DB_VERSION);

  008b2	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  008b8	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _SocketBonus$190424[ebp]
  008be	6a 03		 push	 3
  008c0	51		 push	 ecx
  008c1	0f b6 8c 30 c6
	00 00 00	 movzx	 ecx, BYTE PTR [eax+esi+198]
  008c9	03 c6		 add	 eax, esi
  008cb	8d 55 f4	 lea	 edx, DWORD PTR _SocketOptions$190423[ebp]
  008ce	52		 push	 edx
  008cf	0f b6 90 aa 00
	00 00		 movzx	 edx, BYTE PTR [eax+170]
  008d6	51		 push	 ecx
  008d7	0f b6 88 93 00
	00 00		 movzx	 ecx, BYTE PTR [eax+147]
  008de	52		 push	 edx
  008df	0f b6 90 92 00
	00 00		 movzx	 edx, BYTE PTR [eax+146]
  008e6	51		 push	 ecx
  008e7	0f b6 88 91 00
	00 00		 movzx	 ecx, BYTE PTR [eax+145]
  008ee	52		 push	 edx
  008ef	0f b6 90 90 00
	00 00		 movzx	 edx, BYTE PTR [eax+144]
  008f6	0f bf 40 06	 movsx	 eax, WORD PTR [eax+6]
  008fa	51		 push	 ecx
  008fb	52		 push	 edx
  008fc	50		 push	 eax
  008fd	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _Item$190420[ebp]
  00903	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 1348 : 
; 1349 : 		Item.m_Number = lpObj->pChaosBox[PlusItemPos].m_Number;

  00908	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  0090e	8b 14 0e	 mov	 edx, DWORD PTR [esi+ecx]

; 1350 : 
; 1351 : 		ItemByteConvert(pMsg.ItemInfo, Item);

  00911	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00917	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp+4]
  0091a	8b fc		 mov	 edi, esp
  0091c	89 95 00 ff ff
	ff		 mov	 DWORD PTR _Item$190420[ebp], edx
  00922	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00927	8d b5 00 ff ff
	ff		 lea	 esi, DWORD PTR _Item$190420[ebp]
  0092d	50		 push	 eax
  0092e	f3 a5		 rep movsd
  00930	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert

; 1352 : 		ChaosBoxInit(lpObj);

  00935	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0093b	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00941	53		 push	 ebx
  00942	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 1353 : 		::gObjChaosBoxInsertItemPos(lpObj->m_Index, Item, 0, -1);

  00947	6a ff		 push	 -1
  00949	6a 00		 push	 0
  0094b	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00951	8b fc		 mov	 edi, esp
  00953	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00958	8d b5 00 ff ff
	ff		 lea	 esi, DWORD PTR _Item$190420[ebp]
  0095e	f3 a5		 rep movsd
  00960	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00962	51		 push	 ecx
  00963	e8 00 00 00 00	 call	 ?gObjChaosBoxInsertItemPos@@YAEHVCItem@@HH@Z ; gObjChaosBoxInsertItemPos

; 1354 : 		gObjChaosItemSet(lpObj->m_Index, 0, 1);

  00968	8b 13		 mov	 edx, DWORD PTR [ebx]
  0096a	6a 01		 push	 1
  0096c	6a 00		 push	 0
  0096e	52		 push	 edx
  0096f	e8 00 00 00 00	 call	 ?gObjChaosItemSet@@YAXHHE@Z ; gObjChaosItemSet

; 1355 : 
; 1356 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00974	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00978	8b 13		 mov	 edx, DWORD PTR [ebx]
  0097a	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00980	50		 push	 eax
  00981	8d 4d e4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00984	51		 push	 ecx
  00985	52		 push	 edx
  00986	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1357 : 
; 1358 : 		if ( btItemLuckValue )
; 1359 : 		{
; 1360 : 			LogAddTD("[PlusItemLevel] [%s][%s] CBMix Success %d Money : %d-%d [%d], CharmRate : %d",
; 1361 : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate+5, lpObj->Money,
; 1362 : 				lpObj->ChaosMoney, Item.m_Level, iCharmOfLuckCount);
; 1363 : 		}
; 1364 : 		else
; 1365 : 		{
; 1366 : 			LogAddTD("[PlusItemLevel] [%s][%s] CBMix Success %d Money : %d-%d [%d], CharmRate : %d",
; 1367 : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money,
; 1368 : 				lpObj->ChaosMoney, Item.m_Level, iCharmOfLuckCount);

  0098b	0f bf 8d 08 ff
	ff ff		 movsx	 ecx, WORD PTR _Item$190420[ebp+8]
  00992	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _iCharmOfLuckCount$[ebp]
  00998	8b 93 18 12 00
	00		 mov	 edx, DWORD PTR [ebx+4632]
  0099e	50		 push	 eax
  0099f	8b 83 cc 00 00
	00		 mov	 eax, DWORD PTR [ebx+204]
  009a5	51		 push	 ecx
  009a6	8b 8b 1c 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4636]
  009ac	52		 push	 edx
  009ad	50		 push	 eax
  009ae	51		 push	 ecx
  009af	8d 53 5d	 lea	 edx, DWORD PTR [ebx+93]
  009b2	52		 push	 edx
  009b3	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  009b6	50		 push	 eax
  009b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@NDGFLPHI@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
  009bc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  009c2	83 c4 2c	 add	 esp, 44			; 0000002cH

; 1369 : 		}
; 1370 : 
; 1371 : #if( __4GAMERS__ == 1 )
; 1372 : 		g_Achievements.GD_UpdateMixData(lpObj, true);
; 1373 : #endif
; 1374 : 	}
; 1375 : 	else

  009c5	eb 71		 jmp	 SHORT $LN1@PlusItemLe
$LN14@PlusItemLe:

; 1376 : 	{
; 1377 : #if( __4GAMERS__ == 1 )
; 1378 : 		g_Achievements.GD_UpdateMixData(lpObj, false);
; 1379 : #endif
; 1380 : 		int FailLevel = lpObj->pChaosBox[PlusItemPos].m_Level+1;

  009c7	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  009cd	0f bf 74 0e 08	 movsx	 esi, WORD PTR [esi+ecx+8]

; 1381 : 
; 1382 : 		if( iChristmasItem != 0 )
; 1383 : 		{
; 1384 : 			ChaosBoxSpecialItemDown(lpObj);

  009d2	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  009d8	46		 inc	 esi
  009d9	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _iChristmasItem$[ebp], 0
  009e0	53		 push	 ebx
  009e1	74 07		 je	 SHORT $LN4@PlusItemLe
  009e3	e8 00 00 00 00	 call	 ?ChaosBoxSpecialItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxSpecialItemDown

; 1385 : 			GCUserChaosBoxSend(lpObj, 0);
; 1386 : 			DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 1387 : 		}
; 1388 : 		else

  009e8	eb 05		 jmp	 SHORT $LN131@PlusItemLe
$LN4@PlusItemLe:

; 1389 : 		{
; 1390 : 			ChaosBoxInit(lpObj);

  009ea	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit
$LN131@PlusItemLe:

; 1391 : 			GCUserChaosBoxSend(lpObj, 0);

  009ef	6a 00		 push	 0
  009f1	53		 push	 ebx
  009f2	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 1392 : 			DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  009f7	0f b6 55 e5	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  009fb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  009fd	52		 push	 edx
  009fe	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00a01	50		 push	 eax
  00a02	51		 push	 ecx
  00a03	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1393 : 		}
; 1394 : 
; 1395 : 		if ( btItemLuckValue )
; 1396 : 		{
; 1397 : 			LogAddTD("[PlusItemLevel] [%s][%s] CBMix Fail %d Money : %d-%d [%d], CharmRate : %d",
; 1398 : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate+5, lpObj->Money,
; 1399 : 				lpObj->ChaosMoney, FailLevel, iCharmOfLuckCount);
; 1400 : 		}
; 1401 : 		else
; 1402 : 		{
; 1403 : 			LogAddTD("[PlusItemLevel] [%s][%s] CBMix Fail %d Money : %d-%d [%d], CharmRate : %d",
; 1404 : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money,
; 1405 : 				lpObj->ChaosMoney, FailLevel, iCharmOfLuckCount);

  00a08	8b 93 18 12 00
	00		 mov	 edx, DWORD PTR [ebx+4632]
  00a0e	8b 83 cc 00 00
	00		 mov	 eax, DWORD PTR [ebx+204]
  00a14	8b 8b 1c 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4636]
  00a1a	83 c4 14	 add	 esp, 20			; 00000014H
  00a1d	57		 push	 edi
  00a1e	56		 push	 esi
  00a1f	52		 push	 edx
  00a20	50		 push	 eax
  00a21	51		 push	 ecx
  00a22	8d 53 5d	 lea	 edx, DWORD PTR [ebx+93]
  00a25	52		 push	 edx
  00a26	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00a29	50		 push	 eax
  00a2a	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@JJBHLEGP@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
  00a2f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00a35	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@PlusItemLe:

; 1406 : 		}
; 1407 : 	}
; 1408 : 
; 1409 : 	lpObj->ChaosLock = FALSE;
; 1410 : return true;

  00a38	b8 01 00 00 00	 mov	 eax, 1
$LN129@PlusItemLe:

; 1411 : }

  00a3d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a40	5f		 pop	 edi
  00a41	5e		 pop	 esi
  00a42	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  00a4c	33 cd		 xor	 ecx, ebp
  00a4e	5b		 pop	 ebx
  00a4f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a54	8b e5		 mov	 esp, ebp
  00a56	5d		 pop	 ebp
  00a57	c2 08 00	 ret	 8
?PlusItemLevelChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CChaosBox::PlusItemLevelChaosMix
_TEXT	ENDS
PUBLIC	??_C@_0EP@LDCANMLN@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0FC@NNBKAMKF@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0CK@EPOMFGLB@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5@ ; `string'
PUBLIC	??_C@_0BE@NEOLPNCO@ThirdWingLevel1_Mix?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CondorFeather_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::CondorFeather_Mix
EXTRN	?gc_ChaosMixCondor_Max@@3HA:DWORD		; gc_ChaosMixCondor_Max
EXTRN	?gc_ChaosMixCondor_Div@@3HA:DWORD		; gc_ChaosMixCondor_Div
;	COMDAT ??_C@_0EP@LDCANMLN@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0EP@LDCANMLN@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'ThirdWing Mix][Level 01] [%s][%s] CBMix Fail %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@NNBKAMKF@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0FC@NNBKAMKF@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'ThirdWing Mix][Level 01] [%s][%s] CBMix Success %d Money : %d'
	DB	'-%d, CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EPOMFGLB@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5@
CONST	SEGMENT
??_C@_0CK@EPOMFGLB@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5@ DB '['
	DB	'ThirdWing Mix][Level 01] Chaos Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NEOLPNCO@ThirdWingLevel1_Mix?$AA@
CONST	SEGMENT
??_C@_0BE@NEOLPNCO@ThirdWingLevel1_Mix?$AA@ DB 'ThirdWingLevel1_Mix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CondorFeather_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv500 = -56						; size = 4
_iWingCount$ = -52					; size = 4
_iSetItemCount$ = -48					; size = 4
_iCreationCount$ = -44					; size = 4
_iItemValue$ = -40					; size = 4
_iChaosCount$ = -36					; size = 4
_iOtherItemCount$ = -32					; size = 4
_iSoulPackCount$ = -28					; size = 4
_iCharmOfLuckCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?CondorFeather_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::CondorFeather_Mix, COMDAT
; _this$ = ecx

; 4344 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi

; 4345 : 	lpObj->ChaosLock = TRUE;
; 4346 : 
; 4347 : 	int iWingCount = 0;

  00016	33 ff		 xor	 edi, edi

; 4348 : 	int iSetItemCount = 0;
; 4349 : 	int iChaosCount = 0;
; 4350 : 	int iSoulPackCount = 0;
; 4351 : 	int iCreationCount = 0;
; 4352 : 	int iOtherItemCount = 0;
; 4353 : 	int iItemValue = 0;
; 4354 : 	int iNeedChaosMoney = 0;
; 4355 : 	int iCharmOfLuckCount = 0;
; 4356 : 
; 4357 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4358 : 
; 4359 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	8b d9		 mov	 ebx, ecx
  00025	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0002f	89 7d cc	 mov	 DWORD PTR _iWingCount$[ebp], edi
  00032	89 7d d0	 mov	 DWORD PTR _iSetItemCount$[ebp], edi
  00035	89 7d dc	 mov	 DWORD PTR _iChaosCount$[ebp], edi
  00038	89 7d e4	 mov	 DWORD PTR _iSoulPackCount$[ebp], edi
  0003b	89 7d d4	 mov	 DWORD PTR _iCreationCount$[ebp], edi
  0003e	89 7d e0	 mov	 DWORD PTR _iOtherItemCount$[ebp], edi
  00041	89 7d d8	 mov	 DWORD PTR _iItemValue$[ebp], edi
  00044	89 7d e8	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], edi
  00047	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4360 : 	pMsg.Result = CB_ERROR;

  0004f	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 4363 : 	{
; 4364 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00053	89 7d c8	 mov	 DWORD PTR tv500[ebp], edi
  00056	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL28@CondorFeat:
  00060	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00066	03 cf		 add	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	83 f8 01	 cmp	 eax, 1
  00070	0f 85 96 00 00
	00		 jne	 $LN27@CondorFeat

; 4365 : 		{
; 4366 : 			//Item* lpItem,short iLevel,BYTE iOption1,BYTE iOption2,BYTE iOption3,BYTE iSetOption,BYTE iExcOption)
; 4367 : 			if( Is2ndLevelWing(lpObj->pChaosBox[n].m_Type) && CheckItemOptions(&lpObj->pChaosBox[n],9,0,0,1,0,0) )

  00076	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  0007c	0f b7 44 3a 06	 movzx	 eax, WORD PTR [edx+edi+6]
  00081	03 d7		 add	 edx, edi
  00083	0f bf f8	 movsx	 edi, ax
  00086	57		 push	 edi
  00087	8b cb		 mov	 ecx, ebx
  00089	e8 00 00 00 00	 call	 ?Is2ndLevelWing@CChaosBox@@QAEHH@Z ; CChaosBox::Is2ndLevelWing
  0008e	85 c0		 test	 eax, eax
  00090	74 1b		 je	 SHORT $LN24@CondorFeat
  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	6a 01		 push	 1
  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
  0009c	6a 09		 push	 9
  0009e	52		 push	 edx
  0009f	e8 00 00 00 00	 call	 ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions
  000a4	85 c0		 test	 eax, eax
  000a6	74 05		 je	 SHORT $LN24@CondorFeat

; 4368 : 			{
; 4369 : 				iWingCount++;

  000a8	ff 45 cc	 inc	 DWORD PTR _iWingCount$[ebp]
  000ab	eb 5f		 jmp	 SHORT $LN27@CondorFeat
$LN24@CondorFeat:

; 4370 : 			}
; 4371 : 			else if( CheckItemOptions(&lpObj->pChaosBox[n],7,0,0,1,1,0)  )

  000ad	6a 00		 push	 0
  000af	6a 01		 push	 1
  000b1	6a 01		 push	 1
  000b3	6a 00		 push	 0
  000b5	6a 00		 push	 0
  000b7	6a 07		 push	 7
  000b9	52		 push	 edx
  000ba	8b cb		 mov	 ecx, ebx
  000bc	e8 00 00 00 00	 call	 ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions
  000c1	85 c0		 test	 eax, eax
  000c3	74 0b		 je	 SHORT $LN22@CondorFeat

; 4372 : 			{
; 4373 : 				iSetItemCount++;
; 4374 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  000c5	8b 52 78	 mov	 edx, DWORD PTR [edx+120]
  000c8	ff 45 d0	 inc	 DWORD PTR _iSetItemCount$[ebp]
  000cb	01 55 d8	 add	 DWORD PTR _iItemValue$[ebp], edx
  000ce	eb 3c		 jmp	 SHORT $LN27@CondorFeat
$LN22@CondorFeat:

; 4375 : 			}
; 4376 : 			else if( lpObj->pChaosBox[n].m_Type == iChaosJewel )

  000d0	3b 7b 04	 cmp	 edi, DWORD PTR [ebx+4]
  000d3	75 05		 jne	 SHORT $LN20@CondorFeat

; 4377 : 			{
; 4378 : 				iChaosCount++;

  000d5	ff 45 dc	 inc	 DWORD PTR _iChaosCount$[ebp]
  000d8	eb 32		 jmp	 SHORT $LN27@CondorFeat
$LN20@CondorFeat:

; 4379 : 			}
; 4380 : 			else if( lpObj->pChaosBox[n].m_Type == iSoulPack )

  000da	3b 7b 18	 cmp	 edi, DWORD PTR [ebx+24]
  000dd	75 05		 jne	 SHORT $LN18@CondorFeat

; 4381 : 			{
; 4382 : 				iSoulPackCount++;

  000df	ff 45 e4	 inc	 DWORD PTR _iSoulPackCount$[ebp]
  000e2	eb 28		 jmp	 SHORT $LN27@CondorFeat
$LN18@CondorFeat:

; 4383 : 			}
; 4384 : 			else if( lpObj->pChaosBox[n].m_Type == iCreationJewel )

  000e4	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
  000e7	75 05		 jne	 SHORT $LN16@CondorFeat

; 4385 : 			{
; 4386 : 				iCreationCount++;

  000e9	ff 45 d4	 inc	 DWORD PTR _iCreationCount$[ebp]
  000ec	eb 1e		 jmp	 SHORT $LN27@CondorFeat
$LN16@CondorFeat:

; 4387 : 			}
; 4388 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )

  000ee	0f b7 42 06	 movzx	 eax, WORD PTR [edx+6]
  000f2	b9 35 1c 00 00	 mov	 ecx, 7221		; 00001c35H
  000f7	66 3b c1	 cmp	 ax, cx
  000fa	75 0d		 jne	 SHORT $LN14@CondorFeat

; 4389 : 			{
; 4390 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000fc	d9 42 24	 fld	 DWORD PTR [edx+36]
  000ff	e8 00 00 00 00	 call	 __ftol2_sse
  00104	01 45 e8	 add	 DWORD PTR _iCharmOfLuckCount$[ebp], eax

; 4391 : 			}
; 4392 : 			else

  00107	eb 03		 jmp	 SHORT $LN27@CondorFeat
$LN14@CondorFeat:

; 4393 : 			{
; 4394 : 				iOtherItemCount++;

  00109	ff 45 e0	 inc	 DWORD PTR _iOtherItemCount$[ebp]
$LN27@CondorFeat:

; 4361 : 
; 4362 : 	for(int n = 0; n < CHAOS_BOX_SIZE;n++)

  0010c	8b 7d c8	 mov	 edi, DWORD PTR tv500[ebp]
  0010f	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00115	89 7d c8	 mov	 DWORD PTR tv500[ebp], edi
  00118	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0011e	0f 8c 3c ff ff
	ff		 jl	 $LL28@CondorFeat

; 4395 : 			}
; 4396 : 		}
; 4397 : 	}
; 4398 : 
; 4399 : 	if( iCharmOfLuckCount > 10 )

  00124	8b 7d e8	 mov	 edi, DWORD PTR _iCharmOfLuckCount$[ebp]
  00127	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  0012a	7e 15		 jle	 SHORT $LN12@CondorFeat

; 4400 : 	{
; 4401 : 		pMsg.Result = 0xF0;
; 4402 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0012c	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00130	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00132	52		 push	 edx
  00133	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00136	50		 push	 eax
  00137	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  0013b	51		 push	 ecx

; 4403 : 		lpObj->ChaosLock = FALSE;
; 4404 : 		return;

  0013c	e9 f0 01 00 00	 jmp	 $LN34@CondorFeat
$LN12@CondorFeat:

; 4405 : 	}
; 4406 : 
; 4407 : 	if( iWingCount != 1 ||
; 4408 : 		iSetItemCount < 1 ||
; 4409 : 		iChaosCount != 1 ||
; 4410 : 		iSoulPackCount != 1 ||
; 4411 : 		iCreationCount != 1 ||
; 4412 : 		iOtherItemCount > 0 )

  00141	b8 01 00 00 00	 mov	 eax, 1
  00146	39 45 cc	 cmp	 DWORD PTR _iWingCount$[ebp], eax
  00149	0f 85 d2 01 00
	00		 jne	 $LN33@CondorFeat
  0014f	39 45 d0	 cmp	 DWORD PTR _iSetItemCount$[ebp], eax
  00152	0f 8c c9 01 00
	00		 jl	 $LN33@CondorFeat
  00158	39 45 dc	 cmp	 DWORD PTR _iChaosCount$[ebp], eax
  0015b	0f 85 c0 01 00
	00		 jne	 $LN33@CondorFeat
  00161	39 45 e4	 cmp	 DWORD PTR _iSoulPackCount$[ebp], eax
  00164	0f 85 b7 01 00
	00		 jne	 $LN33@CondorFeat
  0016a	39 45 d4	 cmp	 DWORD PTR _iCreationCount$[ebp], eax
  0016d	0f 85 ae 01 00
	00		 jne	 $LN33@CondorFeat
  00173	83 7d e0 00	 cmp	 DWORD PTR _iOtherItemCount$[ebp], 0
  00177	0f 8f a4 01 00
	00		 jg	 $LN33@CondorFeat

; 4416 : 		lpObj->ChaosLock = FALSE;
; 4417 : 		return;
; 4418 : 	}
; 4419 : 
; 4420 : 	LogChaosItem(lpObj, "ThirdWingLevel1_Mix");

  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NEOLPNCO@ThirdWingLevel1_Mix?$AA@
  00182	56		 push	 esi
  00183	8b cb		 mov	 ecx, ebx
  00185	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 4421 : 	LogAddTD("[ThirdWing Mix][Level 01] Chaos Mix Start");

  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@EPOMFGLB@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5@
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4422 : 
; 4423 : #if (__CUSTOM__ == 1)
; 4424 : 
; 4425 : 	if( iItemValue > 0 )

  00195	8b 45 d8	 mov	 eax, DWORD PTR _iItemValue$[ebp]
  00198	83 c4 04	 add	 esp, 4
  0019b	85 c0		 test	 eax, eax
  0019d	7e 0d		 jle	 SHORT $LN9@CondorFeat

; 4426 : 	{
; 4427 : 		lpObj->ChaosSuccessRate = iItemValue / gc_ChaosMixCondor_Div;

  0019f	99		 cdq
  001a0	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gc_ChaosMixCondor_Div@@3HA ; gc_ChaosMixCondor_Div
  001a6	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
$LN9@CondorFeat:

; 4428 : 	}
; 4429 : 
; 4430 : 	if( lpObj->ChaosSuccessRate > gc_ChaosMixCondor_Max )

  001ac	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  001b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gc_ChaosMixCondor_Max@@3HA ; gc_ChaosMixCondor_Max
  001b8	3b c1		 cmp	 eax, ecx
  001ba	7e 08		 jle	 SHORT $LN8@CondorFeat

; 4431 : 	{
; 4432 : 		lpObj->ChaosSuccessRate = gc_ChaosMixCondor_Max;

  001bc	89 8e 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], ecx
  001c2	eb 0f		 jmp	 SHORT $LN6@CondorFeat
$LN8@CondorFeat:

; 4433 : 	}
; 4434 : 	else if( lpObj->ChaosSuccessRate < 1 )

  001c4	83 f8 01	 cmp	 eax, 1
  001c7	7d 0a		 jge	 SHORT $LN6@CondorFeat

; 4435 : 	{
; 4436 : 		lpObj->ChaosSuccessRate = 1;

  001c9	c7 86 1c 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4636], 1
$LN6@CondorFeat:

; 4437 : 	}
; 4438 : 
; 4439 : #else
; 4440 : 
; 4441 : 	if( iItemValue > 0 )
; 4442 : 	{
; 4443 : 		lpObj->ChaosSuccessRate = iItemValue / 300000;
; 4444 : 	}
; 4445 : 
; 4446 : 	if( lpObj->ChaosSuccessRate > 60 )
; 4447 : 	{
; 4448 : 		lpObj->ChaosSuccessRate = 60;
; 4449 : 	}
; 4450 : 	else if( lpObj->ChaosSuccessRate < 1 )
; 4451 : 	{
; 4452 : 		lpObj->ChaosSuccessRate = 1;
; 4453 : 	}
; 4454 : 
; 4455 : #endif
; 4456 : 
; 4457 : 	iNeedChaosMoney = lpObj->ChaosSuccessRate * 200000;
; 4458 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  001d3	01 be 1c 12 00
	00		 add	 DWORD PTR [esi+4636], edi

; 4459 : 	iNeedChaosMoney = lpObj->ChaosSuccessRate * 200000;
; 4460 : 
; 4461 : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  001d9	8b 16		 mov	 edx, DWORD PTR [esi]
  001db	8b be 1c 12 00
	00		 mov	 edi, DWORD PTR [esi+4636]
  001e1	52		 push	 edx
  001e2	69 ff 40 0d 03
	00		 imul	 edi, 200000		; 00030d40H
  001e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001ed	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  001f2	f7 ef		 imul	 edi
  001f4	6a 00		 push	 0
  001f6	6a 64		 push	 100			; 00000064H
  001f8	52		 push	 edx
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 __alldiv

; 4462 : 
; 4463 : 	if ( iChaosTaxMoney < 0 )

  001ff	85 c0		 test	 eax, eax
  00201	79 02		 jns	 SHORT $LN5@CondorFeat

; 4464 : 	{
; 4465 : 		iChaosTaxMoney = 0;

  00203	33 c0		 xor	 eax, eax
$LN5@CondorFeat:

; 4466 : 	}
; 4467 : 
; 4468 : 	iNeedChaosMoney += iChaosTaxMoney;

  00205	03 f8		 add	 edi, eax

; 4469 : 
; 4470 : 	if ( iNeedChaosMoney < 0 )

  00207	79 02		 jns	 SHORT $LN4@CondorFeat

; 4471 : 	{
; 4472 : 		iNeedChaosMoney = 0;

  00209	33 ff		 xor	 edi, edi
$LN4@CondorFeat:

; 4473 : 	}
; 4474 : 
; 4475 : 	if(lpObj->Money < iNeedChaosMoney )

  0020b	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00211	3b cf		 cmp	 ecx, edi
  00213	7d 15		 jge	 SHORT $LN3@CondorFeat

; 4476 : 	{
; 4477 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 4478 : 		
; 4479 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00215	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00219	8b 16		 mov	 edx, DWORD PTR [esi]
  0021b	50		 push	 eax
  0021c	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0021f	51		 push	 ecx
  00220	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00224	52		 push	 edx

; 4480 : 		lpObj->ChaosLock = FALSE;
; 4481 : 		return;

  00225	e9 07 01 00 00	 jmp	 $LN34@CondorFeat
$LN3@CondorFeat:

; 4482 : 	}
; 4483 : 
; 4484 : 	lpObj->Money -= iNeedChaosMoney;

  0022a	2b cf		 sub	 ecx, edi
  0022c	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 4485 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00232	50		 push	 eax
  00233	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00238	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 4486 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  0023d	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00243	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00245	50		 push	 eax
  00246	51		 push	 ecx
  00247	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0024c	83 c4 08	 add	 esp, 8

; 4487 : 
; 4488 : 	if( rand() % 100 < lpObj->ChaosSuccessRate )

  0024f	e8 00 00 00 00	 call	 _rand
  00254	99		 cdq
  00255	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0025a	f7 f9		 idiv	 ecx
  0025c	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  00262	7d 71		 jge	 SHORT $LN2@CondorFeat

; 4489 : 	{
; 4490 : 		int Item = ITEMGET(13,53);
; 4491 : 		int Dur = 0;
; 4492 : 		int Level = 0;
; 4493 : #if( __4GAMERS__ == 1 )
; 4494 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 4495 : #endif
; 4496 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,Level,Dur,0,0,0,-1,0,0);

  00264	6a 00		 push	 0
  00266	6a 00		 push	 0
  00268	6a 00		 push	 0
  0026a	8b 16		 mov	 edx, DWORD PTR [esi]
  0026c	6a 00		 push	 0
  0026e	6a ff		 push	 -1
  00270	6a 00		 push	 0
  00272	6a 00		 push	 0
  00274	6a 00		 push	 0
  00276	6a 00		 push	 0
  00278	6a 00		 push	 0
  0027a	68 35 1a 00 00	 push	 6709			; 00001a35H
  0027f	6a 00		 push	 0
  00281	6a 00		 push	 0
  00283	68 ff 00 00 00	 push	 255			; 000000ffH
  00288	52		 push	 edx
  00289	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 4497 : 		gObjInventoryCommit(lpObj->m_Index);

  0028e	8b 06		 mov	 eax, DWORD PTR [esi]
  00290	50		 push	 eax
  00291	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 4498 : 		LogAddTD("[ThirdWing Mix][Level 01] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 4499 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);

  00296	8b 4d e8	 mov	 ecx, DWORD PTR _iCharmOfLuckCount$[ebp]
  00299	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0029f	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  002a5	83 c4 40	 add	 esp, 64			; 00000040H
  002a8	51		 push	 ecx
  002a9	57		 push	 edi
  002aa	52		 push	 edx
  002ab	50		 push	 eax
  002ac	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  002af	51		 push	 ecx
  002b0	83 c6 52	 add	 esi, 82			; 00000052H
  002b3	56		 push	 esi
  002b4	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@NNBKAMKF@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@
  002b9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002bf	83 c4 1c	 add	 esp, 28			; 0000001cH
  002c2	5f		 pop	 edi
  002c3	5e		 pop	 esi
  002c4	5b		 pop	 ebx

; 4514 : 	}
; 4515 : }

  002c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c8	33 cd		 xor	 ecx, ebp
  002ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002cf	8b e5		 mov	 esp, ebp
  002d1	5d		 pop	 ebp
  002d2	c2 04 00	 ret	 4
$LN2@CondorFeat:

; 4500 : 	}
; 4501 : 	else
; 4502 : 	{
; 4503 : #if( __4GAMERS__ == 1 )
; 4504 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 4505 : #endif
; 4506 : 		ChaosBoxWingMixItemDown(lpObj);

  002d5	56		 push	 esi
  002d6	8b cb		 mov	 ecx, ebx
  002d8	e8 00 00 00 00	 call	 ?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxWingMixItemDown

; 4507 : 		GCUserChaosBoxSend(lpObj, 0);

  002dd	6a 00		 push	 0
  002df	56		 push	 esi
  002e0	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 4508 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  002e5	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  002e9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002eb	52		 push	 edx
  002ec	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002ef	50		 push	 eax
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4509 : 
; 4510 : 		LogAddTD("[ThirdWing Mix][Level 01] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 4511 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);

  002f6	8b 55 e8	 mov	 edx, DWORD PTR _iCharmOfLuckCount$[ebp]
  002f9	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  002ff	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00305	52		 push	 edx
  00306	57		 push	 edi
  00307	50		 push	 eax
  00308	51		 push	 ecx
  00309	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  0030c	52		 push	 edx
  0030d	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00310	50		 push	 eax
  00311	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LDCANMLN@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@
  00316	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0031c	83 c4 30	 add	 esp, 48			; 00000030H

; 4512 : 
; 4513 : 		lpObj->ChaosLock = FALSE;

  0031f	eb 18		 jmp	 SHORT $LN35@CondorFeat
$LN33@CondorFeat:

; 4413 : 	{
; 4414 : 		pMsg.Result = 7;
; 4415 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00321	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00325	8b 06		 mov	 eax, DWORD PTR [esi]
  00327	51		 push	 ecx
  00328	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0032b	52		 push	 edx
  0032c	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00330	50		 push	 eax
$LN34@CondorFeat:
  00331	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00336	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN35@CondorFeat:

; 4514 : 	}
; 4515 : }

  00339	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033c	5f		 pop	 edi
  0033d	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00347	5e		 pop	 esi
  00348	33 cd		 xor	 ecx, ebp
  0034a	5b		 pop	 ebx
  0034b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00350	8b e5		 mov	 esp, ebp
  00352	5d		 pop	 ebp
  00353	c2 04 00	 ret	 4
?CondorFeather_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::CondorFeather_Mix
_TEXT	ENDS
PUBLIC	??_C@_0EP@JFJPOIME@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0FC@GGMOACLG@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0CK@OMLKNABI@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5@ ; `string'
PUBLIC	??_C@_0BE@FCHPIPIA@ThirdWingLevel2_Mix?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?NewWingChaos_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::NewWingChaos_Mix
EXTRN	?gc_ChaosMix3rdWing_Max@@3HA:DWORD		; gc_ChaosMix3rdWing_Max
EXTRN	?gc_ChaosMix3rdWing_Div@@3HA:DWORD		; gc_ChaosMix3rdWing_Div
;	COMDAT ??_C@_0EP@JFJPOIME@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0EP@JFJPOIME@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'ThirdWing Mix][Level 02] [%s][%s] CBMix Fail %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@GGMOACLG@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0FC@GGMOACLG@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'ThirdWing Mix][Level 02] [%s][%s] CBMix Success %d Money : %d'
	DB	'-%d, CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OMLKNABI@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5@
CONST	SEGMENT
??_C@_0CK@OMLKNABI@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5@ DB '['
	DB	'ThirdWing Mix][Level 02] Chaos Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FCHPIPIA@ThirdWingLevel2_Mix?$AA@
CONST	SEGMENT
??_C@_0BE@FCHPIPIA@ThirdWingLevel2_Mix?$AA@ DB 'ThirdWingLevel2_Mix', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?NewWingChaos_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iBlessPackCount$ = -60					; size = 4
_iCreationCount$ = -56					; size = 4
_iCondorStoneCount$ = -52				; size = 4
_iChaosCount$ = -48					; size = 4
_iSoulPackCount$ = -44					; size = 4
_iCharmOfLuckCount$ = -40				; size = 4
_Option2$191719 = -36					; size = 4
_iOtherItemCount$ = -36					; size = 4
_iNeedChaosMoney$ = -32					; size = 4
_iItemValue$ = -32					; size = 4
_Item$191704 = -28					; size = 4
_iExcItemCount$ = -28					; size = 4
_ExcOption$191722 = -24					; size = 4
_iCondorFeatherCount$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?NewWingChaos_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::NewWingChaos_Mix, COMDAT
; _this$ = ecx

; 4518 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 4519 : 	lpObj->ChaosLock = TRUE;
; 4520 : 
; 4521 : 	int iExcItemCount = 0;

  00015	33 db		 xor	 ebx, ebx
  00017	57		 push	 edi

; 4522 : 	int iCondorFeatherCount = 0;
; 4523 : 	int iCondorStoneCount = 0;
; 4524 : 	int iChaosCount = 0;
; 4525 : 	int iSoulPackCount = 0;
; 4526 : 	int iBlessPackCount = 0;
; 4527 : 	int iCreationCount =0;
; 4528 : 	int iOtherItemCount = 0;
; 4529 : 	int iItemValue = 0;
; 4530 : 	int iNeedChaosMoney = 0;
; 4531 : 	int iCharmOfLuckCount = 0;
; 4532 : 
; 4533 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4534 : 
; 4535 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	8b f9		 mov	 edi, ecx
  00025	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0002f	89 5d e4	 mov	 DWORD PTR _iExcItemCount$[ebp], ebx
  00032	89 5d e8	 mov	 DWORD PTR _iCondorFeatherCount$[ebp], ebx
  00035	89 5d cc	 mov	 DWORD PTR _iCondorStoneCount$[ebp], ebx
  00038	89 5d d0	 mov	 DWORD PTR _iChaosCount$[ebp], ebx
  0003b	89 5d d4	 mov	 DWORD PTR _iSoulPackCount$[ebp], ebx
  0003e	89 5d c4	 mov	 DWORD PTR _iBlessPackCount$[ebp], ebx
  00041	89 5d c8	 mov	 DWORD PTR _iCreationCount$[ebp], ebx
  00044	89 5d dc	 mov	 DWORD PTR _iOtherItemCount$[ebp], ebx
  00047	89 5d e0	 mov	 DWORD PTR _iItemValue$[ebp], ebx
  0004a	89 5d d8	 mov	 DWORD PTR _iCharmOfLuckCount$[ebp], ebx
  0004d	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4536 : 	pMsg.Result = CB_ERROR;

  00055	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00058	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL70@NewWingCha:

; 4539 : 	{
; 4540 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00060	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00066	03 cb		 add	 ecx, ebx
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	83 f8 01	 cmp	 eax, 1
  00070	0f 85 87 00 00
	00		 jne	 $LN69@NewWingCha

; 4541 : 		{
; 4542 : 			if( CheckItemOptions(&lpObj->pChaosBox[n],7,0,0,1,0,1) != FALSE )

  00076	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0007c	50		 push	 eax
  0007d	6a 00		 push	 0
  0007f	50		 push	 eax
  00080	6a 00		 push	 0
  00082	6a 00		 push	 0
  00084	8d 14 0b	 lea	 edx, DWORD PTR [ebx+ecx]
  00087	6a 07		 push	 7
  00089	52		 push	 edx
  0008a	8b cf		 mov	 ecx, edi
  0008c	e8 00 00 00 00	 call	 ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions
  00091	85 c0		 test	 eax, eax
  00093	74 0b		 je	 SHORT $LN66@NewWingCha

; 4543 : 			{
; 4544 : 				iExcItemCount++;
; 4545 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  00095	8b 52 78	 mov	 edx, DWORD PTR [edx+120]
  00098	ff 45 e4	 inc	 DWORD PTR _iExcItemCount$[ebp]
  0009b	01 55 e0	 add	 DWORD PTR _iItemValue$[ebp], edx
  0009e	eb 5d		 jmp	 SHORT $LN69@NewWingCha
$LN66@NewWingCha:

; 4546 : 			}
; 4547 : 			else if( lpObj->pChaosBox[n].m_Type == iCondorFeather )

  000a0	0f b7 4a 06	 movzx	 ecx, WORD PTR [edx+6]
  000a4	0f bf c1	 movsx	 eax, cx
  000a7	3b 47 1c	 cmp	 eax, DWORD PTR [edi+28]
  000aa	75 05		 jne	 SHORT $LN64@NewWingCha

; 4548 : 			{
; 4549 : 				iCondorFeatherCount++;

  000ac	ff 45 e8	 inc	 DWORD PTR _iCondorFeatherCount$[ebp]
  000af	eb 4c		 jmp	 SHORT $LN69@NewWingCha
$LN64@NewWingCha:

; 4550 : 			}
; 4551 : 			else if( lpObj->pChaosBox[n].m_Type == iCondorStone )

  000b1	3b 47 20	 cmp	 eax, DWORD PTR [edi+32]
  000b4	75 05		 jne	 SHORT $LN62@NewWingCha

; 4552 : 			{
; 4553 : 				iCondorStoneCount++;

  000b6	ff 45 cc	 inc	 DWORD PTR _iCondorStoneCount$[ebp]
  000b9	eb 42		 jmp	 SHORT $LN69@NewWingCha
$LN62@NewWingCha:

; 4554 : 			}
; 4555 : 			else if( lpObj->pChaosBox[n].m_Type == iChaosJewel )

  000bb	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  000be	75 05		 jne	 SHORT $LN60@NewWingCha

; 4556 : 			{
; 4557 : 				iChaosCount++;

  000c0	ff 45 d0	 inc	 DWORD PTR _iChaosCount$[ebp]
  000c3	eb 38		 jmp	 SHORT $LN69@NewWingCha
$LN60@NewWingCha:

; 4558 : 			}
; 4559 : 			else if( lpObj->pChaosBox[n].m_Type == iBlessPack )

  000c5	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  000c8	75 05		 jne	 SHORT $LN58@NewWingCha

; 4560 : 			{
; 4561 : 				iBlessPackCount++;

  000ca	ff 45 c4	 inc	 DWORD PTR _iBlessPackCount$[ebp]
  000cd	eb 2e		 jmp	 SHORT $LN69@NewWingCha
$LN58@NewWingCha:

; 4562 : 			}
; 4563 : 			else if( lpObj->pChaosBox[n].m_Type == iSoulPack )

  000cf	3b 47 18	 cmp	 eax, DWORD PTR [edi+24]
  000d2	75 05		 jne	 SHORT $LN56@NewWingCha

; 4564 : 			{
; 4565 : 				iSoulPackCount++;

  000d4	ff 45 d4	 inc	 DWORD PTR _iSoulPackCount$[ebp]
  000d7	eb 24		 jmp	 SHORT $LN69@NewWingCha
$LN56@NewWingCha:

; 4566 : 			}
; 4567 : 			else if( lpObj->pChaosBox[n].m_Type == iCreationJewel )

  000d9	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
  000dc	75 05		 jne	 SHORT $LN54@NewWingCha

; 4568 : 			{
; 4569 : 				iCreationCount++;

  000de	ff 45 c8	 inc	 DWORD PTR _iCreationCount$[ebp]
  000e1	eb 1a		 jmp	 SHORT $LN69@NewWingCha
$LN54@NewWingCha:

; 4570 : 			}
; 4571 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )

  000e3	b8 35 1c 00 00	 mov	 eax, 7221		; 00001c35H
  000e8	66 3b c8	 cmp	 cx, ax
  000eb	75 0d		 jne	 SHORT $LN52@NewWingCha

; 4572 : 			{
; 4573 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000ed	d9 42 24	 fld	 DWORD PTR [edx+36]
  000f0	e8 00 00 00 00	 call	 __ftol2_sse
  000f5	01 45 d8	 add	 DWORD PTR _iCharmOfLuckCount$[ebp], eax

; 4574 : 			}
; 4575 : 			else

  000f8	eb 03		 jmp	 SHORT $LN69@NewWingCha
$LN52@NewWingCha:

; 4576 : 			{
; 4577 : 				iOtherItemCount++;

  000fa	ff 45 dc	 inc	 DWORD PTR _iOtherItemCount$[ebp]
$LN69@NewWingCha:

; 4537 : 
; 4538 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000fd	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  00103	81 fb 80 1a 00
	00		 cmp	 ebx, 6784		; 00001a80H
  00109	0f 8c 51 ff ff
	ff		 jl	 $LL70@NewWingCha

; 4578 : 			}
; 4579 : 		}
; 4580 : 	}
; 4581 : 
; 4582 : 	if( iCharmOfLuckCount > 10 )

  0010f	8b 5d d8	 mov	 ebx, DWORD PTR _iCharmOfLuckCount$[ebp]
  00112	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00115	7e 15		 jle	 SHORT $LN50@NewWingCha

; 4583 : 	{
; 4584 : 		pMsg.Result = 0xF0;
; 4585 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00117	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0011b	8b 06		 mov	 eax, DWORD PTR [esi]
  0011d	51		 push	 ecx
  0011e	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00121	52		 push	 edx
  00122	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  00126	50		 push	 eax

; 4586 : 		lpObj->ChaosLock = FALSE;
; 4587 : 		return;

  00127	e9 80 03 00 00	 jmp	 $LN81@NewWingCha
$LN50@NewWingCha:

; 4588 : 	}
; 4589 : 
; 4590 : 	if( iExcItemCount < 1 || 
; 4591 : 		iCondorFeatherCount != 1 ||
; 4592 : 		iCondorStoneCount != 1 ||
; 4593 : 		iChaosCount != 1 ||
; 4594 : 		iSoulPackCount != 1 ||
; 4595 : 		iBlessPackCount != 1 ||
; 4596 : 		iCreationCount != 1 ||
; 4597 : 		iOtherItemCount > 0 )

  0012c	b8 01 00 00 00	 mov	 eax, 1
  00131	39 45 e4	 cmp	 DWORD PTR _iExcItemCount$[ebp], eax
  00134	0f 8c 62 03 00
	00		 jl	 $LN75@NewWingCha
  0013a	39 45 e8	 cmp	 DWORD PTR _iCondorFeatherCount$[ebp], eax
  0013d	0f 85 59 03 00
	00		 jne	 $LN75@NewWingCha
  00143	39 45 cc	 cmp	 DWORD PTR _iCondorStoneCount$[ebp], eax
  00146	0f 85 50 03 00
	00		 jne	 $LN75@NewWingCha
  0014c	39 45 d0	 cmp	 DWORD PTR _iChaosCount$[ebp], eax
  0014f	0f 85 47 03 00
	00		 jne	 $LN75@NewWingCha
  00155	39 45 d4	 cmp	 DWORD PTR _iSoulPackCount$[ebp], eax
  00158	0f 85 3e 03 00
	00		 jne	 $LN75@NewWingCha
  0015e	39 45 c4	 cmp	 DWORD PTR _iBlessPackCount$[ebp], eax
  00161	0f 85 35 03 00
	00		 jne	 $LN75@NewWingCha
  00167	39 45 c8	 cmp	 DWORD PTR _iCreationCount$[ebp], eax
  0016a	0f 85 2c 03 00
	00		 jne	 $LN75@NewWingCha
  00170	83 7d dc 00	 cmp	 DWORD PTR _iOtherItemCount$[ebp], 0
  00174	0f 8f 22 03 00
	00		 jg	 $LN75@NewWingCha

; 4601 : 		lpObj->ChaosLock = FALSE;
; 4602 : 		return;
; 4603 : 	}
; 4604 : 
; 4605 : 	LogChaosItem(lpObj, "ThirdWingLevel2_Mix");

  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FCHPIPIA@ThirdWingLevel2_Mix?$AA@
  0017f	56		 push	 esi
  00180	8b cf		 mov	 ecx, edi
  00182	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 4606 : 	LogAddTD("[ThirdWing Mix][Level 02] Chaos Mix Start");

  00187	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@OMLKNABI@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5@
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4607 : 
; 4608 : #if (__CUSTOM__ == 1)
; 4609 : 
; 4610 : 	if( iItemValue > 0 )

  00192	8b 45 e0	 mov	 eax, DWORD PTR _iItemValue$[ebp]
  00195	83 c4 04	 add	 esp, 4
  00198	85 c0		 test	 eax, eax
  0019a	7e 0d		 jle	 SHORT $LN47@NewWingCha

; 4611 : 	{
; 4612 : 		lpObj->ChaosSuccessRate = iItemValue / gc_ChaosMix3rdWing_Div;

  0019c	99		 cdq
  0019d	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gc_ChaosMix3rdWing_Div@@3HA ; gc_ChaosMix3rdWing_Div
  001a3	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
$LN47@NewWingCha:

; 4613 : 	}
; 4614 : 
; 4615 : 	if( lpObj->ChaosSuccessRate > gc_ChaosMix3rdWing_Max )

  001a9	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  001af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gc_ChaosMix3rdWing_Max@@3HA ; gc_ChaosMix3rdWing_Max
  001b5	3b c1		 cmp	 eax, ecx
  001b7	7e 08		 jle	 SHORT $LN46@NewWingCha

; 4616 : 	{
; 4617 : 		lpObj->ChaosSuccessRate = gc_ChaosMix3rdWing_Max;

  001b9	89 8e 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], ecx
  001bf	eb 0f		 jmp	 SHORT $LN44@NewWingCha
$LN46@NewWingCha:

; 4618 : 	}
; 4619 : 	else if( lpObj->ChaosSuccessRate < 1 )

  001c1	83 f8 01	 cmp	 eax, 1
  001c4	7d 0a		 jge	 SHORT $LN44@NewWingCha

; 4620 : 	{
; 4621 : 		lpObj->ChaosSuccessRate = 1;

  001c6	c7 86 1c 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4636], 1
$LN44@NewWingCha:

; 4622 : 	}
; 4623 : 
; 4624 : #else
; 4625 : 
; 4626 : 	if( iItemValue > 0 )
; 4627 : 	{
; 4628 : 		lpObj->ChaosSuccessRate = iItemValue / 3000000;
; 4629 : 	}
; 4630 : 
; 4631 : 	if( lpObj->ChaosSuccessRate > 40 )
; 4632 : 	{
; 4633 : 		lpObj->ChaosSuccessRate = 40;
; 4634 : 	}
; 4635 : 	else if( lpObj->ChaosSuccessRate < 1 )
; 4636 : 	{
; 4637 : 		lpObj->ChaosSuccessRate = 1;
; 4638 : 	}
; 4639 : 
; 4640 : #endif
; 4641 : 
; 4642 : 	iNeedChaosMoney = lpObj->ChaosSuccessRate * 200000;
; 4643 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 4644 : 	iNeedChaosMoney = lpObj->ChaosSuccessRate * 200000;
; 4645 : 
; 4646 : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  001d0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d2	01 9e 1c 12 00
	00		 add	 DWORD PTR [esi+4636], ebx
  001d8	8b 9e 1c 12 00
	00		 mov	 ebx, DWORD PTR [esi+4636]
  001de	51		 push	 ecx
  001df	69 db 40 0d 03
	00		 imul	 ebx, 200000		; 00030d40H
  001e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001ea	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  001ef	f7 eb		 imul	 ebx
  001f1	6a 00		 push	 0
  001f3	6a 64		 push	 100			; 00000064H
  001f5	52		 push	 edx
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 __alldiv

; 4647 : 
; 4648 : 	if ( iChaosTaxMoney < 0 )

  001fc	85 c0		 test	 eax, eax
  001fe	79 02		 jns	 SHORT $LN43@NewWingCha

; 4649 : 	{
; 4650 : 		iChaosTaxMoney = 0;

  00200	33 c0		 xor	 eax, eax
$LN43@NewWingCha:

; 4651 : 	}
; 4652 : 
; 4653 : 	iNeedChaosMoney += iChaosTaxMoney;

  00202	03 d8		 add	 ebx, eax
  00204	89 5d e0	 mov	 DWORD PTR _iNeedChaosMoney$[ebp], ebx

; 4654 : 
; 4655 : 	if ( iNeedChaosMoney < 0 )

  00207	79 0a		 jns	 SHORT $LN42@NewWingCha

; 4656 : 	{
; 4657 : 		iNeedChaosMoney = 0;

  00209	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iNeedChaosMoney$[ebp], 0
  00210	8b 5d e0	 mov	 ebx, DWORD PTR _iNeedChaosMoney$[ebp]
$LN42@NewWingCha:

; 4658 : 	}
; 4659 : 
; 4660 : 	if(lpObj->Money < iNeedChaosMoney)

  00213	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00219	3b cb		 cmp	 ecx, ebx
  0021b	7d 09		 jge	 SHORT $LN41@NewWingCha

; 4661 : 	{
; 4662 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0021d	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 4663 : 		
; 4664 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 4665 : 		lpObj->ChaosLock = FALSE;
; 4666 : 		return;

  00221	e9 7a 02 00 00	 jmp	 $LN82@NewWingCha
$LN41@NewWingCha:

; 4667 : 	}
; 4668 : 
; 4669 : 	lpObj->Money -= iNeedChaosMoney;

  00226	2b cb		 sub	 ecx, ebx
  00228	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 4670 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0022e	50		 push	 eax
  0022f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00234	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 4671 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  00239	8b 96 cc 00 00
	00		 mov	 edx, DWORD PTR [esi+204]
  0023f	8b 06		 mov	 eax, DWORD PTR [esi]
  00241	52		 push	 edx
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00248	83 c4 08	 add	 esp, 8

; 4672 : 
; 4673 : 	if( rand() % 100 < lpObj->ChaosSuccessRate )

  0024b	e8 00 00 00 00	 call	 _rand
  00250	99		 cdq
  00251	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00256	f7 f9		 idiv	 ecx
  00258	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0025e	0f 8d ec 01 00
	00		 jge	 $LN40@NewWingCha

; 4674 : 	{
; 4675 : 		int RandWing = rand()%7;

  00264	e8 00 00 00 00	 call	 _rand
  00269	99		 cdq
  0026a	b9 07 00 00 00	 mov	 ecx, 7
  0026f	f7 f9		 idiv	 ecx

; 4676 : 		int Item = 0;

  00271	33 db		 xor	 ebx, ebx
  00273	89 5d e4	 mov	 DWORD PTR _Item$191704[ebp], ebx

; 4677 : 
; 4678 : 		if( RandWing == 0 )

  00276	3b d3		 cmp	 edx, ebx
  00278	75 05		 jne	 SHORT $LN39@NewWingCha

; 4679 : 		{
; 4680 : 			Item = iStormWings;

  0027a	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
  0027d	eb 46		 jmp	 SHORT $LN83@NewWingCha
$LN39@NewWingCha:

; 4681 : 		}
; 4682 : 		else if( RandWing == 1 )

  0027f	83 fa 01	 cmp	 edx, 1
  00282	75 08		 jne	 SHORT $LN37@NewWingCha

; 4683 : 		{
; 4684 : 			Item = iRedemptionWings;

  00284	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00287	89 45 e4	 mov	 DWORD PTR _Item$191704[ebp], eax
  0028a	eb 3c		 jmp	 SHORT $LN27@NewWingCha
$LN37@NewWingCha:

; 4685 : 		}
; 4686 : 		else if( RandWing == 2 )

  0028c	83 fa 02	 cmp	 edx, 2
  0028f	75 08		 jne	 SHORT $LN35@NewWingCha

; 4687 : 		{
; 4688 : 			Item = iFortitudeWings;

  00291	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00294	89 4d e4	 mov	 DWORD PTR _Item$191704[ebp], ecx
  00297	eb 2f		 jmp	 SHORT $LN27@NewWingCha
$LN35@NewWingCha:

; 4689 : 		}
; 4690 : 		else if( RandWing == 3 )

  00299	83 fa 03	 cmp	 edx, 3
  0029c	75 05		 jne	 SHORT $LN33@NewWingCha

; 4691 : 		{
; 4692 : 			Item = iHurricaneWings;

  0029e	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  002a1	eb 22		 jmp	 SHORT $LN83@NewWingCha
$LN33@NewWingCha:

; 4693 : 		}
; 4694 : 		else if( RandWing == 4 )

  002a3	83 fa 04	 cmp	 edx, 4
  002a6	75 08		 jne	 SHORT $LN31@NewWingCha

; 4695 : 		{
; 4696 : 			Item = iMonarchMantle;

  002a8	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  002ab	89 45 e4	 mov	 DWORD PTR _Item$191704[ebp], eax
  002ae	eb 18		 jmp	 SHORT $LN27@NewWingCha
$LN31@NewWingCha:

; 4697 : 		}
; 4698 : 		else if( RandWing == 5 )

  002b0	83 fa 05	 cmp	 edx, 5
  002b3	75 08		 jne	 SHORT $LN29@NewWingCha

; 4699 : 		{
; 4700 : 			Item = iDimensionWings;

  002b5	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  002b8	89 4d e4	 mov	 DWORD PTR _Item$191704[ebp], ecx
  002bb	eb 0b		 jmp	 SHORT $LN27@NewWingCha
$LN29@NewWingCha:

; 4701 : 		}
; 4702 : 		else if( RandWing == 6 )

  002bd	83 fa 06	 cmp	 edx, 6
  002c0	75 06		 jne	 SHORT $LN27@NewWingCha

; 4703 : 		{
; 4704 : 			Item = iRFCape2;

  002c2	8b 57 3c	 mov	 edx, DWORD PTR [edi+60]
$LN83@NewWingCha:
  002c5	89 55 e4	 mov	 DWORD PTR _Item$191704[ebp], edx
$LN27@NewWingCha:

; 4705 : 		}
; 4706 : 
; 4707 : 		int Option1 = 0;
; 4708 : 		int Option2 = 0;

  002c8	89 5d dc	 mov	 DWORD PTR _Option2$191719[ebp], ebx

; 4709 : 
; 4710 : 		if( rand() % 1000 <= iOptionRate )

  002cb	e8 00 00 00 00	 call	 _rand
  002d0	99		 cdq
  002d1	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  002d6	f7 f9		 idiv	 ecx
  002d8	3b 57 40	 cmp	 edx, DWORD PTR [edi+64]
  002db	7f 07		 jg	 SHORT $LN77@NewWingCha

; 4711 : 		{
; 4712 : 			Option2 = TRUE;

  002dd	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _Option2$191719[ebp], 1
$LN77@NewWingCha:

; 4713 : 		}
; 4714 : 
; 4715 : 		int Option3 = 0;
; 4716 : 		int ExcOption = 0;

  002e4	89 5d e8	 mov	 DWORD PTR _ExcOption$191722[ebp], ebx

; 4717 : 
; 4718 : 		int Rand = rand() %2;

  002e7	e8 00 00 00 00	 call	 _rand
  002ec	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  002f1	79 05		 jns	 SHORT $LN78@NewWingCha
  002f3	48		 dec	 eax
  002f4	83 c8 fe	 or	 eax, -2			; fffffffeH
  002f7	40		 inc	 eax
$LN78@NewWingCha:

; 4719 : 		int Rand2;
; 4720 : 
; 4721 : 		switch( Rand )

  002f8	2b c3		 sub	 eax, ebx
  002fa	74 21		 je	 SHORT $LN23@NewWingCha
  002fc	48		 dec	 eax
  002fd	75 3a		 jne	 SHORT $LN22@NewWingCha

; 4729 : 			}
; 4730 : 			break;
; 4731 : 		case 1:
; 4732 : 
; 4733 : 			Rand2 = rand() % 1000;

  002ff	e8 00 00 00 00	 call	 _rand
  00304	99		 cdq
  00305	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0030a	f7 f9		 idiv	 ecx

; 4734 : 
; 4735 : 			if( Rand2 < 300 )

  0030c	81 fa 2c 01 00
	00		 cmp	 edx, 300		; 0000012cH
  00312	7d 25		 jge	 SHORT $LN22@NewWingCha

; 4736 : 			{
; 4737 : 				ExcOption |= 0x20;

  00314	c7 45 e8 20 00
	00 00		 mov	 DWORD PTR _ExcOption$191722[ebp], 32 ; 00000020H

; 4738 : 			}
; 4739 : 			break;

  0031b	eb 1c		 jmp	 SHORT $LN22@NewWingCha
$LN23@NewWingCha:

; 4722 : 		{
; 4723 : 		case 0:
; 4724 : 			Rand2 = rand() % 1000;

  0031d	e8 00 00 00 00	 call	 _rand
  00322	99		 cdq
  00323	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00328	f7 f9		 idiv	 ecx

; 4725 : 
; 4726 : 			if( Rand2 < 400 )

  0032a	81 fa 90 01 00
	00		 cmp	 edx, 400		; 00000190H
  00330	7d 07		 jge	 SHORT $LN22@NewWingCha

; 4727 : 			{
; 4728 : 				ExcOption |= 0x10;

  00332	c7 45 e8 10 00
	00 00		 mov	 DWORD PTR _ExcOption$191722[ebp], 16 ; 00000010H
$LN22@NewWingCha:

; 4740 : 		}
; 4741 : 
; 4742 : 		int Rand3 = rand() % 4;

  00339	e8 00 00 00 00	 call	 _rand
  0033e	8b f8		 mov	 edi, eax
  00340	81 e7 03 00 00
	80		 and	 edi, -2147483645	; 80000003H
  00346	79 05		 jns	 SHORT $LN79@NewWingCha
  00348	4f		 dec	 edi
  00349	83 cf fc	 or	 edi, -4			; fffffffcH
  0034c	47		 inc	 edi
$LN79@NewWingCha:

; 4743 : 		int Rand4 = rand() % 1000;

  0034d	e8 00 00 00 00	 call	 _rand
  00352	99		 cdq
  00353	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00358	f7 f9		 idiv	 ecx

; 4744 : 
; 4745 : 		Option3 = 0;
; 4746 : 
; 4747 : 		switch( Rand3 )

  0035a	4f		 dec	 edi
  0035b	74 1c		 je	 SHORT $LN17@NewWingCha
  0035d	4f		 dec	 edi
  0035e	74 0d		 je	 SHORT $LN15@NewWingCha
  00360	4f		 dec	 edi
  00361	75 20		 jne	 SHORT $LN16@NewWingCha

; 4761 : 		case 3:
; 4762 : 			if( Rand4 < 30 )

  00363	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  00366	7d 1b		 jge	 SHORT $LN16@NewWingCha

; 4763 : 			{
; 4764 : 				Option3 = 3;

  00368	8d 5f 03	 lea	 ebx, DWORD PTR [edi+3]

; 4765 : 			}
; 4766 : 			break;

  0036b	eb 16		 jmp	 SHORT $LN16@NewWingCha
$LN15@NewWingCha:

; 4753 : 			}
; 4754 : 			break;
; 4755 : 		case 2:
; 4756 : 			if( Rand4 < 60 )

  0036d	83 fa 3c	 cmp	 edx, 60			; 0000003cH
  00370	7d 11		 jge	 SHORT $LN16@NewWingCha

; 4757 : 			{
; 4758 : 				Option3 = 2;

  00372	bb 02 00 00 00	 mov	 ebx, 2

; 4759 : 			}
; 4760 : 			break;

  00377	eb 0a		 jmp	 SHORT $LN16@NewWingCha
$LN17@NewWingCha:

; 4748 : 		{
; 4749 : 		case 1:
; 4750 : 			if( Rand4 < 120 )

  00379	83 fa 78	 cmp	 edx, 120		; 00000078H
  0037c	7d 05		 jge	 SHORT $LN16@NewWingCha

; 4751 : 			{
; 4752 : 				Option3 = 1;

  0037e	bb 01 00 00 00	 mov	 ebx, 1
$LN16@NewWingCha:

; 4767 : 		}
; 4768 : 
; 4769 : 		int Rand5 = rand() % 4;

  00383	e8 00 00 00 00	 call	 _rand
  00388	8b f8		 mov	 edi, eax
  0038a	81 e7 03 00 00
	80		 and	 edi, -2147483645	; 80000003H
  00390	79 05		 jns	 SHORT $LN80@NewWingCha
  00392	4f		 dec	 edi
  00393	83 cf fc	 or	 edi, -4			; fffffffcH
  00396	47		 inc	 edi
$LN80@NewWingCha:

; 4770 : 		int Rand6 = rand() % 1000;

  00397	e8 00 00 00 00	 call	 _rand
  0039c	99		 cdq
  0039d	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  003a2	f7 f9		 idiv	 ecx

; 4771 : 
; 4772 : 		switch( Rand5 )

  003a4	83 ff 03	 cmp	 edi, 3
  003a7	77 31		 ja	 SHORT $LN76@NewWingCha
  003a9	ff 24 bd 00 00
	00 00		 jmp	 DWORD PTR $LN85@NewWingCha[edi*4]
$LN9@NewWingCha:

; 4773 : 		{
; 4774 : 		case 0:
; 4775 : 			if( Rand6 < 40 )

  003b0	83 fa 28	 cmp	 edx, 40			; 00000028H
  003b3	7d 25		 jge	 SHORT $LN76@NewWingCha

; 4776 : 			{
; 4777 : 				ExcOption |= 0x01;

  003b5	83 4d e8 01	 or	 DWORD PTR _ExcOption$191722[ebp], 1

; 4778 : 			}
; 4779 : 			break;

  003b9	eb 1f		 jmp	 SHORT $LN76@NewWingCha
$LN7@NewWingCha:

; 4780 : 		case 1:
; 4781 : 			if( Rand6 < 20 )

  003bb	83 fa 14	 cmp	 edx, 20			; 00000014H
  003be	7d 1a		 jge	 SHORT $LN76@NewWingCha

; 4782 : 			{
; 4783 : 				ExcOption |= 0x02;

  003c0	83 4d e8 02	 or	 DWORD PTR _ExcOption$191722[ebp], 2

; 4784 : 			}
; 4785 : 			break;

  003c4	eb 14		 jmp	 SHORT $LN76@NewWingCha
$LN5@NewWingCha:

; 4786 : 		case 2:
; 4787 : 			if( Rand6 < 70 )

  003c6	83 fa 46	 cmp	 edx, 70			; 00000046H
  003c9	7d 0f		 jge	 SHORT $LN76@NewWingCha

; 4788 : 			{
; 4789 : 				ExcOption |= 0x04;

  003cb	83 4d e8 04	 or	 DWORD PTR _ExcOption$191722[ebp], 4

; 4790 : 			}
; 4791 : 			break;

  003cf	eb 09		 jmp	 SHORT $LN76@NewWingCha
$LN3@NewWingCha:

; 4792 : 		case 3:
; 4793 : 			if( Rand6 < 70 )

  003d1	83 fa 46	 cmp	 edx, 70			; 00000046H
  003d4	7d 04		 jge	 SHORT $LN76@NewWingCha

; 4794 : 			{
; 4795 : 				ExcOption |= 0x08;

  003d6	83 4d e8 08	 or	 DWORD PTR _ExcOption$191722[ebp], 8
$LN76@NewWingCha:

; 4796 : 			}
; 4797 : 			break;
; 4798 : 		}
; 4799 : #if( __4GAMERS__ == 1 )
; 4800 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 4801 : #endif
; 4802 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,0,0,Option1,Option2,Option3,-1,ExcOption,0);

  003da	8b 55 e8	 mov	 edx, DWORD PTR _ExcOption$191722[ebp]
  003dd	8b 45 dc	 mov	 eax, DWORD PTR _Option2$191719[ebp]
  003e0	8b 4d e4	 mov	 ecx, DWORD PTR _Item$191704[ebp]
  003e3	6a 00		 push	 0
  003e5	6a 00		 push	 0
  003e7	6a 00		 push	 0
  003e9	52		 push	 edx
  003ea	8b 16		 mov	 edx, DWORD PTR [esi]
  003ec	6a ff		 push	 -1
  003ee	53		 push	 ebx
  003ef	50		 push	 eax
  003f0	6a 00		 push	 0
  003f2	6a 00		 push	 0
  003f4	6a 00		 push	 0
  003f6	51		 push	 ecx
  003f7	6a 00		 push	 0
  003f9	6a 00		 push	 0
  003fb	68 ff 00 00 00	 push	 255			; 000000ffH
  00400	52		 push	 edx
  00401	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 4803 : 		gObjInventoryCommit(lpObj->m_Index);

  00406	8b 06		 mov	 eax, DWORD PTR [esi]
  00408	50		 push	 eax
  00409	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 4804 : 		LogAddTD("[ThirdWing Mix][Level 02] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",
; 4805 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);

  0040e	8b 4d d8	 mov	 ecx, DWORD PTR _iCharmOfLuckCount$[ebp]
  00411	8b 55 e0	 mov	 edx, DWORD PTR _iNeedChaosMoney$[ebp]
  00414	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0041a	83 c4 40	 add	 esp, 64			; 00000040H
  0041d	51		 push	 ecx
  0041e	8b 8e 1c 12 00
	00		 mov	 ecx, DWORD PTR [esi+4636]
  00424	52		 push	 edx
  00425	50		 push	 eax
  00426	51		 push	 ecx
  00427	8d 56 5d	 lea	 edx, DWORD PTR [esi+93]
  0042a	52		 push	 edx
  0042b	83 c6 52	 add	 esi, 82			; 00000052H
  0042e	56		 push	 esi
  0042f	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@GGMOACLG@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
  00434	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0043a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0043d	5f		 pop	 edi
  0043e	5e		 pop	 esi
  0043f	5b		 pop	 ebx

; 4820 : 	}
; 4821 : }

  00440	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00443	33 cd		 xor	 ecx, ebp
  00445	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0044a	8b e5		 mov	 esp, ebp
  0044c	5d		 pop	 ebp
  0044d	c2 04 00	 ret	 4
$LN40@NewWingCha:

; 4806 : 	}
; 4807 : 	else
; 4808 : 	{
; 4809 : #if( __4GAMERS__ == 1 )
; 4810 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 4811 : #endif
; 4812 : 		ChaosBoxWingMixItemDown(lpObj);

  00450	56		 push	 esi
  00451	8b cf		 mov	 ecx, edi
  00453	e8 00 00 00 00	 call	 ?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxWingMixItemDown

; 4813 : 		GCUserChaosBoxSend(lpObj, 0);

  00458	6a 00		 push	 0
  0045a	56		 push	 esi
  0045b	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 4814 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00460	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00464	8b 16		 mov	 edx, DWORD PTR [esi]
  00466	50		 push	 eax
  00467	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0046a	51		 push	 ecx
  0046b	52		 push	 edx
  0046c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4815 : 
; 4816 : 		LogAddTD("[ThirdWing Mix][Level 02] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",
; 4817 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);

  00471	8b 45 d8	 mov	 eax, DWORD PTR _iCharmOfLuckCount$[ebp]
  00474	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0047a	8b 96 1c 12 00
	00		 mov	 edx, DWORD PTR [esi+4636]
  00480	50		 push	 eax
  00481	53		 push	 ebx
  00482	51		 push	 ecx
  00483	52		 push	 edx
  00484	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00487	50		 push	 eax
  00488	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  0048b	51		 push	 ecx
  0048c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JFJPOIME@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
  00491	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00497	83 c4 30	 add	 esp, 48			; 00000030H

; 4818 : 
; 4819 : 		lpObj->ChaosLock = FALSE;

  0049a	eb 18		 jmp	 SHORT $LN84@NewWingCha
$LN75@NewWingCha:

; 4598 : 	{
; 4599 : 		pMsg.Result = 7;

  0049c	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN82@NewWingCha:

; 4600 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  004a0	0f b6 55 ed	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  004a4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  004a6	52		 push	 edx
  004a7	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  004aa	50		 push	 eax
  004ab	51		 push	 ecx
$LN81@NewWingCha:
  004ac	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  004b1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN84@NewWingCha:

; 4820 : 	}
; 4821 : }

  004b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004b7	5f		 pop	 edi
  004b8	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  004c2	5e		 pop	 esi
  004c3	33 cd		 xor	 ecx, ebp
  004c5	5b		 pop	 ebx
  004c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004cb	8b e5		 mov	 esp, ebp
  004cd	5d		 pop	 ebp
  004ce	c2 04 00	 ret	 4
  004d1	8d 49 00	 npad	 3
$LN85@NewWingCha:
  004d4	00 00 00 00	 DD	 $LN9@NewWingCha
  004d8	00 00 00 00	 DD	 $LN7@NewWingCha
  004dc	00 00 00 00	 DD	 $LN5@NewWingCha
  004e0	00 00 00 00	 DD	 $LN3@NewWingCha
?NewWingChaos_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::NewWingChaos_Mix
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_ChaosBox@@YAXXZ
text$yc	SEGMENT
??__Eg_ChaosBox@@YAXXZ PROC				; `dynamic initializer for 'g_ChaosBox'', COMDAT

; 24   : CChaosBox g_ChaosBox;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosBox@@3VCChaosBox@@A ; g_ChaosBox
  00005	e8 00 00 00 00	 call	 ??0CChaosBox@@QAE@XZ	; CChaosBox::CChaosBox
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ChaosBox@@YAXXZ ; `dynamic atexit destructor for 'g_ChaosBox''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ChaosBox@@YAXXZ ENDP				; `dynamic initializer for 'g_ChaosBox''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_ChaosBox@@YAXXZ
text$yd	SEGMENT
??__Fg_ChaosBox@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ChaosBox'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosBox@@3VCChaosBox@@A ; g_ChaosBox
  00005	e9 00 00 00 00	 jmp	 ??1CChaosBox@@UAE@XZ	; CChaosBox::~CChaosBox
??__Fg_ChaosBox@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ChaosBox''
text$yd	ENDS
PUBLIC	?g_ChaosBox@@3VCChaosBox@@A			; g_ChaosBox
_BSS	SEGMENT
?g_ChaosBox@@3VCChaosBox@@A DB 044H DUP (?)		; g_ChaosBox
_BSS	ENDS
CRT$XCU	SEGMENT
_g_ChaosBox$initializer$ DD FLAT:??__Eg_ChaosBox@@YAXXZ
CRT$XCU	ENDS
END
