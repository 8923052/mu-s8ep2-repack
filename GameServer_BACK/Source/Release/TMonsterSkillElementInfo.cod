; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\TMonsterSkillElementInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1OBJECTSTRUCT@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0
__ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1OBJECTSTRUCT@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1OBJECTSTRUCT@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0003b	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00041	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??1OBJECTSTRUCT@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetDefense
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\tmonsterskillelementinfo.cpp
;	COMDAT ?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetDefense, COMDAT
; _this$ = ecx

; 139  : 	this->m_iSkillElementDefense = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 140  : 	this->m_iSkillElementDefenseTime = 0;

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 141  : }

  0000d	c3		 ret	 0
?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetDefense
_TEXT	ENDS
PUBLIC	?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAttack
; Function compile flags: /Ogtp
;	COMDAT ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAttack, COMDAT
; _this$ = ecx

; 146  : 	this->m_iSkillElementAttack = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 147  : 	this->m_iSkillElementAttackTime = 0;

  00005	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 148  : }

  00008	c3		 ret	 0
?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAttack
_TEXT	ENDS
PUBLIC	?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAutoHP
; Function compile flags: /Ogtp
;	COMDAT ?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAutoHP, COMDAT
; _this$ = ecx

; 153  : 	this->m_iSkillElementAutoHP = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 154  : 	this->m_iSkillElementAutoHPCycle = 0;

  00005	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 155  : 	this->m_iSkillElementAutoHPTime = 0;

  00008	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 156  : }

  0000b	c3		 ret	 0
?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAutoHP
_TEXT	ENDS
PUBLIC	?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAutoMP
; Function compile flags: /Ogtp
;	COMDAT ?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAutoMP, COMDAT
; _this$ = ecx

; 161  : 	this->m_iSkillElementAutoMP = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 162  : 	this->m_iSkillElementAutoMPCycle = 0;

  00005	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 163  : 	this->m_iSkillElementAutoMPTime = 0;

  00008	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 164  : }

  0000b	c3		 ret	 0
?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAutoMP
_TEXT	ENDS
PUBLIC	?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetAutoAG
; Function compile flags: /Ogtp
;	COMDAT ?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetAutoAG, COMDAT
; _this$ = ecx

; 169  : 	this->m_iSkillElementAutoAG = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 170  : 	this->m_iSkillElementAutoAGCycle = 0;

  00005	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 171  : 	this->m_iSkillElementAutoAGTime = 0;

  00008	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 172  : }

  0000b	c3		 ret	 0
?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetAutoAG
_TEXT	ENDS
PUBLIC	?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetImmune
; Function compile flags: /Ogtp
;	COMDAT ?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetImmune, COMDAT
; _this$ = ecx

; 177  : 	this->m_iSkillElementImmuneNumber = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 178  : 	this->m_iSkillElementImmuneTime = 0;

  00005	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 179  : }

  00008	c3		 ret	 0
?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetImmune
_TEXT	ENDS
PUBLIC	?ResetResist@TMonsterSkillElementInfo@@QAEXXZ	; TMonsterSkillElementInfo::ResetResist
; Function compile flags: /Ogtp
;	COMDAT ?ResetResist@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetResist@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetResist, COMDAT
; _this$ = ecx

; 184  : 	this->m_iSkillElementResistNumber = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 185  : 	this->m_iSkillElementResistTime = 0;

  00005	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 186  : }

  00008	c3		 ret	 0
?ResetResist@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetResist
_TEXT	ENDS
PUBLIC	?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetModifyStat
; Function compile flags: /Ogtp
;	COMDAT ?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ PROC	; TMonsterSkillElementInfo::ResetModifyStat, COMDAT
; _this$ = ecx

; 192  : 	this->m_iSkillElementModifyStat = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 193  : 	this->m_iSkillElementModifyStatType = 0;

  00005	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 194  : 	this->m_iSkillElementModifyStatTime = 0;

  00008	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 195  : }

  0000b	c3		 ret	 0
?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ENDP	; TMonsterSkillElementInfo::ResetModifyStat
_TEXT	ENDS
PUBLIC	?ResetSpecialImmune@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetSpecialImmune
; Function compile flags: /Ogtp
;	COMDAT ?ResetSpecialImmune@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetSpecialImmune@TMonsterSkillElementInfo@@QAEXXZ PROC ; TMonsterSkillElementInfo::ResetSpecialImmune, COMDAT
; _this$ = ecx

; 199  : 	this->m_iSkillElementSpecialImmuneTime = 0;

  00000	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0

; 200  : }

  00007	c3		 ret	 0
?ResetSpecialImmune@TMonsterSkillElementInfo@@QAEXXZ ENDP ; TMonsterSkillElementInfo::ResetSpecialImmune
_TEXT	ENDS
PUBLIC	?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckDefenseTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckDefenseTime, COMDAT
; _this$ = ecx

; 206  : 	return (this->m_iSkillElementDefense <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 9f c0	 setg	 al

; 207  : }

  00007	c3		 ret	 0
?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckDefenseTime
_TEXT	ENDS
PUBLIC	?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAttackTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAttackTime, COMDAT
; _this$ = ecx

; 212  : 	return (this->m_iSkillElementAttack <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 9f c0	 setg	 al

; 213  : }

  00008	c3		 ret	 0
?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAttackTime
_TEXT	ENDS
PUBLIC	?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoHPTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAutoHPTime, COMDAT
; _this$ = ecx

; 218  : 	return (this->m_iSkillElementAutoHPTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00005	0f 9f c0	 setg	 al

; 219  : }

  00008	c3		 ret	 0
?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAutoHPTime
_TEXT	ENDS
PUBLIC	?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoMPTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAutoMPTime, COMDAT
; _this$ = ecx

; 224  : 	return (this->m_iSkillElementAutoMPTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 24	 cmp	 DWORD PTR [ecx+36], eax
  00005	0f 9f c0	 setg	 al

; 225  : }

  00008	c3		 ret	 0
?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAutoMPTime
_TEXT	ENDS
PUBLIC	?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoAGTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckAutoAGTime, COMDAT
; _this$ = ecx

; 230  : 	return (this->m_iSkillElementAutoAGTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 30	 cmp	 DWORD PTR [ecx+48], eax
  00005	0f 9f c0	 setg	 al

; 231  : }

  00008	c3		 ret	 0
?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckAutoAGTime
_TEXT	ENDS
PUBLIC	?CheckImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckImmuneTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckImmuneTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckImmuneTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckImmuneTime, COMDAT
; _this$ = ecx

; 236  : 	return (this->m_iSkillElementImmuneTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  00005	0f 9f c0	 setg	 al

; 237  : }

  00008	c3		 ret	 0
?CheckImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckImmuneTime
_TEXT	ENDS
PUBLIC	?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckResistTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::CheckResistTime, COMDAT
; _this$ = ecx

; 242  : 	return (this->m_iSkillElementResistTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 40	 cmp	 DWORD PTR [ecx+64], eax
  00005	0f 9f c0	 setg	 al

; 243  : }

  00008	c3		 ret	 0
?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::CheckResistTime
_TEXT	ENDS
PUBLIC	?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckModifyStatTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ PROC ; TMonsterSkillElementInfo::CheckModifyStatTime, COMDAT
; _this$ = ecx

; 248  : 	return (this->m_iSkillElementModifyStatTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 4c	 cmp	 DWORD PTR [ecx+76], eax
  00005	0f 9f c0	 setg	 al

; 249  : }

  00008	c3		 ret	 0
?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ENDP ; TMonsterSkillElementInfo::CheckModifyStatTime
_TEXT	ENDS
PUBLIC	?CheckSpecialImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckSpecialImmuneTime
; Function compile flags: /Ogtp
;	COMDAT ?CheckSpecialImmuneTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckSpecialImmuneTime@TMonsterSkillElementInfo@@QAEHXZ PROC ; TMonsterSkillElementInfo::CheckSpecialImmuneTime, COMDAT
; _this$ = ecx

; 253  : 	return (this->m_iSkillElementSpecialImmuneTime <= 0)?FALSE:TRUE;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 50	 cmp	 DWORD PTR [ecx+80], eax
  00005	0f 9f c0	 setg	 al

; 254  : }

  00008	c3		 ret	 0
?CheckSpecialImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ENDP ; TMonsterSkillElementInfo::CheckSpecialImmuneTime
_TEXT	ENDS
PUBLIC	?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecDefenseTime
; Function compile flags: /Ogtp
;	COMDAT ?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecDefenseTime, COMDAT
; _this$ = ecx

; 260  : 	this->m_iSkillElementDefenseTime--;

  00000	ff 49 04	 dec	 DWORD PTR [ecx+4]

; 261  : 	return (this->m_iSkillElementDefense > 0)?FALSE:TRUE;

  00003	33 c0		 xor	 eax, eax
  00005	39 01		 cmp	 DWORD PTR [ecx], eax
  00007	0f 9e c0	 setle	 al

; 262  : }

  0000a	c3		 ret	 0
?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecDefenseTime
_TEXT	ENDS
PUBLIC	?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAttackTime
; Function compile flags: /Ogtp
;	COMDAT ?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAttackTime, COMDAT
; _this$ = ecx

; 267  : 	this->m_iSkillElementAttackTime--;

  00000	ff 49 0c	 dec	 DWORD PTR [ecx+12]

; 268  : 	return (this->m_iSkillElementAttack > 0)?FALSE:TRUE;

  00003	33 c0		 xor	 eax, eax
  00005	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00008	0f 9e c0	 setle	 al

; 269  : }

  0000b	c3		 ret	 0
?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAttackTime
_TEXT	ENDS
PUBLIC	?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAutoHPTime
; Function compile flags: /Ogtp
;	COMDAT ?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAutoHPTime, COMDAT
; _this$ = ecx

; 274  : 	this->m_iSkillElementAutoHPTime--;

  00000	ff 49 18	 dec	 DWORD PTR [ecx+24]
  00003	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]

; 275  : 	return (this->m_iSkillElementAutoHPTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 276  : }

  0000d	c3		 ret	 0
?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAutoHPTime
_TEXT	ENDS
PUBLIC	?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAutoMPTime
; Function compile flags: /Ogtp
;	COMDAT ?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAutoMPTime, COMDAT
; _this$ = ecx

; 281  : 	this->m_iSkillElementAutoMPTime--;

  00000	ff 49 24	 dec	 DWORD PTR [ecx+36]
  00003	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]

; 282  : 	return (this->m_iSkillElementAutoMPTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 283  : }

  0000d	c3		 ret	 0
?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAutoMPTime
_TEXT	ENDS
PUBLIC	?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecAutoAGTime
; Function compile flags: /Ogtp
;	COMDAT ?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecAutoAGTime, COMDAT
; _this$ = ecx

; 288  : 	this->m_iSkillElementAutoAGTime--;

  00000	ff 49 30	 dec	 DWORD PTR [ecx+48]
  00003	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]

; 289  : 	return (this->m_iSkillElementAutoAGTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 290  : }

  0000d	c3		 ret	 0
?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecAutoAGTime
_TEXT	ENDS
PUBLIC	?DecImmuneTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecImmuneTime
; Function compile flags: /Ogtp
;	COMDAT ?DecImmuneTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecImmuneTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecImmuneTime, COMDAT
; _this$ = ecx

; 295  : 	this->m_iSkillElementImmuneTime--;

  00000	ff 49 38	 dec	 DWORD PTR [ecx+56]
  00003	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]

; 296  : 	return (this->m_iSkillElementImmuneTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 297  : }

  0000d	c3		 ret	 0
?DecImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecImmuneTime
_TEXT	ENDS
PUBLIC	?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ	; TMonsterSkillElementInfo::DecResistTime
; Function compile flags: /Ogtp
;	COMDAT ?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ PROC	; TMonsterSkillElementInfo::DecResistTime, COMDAT
; _this$ = ecx

; 302  : 	this->m_iSkillElementResistTime--;

  00000	ff 49 40	 dec	 DWORD PTR [ecx+64]
  00003	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]

; 303  : 	return (this->m_iSkillElementResistTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 304  : }

  0000d	c3		 ret	 0
?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ ENDP	; TMonsterSkillElementInfo::DecResistTime
_TEXT	ENDS
PUBLIC	?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecModifyStatTime
; Function compile flags: /Ogtp
;	COMDAT ?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ PROC ; TMonsterSkillElementInfo::DecModifyStatTime, COMDAT
; _this$ = ecx

; 309  : 	this->m_iSkillElementModifyStatTime--;

  00000	ff 49 4c	 dec	 DWORD PTR [ecx+76]
  00003	8b 49 4c	 mov	 ecx, DWORD PTR [ecx+76]

; 310  : 	return (this->m_iSkillElementModifyStatTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 311  : }

  0000d	c3		 ret	 0
?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ENDP ; TMonsterSkillElementInfo::DecModifyStatTime
_TEXT	ENDS
PUBLIC	?DecSpecialImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecSpecialImmuneTime
; Function compile flags: /Ogtp
;	COMDAT ?DecSpecialImmuneTime@TMonsterSkillElementInfo@@QAEHXZ
_TEXT	SEGMENT
?DecSpecialImmuneTime@TMonsterSkillElementInfo@@QAEHXZ PROC ; TMonsterSkillElementInfo::DecSpecialImmuneTime, COMDAT
; _this$ = ecx

; 315  : 	this->m_iSkillElementSpecialImmuneTime--;

  00000	ff 49 50	 dec	 DWORD PTR [ecx+80]
  00003	8b 49 50	 mov	 ecx, DWORD PTR [ecx+80]

; 316  : 	return (this->m_iSkillElementSpecialImmuneTime > 0)?FALSE:TRUE;

  00006	33 c0		 xor	 eax, eax
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 9e c0	 setle	 al

; 317  : }

  0000d	c3		 ret	 0
?DecSpecialImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ENDP ; TMonsterSkillElementInfo::DecSpecialImmuneTime
_TEXT	ENDS
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8a 5d 08	 mov	 bl, BYTE PTR ___flags$[ebp]
  0002e	f6 c3 02	 test	 bl, 2
  00031	74 3b		 je	 SHORT $LN3@vector
  00033	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00036	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  0003b	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003e	50		 push	 eax
  0003f	68 40 27 00 00	 push	 10048			; 00002740H
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0004a	f6 c3 01	 test	 bl, 1
  0004d	74 09		 je	 SHORT $LN2@vector
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00055	83 c4 04	 add	 esp, 4
$LN2@vector:
  00058	8b c7		 mov	 eax, edi
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN3@vector:
  0006e	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  00080	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00092	f6 c3 01	 test	 bl, 1
  00095	74 09		 je	 SHORT $LN1@vector
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009d	83 c4 04	 add	 esp, 4
$LN1@vector:
  000a0	8b c6		 mov	 eax, esi
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	__real@00000000
PUBLIC	__real@4059000000000000
PUBLIC	?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z ; TMonsterSkillElementInfo::CheckSkillElementInfoProc
EXTRN	?GCReFillSend@@YAXHGEEG@Z:PROC			; GCReFillSend
EXTRN	__fltused:DWORD
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv344 = -4						; size = 4
tv342 = -4						; size = 4
tv330 = -4						; size = 4
tv328 = -4						; size = 4
tv367 = 8						; size = 4
_lpObj$ = 8						; size = 4
tv347 = 10						; size = 2
tv333 = 10						; size = 2
?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z PROC ; TMonsterSkillElementInfo::CheckSkillElementInfoProc, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 18   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAttackTime() )

  00004	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	8d b2 78 20 00
	00		 lea	 esi, DWORD PTR [edx+8312]
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAttackTime
  00015	85 c0		 test	 eax, eax
  00017	74 0e		 je	 SHORT $LN26@CheckSkill

; 19   : 	{
; 20   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAttackTime() )

  00019	e8 00 00 00 00	 call	 ?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAttackTime
  0001e	85 c0		 test	 eax, eax
  00020	74 05		 je	 SHORT $LN26@CheckSkill

; 21   : 		{
; 22   : 			lpObj->m_MonsterSkillElementInfo.ResetAttack();

  00022	e8 00 00 00 00	 call	 ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAttack
$LN26@CheckSkill:

; 23   : 		}
; 24   : 	}
; 25   : 
; 26   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckDefenseTime() )

  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?CheckDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckDefenseTime
  0002e	85 c0		 test	 eax, eax
  00030	74 0e		 je	 SHORT $LN24@CheckSkill

; 27   : 	{
; 28   : 		if ( lpObj->m_MonsterSkillElementInfo.DecDefenseTime() )

  00032	e8 00 00 00 00	 call	 ?DecDefenseTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecDefenseTime
  00037	85 c0		 test	 eax, eax
  00039	74 05		 je	 SHORT $LN24@CheckSkill

; 29   : 		{
; 30   : 			lpObj->m_MonsterSkillElementInfo.ResetDefense();

  0003b	e8 00 00 00 00	 call	 ?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetDefense
$LN24@CheckSkill:

; 31   : 		}
; 32   : 	}
; 33   : 	
; 34   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAutoAGTime() )

  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?CheckAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoAGTime
  00047	85 c0		 test	 eax, eax
  00049	74 10		 je	 SHORT $LN22@CheckSkill

; 35   : 	{
; 36   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAutoAGTime() )

  0004b	e8 00 00 00 00	 call	 ?DecAutoAGTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAutoAGTime
  00050	85 c0		 test	 eax, eax
  00052	74 07		 je	 SHORT $LN22@CheckSkill

; 37   : 		{
; 38   : 			lpObj->m_MonsterSkillElementInfo.ResetAutoAG();

  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoAG
$LN22@CheckSkill:

; 39   : 		}
; 40   : 	}
; 41   : 
; 42   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAutoHPTime() )

  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?CheckAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoHPTime
  00062	85 c0		 test	 eax, eax
  00064	0f 84 ed 00 00
	00		 je	 $LN13@CheckSkill

; 43   : 	{
; 44   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAutoHPTime() )

  0006a	e8 00 00 00 00	 call	 ?DecAutoHPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAutoHPTime
  0006f	85 c0		 test	 eax, eax
  00071	74 0c		 je	 SHORT $LN20@CheckSkill

; 45   : 		{
; 46   : 			lpObj->m_MonsterSkillElementInfo.ResetAutoHP();

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoHP

; 47   : 		}
; 48   : 		else 

  0007a	e9 d8 00 00 00	 jmp	 $LN13@CheckSkill
$LN20@CheckSkill:

; 49   : 		{
; 50   : 			if ( lpObj->m_MonsterSkillElementInfo.m_iSkillElementAutoHPCycle == 110 )

  0007f	83 ba 8c 20 00
	00 6e		 cmp	 DWORD PTR [edx+8332], 110 ; 0000006eH

; 51   : 				lpObj->Life += lpObj->m_MonsterSkillElementInfo.m_iSkillElementAutoHP;

  00086	db 82 88 20 00
	00		 fild	 DWORD PTR [edx+8328]

; 52   : 			else

  0008c	74 0c		 je	 SHORT $LN36@CheckSkill

; 53   : 	
; 54   : 			lpObj->Life += lpObj->Life * lpObj->m_MonsterSkillElementInfo.m_iSkillElementAutoHP / 100.0f;

  0008e	d8 8a d8 00 00
	00		 fmul	 DWORD PTR [edx+216]
  00094	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
$LN36@CheckSkill:
  0009a	d8 82 d8 00 00
	00		 fadd	 DWORD PTR [edx+216]
  000a0	d9 9a d8 00 00
	00		 fstp	 DWORD PTR [edx+216]

; 55   : 
; 56   : 			if ( lpObj->Life <0 )

  000a6	d9 ee		 fldz
  000a8	d8 92 d8 00 00
	00		 fcom	 DWORD PTR [edx+216]
  000ae	df e0		 fnstsw	 ax
  000b0	f6 c4 41	 test	 ah, 65			; 00000041H
  000b3	75 19		 jne	 SHORT $LN31@CheckSkill

; 57   : 			{
; 58   : 				lpObj->Life = 0;
; 59   : 				GCReFillSend(lpObj->m_Index,(WORD)lpObj->Life, 0xFF, 0, lpObj->iShield);

  000b5	0f b7 82 2c 01
	00 00		 movzx	 eax, WORD PTR [edx+300]
  000bc	d9 9a d8 00 00
	00		 fstp	 DWORD PTR [edx+216]
  000c2	50		 push	 eax
  000c3	6a 00		 push	 0
  000c5	68 ff 00 00 00	 push	 255			; 000000ffH
  000ca	6a 00		 push	 0
  000cc	eb 7e		 jmp	 SHORT $LN37@CheckSkill
$LN31@CheckSkill:

; 55   : 
; 56   : 			if ( lpObj->Life <0 )

  000ce	dd d8		 fstp	 ST(0)

; 60   : 			}
; 61   : 			else if ( (lpObj->MaxLife + lpObj->AddLife) < lpObj->Life )

  000d0	db 82 24 01 00
	00		 fild	 DWORD PTR [edx+292]
  000d6	d8 82 dc 00 00
	00		 fadd	 DWORD PTR [edx+220]
  000dc	d9 82 d8 00 00
	00		 fld	 DWORD PTR [edx+216]
  000e2	d8 d9		 fcomp	 ST(1)
  000e4	df e0		 fnstsw	 ax
  000e6	f6 c4 41	 test	 ah, 65			; 00000041H

; 64   : 				GCReFillSend(lpObj->m_Index,(WORD)lpObj->Life, 0xFF, 0, lpObj->iShield);

  000e9	0f b7 82 2c 01
	00 00		 movzx	 eax, WORD PTR [edx+300]
  000f0	50		 push	 eax
  000f1	6a 00		 push	 0
  000f3	68 ff 00 00 00	 push	 255			; 000000ffH
  000f8	75 2a		 jne	 SHORT $LN34@CheckSkill

; 62   : 			{
; 63   : 				lpObj->Life = lpObj->MaxLife + lpObj->AddLife;

  000fa	d9 5d 08	 fstp	 DWORD PTR tv367[ebp]
  000fd	d9 45 08	 fld	 DWORD PTR tv367[ebp]

; 64   : 				GCReFillSend(lpObj->m_Index,(WORD)lpObj->Life, 0xFF, 0, lpObj->iShield);

  00100	d9 7d 0a	 fnstcw	 WORD PTR tv347[ebp]
  00103	0f b7 45 0a	 movzx	 eax, WORD PTR tv347[ebp]
  00107	d9 92 d8 00 00
	00		 fst	 DWORD PTR [edx+216]
  0010d	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00112	89 45 fc	 mov	 DWORD PTR tv344[ebp], eax
  00115	d9 6d fc	 fldcw	 WORD PTR tv344[ebp]
  00118	db 5d fc	 fistp	 DWORD PTR tv342[ebp]
  0011b	66 8b 4d fc	 mov	 cx, WORD PTR tv342[ebp]
  0011f	d9 6d 0a	 fldcw	 WORD PTR tv347[ebp]

; 65   : 			}
; 66   : 			else

  00122	eb 24		 jmp	 SHORT $LN38@CheckSkill
$LN34@CheckSkill:

; 67   : 			{
; 68   : 				GCReFillSend(lpObj->m_Index,(WORD)lpObj->Life, 0xFF, 0, lpObj->iShield);

  00124	d9 7d 0a	 fnstcw	 WORD PTR tv333[ebp]
  00127	0f b7 45 0a	 movzx	 eax, WORD PTR tv333[ebp]
  0012b	dd d8		 fstp	 ST(0)
  0012d	d9 82 d8 00 00
	00		 fld	 DWORD PTR [edx+216]
  00133	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00138	89 45 fc	 mov	 DWORD PTR tv330[ebp], eax
  0013b	d9 6d fc	 fldcw	 WORD PTR tv330[ebp]
  0013e	db 5d fc	 fistp	 DWORD PTR tv328[ebp]
  00141	66 8b 4d fc	 mov	 cx, WORD PTR tv328[ebp]
  00145	d9 6d 0a	 fldcw	 WORD PTR tv333[ebp]
$LN38@CheckSkill:
  00148	0f b7 c1	 movzx	 eax, cx
  0014b	50		 push	 eax
$LN37@CheckSkill:
  0014c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0014e	51		 push	 ecx
  0014f	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  00154	83 c4 14	 add	 esp, 20			; 00000014H
$LN13@CheckSkill:

; 69   : 			}
; 70   : 		}
; 71   : 	}
; 72   : 
; 73   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAutoMPTime() )

  00157	8b ce		 mov	 ecx, esi
  00159	e8 00 00 00 00	 call	 ?CheckAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAutoMPTime
  0015e	85 c0		 test	 eax, eax
  00160	74 10		 je	 SHORT $LN11@CheckSkill

; 74   : 	{
; 75   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAutoMPTime() )

  00162	e8 00 00 00 00	 call	 ?DecAutoMPTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAutoMPTime
  00167	85 c0		 test	 eax, eax
  00169	74 07		 je	 SHORT $LN11@CheckSkill

; 76   : 		{
; 77   : 			lpObj->m_MonsterSkillElementInfo.ResetAutoMP();

  0016b	8b ce		 mov	 ecx, esi
  0016d	e8 00 00 00 00	 call	 ?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoMP
$LN11@CheckSkill:

; 78   : 		}
; 79   : 	}
; 80   : 
; 81   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckAttackTime() )

  00172	8b ce		 mov	 ecx, esi
  00174	e8 00 00 00 00	 call	 ?CheckAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckAttackTime
  00179	85 c0		 test	 eax, eax
  0017b	74 0e		 je	 SHORT $LN9@CheckSkill

; 82   : 	{
; 83   : 		if ( lpObj->m_MonsterSkillElementInfo.DecAttackTime() )

  0017d	e8 00 00 00 00	 call	 ?DecAttackTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecAttackTime
  00182	85 c0		 test	 eax, eax
  00184	74 05		 je	 SHORT $LN9@CheckSkill

; 84   : 		{
; 85   : 			lpObj->m_MonsterSkillElementInfo.ResetAttack();

  00186	e8 00 00 00 00	 call	 ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAttack
$LN9@CheckSkill:

; 86   : 		}
; 87   : 	}
; 88   : 
; 89   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckImmuneTime() )

  0018b	8b ce		 mov	 ecx, esi
  0018d	e8 00 00 00 00	 call	 ?CheckImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckImmuneTime
  00192	85 c0		 test	 eax, eax
  00194	74 10		 je	 SHORT $LN7@CheckSkill

; 90   : 	{
; 91   : 		if ( lpObj->m_MonsterSkillElementInfo.DecImmuneTime() )

  00196	e8 00 00 00 00	 call	 ?DecImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecImmuneTime
  0019b	85 c0		 test	 eax, eax
  0019d	74 07		 je	 SHORT $LN7@CheckSkill

; 92   : 		{
; 93   : 			lpObj->m_MonsterSkillElementInfo.ResetImmune();

  0019f	8b ce		 mov	 ecx, esi
  001a1	e8 00 00 00 00	 call	 ?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetImmune
$LN7@CheckSkill:

; 94   : 		}
; 95   : 	}
; 96   : 
; 97   : 	if ( lpObj->m_MonsterSkillElementInfo.CheckResistTime() )

  001a6	8b ce		 mov	 ecx, esi
  001a8	e8 00 00 00 00	 call	 ?CheckResistTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckResistTime
  001ad	85 c0		 test	 eax, eax
  001af	74 10		 je	 SHORT $LN5@CheckSkill

; 98   : 	{
; 99   : 		if ( lpObj->m_MonsterSkillElementInfo.DecResistTime() )

  001b1	e8 00 00 00 00	 call	 ?DecResistTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecResistTime
  001b6	85 c0		 test	 eax, eax
  001b8	74 07		 je	 SHORT $LN5@CheckSkill

; 100  : 		{
; 101  : 			lpObj->m_MonsterSkillElementInfo.ResetResist();

  001ba	8b ce		 mov	 ecx, esi
  001bc	e8 00 00 00 00	 call	 ?ResetResist@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetResist
$LN5@CheckSkill:

; 102  : 		}
; 103  : 	}
; 104  : 
; 105  : 	if ( lpObj->m_MonsterSkillElementInfo.CheckModifyStatTime() )

  001c1	8b ce		 mov	 ecx, esi
  001c3	e8 00 00 00 00	 call	 ?CheckModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckModifyStatTime
  001c8	85 c0		 test	 eax, eax
  001ca	74 10		 je	 SHORT $LN3@CheckSkill

; 106  : 	{
; 107  : 		if ( lpObj->m_MonsterSkillElementInfo.DecModifyStatTime() )

  001cc	e8 00 00 00 00	 call	 ?DecModifyStatTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecModifyStatTime
  001d1	85 c0		 test	 eax, eax
  001d3	74 07		 je	 SHORT $LN3@CheckSkill

; 108  : 		{
; 109  : 			lpObj->m_MonsterSkillElementInfo.ResetModifyStat();

  001d5	8b ce		 mov	 ecx, esi
  001d7	e8 00 00 00 00	 call	 ?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetModifyStat
$LN3@CheckSkill:

; 110  : 		}
; 111  : 	}
; 112  : 
; 113  : 	if ( lpObj->m_MonsterSkillElementInfo.CheckSpecialImmuneTime() )

  001dc	8b ce		 mov	 ecx, esi
  001de	e8 00 00 00 00	 call	 ?CheckSpecialImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::CheckSpecialImmuneTime
  001e3	85 c0		 test	 eax, eax
  001e5	74 10		 je	 SHORT $LN1@CheckSkill

; 114  : 	{
; 115  : 		if ( lpObj->m_MonsterSkillElementInfo.DecSpecialImmuneTime() )

  001e7	e8 00 00 00 00	 call	 ?DecSpecialImmuneTime@TMonsterSkillElementInfo@@QAEHXZ ; TMonsterSkillElementInfo::DecSpecialImmuneTime
  001ec	85 c0		 test	 eax, eax
  001ee	74 07		 je	 SHORT $LN1@CheckSkill

; 116  : 		{
; 117  : 			lpObj->m_MonsterSkillElementInfo.ResetSpecialImmune();

  001f0	8b ce		 mov	 ecx, esi
  001f2	e8 00 00 00 00	 call	 ?ResetSpecialImmune@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetSpecialImmune
$LN1@CheckSkill:
  001f7	5e		 pop	 esi

; 118  : 		}
; 119  : 	}
; 120  : }

  001f8	8b e5		 mov	 esp, ebp
  001fa	5d		 pop	 ebp
  001fb	c3		 ret	 0
?CheckSkillElementInfoProc@TMonsterSkillElementInfo@@SAXPAUOBJECTSTRUCT@@@Z ENDP ; TMonsterSkillElementInfo::CheckSkillElementInfoProc
_TEXT	ENDS
PUBLIC	?Reset@TMonsterSkillElementInfo@@QAEXXZ		; TMonsterSkillElementInfo::Reset
; Function compile flags: /Ogtp
;	COMDAT ?Reset@TMonsterSkillElementInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@TMonsterSkillElementInfo@@QAEXXZ PROC		; TMonsterSkillElementInfo::Reset, COMDAT
; _this$ = ecx

; 125  : 	this->ResetDefense();

  00000	e8 00 00 00 00	 call	 ?ResetDefense@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetDefense

; 126  : 	this->ResetAttack();

  00005	e8 00 00 00 00	 call	 ?ResetAttack@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAttack

; 127  : 	this->ResetAutoHP();

  0000a	e8 00 00 00 00	 call	 ?ResetAutoHP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoHP

; 128  : 	this->ResetAutoMP();

  0000f	e8 00 00 00 00	 call	 ?ResetAutoMP@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoMP

; 129  : 	this->ResetAutoAG();

  00014	e8 00 00 00 00	 call	 ?ResetAutoAG@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetAutoAG

; 130  : 	this->ResetImmune();

  00019	e8 00 00 00 00	 call	 ?ResetImmune@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetImmune

; 131  : 	this->ResetResist();

  0001e	e8 00 00 00 00	 call	 ?ResetResist@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetResist

; 132  : 	this->ResetModifyStat();

  00023	e8 00 00 00 00	 call	 ?ResetModifyStat@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetModifyStat

; 133  : 	this->ResetSpecialImmune();

  00028	e9 00 00 00 00	 jmp	 ?ResetSpecialImmune@TMonsterSkillElementInfo@@QAEXXZ ; TMonsterSkillElementInfo::ResetSpecialImmune
?Reset@TMonsterSkillElementInfo@@QAEXXZ ENDP		; TMonsterSkillElementInfo::Reset
_TEXT	ENDS
END
