; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\CastleSiege.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB	; CryptoPP::FixedBlockSize<8>::BLOCKSIZE
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::IV_LENGTH
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::IV_LENGTH
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::IV_LENGTH
PUBLIC	?g_iNpcUpDfLevel_CGATE@@3PAY02HA		; g_iNpcUpDfLevel_CGATE
PUBLIC	?g_iNpcUpDfLevel_CSTATUE@@3PAY02HA		; g_iNpcUpDfLevel_CSTATUE
PUBLIC	?g_iNpcUpMaxHP_CGATE@@3PAY02HA			; g_iNpcUpMaxHP_CGATE
PUBLIC	?g_iNpcUpMaxHP_CSTATUE@@3PAY02HA		; g_iNpcUpMaxHP_CSTATUE
PUBLIC	?g_iNpcUpRgLevel_CSTATUE@@3PAY02HA		; g_iNpcUpRgLevel_CSTATUE
PUBLIC	?g_iCsUserReSpawnArea@@3PAY03HA			; g_iCsUserReSpawnArea
PUBLIC	?g_iNpcDefense_CGATE@@3PAHA			; g_iNpcDefense_CGATE
PUBLIC	?g_iNpcDefense_CSTATUE@@3PAHA			; g_iNpcDefense_CSTATUE
PUBLIC	?g_iCastleWallStepAxisY@@3PAHA			; g_iCastleWallStepAxisY
PUBLIC	?g_iCastleItemMixLimit@@3HA			; g_iCastleItemMixLimit
PUBLIC	?m_dwSIEGE_LOG_TICK@@3KA			; m_dwSIEGE_LOG_TICK
_BSS	SEGMENT
?m_dwSIEGE_LOG_TICK@@3KA DD 01H DUP (?)			; m_dwSIEGE_LOG_TICK
_BSS	ENDS
_DATA	SEGMENT
?g_iNpcUpDfLevel_CGATE@@3PAY02HA DD 01H			; g_iNpcUpDfLevel_CGATE
	DD	02H
	DD	02dc6c0H
	DD	02H
	DD	03H
	DD	02dc6c0H
	DD	03H
	DD	04H
	DD	02dc6c0H
?g_iNpcUpDfLevel_CSTATUE@@3PAY02HA DD 01H		; g_iNpcUpDfLevel_CSTATUE
	DD	03H
	DD	02dc6c0H
	DD	02H
	DD	05H
	DD	02dc6c0H
	DD	03H
	DD	07H
	DD	02dc6c0H
?g_iNpcUpMaxHP_CGATE@@3PAY02HA DD 0c3500H		; g_iNpcUpMaxHP_CGATE
	DD	02H
	DD	0f4240H
	DD	016e360H
	DD	03H
	DD	0f4240H
	DD	02dc6c0H
	DD	04H
	DD	0f4240H
?g_iNpcUpMaxHP_CSTATUE@@3PAY02HA DD 0b71b0H		; g_iNpcUpMaxHP_CSTATUE
	DD	03H
	DD	0f4240H
	DD	013d620H
	DD	05H
	DD	0f4240H
	DD	02625a0H
	DD	07H
	DD	0f4240H
?g_iNpcUpRgLevel_CSTATUE@@3PAY02HA DD 01H		; g_iNpcUpRgLevel_CSTATUE
	DD	03H
	DD	04c4b40H
	DD	02H
	DD	05H
	DD	04c4b40H
	DD	03H
	DD	07H
	DD	04c4b40H
?g_iCsUserReSpawnArea@@3PAY03HA DD 023H			; g_iCsUserReSpawnArea
	DD	011H
	DD	090H
	DD	030H
	DD	04aH
	DD	090H
	DD	073H
	DD	09aH
	DD	023H
	DD	0bH
	DD	090H
	DD	030H
?g_iNpcDefense_CGATE@@3PAHA DD 064H			; g_iNpcDefense_CGATE
	DD	0b4H
	DD	012cH
	DD	0208H
?g_iNpcDefense_CSTATUE@@3PAHA DD 050H			; g_iNpcDefense_CSTATUE
	DD	0b4H
	DD	0154H
	DD	0226H
?g_iCastleWallStepAxisY@@3PAHA DD 071H			; g_iCastleWallStepAxisY
	DD	0a0H
	DD	0cbH
?g_iCastleItemMixLimit@@3HA DD 01H			; g_iCastleItemMixLimit
_DATA	ENDS
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<24,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<24,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<16,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<16,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<8,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<8,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB
CONST	SEGMENT
?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB DD 08H	; CryptoPP::FixedBlockSize<8>::BLOCKSIZE
CONST	ENDS
PUBLIC	?set@PWMSG_HEAD@@QAEXPAEEH@Z			; PWMSG_HEAD::set
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\include\prodef.h
;	COMDAT ?set@PWMSG_HEAD@@QAEXPAEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?set@PWMSG_HEAD@@QAEXPAEEH@Z PROC			; PWMSG_HEAD::set, COMDAT
; _this$ = ecx

; 110  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 		lpBuf[0] = 0xC2;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 112  : 		lpBuf[1] = SET_NUMBERH(size);

  00006	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  00009	8b d1		 mov	 edx, ecx

; 113  : 		lpBuf[2] = SET_NUMBERL(size);

  0000b	88 48 02	 mov	 BYTE PTR [eax+2], cl

; 114  : 		lpBuf[3] = head;

  0000e	8a 4d 0c	 mov	 cl, BYTE PTR _head$[ebp]
  00011	c1 ea 08	 shr	 edx, 8
  00014	c6 00 c2	 mov	 BYTE PTR [eax], 194	; 000000c2H
  00017	88 50 01	 mov	 BYTE PTR [eax+1], dl
  0001a	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 115  : 	};

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?set@PWMSG_HEAD@@QAEXPAEEH@Z ENDP			; PWMSG_HEAD::set
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 139  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 141  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 142  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 143  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 144  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1OBJECTSTRUCT@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0
__ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1OBJECTSTRUCT@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1OBJECTSTRUCT@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0003b	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00041	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??1OBJECTSTRUCT@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
EXTRN	__difftime64:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
;	COMDAT _difftime
_TEXT	SEGMENT
__Time1$ = 8						; size = 8
__Time2$ = 16						; size = 8
_difftime PROC						; COMDAT

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 84   :     return _difftime64(_Time1,_Time2);

  00003	8b 45 14	 mov	 eax, DWORD PTR __Time2$[ebp+4]
  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Time2$[ebp]
  00009	8b 55 0c	 mov	 edx, DWORD PTR __Time1$[ebp+4]
  0000c	50		 push	 eax
  0000d	8b 45 08	 mov	 eax, DWORD PTR __Time1$[ebp]
  00010	51		 push	 ecx
  00011	52		 push	 edx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 __difftime64
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 85   : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_difftime ENDP
_TEXT	ENDS
EXTRN	__mktime64:PROC
; Function compile flags: /Ogtp
;	COMDAT _mktime
_TEXT	SEGMENT
_mktime	PROC						; COMDAT
; __Tm$ = eax

; 125  :     return _mktime64(_Tm);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __mktime64
  00006	83 c4 04	 add	 esp, 4

; 126  : }

  00009	c3		 ret	 0
_mktime	ENDP
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$ = eax

; 133  :     return _time64(_Time);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __time64
  00006	83 c4 04	 add	 esp, 4

; 134  : }

  00009	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	??_7_CS_SCHEDULE_DATA@@6B@			; _CS_SCHEDULE_DATA::`vftable'
PUBLIC	??1_CS_SCHEDULE_DATA@@UAE@XZ			; _CS_SCHEDULE_DATA::~_CS_SCHEDULE_DATA
PUBLIC	??_R4_CS_SCHEDULE_DATA@@6B@			; _CS_SCHEDULE_DATA::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU_CS_SCHEDULE_DATA@@@8			; _CS_SCHEDULE_DATA `RTTI Type Descriptor'
PUBLIC	??_R3_CS_SCHEDULE_DATA@@8			; _CS_SCHEDULE_DATA::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_CS_SCHEDULE_DATA@@8			; _CS_SCHEDULE_DATA::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_CS_SCHEDULE_DATA@@8		; _CS_SCHEDULE_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E_CS_SCHEDULE_DATA@@UAEPAXI@Z:PROC		; _CS_SCHEDULE_DATA::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_CS_SCHEDULE_DATA@@8
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
rdata$r	SEGMENT
??_R1A@?0A@EA@_CS_SCHEDULE_DATA@@8 DD FLAT:??_R0?AU_CS_SCHEDULE_DATA@@@8 ; _CS_SCHEDULE_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_CS_SCHEDULE_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R2_CS_SCHEDULE_DATA@@8
rdata$r	SEGMENT
??_R2_CS_SCHEDULE_DATA@@8 DD FLAT:??_R1A@?0A@EA@_CS_SCHEDULE_DATA@@8 ; _CS_SCHEDULE_DATA::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_CS_SCHEDULE_DATA@@8
rdata$r	SEGMENT
??_R3_CS_SCHEDULE_DATA@@8 DD 00H			; _CS_SCHEDULE_DATA::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_CS_SCHEDULE_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_CS_SCHEDULE_DATA@@@8
_DATA	SEGMENT
??_R0?AU_CS_SCHEDULE_DATA@@@8 DD FLAT:??_7type_info@@6B@ ; _CS_SCHEDULE_DATA `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_CS_SCHEDULE_DATA@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_CS_SCHEDULE_DATA@@6B@
rdata$r	SEGMENT
??_R4_CS_SCHEDULE_DATA@@6B@ DD 00H			; _CS_SCHEDULE_DATA::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU_CS_SCHEDULE_DATA@@@8
	DD	FLAT:??_R3_CS_SCHEDULE_DATA@@8
rdata$r	ENDS
;	COMDAT ??_7_CS_SCHEDULE_DATA@@6B@
CONST	SEGMENT
??_7_CS_SCHEDULE_DATA@@6B@ DD FLAT:??_R4_CS_SCHEDULE_DATA@@6B@ ; _CS_SCHEDULE_DATA::`vftable'
	DD	FLAT:??_E_CS_SCHEDULE_DATA@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1_CS_SCHEDULE_DATA@@UAE@XZ
_TEXT	SEGMENT
??1_CS_SCHEDULE_DATA@@UAE@XZ PROC			; _CS_SCHEDULE_DATA::~_CS_SCHEDULE_DATA, COMDAT
; _this$ = ecx

; 53   : 	virtual ~_CS_SCHEDULE_DATA(){};

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00006	c3		 ret	 0
??1_CS_SCHEDULE_DATA@@UAE@XZ ENDP			; _CS_SCHEDULE_DATA::~_CS_SCHEDULE_DATA
_TEXT	ENDS
PUBLIC	?Clear@_CS_SCHEDULE_DATA@@QAEXXZ		; _CS_SCHEDULE_DATA::Clear
; Function compile flags: /Ogtp
;	COMDAT ?Clear@_CS_SCHEDULE_DATA@@QAEXXZ
_TEXT	SEGMENT
?Clear@_CS_SCHEDULE_DATA@@QAEXXZ PROC			; _CS_SCHEDULE_DATA::Clear, COMDAT
; _this$ = ecx

; 57   : 		this->m_bIN_USE = 0;
; 58   : 		this->m_iSTATE = -1;

  00000	83 c8 ff	 or	 eax, -1
  00003	33 d2		 xor	 edx, edx
  00005	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00008	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 59   : 		this->m_iADD_DAY = -1;

  0000b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 60   : 		this->m_iADD_HOUR = -1; 

  0000e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 61   : 		this->m_iADD_MIN = -1;

  00011	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 62   : 		this->m_iGAP_SEC = 0;

  00014	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 63   : 	};

  00017	c3		 ret	 0
?Clear@_CS_SCHEDULE_DATA@@QAEXXZ ENDP			; _CS_SCHEDULE_DATA::Clear
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_G_CS_SCHEDULE_DATA@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_CS_SCHEDULE_DATA@@UAEPAXI@Z PROC			; _CS_SCHEDULE_DATA::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G_CS_SCHEDULE_DATA@@UAEPAXI@Z ENDP			; _CS_SCHEDULE_DATA::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7_CS_NPC_DATA@@6B@				; _CS_NPC_DATA::`vftable'
PUBLIC	??1_CS_NPC_DATA@@UAE@XZ				; _CS_NPC_DATA::~_CS_NPC_DATA
PUBLIC	??_R4_CS_NPC_DATA@@6B@				; _CS_NPC_DATA::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU_CS_NPC_DATA@@@8			; _CS_NPC_DATA `RTTI Type Descriptor'
PUBLIC	??_R3_CS_NPC_DATA@@8				; _CS_NPC_DATA::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_CS_NPC_DATA@@8				; _CS_NPC_DATA::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_CS_NPC_DATA@@8			; _CS_NPC_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_CS_NPC_DATA@@UAEPAXI@Z:PROC		; _CS_NPC_DATA::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_CS_NPC_DATA@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_CS_NPC_DATA@@8 DD FLAT:??_R0?AU_CS_NPC_DATA@@@8 ; _CS_NPC_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_CS_NPC_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R2_CS_NPC_DATA@@8
rdata$r	SEGMENT
??_R2_CS_NPC_DATA@@8 DD FLAT:??_R1A@?0A@EA@_CS_NPC_DATA@@8 ; _CS_NPC_DATA::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_CS_NPC_DATA@@8
rdata$r	SEGMENT
??_R3_CS_NPC_DATA@@8 DD 00H				; _CS_NPC_DATA::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_CS_NPC_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_CS_NPC_DATA@@@8
_DATA	SEGMENT
??_R0?AU_CS_NPC_DATA@@@8 DD FLAT:??_7type_info@@6B@	; _CS_NPC_DATA `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_CS_NPC_DATA@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_CS_NPC_DATA@@6B@
rdata$r	SEGMENT
??_R4_CS_NPC_DATA@@6B@ DD 00H				; _CS_NPC_DATA::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU_CS_NPC_DATA@@@8
	DD	FLAT:??_R3_CS_NPC_DATA@@8
rdata$r	ENDS
;	COMDAT ??_7_CS_NPC_DATA@@6B@
CONST	SEGMENT
??_7_CS_NPC_DATA@@6B@ DD FLAT:??_R4_CS_NPC_DATA@@6B@	; _CS_NPC_DATA::`vftable'
	DD	FLAT:??_E_CS_NPC_DATA@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1_CS_NPC_DATA@@UAE@XZ
_TEXT	SEGMENT
??1_CS_NPC_DATA@@UAE@XZ PROC				; _CS_NPC_DATA::~_CS_NPC_DATA, COMDAT
; _this$ = ecx

; 75   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_CS_NPC_DATA@@6B@

; 76   : 
; 77   : 	};

  00006	c3		 ret	 0
??1_CS_NPC_DATA@@UAE@XZ ENDP				; _CS_NPC_DATA::~_CS_NPC_DATA
_TEXT	ENDS
PUBLIC	?Clear@_CS_NPC_DATA@@QAEXXZ			; _CS_NPC_DATA::Clear
; Function compile flags: /Ogtp
;	COMDAT ?Clear@_CS_NPC_DATA@@QAEXXZ
_TEXT	SEGMENT
?Clear@_CS_NPC_DATA@@QAEXXZ PROC			; _CS_NPC_DATA::Clear, COMDAT
; _this$ = ecx

; 81   : 		m_bIN_USE = 0;
; 82   : 		m_iNPC_NUM = -1;

  00000	83 c8 ff	 or	 eax, -1
  00003	33 d2		 xor	 edx, edx
  00005	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00008	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 83   : 		m_iNPC_INDEX = -1;

  0000b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 84   : 		m_iNPC_LIVE = 0;

  0000e	89 51 68	 mov	 DWORD PTR [ecx+104], edx

; 85   : 		m_iNPC_AUTH = -1;

  00011	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 86   : 		m_bNPC_DBSAVE = 0;

  00014	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 87   : 		m_iNPC_SIDE = 0;

  00017	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 88   : 		m_iNPC_OBJINDEX = -1;

  0001a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 89   : 		m_iNPC_DF_LEVEL = 0;

  0001d	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 90   : 		m_iNPC_RG_LEVEL = 0;

  00020	89 51 20	 mov	 DWORD PTR [ecx+32], edx

; 91   : 		m_iNPC_MAXHP = 0;

  00023	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 92   : 		m_iNPC_HP = 0;

  00026	89 51 28	 mov	 DWORD PTR [ecx+40], edx

; 93   : 		m_iNPC_SX = -1;

  00029	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 94   : 		m_iNPC_SY = -1;

  0002c	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 95   : 		m_iNPC_DX = -1;

  0002f	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 96   : 		m_iNPC_DY = -1;

  00032	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 97   : 		m_iNPC_DIR = -1;

  00035	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 98   : 		m_iNPC_BASE_DF_LEVEL = 0;

  00038	89 51 40	 mov	 DWORD PTR [ecx+64], edx

; 99   : 		m_iNPC_BASE_RG_LEVEL = 0;

  0003b	89 51 44	 mov	 DWORD PTR [ecx+68], edx

; 100  : 		m_iNPC_BASE_MAXHP = 0;

  0003e	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 101  : 		m_iNPC_BASE_HP = 0;

  00041	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 102  : 		m_iNPC_BASE_SX = -1;

  00044	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 103  : 		m_iNPC_BASE_SY = -1;

  00047	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 104  : 		m_iNPC_BASE_DX = -1;

  0004a	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 105  : 		m_iNPC_BASE_DY = -1;

  0004d	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 106  : 		m_iNPC_BASE_DIR = -1;

  00050	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 107  : 		m_iCsNpcExistVal = 0;

  00053	89 51 70	 mov	 DWORD PTR [ecx+112], edx

; 108  : 	}

  00056	c3		 ret	 0
?Clear@_CS_NPC_DATA@@QAEXXZ ENDP			; _CS_NPC_DATA::Clear
_TEXT	ENDS
PUBLIC	?SetBaseValue@_CS_NPC_DATA@@QAEXXZ		; _CS_NPC_DATA::SetBaseValue
; Function compile flags: /Ogtp
;	COMDAT ?SetBaseValue@_CS_NPC_DATA@@QAEXXZ
_TEXT	SEGMENT
?SetBaseValue@_CS_NPC_DATA@@QAEXXZ PROC			; _CS_NPC_DATA::SetBaseValue, COMDAT
; _this$ = ecx

; 112  : 		m_iNPC_DF_LEVEL = m_iNPC_BASE_DF_LEVEL;

  00000	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]

; 113  : 		m_iNPC_RG_LEVEL = m_iNPC_BASE_RG_LEVEL;

  00003	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 114  : 		m_iNPC_MAXHP = m_iNPC_BASE_MAXHP;

  00009	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  0000c	89 51 20	 mov	 DWORD PTR [ecx+32], edx

; 115  : 		m_iNPC_HP = m_iNPC_BASE_HP;

  0000f	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00012	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 116  : 		m_iNPC_SX = m_iNPC_BASE_SX;

  00015	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00018	89 51 28	 mov	 DWORD PTR [ecx+40], edx

; 117  : 		m_iNPC_SY = m_iNPC_BASE_SY;

  0001b	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0001e	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 118  : 		m_iNPC_DX = m_iNPC_BASE_DX;

  00021	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00024	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 119  : 		m_iNPC_DY = m_iNPC_BASE_DY;

  00027	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0002a	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 120  : 		m_iNPC_DIR = m_iNPC_BASE_DIR;

  0002d	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00030	89 51 38	 mov	 DWORD PTR [ecx+56], edx
  00033	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 121  : 	}

  00036	c3		 ret	 0
?SetBaseValue@_CS_NPC_DATA@@QAEXXZ ENDP			; _CS_NPC_DATA::SetBaseValue
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_G_CS_NPC_DATA@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_CS_NPC_DATA@@UAEPAXI@Z PROC			; _CS_NPC_DATA::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_CS_NPC_DATA@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar@2:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G_CS_NPC_DATA@@UAEPAXI@Z ENDP			; _CS_NPC_DATA::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7_CS_TOTAL_GUILD_DATA@@6B@			; _CS_TOTAL_GUILD_DATA::`vftable'
PUBLIC	??1_CS_TOTAL_GUILD_DATA@@UAE@XZ			; _CS_TOTAL_GUILD_DATA::~_CS_TOTAL_GUILD_DATA
PUBLIC	??_R4_CS_TOTAL_GUILD_DATA@@6B@			; _CS_TOTAL_GUILD_DATA::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU_CS_TOTAL_GUILD_DATA@@@8		; _CS_TOTAL_GUILD_DATA `RTTI Type Descriptor'
PUBLIC	??_R3_CS_TOTAL_GUILD_DATA@@8			; _CS_TOTAL_GUILD_DATA::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_CS_TOTAL_GUILD_DATA@@8			; _CS_TOTAL_GUILD_DATA::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_CS_TOTAL_GUILD_DATA@@8		; _CS_TOTAL_GUILD_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_CS_TOTAL_GUILD_DATA@@UAEPAXI@Z:PROC	; _CS_TOTAL_GUILD_DATA::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_CS_TOTAL_GUILD_DATA@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_CS_TOTAL_GUILD_DATA@@8 DD FLAT:??_R0?AU_CS_TOTAL_GUILD_DATA@@@8 ; _CS_TOTAL_GUILD_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_CS_TOTAL_GUILD_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R2_CS_TOTAL_GUILD_DATA@@8
rdata$r	SEGMENT
??_R2_CS_TOTAL_GUILD_DATA@@8 DD FLAT:??_R1A@?0A@EA@_CS_TOTAL_GUILD_DATA@@8 ; _CS_TOTAL_GUILD_DATA::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_CS_TOTAL_GUILD_DATA@@8
rdata$r	SEGMENT
??_R3_CS_TOTAL_GUILD_DATA@@8 DD 00H			; _CS_TOTAL_GUILD_DATA::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_CS_TOTAL_GUILD_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_CS_TOTAL_GUILD_DATA@@@8
_DATA	SEGMENT
??_R0?AU_CS_TOTAL_GUILD_DATA@@@8 DD FLAT:??_7type_info@@6B@ ; _CS_TOTAL_GUILD_DATA `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_CS_TOTAL_GUILD_DATA@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_CS_TOTAL_GUILD_DATA@@6B@
rdata$r	SEGMENT
??_R4_CS_TOTAL_GUILD_DATA@@6B@ DD 00H			; _CS_TOTAL_GUILD_DATA::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU_CS_TOTAL_GUILD_DATA@@@8
	DD	FLAT:??_R3_CS_TOTAL_GUILD_DATA@@8
rdata$r	ENDS
;	COMDAT ??_7_CS_TOTAL_GUILD_DATA@@6B@
CONST	SEGMENT
??_7_CS_TOTAL_GUILD_DATA@@6B@ DD FLAT:??_R4_CS_TOTAL_GUILD_DATA@@6B@ ; _CS_TOTAL_GUILD_DATA::`vftable'
	DD	FLAT:??_E_CS_TOTAL_GUILD_DATA@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1_CS_TOTAL_GUILD_DATA@@UAE@XZ
_TEXT	SEGMENT
??1_CS_TOTAL_GUILD_DATA@@UAE@XZ PROC			; _CS_TOTAL_GUILD_DATA::~_CS_TOTAL_GUILD_DATA, COMDAT
; _this$ = ecx

; 204  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@

; 205  : 
; 206  : 	};

  00006	c3		 ret	 0
??1_CS_TOTAL_GUILD_DATA@@UAE@XZ ENDP			; _CS_TOTAL_GUILD_DATA::~_CS_TOTAL_GUILD_DATA
_TEXT	ENDS
PUBLIC	?Clear@_CS_TOTAL_GUILD_DATA@@QAEXXZ		; _CS_TOTAL_GUILD_DATA::Clear
; Function compile flags: /Ogtp
;	COMDAT ?Clear@_CS_TOTAL_GUILD_DATA@@QAEXXZ
_TEXT	SEGMENT
?Clear@_CS_TOTAL_GUILD_DATA@@QAEXXZ PROC		; _CS_TOTAL_GUILD_DATA::Clear, COMDAT
; _this$ = ecx

; 210  : 		m_bIN_USE = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 211  : 		m_iCsGuildID = 0;

  00005	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 212  : 		m_bGuildInvolved = 0;

  00008	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 213  : 	};

  0000b	c3		 ret	 0
?Clear@_CS_TOTAL_GUILD_DATA@@QAEXXZ ENDP		; _CS_TOTAL_GUILD_DATA::Clear
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_G_CS_TOTAL_GUILD_DATA@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_CS_TOTAL_GUILD_DATA@@UAEPAXI@Z PROC		; _CS_TOTAL_GUILD_DATA::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar@3
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar@3:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G_CS_TOTAL_GUILD_DATA@@UAEPAXI@Z ENDP		; _CS_TOTAL_GUILD_DATA::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7_CS_MINIMAP_DATA@@6B@			; _CS_MINIMAP_DATA::`vftable'
PUBLIC	??1_CS_MINIMAP_DATA@@UAE@XZ			; _CS_MINIMAP_DATA::~_CS_MINIMAP_DATA
PUBLIC	??_R4_CS_MINIMAP_DATA@@6B@			; _CS_MINIMAP_DATA::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU_CS_MINIMAP_DATA@@@8			; _CS_MINIMAP_DATA `RTTI Type Descriptor'
PUBLIC	??_R3_CS_MINIMAP_DATA@@8			; _CS_MINIMAP_DATA::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_CS_MINIMAP_DATA@@8			; _CS_MINIMAP_DATA::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_CS_MINIMAP_DATA@@8		; _CS_MINIMAP_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_CS_MINIMAP_DATA@@UAEPAXI@Z:PROC		; _CS_MINIMAP_DATA::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_CS_MINIMAP_DATA@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_CS_MINIMAP_DATA@@8 DD FLAT:??_R0?AU_CS_MINIMAP_DATA@@@8 ; _CS_MINIMAP_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_CS_MINIMAP_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R2_CS_MINIMAP_DATA@@8
rdata$r	SEGMENT
??_R2_CS_MINIMAP_DATA@@8 DD FLAT:??_R1A@?0A@EA@_CS_MINIMAP_DATA@@8 ; _CS_MINIMAP_DATA::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_CS_MINIMAP_DATA@@8
rdata$r	SEGMENT
??_R3_CS_MINIMAP_DATA@@8 DD 00H				; _CS_MINIMAP_DATA::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_CS_MINIMAP_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_CS_MINIMAP_DATA@@@8
_DATA	SEGMENT
??_R0?AU_CS_MINIMAP_DATA@@@8 DD FLAT:??_7type_info@@6B@	; _CS_MINIMAP_DATA `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_CS_MINIMAP_DATA@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_CS_MINIMAP_DATA@@6B@
rdata$r	SEGMENT
??_R4_CS_MINIMAP_DATA@@6B@ DD 00H			; _CS_MINIMAP_DATA::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU_CS_MINIMAP_DATA@@@8
	DD	FLAT:??_R3_CS_MINIMAP_DATA@@8
rdata$r	ENDS
;	COMDAT ??_7_CS_MINIMAP_DATA@@6B@
CONST	SEGMENT
??_7_CS_MINIMAP_DATA@@6B@ DD FLAT:??_R4_CS_MINIMAP_DATA@@6B@ ; _CS_MINIMAP_DATA::`vftable'
	DD	FLAT:??_E_CS_MINIMAP_DATA@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1_CS_MINIMAP_DATA@@UAE@XZ
_TEXT	SEGMENT
??1_CS_MINIMAP_DATA@@UAE@XZ PROC			; _CS_MINIMAP_DATA::~_CS_MINIMAP_DATA, COMDAT
; _this$ = ecx

; 229  : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_CS_MINIMAP_DATA@@6B@

; 230  : 
; 231  : 	};

  00006	c3		 ret	 0
??1_CS_MINIMAP_DATA@@UAE@XZ ENDP			; _CS_MINIMAP_DATA::~_CS_MINIMAP_DATA
_TEXT	ENDS
PUBLIC	?Clear@_CS_MINIMAP_DATA@@QAEXXZ			; _CS_MINIMAP_DATA::Clear
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Clear@_CS_MINIMAP_DATA@@QAEXXZ
_TEXT	SEGMENT
?Clear@_CS_MINIMAP_DATA@@QAEXXZ PROC			; _CS_MINIMAP_DATA::Clear, COMDAT
; _this$ = ecx

; 235  : 		m_iGuildMasterIndex = -1;
; 236  : 		memset(m_szGuildName,0x00,sizeof(m_szGuildName));

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  0000c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000f	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00012	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 237  : 		memset(m_stMiniMapPoint,0x00,sizeof(m_stMiniMapPoint));

  00015	68 d0 07 00 00	 push	 2000			; 000007d0H
  0001a	50		 push	 eax
  0001b	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0001e	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _memset
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 238  : 		m_iMiniMapPointCount = 0;

  0002a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00031	5e		 pop	 esi

; 239  : 	};

  00032	c3		 ret	 0
?Clear@_CS_MINIMAP_DATA@@QAEXXZ ENDP			; _CS_MINIMAP_DATA::Clear
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_G_CS_MINIMAP_DATA@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_CS_MINIMAP_DATA@@UAEPAXI@Z PROC			; _CS_MINIMAP_DATA::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar@4
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar@4:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G_CS_MINIMAP_DATA@@UAEPAXI@Z ENDP			; _CS_MINIMAP_DATA::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_ARGB@@YAKEEEE@Z				; _ARGB
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\tnotice.h
;	COMDAT ?_ARGB@@YAKEEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_r$ = 12						; size = 1
_g$ = 16						; size = 1
_b$ = 20						; size = 1
?_ARGB@@YAKEEEE@Z PROC					; _ARGB, COMDAT

; 9    : __inline DWORD _ARGB(BYTE a, BYTE r, BYTE g, BYTE b){ return a*16777216 + b*65536 + g*256 + r;}; // in tnotice.h : line 8

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _a$[ebp]
  00007	0f b6 4d 14	 movzx	 ecx, BYTE PTR _b$[ebp]
  0000b	0f b6 55 10	 movzx	 edx, BYTE PTR _g$[ebp]
  0000f	c1 e0 08	 shl	 eax, 8
  00012	03 c1		 add	 eax, ecx
  00014	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _r$[ebp]
  00018	c1 e0 08	 shl	 eax, 8
  0001b	03 c2		 add	 eax, edx
  0001d	c1 e0 08	 shl	 eax, 8
  00020	03 c1		 add	 eax, ecx
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_ARGB@@YAKEEEE@Z ENDP					; _ARGB
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5e		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8b d8		 mov	 ebx, eax
  00048	83 c4 04	 add	 esp, 4
  0004b	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3e		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8b d8		 mov	 ebx, eax
  00063	83 c4 04	 add	 esp, 4
  00066	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	53		 push	 ebx
  0006c	e8 00 00 00 00	 call	 _isspace
  00071	83 c4 04	 add	 esp, 4
  00074	85 c0		 test	 eax, eax
  00076	75 a8		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00078	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007b	56		 push	 esi
  0007c	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007f	0f 87 29 01 00
	00		 ja	 $LN6@GetToken
  00085	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN46@GetToken[eax]
  0008c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[eax*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00093	b8 02 00 00 00	 mov	 eax, 2
  00098	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	33 cd		 xor	 ecx, ebp
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000ac	e9 92 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b1	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000b6	e9 88 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000bb	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c0	e9 7e 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000c5	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000ca	e9 74 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000cf	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000d4	e9 6a 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  000df	51		 push	 ecx
  000e0	53		 push	 ebx
  000e1	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000ec	52		 push	 edx
  000ed	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f0	e8 00 00 00 00	 call	 _getc
  000f5	8b d8		 mov	 ebx, eax
  000f7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fa	83 fb ff	 cmp	 ebx, -1
  000fd	74 30		 je	 SHORT $LN12@GetToken
  000ff	90		 npad	 1
$LL13@GetToken:
  00100	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00103	74 12		 je	 SHORT $LN11@GetToken
  00105	53		 push	 ebx
  00106	e8 00 00 00 00	 call	 _isdigit
  0010b	83 c4 04	 add	 esp, 4
  0010e	85 c0		 test	 eax, eax
  00110	75 05		 jne	 SHORT $LN11@GetToken
  00112	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  00115	75 18		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  0011c	88 1e		 mov	 BYTE PTR [esi], bl
  0011e	50		 push	 eax

; 102  : 			p++;

  0011f	46		 inc	 esi
  00120	e8 00 00 00 00	 call	 _getc
  00125	8b d8		 mov	 ebx, eax
  00127	83 c4 04	 add	 esp, 4
  0012a	83 fb ff	 cmp	 ebx, -1
  0012d	75 d1		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  0012f	8d 4d 98	 lea	 ecx, DWORD PTR _TempString$[ebp]
  00132	51		 push	 ecx
  00133	c6 06 00	 mov	 BYTE PTR [esi], 0
  00136	e8 00 00 00 00	 call	 _atof
  0013b	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00141	83 c4 04	 add	 esp, 4
  00144	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  00145	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  0014f	b8 01 00 00 00	 mov	 eax, 1
  00154	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	33 cd		 xor	 ecx, ebp
  0015a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  00163	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00169	52		 push	 edx
  0016a	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  0016f	e8 00 00 00 00	 call	 _getc
  00174	83 c4 04	 add	 esp, 4
  00177	83 f8 ff	 cmp	 eax, -1
  0017a	74 23		 je	 SHORT $LN8@GetToken
  0017c	8d 64 24 00	 npad	 4
$LL9@GetToken:
  00180	83 f8 22	 cmp	 eax, 34			; 00000022H
  00183	0f 84 96 00 00
	00		 je	 $LN7@GetToken

; 113  : 		{
; 114  : 			*p = ch;

  00189	88 06		 mov	 BYTE PTR [esi], al
  0018b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00190	50		 push	 eax

; 115  : 			p++;

  00191	46		 inc	 esi
  00192	e8 00 00 00 00	 call	 _getc
  00197	83 c4 04	 add	 esp, 4
  0019a	83 f8 ff	 cmp	 eax, -1
  0019d	75 e1		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  0019f	83 f8 22	 cmp	 eax, 34			; 00000022H
  001a2	74 7b		 je	 SHORT $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001aa	51		 push	 ecx
  001ab	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001ac	eb 69		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001ae	53		 push	 ebx
  001af	e8 00 00 00 00	 call	 _isalpha
  001b4	83 c4 04	 add	 esp, 4
  001b7	85 c0		 test	 eax, eax
  001b9	0f 84 7f 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  001c5	52		 push	 edx
  001c6	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001cc	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d1	e8 00 00 00 00	 call	 _getc
  001d6	8b d8		 mov	 ebx, eax
  001d8	83 c4 04	 add	 esp, 4
  001db	83 fb ff	 cmp	 ebx, -1
  001de	74 2f		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e0	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  001e3	74 12		 je	 SHORT $LN2@GetToken
  001e5	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  001e8	74 0d		 je	 SHORT $LN2@GetToken
  001ea	53		 push	 ebx
  001eb	e8 00 00 00 00	 call	 _isalnum
  001f0	83 c4 04	 add	 esp, 4
  001f3	85 c0		 test	 eax, eax
  001f5	74 18		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  001f7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  001fc	88 1e		 mov	 BYTE PTR [esi], bl
  001fe	50		 push	 eax

; 135  : 				p++;

  001ff	46		 inc	 esi
  00200	e8 00 00 00 00	 call	 _getc
  00205	8b d8		 mov	 ebx, eax
  00207	83 c4 04	 add	 esp, 4
  0020a	83 fb ff	 cmp	 ebx, -1
  0020d	75 d1		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0020f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00215	51		 push	 ecx
  00216	53		 push	 ebx
$LN49@GetToken:
  00217	e8 00 00 00 00	 call	 _ungetc
  0021c	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0021f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00222	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00223	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0022d	33 c0		 xor	 eax, eax
  0022f	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00230	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00233	33 cd		 xor	 ecx, ebp
  00235	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0023e	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5e		 pop	 esi
  00247	33 cd		 xor	 ecx, ebp
  00249	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0024e	5b		 pop	 ebx
  0024f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00254	8b e5		 mov	 esp, ebp
  00256	5d		 pop	 ebp
  00257	c3		 ret	 0
$LN50@GetToken:
  00258	00 00 00 00	 DD	 $LN10@GetToken
  0025c	00 00 00 00	 DD	 $LN19@GetToken
  00260	00 00 00 00	 DD	 $LN17@GetToken
  00264	00 00 00 00	 DD	 $LN14@GetToken
  00268	00 00 00 00	 DD	 $LN18@GetToken
  0026c	00 00 00 00	 DD	 $LN16@GetToken
  00270	00 00 00 00	 DD	 $LN15@GetToken
  00274	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00278	00		 DB	 0
  00279	01		 DB	 1
  0027a	07		 DB	 7
  0027b	07		 DB	 7
  0027c	07		 DB	 7
  0027d	07		 DB	 7
  0027e	07		 DB	 7
  0027f	07		 DB	 7
  00280	07		 DB	 7
  00281	07		 DB	 7
  00282	02		 DB	 2
  00283	03		 DB	 3
  00284	03		 DB	 3
  00285	07		 DB	 7
  00286	03		 DB	 3
  00287	03		 DB	 3
  00288	03		 DB	 3
  00289	03		 DB	 3
  0028a	03		 DB	 3
  0028b	03		 DB	 3
  0028c	03		 DB	 3
  0028d	03		 DB	 3
  0028e	03		 DB	 3
  0028f	03		 DB	 3
  00290	07		 DB	 7
  00291	04		 DB	 4
  00292	07		 DB	 7
  00293	07		 DB	 7
  00294	07		 DB	 7
  00295	07		 DB	 7
  00296	07		 DB	 7
  00297	07		 DB	 7
  00298	07		 DB	 7
  00299	07		 DB	 7
  0029a	07		 DB	 7
  0029b	07		 DB	 7
  0029c	07		 DB	 7
  0029d	07		 DB	 7
  0029e	07		 DB	 7
  0029f	07		 DB	 7
  002a0	07		 DB	 7
  002a1	07		 DB	 7
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	05		 DB	 5
  002d2	07		 DB	 7
  002d3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?ScheduleStateCompFunc@CCastleSiege@@SAEAAU_CS_SCHEDULE_DATA@@0@Z ; CCastleSiege::ScheduleStateCompFunc
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
;	COMDAT ?ScheduleStateCompFunc@CCastleSiege@@SAEAAU_CS_SCHEDULE_DATA@@0@Z
_TEXT	SEGMENT
_A$ = 8							; size = 4
_B$ = 12						; size = 4
?ScheduleStateCompFunc@CCastleSiege@@SAEAAU_CS_SCHEDULE_DATA@@0@Z PROC ; CCastleSiege::ScheduleStateCompFunc, COMDAT

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	if(A.m_iSTATE > B.m_iSTATE)

  00003	8b 45 08	 mov	 eax, DWORD PTR _A$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	8b 55 0c	 mov	 edx, DWORD PTR _B$[ebp]
  0000c	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0000f	0f 9e c0	 setle	 al

; 96   : 	{
; 97   : 		return false;
; 98   : 	}
; 99   : return true;
; 100  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ScheduleStateCompFunc@CCastleSiege@@SAEAAU_CS_SCHEDULE_DATA@@0@Z ENDP ; CCastleSiege::ScheduleStateCompFunc
_TEXT	ENDS
PUBLIC	??0_CS_SCHEDULE_DATA@@QAE@ABU0@@Z		; _CS_SCHEDULE_DATA::_CS_SCHEDULE_DATA
; Function compile flags: /Ogtp
;	COMDAT ??0_CS_SCHEDULE_DATA@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_CS_SCHEDULE_DATA@@QAE@ABU0@@Z PROC			; _CS_SCHEDULE_DATA::_CS_SCHEDULE_DATA, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00014	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00020	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00023	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00026	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00029	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0002c	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0002f	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0_CS_SCHEDULE_DATA@@QAE@ABU0@@Z ENDP			; _CS_SCHEDULE_DATA::_CS_SCHEDULE_DATA
_TEXT	ENDS
PUBLIC	??0_CS_NPC_DATA@@QAE@ABU0@@Z			; _CS_NPC_DATA::_CS_NPC_DATA
; Function compile flags: /Ogtp
;	COMDAT ??0_CS_NPC_DATA@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_CS_NPC_DATA@@QAE@ABU0@@Z PROC			; _CS_NPC_DATA::_CS_NPC_DATA, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_NPC_DATA@@6B@
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00014	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00020	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00023	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00026	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00029	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0002c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0002f	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00032	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00035	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00038	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0003b	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0003e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00041	89 50 24	 mov	 DWORD PTR [eax+36], edx
  00044	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00047	89 50 28	 mov	 DWORD PTR [eax+40], edx
  0004a	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0004d	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00050	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00053	89 50 30	 mov	 DWORD PTR [eax+48], edx
  00056	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00059	89 50 34	 mov	 DWORD PTR [eax+52], edx
  0005c	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0005f	89 50 38	 mov	 DWORD PTR [eax+56], edx
  00062	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00065	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  00068	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0006b	89 50 40	 mov	 DWORD PTR [eax+64], edx
  0006e	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00071	89 50 44	 mov	 DWORD PTR [eax+68], edx
  00074	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00077	89 50 48	 mov	 DWORD PTR [eax+72], edx
  0007a	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0007d	89 50 4c	 mov	 DWORD PTR [eax+76], edx
  00080	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00083	89 50 50	 mov	 DWORD PTR [eax+80], edx
  00086	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00089	89 50 54	 mov	 DWORD PTR [eax+84], edx
  0008c	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  0008f	89 50 58	 mov	 DWORD PTR [eax+88], edx
  00092	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00095	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  00098	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  0009b	89 50 60	 mov	 DWORD PTR [eax+96], edx
  0009e	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  000a1	89 50 64	 mov	 DWORD PTR [eax+100], edx
  000a4	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  000a7	89 50 68	 mov	 DWORD PTR [eax+104], edx
  000aa	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  000ad	89 50 6c	 mov	 DWORD PTR [eax+108], edx
  000b0	0f b6 51 70	 movzx	 edx, BYTE PTR [ecx+112]
  000b4	88 50 70	 mov	 BYTE PTR [eax+112], dl
  000b7	0f b6 51 71	 movzx	 edx, BYTE PTR [ecx+113]
  000bb	88 50 71	 mov	 BYTE PTR [eax+113], dl
  000be	0f b6 51 72	 movzx	 edx, BYTE PTR [ecx+114]
  000c2	88 50 72	 mov	 BYTE PTR [eax+114], dl
  000c5	0f b6 51 73	 movzx	 edx, BYTE PTR [ecx+115]
  000c9	88 50 73	 mov	 BYTE PTR [eax+115], dl
  000cc	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  000cf	89 48 70	 mov	 DWORD PTR [eax+112], ecx
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
??0_CS_NPC_DATA@@QAE@ABU0@@Z ENDP			; _CS_NPC_DATA::_CS_NPC_DATA
_TEXT	ENDS
PUBLIC	?NotifySelfCsJoinSide@CCastleSiege@@QAEXH@Z	; CCastleSiege::NotifySelfCsJoinSide
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z:PROC ; gObjClearBuffEffect
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
; Function compile flags: /Ogtp
;	COMDAT ?NotifySelfCsJoinSide@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 5
_iIndex$ = 8						; size = 4
?NotifySelfCsJoinSide@CCastleSiege@@QAEXH@Z PROC	; CCastleSiege::NotifySelfCsJoinSide, COMDAT
; _this$ = ecx

; 885  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 886  : 	if(gObjIsConnected(iIndex) == FALSE)

  00007	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  0000a	57		 push	 edi
  0000b	56		 push	 esi
  0000c	8b f9		 mov	 edi, ecx
  0000e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00013	83 c4 04	 add	 esp, 4
  00016	85 c0		 test	 eax, eax
  00018	0f 84 2b 01 00
	00		 je	 $LN25@NotifySelf

; 887  : 		return;
; 888  : 	int iState = 0;
; 889  : 	int iViewState = 0;
; 890  : 
; 891  : 	unsigned char btCsJoinSide = gObj[iIndex].m_btCsJoinSide;

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00023	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  00029	03 c6		 add	 eax, esi
  0002b	53		 push	 ebx
  0002c	8a 98 5a 20 00
	00		 mov	 bl, BYTE PTR [eax+8282]

; 892  : 
; 893  : 	PMSG_ANS_NOTIFYCSJOINSIDE pMsg;
; 894  : 
; 895  : 	if(btCsJoinSide < 0)
; 896  : 	{
; 897  : 		btCsJoinSide = 0;
; 898  : 	}
; 899  : 
; 900  : 	if(btCsJoinSide > 4)

  00032	80 fb 04	 cmp	 bl, 4
  00035	76 02		 jbe	 SHORT $LN22@NotifySelf

; 901  : 	{
; 902  : 		btCsJoinSide = 0;

  00037	32 db		 xor	 bl, bl
$LN22@NotifySelf:

; 903  : 	}
; 904  : 
; 905  : 	switch(btCsJoinSide)

  00039	0f b6 cb	 movzx	 ecx, bl
  0003c	83 f9 04	 cmp	 ecx, 4
  0003f	0f 87 d0 00 00
	00		 ja	 $LN20@NotifySelf
  00045	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN30@NotifySelf[ecx*4]
$LN19@NotifySelf:

; 906  : 	{
; 907  : 	case 1:
; 908  : 		iState = 1;
; 909  : 		iViewState = 0x40000;
; 910  : 
; 911  : 		if( m_iCastleSiegeState == CASTLESIEGE_STATE_STARTSIEGE ||
; 912  : 			m_iCastleSiegeState == CASTLESIEGE_STATE_ENDSIEGE )

  0004c	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  0004f	83 f9 07	 cmp	 ecx, 7
  00052	74 12		 je	 SHORT $LN17@NotifySelf
  00054	83 f9 08	 cmp	 ecx, 8
  00057	74 0d		 je	 SHORT $LN17@NotifySelf

; 915  : 		}
; 916  : 		else
; 917  : 		{
; 918  : 			gObjRemoveBuffEffect(&gObj[iIndex],BUFF_WATCHTOWER);

  00059	6a 0e		 push	 14			; 0000000eH
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00061	e9 ac 00 00 00	 jmp	 $LN29@NotifySelf
$LN17@NotifySelf:

; 913  : 		{
; 914  : 			gObjAddBuffEffect(&gObj[iIndex],BUFF_WATCHTOWER,0,0,0,0,-10);

  00066	6a f6		 push	 -10			; fffffff6H
  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	6a 00		 push	 0
  00070	6a 0e		 push	 14			; 0000000eH
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  00078	83 c4 1c	 add	 esp, 28			; 0000001cH

; 919  : 		}
; 920  : 		break;

  0007b	e9 95 00 00 00	 jmp	 $LN20@NotifySelf
$LN15@NotifySelf:

; 921  : 	case 2:
; 922  : 		iState = 1;
; 923  : 		iViewState = 0x80000;
; 924  : 
; 925  : 		if( m_iCastleSiegeState == CASTLESIEGE_STATE_STARTSIEGE ||
; 926  : 			m_iCastleSiegeState == CASTLESIEGE_STATE_ENDSIEGE )

  00080	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  00083	83 f9 07	 cmp	 ecx, 7
  00086	74 0f		 je	 SHORT $LN13@NotifySelf
  00088	83 f9 08	 cmp	 ecx, 8
  0008b	74 0a		 je	 SHORT $LN13@NotifySelf

; 929  : 		}
; 930  : 		else
; 931  : 		{
; 932  : 			gObjRemoveBuffEffect(&gObj[iIndex],BUFF_SIEGEGUILD1);

  0008d	6a 0f		 push	 15			; 0000000fH
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00095	eb 7b		 jmp	 SHORT $LN29@NotifySelf
$LN13@NotifySelf:

; 927  : 		{
; 928  : 			gObjAddBuffEffect(&gObj[iIndex],BUFF_SIEGEGUILD1,0,0,0,0,-10);

  00097	6a f6		 push	 -10			; fffffff6H
  00099	6a 00		 push	 0
  0009b	6a 00		 push	 0
  0009d	6a 00		 push	 0
  0009f	6a 00		 push	 0
  000a1	6a 0f		 push	 15			; 0000000fH
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  000a9	83 c4 1c	 add	 esp, 28			; 0000001cH

; 933  : 		}
; 934  : 		break;

  000ac	eb 67		 jmp	 SHORT $LN20@NotifySelf
$LN11@NotifySelf:

; 935  : 	case 3:
; 936  : 		iState = 1;
; 937  : 		iViewState = 0x400000;
; 938  : 
; 939  : 		if( m_iCastleSiegeState == CASTLESIEGE_STATE_STARTSIEGE ||
; 940  : 			m_iCastleSiegeState == CASTLESIEGE_STATE_ENDSIEGE )

  000ae	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  000b1	83 f9 07	 cmp	 ecx, 7
  000b4	74 0f		 je	 SHORT $LN9@NotifySelf
  000b6	83 f9 08	 cmp	 ecx, 8
  000b9	74 0a		 je	 SHORT $LN9@NotifySelf

; 943  : 		}
; 944  : 		else
; 945  : 		{
; 946  : 			gObjRemoveBuffEffect(&gObj[iIndex],BUFF_SIEGEGUILD2);

  000bb	6a 10		 push	 16			; 00000010H
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  000c3	eb 4d		 jmp	 SHORT $LN29@NotifySelf
$LN9@NotifySelf:

; 941  : 		{
; 942  : 			gObjAddBuffEffect(&gObj[iIndex],BUFF_SIEGEGUILD2,0,0,0,0,-10);

  000c5	6a f6		 push	 -10			; fffffff6H
  000c7	6a 00		 push	 0
  000c9	6a 00		 push	 0
  000cb	6a 00		 push	 0
  000cd	6a 00		 push	 0
  000cf	6a 10		 push	 16			; 00000010H
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  000d7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 947  : 		}
; 948  : 		break;

  000da	eb 39		 jmp	 SHORT $LN20@NotifySelf
$LN7@NotifySelf:

; 949  : 	case 4:
; 950  : 		iState = 1;
; 951  : 		iViewState = 0x800000;
; 952  : 
; 953  : 		if( m_iCastleSiegeState == CASTLESIEGE_STATE_STARTSIEGE ||
; 954  : 			m_iCastleSiegeState == CASTLESIEGE_STATE_ENDSIEGE )

  000dc	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  000df	83 f9 07	 cmp	 ecx, 7
  000e2	74 0f		 je	 SHORT $LN5@NotifySelf
  000e4	83 f9 08	 cmp	 ecx, 8
  000e7	74 0a		 je	 SHORT $LN5@NotifySelf

; 957  : 		}
; 958  : 		else
; 959  : 		{
; 960  : 			gObjRemoveBuffEffect(&gObj[iIndex],BUFF_SIEGEGUILD3);

  000e9	6a 11		 push	 17			; 00000011H
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  000f1	eb 1f		 jmp	 SHORT $LN29@NotifySelf
$LN5@NotifySelf:

; 955  : 		{
; 956  : 			gObjAddBuffEffect(&gObj[iIndex],BUFF_SIEGEGUILD3,0,0,0,0,-10);

  000f3	6a f6		 push	 -10			; fffffff6H
  000f5	6a 00		 push	 0
  000f7	6a 00		 push	 0
  000f9	6a 00		 push	 0
  000fb	6a 00		 push	 0
  000fd	6a 11		 push	 17			; 00000011H
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  00105	83 c4 1c	 add	 esp, 28			; 0000001cH

; 961  : 		}
; 962  : 		break;

  00108	eb 0b		 jmp	 SHORT $LN20@NotifySelf
$LN3@NotifySelf:

; 963  : 	case 0:
; 964  : 		iState = 0;
; 965  : 		iViewState = 0xC0000;
; 966  : 		gObjClearBuffEffect(&gObj[iIndex],CLEAR_TYPE_CASTLESIEGE);

  0010a	6a 07		 push	 7
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z ; gObjClearBuffEffect
$LN29@NotifySelf:
  00112	83 c4 08	 add	 esp, 8
$LN20@NotifySelf:

; 967  : 		break;
; 968  : 	}
; 969  : 
; 970  : 
; 971  : 	pMsg.h.set((PBYTE)&pMsg,0xB2,0x19,sizeof(pMsg));

  00115	c7 45 f8 c1 05
	b2 19		 mov	 DWORD PTR _pMsg$[ebp], 431097281 ; 19b205c1H

; 972  : 
; 973  : 	if(btCsJoinSide == 2)

  0011c	80 fb 02	 cmp	 bl, 2
  0011f	75 12		 jne	 SHORT $LN2@NotifySelf

; 974  : 	{
; 975  : 		pMsg.btCsJoinSide = gObj[iIndex].m_btCsJoinSide;

  00121	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00127	8a 94 0e 5a 20
	00 00		 mov	 dl, BYTE PTR [esi+ecx+8282]
  0012e	88 55 fc	 mov	 BYTE PTR _pMsg$[ebp+4], dl

; 976  : 	}
; 977  : 	else

  00131	eb 03		 jmp	 SHORT $LN1@NotifySelf
$LN2@NotifySelf:

; 978  : 	{
; 979  : 		pMsg.btCsJoinSide = btCsJoinSide;

  00133	88 5d fc	 mov	 BYTE PTR _pMsg$[ebp+4], bl
$LN1@NotifySelf:

; 980  : 	}
; 981  : 
; 982  : 	DataSend(iIndex,(PBYTE)&pMsg,pMsg.h.size);

  00136	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00139	6a 05		 push	 5
  0013b	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0013e	50		 push	 eax
  0013f	51		 push	 ecx
  00140	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00145	83 c4 0c	 add	 esp, 12			; 0000000cH
  00148	5b		 pop	 ebx
$LN25@NotifySelf:
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi

; 983  : }

  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c2 04 00	 ret	 4
  00151	8d 49 00	 npad	 3
$LN30@NotifySelf:
  00154	00 00 00 00	 DD	 $LN3@NotifySelf
  00158	00 00 00 00	 DD	 $LN19@NotifySelf
  0015c	00 00 00 00	 DD	 $LN15@NotifySelf
  00160	00 00 00 00	 DD	 $LN11@NotifySelf
  00164	00 00 00 00	 DD	 $LN7@NotifySelf
?NotifySelfCsJoinSide@CCastleSiege@@QAEXH@Z ENDP	; CCastleSiege::NotifySelfCsJoinSide
_TEXT	ENDS
PUBLIC	?ClearAllNPC@CCastleSiege@@QAEXXZ		; CCastleSiege::ClearAllNPC
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
; Function compile flags: /Ogtp
;	COMDAT ?ClearAllNPC@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ClearAllNPC@CCastleSiege@@QAEXXZ PROC			; CCastleSiege::ClearAllNPC, COMDAT
; _this$ = ecx

; 986  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 987  : 	for(int n = 0; n < OBJ_MAXMONSTER; n++)

  00002	33 ff		 xor	 edi, edi
  00004	33 f6		 xor	 esi, esi
  00006	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL4@ClearAllNP:

; 988  : 	{
; 989  : 		if(gObj[n].m_btCsNpcType)

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	80 bc 06 50 20
	00 00 00	 cmp	 BYTE PTR [esi+eax+8272], 0
  0001d	74 09		 je	 SHORT $LN3@ClearAllNP

; 990  : 		{
; 991  : 			gObjDel(n);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00025	83 c4 04	 add	 esp, 4
$LN3@ClearAllNP:

; 987  : 	for(int n = 0; n < OBJ_MAXMONSTER; n++)

  00028	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  0002e	47		 inc	 edi
  0002f	81 fe 00 dd 49
	06		 cmp	 esi, 105504000		; 0649dd00H
  00035	7c d9		 jl	 SHORT $LL4@ClearAllNP

; 992  : 		}
; 993  : 	}
; 994  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
?ClearAllNPC@CCastleSiege@@QAEXXZ ENDP			; CCastleSiege::ClearAllNPC
_TEXT	ENDS
PUBLIC	?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay
EXTRN	__imp__FileTimeToSystemTime@8:PROC
EXTRN	__imp__SystemTimeToFileTime@8:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z
_TEXT	SEGMENT
_fst$ = -8						; size = 8
_st$ = 8						; size = 4
_iAfterDay$ = 12					; size = 4
_iAfterHour$ = 16					; size = 4
_iAfterMin$ = 20					; size = 4
_iAfterSec$ = 24					; size = 4
?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z PROC ; CCastleSiege::GetNextDay, COMDAT
; _this$ = ecx

; 997  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 998  : 	__int64 i64;
; 999  : 	_FILETIME fst;
; 1000 : 	st->wDayOfWeek = 0;

  00007	8b 75 08	 mov	 esi, DWORD PTR _st$[ebp]
  0000a	33 c0		 xor	 eax, eax
  0000c	57		 push	 edi
  0000d	66 89 46 04	 mov	 WORD PTR [esi+4], ax

; 1001 : 	st->wMilliseconds = 0;
; 1002 : 	st->wSecond = 0;
; 1003 : 	SystemTimeToFileTime(st,&fst);

  00011	8d 45 f8	 lea	 eax, DWORD PTR _fst$[ebp]
  00014	50		 push	 eax
  00015	33 c9		 xor	 ecx, ecx
  00017	56		 push	 esi
  00018	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemTimeToFileTime@8

; 1004 : 	i64 = ((__int64)fst.dwHighDateTime << 0x20) + fst.dwLowDateTime;
; 1005 : 	i64 = i64 + (__int64)iAfterDay * 864000000000 + (__int64)iAfterHour * 36000000000 +(__int64) iAfterMin * 600000000 + (__int64)iAfterSec * 10000000;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _iAfterDay$[ebp]
  00024	99		 cdq
  00025	8b fa		 mov	 edi, edx
  00027	0f a4 c2 01	 shld	 edx, eax, 1
  0002b	8b c8		 mov	 ecx, eax
  0002d	03 c0		 add	 eax, eax
  0002f	03 c8		 add	 ecx, eax
  00031	13 fa		 adc	 edi, edx
  00033	8b 45 10	 mov	 eax, DWORD PTR _iAfterHour$[ebp]
  00036	0f a4 cf 03	 shld	 edi, ecx, 3
  0003a	03 c9		 add	 ecx, ecx
  0003c	99		 cdq
  0003d	03 c9		 add	 ecx, ecx
  0003f	03 c9		 add	 ecx, ecx
  00041	03 c8		 add	 ecx, eax
  00043	13 fa		 adc	 edi, edx
  00045	8b d1		 mov	 edx, ecx
  00047	8b c7		 mov	 eax, edi
  00049	0f a4 d0 04	 shld	 eax, edx, 4
  0004d	c1 e2 04	 shl	 edx, 4
  00050	2b d1		 sub	 edx, ecx
  00052	1b c7		 sbb	 eax, edi
  00054	8b ca		 mov	 ecx, edx
  00056	8b f8		 mov	 edi, eax
  00058	8b 45 14	 mov	 eax, DWORD PTR _iAfterMin$[ebp]
  0005b	0f a4 cf 02	 shld	 edi, ecx, 2
  0005f	99		 cdq
  00060	03 c9		 add	 ecx, ecx
  00062	03 c9		 add	 ecx, ecx
  00064	03 c8		 add	 ecx, eax
  00066	13 fa		 adc	 edi, edx
  00068	8b d1		 mov	 edx, ecx
  0006a	8b c7		 mov	 eax, edi
  0006c	0f a4 d0 04	 shld	 eax, edx, 4
  00070	c1 e2 04	 shl	 edx, 4
  00073	2b d1		 sub	 edx, ecx
  00075	1b c7		 sbb	 eax, edi
  00077	0f a4 d0 02	 shld	 eax, edx, 2
  0007b	03 d2		 add	 edx, edx
  0007d	8b f8		 mov	 edi, eax
  0007f	8b 45 18	 mov	 eax, DWORD PTR _iAfterSec$[ebp]
  00082	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]
  00085	99		 cdq
  00086	6a 00		 push	 0
  00088	03 c8		 add	 ecx, eax
  0008a	68 80 96 98 00	 push	 10000000		; 00989680H
  0008f	13 fa		 adc	 edi, edx
  00091	57		 push	 edi
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 __allmul
  00098	33 c9		 xor	 ecx, ecx
  0009a	03 c1		 add	 eax, ecx
  0009c	13 55 fc	 adc	 edx, DWORD PTR _fst$[ebp+4]
  0009f	33 ff		 xor	 edi, edi
  000a1	03 45 f8	 add	 eax, DWORD PTR _fst$[ebp]

; 1006 : 	fst.dwHighDateTime = i64 >> 0x20;
; 1007 : 	fst.dwLowDateTime = i64 & 0xFFFFFFFF;
; 1008 : 	FileTimeToSystemTime(&fst,st);

  000a4	56		 push	 esi
  000a5	13 d7		 adc	 edx, edi
  000a7	8b ca		 mov	 ecx, edx
  000a9	89 55 fc	 mov	 DWORD PTR _fst$[ebp+4], edx
  000ac	8d 55 f8	 lea	 edx, DWORD PTR _fst$[ebp]
  000af	52		 push	 edx
  000b0	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  000b3	89 45 f8	 mov	 DWORD PTR _fst$[ebp], eax
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FileTimeToSystemTime@8
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi

; 1009 : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 14 00	 ret	 20			; 00000014H
?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ENDP ; CCastleSiege::GetNextDay
_TEXT	ENDS
PUBLIC	??_C@_0DP@KNAGLCDG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@ ; `string'
PUBLIC	??_C@_0DP@OMADBIOD@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@ ; `string'
PUBLIC	??_C@_0GC@PDALCIPJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@ ; `string'
PUBLIC	??_C@_0DP@JKMGFFHF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@ ; `string'
PUBLIC	??_C@_0EH@HNGJKKNJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@ ; `string'
PUBLIC	?DataRequest@CCastleSiege@@QAEHXZ		; CCastleSiege::DataRequest
EXTRN	?GS_GDReqCastleInitData@@YAXHH@Z:PROC		; GS_GDReqCastleInitData
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
;	COMDAT ??_C@_0DP@KNAGLCDG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@
CONST	SEGMENT
??_C@_0DP@KNAGLCDG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@ DB '[Castle'
	DB	'Siege] CCastleSiege::DataRequest() - REQUEST DATA AGAIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@OMADBIOD@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@
CONST	SEGMENT
??_C@_0DP@OMADBIOD@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@ DB '[Castle'
	DB	'Siege] CCastleSiege::DataRequest() - REQUEST DATA FIRST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@PDALCIPJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@
CONST	SEGMENT
??_C@_0GC@PDALCIPJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@ DB '[Castle'
	DB	'Siege] CCastleSiege::DataRequest() - m_iCastleDataLoadState !'
	DB	'= CASTLESIEGE_DATALOAD_2 (%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@JKMGFFHF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@
CONST	SEGMENT
??_C@_0DP@JKMGFFHF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@ DB '[Castle'
	DB	'Siege] CCastleSiege::DataRequest() - m_iMapSvrGroup < 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@HNGJKKNJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@
CONST	SEGMENT
??_C@_0EH@HNGJKKNJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@ DB '[Castle'
	DB	'Siege] CCastleSiege::DataRequest() - m_bFileDataLoadOK == FAL'
	DB	'SE', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DataRequest@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?DataRequest@CCastleSiege@@QAEHXZ PROC			; CCastleSiege::DataRequest, COMDAT
; _this$ = ecx

; 1012 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1013 : 	if(m_bFileDataLoadOK == FALSE)

  00003	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00007	75 14		 jne	 SHORT $LN7@DataReques

; 1014 : 	{
; 1015 : 		LogAddC(2,"[CastleSiege] CCastleSiege::DataRequest() - m_bFileDataLoadOK == FALSE");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@HNGJKKNJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@
  0000e	6a 02		 push	 2
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00016	83 c4 08	 add	 esp, 8

; 1016 : 		return false;

  00019	33 c0		 xor	 eax, eax
  0001b	5e		 pop	 esi

; 1052 : }

  0001c	c3		 ret	 0
$LN7@DataReques:

; 1017 : 	}
; 1018 : 
; 1019 : 	if(m_iMapSvrGroup < 0)

  0001d	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  00021	7d 14		 jge	 SHORT $LN6@DataReques

; 1020 : 	{
; 1021 : 		LogAddC(2,"[CastleSiege] CCastleSiege::DataRequest() - m_iMapSvrGroup < 0");

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@JKMGFFHF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@
  00028	6a 02		 push	 2
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00030	83 c4 08	 add	 esp, 8

; 1022 : 		return false;

  00033	33 c0		 xor	 eax, eax
  00035	5e		 pop	 esi

; 1052 : }

  00036	c3		 ret	 0
$LN6@DataReques:

; 1023 : 	}
; 1024 : 
; 1025 : 	if(m_iCastleDataLoadState != CASTLESIEGE_DATALOAD_2)

  00037	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0003a	83 f8 02	 cmp	 eax, 2
  0003d	74 15		 je	 SHORT $LN5@DataReques

; 1026 : 	{
; 1027 : 		LogAddC(2,"[CastleSiege] CCastleSiege::DataRequest() - m_iCastleDataLoadState != CASTLESIEGE_DATALOAD_2 (%d)",
; 1028 : 			m_iCastleDataLoadState);

  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@PDALCIPJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@
  00045	6a 02		 push	 2
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1029 : 		return false;

  00050	33 c0		 xor	 eax, eax
  00052	5e		 pop	 esi

; 1052 : }

  00053	c3		 ret	 0
$LN5@DataReques:

; 1030 : 	}
; 1031 : 
; 1032 : 	int bDbRequestData = FALSE;
; 1033 : 
; 1034 : 	if(m_dwDbDataLoadTickCount == 0)

  00054	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00058	57		 push	 edi
  00059	75 0d		 jne	 SHORT $LN4@DataReques

; 1035 : 	{
; 1036 : 		bDbRequestData = TRUE;
; 1037 : 		m_dwDbDataLoadTickCount = GetTickCount();

  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 1038 : 		LogAddC(3, "[CastleSiege] CCastleSiege::DataRequest() - REQUEST DATA FIRST");

  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@OMADBIOD@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@
  00066	eb 19		 jmp	 SHORT $LN11@DataReques
$LN4@DataReques:

; 1039 : 	}
; 1040 : 	else if(GetTickCount() - m_dwDbDataLoadTickCount > 3000)

  00068	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0006e	ff d7		 call	 edi
  00070	2b 46 20	 sub	 eax, DWORD PTR [esi+32]
  00073	3d b8 0b 00 00	 cmp	 eax, 3000		; 00000bb8H
  00078	76 25		 jbe	 SHORT $LN1@DataReques

; 1041 : 	{
; 1042 : 		bDbRequestData = TRUE;
; 1043 : 		m_dwDbDataLoadTickCount = GetTickCount();

  0007a	ff d7		 call	 edi

; 1044 : 		LogAddC(3, "[CastleSiege] CCastleSiege::DataRequest() - REQUEST DATA AGAIN");

  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@KNAGLCDG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Data@
$LN11@DataReques:
  00081	6a 03		 push	 3
  00083	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1045 : 	}
; 1046 : 
; 1047 : 	if(bDbRequestData != FALSE)
; 1048 : 	{
; 1049 : 		GS_GDReqCastleInitData(m_iMapSvrGroup,m_iCastleSiegeCycle);

  0008c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0008f	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00092	83 c4 08	 add	 esp, 8
  00095	50		 push	 eax
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 ?GS_GDReqCastleInitData@@YAXHH@Z ; GS_GDReqCastleInitData
  0009c	83 c4 08	 add	 esp, 8
$LN1@DataReques:

; 1050 : 	}
; 1051 : return true;

  0009f	5f		 pop	 edi
  000a0	b8 01 00 00 00	 mov	 eax, 1
  000a5	5e		 pop	 esi

; 1052 : }

  000a6	c3		 ret	 0
?DataRequest@CCastleSiege@@QAEHXZ ENDP			; CCastleSiege::DataRequest
_TEXT	ENDS
PUBLIC	__real@461c4000
PUBLIC	?CreateCsGateLever@CCastleSiege@@QAEHHH@Z	; CCastleSiege::CreateCsGateLever
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CreateCsGateLever@CCastleSiege@@QAEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?CreateCsGateLever@CCastleSiege@@QAEHHH@Z PROC		; CCastleSiege::CreateCsGateLever, COMDAT
; _this$ = ecx

; 1142 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1143 : 	if(XY_MACRO(iX) == FALSE || XY_MACRO(iY) == FALSE)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iX$[ebp]
  00006	53		 push	 ebx
  00007	85 c0		 test	 eax, eax
  00009	0f 88 95 01 00
	00		 js	 $LN2@CreateCsGa
  0000f	33 c9		 xor	 ecx, ecx
  00011	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00016	0f 9e c1	 setle	 cl
  00019	8b c1		 mov	 eax, ecx
  0001b	85 c0		 test	 eax, eax
  0001d	0f 84 81 01 00
	00		 je	 $LN2@CreateCsGa
  00023	8b 5d 0c	 mov	 ebx, DWORD PTR _iY$[ebp]
  00026	85 db		 test	 ebx, ebx
  00028	0f 88 76 01 00
	00		 js	 $LN2@CreateCsGa
  0002e	33 c0		 xor	 eax, eax
  00030	81 fb ff 00 00
	00		 cmp	 ebx, 255		; 000000ffH
  00036	0f 9e c0	 setle	 al
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 63 01 00
	00		 je	 $LN2@CreateCsGa

; 1146 : 	}
; 1147 : 
; 1148 : 	int iNPC_INDEX = gObjAddMonster(MAP_INDEX_CASTLESIEGE);

  00041	56		 push	 esi
  00042	6a 1e		 push	 30			; 0000001eH
  00044	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00049	0f bf f0	 movsx	 esi, ax
  0004c	83 c4 04	 add	 esp, 4

; 1149 : 
; 1150 : 	if(iNPC_INDEX >= 0)

  0004f	85 f6		 test	 esi, esi
  00051	0f 88 44 01 00
	00		 js	 $LN1@CreateCsGa

; 1151 : 	{
; 1152 : 		gObjSetMonster(iNPC_INDEX,219);

  00057	68 db 00 00 00	 push	 219			; 000000dbH
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 1153 : 
; 1154 : 		gObj[iNPC_INDEX].m_PosNum = -1;
; 1155 : 		gObj[iNPC_INDEX].X = iX;
; 1156 : 		gObj[iNPC_INDEX].Y = iY;
; 1157 : 		gObj[iNPC_INDEX].MapNumber = MAP_INDEX_CASTLESIEGE;
; 1158 : 		gObj[iNPC_INDEX].TX = gObj[iNPC_INDEX].X;
; 1159 : 		gObj[iNPC_INDEX].TY = gObj[iNPC_INDEX].Y;
; 1160 : 		gObj[iNPC_INDEX].m_OldX = gObj[iNPC_INDEX].X;
; 1161 : 		gObj[iNPC_INDEX].m_OldY = gObj[iNPC_INDEX].Y;
; 1162 : 		gObj[iNPC_INDEX].Dir = 1;
; 1163 : 		gObj[iNPC_INDEX].StartX = gObj[iNPC_INDEX].X;
; 1164 : 		gObj[iNPC_INDEX].StartY = gObj[iNPC_INDEX].Y;
; 1165 : 		gObj[iNPC_INDEX].DieRegen = 0;
; 1166 : 		gObj[iNPC_INDEX].MaxRegenTime = 0;
; 1167 : 		gObj[iNPC_INDEX].Life = 10000.0f;

  00062	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@461c4000
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006e	8b c6		 mov	 eax, esi
  00070	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  00076	83 c4 08	 add	 esp, 8
  00079	83 ca ff	 or	 edx, -1
  0007c	66 89 94 08 98
	05 00 00	 mov	 WORD PTR [eax+ecx+1432], dx
  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008a	8a 4d 08	 mov	 cl, BYTE PTR _iX$[ebp]
  0008d	88 8c 10 20 01
	00 00		 mov	 BYTE PTR [eax+edx+288], cl
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009a	88 9c 10 21 01
	00 00		 mov	 BYTE PTR [eax+edx+289], bl
  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a7	c6 84 08 23 01
	00 00 1e	 mov	 BYTE PTR [eax+ecx+291], 30 ; 0000001eH
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b5	0f b6 94 08 20
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+288]
  000bd	88 94 08 52 01
	00 00		 mov	 BYTE PTR [eax+ecx+338], dl
  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ca	0f b6 94 08 21
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+289]
  000d2	88 94 08 53 01
	00 00		 mov	 BYTE PTR [eax+ecx+339], dl
  000d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000df	0f b6 94 08 20
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+288]
  000e7	88 94 08 50 01
	00 00		 mov	 BYTE PTR [eax+ecx+336], dl
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f4	0f b6 94 08 21
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+289]
  000fc	88 94 08 51 01
	00 00		 mov	 BYTE PTR [eax+ecx+337], dl
  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00109	c6 84 08 22 01
	00 00 01	 mov	 BYTE PTR [eax+ecx+290], 1
  00111	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00117	0f b6 94 08 20
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+288]
  0011f	88 94 08 4e 01
	00 00		 mov	 BYTE PTR [eax+ecx+334], dl
  00126	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0012c	0f b6 94 08 21
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+289]
  00134	88 94 08 4f 01
	00 00		 mov	 BYTE PTR [eax+ecx+335], dl
  0013b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00141	c6 84 08 8a 05
	00 00 00	 mov	 BYTE PTR [eax+ecx+1418], 0
  00149	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014f	c7 84 10 94 05
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+edx+1428], 0
  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00160	d9 94 08 d8 00
	00 00		 fst	 DWORD PTR [eax+ecx+216]

; 1168 : 		gObj[iNPC_INDEX].MaxLife = 10000.0f;

  00167	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016d	d9 9c 10 dc 00
	00 00		 fstp	 DWORD PTR [eax+edx+220]

; 1169 : 		gObj[iNPC_INDEX].m_btCsNpcType = 2;

  00174	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017a	c6 84 08 50 20
	00 00 02	 mov	 BYTE PTR [eax+ecx+8272], 2

; 1170 : 		gObj[iNPC_INDEX].m_iCsGateLeverLinkIndex = -1;

  00182	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00188	c7 84 10 54 20
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [eax+edx+8276], -1

; 1171 : 	return iNPC_INDEX;

  00193	8b c6		 mov	 eax, esi
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx

; 1174 : }

  00197	5d		 pop	 ebp
  00198	c2 08 00	 ret	 8
$LN1@CreateCsGa:
  0019b	5e		 pop	 esi

; 1172 : 	}	
; 1173 : return -1;

  0019c	83 c8 ff	 or	 eax, -1
  0019f	5b		 pop	 ebx

; 1174 : }

  001a0	5d		 pop	 ebp
  001a1	c2 08 00	 ret	 8
$LN2@CreateCsGa:

; 1144 : 	{
; 1145 : 		return -1;

  001a4	83 c8 ff	 or	 eax, -1
  001a7	5b		 pop	 ebx

; 1174 : }

  001a8	5d		 pop	 ebp
  001a9	c2 08 00	 ret	 8
?CreateCsGateLever@CCastleSiege@@QAEHHH@Z ENDP		; CCastleSiege::CreateCsGateLever
_TEXT	ENDS
PUBLIC	?CheckLeverAlive@CCastleSiege@@QAEHH@Z		; CCastleSiege::CheckLeverAlive
; Function compile flags: /Ogtp
;	COMDAT ?CheckLeverAlive@CCastleSiege@@QAEHH@Z
_TEXT	SEGMENT
_iLeverIndex$ = 8					; size = 4
?CheckLeverAlive@CCastleSiege@@QAEHH@Z PROC		; CCastleSiege::CheckLeverAlive, COMDAT
; _this$ = ecx

; 1177 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1178 : 	if(gObjIsConnected(iLeverIndex) == FALSE || gObj[iLeverIndex].Class != 219 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iLeverIndex$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	74 25		 je	 SHORT $LN1@CheckLever
  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001a	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  00020	b8 db 00 00 00	 mov	 eax, 219		; 000000dbH
  00025	66 39 84 0e 90
	00 00 00	 cmp	 WORD PTR [esi+ecx+144], ax
  0002d	75 0a		 jne	 SHORT $LN1@CheckLever

; 1181 : 	}
; 1182 : 	return true;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	5e		 pop	 esi

; 1183 : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN1@CheckLever:

; 1179 : 	{
; 1180 : 		return false;

  00039	33 c0		 xor	 eax, eax
  0003b	5e		 pop	 esi

; 1183 : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?CheckLeverAlive@CCastleSiege@@QAEHH@Z ENDP		; CCastleSiege::CheckLeverAlive
_TEXT	ENDS
PUBLIC	??4_CS_SCHEDULE_DATA@@QAEAAU0@ABU0@@Z		; _CS_SCHEDULE_DATA::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4_CS_SCHEDULE_DATA@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4_CS_SCHEDULE_DATA@@QAEAAU0@ABU0@@Z PROC		; _CS_SCHEDULE_DATA::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00011	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00014	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00017	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0001a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0001d	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00020	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00023	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00026	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00029	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??4_CS_SCHEDULE_DATA@@QAEAAU0@ABU0@@Z ENDP		; _CS_SCHEDULE_DATA::operator=
_TEXT	ENDS
PUBLIC	?LinkCsGateLever@CCastleSiege@@QAEHHH@Z		; CCastleSiege::LinkCsGateLever
; Function compile flags: /Ogtp
;	COMDAT ?LinkCsGateLever@CCastleSiege@@QAEHHH@Z
_TEXT	SEGMENT
_iLeverIndex$ = 8					; size = 4
_iGateIndex$ = 12					; size = 4
?LinkCsGateLever@CCastleSiege@@QAEHHH@Z PROC		; CCastleSiege::LinkCsGateLever, COMDAT
; _this$ = ecx

; 1390 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1391 : 	if(!gObjIsConnected(iLeverIndex) || gObj[iLeverIndex].Class != 219)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iLeverIndex$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000e	83 c4 04	 add	 esp, 4
  00011	85 c0		 test	 eax, eax
  00013	74 74		 je	 SHORT $LN3@LinkCsGate
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001b	8b f3		 mov	 esi, ebx
  0001d	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  00023	b8 db 00 00 00	 mov	 eax, 219		; 000000dbH
  00028	66 39 84 0e 90
	00 00 00	 cmp	 WORD PTR [esi+ecx+144], ax
  00030	75 57		 jne	 SHORT $LN3@LinkCsGate

; 1393 : 	if(!gObjIsConnected(iGateIndex) || gObj[iGateIndex].Class != 277)

  00032	57		 push	 edi
  00033	8b 7d 0c	 mov	 edi, DWORD PTR _iGateIndex$[ebp]
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003c	83 c4 04	 add	 esp, 4
  0003f	85 c0		 test	 eax, eax
  00041	74 3d		 je	 SHORT $LN1@LinkCsGate
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00049	8b c7		 mov	 eax, edi
  0004b	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  00051	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  00056	66 39 94 08 90
	00 00 00	 cmp	 WORD PTR [eax+ecx+144], dx
  0005e	75 20		 jne	 SHORT $LN1@LinkCsGate

; 1395 : 
; 1396 : 	gObj[iLeverIndex].m_iCsGateLeverLinkIndex = iGateIndex;

  00060	89 bc 0e 54 20
	00 00		 mov	 DWORD PTR [esi+ecx+8276], edi

; 1397 : 	gObj[iGateIndex].m_iCsGateLeverLinkIndex = iLeverIndex;

  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006d	5f		 pop	 edi
  0006e	89 9c 08 54 20
	00 00		 mov	 DWORD PTR [eax+ecx+8276], ebx
  00075	5e		 pop	 esi

; 1398 : return true;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	5b		 pop	 ebx

; 1399 : }

  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN1@LinkCsGate:
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi

; 1394 : 		return false;

  00082	33 c0		 xor	 eax, eax
  00084	5b		 pop	 ebx

; 1399 : }

  00085	5d		 pop	 ebp
  00086	c2 08 00	 ret	 8
$LN3@LinkCsGate:
  00089	5e		 pop	 esi

; 1392 : 		return false;

  0008a	33 c0		 xor	 eax, eax
  0008c	5b		 pop	 ebx

; 1399 : }

  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
?LinkCsGateLever@CCastleSiege@@QAEHHH@Z ENDP		; CCastleSiege::LinkCsGateLever
_TEXT	ENDS
PUBLIC	?SetGateBlockState@CCastleSiege@@QAEXHHH@Z	; CCastleSiege::SetGateBlockState
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
; Function compile flags: /Ogtp
;	COMDAT ?SetGateBlockState@CCastleSiege@@QAEXHHH@Z
_TEXT	SEGMENT
tv199 = 8						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_iGateState$ = 16					; size = 4
?SetGateBlockState@CCastleSiege@@QAEXHHH@Z PROC		; CCastleSiege::SetGateBlockState, COMDAT
; _this$ = ecx

; 1402 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1403 : 	if(XY_MACRO(iX) == FALSE || XY_MACRO(iY) == FALSE)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iX$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	0f 88 c2 00 00
	00		 js	 $LN11@SetGateBlo
  0000e	33 c9		 xor	 ecx, ecx
  00010	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00015	0f 9e c1	 setle	 cl
  00018	85 c9		 test	 ecx, ecx
  0001a	0f 84 b0 00 00
	00		 je	 $LN11@SetGateBlo
  00020	57		 push	 edi
  00021	8b 7d 0c	 mov	 edi, DWORD PTR _iY$[ebp]
  00024	85 ff		 test	 edi, edi
  00026	0f 88 a3 00 00
	00		 js	 $LN34@SetGateBlo
  0002c	33 c9		 xor	 ecx, ecx
  0002e	81 ff ff 00 00
	00		 cmp	 edi, 255		; 000000ffH
  00034	0f 9e c1	 setle	 cl
  00037	85 c9		 test	 ecx, ecx
  00039	0f 84 90 00 00
	00		 je	 $LN34@SetGateBlo

; 1404 : 		return;
; 1405 : 
; 1406 : 	switch(iGateState)

  0003f	8b 4d 10	 mov	 ecx, DWORD PTR _iGateState$[ebp]
  00042	83 e9 00	 sub	 ecx, 0
  00045	53		 push	 ebx
  00046	56		 push	 esi
  00047	74 4a		 je	 SHORT $LN14@SetGateBlo
  00049	49		 dec	 ecx
  0004a	0f 85 7d 00 00
	00		 jne	 $LN35@SetGateBlo

; 1415 : 				}
; 1416 : 			}
; 1417 : 		}
; 1418 : 		break;
; 1419 : 	case 1:
; 1420 : 		{
; 1421 : 			for(int i = iX -2; i <= iX + 3; i++)

  00050	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  00053	83 c0 03	 add	 eax, 3
  00056	89 45 08	 mov	 DWORD PTR tv199[ebp], eax
  00059	3b f0		 cmp	 esi, eax
  0005b	7f 70		 jg	 SHORT $LN35@SetGateBlo
  0005d	8d 5f 02	 lea	 ebx, DWORD PTR [edi+2]
$LL6@SetGateBlo:

; 1422 : 			{
; 1423 : 				for(int j = iY; j <= iY + 2;j++)

  00060	3b fb		 cmp	 edi, ebx
  00062	7f 23		 jg	 SHORT $LN5@SetGateBlo
  00064	8b d3		 mov	 edx, ebx
  00066	8b cf		 mov	 ecx, edi
  00068	2b d7		 sub	 edx, edi
  0006a	c1 e1 08	 shl	 ecx, 8
  0006d	42		 inc	 edx
  0006e	8b ff		 npad	 2
$LL3@SetGateBlo:

; 1424 : 				{
; 1425 : 					MapC[MAP_INDEX_CASTLESIEGE].m_attrbuf[j * 256 + i] &= ~16;

  00070	a1 c0 94 9c 00	 mov	 eax, DWORD PTR ?MapC@@3PAVMapClass@@A+10261696
  00075	03 c1		 add	 eax, ecx
  00077	80 24 30 ef	 and	 BYTE PTR [eax+esi], 239	; 000000efH
  0007b	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00081	4a		 dec	 edx
  00082	75 ec		 jne	 SHORT $LL3@SetGateBlo

; 1422 : 			{
; 1423 : 				for(int j = iY; j <= iY + 2;j++)

  00084	8b 45 08	 mov	 eax, DWORD PTR tv199[ebp]
$LN5@SetGateBlo:

; 1415 : 				}
; 1416 : 			}
; 1417 : 		}
; 1418 : 		break;
; 1419 : 	case 1:
; 1420 : 		{
; 1421 : 			for(int i = iX -2; i <= iX + 3; i++)

  00087	46		 inc	 esi
  00088	3b f0		 cmp	 esi, eax
  0008a	7e d4		 jle	 SHORT $LL6@SetGateBlo
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	5f		 pop	 edi

; 1426 : 				}
; 1427 : 			}
; 1428 : 		}
; 1429 : 		break;
; 1430 : 	}
; 1431 : }

  0008f	5d		 pop	 ebp
  00090	c2 0c 00	 ret	 12			; 0000000cH
$LN14@SetGateBlo:

; 1407 : 	{
; 1408 : 	case 0:
; 1409 : 		{
; 1410 : 			for(int i = iX -2; i <= iX + 3; i++)

  00093	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  00096	83 c0 03	 add	 eax, 3
  00099	89 45 08	 mov	 DWORD PTR tv199[ebp], eax
  0009c	3b f0		 cmp	 esi, eax
  0009e	7f 2d		 jg	 SHORT $LN35@SetGateBlo
  000a0	8d 5f 02	 lea	 ebx, DWORD PTR [edi+2]
$LL13@SetGateBlo:

; 1411 : 			{
; 1412 : 				for(int j = iY; j <= iY + 2;j++)

  000a3	3b fb		 cmp	 edi, ebx
  000a5	7f 21		 jg	 SHORT $LN12@SetGateBlo
  000a7	8b d3		 mov	 edx, ebx
  000a9	8b cf		 mov	 ecx, edi
  000ab	2b d7		 sub	 edx, edi
  000ad	c1 e1 08	 shl	 ecx, 8
  000b0	42		 inc	 edx
$LL10@SetGateBlo:

; 1413 : 				{
; 1414 : 					MapC[MAP_INDEX_CASTLESIEGE].m_attrbuf[j * 256 + i] |= 16;

  000b1	a1 c0 94 9c 00	 mov	 eax, DWORD PTR ?MapC@@3PAVMapClass@@A+10261696
  000b6	03 c1		 add	 eax, ecx
  000b8	80 0c 30 10	 or	 BYTE PTR [eax+esi], 16	; 00000010H
  000bc	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  000c2	4a		 dec	 edx
  000c3	75 ec		 jne	 SHORT $LL10@SetGateBlo

; 1411 : 			{
; 1412 : 				for(int j = iY; j <= iY + 2;j++)

  000c5	8b 45 08	 mov	 eax, DWORD PTR tv199[ebp]
$LN12@SetGateBlo:

; 1407 : 	{
; 1408 : 	case 0:
; 1409 : 		{
; 1410 : 			for(int i = iX -2; i <= iX + 3; i++)

  000c8	46		 inc	 esi
  000c9	3b f0		 cmp	 esi, eax
  000cb	7e d6		 jle	 SHORT $LL13@SetGateBlo
$LN35@SetGateBlo:
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
$LN34@SetGateBlo:
  000cf	5f		 pop	 edi
$LN11@SetGateBlo:

; 1426 : 				}
; 1427 : 			}
; 1428 : 		}
; 1429 : 		break;
; 1430 : 	}
; 1431 : }

  000d0	5d		 pop	 ebp
  000d1	c2 0c 00	 ret	 12			; 0000000cH
?SetGateBlockState@CCastleSiege@@QAEXHHH@Z ENDP		; CCastleSiege::SetGateBlockState
_TEXT	ENDS
PUBLIC	?SetState_NONE@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetState_NONE
; Function compile flags: /Ogtp
;	COMDAT ?SetState_NONE@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bSetRemainMsec$ = 8					; size = 4
?SetState_NONE@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_NONE, COMDAT
; _this$ = ecx

; 1612 : 
; 1613 : }

  00000	c2 04 00	 ret	 4
?SetState_NONE@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_NONE
_TEXT	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	__$ArrayPad$
PUBLIC	?SetState_IDLE_1@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetState_IDLE_1
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@408f400000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
CONST	ENDS
;	COMDAT ?SetState_IDLE_1@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_ttSTime$185716 = -48					; size = 8
_tmETime$185718 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_bSetRemainMsec$ = 8					; size = 4
?SetState_IDLE_1@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_IDLE_1, COMDAT
; _this$ = ecx

; 1616 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1617 : 	if(bSetRemainMsec != 0) {

  00010	83 7d 08 00	 cmp	 DWORD PTR _bSetRemainMsec$[ebp], 0
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	74 7b		 je	 SHORT $LN1@SetState_I

; 1618 : 		__int64 ttSTime;
; 1619 : 		__int64 ttETime;
; 1620 : 		tm tmETime;
; 1621 : 		double dResultSecond;
; 1622 : 
; 1623 : 		memset(&tmETime, 0x00, sizeof(tmETime));
; 1624 : 		tmETime.tm_year = m_tmStartDate.wYear - 1900;
; 1625 : 		tmETime.tm_mon = m_tmStartDate.wMonth - 1;

  00019	0f b7 8e b6 00
	00 00		 movzx	 ecx, WORD PTR [esi+182]

; 1626 : 		tmETime.tm_mday = m_tmStartDate.wDay;

  00020	0f b7 96 ba 00
	00 00		 movzx	 edx, WORD PTR [esi+186]
  00027	33 c0		 xor	 eax, eax
  00029	89 45 e4	 mov	 DWORD PTR _tmETime$185718[ebp+12], eax
  0002c	89 45 e8	 mov	 DWORD PTR _tmETime$185718[ebp+16], eax
  0002f	89 45 ec	 mov	 DWORD PTR _tmETime$185718[ebp+20], eax
  00032	89 45 d8	 mov	 DWORD PTR _tmETime$185718[ebp], eax
  00035	89 45 dc	 mov	 DWORD PTR _tmETime$185718[ebp+4], eax
  00038	89 45 e0	 mov	 DWORD PTR _tmETime$185718[ebp+8], eax
  0003b	89 45 f0	 mov	 DWORD PTR _tmETime$185718[ebp+24], eax
  0003e	89 45 f4	 mov	 DWORD PTR _tmETime$185718[ebp+28], eax
  00041	89 45 f8	 mov	 DWORD PTR _tmETime$185718[ebp+32], eax
  00044	0f b7 86 b4 00
	00 00		 movzx	 eax, WORD PTR [esi+180]
  0004b	2d 6c 07 00 00	 sub	 eax, 1900		; 0000076cH
  00050	53		 push	 ebx
  00051	89 45 ec	 mov	 DWORD PTR _tmETime$185718[ebp+20], eax

; 1627 : 		ttETime = mktime(&tmETime);

  00054	8d 45 d8	 lea	 eax, DWORD PTR _tmETime$185718[ebp]
  00057	57		 push	 edi
  00058	49		 dec	 ecx
  00059	50		 push	 eax
  0005a	89 4d e8	 mov	 DWORD PTR _tmETime$185718[ebp+16], ecx
  0005d	89 55 e4	 mov	 DWORD PTR _tmETime$185718[ebp+12], edx
  00060	e8 00 00 00 00	 call	 __mktime64

; 1628 : 		time(&ttSTime);

  00065	8d 4d d0	 lea	 ecx, DWORD PTR _ttSTime$185716[ebp]
  00068	51		 push	 ecx
  00069	8b f8		 mov	 edi, eax
  0006b	8b da		 mov	 ebx, edx
  0006d	e8 00 00 00 00	 call	 __time64

; 1629 : 
; 1630 : 		dResultSecond = difftime(ttETime, ttSTime);

  00072	8b 55 d4	 mov	 edx, DWORD PTR _ttSTime$185716[ebp+4]
  00075	8b 45 d0	 mov	 eax, DWORD PTR _ttSTime$185716[ebp]
  00078	52		 push	 edx
  00079	50		 push	 eax
  0007a	53		 push	 ebx
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 __difftime64

; 1631 : 		m_iCS_REMAIN_MSEC = (int)(dResultSecond * 1000.0);

  00081	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@408f400000000000
  00087	83 c4 18	 add	 esp, 24			; 00000018H
  0008a	e8 00 00 00 00	 call	 __ftol2_sse
  0008f	5f		 pop	 edi
  00090	89 46 68	 mov	 DWORD PTR [esi+104], eax
  00093	5b		 pop	 ebx
$LN1@SetState_I:

; 1632 : 	}
; 1633 : }

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	5e		 pop	 esi
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
?SetState_IDLE_1@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_IDLE_1
_TEXT	ENDS
PUBLIC	?SetState@CCastleSiege@@QAEXHH@Z		; CCastleSiege::SetState
PUBLIC	??_C@_0EL@OFOJCFPB@?$FLCastleSiege?$FN?5State?5?9?5End?5Cycle?5@ ; `string'
PUBLIC	??_C@_0FF@KMACIGAJ@?$FLCastleSiege?$FN?5State?5?9?5End?5Cycle?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SetState_ENDCYCLE@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetState_ENDCYCLE
EXTRN	?GS_GDReqResetSiegeGuildInfo@@YAXH@Z:PROC	; GS_GDReqResetSiegeGuildInfo
EXTRN	?GS_GDReqResetRegSiegeInfo@@YAXH@Z:PROC		; GS_GDReqResetRegSiegeInfo
EXTRN	?GS_GDReqSiegeDateChange@@YAXHHGEEGEE@Z:PROC	; GS_GDReqSiegeDateChange
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	__imp__GetLocalTime@4:PROC
;	COMDAT ??_C@_0EL@OFOJCFPB@?$FLCastleSiege?$FN?5State?5?9?5End?5Cycle?5@
CONST	SEGMENT
??_C@_0EL@OFOJCFPB@?$FLCastleSiege?$FN?5State?5?9?5End?5Cycle?5@ DB '[Cas'
	DB	'tleSiege] State - End Cycle : Date-Changing Info (%d-%d-%d) ('
	DB	'%d-%d-%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@KMACIGAJ@?$FLCastleSiege?$FN?5State?5?9?5End?5Cycle?5@
CONST	SEGMENT
??_C@_0FF@KMACIGAJ@?$FLCastleSiege?$FN?5State?5?9?5End?5Cycle?5@ DB '[Cas'
	DB	'tleSiege] State - End Cycle Schedule : (%d-%d-%d(%d:%d:%d)) ('
	DB	'%d-%d-%d(%d:%d:%d))', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_ENDCYCLE@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_tmNowDate$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_bSetRemainMsec$ = 8					; size = 4
?SetState_ENDCYCLE@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_ENDCYCLE, COMDAT
; _this$ = ecx

; 1835 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi

; 1836 : 	_SYSTEMTIME tmNowDate;
; 1837 : 	GetLocalTime(&tmNowDate);

  00012	8d 45 ec	 lea	 eax, DWORD PTR _tmNowDate$[ebp]
  00015	50		 push	 eax
  00016	8b f1		 mov	 esi, ecx
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 1838 : 
; 1839 : 	//tmNowDate.wDay = 0;
; 1840 : 	tmNowDate.wHour = 0;
; 1841 : 	tmNowDate.wMinute = 0;
; 1842 : 	tmNowDate.wSecond = 0;
; 1843 : 	tmNowDate.wMilliseconds = 0;
; 1844 : 
; 1845 : 	tmNowDate = m_tmNowDate;

  0001e	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00021	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00024	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00027	8d 7e 2c	 lea	 edi, DWORD PTR [esi+44]
  0002a	89 4d ec	 mov	 DWORD PTR _tmNowDate$[ebp], ecx
  0002d	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 1846 : 	m_tmStartDate = m_tmNowDate;
; 1847 : 
; 1848 : 	GetNextDay(&tmNowDate,m_iCastleSiegeCycle,0,0,0);

  00030	6a 00		 push	 0
  00032	89 55 f0	 mov	 DWORD PTR _tmNowDate$[ebp+4], edx
  00035	8b 17		 mov	 edx, DWORD PTR [edi]
  00037	89 45 f4	 mov	 DWORD PTR _tmNowDate$[ebp+8], eax
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	89 96 b4 00 00
	00		 mov	 DWORD PTR [esi+180], edx
  00043	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00046	89 4d f8	 mov	 DWORD PTR _tmNowDate$[ebp+12], ecx
  00049	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004c	6a 00		 push	 0
  0004e	89 86 b8 00 00
	00		 mov	 DWORD PTR [esi+184], eax
  00054	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00057	89 8e bc 00 00
	00		 mov	 DWORD PTR [esi+188], ecx
  0005d	6a 00		 push	 0
  0005f	50		 push	 eax
  00060	8d 4d ec	 lea	 ecx, DWORD PTR _tmNowDate$[ebp]
  00063	51		 push	 ecx
  00064	8b ce		 mov	 ecx, esi
  00066	89 96 c0 00 00
	00		 mov	 DWORD PTR [esi+192], edx
  0006c	e8 00 00 00 00	 call	 ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay

; 1849 : 	GetNextDay(&m_tmNowDate,m_iCastleSiegeCycle,0,0,0);

  00071	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	6a 00		 push	 0
  0007a	52		 push	 edx
  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay

; 1850 : 
; 1851 : 	m_tmEndDate = tmNowDate;

  00083	8b 45 ec	 mov	 eax, DWORD PTR _tmNowDate$[ebp]
  00086	8b 4d f0	 mov	 ecx, DWORD PTR _tmNowDate$[ebp+4]
  00089	8b 55 f4	 mov	 edx, DWORD PTR _tmNowDate$[ebp+8]
  0008c	89 86 c4 00 00
	00		 mov	 DWORD PTR [esi+196], eax
  00092	8b 45 f8	 mov	 eax, DWORD PTR _tmNowDate$[ebp+12]
  00095	89 8e c8 00 00
	00		 mov	 DWORD PTR [esi+200], ecx
  0009b	89 96 cc 00 00
	00		 mov	 DWORD PTR [esi+204], edx
  000a1	89 86 d0 00 00
	00		 mov	 DWORD PTR [esi+208], eax

; 1852 : 
; 1853 : 	LogAddTD("[CastleSiege] State - End Cycle Schedule : (%d-%d-%d(%d:%d:%d)) (%d-%d-%d(%d:%d:%d))",
; 1854 : 		m_tmStartDate.wYear,m_tmStartDate.wMonth,m_tmStartDate.wDay,m_tmStartDate.wHour,m_tmStartDate.wMinute,m_tmStartDate.wSecond,
; 1855 : 		m_tmEndDate.wYear,m_tmEndDate.wMonth,m_tmEndDate.wDay,m_tmEndDate.wHour,m_tmEndDate.wMinute,m_tmEndDate.wSecond);

  000a7	0f b7 96 ce 00
	00 00		 movzx	 edx, WORD PTR [esi+206]
  000ae	0f b7 c8	 movzx	 ecx, ax
  000b1	0f b7 86 cc 00
	00 00		 movzx	 eax, WORD PTR [esi+204]
  000b8	51		 push	 ecx
  000b9	0f b7 8e ca 00
	00 00		 movzx	 ecx, WORD PTR [esi+202]
  000c0	52		 push	 edx
  000c1	0f b7 96 c6 00
	00 00		 movzx	 edx, WORD PTR [esi+198]
  000c8	50		 push	 eax
  000c9	0f b7 86 c4 00
	00 00		 movzx	 eax, WORD PTR [esi+196]
  000d0	51		 push	 ecx
  000d1	0f b7 8e c0 00
	00 00		 movzx	 ecx, WORD PTR [esi+192]
  000d8	52		 push	 edx
  000d9	0f b7 96 be 00
	00 00		 movzx	 edx, WORD PTR [esi+190]
  000e0	50		 push	 eax
  000e1	0f b7 86 bc 00
	00 00		 movzx	 eax, WORD PTR [esi+188]
  000e8	51		 push	 ecx
  000e9	0f b7 8e ba 00
	00 00		 movzx	 ecx, WORD PTR [esi+186]
  000f0	52		 push	 edx
  000f1	0f b7 96 b6 00
	00 00		 movzx	 edx, WORD PTR [esi+182]
  000f8	50		 push	 eax
  000f9	0f b7 86 b4 00
	00 00		 movzx	 eax, WORD PTR [esi+180]
  00100	51		 push	 ecx
  00101	52		 push	 edx
  00102	50		 push	 eax
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@KMACIGAJ@?$FLCastleSiege?$FN?5State?5?9?5End?5Cycle?5@
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1856 : 
; 1857 : 	LogAddTD("[CastleSiege] State - End Cycle : Date-Changing Info (%d-%d-%d) (%d-%d-%d)",
; 1858 : 		m_tmStartDate.wYear,m_tmStartDate.wMonth,m_tmStartDate.wDay,
; 1859 : 		m_tmEndDate.wYear,m_tmEndDate.wMonth,m_tmEndDate.wDay);

  0010e	0f b7 8e ca 00
	00 00		 movzx	 ecx, WORD PTR [esi+202]
  00115	0f b7 96 c6 00
	00 00		 movzx	 edx, WORD PTR [esi+198]
  0011c	0f b7 86 c4 00
	00 00		 movzx	 eax, WORD PTR [esi+196]
  00123	51		 push	 ecx
  00124	0f b7 8e ba 00
	00 00		 movzx	 ecx, WORD PTR [esi+186]
  0012b	52		 push	 edx
  0012c	50		 push	 eax
  0012d	0f b7 96 b6 00
	00 00		 movzx	 edx, WORD PTR [esi+182]
  00134	0f b7 86 b4 00
	00 00		 movzx	 eax, WORD PTR [esi+180]
  0013b	51		 push	 ecx
  0013c	52		 push	 edx
  0013d	50		 push	 eax
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@OFOJCFPB@?$FLCastleSiege?$FN?5State?5?9?5End?5Cycle?5@
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1860 : 
; 1861 : 	GS_GDReqSiegeDateChange(m_iMapSvrGroup,-1,m_tmStartDate.wYear,(BYTE)m_tmStartDate.wMonth,
; 1862 : 		(BYTE)m_tmStartDate.wDay,m_tmEndDate.wYear,(BYTE)m_tmEndDate.wMonth,(BYTE)m_tmEndDate.wDay);

  00149	0f b6 8e ca 00
	00 00		 movzx	 ecx, BYTE PTR [esi+202]
  00150	0f b6 96 c6 00
	00 00		 movzx	 edx, BYTE PTR [esi+198]
  00157	0f b7 86 c4 00
	00 00		 movzx	 eax, WORD PTR [esi+196]
  0015e	83 c4 50	 add	 esp, 80			; 00000050H
  00161	51		 push	 ecx
  00162	0f b6 8e ba 00
	00 00		 movzx	 ecx, BYTE PTR [esi+186]
  00169	52		 push	 edx
  0016a	0f b6 96 b6 00
	00 00		 movzx	 edx, BYTE PTR [esi+182]
  00171	50		 push	 eax
  00172	0f b7 86 b4 00
	00 00		 movzx	 eax, WORD PTR [esi+180]
  00179	51		 push	 ecx
  0017a	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0017d	52		 push	 edx
  0017e	50		 push	 eax
  0017f	6a ff		 push	 -1
  00181	51		 push	 ecx
  00182	e8 00 00 00 00	 call	 ?GS_GDReqSiegeDateChange@@YAXHHGEEGEE@Z ; GS_GDReqSiegeDateChange

; 1863 : 	GS_GDReqResetRegSiegeInfo(m_iMapSvrGroup);

  00187	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 ?GS_GDReqResetRegSiegeInfo@@YAXH@Z ; GS_GDReqResetRegSiegeInfo

; 1864 : 	GS_GDReqResetSiegeGuildInfo(m_iMapSvrGroup);

  00190	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00193	50		 push	 eax
  00194	e8 00 00 00 00	 call	 ?GS_GDReqResetSiegeGuildInfo@@YAXH@Z ; GS_GDReqResetSiegeGuildInfo
  00199	83 c4 28	 add	 esp, 40			; 00000028H

; 1865 : 	SetState(CASTLESIEGE_STATE_REGSIEGE,1);

  0019c	6a 01		 push	 1
  0019e	6a 01		 push	 1
  001a0	8b ce		 mov	 ecx, esi
  001a2	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState

; 1866 : }

  001a7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001aa	5f		 pop	 edi
  001ab	33 cd		 xor	 ecx, ebp
  001ad	5e		 pop	 esi
  001ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c2 04 00	 ret	 4
?SetState_ENDCYCLE@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_ENDCYCLE
_TEXT	ENDS
PUBLIC	?ClearNonDbNPC@CCastleSiege@@QAEXXZ		; CCastleSiege::ClearNonDbNPC
EXTRN	?DeleteMercenary@CMercenary@@QAEHH@Z:PROC	; CMercenary::DeleteMercenary
EXTRN	?g_CsNPC_Mercenary@@3VCMercenary@@A:QWORD	; g_CsNPC_Mercenary
EXTRN	?DeleteLifeStone@CLifeStone@@QAEHH@Z:PROC	; CLifeStone::DeleteLifeStone
EXTRN	?g_CsNPC_LifeStone@@3VCLifeStone@@A:DWORD	; g_CsNPC_LifeStone
; Function compile flags: /Ogtp
;	COMDAT ?ClearNonDbNPC@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ClearNonDbNPC@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ClearNonDbNPC, COMDAT
; _this$ = ecx

; 2063 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2064 : 	for(int n = 0; n < OBJ_MAXMONSTER; n++)

  00002	33 ff		 xor	 edi, edi
  00004	33 f6		 xor	 esi, esi
$LL8@ClearNonDb:

; 2065 : 	{
; 2066 : 		if(gObjIsConnected(n)
; 2067 : 			&& gObj[n].MapNumber == MAP_INDEX_CASTLESIEGE
; 2068 : 			&& gObj[n].m_btCsNpcType != NULL
; 2069 : 			&& gObj[n].m_btCsNpcType != 1)

  00006	57		 push	 edi
  00007	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000c	83 c4 04	 add	 esp, 4
  0000f	85 c0		 test	 eax, eax
  00011	0f 84 82 00 00
	00		 je	 $LN7@ClearNonDb
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001c	80 bc 06 23 01
	00 00 1e	 cmp	 BYTE PTR [esi+eax+291], 30 ; 0000001eH
  00024	75 73		 jne	 SHORT $LN7@ClearNonDb
  00026	8a 8c 06 50 20
	00 00		 mov	 cl, BYTE PTR [esi+eax+8272]
  0002d	84 c9		 test	 cl, cl
  0002f	74 68		 je	 SHORT $LN7@ClearNonDb
  00031	80 f9 01	 cmp	 cl, 1
  00034	74 63		 je	 SHORT $LN7@ClearNonDb

; 2070 : 		{
; 2071 : 			if(gObj[n].Class == 278)

  00036	b9 16 01 00 00	 mov	 ecx, 278		; 00000116H
  0003b	66 39 8c 06 90
	00 00 00	 cmp	 WORD PTR [esi+eax+144], cx
  00043	75 10		 jne	 SHORT $LN4@ClearNonDb

; 2072 : 			{
; 2073 : 				g_CsNPC_LifeStone.DeleteLifeStone(n);

  00045	57		 push	 edi
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_LifeStone@@3VCLifeStone@@A ; g_CsNPC_LifeStone
  0004b	e8 00 00 00 00	 call	 ?DeleteLifeStone@CLifeStone@@QAEHH@Z ; CLifeStone::DeleteLifeStone
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN4@ClearNonDb:

; 2074 : 			}
; 2075 : 
; 2076 : 			if(gObj[n].Class == 287 || gObj[n].Class == 286)

  00055	0f b7 8c 06 90
	00 00 00	 movzx	 ecx, WORD PTR [esi+eax+144]
  0005d	ba 1f 01 00 00	 mov	 edx, 287		; 0000011fH
  00062	66 3b ca	 cmp	 cx, dx
  00065	74 0a		 je	 SHORT $LN2@ClearNonDb
  00067	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  0006c	66 3b ca	 cmp	 cx, dx
  0006f	75 10		 jne	 SHORT $LN3@ClearNonDb
$LN2@ClearNonDb:

; 2077 : 			{
; 2078 : 				g_CsNPC_Mercenary.DeleteMercenary(n);

  00071	57		 push	 edi
  00072	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Mercenary@@3VCMercenary@@A ; g_CsNPC_Mercenary
  00077	e8 00 00 00 00	 call	 ?DeleteMercenary@CMercenary@@QAEHH@Z ; CMercenary::DeleteMercenary
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN3@ClearNonDb:

; 2079 : 			}
; 2080 : 
; 2081 : 			if(gObj[n].Class == 219)

  00081	b9 db 00 00 00	 mov	 ecx, 219		; 000000dbH
  00086	66 39 8c 06 90
	00 00 00	 cmp	 WORD PTR [esi+eax+144], cx
  0008e	74 09		 je	 SHORT $LN7@ClearNonDb

; 2082 : 				continue;
; 2083 : 
; 2084 : 			gObjDel(n);

  00090	57		 push	 edi
  00091	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00096	83 c4 04	 add	 esp, 4
$LN7@ClearNonDb:

; 2064 : 	for(int n = 0; n < OBJ_MAXMONSTER; n++)

  00099	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  0009f	47		 inc	 edi
  000a0	81 fe 00 dd 49
	06		 cmp	 esi, 105504000		; 0649dd00H
  000a6	0f 8c 5a ff ff
	ff		 jl	 $LL8@ClearNonDb

; 2085 : 		}
; 2086 : 	}
; 2087 : }

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	c3		 ret	 0
?ClearNonDbNPC@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ClearNonDbNPC
_TEXT	ENDS
PUBLIC	?SavePcRoomUserList@CCastleSiege@@QAEXXZ	; CCastleSiege::SavePcRoomUserList
; Function compile flags: /Ogtp
;	COMDAT ?SavePcRoomUserList@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?SavePcRoomUserList@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::SavePcRoomUserList, COMDAT
; _this$ = ecx

; 2382 : 	// EMPTY FUNCTION
; 2383 : }

  00000	c3		 ret	 0
?SavePcRoomUserList@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::SavePcRoomUserList
_TEXT	ENDS
PUBLIC	?ReSpawnEnemyUser@CCastleSiege@@QAEXH@Z		; CCastleSiege::ReSpawnEnemyUser
EXTRN	?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolCreate
EXTRN	?GCTeleportSend@@YAXPAUOBJECTSTRUCT@@HEEEE@Z:PROC ; GCTeleportSend
EXTRN	?gObjClearViewport@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjClearViewport
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ReSpawnEnemyUser@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_iCNT$186440 = -12					; size = 4
_iCNT$186434 = -12					; size = 4
_iUSER$186416 = -8					; size = 4
_iTY$ = -4						; size = 4
_bRefreshOwnerUser$ = 8					; size = 4
?ReSpawnEnemyUser@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::ReSpawnEnemyUser, COMDAT
; _this$ = ecx

; 2386 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2387 : 	int iTX;
; 2388 : 	int iTY;
; 2389 : 	unsigned char btMapAttr;
; 2390 : 
; 2391 : 	for(int iUSER = OBJ_STARTUSERINDEX; iUSER < OBJMAX; iUSER++)

  00009	c7 45 f8 04 29
	00 00		 mov	 DWORD PTR _iUSER$186416[ebp], 10500 ; 00002904H
  00010	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL24@ReSpawnEne:

; 2392 : 	{
; 2393 : 		if(gObjIsConnected(iUSER) == FALSE)

  00015	8b 45 f8	 mov	 eax, DWORD PTR _iUSER$186416[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c0		 test	 eax, eax
  00023	0f 84 af 02 00
	00		 je	 $LN23@ReSpawnEne

; 2394 : 			continue;
; 2395 : 
; 2396 : 		if(gObj[iUSER].MapNumber != MAP_INDEX_CASTLESIEGE)

  00029	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002f	8a 84 16 23 01
	00 00		 mov	 al, BYTE PTR [esi+edx+291]
  00036	3c 1e		 cmp	 al, 30			; 0000001eH
  00038	0f 85 9a 02 00
	00		 jne	 $LN23@ReSpawnEne

; 2397 : 			continue;
; 2398 : 
; 2399 : 		unsigned char btCsJoinSide = gObj[iUSER].m_btCsJoinSide;

  0003e	8a 8c 16 5a 20
	00 00		 mov	 cl, BYTE PTR [esi+edx+8282]

; 2400 : 
; 2401 : 		if(btCsJoinSide < 0)
; 2402 : 		{
; 2403 : 			btCsJoinSide = 0;
; 2404 : 		}
; 2405 : 
; 2406 : 		if(btCsJoinSide > 2)

  00045	80 f9 02	 cmp	 cl, 2
  00048	76 02		 jbe	 SHORT $LN18@ReSpawnEne

; 2407 : 		{
; 2408 : 			btCsJoinSide = 2;

  0004a	b1 02		 mov	 cl, 2
$LN18@ReSpawnEne:

; 2409 : 		}
; 2410 : 
; 2411 : 		int bMoveOK = FALSE;
; 2412 : 
; 2413 : 		switch(btCsJoinSide)

  0004c	0f b6 c9	 movzx	 ecx, cl
  0004f	33 ff		 xor	 edi, edi
  00051	2b cf		 sub	 ecx, edi
  00053	0f 84 10 01 00
	00		 je	 $LN7@ReSpawnEne
  00059	49		 dec	 ecx
  0005a	74 64		 je	 SHORT $LN15@ReSpawnEne
  0005c	49		 dec	 ecx
  0005d	0f 85 65 02 00
	00		 jne	 $LN2@ReSpawnEne

; 2435 : 		case 2:
; 2436 : 			{
; 2437 : 				for(int iCNT = 0; iCNT < 100; iCNT++)

  00063	89 7d f4	 mov	 DWORD PTR _iCNT$186434[ebp], edi
$LL11@ReSpawnEne:

; 2438 : 				{
; 2439 : 					iTX = (rand() % (g_iCsUserReSpawnArea[2][2] - g_iCsUserReSpawnArea[2][0])) + g_iCsUserReSpawnArea[2][0];

  00066	e8 00 00 00 00	 call	 _rand
  0006b	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+32
  00071	8b 3d 28 00 00
	00		 mov	 edi, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+40
  00077	99		 cdq
  00078	2b f9		 sub	 edi, ecx
  0007a	f7 ff		 idiv	 edi
  0007c	8d 1c 11	 lea	 ebx, DWORD PTR [ecx+edx]

; 2440 : 					iTY = (rand() % (g_iCsUserReSpawnArea[2][3] - g_iCsUserReSpawnArea[2][1])) + g_iCsUserReSpawnArea[2][1];

  0007f	e8 00 00 00 00	 call	 _rand
  00084	8b 0d 24 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+36
  0008a	8b 3d 2c 00 00
	00		 mov	 edi, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+44
  00090	2b f9		 sub	 edi, ecx
  00092	99		 cdq
  00093	f7 ff		 idiv	 edi
  00095	03 d1		 add	 edx, ecx

; 2441 : 
; 2442 : 					btMapAttr = MapC[MAP_INDEX_CASTLESIEGE].m_attrbuf[iTY * 256 + iTX];

  00097	8b ca		 mov	 ecx, edx
  00099	c1 e1 08	 shl	 ecx, 8
  0009c	03 0d c0 94 9c
	00		 add	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A+10261696
  000a2	89 55 fc	 mov	 DWORD PTR _iTY$[ebp], edx

; 2443 : 
; 2444 : 					if((btMapAttr & 4) != 4)

  000a5	f6 04 19 04	 test	 BYTE PTR [ecx+ebx], 4
  000a9	0f 84 18 01 00
	00		 je	 $LN38@ReSpawnEne

; 2435 : 		case 2:
; 2436 : 			{
; 2437 : 				for(int iCNT = 0; iCNT < 100; iCNT++)

  000af	8b 45 f4	 mov	 eax, DWORD PTR _iCNT$186434[ebp]
  000b2	40		 inc	 eax
  000b3	89 45 f4	 mov	 DWORD PTR _iCNT$186434[ebp], eax
  000b6	83 f8 64	 cmp	 eax, 100		; 00000064H
  000b9	7c ab		 jl	 SHORT $LL11@ReSpawnEne

; 2460 : 
; 2461 : 					if((btMapAttr & 4) != 4)

  000bb	e9 08 02 00 00	 jmp	 $LN2@ReSpawnEne
$LN15@ReSpawnEne:

; 2414 : 		{
; 2415 : 		case 1:
; 2416 : 			if(bRefreshOwnerUser != FALSE)

  000c0	39 7d 08	 cmp	 DWORD PTR _bRefreshOwnerUser$[ebp], edi
  000c3	0f 84 ff 01 00
	00		 je	 $LN2@ReSpawnEne

; 2417 : 			{
; 2418 : 				gObj[iUSER].RegenMapNumber = gObj[iUSER].MapNumber;

  000c9	88 84 16 8c 05
	00 00		 mov	 BYTE PTR [esi+edx+1420], al

; 2419 : 				gObj[iUSER].RegenMapX = gObj[iUSER].X;

  000d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d5	8a 94 06 20 01
	00 00		 mov	 dl, BYTE PTR [esi+eax+288]
  000dc	88 94 06 8d 05
	00 00		 mov	 BYTE PTR [esi+eax+1421], dl

; 2420 : 				gObj[iUSER].RegenMapY = gObj[iUSER].Y;

  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e8	8a 8c 06 21 01
	00 00		 mov	 cl, BYTE PTR [esi+eax+289]
  000ef	88 8c 06 8e 05
	00 00		 mov	 BYTE PTR [esi+eax+1422], cl

; 2421 : 
; 2422 : 				gObjClearViewport(&gObj[iUSER]);

  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fc	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?gObjClearViewport@@YAXPAUOBJECTSTRUCT@@@Z ; gObjClearViewport

; 2423 : 
; 2424 : 				GCTeleportSend(&gObj[iUSER],0xFF,gObj[iUSER].MapNumber,gObj[iUSER].X,gObj[iUSER].Y,gObj[iUSER].Dir);

  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010b	0f b6 94 0e 22
	01 00 00	 movzx	 edx, BYTE PTR [esi+ecx+290]
  00113	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00116	0f b6 88 21 01
	00 00		 movzx	 ecx, BYTE PTR [eax+289]
  0011d	52		 push	 edx
  0011e	0f b6 90 20 01
	00 00		 movzx	 edx, BYTE PTR [eax+288]
  00125	51		 push	 ecx
  00126	0f b6 88 23 01
	00 00		 movzx	 ecx, BYTE PTR [eax+291]
  0012d	52		 push	 edx
  0012e	51		 push	 ecx
  0012f	68 ff 00 00 00	 push	 255			; 000000ffH
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ?GCTeleportSend@@YAXPAUOBJECTSTRUCT@@HEEEE@Z ; GCTeleportSend

; 2425 : 
; 2426 : 				if(gObj[iUSER].m_Change >= 0)

  0013a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00140	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00143	83 c4 1c	 add	 esp, 28			; 0000001cH
  00146	39 b8 34 06 00
	00		 cmp	 DWORD PTR [eax+1588], edi
  0014c	7c 09		 jl	 SHORT $LN13@ReSpawnEne

; 2427 : 				{
; 2428 : 					gObjViewportListProtocolCreate(&gObj[iUSER]);

  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate
  00154	83 c4 04	 add	 esp, 4
$LN13@ReSpawnEne:

; 2429 : 				}
; 2430 : 
; 2431 : 				gObj[iUSER].RegenOk = TRUE;

  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015c	c6 84 06 8b 05
	00 00 01	 mov	 BYTE PTR [esi+eax+1419], 1

; 2432 : 			}
; 2433 : 			bMoveOK = FALSE;
; 2434 : 			break;

  00164	e9 5f 01 00 00	 jmp	 $LN2@ReSpawnEne
$LN7@ReSpawnEne:

; 2445 : 					{
; 2446 : 						bMoveOK = TRUE;
; 2447 : 						break;
; 2448 : 					}
; 2449 : 				}
; 2450 : 			}
; 2451 : 			break;
; 2452 : 		case 0:
; 2453 : 			{
; 2454 : 				for(int iCNT = 0; iCNT < 100; iCNT++)

  00169	89 7d f4	 mov	 DWORD PTR _iCNT$186440[ebp], edi
  0016c	8d 64 24 00	 npad	 4
$LL6@ReSpawnEne:

; 2455 : 				{
; 2456 : 					iTX = (rand()% (g_iCsUserReSpawnArea[0][2] - g_iCsUserReSpawnArea[0][0])) + g_iCsUserReSpawnArea[0][0];

  00170	e8 00 00 00 00	 call	 _rand
  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA
  0017b	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+8
  00181	99		 cdq
  00182	2b f9		 sub	 edi, ecx
  00184	f7 ff		 idiv	 edi
  00186	8d 1c 11	 lea	 ebx, DWORD PTR [ecx+edx]

; 2457 : 					iTY = (rand()% (g_iCsUserReSpawnArea[0][3] - g_iCsUserReSpawnArea[0][1])) + g_iCsUserReSpawnArea[0][1];

  00189	e8 00 00 00 00	 call	 _rand
  0018e	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+4
  00194	8b 3d 0c 00 00
	00		 mov	 edi, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+12
  0019a	2b f9		 sub	 edi, ecx
  0019c	99		 cdq
  0019d	f7 ff		 idiv	 edi
  0019f	03 d1		 add	 edx, ecx
  001a1	89 55 fc	 mov	 DWORD PTR _iTY$[ebp], edx

; 2458 : 
; 2459 : 					btMapAttr = MapC[MAP_INDEX_CASTLESIEGE].m_attrbuf[iTY * 256 + iTX];

  001a4	c1 e2 08	 shl	 edx, 8
  001a7	03 15 c0 94 9c
	00		 add	 edx, DWORD PTR ?MapC@@3PAVMapClass@@A+10261696

; 2460 : 
; 2461 : 					if((btMapAttr & 4) != 4)

  001ad	f6 04 1a 04	 test	 BYTE PTR [edx+ebx], 4
  001b1	74 11		 je	 SHORT $LN36@ReSpawnEne

; 2445 : 					{
; 2446 : 						bMoveOK = TRUE;
; 2447 : 						break;
; 2448 : 					}
; 2449 : 				}
; 2450 : 			}
; 2451 : 			break;
; 2452 : 		case 0:
; 2453 : 			{
; 2454 : 				for(int iCNT = 0; iCNT < 100; iCNT++)

  001b3	8b 45 f4	 mov	 eax, DWORD PTR _iCNT$186440[ebp]
  001b6	40		 inc	 eax
  001b7	89 45 f4	 mov	 DWORD PTR _iCNT$186440[ebp], eax
  001ba	83 f8 64	 cmp	 eax, 100		; 00000064H
  001bd	7c b1		 jl	 SHORT $LL6@ReSpawnEne

; 2460 : 
; 2461 : 					if((btMapAttr & 4) != 4)

  001bf	e9 04 01 00 00	 jmp	 $LN2@ReSpawnEne
$LN36@ReSpawnEne:
  001c4	8b 55 fc	 mov	 edx, DWORD PTR _iTY$[ebp]
$LN38@ReSpawnEne:

; 2462 : 					{
; 2463 : 						bMoveOK = TRUE;
; 2464 : 						break;
; 2465 : 					}
; 2466 : 				}
; 2467 : 			}
; 2468 : 			break;
; 2469 : 		}
; 2470 : 
; 2471 : 		if(bMoveOK != FALSE)
; 2472 : 		{
; 2473 : 			gObj[iUSER].m_State = 32;

  001c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001cd	c7 84 0e d0 01
	00 00 20 00 00
	00		 mov	 DWORD PTR [esi+ecx+464], 32 ; 00000020H

; 2474 : 			gObj[iUSER].X = iTX;

  001d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001dd	88 9c 06 20 01
	00 00		 mov	 BYTE PTR [esi+eax+288], bl

; 2475 : 			gObj[iUSER].Y = iTY;

  001e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ea	88 94 0e 21 01
	00 00		 mov	 BYTE PTR [esi+ecx+289], dl

; 2476 : 			gObj[iUSER].TX = iTX;

  001f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001f6	88 9c 06 52 01
	00 00		 mov	 BYTE PTR [esi+eax+338], bl

; 2477 : 			gObj[iUSER].TX = iTY;

  001fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00203	88 94 0e 52 01
	00 00		 mov	 BYTE PTR [esi+ecx+338], dl

; 2478 : 			gObj[iUSER].MapNumber = MAP_INDEX_CASTLESIEGE;

  0020a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00210	c6 84 16 23 01
	00 00 1e	 mov	 BYTE PTR [esi+edx+291], 30 ; 0000001eH

; 2479 : 			gObj[iUSER].PathCount = 0;

  00218	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0021d	c7 84 06 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+eax+344], 0

; 2480 : 			gObj[iUSER].Teleport = 0;

  00228	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0022e	c6 84 0e 88 05
	00 00 00	 mov	 BYTE PTR [esi+ecx+1416], 0

; 2481 : 
; 2482 : 			gObjClearViewport(&gObj[iUSER]);

  00236	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0023c	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  0023f	50		 push	 eax
  00240	e8 00 00 00 00	 call	 ?gObjClearViewport@@YAXPAUOBJECTSTRUCT@@@Z ; gObjClearViewport

; 2483 : 			GCTeleportSend(&gObj[iUSER],0xFF,MAP_INDEX_CASTLESIEGE,gObj[iUSER].X,gObj[iUSER].Y,gObj[iUSER].Dir);

  00245	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0024b	0f b6 94 0e 22
	01 00 00	 movzx	 edx, BYTE PTR [esi+ecx+290]
  00253	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00256	0f b6 88 21 01
	00 00		 movzx	 ecx, BYTE PTR [eax+289]
  0025d	52		 push	 edx
  0025e	0f b6 90 20 01
	00 00		 movzx	 edx, BYTE PTR [eax+288]
  00265	51		 push	 ecx
  00266	52		 push	 edx
  00267	6a 1e		 push	 30			; 0000001eH
  00269	68 ff 00 00 00	 push	 255			; 000000ffH
  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 ?GCTeleportSend@@YAXPAUOBJECTSTRUCT@@HEEEE@Z ; GCTeleportSend

; 2484 : 
; 2485 : 			if(gObj[iUSER].m_Change >= 0)

  00274	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00279	03 c6		 add	 eax, esi
  0027b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0027e	83 b8 34 06 00
	00 00		 cmp	 DWORD PTR [eax+1588], 0
  00285	7c 09		 jl	 SHORT $LN1@ReSpawnEne

; 2486 : 			{
; 2487 : 				gObjViewportListProtocolCreate(&gObj[iUSER]);

  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate
  0028d	83 c4 04	 add	 esp, 4
$LN1@ReSpawnEne:

; 2488 : 			}
; 2489 : 
; 2490 : 			gObj[iUSER].RegenMapNumber = MAP_INDEX_CASTLESIEGE;

  00290	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00296	c6 84 0e 8c 05
	00 00 1e	 mov	 BYTE PTR [esi+ecx+1420], 30 ; 0000001eH

; 2491 : 			gObj[iUSER].RegenMapX = iTX;

  0029e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2492 : 			gObj[iUSER].RegenMapY = iTY;

  002a4	8a 4d fc	 mov	 cl, BYTE PTR _iTY$[ebp]
  002a7	88 9c 16 8d 05
	00 00		 mov	 BYTE PTR [esi+edx+1421], bl
  002ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002b3	88 8c 06 8e 05
	00 00		 mov	 BYTE PTR [esi+eax+1422], cl

; 2493 : 			gObj[iUSER].RegenOk = TRUE;

  002ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002c0	c6 84 16 8b 05
	00 00 01	 mov	 BYTE PTR [esi+edx+1419], 1
$LN2@ReSpawnEne:

; 2494 : 		}
; 2495 : 
; 2496 : 		//NotifySelfCsJoinSide(iUSER);
; 2497 : 
; 2498 : 		gObj[iUSER].m_iAccumulatedCrownAccessTime = 0;

  002c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002cd	c7 84 06 74 20
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+eax+8308], 0
$LN23@ReSpawnEne:

; 2387 : 	int iTX;
; 2388 : 	int iTY;
; 2389 : 	unsigned char btMapAttr;
; 2390 : 
; 2391 : 	for(int iUSER = OBJ_STARTUSERINDEX; iUSER < OBJMAX; iUSER++)

  002d8	ff 45 f8	 inc	 DWORD PTR _iUSER$186416[ebp]
  002db	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  002e1	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  002e7	0f 8c 28 fd ff
	ff		 jl	 $LL24@ReSpawnEne
  002ed	5f		 pop	 edi
  002ee	5e		 pop	 esi
  002ef	5b		 pop	 ebx

; 2499 : 	}
; 2500 : }

  002f0	8b e5		 mov	 esp, ebp
  002f2	5d		 pop	 ebp
  002f3	c2 04 00	 ret	 4
?ReSpawnEnemyUser@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::ReSpawnEnemyUser
_TEXT	ENDS
PUBLIC	?NotifyAllUserCsStartState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyAllUserCsStartState
; Function compile flags: /Ogtp
;	COMDAT ?NotifyAllUserCsStartState@CCastleSiege@@QAEXE@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 5
_btStartState$ = 8					; size = 1
?NotifyAllUserCsStartState@CCastleSiege@@QAEXE@Z PROC	; CCastleSiege::NotifyAllUserCsStartState, COMDAT
; _this$ = ecx

; 2509 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2510 : 	PMSG_ANS_NOTIFYCSSTART pMsg;
; 2511 : 
; 2512 : 	pMsg.h.set((PBYTE)&pMsg,0xB2,0x17,sizeof(pMsg));
; 2513 : 	pMsg.btStartState = btStartState;

  00006	8a 45 08	 mov	 al, BYTE PTR _btStartState$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	88 45 fc	 mov	 BYTE PTR _pMsg$[ebp+4], al
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00013	c7 45 f8 c1 05
	b2 17		 mov	 DWORD PTR _pMsg$[ebp], 397542849 ; 17b205c1H

; 2514 : 
; 2515 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  0001a	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  0001f	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL11@NotifyAllU:

; 2516 : 	{
; 2517 : 		if(gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00024	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  00029	75 1e		 jne	 SHORT $LN3@NotifyAllU
  0002b	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  00030	75 17		 jne	 SHORT $LN3@NotifyAllU

; 2518 : 		{
; 2519 : 			DataSend(i,(PBYTE)&pMsg,pMsg.h.size);

  00032	0f b6 4d f9	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00036	51		 push	 ecx
  00037	8d 55 f8	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0003a	52		 push	 edx
  0003b	57		 push	 edi
  0003c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@NotifyAllU:

; 2514 : 
; 2515 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00049	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  0004f	47		 inc	 edi
  00050	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00056	7c cc		 jl	 SHORT $LL11@NotifyAllU
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi

; 2520 : 		}
; 2521 : 	}
; 2522 : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?NotifyAllUserCsStartState@CCastleSiege@@QAEXE@Z ENDP	; CCastleSiege::NotifyAllUserCsStartState
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z	; CCastleSiege::SendAllUserAnyMsg
EXTRN	?SendNoticeToAllUser@TNotice@@SAXPAX@Z:PROC	; TNotice::SendNoticeToAllUser
EXTRN	?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z:PROC	; TNotice::SetNoticeProperty
EXTRN	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z:PROC	; TNotice::MakeNoticeMsg
; Function compile flags: /Ogtp
;	COMDAT ?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z
_TEXT	SEGMENT
_pNotice$ = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
_lpszMsg$ = 8						; size = 4
_iType$ = 12						; size = 4
?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z PROC	; CCastleSiege::SendAllUserAnyMsg, COMDAT
; _this$ = ecx

; 2525 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _lpszMsg$[ebp]

; 2526 : 	if(lpszMsg == NULL)

  00016	85 c0		 test	 eax, eax
  00018	0f 84 b5 00 00
	00		 je	 $LN7@SendAllUse

; 2527 : 		return;
; 2528 : 
; 2529 : 	PMSG_NOTICE pNotice;
; 2530 : 
; 2531 : 	switch(iType)

  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _iType$[ebp]
  00021	49		 dec	 ecx
  00022	74 78		 je	 SHORT $LN6@SendAllUse
  00024	49		 dec	 ecx
  00025	0f 85 a8 00 00
	00		 jne	 $LN7@SendAllUse

; 2537 : 		break;
; 2538 : 	case 2:
; 2539 : 
; 2540 : 		TNotice::MakeNoticeMsg(&pNotice,0,lpszMsg);

  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2541 : 
; 2542 : 		for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00043	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00048	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  0004d	8d 49 00	 npad	 3
$LL4@SendAllUse:

; 2543 : 		{
; 2544 : 			if(gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00050	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  00055	75 24		 jne	 SHORT $LN3@SendAllUse
  00057	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  0005c	75 1d		 jne	 SHORT $LN3@SendAllUse

; 2545 : 			{
; 2546 : 				DataSend(i,(PBYTE)&pNotice,pNotice.h.size);

  0005e	0f b6 8d ed fe
	ff ff		 movzx	 ecx, BYTE PTR _pNotice$[ebp+1]
  00065	51		 push	 ecx
  00066	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$[ebp]
  0006c	52		 push	 edx
  0006d	57		 push	 edi
  0006e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SendAllUse:

; 2541 : 
; 2542 : 		for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  0007b	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00081	47		 inc	 edi
  00082	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00088	7c c6		 jl	 SHORT $LL4@SendAllUse
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi

; 2547 : 			}
; 2548 : 		}
; 2549 : 
; 2550 : 		break;
; 2551 : 	}
; 2552 : }

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008f	33 cd		 xor	 ecx, ebp
  00091	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
$LN6@SendAllUse:

; 2532 : 	{
; 2533 : 	case 1:
; 2534 : 		TNotice::MakeNoticeMsg(&pNotice,0,lpszMsg);

  0009c	50		 push	 eax
  0009d	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  000a3	6a 00		 push	 0
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg

; 2535 : 		TNotice::SetNoticeProperty(&pNotice,10,_ARGB(255,255,200,80),1,0,20);

  000ab	6a 14		 push	 20			; 00000014H
  000ad	6a 00		 push	 0
  000af	6a 01		 push	 1
  000b1	68 ff c8 50 ff	 push	 -11482881		; ff50c8ffH
  000b6	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$[ebp]
  000bc	6a 0a		 push	 10			; 0000000aH
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 ?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z ; TNotice::SetNoticeProperty

; 2536 : 		TNotice::SendNoticeToAllUser(&pNotice);

  000c4	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$[ebp]
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 ?SendNoticeToAllUser@TNotice@@SAXPAX@Z ; TNotice::SendNoticeToAllUser
  000d0	83 c4 28	 add	 esp, 40			; 00000028H
$LN7@SendAllUse:

; 2547 : 			}
; 2548 : 		}
; 2549 : 
; 2550 : 		break;
; 2551 : 	}
; 2552 : }

  000d3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d6	33 cd		 xor	 ecx, ebp
  000d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 08 00	 ret	 8
?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z ENDP	; CCastleSiege::SendAllUserAnyMsg
_TEXT	ENDS
PUBLIC	?SendMapServerGroupMsg@CCastleSiege@@QAEXPAD@Z	; CCastleSiege::SendMapServerGroupMsg
EXTRN	?GS_GDReqMapSvrMsgMultiCast@@YAXHPAD@Z:PROC	; GS_GDReqMapSvrMsgMultiCast
; Function compile flags: /Ogtp
;	COMDAT ?SendMapServerGroupMsg@CCastleSiege@@QAEXPAD@Z
_TEXT	SEGMENT
_lpszMsg$ = 8						; size = 4
?SendMapServerGroupMsg@CCastleSiege@@QAEXPAD@Z PROC	; CCastleSiege::SendMapServerGroupMsg, COMDAT
; _this$ = ecx

; 2555 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2556 : 	GS_GDReqMapSvrMsgMultiCast(m_iMapSvrGroup,lpszMsg);

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpszMsg$[ebp]
  00006	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?GS_GDReqMapSvrMsgMultiCast@@YAXHPAD@Z ; GS_GDReqMapSvrMsgMultiCast
  00010	83 c4 08	 add	 esp, 8

; 2557 : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?SendMapServerGroupMsg@CCastleSiege@@QAEXPAD@Z ENDP	; CCastleSiege::SendMapServerGroupMsg
_TEXT	ENDS
PUBLIC	?GetDataLoadState@CCastleSiege@@QAEHXZ		; CCastleSiege::GetDataLoadState
; Function compile flags: /Ogtp
;	COMDAT ?GetDataLoadState@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetDataLoadState@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetDataLoadState, COMDAT
; _this$ = ecx

; 2561 : 	return m_iCastleDataLoadState;

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 2562 : }

  00003	c3		 ret	 0
?GetDataLoadState@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetDataLoadState
_TEXT	ENDS
PUBLIC	?SetDataLoadState@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetDataLoadState
; Function compile flags: /Ogtp
;	COMDAT ?SetDataLoadState@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_iDataLoadState$ = 8					; size = 4
?SetDataLoadState@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetDataLoadState, COMDAT
; _this$ = ecx

; 2565 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2566 : 	m_iCastleDataLoadState = iDataLoadState;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iDataLoadState$[ebp]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 2567 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetDataLoadState@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetDataLoadState
_TEXT	ENDS
PUBLIC	?SetDbDataLoadOK@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetDbDataLoadOK
; Function compile flags: /Ogtp
;	COMDAT ?SetDbDataLoadOK@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bDbDataLoadOK$ = 8					; size = 4
?SetDbDataLoadOK@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetDbDataLoadOK, COMDAT
; _this$ = ecx

; 2570 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2571 : 	m_bDbDataLoadOK = bDbDataLoadOK;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bDbDataLoadOK$[ebp]
  00006	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 2572 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetDbDataLoadOK@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetDbDataLoadOK
_TEXT	ENDS
PUBLIC	?ProcState_NONE@CCastleSiege@@QAEXXZ		; CCastleSiege::ProcState_NONE
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_NONE@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ProcState_NONE@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_NONE, COMDAT
; _this$ = ecx

; 2739 : 	// EMPTY FUNCTION
; 2740 : }

  00000	c3		 ret	 0
?ProcState_NONE@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_NONE
_TEXT	ENDS
PUBLIC	??1?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@XZ ; std::_Pair_base<int,_CS_MINIMAP_DATA>::~_Pair_base<int,_CS_MINIMAP_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@XZ PROC	; std::_Pair_base<int,_CS_MINIMAP_DATA>::~_Pair_base<int,_CS_MINIMAP_DATA>, COMDAT
; _this$ = ecx
  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00007	c3		 ret	 0
??1?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@XZ ENDP	; std::_Pair_base<int,_CS_MINIMAP_DATA>::~_Pair_base<int,_CS_MINIMAP_DATA>
_TEXT	ENDS
PUBLIC	?ClearNonDbNPC_MidWin@CCastleSiege@@QAEXXZ	; CCastleSiege::ClearNonDbNPC_MidWin
; Function compile flags: /Ogtp
;	COMDAT ?ClearNonDbNPC_MidWin@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ClearNonDbNPC_MidWin@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ClearNonDbNPC_MidWin, COMDAT
; _this$ = ecx

; 3310 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 3311 : 	for(int n = 0; n < OBJ_MAXMONSTER; n++)

  00002	33 ff		 xor	 edi, edi
  00004	33 f6		 xor	 esi, esi
$LL6@ClearNonDb@2:

; 3312 : 	{
; 3313 : 		if(gObjIsConnected(n)
; 3314 : 			&& gObj[n].MapNumber == MAP_INDEX_CASTLESIEGE
; 3315 : 			&& gObj[n].m_btCsNpcType != 0
; 3316 : 			&& gObj[n].m_btCsNpcType != 1)

  00006	57		 push	 edi
  00007	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000c	83 c4 04	 add	 esp, 4
  0000f	85 c0		 test	 eax, eax
  00011	74 56		 je	 SHORT $LN5@ClearNonDb@2
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00018	80 bc 06 23 01
	00 00 1e	 cmp	 BYTE PTR [esi+eax+291], 30 ; 0000001eH
  00020	75 47		 jne	 SHORT $LN5@ClearNonDb@2
  00022	8a 8c 06 50 20
	00 00		 mov	 cl, BYTE PTR [esi+eax+8272]
  00029	84 c9		 test	 cl, cl
  0002b	74 3c		 je	 SHORT $LN5@ClearNonDb@2
  0002d	80 f9 01	 cmp	 cl, 1
  00030	74 37		 je	 SHORT $LN5@ClearNonDb@2

; 3317 : 		{
; 3318 : 			if(gObj[n].Class == 278)

  00032	b9 16 01 00 00	 mov	 ecx, 278		; 00000116H
  00037	66 39 8c 06 90
	00 00 00	 cmp	 WORD PTR [esi+eax+144], cx
  0003f	75 10		 jne	 SHORT $LN2@ClearNonDb@2

; 3319 : 			{
; 3320 : 				g_CsNPC_LifeStone.DeleteLifeStone(n);

  00041	57		 push	 edi
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_LifeStone@@3VCLifeStone@@A ; g_CsNPC_LifeStone
  00047	e8 00 00 00 00	 call	 ?DeleteLifeStone@CLifeStone@@QAEHH@Z ; CLifeStone::DeleteLifeStone
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN2@ClearNonDb@2:

; 3321 : 			}
; 3322 : 
; 3323 : 			if(gObj[n].Class == 278)

  00051	ba 16 01 00 00	 mov	 edx, 278		; 00000116H
  00056	66 39 94 06 90
	00 00 00	 cmp	 WORD PTR [esi+eax+144], dx
  0005e	75 09		 jne	 SHORT $LN5@ClearNonDb@2

; 3324 : 			{
; 3325 : 				gObjDel(n);

  00060	57		 push	 edi
  00061	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00066	83 c4 04	 add	 esp, 4
$LN5@ClearNonDb@2:

; 3311 : 	for(int n = 0; n < OBJ_MAXMONSTER; n++)

  00069	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  0006f	47		 inc	 edi
  00070	81 fe 00 dd 49
	06		 cmp	 esi, 105504000		; 0649dd00H
  00076	7c 8e		 jl	 SHORT $LL6@ClearNonDb@2

; 3326 : 			}
; 3327 : 		}
; 3328 : 	}
; 3329 : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	c3		 ret	 0
?ClearNonDbNPC_MidWin@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ClearNonDbNPC_MidWin
_TEXT	ENDS
PUBLIC	??_C@_0CH@BGBDJFNB@?$FLCastleSiege?$FN?5Crown?5State?5Change@ ; `string'
PUBLIC	??_C@_0EL@KHBPMGI@?$FLCastleSiege?$FN?5CCastleSiege?3?3Noti@ ; `string'
PUBLIC	?NotifyCrownState@CCastleSiege@@QAEXE@Z		; CCastleSiege::NotifyCrownState
;	COMDAT ??_C@_0CH@BGBDJFNB@?$FLCastleSiege?$FN?5Crown?5State?5Change@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\include\prodef.h
CONST	SEGMENT
??_C@_0CH@BGBDJFNB@?$FLCastleSiege?$FN?5Crown?5State?5Change@ DB '[Castle'
	DB	'Siege] Crown State Changed (%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@KHBPMGI@?$FLCastleSiege?$FN?5CCastleSiege?3?3Noti@
CONST	SEGMENT
??_C@_0EL@KHBPMGI@?$FLCastleSiege?$FN?5CCastleSiege?3?3Noti@ DB '[CastleS'
	DB	'iege] CCastleSiege::NotifyCrownState() - m_iCrownIndex isn''t'
	DB	' Valid', 00H				; `string'
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
CONST	ENDS
;	COMDAT ?NotifyCrownState@CCastleSiege@@QAEXE@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 5
_btState$ = 8						; size = 1
?NotifyCrownState@CCastleSiege@@QAEXE@Z PROC		; CCastleSiege::NotifyCrownState, COMDAT
; _this$ = ecx

; 3338 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 3339 : 	if(gObjIsConnected(m_iCrownIndex) == FALSE)

  00009	8b 86 ec 01 00
	00		 mov	 eax, DWORD PTR [esi+492]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00015	83 c4 04	 add	 esp, 4
  00018	85 c0		 test	 eax, eax
  0001a	75 17		 jne	 SHORT $LN9@NotifyCrow
$LN17@NotifyCrow:

; 3340 : 	{
; 3341 : 		LogAddC(2,"[CastleSiege] CCastleSiege::NotifyCrownState() - m_iCrownIndex isn't Valid");

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@KHBPMGI@?$FLCastleSiege?$FN?5CCastleSiege?3?3Noti@
  00021	6a 02		 push	 2
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00029	83 c4 08	 add	 esp, 8
  0002c	5e		 pop	 esi

; 3383 : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN9@NotifyCrow:

; 3342 : 		return;
; 3343 : 	}
; 3344 : 
; 3345 : 	if(gObj[m_iCrownIndex].Class != 216)

  00033	8b b6 ec 01 00
	00		 mov	 esi, DWORD PTR [esi+492]
  00039	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  0003f	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00045	b8 d8 00 00 00	 mov	 eax, 216		; 000000d8H
  0004a	66 39 86 90 00
	00 00		 cmp	 WORD PTR [esi+144], ax

; 3346 : 	{
; 3347 : 		LogAddC(2,"[CastleSiege] CCastleSiege::NotifyCrownState() - m_iCrownIndex isn't Valid");
; 3348 : 		return;

  00051	75 c9		 jne	 SHORT $LN17@NotifyCrow

; 3349 : 	}
; 3350 : 
; 3351 : 	LPOBJ lpObj = &gObj[m_iCrownIndex];
; 3352 : 
; 3353 : 	if( btState == FALSE )

  00053	80 7d 08 00	 cmp	 BYTE PTR _btState$[ebp], 0
  00057	75 17		 jne	 SHORT $LN7@NotifyCrow

; 3354 : 	{
; 3355 : 		gObjAddBuffEffect(lpObj,BUFF_CROWNREGISTER,0,0,0,0,-10);

  00059	6a f6		 push	 -10			; fffffff6H
  0005b	6a 00		 push	 0
  0005d	6a 00		 push	 0
  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	6a 14		 push	 20			; 00000014H
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  0006b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3356 : 	}
; 3357 : 	else

  0006e	eb 0b		 jmp	 SHORT $LN6@NotifyCrow
$LN7@NotifyCrow:

; 3358 : 	{
; 3359 : 		gObjRemoveBuffEffect(lpObj,BUFF_CROWNREGISTER);

  00070	6a 14		 push	 20			; 00000014H
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00078	83 c4 08	 add	 esp, 8
$LN6@NotifyCrow:

; 3360 : 	}
; 3361 : 
; 3362 : 	if(lpObj->VPCount2 < 1)

  0007b	83 be d0 0f 00
	00 01		 cmp	 DWORD PTR [esi+4048], 1
  00082	7c 6b		 jl	 SHORT $LN10@NotifyCrow

; 3363 : 		return;
; 3364 : 
; 3365 : 	PMSG_ANS_NOTIFYCROWNSTATE pMsg;
; 3366 : 
; 3367 : 	pMsg.h.set((PBYTE)&pMsg,0xB2,0x16,sizeof(pMsg));
; 3368 : 	pMsg.btCrownState = btState;

  00084	8a 4d 08	 mov	 cl, BYTE PTR _btState$[ebp]
  00087	57		 push	 edi
  00088	c7 45 f8 c1 05
	b2 16		 mov	 DWORD PTR _pMsg$[ebp], 380765633 ; 16b205c1H
  0008f	88 4d fc	 mov	 BYTE PTR _pMsg$[ebp+4], cl
  00092	81 c6 4a 0c 00
	00		 add	 esi, 3146		; 00000c4aH
  00098	bf 4b 00 00 00	 mov	 edi, 75			; 0000004bH
  0009d	8d 49 00	 npad	 3
$LL4@NotifyCrow:

; 3373 : 	{
; 3374 : 		tObjNum = lpObj->VpPlayer2[i].number;

  000a0	0f bf 06	 movsx	 eax, WORD PTR [esi]

; 3375 : 
; 3376 : 		if(tObjNum >= 0 && gObj[tObjNum].Type == OBJ_USER && gObj[tObjNum].Live != FALSE)

  000a3	85 c0		 test	 eax, eax
  000a5	78 2e		 js	 SHORT $LN3@NotifyCrow
  000a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ad	8b d0		 mov	 edx, eax
  000af	69 d2 40 27 00
	00		 imul	 edx, 10048		; 00002740H
  000b5	80 7c 11 50 01	 cmp	 BYTE PTR [ecx+edx+80], 1
  000ba	75 19		 jne	 SHORT $LN3@NotifyCrow
  000bc	80 7c 11 51 00	 cmp	 BYTE PTR [ecx+edx+81], 0
  000c1	74 12		 je	 SHORT $LN3@NotifyCrow

; 3377 : 		{
; 3378 : 			DataSend(tObjNum,(PBYTE)&pMsg,pMsg.h.size);

  000c3	0f b6 55 f9	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  000c7	52		 push	 edx
  000c8	8d 4d f8	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000cb	51		 push	 ecx
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@NotifyCrow:

; 3369 : 
; 3370 : 	int tObjNum = -1;
; 3371 : 
; 3372 : 	for(int i = 0; i < MAX_VIEWPORT; i++)

  000d5	83 c6 0c	 add	 esi, 12			; 0000000cH
  000d8	4f		 dec	 edi
  000d9	75 c5		 jne	 SHORT $LL4@NotifyCrow

; 3379 : 		}
; 3380 : 	}
; 3381 : 
; 3382 : 	LogAddTD("[CastleSiege] Crown State Changed (%d)",btState);

  000db	0f b6 55 08	 movzx	 edx, BYTE PTR _btState$[ebp]
  000df	52		 push	 edx
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BGBDJFNB@?$FLCastleSiege?$FN?5Crown?5State?5Change@
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000eb	83 c4 08	 add	 esp, 8
  000ee	5f		 pop	 edi
$LN10@NotifyCrow:
  000ef	5e		 pop	 esi

; 3383 : }

  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 04 00	 ret	 4
?NotifyCrownState@CCastleSiege@@QAEXE@Z ENDP		; CCastleSiege::NotifyCrownState
_TEXT	ENDS
PUBLIC	?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex
; Function compile flags: /Ogtp
;	COMDAT ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_iMonsterClass$ = 8					; size = 4
?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z PROC	; CCastleSiege::ResetCrownSwitchUserIndex, COMDAT
; _this$ = ecx

; 3386 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3387 : 	switch(iMonsterClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMonsterClass$[ebp]
  00006	2d d9 00 00 00	 sub	 eax, 217		; 000000d9H
  0000b	74 11		 je	 SHORT $LN2@ResetCrown
  0000d	48		 dec	 eax
  0000e	75 18		 jne	 SHORT $LN3@ResetCrown

; 3391 : 		break;
; 3392 : 	case 218:
; 3393 : 		m_iCastleSwitchAccessUser2 = -1;

  00010	c7 81 fc 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+508], -1

; 3394 : 		break;
; 3395 : 	}
; 3396 : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
$LN2@ResetCrown:

; 3388 : 	{
; 3389 : 	case 217:
; 3390 : 		m_iCastleSwitchAccessUser1 = -1;

  0001e	c7 81 f8 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+504], -1
$LN3@ResetCrown:

; 3394 : 		break;
; 3395 : 	}
; 3396 : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ENDP	; CCastleSiege::ResetCrownSwitchUserIndex
_TEXT	ENDS
PUBLIC	?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z	; CCastleSiege::SetCrownAccessUserY
; Function compile flags: /Ogtp
;	COMDAT ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z
_TEXT	SEGMENT
_iY$ = 8						; size = 1
?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z PROC		; CCastleSiege::SetCrownAccessUserY, COMDAT
; _this$ = ecx

; 3399 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3400 : 	m_btCastleCrownAccessUserY = iY;

  00003	8a 45 08	 mov	 al, BYTE PTR _iY$[ebp]
  00006	88 81 f5 01 00
	00		 mov	 BYTE PTR [ecx+501], al

; 3401 : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ENDP		; CCastleSiege::SetCrownAccessUserY
_TEXT	ENDS
PUBLIC	?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z	; CCastleSiege::SetCrownAccessUserX
; Function compile flags: /Ogtp
;	COMDAT ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 1
?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z PROC		; CCastleSiege::SetCrownAccessUserX, COMDAT
; _this$ = ecx

; 3404 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3405 : 	m_btCastleCrownAccessUserX = iX;

  00003	8a 45 08	 mov	 al, BYTE PTR _iX$[ebp]
  00006	88 81 f4 01 00
	00		 mov	 BYTE PTR [ecx+500], al

; 3406 : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ENDP		; CCastleSiege::SetCrownAccessUserX
_TEXT	ENDS
PUBLIC	?ResetCrownUserIndex@CCastleSiege@@QAEXXZ	; CCastleSiege::ResetCrownUserIndex
; Function compile flags: /Ogtp
;	COMDAT ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ResetCrownUserIndex@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ResetCrownUserIndex, COMDAT
; _this$ = ecx

; 3410 : 	m_iCastleCrownAccessUser = -1;

  00000	c7 81 f0 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+496], -1

; 3411 : }

  0000a	c3		 ret	 0
?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ResetCrownUserIndex
_TEXT	ENDS
PUBLIC	?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ	; CCastleSiege::ResetCrownAccessTickCount
; Function compile flags: /Ogtp
;	COMDAT ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ PROC	; CCastleSiege::ResetCrownAccessTickCount, COMDAT
; _this$ = ecx

; 3415 : 	m_dwCrownAccessTime = 0;

  00000	c7 81 00 02 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+512], 0

; 3416 : }

  0000a	c3		 ret	 0
?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ENDP	; CCastleSiege::ResetCrownAccessTickCount
_TEXT	ENDS
PUBLIC	?SetCrownAccessTickCount@CCastleSiege@@QAEXXZ	; CCastleSiege::SetCrownAccessTickCount
; Function compile flags: /Ogtp
;	COMDAT ?SetCrownAccessTickCount@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?SetCrownAccessTickCount@CCastleSiege@@QAEXXZ PROC	; CCastleSiege::SetCrownAccessTickCount, COMDAT
; _this$ = ecx

; 3419 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3420 : 	m_dwCrownAccessTime = GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	89 86 00 02 00
	00		 mov	 DWORD PTR [esi+512], eax
  0000f	5e		 pop	 esi

; 3421 : }

  00010	c3		 ret	 0
?SetCrownAccessTickCount@CCastleSiege@@QAEXXZ ENDP	; CCastleSiege::SetCrownAccessTickCount
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?NotifyAllUserCsProgState@CCastleSiege@@QAEXEPAD@Z ; CCastleSiege::NotifyAllUserCsProgState
; Function compile flags: /Ogtp
;	COMDAT ?NotifyAllUserCsProgState@CCastleSiege@@QAEXEPAD@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 13
__$ArrayPad$ = -4					; size = 4
_btProgState$ = 8					; size = 1
_lpszGuildName$ = 12					; size = 4
?NotifyAllUserCsProgState@CCastleSiege@@QAEXEPAD@Z PROC	; CCastleSiege::NotifyAllUserCsProgState, COMDAT
; _this$ = ecx

; 3431 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3432 : 	PMSG_ANS_NOTIFYCSPROGRESS pMsg;
; 3433 : 	pMsg.h.set((LPBYTE)&pMsg,0xB2,0x18,sizeof(pMsg));
; 3434 : 	pMsg.btCastleSiegeState = btProgState;

  00010	8a 4d 08	 mov	 cl, BYTE PTR _btProgState$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _lpszGuildName$[ebp]

; 3435 : 	memset(pMsg.szGuildName,0x00,sizeof(pMsg.szGuildName));
; 3436 : 	memcpy(pMsg.szGuildName,lpszGuildName,sizeof(pMsg.szGuildName));

  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	88 4d f0	 mov	 BYTE PTR _pMsg$[ebp+4], cl
  0001e	33 c9		 xor	 ecx, ecx
  00020	56		 push	 esi
  00021	89 4d f5	 mov	 DWORD PTR _pMsg$[ebp+9], ecx
  00024	57		 push	 edi
  00025	89 4d f1	 mov	 DWORD PTR _pMsg$[ebp+5], ecx
  00028	89 45 f5	 mov	 DWORD PTR _pMsg$[ebp+9], eax

; 3439 : 	{
; 3440 : 		if(gObj[i].Connected == PLAYER_PLAYING
; 3441 : 			&& gObj[i].Type == OBJ_USER
; 3442 : 			&& gObj[i].MapNumber == MAP_INDEX_CASTLESIEGE)

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	c7 45 ec c1 0d
	b2 18		 mov	 DWORD PTR _pMsg$[ebp], 414322113 ; 18b20dc1H
  00037	89 55 f1	 mov	 DWORD PTR _pMsg$[ebp+5], edx
  0003a	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  0003f	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL11@NotifyAllU@2:
  00044	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  00049	75 28		 jne	 SHORT $LN3@NotifyAllU@2
  0004b	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  00050	75 21		 jne	 SHORT $LN3@NotifyAllU@2
  00052	80 bc 06 23 01
	00 00 1e	 cmp	 BYTE PTR [esi+eax+291], 30 ; 0000001eH
  0005a	75 17		 jne	 SHORT $LN3@NotifyAllU@2

; 3443 : 		{
; 3444 : 			DataSend(i,(LPBYTE)&pMsg,pMsg.h.size);

  0005c	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00060	51		 push	 ecx
  00061	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00064	52		 push	 edx
  00065	57		 push	 edi
  00066	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@NotifyAllU@2:

; 3437 : 
; 3438 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX;i++)

  00073	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00079	47		 inc	 edi
  0007a	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00080	7c c2		 jl	 SHORT $LL11@NotifyAllU@2

; 3445 : 		}
; 3446 : 	}
; 3447 : }

  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	5f		 pop	 edi
  00086	33 cd		 xor	 ecx, ebp
  00088	5e		 pop	 esi
  00089	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
?NotifyAllUserCsProgState@CCastleSiege@@QAEXEPAD@Z ENDP	; CCastleSiege::NotifyAllUserCsProgState
_TEXT	ENDS
PUBLIC	?SetCastleTowerAccessable@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetCastleTowerAccessable
; Function compile flags: /Ogtp
;	COMDAT ?SetCastleTowerAccessable@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bTowerAccessable$ = 8					; size = 4
?SetCastleTowerAccessable@CCastleSiege@@QAEXH@Z PROC	; CCastleSiege::SetCastleTowerAccessable, COMDAT
; _this$ = ecx

; 3501 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3502 : 	m_bCastleTowerAccessable = bTowerAccessable;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bTowerAccessable$[ebp]
  00006	89 81 e4 01 00
	00		 mov	 DWORD PTR [ecx+484], eax

; 3503 : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCastleTowerAccessable@CCastleSiege@@QAEXH@Z ENDP	; CCastleSiege::SetCastleTowerAccessable
_TEXT	ENDS
PUBLIC	?ClearCastleTowerBarrier@CCastleSiege@@QAEXXZ	; CCastleSiege::ClearCastleTowerBarrier
; Function compile flags: /Ogtp
;	COMDAT ?ClearCastleTowerBarrier@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ClearCastleTowerBarrier@CCastleSiege@@QAEXXZ PROC	; CCastleSiege::ClearCastleTowerBarrier, COMDAT
; _this$ = ecx

; 3506 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 3507 : 	for(int iIDX = 0; iIDX < OBJ_MAXMONSTER; iIDX++)

  00002	33 ff		 xor	 edi, edi
  00004	33 f6		 xor	 esi, esi
$LL5@ClearCastl:

; 3508 : 	{
; 3509 : 		if(gObjIsConnected(iIDX)== FALSE)

  00006	57		 push	 edi
  00007	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000c	83 c4 04	 add	 esp, 4
  0000f	85 c0		 test	 eax, eax
  00011	74 1e		 je	 SHORT $LN4@ClearCastl

; 3510 : 			continue;
; 3511 : 
; 3512 : 		if(gObj[iIDX].Class == 215)

  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00019	b8 d7 00 00 00	 mov	 eax, 215		; 000000d7H
  0001e	66 39 84 0e 90
	00 00 00	 cmp	 WORD PTR [esi+ecx+144], ax
  00026	75 09		 jne	 SHORT $LN4@ClearCastl

; 3513 : 		{
; 3514 : 			gObjDel(iIDX);

  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0002e	83 c4 04	 add	 esp, 4
$LN4@ClearCastl:

; 3507 : 	for(int iIDX = 0; iIDX < OBJ_MAXMONSTER; iIDX++)

  00031	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00037	47		 inc	 edi
  00038	81 fe 00 dd 49
	06		 cmp	 esi, 105504000		; 0649dd00H
  0003e	7c c6		 jl	 SHORT $LL5@ClearCastl

; 3515 : 		}
; 3516 : 	}
; 3517 : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	c3		 ret	 0
?ClearCastleTowerBarrier@CCastleSiege@@QAEXXZ ENDP	; CCastleSiege::ClearCastleTowerBarrier
_TEXT	ENDS
PUBLIC	?CheckGuardianStatueExist@CCastleSiege@@QAEHXZ	; CCastleSiege::CheckGuardianStatueExist
; Function compile flags: /Ogtp
;	COMDAT ?CheckGuardianStatueExist@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?CheckGuardianStatueExist@CCastleSiege@@QAEHXZ PROC	; CCastleSiege::CheckGuardianStatueExist, COMDAT
; _this$ = ecx

; 3521 : 	for(int iIDX = 0; iIDX < OBJ_MAXMONSTER; iIDX++)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00006	33 d2		 xor	 edx, edx
  00008	83 c1 04	 add	 ecx, 4
  0000b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0000e	56		 push	 esi
  0000f	90		 npad	 1
$LL4@CheckGuard:

; 3522 : 	{
; 3523 : 		if(gObj[iIDX].Class == 283
; 3524 : 			&& gObj[iIDX].Connected > PLAYER_LOGGED
; 3525 : 			&& gObj[iIDX].Live == TRUE
; 3526 : 			&& gObj[iIDX].MapNumber == MAP_INDEX_CASTLESIEGE)

  00010	be 1b 01 00 00	 mov	 esi, 283		; 0000011bH
  00015	66 39 b1 8c 00
	00 00		 cmp	 WORD PTR [ecx+140], si
  0001c	75 13		 jne	 SHORT $LN3@CheckGuard
  0001e	83 39 02	 cmp	 DWORD PTR [ecx], 2
  00021	7e 0e		 jle	 SHORT $LN3@CheckGuard
  00023	38 41 4d	 cmp	 BYTE PTR [ecx+77], al
  00026	75 09		 jne	 SHORT $LN3@CheckGuard
  00028	80 b9 1f 01 00
	00 1e		 cmp	 BYTE PTR [ecx+287], 30	; 0000001eH
  0002f	74 12		 je	 SHORT $LN5@CheckGuard
$LN3@CheckGuard:

; 3521 : 	for(int iIDX = 0; iIDX < OBJ_MAXMONSTER; iIDX++)

  00031	03 d0		 add	 edx, eax
  00033	81 c1 40 27 00
	00		 add	 ecx, 10048		; 00002740H
  00039	81 fa 04 29 00
	00		 cmp	 edx, 10500		; 00002904H
  0003f	7c cf		 jl	 SHORT $LL4@CheckGuard

; 3527 : 		{
; 3528 : 			return true;
; 3529 : 		}
; 3530 : 	}
; 3531 : 	return false;

  00041	33 c0		 xor	 eax, eax
$LN5@CheckGuard:
  00043	5e		 pop	 esi

; 3532 : }

  00044	c3		 ret	 0
?CheckGuardianStatueExist@CCastleSiege@@QAEHXZ ENDP	; CCastleSiege::CheckGuardianStatueExist
_TEXT	ENDS
PUBLIC	?GetCastleState@CCastleSiege@@QAEHXZ		; CCastleSiege::GetCastleState
; Function compile flags: /Ogtp
;	COMDAT ?GetCastleState@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCastleState@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCastleState, COMDAT
; _this$ = ecx

; 3536 : 	return m_iCastleSiegeState;

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 3537 : }

  00003	c3		 ret	 0
?GetCastleState@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCastleState
_TEXT	ENDS
PUBLIC	?GetCastleLeftSiegeDate@CCastleSiege@@QAE?AU_SYSTEMTIME@@XZ ; CCastleSiege::GetCastleLeftSiegeDate
; Function compile flags: /Ogtp
;	COMDAT ?GetCastleLeftSiegeDate@CCastleSiege@@QAE?AU_SYSTEMTIME@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetCastleLeftSiegeDate@CCastleSiege@@QAE?AU_SYSTEMTIME@@XZ PROC ; CCastleSiege::GetCastleLeftSiegeDate, COMDAT
; _this$ = ecx

; 3541 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3542 : 	return m_tmLeftCastleSiegeDate;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0000c	89 10		 mov	 DWORD PTR [eax], edx
  0000e	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001d	8b 89 8c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+140]
  00023	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00026	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 3543 : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?GetCastleLeftSiegeDate@CCastleSiege@@QAE?AU_SYSTEMTIME@@XZ ENDP ; CCastleSiege::GetCastleLeftSiegeDate
_TEXT	ENDS
PUBLIC	?GetCastleStateTerm@CCastleSiege@@QAEHPAU_SYSTEMTIME@@0@Z ; CCastleSiege::GetCastleStateTerm
; Function compile flags: /Ogtp
;	COMDAT ?GetCastleStateTerm@CCastleSiege@@QAEHPAU_SYSTEMTIME@@0@Z
_TEXT	SEGMENT
_tmStateStartDate$ = 8					; size = 4
_tmStateEndDate$ = 12					; size = 4
?GetCastleStateTerm@CCastleSiege@@QAEHPAU_SYSTEMTIME@@0@Z PROC ; CCastleSiege::GetCastleStateTerm, COMDAT
; _this$ = ecx

; 3619 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 3620 : 	if(m_iCastleSiegeState < CASTLESIEGE_STATE_IDLE_1 || m_iCastleSiegeState > CASTLESIEGE_STATE_ENDCYCLE)

  00006	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00009	85 c0		 test	 eax, eax
  0000b	78 5c		 js	 SHORT $LN2@GetCastleS
  0000d	83 f8 09	 cmp	 eax, 9
  00010	7f 57		 jg	 SHORT $LN2@GetCastleS

; 3623 : 	}
; 3624 : 
; 3625 : 	if(m_bDoRun == FALSE)

  00012	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0

; 3626 : 	{
; 3627 : 		return false;

  00016	74 51		 je	 SHORT $LN2@GetCastleS

; 3628 : 	}
; 3629 : 
; 3630 : 	*tmStateStartDate = m_tmStateStartDate;

  00018	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  0001b	8b 45 08	 mov	 eax, DWORD PTR _tmStateStartDate$[ebp]
  0001e	89 08		 mov	 DWORD PTR [eax], ecx
  00020	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  00023	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00026	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  00029	57		 push	 edi

; 3631 : 	GetLocalTime(tmStateEndDate);

  0002a	8b 7d 0c	 mov	 edi, DWORD PTR _tmStateEndDate$[ebp]
  0002d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00030	8b 56 7c	 mov	 edx, DWORD PTR [esi+124]
  00033	57		 push	 edi
  00034	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 3632 : 	GetNextDay(tmStateEndDate,0,0,0,m_iCS_REMAIN_MSEC / 1000);

  0003d	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00042	f7 6e 68	 imul	 DWORD PTR [esi+104]
  00045	c1 fa 06	 sar	 edx, 6
  00048	8b c2		 mov	 eax, edx
  0004a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004d	03 c2		 add	 eax, edx
  0004f	50		 push	 eax
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	6a 00		 push	 0
  00056	57		 push	 edi
  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay
  0005e	5f		 pop	 edi

; 3633 : return true;

  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	5e		 pop	 esi

; 3634 : }

  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
$LN2@GetCastleS:

; 3621 : 	{
; 3622 : 		return false;

  00069	33 c0		 xor	 eax, eax
  0006b	5e		 pop	 esi

; 3634 : }

  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
?GetCastleStateTerm@CCastleSiege@@QAEHPAU_SYSTEMTIME@@0@Z ENDP ; CCastleSiege::GetCastleStateTerm
_TEXT	ENDS
PUBLIC	?GetCurRemainSec@CCastleSiege@@QAEHXZ		; CCastleSiege::GetCurRemainSec
; Function compile flags: /Ogtp
;	COMDAT ?GetCurRemainSec@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCurRemainSec@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCurRemainSec, COMDAT
; _this$ = ecx

; 3638 : 	if(m_iCS_REMAIN_MSEC < 0)

  00000	8b 49 68	 mov	 ecx, DWORD PTR [ecx+104]
  00003	85 c9		 test	 ecx, ecx
  00005	79 04		 jns	 SHORT $LN1@GetCurRema

; 3639 : 	{
; 3640 : 		return -1;

  00007	83 c8 ff	 or	 eax, -1

; 3643 : }

  0000a	c3		 ret	 0
$LN1@GetCurRema:

; 3641 : 	}
; 3642 : return m_iCS_REMAIN_MSEC / 1000;

  0000b	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00010	f7 e9		 imul	 ecx
  00012	c1 fa 06	 sar	 edx, 6
  00015	8b c2		 mov	 eax, edx
  00017	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001a	03 c2		 add	 eax, edx

; 3643 : }

  0001c	c3		 ret	 0
?GetCurRemainSec@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCurRemainSec
_TEXT	ENDS
PUBLIC	?ClearDbNPC@CCastleSiege@@QAEXXZ		; CCastleSiege::ClearDbNPC
; Function compile flags: /Ogtp
;	COMDAT ?ClearDbNPC@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ClearDbNPC@CCastleSiege@@QAEXXZ PROC			; CCastleSiege::ClearDbNPC, COMDAT
; _this$ = ecx

; 3647 : 	for(int n = 0; n < OBJ_MAXMONSTER; n++)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	33 db		 xor	 ebx, ebx
  0000a	8b f9		 mov	 edi, ecx
  0000c	33 f6		 xor	 esi, esi
  0000e	8b ff		 npad	 2
$LL6@ClearDbNPC:

; 3648 : 	{
; 3649 : 		if(gObj[n].MapNumber == MAP_INDEX_CASTLESIEGE
; 3650 : 			&& (gObj[n].Class == 277 || gObj[n].Class == 283 || gObj[n].Class == 219))

  00010	80 bc 06 23 01
	00 00 1e	 cmp	 BYTE PTR [esi+eax+291], 30 ; 0000001eH
  00018	75 76		 jne	 SHORT $LN5@ClearDbNPC
  0001a	0f b7 8c 06 90
	00 00 00	 movzx	 ecx, WORD PTR [esi+eax+144]
  00022	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  00027	66 3b ca	 cmp	 cx, dx
  0002a	74 14		 je	 SHORT $LN2@ClearDbNPC
  0002c	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH
  00031	66 3b ca	 cmp	 cx, dx
  00034	74 0a		 je	 SHORT $LN2@ClearDbNPC
  00036	ba db 00 00 00	 mov	 edx, 219		; 000000dbH
  0003b	66 3b ca	 cmp	 cx, dx
  0003e	75 50		 jne	 SHORT $LN5@ClearDbNPC
$LN2@ClearDbNPC:

; 3651 : 		{
; 3652 : 			if(gObj[n].Class == 277)

  00040	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  00045	66 3b ca	 cmp	 cx, dx
  00048	75 38		 jne	 SHORT $LN1@ClearDbNPC

; 3653 : 			{
; 3654 : 				SetGateBlockState(gObj[n].X,gObj[n].Y,1);

  0004a	0f b6 8c 06 21
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+289]
  00052	0f b6 94 06 20
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+288]
  0005a	6a 01		 push	 1
  0005c	51		 push	 ecx
  0005d	52		 push	 edx
  0005e	8b cf		 mov	 ecx, edi
  00060	e8 00 00 00 00	 call	 ?SetGateBlockState@CCastleSiege@@QAEXHHH@Z ; CCastleSiege::SetGateBlockState

; 3655 : 				gObjAddBuffEffect(&gObj[n],BUFF_GATESTATUS,0,0,0,0,-10);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006a	6a f6		 push	 -10			; fffffff6H
  0006c	6a 00		 push	 0
  0006e	6a 00		 push	 0
  00070	6a 00		 push	 0
  00072	6a 00		 push	 0
  00074	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  00077	6a 0d		 push	 13			; 0000000dH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  0007f	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@ClearDbNPC:

; 3656 : 			}
; 3657 : 
; 3658 : 			gObjDel(n);

  00082	53		 push	 ebx
  00083	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008d	83 c4 04	 add	 esp, 4
$LN5@ClearDbNPC:

; 3647 : 	for(int n = 0; n < OBJ_MAXMONSTER; n++)

  00090	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00096	43		 inc	 ebx
  00097	81 fe 00 dd 49
	06		 cmp	 esi, 105504000		; 0649dd00H
  0009d	0f 8c 6d ff ff
	ff		 jl	 $LL6@ClearDbNPC

; 3659 : 		}
; 3660 : 	}
; 3661 : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	c3		 ret	 0
?ClearDbNPC@CCastleSiege@@QAEXXZ ENDP			; CCastleSiege::ClearDbNPC
_TEXT	ENDS
PUBLIC	?GetCrownAccessTickCount@CCastleSiege@@QAEHXZ	; CCastleSiege::GetCrownAccessTickCount
; Function compile flags: /Ogtp
;	COMDAT ?GetCrownAccessTickCount@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCrownAccessTickCount@CCastleSiege@@QAEHXZ PROC	; CCastleSiege::GetCrownAccessTickCount, COMDAT
; _this$ = ecx

; 3801 : 	return m_dwCrownAccessTime;

  00000	8b 81 00 02 00
	00		 mov	 eax, DWORD PTR [ecx+512]

; 3802 : }

  00006	c3		 ret	 0
?GetCrownAccessTickCount@CCastleSiege@@QAEHXZ ENDP	; CCastleSiege::GetCrownAccessTickCount
_TEXT	ENDS
PUBLIC	?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z	; CCastleSiege::GetCrownSwitchUserIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z
_TEXT	SEGMENT
_iMonsterClass$ = 8					; size = 4
?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z PROC	; CCastleSiege::GetCrownSwitchUserIndex, COMDAT
; _this$ = ecx

; 3888 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3889 : int iUserIndex = -1;
; 3890 : 
; 3891 : 	switch(iMonsterClass)

  00003	8b 55 08	 mov	 edx, DWORD PTR _iMonsterClass$[ebp]
  00006	83 c8 ff	 or	 eax, -1
  00009	81 ea d9 00 00
	00		 sub	 edx, 217		; 000000d9H
  0000f	74 0d		 je	 SHORT $LN2@GetCrownSw
  00011	4a		 dec	 edx
  00012	75 10		 jne	 SHORT $LN3@GetCrownSw

; 3892 : 	{
; 3893 : 	case 217:
; 3894 : 		iUserIndex = m_iCastleSwitchAccessUser1;
; 3895 : 		break;
; 3896 : 	case 218:
; 3897 : 		iUserIndex = m_iCastleSwitchAccessUser2;
; 3898 : 		break;
; 3899 : 	}
; 3900 : 	return iUserIndex;

  00014	8b 81 fc 01 00
	00		 mov	 eax, DWORD PTR [ecx+508]

; 3901 : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
$LN2@GetCrownSw:

; 3892 : 	{
; 3893 : 	case 217:
; 3894 : 		iUserIndex = m_iCastleSwitchAccessUser1;
; 3895 : 		break;
; 3896 : 	case 218:
; 3897 : 		iUserIndex = m_iCastleSwitchAccessUser2;
; 3898 : 		break;
; 3899 : 	}
; 3900 : 	return iUserIndex;

  0001e	8b 81 f8 01 00
	00		 mov	 eax, DWORD PTR [ecx+504]
$LN3@GetCrownSw:

; 3901 : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ENDP	; CCastleSiege::GetCrownSwitchUserIndex
_TEXT	ENDS
PUBLIC	?GetCrownAccessUserX@CCastleSiege@@QAEHXZ	; CCastleSiege::GetCrownAccessUserX
; Function compile flags: /Ogtp
;	COMDAT ?GetCrownAccessUserX@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCrownAccessUserX@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCrownAccessUserX, COMDAT
; _this$ = ecx

; 3905 : 	return m_btCastleCrownAccessUserX;

  00000	0f b6 81 f4 01
	00 00		 movzx	 eax, BYTE PTR [ecx+500]

; 3906 : }

  00007	c3		 ret	 0
?GetCrownAccessUserX@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCrownAccessUserX
_TEXT	ENDS
PUBLIC	?GetCrownAccessUserY@CCastleSiege@@QAEHXZ	; CCastleSiege::GetCrownAccessUserY
; Function compile flags: /Ogtp
;	COMDAT ?GetCrownAccessUserY@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCrownAccessUserY@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCrownAccessUserY, COMDAT
; _this$ = ecx

; 3910 : 	return m_btCastleCrownAccessUserY;

  00000	0f b6 81 f5 01
	00 00		 movzx	 eax, BYTE PTR [ecx+501]

; 3911 : }

  00007	c3		 ret	 0
?GetCrownAccessUserY@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCrownAccessUserY
_TEXT	ENDS
PUBLIC	?GetCrownUserIndex@CCastleSiege@@QAEHXZ		; CCastleSiege::GetCrownUserIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetCrownUserIndex@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCrownUserIndex@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetCrownUserIndex, COMDAT
; _this$ = ecx

; 3915 : 	return m_iCastleCrownAccessUser;

  00000	8b 81 f0 01 00
	00		 mov	 eax, DWORD PTR [ecx+496]

; 3916 : }

  00006	c3		 ret	 0
?GetCrownUserIndex@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetCrownUserIndex
_TEXT	ENDS
PUBLIC	?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetRegCrownAvailable
; Function compile flags: /Ogtp
;	COMDAT ?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bRegCrownAvaible$ = 8					; size = 4
?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z PROC	; CCastleSiege::SetRegCrownAvailable, COMDAT
; _this$ = ecx

; 3919 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3920 : 	m_bRegCrownAvailable = bRegCrownAvaible;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bRegCrownAvaible$[ebp]
  00006	89 81 e8 01 00
	00		 mov	 DWORD PTR [ecx+488], eax

; 3921 : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z ENDP	; CCastleSiege::SetRegCrownAvailable
_TEXT	ENDS
PUBLIC	?GetRegCrownAvailable@CCastleSiege@@QAEHXZ	; CCastleSiege::GetRegCrownAvailable
; Function compile flags: /Ogtp
;	COMDAT ?GetRegCrownAvailable@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetRegCrownAvailable@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetRegCrownAvailable, COMDAT
; _this$ = ecx

; 3925 : 	return m_bRegCrownAvailable;

  00000	8b 81 e8 01 00
	00		 mov	 eax, DWORD PTR [ecx+488]

; 3926 : }

  00006	c3		 ret	 0
?GetRegCrownAvailable@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetRegCrownAvailable
_TEXT	ENDS
PUBLIC	??4_CS_NPC_DATA@@QAEAAU0@ABU0@@Z		; _CS_NPC_DATA::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4_CS_NPC_DATA@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4_CS_NPC_DATA@@QAEAAU0@ABU0@@Z PROC			; _CS_NPC_DATA::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00011	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00014	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00017	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0001a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0001d	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00020	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00023	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00026	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00029	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0002c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0002f	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00032	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00035	89 50 20	 mov	 DWORD PTR [eax+32], edx
  00038	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0003b	89 50 24	 mov	 DWORD PTR [eax+36], edx
  0003e	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00041	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00044	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00047	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  0004a	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0004d	89 50 30	 mov	 DWORD PTR [eax+48], edx
  00050	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00053	89 50 34	 mov	 DWORD PTR [eax+52], edx
  00056	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00059	89 50 38	 mov	 DWORD PTR [eax+56], edx
  0005c	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0005f	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  00062	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00065	89 50 40	 mov	 DWORD PTR [eax+64], edx
  00068	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0006b	89 50 44	 mov	 DWORD PTR [eax+68], edx
  0006e	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00071	89 50 48	 mov	 DWORD PTR [eax+72], edx
  00074	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00077	89 50 4c	 mov	 DWORD PTR [eax+76], edx
  0007a	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0007d	89 50 50	 mov	 DWORD PTR [eax+80], edx
  00080	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00083	89 50 54	 mov	 DWORD PTR [eax+84], edx
  00086	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  00089	89 50 58	 mov	 DWORD PTR [eax+88], edx
  0008c	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0008f	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  00092	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00095	89 50 60	 mov	 DWORD PTR [eax+96], edx
  00098	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  0009b	89 50 64	 mov	 DWORD PTR [eax+100], edx
  0009e	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  000a1	89 50 68	 mov	 DWORD PTR [eax+104], edx
  000a4	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  000a7	89 50 6c	 mov	 DWORD PTR [eax+108], edx
  000aa	0f b6 51 70	 movzx	 edx, BYTE PTR [ecx+112]
  000ae	88 50 70	 mov	 BYTE PTR [eax+112], dl
  000b1	0f b6 51 71	 movzx	 edx, BYTE PTR [ecx+113]
  000b5	88 50 71	 mov	 BYTE PTR [eax+113], dl
  000b8	0f b6 51 72	 movzx	 edx, BYTE PTR [ecx+114]
  000bc	88 50 72	 mov	 BYTE PTR [eax+114], dl
  000bf	0f b6 51 73	 movzx	 edx, BYTE PTR [ecx+115]
  000c3	88 50 73	 mov	 BYTE PTR [eax+115], dl
  000c6	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  000c9	89 48 70	 mov	 DWORD PTR [eax+112], ecx
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
??4_CS_NPC_DATA@@QAEAAU0@ABU0@@Z ENDP			; _CS_NPC_DATA::operator=
_TEXT	ENDS
PUBLIC	??_C@_0EF@CMDHOJFE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Deleting?5@ ; `string'
PUBLIC	?DelGemOfDefend@CCastleSiege@@QAEHHH@Z		; CCastleSiege::DelGemOfDefend
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?gObjInventoryDeleteItem@@YAEHH@Z:PROC		; gObjInventoryDeleteItem
EXTRN	?gObjInventoryItemSet@@YAXHHE@Z:PROC		; gObjInventoryItemSet
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
;	COMDAT ??_C@_0EF@CMDHOJFE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Deleting?5@
CONST	SEGMENT
??_C@_0EF@CMDHOJFE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Deleting?5@ DB '['
	DB	'CastleSiege] [%s][%s] Deleting Gem of Defend (GUILD:%s) - Ser'
	DB	'ial:%d', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DelGemOfDefend@CCastleSiege@@QAEHHH@Z
_TEXT	SEGMENT
_iGemOfDefendDeletCount$ = -4				; size = 4
tv251 = 8						; size = 4
_iGemOfDefendCount$ = 8					; size = 4
_iIndex$ = 8						; size = 4
_iNeedGemOfDefend$ = 12					; size = 4
?DelGemOfDefend@CCastleSiege@@QAEHHH@Z PROC		; CCastleSiege::DelGemOfDefend, COMDAT
; _this$ = ecx

; 4225 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 4226 : 	if(gObjIsConnected(iIndex) == FALSE)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _iIndex$[ebp]
  00008	53		 push	 ebx
  00009	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000e	83 c4 04	 add	 esp, 4
  00011	85 c0		 test	 eax, eax
  00013	75 07		 jne	 SHORT $LN12@DelGemOfDe
  00015	5b		 pop	 ebx

; 4268 : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
$LN12@DelGemOfDe:
  0001c	57		 push	 edi

; 4227 : 		return false;
; 4228 : 
; 4229 : 	if(iNeedGemOfDefend <= 0)

  0001d	33 ff		 xor	 edi, edi
  0001f	39 7d 0c	 cmp	 DWORD PTR _iNeedGemOfDefend$[ebp], edi
  00022	7f 0a		 jg	 SHORT $LN11@DelGemOfDe

; 4230 : 		return false;

  00024	5f		 pop	 edi
  00025	33 c0		 xor	 eax, eax
  00027	5b		 pop	 ebx

; 4268 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN11@DelGemOfDe:

; 4231 : 
; 4232 : 	int iGemOfDefendCount = 0;

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00033	56		 push	 esi
  00034	8b f3		 mov	 esi, ebx
  00036	89 7d 08	 mov	 DWORD PTR _iGemOfDefendCount$[ebp], edi
  00039	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  0003f	90		 npad	 1
$LL10@DelGemOfDe:

; 4236 : 	{
; 4237 : 		if(gObj[iIndex].pInventory[x].IsItem() == TRUE
; 4238 : 			&& gObj[iIndex].pInventory[x].m_Type == ITEMGET(14,31))

  00040	8b 8c 06 c0 11
	00 00		 mov	 ecx, DWORD PTR [esi+eax+4544]
  00047	03 cf		 add	 ecx, edi
  00049	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004e	83 f8 01	 cmp	 eax, 1
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00056	75 16		 jne	 SHORT $LN9@DelGemOfDe
  00058	8b 8c 06 c0 11
	00 00		 mov	 ecx, DWORD PTR [esi+eax+4544]
  0005f	ba 1f 1c 00 00	 mov	 edx, 7199		; 00001c1fH
  00064	66 39 54 39 06	 cmp	 WORD PTR [ecx+edi+6], dx
  00069	75 03		 jne	 SHORT $LN9@DelGemOfDe

; 4239 : 		{
; 4240 : 			iGemOfDefendCount++;

  0006b	ff 45 08	 inc	 DWORD PTR _iGemOfDefendCount$[ebp]
$LN9@DelGemOfDe:

; 4233 : 
; 4234 : 	int x;
; 4235 : 	for(x = 0; x < INVENTORY_SIZE; x++)

  0006e	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00074	81 ff 44 c4 00
	00		 cmp	 edi, 50244		; 0000c444H
  0007a	7c c4		 jl	 SHORT $LL10@DelGemOfDe

; 4241 : 		}
; 4242 : 	}
; 4243 : 
; 4244 : 	if(iGemOfDefendCount < iNeedGemOfDefend)

  0007c	8b 4d 0c	 mov	 ecx, DWORD PTR _iNeedGemOfDefend$[ebp]
  0007f	39 4d 08	 cmp	 DWORD PTR _iGemOfDefendCount$[ebp], ecx
  00082	7d 0b		 jge	 SHORT $LN6@DelGemOfDe

; 4245 : 		return false;

  00084	5e		 pop	 esi
  00085	5f		 pop	 edi
  00086	33 c0		 xor	 eax, eax
  00088	5b		 pop	 ebx

; 4268 : }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
$LN6@DelGemOfDe:

; 4246 : 
; 4247 : 	int iGemOfDefendDeletCount = 0;

  0008f	33 ff		 xor	 edi, edi
  00091	89 7d fc	 mov	 DWORD PTR _iGemOfDefendDeletCount$[ebp], edi
  00094	89 7d 08	 mov	 DWORD PTR tv251[ebp], edi
  00097	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL22@DelGemOfDe:

; 4250 : 	{
; 4251 : 		if(gObj[iIndex].pInventory[x].IsItem() == TRUE
; 4252 : 			&& gObj[iIndex].pInventory[x].m_Type == ITEMGET(14,31))

  000a0	8b 8c 06 c0 11
	00 00		 mov	 ecx, DWORD PTR [esi+eax+4544]
  000a7	03 4d 08	 add	 ecx, DWORD PTR tv251[ebp]
  000aa	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000af	83 f8 01	 cmp	 eax, 1
  000b2	75 65		 jne	 SHORT $LN23@DelGemOfDe
  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR tv251[ebp]
  000bc	03 8c 06 c0 11
	00 00		 add	 ecx, DWORD PTR [esi+eax+4544]
  000c3	ba 1f 1c 00 00	 mov	 edx, 7199		; 00001c1fH
  000c8	66 39 51 06	 cmp	 WORD PTR [ecx+6], dx
  000cc	75 50		 jne	 SHORT $LN4@DelGemOfDe

; 4253 : 		{
; 4254 : 			LogAddTD("[CastleSiege] [%s][%s] Deleting Gem of Defend (GUILD:%s) - Serial:%d",
; 4255 : 				gObj[iIndex].AccountID,gObj[iIndex].Name,gObj[iIndex].GuildName,gObj[iIndex].pInventory[x].m_Number);

  000ce	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000d0	51		 push	 ecx
  000d1	8d 94 06 1c 06
	00 00		 lea	 edx, DWORD PTR [esi+eax+1564]
  000d8	52		 push	 edx
  000d9	8d 4c 06 5d	 lea	 ecx, DWORD PTR [esi+eax+93]
  000dd	51		 push	 ecx
  000de	8d 54 06 52	 lea	 edx, DWORD PTR [esi+eax+82]
  000e2	52		 push	 edx
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@CMDHOJFE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Deleting?5@
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4256 : 
; 4257 : 			gObjInventoryItemSet(iIndex,x,0xFF);

  000ee	68 ff 00 00 00	 push	 255			; 000000ffH
  000f3	57		 push	 edi
  000f4	53		 push	 ebx
  000f5	e8 00 00 00 00	 call	 ?gObjInventoryItemSet@@YAXHHE@Z ; gObjInventoryItemSet

; 4258 : 			gObjInventoryDeleteItem(iIndex,x);

  000fa	57		 push	 edi
  000fb	53		 push	 ebx
  000fc	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 4259 : 			GCInventoryItemDeleteSend(iIndex,x,TRUE);

  00101	6a 01		 push	 1
  00103	57		 push	 edi
  00104	53		 push	 ebx
  00105	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend

; 4260 : 
; 4261 : 			iGemOfDefendDeletCount++;

  0010a	8b 45 fc	 mov	 eax, DWORD PTR _iGemOfDefendDeletCount$[ebp]
  0010d	40		 inc	 eax
  0010e	83 c4 34	 add	 esp, 52			; 00000034H
  00111	89 45 fc	 mov	 DWORD PTR _iGemOfDefendDeletCount$[ebp], eax

; 4262 : 
; 4263 : 			if(iGemOfDefendDeletCount >= iNeedGemOfDefend)

  00114	3b 45 0c	 cmp	 eax, DWORD PTR _iNeedGemOfDefend$[ebp]
  00117	7d 1e		 jge	 SHORT $LN17@DelGemOfDe
$LN23@DelGemOfDe:
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN4@DelGemOfDe:

; 4248 : 
; 4249 : 	for(x = 0; x < INVENTORY_SIZE; x++)

  0011e	8b 4d 08	 mov	 ecx, DWORD PTR tv251[ebp]
  00121	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00127	47		 inc	 edi
  00128	89 4d 08	 mov	 DWORD PTR tv251[ebp], ecx
  0012b	81 f9 44 c4 00
	00		 cmp	 ecx, 50244		; 0000c444H
  00131	0f 8c 69 ff ff
	ff		 jl	 $LL22@DelGemOfDe
$LN17@DelGemOfDe:
  00137	5e		 pop	 esi
  00138	5f		 pop	 edi

; 4264 : 				break;
; 4265 : 		}
; 4266 : 	}
; 4267 : 	return true;

  00139	b8 01 00 00 00	 mov	 eax, 1
  0013e	5b		 pop	 ebx

; 4268 : }

  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 08 00	 ret	 8
?DelGemOfDefend@CCastleSiege@@QAEHHH@Z ENDP		; CCastleSiege::DelGemOfDefend
_TEXT	ENDS
PUBLIC	?SendCsGateStateViewPort@CCastleSiege@@QAEXHE@Z	; CCastleSiege::SendCsGateStateViewPort
EXTRN	?GCAnsCsGateCurState@@YAXHHH@Z:PROC		; GCAnsCsGateCurState
; Function compile flags: /Ogtp
;	COMDAT ?SendCsGateStateViewPort@CCastleSiege@@QAEXHE@Z
_TEXT	SEGMENT
tv139 = 8						; size = 4
_iGateIndex$ = 8					; size = 4
_btOperate$ = 12					; size = 1
?SendCsGateStateViewPort@CCastleSiege@@QAEXHE@Z PROC	; CCastleSiege::SendCsGateStateViewPort, COMDAT
; _this$ = ecx

; 4576 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 4577 : 	if(gObjIsConnected(iGateIndex) == FALSE)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iGateIndex$[ebp]
  00007	53		 push	 ebx
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	74 6e		 je	 SHORT $LN2@SendCsGate

; 4578 : 		return;
; 4579 : 	LPOBJ lpObj = &gObj[iGateIndex];

  00014	8b c3		 mov	 eax, ebx
  00016	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  0001c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4580 : 
; 4581 : 	if(lpObj->VPCount2 < 1)

  00022	83 b8 d0 0f 00
	00 01		 cmp	 DWORD PTR [eax+4048], 1
  00029	7c 57		 jl	 SHORT $LN2@SendCsGate

; 4582 : 		return;
; 4583 : 
; 4584 : 	int tObjNum = -1;
; 4585 : 
; 4586 : 	for(int i = 0; i < MAX_VIEWPORT;i++)

  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	8d b8 4a 0c 00
	00		 lea	 edi, DWORD PTR [eax+3146]
  00033	c7 45 08 4b 00
	00 00		 mov	 DWORD PTR tv139[ebp], 75 ; 0000004bH
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL12@SendCsGate:

; 4587 : 	{
; 4588 : 		tObjNum = lpObj->VpPlayer2[i].number;

  00040	0f bf 37	 movsx	 esi, WORD PTR [edi]

; 4589 : 
; 4590 : 		if(tObjNum >= 0 && gObj[tObjNum].Type == OBJ_USER && gObjIsConnected(tObjNum))

  00043	85 f6		 test	 esi, esi
  00045	78 31		 js	 SHORT $LN3@SendCsGate
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004d	8b c6		 mov	 eax, esi
  0004f	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  00055	80 7c 08 50 01	 cmp	 BYTE PTR [eax+ecx+80], 1
  0005a	75 1c		 jne	 SHORT $LN3@SendCsGate
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00062	83 c4 04	 add	 esp, 4
  00065	85 c0		 test	 eax, eax
  00067	74 0f		 je	 SHORT $LN3@SendCsGate

; 4591 : 		{
; 4592 : 			GCAnsCsGateCurState(tObjNum,iGateIndex,btOperate);

  00069	0f b6 55 0c	 movzx	 edx, BYTE PTR _btOperate$[ebp]
  0006d	52		 push	 edx
  0006e	53		 push	 ebx
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 ?GCAnsCsGateCurState@@YAXHHH@Z ; GCAnsCsGateCurState
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SendCsGate:

; 4582 : 		return;
; 4583 : 
; 4584 : 	int tObjNum = -1;
; 4585 : 
; 4586 : 	for(int i = 0; i < MAX_VIEWPORT;i++)

  00078	83 c7 0c	 add	 edi, 12			; 0000000cH
  0007b	ff 4d 08	 dec	 DWORD PTR tv139[ebp]
  0007e	75 c0		 jne	 SHORT $LL12@SendCsGate
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
$LN2@SendCsGate:
  00082	5b		 pop	 ebx

; 4593 : 		}
; 4594 : 	}
; 4595 : }

  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
?SendCsGateStateViewPort@CCastleSiege@@QAEXHE@Z ENDP	; CCastleSiege::SendCsGateStateViewPort
_TEXT	ENDS
PUBLIC	?CheckCsGateAlive@CCastleSiege@@QAEHH@Z		; CCastleSiege::CheckCsGateAlive
; Function compile flags: /Ogtp
;	COMDAT ?CheckCsGateAlive@CCastleSiege@@QAEHH@Z
_TEXT	SEGMENT
_iGateIndex$ = 8					; size = 4
?CheckCsGateAlive@CCastleSiege@@QAEHH@Z PROC		; CCastleSiege::CheckCsGateAlive, COMDAT
; _this$ = ecx

; 4598 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4599 : 	if(gObjIsConnected(iGateIndex) == FALSE || gObj[iGateIndex].Class != 277)

  00004	8b 75 08	 mov	 esi, DWORD PTR _iGateIndex$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	74 25		 je	 SHORT $LN1@CheckCsGat
  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001a	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  00020	b8 15 01 00 00	 mov	 eax, 277		; 00000115H
  00025	66 39 84 0e 90
	00 00 00	 cmp	 WORD PTR [esi+ecx+144], ax
  0002d	75 0a		 jne	 SHORT $LN1@CheckCsGat

; 4602 : 	}
; 4603 : 	return true;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	5e		 pop	 esi

; 4604 : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN1@CheckCsGat:

; 4600 : 	{
; 4601 : 		return false;

  00039	33 c0		 xor	 eax, eax
  0003b	5e		 pop	 esi

; 4604 : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?CheckCsGateAlive@CCastleSiege@@QAEHH@Z ENDP		; CCastleSiege::CheckCsGateAlive
_TEXT	ENDS
PUBLIC	?SetCrownIndex@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetCrownIndex
; Function compile flags: /Ogtp
;	COMDAT ?SetCrownIndex@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?SetCrownIndex@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetCrownIndex, COMDAT
; _this$ = ecx

; 4607 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4608 : 	m_iCrownIndex = iIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00006	89 81 ec 01 00
	00		 mov	 DWORD PTR [ecx+492], eax

; 4609 : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCrownIndex@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetCrownIndex
_TEXT	ENDS
PUBLIC	?GetCastleTowerAccessable@CCastleSiege@@QAEHXZ	; CCastleSiege::GetCastleTowerAccessable
; Function compile flags: /Ogtp
;	COMDAT ?GetCastleTowerAccessable@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetCastleTowerAccessable@CCastleSiege@@QAEHXZ PROC	; CCastleSiege::GetCastleTowerAccessable, COMDAT
; _this$ = ecx

; 4613 : 	return m_bCastleTowerAccessable;

  00000	8b 81 e4 01 00
	00		 mov	 eax, DWORD PTR [ecx+484]

; 4614 : }

  00006	c3		 ret	 0
?GetCastleTowerAccessable@CCastleSiege@@QAEHXZ ENDP	; CCastleSiege::GetCastleTowerAccessable
_TEXT	ENDS
PUBLIC	??_C@_0DB@KBMNIOHF@?$FLCastleSiege?$FN?5Tax?5Rate?5Setted?5?9?5@ ; `string'
PUBLIC	?SetTaxRate@CCastleSiege@@QAEXHH@Z		; CCastleSiege::SetTaxRate
;	COMDAT ??_C@_0DB@KBMNIOHF@?$FLCastleSiege?$FN?5Tax?5Rate?5Setted?5?9?5@
CONST	SEGMENT
??_C@_0DB@KBMNIOHF@?$FLCastleSiege?$FN?5Tax?5Rate?5Setted?5?9?5@ DB '[Cas'
	DB	'tleSiege] Tax Rate Setted - Type:%d, Rate:%d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetTaxRate@CCastleSiege@@QAEXHH@Z
_TEXT	SEGMENT
_iTaxType$ = 8						; size = 4
_iTaxRate$ = 12						; size = 4
?SetTaxRate@CCastleSiege@@QAEXHH@Z PROC			; CCastleSiege::SetTaxRate, COMDAT
; _this$ = ecx

; 4617 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 4618 : 	int iMaxTaxRate = 0;
; 4619 : 
; 4620 : 	switch(iTaxType)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _iTaxType$[ebp]
  00008	8b c7		 mov	 eax, edi
  0000a	33 f6		 xor	 esi, esi
  0000c	48		 dec	 eax
  0000d	74 0d		 je	 SHORT $LN10@SetTaxRate
  0000f	48		 dec	 eax
  00010	74 0a		 je	 SHORT $LN10@SetTaxRate
  00012	48		 dec	 eax
  00013	75 0c		 jne	 SHORT $LN11@SetTaxRate

; 4624 : 		break;
; 4625 : 	case 2:
; 4626 : 		iMaxTaxRate = 3;
; 4627 : 		break;
; 4628 : 	case 3:
; 4629 : 		iMaxTaxRate = 300000;

  00015	be e0 93 04 00	 mov	 esi, 300000		; 000493e0H

; 4630 : 		break;

  0001a	eb 05		 jmp	 SHORT $LN11@SetTaxRate
$LN10@SetTaxRate:

; 4621 : 	{
; 4622 : 	case 1:
; 4623 : 		iMaxTaxRate = 3;

  0001c	be 03 00 00 00	 mov	 esi, 3
$LN11@SetTaxRate:

; 4631 : 	}
; 4632 : 
; 4633 : 	if(iTaxRate < 0 || iTaxRate > iMaxTaxRate)

  00021	8b 55 0c	 mov	 edx, DWORD PTR _iTaxRate$[ebp]
  00024	85 d2		 test	 edx, edx
  00026	78 35		 js	 SHORT $LN6@SetTaxRate
  00028	3b d6		 cmp	 edx, esi
  0002a	7f 31		 jg	 SHORT $LN6@SetTaxRate

; 4634 : 		return;
; 4635 : 
; 4636 : 	switch(iTaxType)

  0002c	8b c7		 mov	 eax, edi
  0002e	48		 dec	 eax
  0002f	74 16		 je	 SHORT $LN3@SetTaxRate
  00031	48		 dec	 eax
  00032	74 0b		 je	 SHORT $LN2@SetTaxRate
  00034	48		 dec	 eax
  00035	75 16		 jne	 SHORT $LN4@SetTaxRate

; 4644 : 	case 3:
; 4645 : 		m_iTaxHuntZone = iTaxRate;

  00037	89 91 f8 00 00
	00		 mov	 DWORD PTR [ecx+248], edx

; 4646 : 		break;

  0003d	eb 0e		 jmp	 SHORT $LN4@SetTaxRate
$LN2@SetTaxRate:

; 4640 : 		break;
; 4641 : 	case 2:
; 4642 : 		m_iTaxRateStore = iTaxRate;

  0003f	89 91 f4 00 00
	00		 mov	 DWORD PTR [ecx+244], edx

; 4643 : 		break;

  00045	eb 06		 jmp	 SHORT $LN4@SetTaxRate
$LN3@SetTaxRate:

; 4637 : 	{
; 4638 : 	case 1:
; 4639 : 		m_iTaxRateChaos = iTaxRate;

  00047	89 91 f0 00 00
	00		 mov	 DWORD PTR [ecx+240], edx
$LN4@SetTaxRate:

; 4647 : 	}
; 4648 : 
; 4649 : 	LogAddTD("[CastleSiege] Tax Rate Setted - Type:%d, Rate:%d",iTaxType,iTaxRate);

  0004d	52		 push	 edx
  0004e	57		 push	 edi
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KBMNIOHF@?$FLCastleSiege?$FN?5Tax?5Rate?5Setted?5?9?5@
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@SetTaxRate:
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi

; 4650 : }

  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?SetTaxRate@CCastleSiege@@QAEXHH@Z ENDP			; CCastleSiege::SetTaxRate
_TEXT	ENDS
PUBLIC	?CheckCastleHasMoney@CCastleSiege@@QAEH_J@Z	; CCastleSiege::CheckCastleHasMoney
; Function compile flags: /Ogtp
;	COMDAT ?CheckCastleHasMoney@CCastleSiege@@QAEH_J@Z
_TEXT	SEGMENT
_i64CastleMoney$ = 8					; size = 8
?CheckCastleHasMoney@CCastleSiege@@QAEH_J@Z PROC	; CCastleSiege::CheckCastleHasMoney, COMDAT
; _this$ = ecx

; 4653 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4654 : 	if(m_i64CastleMoney >= i64CastleMoney)

  00003	8b 81 ec 00 00
	00		 mov	 eax, DWORD PTR [ecx+236]
  00009	3b 45 0c	 cmp	 eax, DWORD PTR _i64CastleMoney$[ebp+4]
  0000c	7c 16		 jl	 SHORT $LN1@CheckCastl
  0000e	7f 0b		 jg	 SHORT $LN4@CheckCastl
  00010	8b 89 e8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+232]
  00016	3b 4d 08	 cmp	 ecx, DWORD PTR _i64CastleMoney$[ebp]
  00019	72 09		 jb	 SHORT $LN1@CheckCastl
$LN4@CheckCastl:

; 4655 : 	{
; 4656 : 		return true;

  0001b	b8 01 00 00 00	 mov	 eax, 1

; 4659 : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN1@CheckCastl:

; 4657 : 	}
; 4658 : return false;

  00024	33 c0		 xor	 eax, eax

; 4659 : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?CheckCastleHasMoney@CCastleSiege@@QAEH_J@Z ENDP	; CCastleSiege::CheckCastleHasMoney
_TEXT	ENDS
PUBLIC	?SetCastleMoney@CCastleSiege@@QAEX_J@Z		; CCastleSiege::SetCastleMoney
; Function compile flags: /Ogtp
;	COMDAT ?SetCastleMoney@CCastleSiege@@QAEX_J@Z
_TEXT	SEGMENT
_i64CastleMoney$ = 8					; size = 8
?SetCastleMoney@CCastleSiege@@QAEX_J@Z PROC		; CCastleSiege::SetCastleMoney, COMDAT
; _this$ = ecx

; 4662 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4663 : 	m_i64CastleMoney = i64CastleMoney;

  00003	8b 45 08	 mov	 eax, DWORD PTR _i64CastleMoney$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _i64CastleMoney$[ebp+4]
  00009	89 81 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], eax
  0000f	89 91 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], edx

; 4664 : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?SetCastleMoney@CCastleSiege@@QAEX_J@Z ENDP		; CCastleSiege::SetCastleMoney
_TEXT	ENDS
PUBLIC	?ResetCastleTaxInfo@CCastleSiege@@QAEXXZ	; CCastleSiege::ResetCastleTaxInfo
; Function compile flags: /Ogtp
;	COMDAT ?ResetCastleTaxInfo@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ResetCastleTaxInfo@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ResetCastleTaxInfo, COMDAT
; _this$ = ecx

; 4668 : 	m_i64CastleMoney = 0;

  00000	33 c0		 xor	 eax, eax
  00002	89 81 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], eax
  00008	89 81 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], eax

; 4669 : 	m_iTaxRateChaos = 0;

  0000e	89 81 f0 00 00
	00		 mov	 DWORD PTR [ecx+240], eax

; 4670 : 	m_iTaxRateStore = 0;

  00014	89 81 f4 00 00
	00		 mov	 DWORD PTR [ecx+244], eax

; 4671 : 	m_iTaxHuntZone = 0;

  0001a	89 81 f8 00 00
	00		 mov	 DWORD PTR [ecx+248], eax

; 4672 : }

  00020	c3		 ret	 0
?ResetCastleTaxInfo@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ResetCastleTaxInfo
_TEXT	ENDS
PUBLIC	?SetIsSiegeGuildList@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetIsSiegeGuildList
; Function compile flags: /Ogtp
;	COMDAT ?SetIsSiegeGuildList@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bIsSiegGuildList$ = 8					; size = 4
?SetIsSiegeGuildList@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetIsSiegeGuildList, COMDAT
; _this$ = ecx

; 4675 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4676 : 	m_btIsSiegeGuildList = bIsSiegGuildList;

  00003	8a 45 08	 mov	 al, BYTE PTR _bIsSiegGuildList$[ebp]
  00006	88 81 d4 00 00
	00		 mov	 BYTE PTR [ecx+212], al

; 4677 : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetIsSiegeGuildList@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetIsSiegeGuildList
_TEXT	ENDS
PUBLIC	?SendCastleStateSync@CCastleSiege@@QAEXXZ	; CCastleSiege::SendCastleStateSync
EXTRN	?GS_GDReqCastleStateSync@@YAXHHHHHPAD@Z:PROC	; GS_GDReqCastleStateSync
; Function compile flags: /Ogtp
;	COMDAT ?SendCastleStateSync@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?SendCastleStateSync@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::SendCastleStateSync, COMDAT
; _this$ = ecx

; 4681 : 	GS_GDReqCastleStateSync(m_iMapSvrGroup,m_iCastleSiegeState,m_iTaxRateChaos,m_iTaxRateStore,m_iTaxHuntZone,m_szCastleOwnerGuild);

  00000	8b 91 f8 00 00
	00		 mov	 edx, DWORD PTR [ecx+248]
  00006	8d 81 d7 00 00
	00		 lea	 eax, DWORD PTR [ecx+215]
  0000c	50		 push	 eax
  0000d	8b 81 f4 00 00
	00		 mov	 eax, DWORD PTR [ecx+244]
  00013	52		 push	 edx
  00014	8b 91 f0 00 00
	00		 mov	 edx, DWORD PTR [ecx+240]
  0001a	50		 push	 eax
  0001b	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  0001e	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?GS_GDReqCastleStateSync@@YAXHHHHHPAD@Z ; GS_GDReqCastleStateSync
  00029	83 c4 18	 add	 esp, 24			; 00000018H

; 4682 : }

  0002c	c3		 ret	 0
?SendCastleStateSync@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::SendCastleStateSync
_TEXT	ENDS
PUBLIC	?GetDbNpcCreated@CCastleSiege@@QAEHXZ		; CCastleSiege::GetDbNpcCreated
; Function compile flags: /Ogtp
;	COMDAT ?GetDbNpcCreated@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetDbNpcCreated@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetDbNpcCreated, COMDAT
; _this$ = ecx

; 4686 : 	return m_bDbNpcCreated;

  00000	8b 81 50 01 00
	00		 mov	 eax, DWORD PTR [ecx+336]

; 4687 : }

  00006	c3		 ret	 0
?GetDbNpcCreated@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetDbNpcCreated
_TEXT	ENDS
PUBLIC	?SetDbNpcCreated@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetDbNpcCreated
; Function compile flags: /Ogtp
;	COMDAT ?SetDbNpcCreated@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bDbNpcCreated$ = 8					; size = 4
?SetDbNpcCreated@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetDbNpcCreated, COMDAT
; _this$ = ecx

; 4690 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4691 : 	m_bDbNpcCreated = bDbNpcCreated;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bDbNpcCreated$[ebp]
  00006	89 81 50 01 00
	00		 mov	 DWORD PTR [ecx+336], eax

; 4692 : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetDbNpcCreated@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetDbNpcCreated
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?CheckGuildOwnCastle@CCastleSiege@@QAEHPAD@Z	; CCastleSiege::CheckGuildOwnCastle
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckGuildOwnCastle@CCastleSiege@@QAEHPAD@Z
_TEXT	SEGMENT
_lpszGuildName$ = 8					; size = 4
?CheckGuildOwnCastle@CCastleSiege@@QAEHPAD@Z PROC	; CCastleSiege::CheckGuildOwnCastle, COMDAT
; _this$ = ecx

; 4695 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 4696 : 	if(lpszGuildName == NULL)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpszGuildName$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	75 07		 jne	 SHORT $LN3@CheckGuild

; 4697 : 		return false;

  0000b	33 c0		 xor	 eax, eax
  0000d	5f		 pop	 edi

; 4703 : 		return true;
; 4704 : 
; 4705 : return false;
; 4706 : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
$LN3@CheckGuild:
  00012	56		 push	 esi

; 4698 : 
; 4699 : 	if(strcmp(m_szCastleOwnerGuild,"") == NULL)

  00013	8d b1 d7 00 00
	00		 lea	 esi, DWORD PTR [ecx+215]
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0001e	8b c6		 mov	 eax, esi
$LL6@CheckGuild:
  00020	8a 10		 mov	 dl, BYTE PTR [eax]
  00022	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00024	75 1a		 jne	 SHORT $LN7@CheckGuild
  00026	84 d2		 test	 dl, dl
  00028	74 12		 je	 SHORT $LN8@CheckGuild
  0002a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00030	75 0e		 jne	 SHORT $LN7@CheckGuild
  00032	83 c0 02	 add	 eax, 2
  00035	83 c1 02	 add	 ecx, 2
  00038	84 d2		 test	 dl, dl
  0003a	75 e4		 jne	 SHORT $LL6@CheckGuild
$LN8@CheckGuild:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN9@CheckGuild
$LN7@CheckGuild:
  00040	1b c0		 sbb	 eax, eax
  00042	83 d8 ff	 sbb	 eax, -1
$LN9@CheckGuild:
  00045	85 c0		 test	 eax, eax
  00047	75 06		 jne	 SHORT $LN2@CheckGuild
  00049	5e		 pop	 esi
  0004a	5f		 pop	 edi

; 4703 : 		return true;
; 4704 : 
; 4705 : return false;
; 4706 : }

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN2@CheckGuild:

; 4700 : 		return false;
; 4701 : 
; 4702 : 	if(strcmp(m_szCastleOwnerGuild,lpszGuildName) == NULL)

  0004f	8b cf		 mov	 ecx, edi
  00051	8b c6		 mov	 eax, esi
$LL10@CheckGuild:
  00053	8a 10		 mov	 dl, BYTE PTR [eax]
  00055	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00057	75 27		 jne	 SHORT $LN11@CheckGuild
  00059	84 d2		 test	 dl, dl
  0005b	74 12		 je	 SHORT $LN12@CheckGuild
  0005d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00060	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00063	75 1b		 jne	 SHORT $LN11@CheckGuild
  00065	83 c0 02	 add	 eax, 2
  00068	83 c1 02	 add	 ecx, 2
  0006b	84 d2		 test	 dl, dl
  0006d	75 e4		 jne	 SHORT $LL10@CheckGuild
$LN12@CheckGuild:
  0006f	33 c0		 xor	 eax, eax
  00071	33 c9		 xor	 ecx, ecx
  00073	85 c0		 test	 eax, eax
  00075	0f 94 c1	 sete	 cl
  00078	5e		 pop	 esi
  00079	5f		 pop	 edi
  0007a	8b c1		 mov	 eax, ecx

; 4703 : 		return true;
; 4704 : 
; 4705 : return false;
; 4706 : }

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
$LN11@CheckGuild:

; 4700 : 		return false;
; 4701 : 
; 4702 : 	if(strcmp(m_szCastleOwnerGuild,lpszGuildName) == NULL)

  00080	1b c0		 sbb	 eax, eax
  00082	83 d8 ff	 sbb	 eax, -1
  00085	33 c9		 xor	 ecx, ecx
  00087	85 c0		 test	 eax, eax
  00089	0f 94 c1	 sete	 cl
  0008c	5e		 pop	 esi
  0008d	5f		 pop	 edi
  0008e	8b c1		 mov	 eax, ecx

; 4703 : 		return true;
; 4704 : 
; 4705 : return false;
; 4706 : }

  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?CheckGuildOwnCastle@CCastleSiege@@QAEHPAD@Z ENDP	; CCastleSiege::CheckGuildOwnCastle
_TEXT	ENDS
PUBLIC	?GetHuntZoneEnter@CCastleSiege@@QAEHXZ		; CCastleSiege::GetHuntZoneEnter
; Function compile flags: /Ogtp
;	COMDAT ?GetHuntZoneEnter@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?GetHuntZoneEnter@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::GetHuntZoneEnter, COMDAT
; _this$ = ecx

; 4729 : 	return m_bEnterHuntZone;

  00000	8b 81 fc 00 00
	00		 mov	 eax, DWORD PTR [ecx+252]

; 4730 : }

  00006	c3		 ret	 0
?GetHuntZoneEnter@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::GetHuntZoneEnter
_TEXT	ENDS
PUBLIC	?SetHuntZoneEnter@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetHuntZoneEnter
; Function compile flags: /Ogtp
;	COMDAT ?SetHuntZoneEnter@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bEnterHuntZone$ = 8					; size = 4
?SetHuntZoneEnter@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetHuntZoneEnter, COMDAT
; _this$ = ecx

; 4733 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4734 : 	m_bEnterHuntZone = bEnterHuntZone;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bEnterHuntZone$[ebp]
  00006	89 81 fc 00 00
	00		 mov	 DWORD PTR [ecx+252], eax

; 4735 : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetHuntZoneEnter@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetHuntZoneEnter
_TEXT	ENDS
PUBLIC	?RegGuildScoreCompFunc@CCastleSiege@@SAEAAU_CS_REG_GUILD_DATA@@0@Z ; CCastleSiege::RegGuildScoreCompFunc
; Function compile flags: /Ogtp
;	COMDAT ?RegGuildScoreCompFunc@CCastleSiege@@SAEAAU_CS_REG_GUILD_DATA@@0@Z
_TEXT	SEGMENT
_A$ = 8							; size = 4
_B$ = 12						; size = 4
?RegGuildScoreCompFunc@CCastleSiege@@SAEAAU_CS_REG_GUILD_DATA@@0@Z PROC ; CCastleSiege::RegGuildScoreCompFunc, COMDAT

; 4864 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4865 : 	if(A.m_i64TotolScore < B.m_i64TotolScore)

  00003	8b 45 08	 mov	 eax, DWORD PTR _A$[ebp]
  00006	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _B$[ebp]
  0000c	3b 51 3c	 cmp	 edx, DWORD PTR [ecx+60]
  0000f	7f 0e		 jg	 SHORT $LN1@RegGuildSc
  00011	7c 08		 jl	 SHORT $LN4@RegGuildSc
  00013	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00016	3b 41 38	 cmp	 eax, DWORD PTR [ecx+56]
  00019	73 04		 jae	 SHORT $LN1@RegGuildSc
$LN4@RegGuildSc:

; 4866 : 	{
; 4867 : 		return false;

  0001b	32 c0		 xor	 al, al

; 4870 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN1@RegGuildSc:

; 4868 : 	}
; 4869 : 	return true;

  0001f	b0 01		 mov	 al, 1

; 4870 : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?RegGuildScoreCompFunc@CCastleSiege@@SAEAAU_CS_REG_GUILD_DATA@@0@Z ENDP ; CCastleSiege::RegGuildScoreCompFunc
_TEXT	ENDS
PUBLIC	??0_CS_TOTAL_GUILD_DATA@@QAE@ABU0@@Z		; _CS_TOTAL_GUILD_DATA::_CS_TOTAL_GUILD_DATA
; Function compile flags: /Ogtp
;	COMDAT ??0_CS_TOTAL_GUILD_DATA@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_CS_TOTAL_GUILD_DATA@@QAE@ABU0@@Z PROC		; _CS_TOTAL_GUILD_DATA::_CS_TOTAL_GUILD_DATA, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00014	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00020	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00023	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0_CS_TOTAL_GUILD_DATA@@QAE@ABU0@@Z ENDP		; _CS_TOTAL_GUILD_DATA::_CS_TOTAL_GUILD_DATA
_TEXT	ENDS
PUBLIC	?OperateGate@CCastleSiege@@QAEHHH@Z		; CCastleSiege::OperateGate
; Function compile flags: /Ogtp
;	COMDAT ?OperateGate@CCastleSiege@@QAEHHH@Z
_TEXT	SEGMENT
_iNpcIndex$ = 8						; size = 4
_bOpenType$ = 12					; size = 4
?OperateGate@CCastleSiege@@QAEHHH@Z PROC		; CCastleSiege::OperateGate, COMDAT
; _this$ = ecx

; 5125 : 	// FUNCTION NOT USED
; 5126 : 	return false;

  00000	33 c0		 xor	 eax, eax

; 5127 : }

  00002	c2 08 00	 ret	 8
?OperateGate@CCastleSiege@@QAEHHH@Z ENDP		; CCastleSiege::OperateGate
_TEXT	ENDS
PUBLIC	?CheckCastleOwnerMember@CCastleSiege@@QAEHH@Z	; CCastleSiege::CheckCastleOwnerMember
; Function compile flags: /Ogtp
;	COMDAT ?CheckCastleOwnerMember@CCastleSiege@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CheckCastleOwnerMember@CCastleSiege@@QAEHH@Z PROC	; CCastleSiege::CheckCastleOwnerMember, COMDAT
; _this$ = ecx

; 5130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 5131 : 	if(gObjIsConnected(iIndex) == FALSE)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 06		 jne	 SHORT $LN4@CheckCastl@2
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi

; 5141 : 		return false;
; 5142 : 
; 5143 : return true;
; 5144 : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN4@CheckCastl@2:
  0001d	53		 push	 ebx

; 5132 : 		return false;
; 5133 : 
; 5134 : 	if(strcmp(m_szCastleOwnerGuild,"") == NULL)

  0001e	8d 9e d7 00 00
	00		 lea	 ebx, DWORD PTR [esi+215]
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00029	8b c3		 mov	 eax, ebx
  0002b	eb 03 8d 49 00	 npad	 5
$LL7@CheckCastl@2:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00034	75 1a		 jne	 SHORT $LN8@CheckCastl@2
  00036	84 d2		 test	 dl, dl
  00038	74 12		 je	 SHORT $LN9@CheckCastl@2
  0003a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0003d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00040	75 0e		 jne	 SHORT $LN8@CheckCastl@2
  00042	83 c0 02	 add	 eax, 2
  00045	83 c1 02	 add	 ecx, 2
  00048	84 d2		 test	 dl, dl
  0004a	75 e4		 jne	 SHORT $LL7@CheckCastl@2
$LN9@CheckCastl@2:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 05		 jmp	 SHORT $LN10@CheckCastl@2
$LN8@CheckCastl@2:
  00050	1b c0		 sbb	 eax, eax
  00052	83 d8 ff	 sbb	 eax, -1
$LN10@CheckCastl@2:
  00055	85 c0		 test	 eax, eax

; 5135 : 		return false;

  00057	74 42		 je	 SHORT $LN20@CheckCastl@2

; 5136 : 
; 5137 : 	if(strcmp(gObj[iIndex].GuildName,"") == NULL)

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005e	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  00064	8d b4 07 1c 06
	00 00		 lea	 esi, DWORD PTR [edi+eax+1564]
  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00070	8b c6		 mov	 eax, esi
$LL11@CheckCastl@2:
  00072	8a 10		 mov	 dl, BYTE PTR [eax]
  00074	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00076	75 1a		 jne	 SHORT $LN12@CheckCastl@2
  00078	84 d2		 test	 dl, dl
  0007a	74 12		 je	 SHORT $LN13@CheckCastl@2
  0007c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00082	75 0e		 jne	 SHORT $LN12@CheckCastl@2
  00084	83 c0 02	 add	 eax, 2
  00087	83 c1 02	 add	 ecx, 2
  0008a	84 d2		 test	 dl, dl
  0008c	75 e4		 jne	 SHORT $LL11@CheckCastl@2
$LN13@CheckCastl@2:
  0008e	33 c0		 xor	 eax, eax
  00090	eb 05		 jmp	 SHORT $LN14@CheckCastl@2
$LN12@CheckCastl@2:
  00092	1b c0		 sbb	 eax, eax
  00094	83 d8 ff	 sbb	 eax, -1
$LN14@CheckCastl@2:
  00097	85 c0		 test	 eax, eax
  00099	75 09		 jne	 SHORT $LN2@CheckCastl@2
$LN20@CheckCastl@2:
  0009b	5b		 pop	 ebx
  0009c	5f		 pop	 edi

; 5138 : 		return false;

  0009d	33 c0		 xor	 eax, eax
  0009f	5e		 pop	 esi

; 5141 : 		return false;
; 5142 : 
; 5143 : return true;
; 5144 : }

  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
$LN2@CheckCastl@2:

; 5139 : 
; 5140 : 	if(strcmp(gObj[iIndex].GuildName,m_szCastleOwnerGuild) != NULL)

  000a4	8b cb		 mov	 ecx, ebx
  000a6	8b c6		 mov	 eax, esi
$LL15@CheckCastl@2:
  000a8	8a 10		 mov	 dl, BYTE PTR [eax]
  000aa	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000ac	75 28		 jne	 SHORT $LN16@CheckCastl@2
  000ae	84 d2		 test	 dl, dl
  000b0	74 12		 je	 SHORT $LN17@CheckCastl@2
  000b2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000b5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000b8	75 1c		 jne	 SHORT $LN16@CheckCastl@2
  000ba	83 c0 02	 add	 eax, 2
  000bd	83 c1 02	 add	 ecx, 2
  000c0	84 d2		 test	 dl, dl
  000c2	75 e4		 jne	 SHORT $LL15@CheckCastl@2
$LN17@CheckCastl@2:
  000c4	33 c0		 xor	 eax, eax
  000c6	33 c9		 xor	 ecx, ecx
  000c8	85 c0		 test	 eax, eax
  000ca	0f 94 c1	 sete	 cl
  000cd	5b		 pop	 ebx
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	8b c1		 mov	 eax, ecx

; 5141 : 		return false;
; 5142 : 
; 5143 : return true;
; 5144 : }

  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
$LN16@CheckCastl@2:

; 5139 : 
; 5140 : 	if(strcmp(gObj[iIndex].GuildName,m_szCastleOwnerGuild) != NULL)

  000d6	1b c0		 sbb	 eax, eax
  000d8	83 d8 ff	 sbb	 eax, -1
  000db	33 c9		 xor	 ecx, ecx
  000dd	85 c0		 test	 eax, eax
  000df	0f 94 c1	 sete	 cl
  000e2	5b		 pop	 ebx
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	8b c1		 mov	 eax, ecx

; 5141 : 		return false;
; 5142 : 
; 5143 : return true;
; 5144 : }

  000e7	5d		 pop	 ebp
  000e8	c2 04 00	 ret	 4
?CheckCastleOwnerMember@CCastleSiege@@QAEHH@Z ENDP	; CCastleSiege::CheckCastleOwnerMember
_TEXT	ENDS
PUBLIC	?CheckCastleOwnerUnionMember@CCastleSiege@@QAEHH@Z ; CCastleSiege::CheckCastleOwnerUnionMember
EXTRN	?SearchUnion@TUnion@@QAEPAVTUnionInfo@@H@Z:PROC	; TUnion::SearchUnion
EXTRN	?UnionManager@@3VTUnion@@A:BYTE			; UnionManager
; Function compile flags: /Ogtp
;	COMDAT ?CheckCastleOwnerUnionMember@CCastleSiege@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CheckCastleOwnerUnionMember@CCastleSiege@@QAEHH@Z PROC	; CCastleSiege::CheckCastleOwnerUnionMember, COMDAT
; _this$ = ecx

; 5147 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 5148 : 	if(gObjIsConnected(iIndex) == FALSE)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 06		 jne	 SHORT $LN6@CheckCastl@3
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi

; 5168 : 		return true;
; 5169 : 
; 5170 : return false;
; 5171 : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN6@CheckCastl@3:
  0001d	53		 push	 ebx

; 5149 : 		return false;
; 5150 : 
; 5151 : 	if(strcmp(m_szCastleOwnerGuild,"") == NULL)

  0001e	8d 9e d7 00 00
	00		 lea	 ebx, DWORD PTR [esi+215]
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00029	8b c3		 mov	 eax, ebx
  0002b	eb 03 8d 49 00	 npad	 5
$LL9@CheckCastl@3:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00034	75 1a		 jne	 SHORT $LN10@CheckCastl@3
  00036	84 d2		 test	 dl, dl
  00038	74 12		 je	 SHORT $LN11@CheckCastl@3
  0003a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0003d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00040	75 0e		 jne	 SHORT $LN10@CheckCastl@3
  00042	83 c0 02	 add	 eax, 2
  00045	83 c1 02	 add	 ecx, 2
  00048	84 d2		 test	 dl, dl
  0004a	75 e4		 jne	 SHORT $LL9@CheckCastl@3
$LN11@CheckCastl@3:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 05		 jmp	 SHORT $LN12@CheckCastl@3
$LN10@CheckCastl@3:
  00050	1b c0		 sbb	 eax, eax
  00052	83 d8 ff	 sbb	 eax, -1
$LN12@CheckCastl@3:
  00055	85 c0		 test	 eax, eax

; 5152 : 		return false;

  00057	74 61		 je	 SHORT $LN22@CheckCastl@3

; 5153 : 
; 5154 : 	if(strcmp(gObj[iIndex].GuildName,"") == NULL)

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005e	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  00064	8d 34 07	 lea	 esi, DWORD PTR [edi+eax]
  00067	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0006c	8d 86 1c 06 00
	00		 lea	 eax, DWORD PTR [esi+1564]
$LL13@CheckCastl@3:
  00072	8a 10		 mov	 dl, BYTE PTR [eax]
  00074	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00076	75 1a		 jne	 SHORT $LN14@CheckCastl@3
  00078	84 d2		 test	 dl, dl
  0007a	74 12		 je	 SHORT $LN15@CheckCastl@3
  0007c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00082	75 0e		 jne	 SHORT $LN14@CheckCastl@3
  00084	83 c0 02	 add	 eax, 2
  00087	83 c1 02	 add	 ecx, 2
  0008a	84 d2		 test	 dl, dl
  0008c	75 e4		 jne	 SHORT $LL13@CheckCastl@3
$LN15@CheckCastl@3:
  0008e	33 c0		 xor	 eax, eax
  00090	eb 05		 jmp	 SHORT $LN16@CheckCastl@3
$LN14@CheckCastl@3:
  00092	1b c0		 sbb	 eax, eax
  00094	83 d8 ff	 sbb	 eax, -1
$LN16@CheckCastl@3:
  00097	85 c0		 test	 eax, eax

; 5155 : 		return false;

  00099	74 1f		 je	 SHORT $LN22@CheckCastl@3

; 5156 : 
; 5157 : 	_GUILD_INFO_STRUCT * lpGuildInfo = gObj[iIndex].lpGuild;

  0009b	8b 86 18 06 00
	00		 mov	 eax, DWORD PTR [esi+1560]

; 5158 : 
; 5159 : 	if(lpGuildInfo == NULL)

  000a1	85 c0		 test	 eax, eax

; 5160 : 		return false;

  000a3	74 15		 je	 SHORT $LN22@CheckCastl@3

; 5161 : 
; 5162 : 	TUnionInfo * pUnionInfo = UnionManager.SearchUnion(lpGuildInfo->iGuildUnion);

  000a5	8b 88 44 07 00
	00		 mov	 ecx, DWORD PTR [eax+1860]
  000ab	51		 push	 ecx
  000ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?UnionManager@@3VTUnion@@A ; UnionManager
  000b1	e8 00 00 00 00	 call	 ?SearchUnion@TUnion@@QAEPAVTUnionInfo@@H@Z ; TUnion::SearchUnion

; 5163 : 
; 5164 : 	if(pUnionInfo == NULL)

  000b6	85 c0		 test	 eax, eax
  000b8	75 09		 jne	 SHORT $LN2@CheckCastl@3
$LN22@CheckCastl@3:
  000ba	5b		 pop	 ebx
  000bb	5f		 pop	 edi

; 5165 : 		return false;

  000bc	33 c0		 xor	 eax, eax
  000be	5e		 pop	 esi

; 5168 : 		return true;
; 5169 : 
; 5170 : return false;
; 5171 : }

  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
$LN2@CheckCastl@3:

; 5166 : 
; 5167 : 	if(strcmp(pUnionInfo->m_szMasterGuild,m_szCastleOwnerGuild) == NULL)

  000c3	8b cb		 mov	 ecx, ebx
  000c5	83 c0 10	 add	 eax, 16			; 00000010H
$LL17@CheckCastl@3:
  000c8	8a 10		 mov	 dl, BYTE PTR [eax]
  000ca	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000cc	75 28		 jne	 SHORT $LN18@CheckCastl@3
  000ce	84 d2		 test	 dl, dl
  000d0	74 12		 je	 SHORT $LN19@CheckCastl@3
  000d2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000d5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000d8	75 1c		 jne	 SHORT $LN18@CheckCastl@3
  000da	83 c0 02	 add	 eax, 2
  000dd	83 c1 02	 add	 ecx, 2
  000e0	84 d2		 test	 dl, dl
  000e2	75 e4		 jne	 SHORT $LL17@CheckCastl@3
$LN19@CheckCastl@3:
  000e4	33 c0		 xor	 eax, eax
  000e6	33 d2		 xor	 edx, edx
  000e8	85 c0		 test	 eax, eax
  000ea	0f 94 c2	 sete	 dl
  000ed	5b		 pop	 ebx
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	8b c2		 mov	 eax, edx

; 5168 : 		return true;
; 5169 : 
; 5170 : return false;
; 5171 : }

  000f2	5d		 pop	 ebp
  000f3	c2 04 00	 ret	 4
$LN18@CheckCastl@3:

; 5166 : 
; 5167 : 	if(strcmp(pUnionInfo->m_szMasterGuild,m_szCastleOwnerGuild) == NULL)

  000f6	1b c0		 sbb	 eax, eax
  000f8	83 d8 ff	 sbb	 eax, -1
  000fb	33 d2		 xor	 edx, edx
  000fd	85 c0		 test	 eax, eax
  000ff	0f 94 c2	 sete	 dl
  00102	5b		 pop	 ebx
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	8b c2		 mov	 eax, edx

; 5168 : 		return true;
; 5169 : 
; 5170 : return false;
; 5171 : }

  00107	5d		 pop	 ebp
  00108	c2 04 00	 ret	 4
?CheckCastleOwnerUnionMember@CCastleSiege@@QAEHH@Z ENDP	; CCastleSiege::CheckCastleOwnerUnionMember
_TEXT	ENDS
PUBLIC	?CheckUnionGuildMaster@CCastleSiege@@QAEHH@Z	; CCastleSiege::CheckUnionGuildMaster
; Function compile flags: /Ogtp
;	COMDAT ?CheckUnionGuildMaster@CCastleSiege@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CheckUnionGuildMaster@CCastleSiege@@QAEHH@Z PROC	; CCastleSiege::CheckUnionGuildMaster, COMDAT
; _this$ = ecx

; 5174 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 5175 : 	if(gObjIsConnected(iIndex) == FALSE)

  00004	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax

; 5176 : 		return false;

  00012	74 3c		 je	 SHORT $LN2@CheckUnion

; 5177 : 
; 5178 : 	_GUILD_INFO_STRUCT * lpGuildInfo = gObj[iIndex].lpGuild;

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00019	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  0001f	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  00022	8b 81 18 06 00
	00		 mov	 eax, DWORD PTR [ecx+1560]

; 5179 : 
; 5180 : 	if(lpGuildInfo == NULL)

  00028	85 c0		 test	 eax, eax

; 5181 : 		return false;

  0002a	74 24		 je	 SHORT $LN2@CheckUnion

; 5182 : 
; 5183 : 	if(gObj[iIndex].GuildStatus == 128)

  0002c	81 b9 28 06 00
	00 80 00 00 00	 cmp	 DWORD PTR [ecx+1576], 128 ; 00000080H
  00036	75 18		 jne	 SHORT $LN2@CheckUnion

; 5184 : 	{
; 5185 : 		if(lpGuildInfo->Number == lpGuildInfo->iGuildUnion || lpGuildInfo->iGuildUnion == NULL)

  00038	8b 88 44 07 00
	00		 mov	 ecx, DWORD PTR [eax+1860]
  0003e	39 08		 cmp	 DWORD PTR [eax], ecx
  00040	74 04		 je	 SHORT $LN1@CheckUnion
  00042	85 c9		 test	 ecx, ecx
  00044	75 0a		 jne	 SHORT $LN2@CheckUnion
$LN1@CheckUnion:

; 5186 : 		{
; 5187 : 			return true;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	5e		 pop	 esi

; 5191 : }

  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
$LN2@CheckUnion:

; 5188 : 		}
; 5189 : 	}
; 5190 : return false;

  00050	33 c0		 xor	 eax, eax
  00052	5e		 pop	 esi

; 5191 : }

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?CheckUnionGuildMaster@CCastleSiege@@QAEHH@Z ENDP	; CCastleSiege::CheckUnionGuildMaster
_TEXT	ENDS
PUBLIC	?SetCrownUserIndex@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetCrownUserIndex
; Function compile flags: /Ogtp
;	COMDAT ?SetCrownUserIndex@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?SetCrownUserIndex@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetCrownUserIndex, COMDAT
; _this$ = ecx

; 5194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5195 : 	m_iCastleCrownAccessUser = iIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00006	89 81 f0 01 00
	00		 mov	 DWORD PTR [ecx+496], eax

; 5196 : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCrownUserIndex@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetCrownUserIndex
_TEXT	ENDS
PUBLIC	?SetCrownSwitchUserIndex@CCastleSiege@@QAEXHH@Z	; CCastleSiege::SetCrownSwitchUserIndex
; Function compile flags: /Ogtp
;	COMDAT ?SetCrownSwitchUserIndex@CCastleSiege@@QAEXHH@Z
_TEXT	SEGMENT
_iMonsterClass$ = 8					; size = 4
_iIndex$ = 12						; size = 4
?SetCrownSwitchUserIndex@CCastleSiege@@QAEXHH@Z PROC	; CCastleSiege::SetCrownSwitchUserIndex, COMDAT
; _this$ = ecx

; 5199 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5200 : 	switch(iMonsterClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMonsterClass$[ebp]
  00006	2d d9 00 00 00	 sub	 eax, 217		; 000000d9H
  0000b	74 10		 je	 SHORT $LN2@SetCrownSw
  0000d	48		 dec	 eax
  0000e	75 16		 jne	 SHORT $LN3@SetCrownSw

; 5204 : 		break;
; 5205 : 	case 218:
; 5206 : 		m_iCastleSwitchAccessUser2 = iIndex;

  00010	8b 45 0c	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00013	89 81 fc 01 00
	00		 mov	 DWORD PTR [ecx+508], eax

; 5207 : 		break;
; 5208 : 	}
; 5209 : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
$LN2@SetCrownSw:

; 5201 : 	{
; 5202 : 	case 217:
; 5203 : 		m_iCastleSwitchAccessUser1 = iIndex;

  0001d	8b 55 0c	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00020	89 91 f8 01 00
	00		 mov	 DWORD PTR [ecx+504], edx
$LN3@SetCrownSw:

; 5207 : 		break;
; 5208 : 	}
; 5209 : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?SetCrownSwitchUserIndex@CCastleSiege@@QAEXHH@Z ENDP	; CCastleSiege::SetCrownSwitchUserIndex
_TEXT	ENDS
PUBLIC	?CheckOverlapCsMarks@CCastleSiege@@QAEHH@Z	; CCastleSiege::CheckOverlapCsMarks
; Function compile flags: /Ogtp
;	COMDAT ?CheckOverlapCsMarks@CCastleSiege@@QAEHH@Z
_TEXT	SEGMENT
_x$189428 = -4						; size = 4
_iIndex$ = 8						; size = 4
?CheckOverlapCsMarks@CCastleSiege@@QAEHH@Z PROC		; CCastleSiege::CheckOverlapCsMarks, COMDAT
; _this$ = ecx

; 5212 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 5213 : 	for(int x = INVETORY_WEAR_SIZE; x < MAIN_INVENTORY_SIZE; x++)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _iIndex$[ebp]
  00008	56		 push	 esi
  00009	69 db 40 27 00
	00		 imul	 ebx, 10048		; 00002740H
  0000f	57		 push	 edi
  00010	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00016	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _x$189428[ebp], 12 ; 0000000cH
  0001d	be f0 09 00 00	 mov	 esi, 2544		; 000009f0H
$LL5@CheckOverl:

; 5214 : 	{
; 5215 : 		if(gObj[iIndex].pInventory[x].IsItem() == TRUE 
; 5216 : 			&& gObj[iIndex].pInventory[x].m_Type == ITEMGET(14,21)
; 5217 : 			&& gObj[iIndex].pInventory[x].m_Level == 3)

  00022	8b 8c 3b c0 11
	00 00		 mov	 ecx, DWORD PTR [ebx+edi+4544]
  00029	03 ce		 add	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00030	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	83 f8 01	 cmp	 eax, 1
  00039	75 38		 jne	 SHORT $LN4@CheckOverl
  0003b	8b 84 3b c0 11
	00 00		 mov	 eax, DWORD PTR [ebx+edi+4544]
  00042	b9 15 1c 00 00	 mov	 ecx, 7189		; 00001c15H
  00047	66 39 4c 30 06	 cmp	 WORD PTR [eax+esi+6], cx
  0004c	75 25		 jne	 SHORT $LN4@CheckOverl
  0004e	66 83 7c 30 08
	03		 cmp	 WORD PTR [eax+esi+8], 3
  00054	75 1d		 jne	 SHORT $LN4@CheckOverl

; 5218 : 		{
; 5219 : 			int iITEM_DUR = (int)gObj[iIndex].pInventory[x].m_Durability;

  00056	d9 44 30 24	 fld	 DWORD PTR [eax+esi+36]
  0005a	e8 00 00 00 00	 call	 __ftol2_sse

; 5220 : 
; 5221 : 			if(ITEM_DUR_RANGE(iITEM_DUR) != FALSE)

  0005f	85 c0		 test	 eax, eax
  00061	78 10		 js	 SHORT $LN4@CheckOverl
  00063	33 d2		 xor	 edx, edx
  00065	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  0006a	0f 9e c2	 setle	 dl
  0006d	8b c2		 mov	 eax, edx
  0006f	85 c0		 test	 eax, eax
  00071	75 1d		 jne	 SHORT $LN11@CheckOverl
$LN4@CheckOverl:

; 5213 : 	for(int x = INVETORY_WEAR_SIZE; x < MAIN_INVENTORY_SIZE; x++)

  00073	ff 45 fc	 inc	 DWORD PTR _x$189428[ebp]
  00076	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0007c	81 fe f0 a8 00
	00		 cmp	 esi, 43248		; 0000a8f0H
  00082	7c 9e		 jl	 SHORT $LL5@CheckOverl

; 5223 : 		}
; 5224 : 	}
; 5225 : return -1;

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	83 c8 ff	 or	 eax, -1
  00089	5b		 pop	 ebx

; 5226 : }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN11@CheckOverl:

; 5222 : 				return x;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _x$189428[ebp]
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 5226 : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?CheckOverlapCsMarks@CCastleSiege@@QAEHH@Z ENDP		; CCastleSiege::CheckOverlapCsMarks
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar@5
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar@5:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CheckTeleportMagicAxisY@CCastleSiege@@QAEHHHH@Z ; CCastleSiege::CheckTeleportMagicAxisY
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
;	COMDAT ?CheckTeleportMagicAxisY@CCastleSiege@@QAEHHHH@Z
_TEXT	SEGMENT
_iStartY$ = 8						; size = 4
_iTargetX$ = 12						; size = 4
_iTargetY$ = 16						; size = 4
?CheckTeleportMagicAxisY@CCastleSiege@@QAEHHHH@Z PROC	; CCastleSiege::CheckTeleportMagicAxisY, COMDAT
; _this$ = ecx

; 5260 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5261 : 	for(int iSTEP = 0; iSTEP < 3; iSTEP++)

  00003	8b 55 08	 mov	 edx, DWORD PTR _iStartY$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR _iTargetY$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _iTargetX$[ebp]
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_iCastleWallStepAxisY@@3PAHA ; g_iCastleWallStepAxisY
$LL4@CheckTelep:

; 5262 : 	{
; 5263 : 		if(g_iCastleWallStepAxisY[iSTEP] >= iStartY
; 5264 : 			&& g_iCastleWallStepAxisY[iSTEP] <= iTargetY
; 5265 : 			&& iTargetX < 144)

  00013	8b 01		 mov	 eax, DWORD PTR [ecx]
  00015	3b c2		 cmp	 eax, edx
  00017	7c 0c		 jl	 SHORT $LN3@CheckTelep
  00019	3b c6		 cmp	 eax, esi
  0001b	7f 08		 jg	 SHORT $LN3@CheckTelep
  0001d	81 ff 90 00 00
	00		 cmp	 edi, 144		; 00000090H
  00023	7c 16		 jl	 SHORT $LN8@CheckTelep
$LN3@CheckTelep:

; 5261 : 	for(int iSTEP = 0; iSTEP < 3; iSTEP++)

  00025	83 c1 04	 add	 ecx, 4
  00028	81 f9 0c 00 00
	00		 cmp	 ecx, OFFSET ?g_iCastleWallStepAxisY@@3PAHA+12
  0002e	7c e3		 jl	 SHORT $LL4@CheckTelep

; 5268 : 		}
; 5269 : 	}
; 5270 : 	return true;

  00030	5f		 pop	 edi
  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	5e		 pop	 esi

; 5271 : }

  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
$LN8@CheckTelep:
  0003b	5f		 pop	 edi

; 5266 : 		{
; 5267 : 			return false;

  0003c	33 c0		 xor	 eax, eax
  0003e	5e		 pop	 esi

; 5271 : }

  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?CheckTeleportMagicAxisY@CCastleSiege@@QAEHHHH@Z ENDP	; CCastleSiege::CheckTeleportMagicAxisY
_TEXT	ENDS
PUBLIC	?NotifyCsSelfLeftTime@CCastleSiege@@QAEXH@Z	; CCastleSiege::NotifyCsSelfLeftTime
EXTRN	?GCAnsSelfCsLeftTimeAlarm@@YAXHEE@Z:PROC	; GCAnsSelfCsLeftTimeAlarm
; Function compile flags: /Ogtp
;	COMDAT ?NotifyCsSelfLeftTime@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?NotifyCsSelfLeftTime@CCastleSiege@@QAEXH@Z PROC	; CCastleSiege::NotifyCsSelfLeftTime, COMDAT
; _this$ = ecx

; 5274 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5275 : 	GCAnsSelfCsLeftTimeAlarm(iIndex,(m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60);

  00003	8b 49 68	 mov	 ecx, DWORD PTR [ecx+104]
  00006	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0000b	f7 e9		 imul	 ecx
  0000d	c1 fa 06	 sar	 edx, 6
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
  00017	99		 cdq
  00018	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  0001d	f7 f9		 idiv	 ecx
  0001f	56		 push	 esi
  00020	8b f0		 mov	 esi, eax
  00022	8b ca		 mov	 ecx, edx
  00024	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00029	f7 e9		 imul	 ecx
  0002b	03 d1		 add	 edx, ecx
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00030	c1 fa 05	 sar	 edx, 5
  00033	8b c2		 mov	 eax, edx
  00035	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00038	03 c2		 add	 eax, edx
  0003a	50		 push	 eax
  0003b	56		 push	 esi
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?GCAnsSelfCsLeftTimeAlarm@@YAXHEE@Z ; GCAnsSelfCsLeftTimeAlarm
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	5e		 pop	 esi

; 5276 : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?NotifyCsSelfLeftTime@CCastleSiege@@QAEXH@Z ENDP	; CCastleSiege::NotifyCsSelfLeftTime
_TEXT	ENDS
PUBLIC	?ReSpawnAllUser@CCastleSiege@@QAEXXZ		; CCastleSiege::ReSpawnAllUser
; Function compile flags: /Ogtp
;	COMDAT ?ReSpawnAllUser@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_iCNT$189500 = -12					; size = 4
_iCNT$189494 = -12					; size = 4
_iCNT$189488 = -12					; size = 4
_iUSER$189473 = -8					; size = 4
_iTY$ = -4						; size = 4
?ReSpawnAllUser@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ReSpawnAllUser, COMDAT
; _this$ = ecx

; 5279 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5280 : 		int iTX;
; 5281 : 	int iTY;
; 5282 : 	unsigned char btMapAttr;
; 5283 : 
; 5284 : 	for(int iUSER = OBJ_STARTUSERINDEX; iUSER < OBJMAX; iUSER++)

  00009	c7 45 f8 04 29
	00 00		 mov	 DWORD PTR _iUSER$189473[ebp], 10500 ; 00002904H
  00010	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL26@ReSpawnAll:

; 5285 : 	{
; 5286 : 		if(gObjIsConnected(iUSER) == FALSE)

  00015	8b 45 f8	 mov	 eax, DWORD PTR _iUSER$189473[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c0		 test	 eax, eax
  00023	0f 84 43 02 00
	00		 je	 $LN25@ReSpawnAll

; 5287 : 			continue;
; 5288 : 
; 5289 : 		if(gObj[iUSER].MapNumber != MAP_INDEX_CASTLESIEGE)

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002e	80 bc 06 23 01
	00 00 1e	 cmp	 BYTE PTR [esi+eax+291], 30 ; 0000001eH
  00036	0f 85 30 02 00
	00		 jne	 $LN25@ReSpawnAll

; 5290 : 			continue;
; 5291 : 
; 5292 : 		unsigned char btCsJoinSide = gObj[iUSER].m_btCsJoinSide;

  0003c	8a 84 06 5a 20
	00 00		 mov	 al, BYTE PTR [esi+eax+8282]

; 5293 : 
; 5294 : 		if(btCsJoinSide < 0)
; 5295 : 		{
; 5296 : 			btCsJoinSide = 0;
; 5297 : 		}
; 5298 : 
; 5299 : 		if(btCsJoinSide > 2)

  00043	3c 02		 cmp	 al, 2
  00045	76 02		 jbe	 SHORT $LN20@ReSpawnAll

; 5300 : 		{
; 5301 : 			btCsJoinSide = 2;

  00047	b0 02		 mov	 al, 2
$LN20@ReSpawnAll:

; 5302 : 		}
; 5303 : 
; 5304 : 		int bMoveOK = FALSE;
; 5305 : 
; 5306 : 		switch(btCsJoinSide)

  00049	0f b6 c0	 movzx	 eax, al
  0004c	48		 dec	 eax

; 5335 : 					{
; 5336 : 						bMoveOK = TRUE;
; 5337 : 						break;
; 5338 : 					}
; 5339 : 				}
; 5340 : 			}
; 5341 : 			break;
; 5342 : 		default:
; 5343 : 			{
; 5344 : 				for(int iCNT = 0; iCNT < 100; iCNT++)

  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iCNT$189500[ebp], 0
  00054	0f 84 ba 00 00
	00		 je	 $LL16@ReSpawnAll

; 5302 : 		}
; 5303 : 
; 5304 : 		int bMoveOK = FALSE;
; 5305 : 
; 5306 : 		switch(btCsJoinSide)

  0005a	48		 dec	 eax
  0005b	74 63		 je	 SHORT $LL11@ReSpawnAll
  0005d	8d 49 00	 npad	 3
$LL6@ReSpawnAll:

; 5345 : 				{
; 5346 : 					iTX = (rand() % (g_iCsUserReSpawnArea[0][2] - g_iCsUserReSpawnArea[0][0])) + g_iCsUserReSpawnArea[0][0];

  00060	e8 00 00 00 00	 call	 _rand
  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA
  0006b	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+8
  00071	99		 cdq
  00072	2b f9		 sub	 edi, ecx
  00074	f7 ff		 idiv	 edi
  00076	8d 1c 11	 lea	 ebx, DWORD PTR [ecx+edx]

; 5347 : 					iTY = (rand() % (g_iCsUserReSpawnArea[0][3] - g_iCsUserReSpawnArea[0][1])) + g_iCsUserReSpawnArea[0][1];

  00079	e8 00 00 00 00	 call	 _rand
  0007e	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+4
  00084	8b 3d 0c 00 00
	00		 mov	 edi, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+12
  0008a	2b f9		 sub	 edi, ecx
  0008c	99		 cdq
  0008d	f7 ff		 idiv	 edi
  0008f	03 d1		 add	 edx, ecx

; 5348 : 	
; 5349 : 					btMapAttr = MapC[MAP_INDEX_CASTLESIEGE].m_attrbuf[iTY * 256 + iTX];

  00091	8b ca		 mov	 ecx, edx
  00093	c1 e1 08	 shl	 ecx, 8
  00096	03 0d c0 94 9c
	00		 add	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A+10261696
  0009c	89 55 fc	 mov	 DWORD PTR _iTY$[ebp], edx

; 5350 : 	
; 5351 : 					if((btMapAttr & 4) != 4)

  0009f	f6 04 19 04	 test	 BYTE PTR [ecx+ebx], 4
  000a3	0f 84 c2 00 00
	00		 je	 $LN45@ReSpawnAll

; 5335 : 					{
; 5336 : 						bMoveOK = TRUE;
; 5337 : 						break;
; 5338 : 					}
; 5339 : 				}
; 5340 : 			}
; 5341 : 			break;
; 5342 : 		default:
; 5343 : 			{
; 5344 : 				for(int iCNT = 0; iCNT < 100; iCNT++)

  000a9	8b 45 f4	 mov	 eax, DWORD PTR _iCNT$189500[ebp]
  000ac	40		 inc	 eax
  000ad	89 45 f4	 mov	 DWORD PTR _iCNT$189500[ebp], eax
  000b0	83 f8 64	 cmp	 eax, 100		; 00000064H
  000b3	7c ab		 jl	 SHORT $LL6@ReSpawnAll

; 5316 : 	
; 5317 : 					if((btMapAttr & 4) != 4)

  000b5	e9 b2 01 00 00	 jmp	 $LN25@ReSpawnAll
  000ba	8d 9b 00 00 00
	00		 npad	 6
$LL11@ReSpawnAll:

; 5328 : 				{
; 5329 : 					iTX = (rand() % (g_iCsUserReSpawnArea[2][2] - g_iCsUserReSpawnArea[2][0])) + g_iCsUserReSpawnArea[2][0];

  000c0	e8 00 00 00 00	 call	 _rand
  000c5	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+32
  000cb	8b 3d 28 00 00
	00		 mov	 edi, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+40
  000d1	99		 cdq
  000d2	2b f9		 sub	 edi, ecx
  000d4	f7 ff		 idiv	 edi
  000d6	8d 1c 11	 lea	 ebx, DWORD PTR [ecx+edx]

; 5330 : 					iTY = (rand() % (g_iCsUserReSpawnArea[2][3] - g_iCsUserReSpawnArea[2][1])) + g_iCsUserReSpawnArea[2][1];

  000d9	e8 00 00 00 00	 call	 _rand
  000de	8b 0d 24 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+36
  000e4	8b 3d 2c 00 00
	00		 mov	 edi, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+44
  000ea	2b f9		 sub	 edi, ecx
  000ec	99		 cdq
  000ed	f7 ff		 idiv	 edi
  000ef	03 d1		 add	 edx, ecx
  000f1	89 55 fc	 mov	 DWORD PTR _iTY$[ebp], edx

; 5331 : 	
; 5332 : 					btMapAttr = MapC[MAP_INDEX_CASTLESIEGE].m_attrbuf[iTY * 256 + iTX];

  000f4	c1 e2 08	 shl	 edx, 8
  000f7	03 15 c0 94 9c
	00		 add	 edx, DWORD PTR ?MapC@@3PAVMapClass@@A+10261696

; 5333 : 	
; 5334 : 					if((btMapAttr & 4) != 4)

  000fd	f6 04 1a 04	 test	 BYTE PTR [edx+ebx], 4
  00101	74 65		 je	 SHORT $LN43@ReSpawnAll

; 5318 : 					{
; 5319 : 						bMoveOK = TRUE;
; 5320 : 						break;
; 5321 : 					}
; 5322 : 				}
; 5323 : 			}
; 5324 : 			break;
; 5325 : 		case 2:
; 5326 : 			{
; 5327 : 				for(int iCNT = 0; iCNT < 100; iCNT++)

  00103	8b 45 f4	 mov	 eax, DWORD PTR _iCNT$189494[ebp]
  00106	40		 inc	 eax
  00107	89 45 f4	 mov	 DWORD PTR _iCNT$189494[ebp], eax
  0010a	83 f8 64	 cmp	 eax, 100		; 00000064H
  0010d	7c b1		 jl	 SHORT $LL11@ReSpawnAll

; 5316 : 	
; 5317 : 					if((btMapAttr & 4) != 4)

  0010f	e9 58 01 00 00	 jmp	 $LN25@ReSpawnAll
$LL16@ReSpawnAll:

; 5311 : 				{
; 5312 : 					iTX = (rand() % (g_iCsUserReSpawnArea[1][2] - g_iCsUserReSpawnArea[1][0])) + g_iCsUserReSpawnArea[1][0];

  00114	e8 00 00 00 00	 call	 _rand
  00119	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+16
  0011f	8b 3d 18 00 00
	00		 mov	 edi, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+24
  00125	99		 cdq
  00126	2b f9		 sub	 edi, ecx
  00128	f7 ff		 idiv	 edi
  0012a	8d 1c 11	 lea	 ebx, DWORD PTR [ecx+edx]

; 5313 : 					iTY = (rand() % (g_iCsUserReSpawnArea[1][3] - g_iCsUserReSpawnArea[1][1])) + g_iCsUserReSpawnArea[1][1];

  0012d	e8 00 00 00 00	 call	 _rand
  00132	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+20
  00138	8b 3d 1c 00 00
	00		 mov	 edi, DWORD PTR ?g_iCsUserReSpawnArea@@3PAY03HA+28
  0013e	2b f9		 sub	 edi, ecx
  00140	99		 cdq
  00141	f7 ff		 idiv	 edi
  00143	03 d1		 add	 edx, ecx
  00145	89 55 fc	 mov	 DWORD PTR _iTY$[ebp], edx

; 5314 : 	
; 5315 : 					btMapAttr = MapC[MAP_INDEX_CASTLESIEGE].m_attrbuf[iTY * 256 + iTX];

  00148	c1 e2 08	 shl	 edx, 8
  0014b	03 15 c0 94 9c
	00		 add	 edx, DWORD PTR ?MapC@@3PAVMapClass@@A+10261696

; 5316 : 	
; 5317 : 					if((btMapAttr & 4) != 4)

  00151	f6 04 1a 04	 test	 BYTE PTR [edx+ebx], 4
  00155	74 11		 je	 SHORT $LN43@ReSpawnAll

; 5307 : 		{
; 5308 : 		case 1:
; 5309 : 			{
; 5310 : 				for(int iCNT = 0; iCNT < 100; iCNT++)

  00157	8b 45 f4	 mov	 eax, DWORD PTR _iCNT$189488[ebp]
  0015a	40		 inc	 eax
  0015b	89 45 f4	 mov	 DWORD PTR _iCNT$189488[ebp], eax
  0015e	83 f8 64	 cmp	 eax, 100		; 00000064H
  00161	7c b1		 jl	 SHORT $LL16@ReSpawnAll

; 5316 : 	
; 5317 : 					if((btMapAttr & 4) != 4)

  00163	e9 04 01 00 00	 jmp	 $LN25@ReSpawnAll
$LN43@ReSpawnAll:
  00168	8b 55 fc	 mov	 edx, DWORD PTR _iTY$[ebp]
$LN45@ReSpawnAll:

; 5352 : 					{
; 5353 : 						bMoveOK = TRUE;
; 5354 : 						break;
; 5355 : 					}
; 5356 : 				}
; 5357 : 			}
; 5358 : 			break;
; 5359 : 		}
; 5360 : 
; 5361 : 		if(bMoveOK != FALSE)
; 5362 : 		{
; 5363 : 			gObj[iUSER].m_State = 32;

  0016b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00170	c7 84 06 d0 01
	00 00 20 00 00
	00		 mov	 DWORD PTR [esi+eax+464], 32 ; 00000020H

; 5364 : 			gObj[iUSER].X = iTX;

  0017b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00181	88 9c 0e 20 01
	00 00		 mov	 BYTE PTR [esi+ecx+288], bl

; 5365 : 			gObj[iUSER].Y = iTY;

  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018d	88 94 06 21 01
	00 00		 mov	 BYTE PTR [esi+eax+289], dl

; 5366 : 			gObj[iUSER].TX = iTX;

  00194	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019a	88 9c 0e 52 01
	00 00		 mov	 BYTE PTR [esi+ecx+338], bl

; 5367 : 			gObj[iUSER].TX = iTY;

  001a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a6	88 94 06 52 01
	00 00		 mov	 BYTE PTR [esi+eax+338], dl

; 5368 : 			gObj[iUSER].MapNumber = MAP_INDEX_CASTLESIEGE;

  001ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b3	c6 84 0e 23 01
	00 00 1e	 mov	 BYTE PTR [esi+ecx+291], 30 ; 0000001eH

; 5369 : 			gObj[iUSER].PathCount = 0;

  001bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c1	c7 84 16 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+edx+344], 0

; 5370 : 			gObj[iUSER].Teleport = 0;

  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d1	c6 84 06 88 05
	00 00 00	 mov	 BYTE PTR [esi+eax+1416], 0

; 5371 : 
; 5372 : 			gObjClearViewport(&gObj[iUSER]);

  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001df	8d 14 0e	 lea	 edx, DWORD PTR [esi+ecx]
  001e2	52		 push	 edx
  001e3	e8 00 00 00 00	 call	 ?gObjClearViewport@@YAXPAUOBJECTSTRUCT@@@Z ; gObjClearViewport

; 5373 : 			GCTeleportSend(&gObj[iUSER],0xFF,MAP_INDEX_CASTLESIEGE,gObj[iUSER].X,gObj[iUSER].Y,gObj[iUSER].Dir);

  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ed	0f b6 8c 30 22
	01 00 00	 movzx	 ecx, BYTE PTR [eax+esi+290]
  001f5	0f b6 94 30 21
	01 00 00	 movzx	 edx, BYTE PTR [eax+esi+289]
  001fd	03 c6		 add	 eax, esi
  001ff	51		 push	 ecx
  00200	0f b6 88 20 01
	00 00		 movzx	 ecx, BYTE PTR [eax+288]
  00207	52		 push	 edx
  00208	51		 push	 ecx
  00209	6a 1e		 push	 30			; 0000001eH
  0020b	68 ff 00 00 00	 push	 255			; 000000ffH
  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 ?GCTeleportSend@@YAXPAUOBJECTSTRUCT@@HEEEE@Z ; GCTeleportSend

; 5374 : 
; 5375 : 			if(gObj[iUSER].m_Change >= 0)

  00216	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0021c	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  0021f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00222	83 b8 34 06 00
	00 00		 cmp	 DWORD PTR [eax+1588], 0
  00229	7c 09		 jl	 SHORT $LN1@ReSpawnAll

; 5376 : 			{
; 5377 : 				gObjViewportListProtocolCreate(&gObj[iUSER]);

  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate
  00231	83 c4 04	 add	 esp, 4
$LN1@ReSpawnAll:

; 5378 : 			}
; 5379 : 
; 5380 : 			gObj[iUSER].RegenMapNumber = MAP_INDEX_CASTLESIEGE;

  00234	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00239	c6 84 06 8c 05
	00 00 1e	 mov	 BYTE PTR [esi+eax+1420], 30 ; 0000001eH

; 5381 : 			gObj[iUSER].RegenMapX = iTX;

  00241	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 5382 : 			gObj[iUSER].RegenMapY = iTY;

  00247	8a 45 fc	 mov	 al, BYTE PTR _iTY$[ebp]
  0024a	88 9c 0e 8d 05
	00 00		 mov	 BYTE PTR [esi+ecx+1421], bl
  00251	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00257	88 84 16 8e 05
	00 00		 mov	 BYTE PTR [esi+edx+1422], al

; 5383 : 			gObj[iUSER].RegenOk = TRUE;

  0025e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00264	c6 84 0e 8b 05
	00 00 01	 mov	 BYTE PTR [esi+ecx+1419], 1
$LN25@ReSpawnAll:

; 5280 : 		int iTX;
; 5281 : 	int iTY;
; 5282 : 	unsigned char btMapAttr;
; 5283 : 
; 5284 : 	for(int iUSER = OBJ_STARTUSERINDEX; iUSER < OBJMAX; iUSER++)

  0026c	ff 45 f8	 inc	 DWORD PTR _iUSER$189473[ebp]
  0026f	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00275	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  0027b	0f 8c 94 fd ff
	ff		 jl	 $LL26@ReSpawnAll
  00281	5f		 pop	 edi
  00282	5e		 pop	 esi
  00283	5b		 pop	 ebx

; 5384 : 		}
; 5385 : 	}
; 5386 : }

  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c3		 ret	 0
?ReSpawnAllUser@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ReSpawnAllUser
_TEXT	ENDS
PUBLIC	?SendAllUserAnyData@CCastleSiege@@QAEXPAEH@Z	; CCastleSiege::SendAllUserAnyData
; Function compile flags: /Ogtp
;	COMDAT ?SendAllUserAnyData@CCastleSiege@@QAEXPAEH@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_iSize$ = 12						; size = 4
?SendAllUserAnyData@CCastleSiege@@QAEXPAEH@Z PROC	; CCastleSiege::SendAllUserAnyData, COMDAT
; _this$ = ecx

; 5414 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5415 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	53		 push	 ebx
  00009	8b 5d 0c	 mov	 ebx, DWORD PTR _iSize$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00013	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL4@SendAllUse@2:

; 5416 : 	{
; 5417 : 		if(gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00018	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0001d	75 1a		 jne	 SHORT $LN3@SendAllUse@2
  0001f	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  00024	75 13		 jne	 SHORT $LN3@SendAllUse@2

; 5418 : 		{
; 5419 : 			DataSend(i,lpMsg,iSize);

  00026	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00029	53		 push	 ebx
  0002a	50		 push	 eax
  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SendAllUse@2:

; 5415 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00039	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  0003f	47		 inc	 edi
  00040	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00046	7c d0		 jl	 SHORT $LL4@SendAllUse@2
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 5420 : 		}
; 5421 : 	}
; 5422 : }

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?SendAllUserAnyData@CCastleSiege@@QAEXPAEH@Z ENDP	; CCastleSiege::SendAllUserAnyData
_TEXT	ENDS
PUBLIC	?SendCsUserAnyData@CCastleSiege@@QAEXPAEH@Z	; CCastleSiege::SendCsUserAnyData
; Function compile flags: /Ogtp
;	COMDAT ?SendCsUserAnyData@CCastleSiege@@QAEXPAEH@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_iSize$ = 12						; size = 4
?SendCsUserAnyData@CCastleSiege@@QAEXPAEH@Z PROC	; CCastleSiege::SendCsUserAnyData, COMDAT
; _this$ = ecx

; 5425 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5426 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	53		 push	 ebx
  00009	8b 5d 0c	 mov	 ebx, DWORD PTR _iSize$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00013	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL4@SendCsUser:

; 5427 : 	{
; 5428 : 		if(gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CASTLESIEGE)

  00018	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0001d	75 24		 jne	 SHORT $LN3@SendCsUser
  0001f	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  00024	75 1d		 jne	 SHORT $LN3@SendCsUser
  00026	80 bc 06 23 01
	00 00 1e	 cmp	 BYTE PTR [esi+eax+291], 30 ; 0000001eH
  0002e	75 13		 jne	 SHORT $LN3@SendCsUser

; 5429 : 		{
; 5430 : 			DataSend(i,lpMsg,iSize);

  00030	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00033	53		 push	 ebx
  00034	50		 push	 eax
  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SendCsUser:

; 5426 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00043	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00049	47		 inc	 edi
  0004a	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00050	7c c6		 jl	 SHORT $LL4@SendCsUser
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx

; 5431 : 		}
; 5432 : 	}
; 5433 : }

  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
?SendCsUserAnyData@CCastleSiege@@QAEXPAEH@Z ENDP	; CCastleSiege::SendCsUserAnyData
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendCsUserAnyMsg@CCastleSiege@@QAEXPAD@Z	; CCastleSiege::SendCsUserAnyMsg
; Function compile flags: /Ogtp
;	COMDAT ?SendCsUserAnyMsg@CCastleSiege@@QAEXPAD@Z
_TEXT	SEGMENT
_pNotice$ = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
_lpszMsg$ = 8						; size = 4
?SendCsUserAnyMsg@CCastleSiege@@QAEXPAD@Z PROC		; CCastleSiege::SendCsUserAnyMsg, COMDAT
; _this$ = ecx

; 5436 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _lpszMsg$[ebp]

; 5437 : 	if(lpszMsg == NULL)

  00016	85 c0		 test	 eax, eax
  00018	74 6c		 je	 SHORT $LN2@SendCsUser@2

; 5438 : 		return;
; 5439 : 
; 5440 : 	PMSG_NOTICE pNotice;
; 5441 : 
; 5442 : 	TNotice::MakeNoticeMsg(&pNotice,0,lpszMsg);

  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	50		 push	 eax
  0001d	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  00023	6a 00		 push	 0
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5443 : 
; 5444 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00033	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00038	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  0003d	8d 49 00	 npad	 3
$LL4@SendCsUser@2:

; 5445 : 	{
; 5446 : 		if(gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER && gObj[i].MapNumber == MAP_INDEX_CASTLESIEGE)

  00040	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  00045	75 2e		 jne	 SHORT $LN3@SendCsUser@2
  00047	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  0004c	75 27		 jne	 SHORT $LN3@SendCsUser@2
  0004e	80 bc 06 23 01
	00 00 1e	 cmp	 BYTE PTR [esi+eax+291], 30 ; 0000001eH
  00056	75 1d		 jne	 SHORT $LN3@SendCsUser@2

; 5447 : 		{
; 5448 : 			DataSend(i,(PBYTE)&pNotice,pNotice.h.size);

  00058	0f b6 8d ed fe
	ff ff		 movzx	 ecx, BYTE PTR _pNotice$[ebp+1]
  0005f	51		 push	 ecx
  00060	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$[ebp]
  00066	52		 push	 edx
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SendCsUser@2:

; 5443 : 
; 5444 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00075	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  0007b	47		 inc	 edi
  0007c	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00082	7c bc		 jl	 SHORT $LL4@SendCsUser@2
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
$LN2@SendCsUser@2:

; 5449 : 		}
; 5450 : 	}
; 5451 : }

  00086	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00089	33 cd		 xor	 ecx, ebp
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?SendCsUserAnyMsg@CCastleSiege@@QAEXPAD@Z ENDP		; CCastleSiege::SendCsUserAnyMsg
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 485  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 486  : 		return (_CSTD memcmp(_First1, _First2, _Count));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 10	 mov	 esi, DWORD PTR __Count$[ebp]
  0000d	57		 push	 edi
  0000e	83 fe 04	 cmp	 esi, 4
  00011	72 14		 jb	 SHORT $LN11@compare
$LL4@compare:
  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00017	75 12		 jne	 SHORT $LN5@compare
  00019	83 ee 04	 sub	 esi, 4
  0001c	83 c1 04	 add	 ecx, 4
  0001f	83 c2 04	 add	 edx, 4
  00022	83 fe 04	 cmp	 esi, 4
  00025	73 ec		 jae	 SHORT $LL4@compare
$LN11@compare:
  00027	85 f6		 test	 esi, esi
  00029	74 45		 je	 SHORT $LN6@compare
$LN5@compare:
  0002b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0002e	0f b6 39	 movzx	 edi, BYTE PTR [ecx]
  00031	2b c7		 sub	 eax, edi
  00033	75 31		 jne	 SHORT $LN7@compare
  00035	83 fe 01	 cmp	 esi, 1
  00038	76 36		 jbe	 SHORT $LN6@compare
  0003a	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0003e	0f b6 79 01	 movzx	 edi, BYTE PTR [ecx+1]
  00042	2b c7		 sub	 eax, edi
  00044	75 20		 jne	 SHORT $LN7@compare
  00046	83 fe 02	 cmp	 esi, 2
  00049	76 25		 jbe	 SHORT $LN6@compare
  0004b	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0004f	0f b6 79 02	 movzx	 edi, BYTE PTR [ecx+2]
  00053	2b c7		 sub	 eax, edi
  00055	75 0f		 jne	 SHORT $LN7@compare
  00057	83 fe 03	 cmp	 esi, 3
  0005a	76 14		 jbe	 SHORT $LN6@compare
  0005c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00060	0f b6 49 03	 movzx	 ecx, BYTE PTR [ecx+3]
  00064	2b c1		 sub	 eax, ecx
$LN7@compare:
  00066	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00069	5f		 pop	 edi
  0006a	83 c8 01	 or	 eax, 1
  0006d	5e		 pop	 esi

; 487  : 		}

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
$LN6@compare:
  00070	5f		 pop	 edi

; 486  : 		return (_CSTD memcmp(_First1, _First2, _Count));

  00071	33 c0		 xor	 eax, eax
  00073	5e		 pop	 esi

; 487  : 		}

  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtp
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL3@length:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@length
  00017	2b c2		 sub	 eax, edx

; 492  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:PROC
; Function compile flags: /Ogtp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0000b	88 0a		 mov	 BYTE PTR [edx], cl

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?size@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	56		 push	 esi

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	2b 31		 sub	 esi, DWORD PTR [ecx]
  00006	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 04	 sar	 edx, 4
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 880  : 		}

  0001a	c3		 ret	 0
?size@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBE_NXZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::empty
; Function compile flags: /Ogtp
;	COMDAT ?empty@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBE_NXZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	33 d2		 xor	 edx, edx
  00004	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBE_NXZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEAAU_CS_SCHEDULE_DATA@@I@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEAAU_CS_SCHEDULE_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEAAU_CS_SCHEDULE_DATA@@I@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  0000d	2b d0		 sub	 edx, eax
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 941  : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??A?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEAAU_CS_SCHEDULE_DATA@@I@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	?empty@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBE_NXZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::empty
; Function compile flags: /Ogtp
;	COMDAT ?empty@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBE_NXZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	33 d2		 xor	 edx, edx
  00004	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBE_NXZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::empty
_TEXT	ENDS
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::size, COMDAT
; _this$ = ecx

; 869  : 		return (this->_Mysize);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 870  : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::size
_TEXT	ENDS
PUBLIC	?empty@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::empty
; Function compile flags: /Ogtp
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBE_NXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::empty, COMDAT
; _this$ = ecx

; 879  : 		return (size() == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 94 c0	 sete	 al

; 880  : 		}

  00008	c3		 ret	 0
?empty@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::empty
_TEXT	ENDS
PUBLIC	?size@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 06	 sar	 eax, 6

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBE_NXZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::empty
; Function compile flags: /Ogtp
;	COMDAT ?empty@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBE_NXZ PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	33 d2		 xor	 edx, edx
  00004	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBE_NXZ ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEAAU_CS_REG_GUILD_DATA@@I@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEAAU_CS_REG_GUILD_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEAAU_CS_REG_GUILD_DATA@@I@Z PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	c1 e0 06	 shl	 eax, 6
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEAAU_CS_REG_GUILD_DATA@@I@Z ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::operator[]
_TEXT	ENDS
PUBLIC	??R?$less@H@std@@QBE_NABH0@Z			; std::less<int>::operator()
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
;	COMDAT ??R?$less@H@std@@QBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@H@std@@QBE_NABH0@Z PROC			; std::less<int>::operator(), COMDAT
; _this$ = ecx

; 124  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0000f	0f 9c c0	 setl	 al

; 126  : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??R?$less@H@std@@QBE_NABH0@Z ENDP			; std::less<int>::operator()
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBE_NPBU_CS_SCHEDULE_DATA@@@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Inside
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBE_NPBU_CS_SCHEDULE_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBE_NPBU_CS_SCHEDULE_DATA@@@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBE_NPBU_CS_SCHEDULE_DATA@@@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEXPAU_CS_SCHEDULE_DATA@@0@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEXPAU_CS_SCHEDULE_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEXPAU_CS_SCHEDULE_DATA@@0@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEXPAU_CS_SCHEDULE_DATA@@0@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::~_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::~_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::~_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAE@XZ	; std::allocator<_CS_SCHEDULE_DATA>::allocator<_CS_SCHEDULE_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAE@XZ PROC	; std::allocator<_CS_SCHEDULE_DATA>::allocator<_CS_SCHEDULE_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAE@XZ ENDP	; std::allocator<_CS_SCHEDULE_DATA>::allocator<_CS_SCHEDULE_DATA>
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBE_NPBU_CS_NPC_DATA@@@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Inside
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBE_NPBU_CS_NPC_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBE_NPBU_CS_NPC_DATA@@@Z PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside@2
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside@2:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBE_NPBU_CS_NPC_DATA@@@Z ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEXPAU_CS_NPC_DATA@@0@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEXPAU_CS_NPC_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEXPAU_CS_NPC_DATA@@0@Z PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEXPAU_CS_NPC_DATA@@0@Z ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::~_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::~_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::~_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@U_CS_NPC_DATA@@@std@@QAE@XZ	; std::allocator<_CS_NPC_DATA>::allocator<_CS_NPC_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U_CS_NPC_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_CS_NPC_DATA@@@std@@QAE@XZ PROC		; std::allocator<_CS_NPC_DATA>::allocator<_CS_NPC_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U_CS_NPC_DATA@@@std@@QAE@XZ ENDP		; std::allocator<_CS_NPC_DATA>::allocator<_CS_NPC_DATA>
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::size, COMDAT
; _this$ = ecx

; 869  : 		return (this->_Mysize);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 870  : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::size
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside@3
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside@3
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside@3:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBIH@std@@@std@@QAE@XZ	; std::allocator<std::pair<unsigned int const ,int> >::allocator<std::pair<unsigned int const ,int> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@U?$pair@$$CBIH@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBIH@std@@@std@@QAE@XZ PROC	; std::allocator<std::pair<unsigned int const ,int> >::allocator<std::pair<unsigned int const ,int> >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBIH@std@@@std@@QAE@XZ ENDP	; std::allocator<std::pair<unsigned int const ,int> >::allocator<std::pair<unsigned int const ,int> >
_TEXT	ENDS
PUBLIC	??R?$less@I@std@@QBE_NABI0@Z			; std::less<unsigned int>::operator()
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
;	COMDAT ??R?$less@I@std@@QBE_NABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@I@std@@QBE_NABI0@Z PROC			; std::less<unsigned int>::operator(), COMDAT
; _this$ = ecx

; 124  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  0000b	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0000d	1b c0		 sbb	 eax, eax
  0000f	f7 d8		 neg	 eax

; 126  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??R?$less@I@std@@QBE_NABI0@Z ENDP			; std::less<unsigned int>::operator()
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 41   : 		}

  00008	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEABU_CS_SCHEDULE_DATA@@XZ ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEABU_CS_SCHEDULE_DATA@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEABU_CS_SCHEDULE_DATA@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEABU_CS_SCHEDULE_DATA@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator*
_TEXT	ENDS
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator==
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator==, COMDAT
; _this$ = ecx

; 316  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 318  : 		if (this->_Getcont() == 0
; 319  : 			|| this->_Getcont() != _Right._Getcont())
; 320  : 			{	// report error
; 321  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 322  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 323  : 			}
; 324  : 
; 325  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 326  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 327  : 			&& this->_Getcont() == _Right._Getcont());
; 328  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 329  : 
; 330  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 331  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtp
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 123  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with null pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 41   : 		}

  00008	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEABU_CS_NPC_DATA@@XZ ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEABU_CS_NPC_DATA@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEABU_CS_NPC_DATA@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEABU_CS_NPC_DATA@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator*
_TEXT	ENDS
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator==
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator==, COMDAT
; _this$ = ecx

; 316  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 318  : 		if (this->_Getcont() == 0
; 319  : 			|| this->_Getcont() != _Right._Getcont())
; 320  : 			{	// report error
; 321  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 322  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 323  : 			}
; 324  : 
; 325  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 326  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 327  : 			&& this->_Getcont() == _Right._Getcont());
; 328  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 329  : 
; 330  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 331  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtp
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 123  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator==, COMDAT
; _this$ = ecx

; 316  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 318  : 		if (this->_Getcont() == 0
; 319  : 			|| this->_Getcont() != _Right._Getcont())
; 320  : 			{	// report error
; 321  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 322  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 323  : 			}
; 324  : 
; 325  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 326  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 327  : 			&& this->_Getcont() == _Right._Getcont());
; 328  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 329  : 
; 330  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 331  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtp
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 123  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBE_NPBU_CS_REG_GUILD_DATA@@@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Inside
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBE_NPBU_CS_REG_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBE_NPBU_CS_REG_GUILD_DATA@@@Z PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0d		 jae	 SHORT $LN3@Inside@4
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 09		 ja	 SHORT $LN3@Inside@4
  0000f	b8 01 00 00 00	 mov	 eax, 1

; 1287 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@Inside@4:

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00018	33 c0		 xor	 eax, eax

; 1287 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Inside@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBE_NPBU_CS_REG_GUILD_DATA@@@Z ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEXPAU_CS_REG_GUILD_DATA@@0@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEXPAU_CS_REG_GUILD_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEXPAU_CS_REG_GUILD_DATA@@0@Z PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEXPAU_CS_REG_GUILD_DATA@@0@Z ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ ; std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::~_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::~_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::~_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	??0?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAE@XZ ; std::allocator<_CS_REG_GUILD_DATA>::allocator<_CS_REG_GUILD_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAE@XZ PROC	; std::allocator<_CS_REG_GUILD_DATA>::allocator<_CS_REG_GUILD_DATA>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAE@XZ ENDP	; std::allocator<_CS_REG_GUILD_DATA>::allocator<_CS_REG_GUILD_DATA>
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
_TEXT	ENDS
PUBLIC	?capacity@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	56		 push	 esi

; 777  : 		return (this->_Myend - this->_Myfirst);

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	2b 31		 sub	 esi, DWORD PTR [ecx]
  00006	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 04	 sar	 edx, 4
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 778  : 		}

  0001a	c3		 ret	 0
?capacity@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEXXZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<_CS_SCHEDULE_DATA>::allocator<_CS_SCHEDULE_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<_CS_SCHEDULE_DATA>::allocator<_CS_SCHEDULE_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<_CS_SCHEDULE_DATA>::allocator<_CS_SCHEDULE_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@I@Z ; std::allocator<_CS_SCHEDULE_DATA>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@I@Z PROC ; std::allocator<_CS_SCHEDULE_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@I@Z ENDP ; std::allocator<_CS_SCHEDULE_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::capacity
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

  00000	56		 push	 esi

; 777  : 		return (this->_Myend - this->_Myfirst);

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	2b 31		 sub	 esi, DWORD PTR [ecx]
  00006	b8 09 cb 3d 8d	 mov	 eax, -1925330167	; 8d3dcb09H
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 06	 sar	 edx, 6
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 778  : 		}

  0001a	c3		 ret	 0
?capacity@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

  00000	56		 push	 esi

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	2b 31		 sub	 esi, DWORD PTR [ecx]
  00006	b8 09 cb 3d 8d	 mov	 eax, -1925330167	; 8d3dcb09H
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 06	 sar	 edx, 6
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 880  : 		}

  0001a	c3		 ret	 0
?size@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEXXZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000a	cc		 int	 3
?_Xlen@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@U_CS_NPC_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<_CS_NPC_DATA>::allocator<_CS_NPC_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U_CS_NPC_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U_CS_NPC_DATA@@@std@@QAE@ABV01@@Z PROC	; std::allocator<_CS_NPC_DATA>::allocator<_CS_NPC_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U_CS_NPC_DATA@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<_CS_NPC_DATA>::allocator<_CS_NPC_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@I@Z ; std::allocator<_CS_NPC_DATA>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@I@Z PROC ; std::allocator<_CS_NPC_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@I@Z ENDP ; std::allocator<_CS_NPC_DATA>::deallocate
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Isnil
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Isnil, COMDAT

; 611  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  : 		return ((char&)(*_Pnode)._Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 3d	 add	 eax, 61			; 0000003dH

; 613  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Left
; Function compile flags: /Ogtp
;	COMDAT ?_Left@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Left, COMDAT

; 621  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 		return ((_Nodepref)(*_Pnode)._Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Parent
; Function compile flags: /Ogtp
;	COMDAT ?_Parent@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Parent, COMDAT

; 626  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 628  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Right
; Function compile flags: /Ogtp
;	COMDAT ?_Right@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Right, COMDAT

; 631  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  : 		return ((_Nodepref)(*_Pnode)._Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 633  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Myval
; Function compile flags: /Ogtp
;	COMDAT ?_Myval@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Myval, COMDAT

; 636  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 638  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Isnil
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Isnil, COMDAT

; 611  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  : 		return ((char&)(*_Pnode)._Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	05 fd 07 00 00	 add	 eax, 2045		; 000007fdH

; 613  : 		}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?_Isnil@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Left
; Function compile flags: /Ogtp
;	COMDAT ?_Left@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Left, COMDAT

; 621  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 		return ((_Nodepref)(*_Pnode)._Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Parent
; Function compile flags: /Ogtp
;	COMDAT ?_Parent@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Parent, COMDAT

; 626  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 628  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Right
; Function compile flags: /Ogtp
;	COMDAT ?_Right@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Right, COMDAT

; 631  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  : 		return ((_Nodepref)(*_Pnode)._Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 633  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Myval
; Function compile flags: /Ogtp
;	COMDAT ?_Myval@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Myval, COMDAT

; 636  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 638  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000a	cc		 int	 3
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBIH@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Myval
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBIH@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBIH@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Myval, COMDAT

; 636  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 638  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBIH@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBIH@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned int const ,int> >::allocator<std::pair<unsigned int const ,int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBIH@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBIH@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<unsigned int const ,int> >::allocator<std::pair<unsigned int const ,int> >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBIH@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<unsigned int const ,int> >::allocator<std::pair<unsigned int const ,int> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@PAU_CS_SCHEDULE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@PAU_CS_SCHEDULE_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@PAU_CS_SCHEDULE_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@PAU_CS_SCHEDULE_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@PAU_CS_NPC_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@PAU_CS_NPC_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@PAU_CS_NPC_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@PAU_CS_NPC_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 74	 add	 DWORD PTR [eax], 116	; 00000074H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator*
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator*, COMDAT
; _this$ = ecx

; 231  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 232  : 		if (this->_Getcont() == 0
; 233  : 			|| this->_Ptr == 0
; 234  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 235  : 			{	// report error
; 236  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 237  : 			_SCL_SECURE_OUT_OF_RANGE;
; 238  : 			}
; 239  : 
; 240  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 241  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 242  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 243  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 244  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 245  : 
; 246  : 		return (_Mytree::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 247  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator*, COMDAT
; _this$ = ecx

; 231  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 232  : 		if (this->_Getcont() == 0
; 233  : 			|| this->_Ptr == 0
; 234  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 235  : 			{	// report error
; 236  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 237  : 			_SCL_SECURE_OUT_OF_RANGE;
; 238  : 			}
; 239  : 
; 240  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 241  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 242  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 243  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 244  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 245  : 
; 246  : 		return (_Mytree::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 247  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator*
_TEXT	ENDS
PUBLIC	?capacity@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::capacity
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 06	 sar	 eax, 6

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEXXZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@4:
$LN3@Xlen@4:
  0000a	cc		 int	 3
?_Xlen@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAE@ABV01@@Z ; std::allocator<_CS_REG_GUILD_DATA>::allocator<_CS_REG_GUILD_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<_CS_REG_GUILD_DATA>::allocator<_CS_REG_GUILD_DATA>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<_CS_REG_GUILD_DATA>::allocator<_CS_REG_GUILD_DATA>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@I@Z ; std::allocator<_CS_REG_GUILD_DATA>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@I@Z PROC ; std::allocator<_CS_REG_GUILD_DATA>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@I@Z ENDP ; std::allocator<_CS_REG_GUILD_DATA>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QAE@PAU_CS_REG_GUILD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QAE@PAU_CS_REG_GUILD_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QAE@PAU_CS_REG_GUILD_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QAE@PAU_CS_REG_GUILD_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1511 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1512 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QBEIXZ ; std::allocator<_CS_SCHEDULE_DATA>::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QBEIXZ PROC ; std::allocator<_CS_SCHEDULE_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QBEIXZ ENDP ; std::allocator<_CS_SCHEDULE_DATA>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U_CS_NPC_DATA@@@std@@QBEIXZ ; std::allocator<_CS_NPC_DATA>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@U_CS_NPC_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U_CS_NPC_DATA@@@std@@QBEIXZ PROC	; std::allocator<_CS_NPC_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 2c f7 34 02	 mov	 eax, 37025580		; 0234f72cH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U_CS_NPC_DATA@@@std@@QBEIXZ ENDP	; std::allocator<_CS_NPC_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Color
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Color, COMDAT

; 606  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 		return ((char&)(*_Pnode)._Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 3c	 add	 eax, 60			; 0000003cH

; 608  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Color
; Function compile flags: /Ogtp
;	COMDAT ?_Color@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Color, COMDAT

; 606  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 		return ((char&)(*_Pnode)._Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	05 fc 07 00 00	 add	 eax, 2044		; 000007fcH

; 608  : 		}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?_Color@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Color
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Color, COMDAT

; 606  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 		return ((char&)(*_Pnode)._Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 14	 add	 eax, 20			; 00000014H

; 608  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Isnil
; Function compile flags: /Ogtp
;	COMDAT ?_Isnil@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Isnil, COMDAT

; 611  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  : 		return ((char&)(*_Pnode)._Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 15	 add	 eax, 21			; 00000015H

; 613  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Left
; Function compile flags: /Ogtp
;	COMDAT ?_Left@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Left, COMDAT

; 621  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 		return ((_Nodepref)(*_Pnode)._Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Parent
; Function compile flags: /Ogtp
;	COMDAT ?_Parent@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Parent, COMDAT

; 626  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 628  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Right
; Function compile flags: /Ogtp
;	COMDAT ?_Right@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Right, COMDAT

; 631  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  : 		return ((_Nodepref)(*_Pnode)._Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 633  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Right
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QBEIXZ ; std::allocator<_CS_REG_GUILD_DATA>::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QBEIXZ PROC ; std::allocator<_CS_REG_GUILD_DATA>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QBEIXZ ENDP ; std::allocator<_CS_REG_GUILD_DATA>::max_size
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Max
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Max, COMDAT

; 641  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  0000d	75 0c		 jne	 SHORT $LN1@Max
  0000f	90		 npad	 1
$LL2@Max:

; 643  : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN1@Max:

; 644  : 		return (_Pnode);
; 645  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Max@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Min
; Function compile flags: /Ogtp
;	COMDAT ?_Min@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Min, COMDAT

; 648  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  0000c	75 0c		 jne	 SHORT $LN1@Min
  0000e	8b ff		 npad	 2
$LL2@Min:

; 650  : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN1@Min:

; 651  : 		return (_Pnode);
; 652  : 		}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Min@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@QAE@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0>::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@QAE@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@QAE@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0>::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@QAE@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0>::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0>
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Max
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Max, COMDAT

; 641  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  00010	75 0e		 jne	 SHORT $LN1@Max@2
$LL2@Max@2:

; 643  : 			_Pnode = _Right(_Pnode);

  00012	8b c1		 mov	 eax, ecx
  00014	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00017	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  0001e	74 f2		 je	 SHORT $LL2@Max@2
$LN1@Max@2:

; 644  : 		return (_Pnode);
; 645  : 		}

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Max@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Min
; Function compile flags: /Ogtp
;	COMDAT ?_Min@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Min, COMDAT

; 648  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  0000f	75 0d		 jne	 SHORT $LN1@Min@2
$LL2@Min@2:

; 650  : 			_Pnode = _Left(_Pnode);

  00011	8b c1		 mov	 eax, ecx
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  0001c	74 f3		 je	 SHORT $LL2@Min@2
$LN1@Min@2:

; 651  : 		return (_Pnode);
; 652  : 		}

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?_Min@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@@Z ; std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0>::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@@Z PROC ; std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0>::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@@Z ENDP ; std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0>::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2008 : 		{	// determine current pointer to buffer for nonmutable string

  00000	8b c1		 mov	 eax, ecx

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00002	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00006	72 02		 jb	 SHORT $LN4@Myptr
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Myptr:

; 2011 : 		}

  0000a	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rmost
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1784 : 		return (this->_Right(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1785 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Max
; Function compile flags: /Ogtp
;	COMDAT ?_Max@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Max, COMDAT

; 641  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0000d	75 0c		 jne	 SHORT $LN1@Max@3
  0000f	90		 npad	 1
$LL2@Max@3:

; 643  : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00019	74 f5		 je	 SHORT $LL2@Max@3
$LN1@Max@3:

; 644  : 		return (_Pnode);
; 645  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Max@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Min
; Function compile flags: /Ogtp
;	COMDAT ?_Min@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Min, COMDAT

; 648  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0000c	75 0c		 jne	 SHORT $LN1@Min@3
  0000e	8b ff		 npad	 2
$LL2@Min@3:

; 650  : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00018	74 f6		 je	 SHORT $LL2@Min@3
$LN1@Min@3:

; 651  : 		return (_Pnode);
; 652  : 		}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Min@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@QAE@U?$less@I@1@@Z ; std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@QAE@U?$less@I@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@QAE@U?$less@I@1@@Z PROC ; std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@QAE@U?$less@I@1@@Z ENDP ; std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>
_TEXT	ENDS
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator++
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 59   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 10		 mov	 edx, DWORD PTR [eax]
  00004	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00008	75 40		 jne	 SHORT $LN3@operator

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0000d	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00011	75 1a		 jne	 SHORT $LN34@operator

; 62   : 			_Ptr = _Mytree::_Min(
; 63   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00019	75 0f		 jne	 SHORT $LN17@operator
  0001b	eb 03 8d 49 00	 npad	 5
$LL18@operator:
  00020	8b ca		 mov	 ecx, edx
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN17@operator:
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0002c	c3		 ret	 0
$LN34@operator:

; 64   : 		else
; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00030	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00034	75 12		 jne	 SHORT $LN1@operator
$LL2@operator:
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0003b	75 0b		 jne	 SHORT $LN1@operator

; 69   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003d	89 10		 mov	 DWORD PTR [eax], edx
  0003f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00042	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00046	74 ee		 je	 SHORT $LL2@operator
$LN1@operator:

; 70   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00048	89 10		 mov	 DWORD PTR [eax], edx
$LN3@operator:

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0004a	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
PUBLIC	??$addressof@$$CBU_CS_SCHEDULE_DATA@@@std@@YAPBU_CS_SCHEDULE_DATA@@ABU1@@Z ; std::addressof<_CS_SCHEDULE_DATA const >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBU_CS_SCHEDULE_DATA@@@std@@YAPBU_CS_SCHEDULE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU_CS_SCHEDULE_DATA@@@std@@YAPBU_CS_SCHEDULE_DATA@@ABU1@@Z PROC ; std::addressof<_CS_SCHEDULE_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBU_CS_SCHEDULE_DATA@@@std@@YAPBU_CS_SCHEDULE_DATA@@ABU1@@Z ENDP ; std::addressof<_CS_SCHEDULE_DATA const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBU_CS_NPC_DATA@@@std@@YAPBU_CS_NPC_DATA@@ABU1@@Z ; std::addressof<_CS_NPC_DATA const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBU_CS_NPC_DATA@@@std@@YAPBU_CS_NPC_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU_CS_NPC_DATA@@@std@@YAPBU_CS_NPC_DATA@@ABU1@@Z PROC ; std::addressof<_CS_NPC_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBU_CS_NPC_DATA@@@std@@YAPBU_CS_NPC_DATA@@ABU1@@Z ENDP ; std::addressof<_CS_NPC_DATA const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBH@std@@YAPBHABH@Z		; std::addressof<int const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBH@std@@YAPBHABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBH@std@@YAPBHABH@Z PROC			; std::addressof<int const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBH@std@@YAPBHABH@Z ENDP			; std::addressof<int const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBU_CS_REG_GUILD_DATA@@@std@@YAPBU_CS_REG_GUILD_DATA@@ABU1@@Z ; std::addressof<_CS_REG_GUILD_DATA const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBU_CS_REG_GUILD_DATA@@@std@@YAPBU_CS_REG_GUILD_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU_CS_REG_GUILD_DATA@@@std@@YAPBU_CS_REG_GUILD_DATA@@ABU1@@Z PROC ; std::addressof<_CS_REG_GUILD_DATA const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBU_CS_REG_GUILD_DATA@@@std@@YAPBU_CS_REG_GUILD_DATA@@ABU1@@Z ENDP ; std::addressof<_CS_REG_GUILD_DATA const >
_TEXT	ENDS
PUBLIC	??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@AAU10@@Z PROC ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z PROC ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>, COMDAT

; 66   : 		static const _Kty& _Kfn(const _STD pair<_Ty1, _Ty2>& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 		{	// extract key from element value
; 68   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 69   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ENDP ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>
_TEXT	ENDS
PUBLIC	??$addressof@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@YAPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@AAU10@@Z ; std::addressof<std::pair<int const ,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@YAPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@YAPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@AAU10@@Z PROC ; std::addressof<std::pair<int const ,_CS_MINIMAP_DATA> >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@YAPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<int const ,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	??$_Kfn@$$CBHU_CS_MINIMAP_DATA@@@?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@@Z ; std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0>::_Kfn<int const ,_CS_MINIMAP_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBHU_CS_MINIMAP_DATA@@@?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBHU_CS_MINIMAP_DATA@@@?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@@Z PROC ; std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0>::_Kfn<int const ,_CS_MINIMAP_DATA>, COMDAT

; 66   : 		static const _Kty& _Kfn(const _STD pair<_Ty1, _Ty2>& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 		{	// extract key from element value
; 68   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 69   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBHU_CS_MINIMAP_DATA@@@?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@@Z ENDP ; std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0>::_Kfn<int const ,_CS_MINIMAP_DATA>
_TEXT	ENDS
PUBLIC	??$_Kfn@$$CBIH@?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@SAABIABU?$pair@$$CBIH@1@@Z ; std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>::_Kfn<unsigned int const ,int>
; Function compile flags: /Ogtp
;	COMDAT ??$_Kfn@$$CBIH@?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@SAABIABU?$pair@$$CBIH@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBIH@?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@SAABIABU?$pair@$$CBIH@1@@Z PROC ; std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>::_Kfn<unsigned int const ,int>, COMDAT

; 66   : 		static const _Kty& _Kfn(const _STD pair<_Ty1, _Ty2>& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 		{	// extract key from element value
; 68   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 69   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBIH@?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@SAABIABU?$pair@$$CBIH@1@@Z ENDP ; std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>::_Kfn<unsigned int const ,int>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@IPAU1@@Z ; std::_Allocate<_CS_SCHEDULE_DATA>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T201016 = -12						; size = 12
$T201021 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@IPAU1@@Z PROC ; std::_Allocate<_CS_SCHEDULE_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 4a		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 1a		 ja	 SHORT $LN1@Allocate
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	2b c1		 sub	 eax, ecx
  00020	03 c0		 add	 eax, eax
  00022	03 c0		 add	 eax, eax
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0002f	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00031	8d 4d 08	 lea	 ecx, DWORD PTR $T201021[ebp]
  00034	51		 push	 ecx
  00035	8d 4d f4	 lea	 ecx, DWORD PTR $T201016[ebp]
  00038	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T201021[ebp], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 55 f4	 lea	 edx, DWORD PTR $T201016[ebp]
  0004c	52		 push	 edx
  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T201016[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00054	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@U_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@IPAU1@@Z ENDP ; std::_Allocate<_CS_SCHEDULE_DATA>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_CS_NPC_DATA@@@std@@YAPAU_CS_NPC_DATA@@IPAU1@@Z ; std::_Allocate<_CS_NPC_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@U_CS_NPC_DATA@@@std@@YAPAU_CS_NPC_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T201026 = -12						; size = 12
$T201030 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_CS_NPC_DATA@@@std@@YAPAU_CS_NPC_DATA@@IPAU1@@Z PROC ; std::_Allocate<_CS_NPC_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 40		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 2c f7 34
	02		 cmp	 ecx, 37025580		; 0234f72cH
  00015	77 10		 ja	 SHORT $LN1@Allocate@2
  00017	6b c9 74	 imul	 ecx, 116		; 00000074H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 28		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	8d 45 08	 lea	 eax, DWORD PTR $T201030[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T201026[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T201030[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T201026[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T201026[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@U_CS_NPC_DATA@@@std@@YAPAU_CS_NPC_DATA@@IPAU1@@Z ENDP ; std::_Allocate<_CS_NPC_DATA>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node><std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node><std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node><std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T201038 = -12						; size = 12
$T201042 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 40		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	03		 cmp	 ecx, 67108863		; 03ffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@3
  00017	c1 e1 06	 shl	 ecx, 6
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 28		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	8d 45 08	 lea	 eax, DWORD PTR $T201042[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T201038[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T201042[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T201038[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T201038[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node><std::pair<int const ,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$?0U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node><std::pair<int const ,_CS_MINIMAP_DATA> >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node><std::pair<int const ,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T201050 = -12						; size = 12
$T201054 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 40		 je	 SHORT $LN5@Allocate@4

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff 1f
	00		 cmp	 ecx, 2097151		; 001fffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@4
  00017	c1 e1 0b	 shl	 ecx, 11			; 0000000bH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 28		 jne	 SHORT $LN5@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	8d 45 08	 lea	 eax, DWORD PTR $T201054[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T201050[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T201054[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T201050[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T201050[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@4:
$LN5@Allocate@4:

; 40   : 	}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN9@Allocate@4:
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T201059 = -12						; size = 12
$T201063 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate@5

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 14		 ja	 SHORT $LN1@Allocate@5
  00017	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate@5
$LN1@Allocate@5:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T201063[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T201059[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T201063[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T201059[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T201059[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@5:
$LN5@Allocate@5:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate@5:
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
PUBLIC	??$addressof@U?$pair@$$CBIH@std@@@std@@YAPAU?$pair@$$CBIH@0@AAU10@@Z ; std::addressof<std::pair<unsigned int const ,int> >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@U?$pair@$$CBIH@std@@@std@@YAPAU?$pair@$$CBIH@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBIH@std@@@std@@YAPAU?$pair@$$CBIH@0@AAU10@@Z PROC ; std::addressof<std::pair<unsigned int const ,int> >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBIH@std@@@std@@YAPAU?$pair@$$CBIH@0@AAU10@@Z ENDP ; std::addressof<std::pair<unsigned int const ,int> >
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBIH@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node><std::pair<unsigned int const ,int> >
; Function compile flags: /Ogtp
;	COMDAT ??$?0U?$pair@$$CBIH@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBIH@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node><std::pair<unsigned int const ,int> >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBIH@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node><std::pair<unsigned int const ,int> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T201073 = -12						; size = 12
$T201077 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 46		 je	 SHORT $LN5@Allocate@6

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 16		 ja	 SHORT $LN1@Allocate@6
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	03 c0		 add	 eax, eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0002b	75 28		 jne	 SHORT $LN5@Allocate@6
$LN1@Allocate@6:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002d	8d 4d 08	 lea	 ecx, DWORD PTR $T201077[ebp]
  00030	51		 push	 ecx
  00031	8d 4d f4	 lea	 ecx, DWORD PTR $T201073[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T201077[ebp], 0
  0003b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00040	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00045	8d 55 f4	 lea	 edx, DWORD PTR $T201073[ebp]
  00048	52		 push	 edx
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T201073[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@6:
$LN5@Allocate@6:

; 40   : 	}

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN9@Allocate@6:
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@IPAU1@@Z ; std::_Allocate<_CS_REG_GUILD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@U_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@IPAU1@@Z
_TEXT	SEGMENT
$T201082 = -12						; size = 12
$T201086 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@IPAU1@@Z PROC ; std::_Allocate<_CS_REG_GUILD_DATA>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 40		 je	 SHORT $LN5@Allocate@7

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	03		 cmp	 ecx, 67108863		; 03ffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@7
  00017	c1 e1 06	 shl	 ecx, 6
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 28		 jne	 SHORT $LN5@Allocate@7
$LN1@Allocate@7:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	8d 45 08	 lea	 eax, DWORD PTR $T201086[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T201082[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T201086[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T201082[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T201082[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@7:
$LN5@Allocate@7:

; 40   : 	}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN9@Allocate@7:
??$_Allocate@U_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@IPAU1@@Z ENDP ; std::_Allocate<_CS_REG_GUILD_DATA>
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1905 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1906 : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1907 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2002 : 		{	// determine current pointer to buffer for mutable string

  00000	8b c1		 mov	 eax, ecx

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00002	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00006	72 02		 jb	 SHORT $LN4@Myptr@2
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Myptr@2:

; 2005 : 		}

  0000a	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2020 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1972 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1973 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 2d		 je	 SHORT $LN2@Inside@5
  0000b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00011	72 04		 jb	 SHORT $LN8@Inside@5
  00013	8b 01		 mov	 eax, DWORD PTR [ecx]
  00015	eb 02		 jmp	 SHORT $LN9@Inside@5
$LN8@Inside@5:
  00017	8b c1		 mov	 eax, ecx
$LN9@Inside@5:
  00019	3b f0		 cmp	 esi, eax
  0001b	72 1b		 jb	 SHORT $LN2@Inside@5
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	72 04		 jb	 SHORT $LN12@Inside@5
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	eb 02		 jmp	 SHORT $LN13@Inside@5
$LN12@Inside@5:
  00026	8b c1		 mov	 eax, ecx
$LN13@Inside@5:
  00028	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002b	03 c8		 add	 ecx, eax
  0002d	3b ce		 cmp	 ecx, esi
  0002f	76 07		 jbe	 SHORT $LN2@Inside@5

; 1975 : 		else
; 1976 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 1977 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN2@Inside@5:

; 1974 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 1977 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2015 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@5:
$LN3@Xlen@5:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator-
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator-, COMDAT
; _this$ = ecx

; 190  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 191  : 		_Compat(_Right);
; 192  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	2b 08		 sub	 ecx, DWORD PTR [eax]
  0000a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000f	f7 e9		 imul	 ecx
  00011	03 d1		 add	 edx, ecx
  00013	c1 fa 04	 sar	 edx, 4
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx

; 193  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator-
_TEXT	ENDS
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T201143 = -12						; size = 12
$T201147 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3a		 je	 SHORT $LN5@Allocate@8

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	83 f9 ff	 cmp	 ecx, -1
  00012	77 0d		 ja	 SHORT $LN1@Allocate@8
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001f	75 28		 jne	 SHORT $LN5@Allocate@8
$LN1@Allocate@8:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00021	8d 45 08	 lea	 eax, DWORD PTR $T201147[ebp]
  00024	50		 push	 eax
  00025	8d 4d f4	 lea	 ecx, DWORD PTR $T201143[ebp]
  00028	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T201147[ebp], 0
  0002f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00034	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00039	8d 4d f4	 lea	 ecx, DWORD PTR $T201143[ebp]
  0003c	51		 push	 ecx
  0003d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T201143[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00044	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@8:
$LN5@Allocate@8:

; 40   : 	}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN9@Allocate@8:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Compat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 05	 mov	 eax, 89478485		; 05555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 81 40 20 00	 mov	 eax, 2113665		; 00204081H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBIH@std@@@std@@QBEIXZ ; std::allocator<std::pair<unsigned int const ,int> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBIH@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBIH@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<unsigned int const ,int> >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBIH@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<unsigned int const ,int> >::max_size
_TEXT	ENDS
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 83   : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 84   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00008	74 06		 je	 SHORT $LN8@operator@2

; 85   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0000f	c3		 ret	 0
$LN8@operator@2:

; 86   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00016	75 17		 jne	 SHORT $LN40@operator@2

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

  00018	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0001b	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0001f	75 30		 jne	 SHORT $LN21@operator@2
$LL22@operator@2:
  00021	8b d1		 mov	 edx, ecx
  00023	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00026	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0002a	74 f5		 je	 SHORT $LL22@operator@2

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0002e	c3		 ret	 0
$LN40@operator@2:

; 89   : 		else
; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00036	75 11		 jne	 SHORT $LN3@operator@2
$LL4@operator@2:
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0003c	75 0b		 jne	 SHORT $LN3@operator@2

; 94   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003e	89 10		 mov	 DWORD PTR [eax], edx
  00040	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00043	80 7a 15 00	 cmp	 BYTE PTR [edx+21], 0
  00047	74 ef		 je	 SHORT $LL4@operator@2
$LN3@operator@2:

; 95   : 			if (_Mytree::_Isnil(_Ptr))

  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0004f	75 02		 jne	 SHORT $LN1@operator@2

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

$LN21@operator@2:

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  00051	89 10		 mov	 DWORD PTR [eax], edx
$LN1@operator@2:

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00053	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 83   : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 84   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  00008	74 06		 je	 SHORT $LN8@operator@3

; 85   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0000f	c3		 ret	 0
$LN8@operator@3:

; 86   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	80 7a 3d 00	 cmp	 BYTE PTR [edx+61], 0
  00016	75 17		 jne	 SHORT $LN40@operator@3

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

  00018	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0001b	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  0001f	75 30		 jne	 SHORT $LN21@operator@3
$LL22@operator@3:
  00021	8b d1		 mov	 edx, ecx
  00023	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00026	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  0002a	74 f5		 je	 SHORT $LL22@operator@3

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0002e	c3		 ret	 0
$LN40@operator@3:

; 89   : 		else
; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	80 7a 3d 00	 cmp	 BYTE PTR [edx+61], 0
  00036	75 11		 jne	 SHORT $LN3@operator@3
$LL4@operator@3:
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0003c	75 0b		 jne	 SHORT $LN3@operator@3

; 94   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003e	89 10		 mov	 DWORD PTR [eax], edx
  00040	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00043	80 7a 3d 00	 cmp	 BYTE PTR [edx+61], 0
  00047	74 ef		 je	 SHORT $LL4@operator@3
$LN3@operator@3:

; 95   : 			if (_Mytree::_Isnil(_Ptr))

  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  0004f	75 02		 jne	 SHORT $LN1@operator@3

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

$LN21@operator@3:

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  00051	89 10		 mov	 DWORD PTR [eax], edx
$LN1@operator@3:

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00053	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Ogtp
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 83   : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 84   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  0000b	74 06		 je	 SHORT $LN8@operator@4

; 85   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000d	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00012	c3		 ret	 0
$LN8@operator@4:

; 86   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	80 ba fd 07 00
	00 00		 cmp	 BYTE PTR [edx+2045], 0
  0001c	75 23		 jne	 SHORT $LN40@operator@4

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

  0001e	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00021	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  00028	75 45		 jne	 SHORT $LN21@operator@4
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL22@operator@4:
  00030	8b d1		 mov	 edx, ecx
  00032	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00035	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  0003c	74 f2		 je	 SHORT $LL22@operator@4

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  0003e	89 10		 mov	 DWORD PTR [eax], edx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00040	c3		 ret	 0
$LN40@operator@4:

; 89   : 		else
; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  00041	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00044	80 ba fd 07 00
	00 00		 cmp	 BYTE PTR [edx+2045], 0
  0004b	75 17		 jne	 SHORT $LN3@operator@4
  0004d	8d 49 00	 npad	 3
$LL4@operator@4:
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00054	75 0e		 jne	 SHORT $LN3@operator@4

; 94   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00056	89 10		 mov	 DWORD PTR [eax], edx
  00058	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0005b	80 ba fd 07 00
	00 00		 cmp	 BYTE PTR [edx+2045], 0
  00062	74 ec		 je	 SHORT $LL4@operator@4
$LN3@operator@4:

; 95   : 			if (_Mytree::_Isnil(_Ptr))

  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  0006d	75 02		 jne	 SHORT $LN1@operator@4

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

$LN21@operator@4:

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  0006f	89 10		 mov	 DWORD PTR [eax], edx
$LN1@operator@4:

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00071	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
PUBLIC	??$forward@H@std@@YA$$QAHAAH@Z			; std::forward<int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
PUBLIC	??$?0HH@?$_Pair_base@IH@std@@QAE@$$QAH0@Z	; std::_Pair_base<unsigned int,int>::_Pair_base<unsigned int,int><int,int>
; Function compile flags: /Ogtp
;	COMDAT ??$?0HH@?$_Pair_base@IH@std@@QAE@$$QAH0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HH@?$_Pair_base@IH@std@@QAE@$$QAH0@Z PROC		; std::_Pair_base<unsigned int,int>::_Pair_base<unsigned int,int><int,int>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0HH@?$_Pair_base@IH@std@@QAE@$$QAH0@Z ENDP		; std::_Pair_base<unsigned int,int>::_Pair_base<unsigned int,int><int,int>
_TEXT	ENDS
PUBLIC	??$forward@U?$pair@IH@std@@@std@@YA$$QAU?$pair@IH@0@AAU10@@Z ; std::forward<std::pair<unsigned int,int> >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U?$pair@IH@std@@@std@@YA$$QAU?$pair@IH@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@IH@std@@@std@@YA$$QAU?$pair@IH@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned int,int> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@IH@std@@@std@@YA$$QAU?$pair@IH@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned int,int> >
_TEXT	ENDS
PUBLIC	??$forward@AAH@std@@YAAAHAAH@Z			; std::forward<int &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
PUBLIC	??$forward@AAU_CS_MINIMAP_DATA@@@std@@YAAAU_CS_MINIMAP_DATA@@AAU1@@Z ; std::forward<_CS_MINIMAP_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAU_CS_MINIMAP_DATA@@@std@@YAAAU_CS_MINIMAP_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_CS_MINIMAP_DATA@@@std@@YAAAU_CS_MINIMAP_DATA@@AAU1@@Z PROC ; std::forward<_CS_MINIMAP_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_CS_MINIMAP_DATA@@@std@@YAAAU_CS_MINIMAP_DATA@@AAU1@@Z ENDP ; std::forward<_CS_MINIMAP_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@std@@YA$$QAU?$pair@HU_CS_MINIMAP_DATA@@@0@AAU10@@Z ; std::forward<std::pair<int,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@std@@YA$$QAU?$pair@HU_CS_MINIMAP_DATA@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@std@@YA$$QAU?$pair@HU_CS_MINIMAP_DATA@@@0@AAU10@@Z PROC ; std::forward<std::pair<int,_CS_MINIMAP_DATA> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@std@@YA$$QAU?$pair@HU_CS_MINIMAP_DATA@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	??$forward@ABH@std@@YAABHABH@Z			; std::forward<int const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
PUBLIC	??$forward@AAU_CS_TOTAL_GUILD_DATA@@@std@@YAAAU_CS_TOTAL_GUILD_DATA@@AAU1@@Z ; std::forward<_CS_TOTAL_GUILD_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAU_CS_TOTAL_GUILD_DATA@@@std@@YAAAU_CS_TOTAL_GUILD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_CS_TOTAL_GUILD_DATA@@@std@@YAAAU_CS_TOTAL_GUILD_DATA@@AAU1@@Z PROC ; std::forward<_CS_TOTAL_GUILD_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_CS_TOTAL_GUILD_DATA@@@std@@YAAAU_CS_TOTAL_GUILD_DATA@@AAU1@@Z ENDP ; std::forward<_CS_TOTAL_GUILD_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YA$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YA$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YA$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@AAU10@@Z PROC ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YA$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@AAU10@@Z ENDP ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	??$forward@AAY0BA@D@std@@YAAAY0BA@DAAY0BA@D@Z	; std::forward<char (&)[16]>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAY0BA@D@std@@YAAAY0BA@DAAY0BA@D@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0BA@D@std@@YAAAY0BA@DAAY0BA@D@Z PROC	; std::forward<char (&)[16]>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0BA@D@std@@YAAAY0BA@DAAY0BA@D@Z ENDP	; std::forward<char (&)[16]>
_TEXT	ENDS
PUBLIC	??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
PUBLIC	??$_Find@PAHH@std@@YAPAHPAH0ABH@Z		; std::_Find<int *,int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Find@PAHH@std@@YAPAHPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Find@PAHH@std@@YAPAHPAH0ABH@Z PROC			; std::_Find<int *,int>, COMDAT

; 39   : 	{	// find first matching _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	for (; _First != _Last; ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	3b c1		 cmp	 eax, ecx
  0000b	74 10		 je	 SHORT $LN8@Find
  0000d	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00010	8b 12		 mov	 edx, DWORD PTR [edx]
$LL4@Find:

; 41   : 		if (*_First == _Val)

  00012	39 10		 cmp	 DWORD PTR [eax], edx
  00014	74 07		 je	 SHORT $LN8@Find

; 40   : 	for (; _First != _Last; ++_First)

  00016	83 c0 04	 add	 eax, 4
  00019	3b c1		 cmp	 eax, ecx
  0001b	75 f5		 jne	 SHORT $LL4@Find
$LN8@Find:

; 42   : 			break;
; 43   : 	return (_First);
; 44   : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Find@PAHH@std@@YAPAHPAH0ABH@Z ENDP			; std::_Find<int *,int>
_TEXT	ENDS
PUBLIC	??$forward@AAU_CS_SCHEDULE_DATA@@@std@@YAAAU_CS_SCHEDULE_DATA@@AAU1@@Z ; std::forward<_CS_SCHEDULE_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAU_CS_SCHEDULE_DATA@@@std@@YAAAU_CS_SCHEDULE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_CS_SCHEDULE_DATA@@@std@@YAAAU_CS_SCHEDULE_DATA@@AAU1@@Z PROC ; std::forward<_CS_SCHEDULE_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_CS_SCHEDULE_DATA@@@std@@YAAAU_CS_SCHEDULE_DATA@@AAU1@@Z ENDP ; std::forward<_CS_SCHEDULE_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAU_CS_SCHEDULE_DATA@@@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@AAU2@@Z ; std::allocator<_CS_SCHEDULE_DATA>::construct<_CS_SCHEDULE_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAU_CS_SCHEDULE_DATA@@@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAU_CS_SCHEDULE_DATA@@@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@AAU2@@Z PROC ; std::allocator<_CS_SCHEDULE_DATA>::construct<_CS_SCHEDULE_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 2d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001c	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00022	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00025	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00028	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002e	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00031	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00034	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN3@construct:

; 209  : 		}

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$construct@AAU_CS_SCHEDULE_DATA@@@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@AAU2@@Z ENDP ; std::allocator<_CS_SCHEDULE_DATA>::construct<_CS_SCHEDULE_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABU_CS_SCHEDULE_DATA@@@std@@YAABU_CS_SCHEDULE_DATA@@ABU1@@Z ; std::forward<_CS_SCHEDULE_DATA const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABU_CS_SCHEDULE_DATA@@@std@@YAABU_CS_SCHEDULE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU_CS_SCHEDULE_DATA@@@std@@YAABU_CS_SCHEDULE_DATA@@ABU1@@Z PROC ; std::forward<_CS_SCHEDULE_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU_CS_SCHEDULE_DATA@@@std@@YAABU_CS_SCHEDULE_DATA@@ABU1@@Z ENDP ; std::forward<_CS_SCHEDULE_DATA const &>
_TEXT	ENDS
PUBLIC	??$forward@AAU_CS_NPC_DATA@@@std@@YAAAU_CS_NPC_DATA@@AAU1@@Z ; std::forward<_CS_NPC_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAU_CS_NPC_DATA@@@std@@YAAAU_CS_NPC_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_CS_NPC_DATA@@@std@@YAAAU_CS_NPC_DATA@@AAU1@@Z PROC ; std::forward<_CS_NPC_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_CS_NPC_DATA@@@std@@YAAAU_CS_NPC_DATA@@AAU1@@Z ENDP ; std::forward<_CS_NPC_DATA &>
_TEXT	ENDS
PUBLIC	??$construct@AAU_CS_NPC_DATA@@@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@AAU2@@Z ; std::allocator<_CS_NPC_DATA>::construct<_CS_NPC_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAU_CS_NPC_DATA@@@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAU_CS_NPC_DATA@@@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@AAU2@@Z PROC ; std::allocator<_CS_NPC_DATA>::construct<_CS_NPC_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN3@construct@2
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
$LN3@construct@2:

; 209  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??$construct@AAU_CS_NPC_DATA@@@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@AAU2@@Z ENDP ; std::allocator<_CS_NPC_DATA>::construct<_CS_NPC_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABU_CS_NPC_DATA@@@std@@YAABU_CS_NPC_DATA@@ABU1@@Z ; std::forward<_CS_NPC_DATA const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABU_CS_NPC_DATA@@@std@@YAABU_CS_NPC_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU_CS_NPC_DATA@@@std@@YAABU_CS_NPC_DATA@@ABU1@@Z PROC ; std::forward<_CS_NPC_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU_CS_NPC_DATA@@@std@@YAABU_CS_NPC_DATA@@ABU1@@Z ENDP ; std::forward<_CS_NPC_DATA const &>
_TEXT	ENDS
PUBLIC	??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ; std::allocator<int>::construct<int &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z PROC	; std::allocator<int>::construct<int &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN3@construct@3:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ENDP	; std::allocator<int>::construct<int &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<int *,int *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi
  0000a	2b c1		 sub	 eax, ecx
  0000c	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	c1 f8 02	 sar	 eax, 2
  00013	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0001a	56		 push	 esi
  0001b	51		 push	 ecx
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00025	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2527 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$forward@AAU_CS_REG_GUILD_DATA@@@std@@YAAAU_CS_REG_GUILD_DATA@@AAU1@@Z ; std::forward<_CS_REG_GUILD_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAU_CS_REG_GUILD_DATA@@@std@@YAAAU_CS_REG_GUILD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_CS_REG_GUILD_DATA@@@std@@YAAAU_CS_REG_GUILD_DATA@@AAU1@@Z PROC ; std::forward<_CS_REG_GUILD_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_CS_REG_GUILD_DATA@@@std@@YAAAU_CS_REG_GUILD_DATA@@AAU1@@Z ENDP ; std::forward<_CS_REG_GUILD_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@ABU_CS_REG_GUILD_DATA@@@std@@YAABU_CS_REG_GUILD_DATA@@ABU1@@Z ; std::forward<_CS_REG_GUILD_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABU_CS_REG_GUILD_DATA@@@std@@YAABU_CS_REG_GUILD_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU_CS_REG_GUILD_DATA@@@std@@YAABU_CS_REG_GUILD_DATA@@ABU1@@Z PROC ; std::forward<_CS_REG_GUILD_DATA const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU_CS_REG_GUILD_DATA@@@std@@YAABU_CS_REG_GUILD_DATA@@ABU1@@Z ENDP ; std::forward<_CS_REG_GUILD_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@U_CS_SCHEDULE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_SCHEDULE_DATA@@0@Z ; std::_Ptr_cat<_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U_CS_SCHEDULE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_SCHEDULE_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_CS_SCHEDULE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_SCHEDULE_DATA@@0@Z PROC ; std::_Ptr_cat<_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@U_CS_SCHEDULE_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_SCHEDULE_DATA@@0@Z ENDP ; std::_Ptr_cat<_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@U_CS_NPC_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_NPC_DATA@@0@Z ; std::_Ptr_cat<_CS_NPC_DATA,_CS_NPC_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@U_CS_NPC_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_NPC_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_CS_NPC_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_NPC_DATA@@0@Z PROC ; std::_Ptr_cat<_CS_NPC_DATA,_CS_NPC_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@U_CS_NPC_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_NPC_DATA@@0@Z ENDP ; std::_Ptr_cat<_CS_NPC_DATA,_CS_NPC_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@U_CS_REG_GUILD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_REG_GUILD_DATA@@0@Z ; std::_Ptr_cat<_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U_CS_REG_GUILD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_REG_GUILD_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_CS_REG_GUILD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_REG_GUILD_DATA@@0@Z PROC ; std::_Ptr_cat<_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@U_CS_REG_GUILD_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_CS_REG_GUILD_DATA@@0@Z ENDP ; std::_Ptr_cat<_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA>
_TEXT	ENDS
PUBLIC	??$_Move@AAD@std@@YA$$QADAAD@Z			; std::_Move<char &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
PUBLIC	??$_Construct@U_CS_SCHEDULE_DATA@@ABU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@ABU1@@Z ; std::_Construct<_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@U_CS_SCHEDULE_DATA@@ABU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@U_CS_SCHEDULE_DATA@@ABU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@ABU1@@Z PROC ; std::_Construct<_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 2d		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001c	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00022	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00025	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00028	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002e	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00031	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00034	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN3@Construct:

; 49   : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Construct@U_CS_SCHEDULE_DATA@@ABU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@ABU1@@Z ENDP ; std::_Construct<_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Construct@U_CS_NPC_DATA@@ABU1@@std@@YAXPAU_CS_NPC_DATA@@ABU1@@Z ; std::_Construct<_CS_NPC_DATA,_CS_NPC_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@U_CS_NPC_DATA@@ABU1@@std@@YAXPAU_CS_NPC_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@U_CS_NPC_DATA@@ABU1@@std@@YAXPAU_CS_NPC_DATA@@ABU1@@Z PROC ; std::_Construct<_CS_NPC_DATA,_CS_NPC_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN3@Construct@2
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
$LN3@Construct@2:

; 49   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Construct@U_CS_NPC_DATA@@ABU1@@std@@YAXPAU_CS_NPC_DATA@@ABU1@@Z ENDP ; std::_Construct<_CS_NPC_DATA,_CS_NPC_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Construct@HABH@std@@YAXPAHABH@Z		; std::_Construct<int,int const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@HABH@std@@YAXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@HABH@std@@YAXPAHABH@Z PROC		; std::_Construct<int,int const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct@3
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct@3:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@HABH@std@@YAXPAHABH@Z ENDP		; std::_Construct<int,int const &>
_TEXT	ENDS
PUBLIC	??$_Destroy@U?$pair@$$CBIH@std@@@std@@YAXPAU?$pair@$$CBIH@0@@Z ; std::_Destroy<std::pair<unsigned int const ,int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@U?$pair@$$CBIH@std@@@std@@YAXPAU?$pair@$$CBIH@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U?$pair@$$CBIH@std@@@std@@YAXPAU?$pair@$$CBIH@0@@Z PROC ; std::_Destroy<std::pair<unsigned int const ,int> >, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@U?$pair@$$CBIH@std@@@std@@YAXPAU?$pair@$$CBIH@0@@Z ENDP ; std::_Destroy<std::pair<unsigned int const ,int> >
_TEXT	ENDS
PUBLIC	??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$move@AA_N@std@@YA$$QA_NAA_N@Z		; std::move<bool &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AA_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AA_N@std@@YA$$QA_NAA_N@Z PROC			; std::move<bool &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AA_N@std@@YA$$QA_NAA_N@Z ENDP			; std::move<bool &>
_TEXT	ENDS
PUBLIC	??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &>
_TEXT	ENDS
PUBLIC	??0_CS_MINIMAP_DATA@@QAE@ABU0@@Z		; _CS_MINIMAP_DATA::_CS_MINIMAP_DATA
; Function compile flags: /Ogtp
;	COMDAT ??0_CS_MINIMAP_DATA@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_CS_MINIMAP_DATA@@QAE@ABU0@@Z PROC			; _CS_MINIMAP_DATA::_CS_MINIMAP_DATA, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00014	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00020	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00023	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00026	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00029	56		 push	 esi
  0002a	57		 push	 edi
  0002b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0002e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00031	8d 71 1c	 lea	 esi, DWORD PTR [ecx+28]
  00034	8d 78 1c	 lea	 edi, DWORD PTR [eax+28]
  00037	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  0003c	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0003f	f3 a5		 rep movsd
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0_CS_MINIMAP_DATA@@QAE@ABU0@@Z ENDP			; _CS_MINIMAP_DATA::_CS_MINIMAP_DATA
_TEXT	ENDS
PUBLIC	??1?$_Pair_base@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@XZ ; std::_Pair_base<int const ,_CS_MINIMAP_DATA>::~_Pair_base<int const ,_CS_MINIMAP_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Pair_base@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Pair_base@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@XZ PROC ; std::_Pair_base<int const ,_CS_MINIMAP_DATA>::~_Pair_base<int const ,_CS_MINIMAP_DATA>, COMDAT
; _this$ = ecx
  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00007	c3		 ret	 0
??1?$_Pair_base@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@XZ ENDP ; std::_Pair_base<int const ,_CS_MINIMAP_DATA>::~_Pair_base<int const ,_CS_MINIMAP_DATA>
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEPAU_CS_SCHEDULE_DATA@@XZ ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Unchecked
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEPAU_CS_SCHEDULE_DATA@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEPAU_CS_SCHEDULE_DATA@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Unchecked, COMDAT
; _this$ = ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 318  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEPAU_CS_SCHEDULE_DATA@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Unchecked
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEPAU_CS_REG_GUILD_DATA@@XZ ; std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Unchecked
; Function compile flags: /Ogtp
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEPAU_CS_REG_GUILD_DATA@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEPAU_CS_REG_GUILD_DATA@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Unchecked, COMDAT
; _this$ = ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 318  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEPAU_CS_REG_GUILD_DATA@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Unchecked
_TEXT	ENDS
PUBLIC	?_Rechecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV12@PAH@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Rechecked
; Function compile flags: /Ogtp
;	COMDAT ?_Rechecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV12@PAH@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Rechecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV12@PAH@Z PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Rechecked, COMDAT
; _this$ = ecx

; 310  : 		{	// reset from unchecked iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 311  : 		this->_Ptr = _Right;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 312  : 		return (*this);
; 313  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Rechecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV12@PAH@Z ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Rechecked
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Unchecked
; Function compile flags: /Ogtp
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Unchecked, COMDAT
; _this$ = ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 318  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Unchecked
_TEXT	ENDS
PUBLIC	??$move@AAU_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z ; std::move<_CS_SCHEDULE_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAU_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z PROC ; std::move<_CS_SCHEDULE_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z ENDP ; std::move<_CS_SCHEDULE_DATA &>
_TEXT	ENDS
PUBLIC	??$move@AAU_CS_NPC_DATA@@@std@@YA$$QAU_CS_NPC_DATA@@AAU1@@Z ; std::move<_CS_NPC_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAU_CS_NPC_DATA@@@std@@YA$$QAU_CS_NPC_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU_CS_NPC_DATA@@@std@@YA$$QAU_CS_NPC_DATA@@AAU1@@Z PROC ; std::move<_CS_NPC_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU_CS_NPC_DATA@@@std@@YA$$QAU_CS_NPC_DATA@@AAU1@@Z ENDP ; std::move<_CS_NPC_DATA &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAU_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@@Z ; std::_Val_type<_CS_SCHEDULE_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAU_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@@Z PROC ; std::_Val_type<_CS_SCHEDULE_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAU_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@@Z ENDP ; std::_Val_type<_CS_SCHEDULE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAU_CS_NPC_DATA@@@std@@YAPAU_CS_NPC_DATA@@PAU1@@Z ; std::_Val_type<_CS_NPC_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAU_CS_NPC_DATA@@@std@@YAPAU_CS_NPC_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU_CS_NPC_DATA@@@std@@YAPAU_CS_NPC_DATA@@PAU1@@Z PROC ; std::_Val_type<_CS_NPC_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAU_CS_NPC_DATA@@@std@@YAPAU_CS_NPC_DATA@@PAU1@@Z ENDP ; std::_Val_type<_CS_NPC_DATA *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAH@std@@YAPAHPAH@Z		; std::_Val_type<int *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi
  0000c	c1 f8 02	 sar	 eax, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 462  : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAU_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@@Z ; std::_Val_type<_CS_REG_GUILD_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAU_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@@Z PROC ; std::_Val_type<_CS_REG_GUILD_DATA *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAU_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@@Z ENDP ; std::_Val_type<_CS_REG_GUILD_DATA *>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$_Unchecked@PAU_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@@Z ; std::_Unchecked<_CS_SCHEDULE_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAU_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAU_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@@Z PROC ; std::_Unchecked<_CS_SCHEDULE_DATA *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 268  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAU_CS_SCHEDULE_DATA@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@@Z ENDP ; std::_Unchecked<_CS_SCHEDULE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAU_CS_SCHEDULE_DATA@@@std@@YAPAHPAU_CS_SCHEDULE_DATA@@@Z ; std::_Dist_type<_CS_SCHEDULE_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dist_type@PAU_CS_SCHEDULE_DATA@@@std@@YAPAHPAU_CS_SCHEDULE_DATA@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAU_CS_SCHEDULE_DATA@@@std@@YAPAHPAU_CS_SCHEDULE_DATA@@@Z PROC ; std::_Dist_type<_CS_SCHEDULE_DATA *>, COMDAT

; 850  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 851  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAU_CS_SCHEDULE_DATA@@@std@@YAPAHPAU_CS_SCHEDULE_DATA@@@Z ENDP ; std::_Dist_type<_CS_SCHEDULE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Unchecked@PAU_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@@Z ; std::_Unchecked<_CS_REG_GUILD_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Unchecked@PAU_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAU_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@@Z PROC ; std::_Unchecked<_CS_REG_GUILD_DATA *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 268  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAU_CS_REG_GUILD_DATA@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@@Z ENDP ; std::_Unchecked<_CS_REG_GUILD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAU_CS_REG_GUILD_DATA@@@std@@YAPAHPAU_CS_REG_GUILD_DATA@@@Z ; std::_Dist_type<_CS_REG_GUILD_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dist_type@PAU_CS_REG_GUILD_DATA@@@std@@YAPAHPAU_CS_REG_GUILD_DATA@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAU_CS_REG_GUILD_DATA@@@std@@YAPAHPAU_CS_REG_GUILD_DATA@@@Z PROC ; std::_Dist_type<_CS_REG_GUILD_DATA *>, COMDAT

; 850  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 851  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAU_CS_REG_GUILD_DATA@@@std@@YAPAHPAU_CS_REG_GUILD_DATA@@@Z ENDP ; std::_Dist_type<_CS_REG_GUILD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_CS_SCHEDULE_DATA@@@std@@YAXPAU_CS_SCHEDULE_DATA@@@Z ; std::_Destroy<_CS_SCHEDULE_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_CS_SCHEDULE_DATA@@@std@@YAXPAU_CS_SCHEDULE_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_CS_SCHEDULE_DATA@@@std@@YAXPAU_CS_SCHEDULE_DATA@@@Z PROC ; std::_Destroy<_CS_SCHEDULE_DATA>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 00		 push	 0
  0000c	ff d2		 call	 edx

; 64   : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@U_CS_SCHEDULE_DATA@@@std@@YAXPAU_CS_SCHEDULE_DATA@@@Z ENDP ; std::_Destroy<_CS_SCHEDULE_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_CS_NPC_DATA@@@std@@YAXPAU_CS_NPC_DATA@@@Z ; std::_Destroy<_CS_NPC_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@U_CS_NPC_DATA@@@std@@YAXPAU_CS_NPC_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_CS_NPC_DATA@@@std@@YAXPAU_CS_NPC_DATA@@@Z PROC ; std::_Destroy<_CS_NPC_DATA>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 00		 push	 0
  0000c	ff d2		 call	 edx

; 64   : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@U_CS_NPC_DATA@@@std@@YAXPAU_CS_NPC_DATA@@@Z ENDP ; std::_Destroy<_CS_NPC_DATA>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_CS_REG_GUILD_DATA@@@std@@YAXPAU_CS_REG_GUILD_DATA@@@Z ; std::_Destroy<_CS_REG_GUILD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@U_CS_REG_GUILD_DATA@@@std@@YAXPAU_CS_REG_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_CS_REG_GUILD_DATA@@@std@@YAXPAU_CS_REG_GUILD_DATA@@@Z PROC ; std::_Destroy<_CS_REG_GUILD_DATA>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 00		 push	 0
  0000c	ff d2		 call	 edx

; 64   : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy@U_CS_REG_GUILD_DATA@@@std@@YAXPAU_CS_REG_GUILD_DATA@@@Z ENDP ; std::_Destroy<_CS_REG_GUILD_DATA>
_TEXT	ENDS
PUBLIC	??$forward@AAPAU_CS_SCHEDULE_DATA@@@std@@YAAAPAU_CS_SCHEDULE_DATA@@AAPAU1@@Z ; std::forward<_CS_SCHEDULE_DATA * &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAU_CS_SCHEDULE_DATA@@@std@@YAAAPAU_CS_SCHEDULE_DATA@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU_CS_SCHEDULE_DATA@@@std@@YAAAPAU_CS_SCHEDULE_DATA@@AAPAU1@@Z PROC ; std::forward<_CS_SCHEDULE_DATA * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU_CS_SCHEDULE_DATA@@@std@@YAAAPAU_CS_SCHEDULE_DATA@@AAPAU1@@Z ENDP ; std::forward<_CS_SCHEDULE_DATA * &>
_TEXT	ENDS
PUBLIC	??$?0AAPAU_CS_SCHEDULE_DATA@@AAPAU0@@?$_Pair_base@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@QAE@AAPAU_CS_SCHEDULE_DATA@@0@Z ; std::_Pair_base<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>::_Pair_base<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *><_CS_SCHEDULE_DATA * &,_CS_SCHEDULE_DATA * &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAPAU_CS_SCHEDULE_DATA@@AAPAU0@@?$_Pair_base@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@QAE@AAPAU_CS_SCHEDULE_DATA@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU_CS_SCHEDULE_DATA@@AAPAU0@@?$_Pair_base@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@QAE@AAPAU_CS_SCHEDULE_DATA@@0@Z PROC ; std::_Pair_base<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>::_Pair_base<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *><_CS_SCHEDULE_DATA * &,_CS_SCHEDULE_DATA * &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAU_CS_SCHEDULE_DATA@@AAPAU0@@?$_Pair_base@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@QAE@AAPAU_CS_SCHEDULE_DATA@@0@Z ENDP ; std::_Pair_base<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>::_Pair_base<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *><_CS_SCHEDULE_DATA * &,_CS_SCHEDULE_DATA * &>
_TEXT	ENDS
PUBLIC	??$_Move@AAU_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z ; std::_Move<_CS_SCHEDULE_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@AAU_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAU_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z PROC ; std::_Move<_CS_SCHEDULE_DATA &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAU_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z ENDP ; std::_Move<_CS_SCHEDULE_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@AAPAU_CS_REG_GUILD_DATA@@@std@@YAAAPAU_CS_REG_GUILD_DATA@@AAPAU1@@Z ; std::forward<_CS_REG_GUILD_DATA * &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAPAU_CS_REG_GUILD_DATA@@@std@@YAAAPAU_CS_REG_GUILD_DATA@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU_CS_REG_GUILD_DATA@@@std@@YAAAPAU_CS_REG_GUILD_DATA@@AAPAU1@@Z PROC ; std::forward<_CS_REG_GUILD_DATA * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU_CS_REG_GUILD_DATA@@@std@@YAAAPAU_CS_REG_GUILD_DATA@@AAPAU1@@Z ENDP ; std::forward<_CS_REG_GUILD_DATA * &>
_TEXT	ENDS
PUBLIC	??$?0AAPAU_CS_REG_GUILD_DATA@@AAPAU0@@?$_Pair_base@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@QAE@AAPAU_CS_REG_GUILD_DATA@@0@Z ; std::_Pair_base<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>::_Pair_base<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *><_CS_REG_GUILD_DATA * &,_CS_REG_GUILD_DATA * &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAPAU_CS_REG_GUILD_DATA@@AAPAU0@@?$_Pair_base@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@QAE@AAPAU_CS_REG_GUILD_DATA@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU_CS_REG_GUILD_DATA@@AAPAU0@@?$_Pair_base@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@QAE@AAPAU_CS_REG_GUILD_DATA@@0@Z PROC ; std::_Pair_base<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>::_Pair_base<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *><_CS_REG_GUILD_DATA * &,_CS_REG_GUILD_DATA * &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAU_CS_REG_GUILD_DATA@@AAPAU0@@?$_Pair_base@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@QAE@AAPAU_CS_REG_GUILD_DATA@@0@Z ENDP ; std::_Pair_base<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>::_Pair_base<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *><_CS_REG_GUILD_DATA * &,_CS_REG_GUILD_DATA * &>
_TEXT	ENDS
PUBLIC	??$_Move@AAU_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z ; std::_Move<_CS_REG_GUILD_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@AAU_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAU_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z PROC ; std::_Move<_CS_REG_GUILD_DATA &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAU_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z ENDP ; std::_Move<_CS_REG_GUILD_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@U_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z ; std::forward<_CS_SCHEDULE_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z PROC ; std::forward<_CS_SCHEDULE_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_CS_SCHEDULE_DATA@@@std@@YA$$QAU_CS_SCHEDULE_DATA@@AAU1@@Z ENDP ; std::forward<_CS_SCHEDULE_DATA>
_TEXT	ENDS
PUBLIC	??$forward@U_CS_NPC_DATA@@@std@@YA$$QAU_CS_NPC_DATA@@AAU1@@Z ; std::forward<_CS_NPC_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U_CS_NPC_DATA@@@std@@YA$$QAU_CS_NPC_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_CS_NPC_DATA@@@std@@YA$$QAU_CS_NPC_DATA@@AAU1@@Z PROC ; std::forward<_CS_NPC_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_CS_NPC_DATA@@@std@@YA$$QAU_CS_NPC_DATA@@AAU1@@Z ENDP ; std::forward<_CS_NPC_DATA>
_TEXT	ENDS
PUBLIC	??$forward@U_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z ; std::forward<_CS_REG_GUILD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z PROC ; std::forward<_CS_REG_GUILD_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z ENDP ; std::forward<_CS_REG_GUILD_DATA>
_TEXT	ENDS
PUBLIC	??$forward@I@std@@YA$$QAIAAI@Z			; std::forward<unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@I@std@@YA$$QAIAAI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@I@std@@YA$$QAIAAI@Z PROC			; std::forward<unsigned int>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@I@std@@YA$$QAIAAI@Z ENDP			; std::forward<unsigned int>
_TEXT	ENDS
PUBLIC	??$?0IH@?$_Pair_base@$$CBIH@std@@QAE@$$QAI$$QAH@Z ; std::_Pair_base<unsigned int const ,int>::_Pair_base<unsigned int const ,int><unsigned int,int>
; Function compile flags: /Ogtp
;	COMDAT ??$?0IH@?$_Pair_base@$$CBIH@std@@QAE@$$QAI$$QAH@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0IH@?$_Pair_base@$$CBIH@std@@QAE@$$QAI$$QAH@Z PROC	; std::_Pair_base<unsigned int const ,int>::_Pair_base<unsigned int const ,int><unsigned int,int>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0IH@?$_Pair_base@$$CBIH@std@@QAE@$$QAI$$QAH@Z ENDP	; std::_Pair_base<unsigned int const ,int>::_Pair_base<unsigned int const ,int><unsigned int,int>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Push_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Push_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z PROC ; std::_Push_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 2455 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2456 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Hole$[ebp]
  00007	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0000a	99		 cdq
  0000b	2b c2		 sub	 eax, edx
  0000d	57		 push	 edi
  0000e	8b f8		 mov	 edi, eax
  00010	d1 ff		 sar	 edi, 1

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  00012	39 5d 10	 cmp	 DWORD PTR __Top$[ebp], ebx
  00015	7d 6c		 jge	 SHORT $LN1@Push_heap
  00017	56		 push	 esi
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@Push_heap:
  00020	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00023	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  00026	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  0002d	2b c7		 sub	 eax, edi
  0002f	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  00032	52		 push	 edx
  00033	56		 push	 esi
  00034	ff 55 18	 call	 DWORD PTR __Pred$[ebp]
  00037	83 c4 08	 add	 esp, 8
  0003a	84 c0		 test	 al, al
  0003c	74 44		 je	 SHORT $LN16@Push_heap

; 2459 : 		{	// move _Hole up to parent
; 2460 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0003e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00041	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00044	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
  0004b	2b c3		 sub	 eax, ebx
  0004d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00050	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00053	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00056	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00059	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0005c	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0005f	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00062	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00065	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00068	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0006b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0006e	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00071	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00074	99		 cdq
  00075	2b c2		 sub	 eax, edx

; 2461 : 		_Hole = _Idx;

  00077	8b df		 mov	 ebx, edi
  00079	d1 f8		 sar	 eax, 1
  0007b	8b f8		 mov	 edi, eax
  0007d	39 5d 10	 cmp	 DWORD PTR __Top$[ebp], ebx
  00080	7c 9e		 jl	 SHORT $LL3@Push_heap
$LN16@Push_heap:
  00082	5e		 pop	 esi
$LN1@Push_heap:

; 2462 : 		}
; 2463 : 
; 2464 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  00083	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00086	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00089	8d 14 dd 00 00
	00 00		 lea	 edx, DWORD PTR [ebx*8]
  00090	2b d3		 sub	 edx, ebx
  00092	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00095	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00098	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0009b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0009e	89 50 08	 mov	 DWORD PTR [eax+8], edx
  000a1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000a4	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  000a7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000aa	89 50 10	 mov	 DWORD PTR [eax+16], edx
  000ad	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b0	89 50 14	 mov	 DWORD PTR [eax+20], edx
  000b3	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  000b6	5f		 pop	 edi
  000b7	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  000ba	5b		 pop	 ebx

; 2465 : 	}

  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
??$_Push_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ENDP ; std::_Push_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>, COMDAT

; 2617 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2618 : 	while (_First != _Last)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	3b d0		 cmp	 edx, eax
  0000b	74 3a		 je	 SHORT $LN11@Move_backw
  0000d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00010	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00013	56		 push	 esi
$LL2@Move_backw:

; 2619 : 		*--_Dest = _STD move(*--_Last);

  00014	8b 71 e0	 mov	 esi, DWORD PTR [ecx-32]
  00017	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  0001a	83 e8 1c	 sub	 eax, 28			; 0000001cH
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00020	8b 31		 mov	 esi, DWORD PTR [ecx]
  00022	89 70 08	 mov	 DWORD PTR [eax+8], esi
  00025	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00028	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  0002b	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0002e	89 70 10	 mov	 DWORD PTR [eax+16], esi
  00031	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00034	89 70 14	 mov	 DWORD PTR [eax+20], esi
  00037	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  0003a	89 70 18	 mov	 DWORD PTR [eax+24], esi
  0003d	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00040	3b f2		 cmp	 esi, edx
  00042	75 d0		 jne	 SHORT $LL2@Move_backw
  00044	5e		 pop	 esi

; 2621 : 	}

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN11@Move_backw:

; 2620 : 	return (_Dest);

  00047	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2621 : 	}

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??$_Move_backward@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
_TEXT	ENDS
PUBLIC	??$forward@U_CS_MINIMAP_DATA@@@std@@YA$$QAU_CS_MINIMAP_DATA@@AAU1@@Z ; std::forward<_CS_MINIMAP_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@U_CS_MINIMAP_DATA@@@std@@YA$$QAU_CS_MINIMAP_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_CS_MINIMAP_DATA@@@std@@YA$$QAU_CS_MINIMAP_DATA@@AAU1@@Z PROC ; std::forward<_CS_MINIMAP_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_CS_MINIMAP_DATA@@@std@@YA$$QAU_CS_MINIMAP_DATA@@AAU1@@Z ENDP ; std::forward<_CS_MINIMAP_DATA>
_TEXT	ENDS
PUBLIC	??$?0HU_CS_MINIMAP_DATA@@@?$_Pair_base@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@$$QAH$$QAU_CS_MINIMAP_DATA@@@Z ; std::_Pair_base<int const ,_CS_MINIMAP_DATA>::_Pair_base<int const ,_CS_MINIMAP_DATA><int,_CS_MINIMAP_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$?0HU_CS_MINIMAP_DATA@@@?$_Pair_base@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@$$QAH$$QAU_CS_MINIMAP_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HU_CS_MINIMAP_DATA@@@?$_Pair_base@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@$$QAH$$QAU_CS_MINIMAP_DATA@@@Z PROC ; std::_Pair_base<int const ,_CS_MINIMAP_DATA>::_Pair_base<int const ,_CS_MINIMAP_DATA><int,_CS_MINIMAP_DATA>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00016	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00019	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001f	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00022	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00025	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00028	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0002e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00031	56		 push	 esi
  00032	57		 push	 edi
  00033	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00036	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00039	8d 71 1c	 lea	 esi, DWORD PTR [ecx+28]
  0003c	8d 78 20	 lea	 edi, DWORD PTR [eax+32]
  0003f	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00044	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00047	f3 a5		 rep movsd
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 164  : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
??$?0HU_CS_MINIMAP_DATA@@@?$_Pair_base@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@$$QAH$$QAU_CS_MINIMAP_DATA@@@Z ENDP ; std::_Pair_base<int const ,_CS_MINIMAP_DATA>::_Pair_base<int const ,_CS_MINIMAP_DATA><int,_CS_MINIMAP_DATA>
_TEXT	ENDS
PUBLIC	??$forward@U_CS_TOTAL_GUILD_DATA@@@std@@YA$$QAU_CS_TOTAL_GUILD_DATA@@AAU1@@Z ; std::forward<_CS_TOTAL_GUILD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U_CS_TOTAL_GUILD_DATA@@@std@@YA$$QAU_CS_TOTAL_GUILD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_CS_TOTAL_GUILD_DATA@@@std@@YA$$QAU_CS_TOTAL_GUILD_DATA@@AAU1@@Z PROC ; std::forward<_CS_TOTAL_GUILD_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_CS_TOTAL_GUILD_DATA@@@std@@YA$$QAU_CS_TOTAL_GUILD_DATA@@AAU1@@Z ENDP ; std::forward<_CS_TOTAL_GUILD_DATA>
_TEXT	ENDS
PUBLIC	??$move@AAU_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z ; std::move<_CS_REG_GUILD_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAU_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z PROC ; std::move<_CS_REG_GUILD_DATA &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU_CS_REG_GUILD_DATA@@@std@@YA$$QAU_CS_REG_GUILD_DATA@@AAU1@@Z ENDP ; std::move<_CS_REG_GUILD_DATA &>
_TEXT	ENDS
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8a 5d 08	 mov	 bl, BYTE PTR ___flags$[ebp]
  0002e	f6 c3 02	 test	 bl, 2
  00031	74 3b		 je	 SHORT $LN3@vector
  00033	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00036	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  0003b	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003e	50		 push	 eax
  0003f	68 40 27 00 00	 push	 10048			; 00002740H
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0004a	f6 c3 01	 test	 bl, 1
  0004d	74 09		 je	 SHORT $LN2@vector
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00055	83 c4 04	 add	 esp, 4
$LN2@vector:
  00058	8b c7		 mov	 eax, edi
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN3@vector:
  0006e	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  00080	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00092	f6 c3 01	 test	 bl, 1
  00095	74 09		 je	 SHORT $LN1@vector
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009d	83 c4 04	 add	 esp, 4
$LN1@vector:
  000a0	8b c6		 mov	 eax, esi
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0_CS_SCHEDULE_DATA@@QAE@XZ			; _CS_SCHEDULE_DATA::_CS_SCHEDULE_DATA
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
;	COMDAT ??0_CS_SCHEDULE_DATA@@QAE@XZ
_TEXT	SEGMENT
??0_CS_SCHEDULE_DATA@@QAE@XZ PROC			; _CS_SCHEDULE_DATA::_CS_SCHEDULE_DATA, COMDAT
; _this$ = ecx

; 48   : 	_CS_SCHEDULE_DATA()

  00000	8b c1		 mov	 eax, ecx

; 49   : 	{
; 50   : 		this->Clear();

  00002	83 c9 ff	 or	 ecx, -1
  00005	33 d2		 xor	 edx, edx
  00007	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00010	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00013	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00016	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00019	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0001c	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 51   : 	};

  0001f	c3		 ret	 0
??0_CS_SCHEDULE_DATA@@QAE@XZ ENDP			; _CS_SCHEDULE_DATA::_CS_SCHEDULE_DATA
_TEXT	ENDS
PUBLIC	??0_CS_NPC_DATA@@QAE@XZ				; _CS_NPC_DATA::_CS_NPC_DATA
; Function compile flags: /Ogtp
;	COMDAT ??0_CS_NPC_DATA@@QAE@XZ
_TEXT	SEGMENT
??0_CS_NPC_DATA@@QAE@XZ PROC				; _CS_NPC_DATA::_CS_NPC_DATA, COMDAT
; _this$ = ecx

; 68   : 	_CS_NPC_DATA()

  00000	8b c1		 mov	 eax, ecx

; 69   : 	{
; 70   : 		Clear();

  00002	83 c9 ff	 or	 ecx, -1
  00005	33 d2		 xor	 edx, edx
  00007	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_NPC_DATA@@6B@
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00010	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00013	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00016	89 50 68	 mov	 DWORD PTR [eax+104], edx
  00019	89 48 6c	 mov	 DWORD PTR [eax+108], ecx
  0001c	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0001f	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00022	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00025	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00028	89 50 20	 mov	 DWORD PTR [eax+32], edx
  0002b	89 50 24	 mov	 DWORD PTR [eax+36], edx
  0002e	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00031	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00034	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00037	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  0003a	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  0003d	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  00040	89 50 40	 mov	 DWORD PTR [eax+64], edx
  00043	89 50 44	 mov	 DWORD PTR [eax+68], edx
  00046	89 50 48	 mov	 DWORD PTR [eax+72], edx
  00049	89 50 4c	 mov	 DWORD PTR [eax+76], edx
  0004c	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  0004f	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  00052	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  00055	89 48 5c	 mov	 DWORD PTR [eax+92], ecx
  00058	89 48 60	 mov	 DWORD PTR [eax+96], ecx
  0005b	89 50 70	 mov	 DWORD PTR [eax+112], edx

; 71   : 		m_iCS_GATE_LEVER_INDEX = -1;

  0005e	89 48 64	 mov	 DWORD PTR [eax+100], ecx

; 72   : 	};

  00061	c3		 ret	 0
??0_CS_NPC_DATA@@QAE@XZ ENDP				; _CS_NPC_DATA::_CS_NPC_DATA
_TEXT	ENDS
PUBLIC	??0_CS_TOTAL_GUILD_DATA@@QAE@XZ			; _CS_TOTAL_GUILD_DATA::_CS_TOTAL_GUILD_DATA
; Function compile flags: /Ogtp
;	COMDAT ??0_CS_TOTAL_GUILD_DATA@@QAE@XZ
_TEXT	SEGMENT
??0_CS_TOTAL_GUILD_DATA@@QAE@XZ PROC			; _CS_TOTAL_GUILD_DATA::_CS_TOTAL_GUILD_DATA, COMDAT
; _this$ = ecx

; 198  : 	_CS_TOTAL_GUILD_DATA()

  00000	8b c1		 mov	 eax, ecx

; 199  : 	{
; 200  : 		this->Clear();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0000a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00010	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 201  : 	};

  00013	c3		 ret	 0
??0_CS_TOTAL_GUILD_DATA@@QAE@XZ ENDP			; _CS_TOTAL_GUILD_DATA::_CS_TOTAL_GUILD_DATA
_TEXT	ENDS
PUBLIC	??0_CS_MINIMAP_DATA@@QAE@XZ			; _CS_MINIMAP_DATA::_CS_MINIMAP_DATA
; Function compile flags: /Ogtp
;	COMDAT ??0_CS_MINIMAP_DATA@@QAE@XZ
_TEXT	SEGMENT
??0_CS_MINIMAP_DATA@@QAE@XZ PROC			; _CS_MINIMAP_DATA::_CS_MINIMAP_DATA, COMDAT
; _this$ = ecx

; 224  : 	{
; 225  : 		this->Clear();

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  0000b	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  00012	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00015	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00018	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0001b	68 d0 07 00 00	 push	 2000			; 000007d0H
  00020	50		 push	 eax
  00021	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00024	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _memset
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00030	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 226  : 	};

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	c3		 ret	 0
??0_CS_MINIMAP_DATA@@QAE@XZ ENDP			; _CS_MINIMAP_DATA::_CS_MINIMAP_DATA
_TEXT	ENDS
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_0GE@MEAHOCFO@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0KA@DFFDLLM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0HI@PAMLLDOB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0BH@OMDOIGP@CastleStateStartMinute?$AA@	; `string'
PUBLIC	??_C@_0BF@DCMLMAGN@CastleStateStartHour?$AA@	; `string'
PUBLIC	??_C@_0BE@EBFKEDIC@CastleStateStartDay?$AA@	; `string'
PUBLIC	??_C@_0BG@ENENAKBF@CastleStateStartMonth?$AA@	; `string'
PUBLIC	??_C@_0BF@BLNJJFJH@CastleStateStartYear?$AA@	; `string'
PUBLIC	??_C@_0BE@KMBFCGLK@CastleSpecificState?$AA@	; `string'
PUBLIC	??_C@_0BE@JIMKKEIB@CastleCycleStartDay?$AA@	; `string'
PUBLIC	??_C@_0BG@FIAOPHJN@CastleCycleStartMonth?$AA@	; `string'
PUBLIC	??_C@_0BF@ICAJFEMK@CastleCycleStartYear?$AA@	; `string'
PUBLIC	??_C@_0P@EMJDPFDH@GameServerInfo?$AA@		; `string'
PUBLIC	??_C@_0P@HOJMKLEM@CastleSiegeRun?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LoadPreFixData@CCastleSiege@@QAEHPAD@Z		; CCastleSiege::LoadPreFixData
EXTRN	__imp__WritePrivateProfileStringA@16:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GE@MEAHOCFO@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0GE@MEAHOCFO@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadPreFixData() - FIX STATE ''CASTLESIE'
	DB	'GE_STATE_ENDSIEGE'' CAN''T BE USED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0KA@DFFDLLM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0KA@DFFDLLM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[CastleS'
	DB	'iege] CCastleSiege::LoadPreFixData() - iSIEGE_DATE_NUM64 (STA'
	DB	'TE:%d, %04d-%02d-%02d %02d:%02d:%02d) <= iTODAY_DATE_NUM64 (%'
	DB	'04d-%02d-%02d %02d:%02d:%02d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HI@PAMLLDOB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0HI@PAMLLDOB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadPreFixData() - iEVENT_END_DATE_NUM ('
	DB	'%04d-%02d-%02d) <= iTODAY_DATE_NUM (%04d-%02d-%02d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OMDOIGP@CastleStateStartMinute?$AA@
CONST	SEGMENT
??_C@_0BH@OMDOIGP@CastleStateStartMinute?$AA@ DB 'CastleStateStartMinute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DCMLMAGN@CastleStateStartHour?$AA@
CONST	SEGMENT
??_C@_0BF@DCMLMAGN@CastleStateStartHour?$AA@ DB 'CastleStateStartHour', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EBFKEDIC@CastleStateStartDay?$AA@
CONST	SEGMENT
??_C@_0BE@EBFKEDIC@CastleStateStartDay?$AA@ DB 'CastleStateStartDay', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ENENAKBF@CastleStateStartMonth?$AA@
CONST	SEGMENT
??_C@_0BG@ENENAKBF@CastleStateStartMonth?$AA@ DB 'CastleStateStartMonth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BLNJJFJH@CastleStateStartYear?$AA@
CONST	SEGMENT
??_C@_0BF@BLNJJFJH@CastleStateStartYear?$AA@ DB 'CastleStateStartYear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KMBFCGLK@CastleSpecificState?$AA@
CONST	SEGMENT
??_C@_0BE@KMBFCGLK@CastleSpecificState?$AA@ DB 'CastleSpecificState', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JIMKKEIB@CastleCycleStartDay?$AA@
CONST	SEGMENT
??_C@_0BE@JIMKKEIB@CastleCycleStartDay?$AA@ DB 'CastleCycleStartDay', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FIAOPHJN@CastleCycleStartMonth?$AA@
CONST	SEGMENT
??_C@_0BG@FIAOPHJN@CastleCycleStartMonth?$AA@ DB 'CastleCycleStartMonth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ICAJFEMK@CastleCycleStartYear?$AA@
CONST	SEGMENT
??_C@_0BF@ICAJFEMK@CastleCycleStartYear?$AA@ DB 'CastleCycleStartYear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
CONST	SEGMENT
??_C@_0P@EMJDPFDH@GameServerInfo?$AA@ DB 'GameServerInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HOJMKLEM@CastleSiegeRun?$AA@
CONST	SEGMENT
??_C@_0P@HOJMKLEM@CastleSiegeRun?$AA@ DB 'CastleSiegeRun', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadPreFixData@CCastleSiege@@QAEHPAD@Z
_TEXT	SEGMENT
tv685 = -52						; size = 4
_iTODAY_DATE_NUM64$ = -48				; size = 8
tv691 = -40						; size = 4
tv617 = -40						; size = 4
_tmEndDate$183498 = -36					; size = 16
tv327 = -28						; size = 8
tv687 = -24						; size = 4
_tmToDay$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpszFileName$ = 8					; size = 4
?LoadPreFixData@CCastleSiege@@QAEHPAD@Z PROC		; CCastleSiege::LoadPreFixData, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _lpszFileName$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 191  : 	if(lpszFileName == 0)

  00017	85 ff		 test	 edi, edi
  00019	75 14		 jne	 SHORT $LN19@LoadPreFix

; 192  : 		return false;

  0001b	5f		 pop	 edi
  0001c	33 c0		 xor	 eax, eax
  0001e	5e		 pop	 esi

; 297  : }

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00022	33 cd		 xor	 ecx, ebp
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN19@LoadPreFix:
  0002f	53		 push	 ebx

; 193  : 
; 194  : 	_SYSTEMTIME tmToDay;
; 195  : 
; 196  : 	GetLocalTime(&tmToDay);

  00030	8d 45 ec	 lea	 eax, DWORD PTR _tmToDay$[ebp]
  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 197  : 
; 198  : 	int iTODAY_DATE_NUM = MACRO2(( MACRO1(tmToDay.wDay) | MACRO1(tmToDay.wMonth) << 8 ) & 0xFFFF ) | MACRO2(tmToDay.wYear) << 16;

  0003a	0f b7 55 ec	 movzx	 edx, WORD PTR _tmToDay$[ebp]
  0003e	0f b6 4d ee	 movzx	 ecx, BYTE PTR _tmToDay$[ebp+2]
  00042	0f b6 45 f2	 movzx	 eax, BYTE PTR _tmToDay$[ebp+6]
  00046	c1 e2 08	 shl	 edx, 8
  00049	0b ca		 or	 ecx, edx

; 199  : 	__int64 iTODAY_DATE_NUM64 = (MACRO2(tmToDay.wMinute) | MACRO2(tmToDay.wHour) << 16) | ((__int64)(MACRO2(( MACRO1(tmToDay.wDay) | MACRO1(tmToDay.wMonth) << 8 ) & 0xFFFF ) | MACRO2(tmToDay.wYear) << 16) << 0x20);

  0004b	0f b7 55 f6	 movzx	 edx, WORD PTR _tmToDay$[ebp+10]
  0004f	c1 e1 08	 shl	 ecx, 8
  00052	0b c8		 or	 ecx, eax
  00054	0f b7 45 f4	 movzx	 eax, WORD PTR _tmToDay$[ebp+8]
  00058	c1 e0 10	 shl	 eax, 16			; 00000010H
  0005b	0b c2		 or	 eax, edx
  0005d	99		 cdq
  0005e	8b d8		 mov	 ebx, eax

; 200  : 
; 201  : 	m_bCastleSiegeEnable = GetPrivateProfileInt("GameServerInfo","CastleSiegeRun",1,lpszFileName);

  00060	57		 push	 edi
  00061	89 55 e8	 mov	 DWORD PTR tv327[ebp+4], edx
  00064	8b c1		 mov	 eax, ecx
  00066	89 4d d8	 mov	 DWORD PTR tv617[ebp], ecx
  00069	99		 cdq
  0006a	8b 55 e8	 mov	 edx, DWORD PTR tv327[ebp+4]
  0006d	33 c9		 xor	 ecx, ecx
  0006f	6a 01		 push	 1
  00071	0b d9		 or	 ebx, ecx
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HOJMKLEM@CastleSiegeRun?$AA@
  00078	0b d0		 or	 edx, eax
  0007a	89 5d d0	 mov	 DWORD PTR _iTODAY_DATE_NUM64$[ebp], ebx
  0007d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetPrivateProfileIntA@16
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00088	89 55 d4	 mov	 DWORD PTR _iTODAY_DATE_NUM64$[ebp+4], edx
  0008b	ff d3		 call	 ebx

; 202  : 	m_tmFixCastleCycleStartDate.wYear = GetPrivateProfileInt("GameServerInfo","CastleCycleStartYear",0,lpszFileName);

  0008d	57		 push	 edi
  0008e	6a 00		 push	 0
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ICAJFEMK@CastleCycleStartYear?$AA@
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0009a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0009d	ff d3		 call	 ebx

; 203  : 	m_tmFixCastleCycleStartDate.wMonth = GetPrivateProfileInt("GameServerInfo","CastleCycleStartMonth",0,lpszFileName);

  0009f	57		 push	 edi
  000a0	6a 00		 push	 0
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FIAOPHJN@CastleCycleStartMonth?$AA@
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000ac	66 89 46 40	 mov	 WORD PTR [esi+64], ax
  000b0	ff d3		 call	 ebx

; 204  : 	m_tmFixCastleCycleStartDate.wDay = GetPrivateProfileInt("GameServerInfo","CastleCycleStartDay",0,lpszFileName);

  000b2	57		 push	 edi
  000b3	6a 00		 push	 0
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JIMKKEIB@CastleCycleStartDay?$AA@
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000bf	66 89 46 42	 mov	 WORD PTR [esi+66], ax
  000c3	ff d3		 call	 ebx

; 205  : 
; 206  : 	m_iFixCastleSpecificState = GetPrivateProfileInt("GameServerInfo","CastleSpecificState",0,lpszFileName);

  000c5	57		 push	 edi
  000c6	6a 00		 push	 0
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KMBFCGLK@CastleSpecificState?$AA@
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000d2	66 89 46 46	 mov	 WORD PTR [esi+70], ax
  000d6	ff d3		 call	 ebx

; 207  : 
; 208  : 	m_tmFixCastleStateStartDate.wYear = GetPrivateProfileInt("GameServerInfo","CastleStateStartYear",0,lpszFileName);

  000d8	57		 push	 edi
  000d9	6a 00		 push	 0
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BLNJJFJH@CastleStateStartYear?$AA@
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000e5	89 46 50	 mov	 DWORD PTR [esi+80], eax
  000e8	ff d3		 call	 ebx

; 209  : 	m_tmFixCastleStateStartDate.wMonth = GetPrivateProfileInt("GameServerInfo","CastleStateStartMonth",0,lpszFileName);

  000ea	57		 push	 edi
  000eb	6a 00		 push	 0
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@ENENAKBF@CastleStateStartMonth?$AA@
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000f7	66 89 46 58	 mov	 WORD PTR [esi+88], ax
  000fb	ff d3		 call	 ebx

; 210  : 	m_tmFixCastleStateStartDate.wDay = GetPrivateProfileInt("GameServerInfo","CastleStateStartDay",0,lpszFileName);

  000fd	57		 push	 edi
  000fe	6a 00		 push	 0
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EBFKEDIC@CastleStateStartDay?$AA@
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0010a	66 89 46 5a	 mov	 WORD PTR [esi+90], ax
  0010e	ff d3		 call	 ebx

; 211  : 	m_tmFixCastleStateStartDate.wHour = GetPrivateProfileInt("GameServerInfo","CastleStateStartHour",0,lpszFileName);

  00110	57		 push	 edi
  00111	6a 00		 push	 0
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DCMLMAGN@CastleStateStartHour?$AA@
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0011d	66 89 46 5e	 mov	 WORD PTR [esi+94], ax
  00121	ff d3		 call	 ebx

; 212  : 	m_tmFixCastleStateStartDate.wMinute = GetPrivateProfileInt("GameServerInfo","CastleStateStartMinute",0,lpszFileName);

  00123	57		 push	 edi
  00124	6a 00		 push	 0
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OMDOIGP@CastleStateStartMinute?$AA@
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00130	66 89 46 60	 mov	 WORD PTR [esi+96], ax
  00134	ff d3		 call	 ebx

; 213  : 
; 214  : 	if(m_tmFixCastleCycleStartDate.wYear == 0
; 215  : 		|| m_tmFixCastleCycleStartDate.wMonth == 0
; 216  : 		|| m_tmFixCastleCycleStartDate.wDay == 0)

  00136	33 db		 xor	 ebx, ebx
  00138	66 89 46 62	 mov	 WORD PTR [esi+98], ax
  0013c	66 39 5e 40	 cmp	 WORD PTR [esi+64], bx
  00140	0f 84 c1 00 00
	00		 je	 $LN17@LoadPreFix
  00146	66 39 5e 42	 cmp	 WORD PTR [esi+66], bx
  0014a	0f 84 b7 00 00
	00		 je	 $LN17@LoadPreFix
  00150	66 39 5e 46	 cmp	 WORD PTR [esi+70], bx
  00154	0f 84 ad 00 00
	00		 je	 $LN17@LoadPreFix

; 219  : 	}
; 220  : 	else
; 221  : 	{
; 222  : 		_SYSTEMTIME tmEndDate = m_tmFixCastleCycleStartDate;

  0015a	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0015d	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00160	8b 46 40	 mov	 eax, DWORD PTR [esi+64]

; 223  : 		GetNextDay(&tmEndDate,m_iCastleSiegeCycle,0,0,0);

  00163	53		 push	 ebx
  00164	53		 push	 ebx
  00165	89 4d e0	 mov	 DWORD PTR _tmEndDate$183498[ebp+4], ecx
  00168	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0016b	53		 push	 ebx
  0016c	89 55 e4	 mov	 DWORD PTR _tmEndDate$183498[ebp+8], edx
  0016f	51		 push	 ecx
  00170	89 45 dc	 mov	 DWORD PTR _tmEndDate$183498[ebp], eax
  00173	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00176	8d 55 dc	 lea	 edx, DWORD PTR _tmEndDate$183498[ebp]
  00179	52		 push	 edx
  0017a	8b ce		 mov	 ecx, esi
  0017c	89 45 e8	 mov	 DWORD PTR _tmEndDate$183498[ebp+12], eax
  0017f	e8 00 00 00 00	 call	 ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay
  00184	0f b7 45 de	 movzx	 eax, WORD PTR _tmEndDate$183498[ebp+2]
  00188	0f b7 4d dc	 movzx	 ecx, WORD PTR _tmEndDate$183498[ebp]

; 224  : 
; 225  : 		int iEVENT_END_DATE_NUM = MACRO2(( MACRO1(tmEndDate.wDay) | MACRO1(tmEndDate.wMonth) << 8 ) & 0xFFFF ) | MACRO2(tmEndDate.wYear) << 16;
; 226  : 
; 227  : 		if(iEVENT_END_DATE_NUM <= iTODAY_DATE_NUM)

  0018c	8b d8		 mov	 ebx, eax
  0018e	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00194	8b d1		 mov	 edx, ecx
  00196	c1 e2 08	 shl	 edx, 8
  00199	0b da		 or	 ebx, edx
  0019b	0f b7 55 e2	 movzx	 edx, WORD PTR _tmEndDate$183498[ebp+6]
  0019f	c1 e3 08	 shl	 ebx, 8
  001a2	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001a8	0b da		 or	 ebx, edx
  001aa	3b 5d d8	 cmp	 ebx, DWORD PTR tv617[ebp]
  001ad	7f 2a		 jg	 SHORT $LN15@LoadPreFix

; 228  : 		{
; 229  : 			m_bFixCastleCycleStartDate = 0;
; 230  : 			MsgBox("[CastleSiege] CCastleSiege::LoadPreFixData() - iEVENT_END_DATE_NUM (%04d-%02d-%02d) <= iTODAY_DATE_NUM (%04d-%02d-%02d)",
; 231  : 				tmEndDate.wYear,tmEndDate.wMonth,tmEndDate.wDay,tmToDay.wYear,tmToDay.wMonth,tmToDay.wDay);

  001af	0f b7 55 f2	 movzx	 edx, WORD PTR _tmToDay$[ebp+6]
  001b3	52		 push	 edx
  001b4	0f b7 55 ee	 movzx	 edx, WORD PTR _tmToDay$[ebp+2]
  001b8	52		 push	 edx
  001b9	0f b7 55 ec	 movzx	 edx, WORD PTR _tmToDay$[ebp]
  001bd	52		 push	 edx
  001be	0f b7 55 e2	 movzx	 edx, WORD PTR _tmEndDate$183498[ebp+6]
  001c2	52		 push	 edx
  001c3	50		 push	 eax
  001c4	51		 push	 ecx
  001c5	33 db		 xor	 ebx, ebx
  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_0HI@PAMLLDOB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  001cc	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  001cf	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001d4	83 c4 1c	 add	 esp, 28			; 0000001cH

; 232  : 		}
; 233  : 		else

  001d7	eb 09		 jmp	 SHORT $LN14@LoadPreFix
$LN15@LoadPreFix:

; 234  : 		{
; 235  : 			m_bFixCastleCycleStartDate = 1;

  001d9	c7 46 3c 01 00
	00 00		 mov	 DWORD PTR [esi+60], 1
  001e0	33 db		 xor	 ebx, ebx
$LN14@LoadPreFix:

; 236  : 		}
; 237  : 
; 238  : 		if(MONTH_MACRO(m_tmFixCastleCycleStartDate.wMonth) == FALSE
; 239  : 		|| DAY_MACRO(m_tmFixCastleCycleStartDate.wDay) == FALSE)

  001e2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001e7	66 3b 46 42	 cmp	 ax, WORD PTR [esi+66]
  001eb	1b c0		 sbb	 eax, eax
  001ed	40		 inc	 eax
  001ee	3b c3		 cmp	 eax, ebx
  001f0	74 15		 je	 SHORT $LN17@LoadPreFix
  001f2	0f b7 46 46	 movzx	 eax, WORD PTR [esi+70]
  001f6	48		 dec	 eax
  001f7	3b c3		 cmp	 eax, ebx
  001f9	7c 0c		 jl	 SHORT $LN17@LoadPreFix
  001fb	33 c9		 xor	 ecx, ecx
  001fd	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00200	0f 9e c1	 setle	 cl
  00203	3b cb		 cmp	 ecx, ebx
  00205	75 03		 jne	 SHORT $LN35@LoadPreFix
$LN17@LoadPreFix:

; 217  : 	{
; 218  : 		m_bFixCastleCycleStartDate = 0;

  00207	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
$LN35@LoadPreFix:

; 240  : 		{
; 241  : 			m_bFixCastleCycleStartDate = 0;
; 242  : 		}
; 243  : 	}
; 244  : 
; 245  : 	if(m_tmFixCastleStateStartDate.wYear == 0
; 246  : 		|| m_tmFixCastleStateStartDate.wMonth == 0
; 247  : 		|| m_tmFixCastleStateStartDate.wDay == 0)

  0020a	0f b7 4e 58	 movzx	 ecx, WORD PTR [esi+88]
  0020e	66 3b cb	 cmp	 cx, bx
  00211	0f 84 24 01 00
	00		 je	 $LN10@LoadPreFix
  00217	0f b7 46 5a	 movzx	 eax, WORD PTR [esi+90]
  0021b	66 3b c3	 cmp	 ax, bx
  0021e	0f 84 17 01 00
	00		 je	 $LN10@LoadPreFix
  00224	0f b7 56 5e	 movzx	 edx, WORD PTR [esi+94]
  00228	66 3b d3	 cmp	 dx, bx
  0022b	0f 84 0a 01 00
	00		 je	 $LN10@LoadPreFix

; 250  : 	}
; 251  : 	else if(m_iFixCastleSpecificState < 1 || m_iFixCastleSpecificState > 9)

  00231	8b 5e 50	 mov	 ebx, DWORD PTR [esi+80]
  00234	83 fb 01	 cmp	 ebx, 1
  00237	0f 8c c2 01 00
	00		 jl	 $LN7@LoadPreFix
  0023d	83 fb 09	 cmp	 ebx, 9
  00240	0f 8f b9 01 00
	00		 jg	 $LN7@LoadPreFix
  00246	89 45 cc	 mov	 DWORD PTR tv685[ebp], eax

; 256  : 	{
; 257  : 		__int64 iSIEGE_DATE_NUM64 = (MACRO2(m_tmFixCastleStateStartDate.wMinute) | MACRO2(m_tmFixCastleStateStartDate.wHour) << 16) | ((__int64)(MACRO2(( MACRO1(m_tmFixCastleStateStartDate.wDay) | MACRO1(m_tmFixCastleStateStartDate.wMonth) << 8 ) & 0xFFFF ) | MACRO2(m_tmFixCastleStateStartDate.wYear) << 16) << 0x20);
; 258  : 
; 259  : 		if(iSIEGE_DATE_NUM64 <= iTODAY_DATE_NUM64)

  00249	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0024e	89 4d e8	 mov	 DWORD PTR tv687[ebp], ecx
  00251	c1 e1 08	 shl	 ecx, 8
  00254	0b c1		 or	 eax, ecx
  00256	c1 e0 08	 shl	 eax, 8
  00259	89 55 d8	 mov	 DWORD PTR tv691[ebp], edx
  0025c	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00262	0b c2		 or	 eax, edx
  00264	99		 cdq
  00265	0f b7 56 62	 movzx	 edx, WORD PTR [esi+98]
  00269	8b c8		 mov	 ecx, eax
  0026b	0f b7 46 60	 movzx	 eax, WORD PTR [esi+96]
  0026f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00272	0b c2		 or	 eax, edx
  00274	99		 cdq
  00275	33 db		 xor	 ebx, ebx
  00277	0b ca		 or	 ecx, edx
  00279	0b d8		 or	 ebx, eax
  0027b	3b 4d d4	 cmp	 ecx, DWORD PTR _iTODAY_DATE_NUM64$[ebp+4]
  0027e	7f 58		 jg	 SHORT $LN5@LoadPreFix
  00280	7c 05		 jl	 SHORT $LN34@LoadPreFix
  00282	3b 5d d0	 cmp	 ebx, DWORD PTR _iTODAY_DATE_NUM64$[ebp]
  00285	77 51		 ja	 SHORT $LN5@LoadPreFix
$LN34@LoadPreFix:

; 260  : 		{
; 261  : 			m_bFixCastleStateStartDate = 0;
; 262  : 			MsgBox("[CastleSiege] CCastleSiege::LoadPreFixData() - iSIEGE_DATE_NUM64 (STATE:%d, %04d-%02d-%02d %02d:%02d:%02d) <= iTODAY_DATE_NUM64 (%04d-%02d-%02d %02d:%02d:%02d)",
; 263  : 				m_iFixCastleSpecificState,m_tmFixCastleStateStartDate.wYear,m_tmFixCastleStateStartDate.wMonth,m_tmFixCastleStateStartDate.wDay,m_tmFixCastleStateStartDate.wHour,m_tmFixCastleStateStartDate.wMinute,m_tmFixCastleStateStartDate.wSecond,
; 264  : 				tmToDay.wYear,tmToDay.wMonth,tmToDay.wDay,tmToDay.wHour,tmToDay.wMinute,tmToDay.wSecond);

  00287	0f b7 55 f8	 movzx	 edx, WORD PTR _tmToDay$[ebp+12]
  0028b	0f b7 45 f6	 movzx	 eax, WORD PTR _tmToDay$[ebp+10]
  0028f	0f b7 4d f4	 movzx	 ecx, WORD PTR _tmToDay$[ebp+8]
  00293	52		 push	 edx
  00294	0f b7 55 f2	 movzx	 edx, WORD PTR _tmToDay$[ebp+6]
  00298	50		 push	 eax
  00299	0f b7 45 ee	 movzx	 eax, WORD PTR _tmToDay$[ebp+2]
  0029d	51		 push	 ecx
  0029e	0f b7 4d ec	 movzx	 ecx, WORD PTR _tmToDay$[ebp]
  002a2	52		 push	 edx
  002a3	0f b7 56 64	 movzx	 edx, WORD PTR [esi+100]
  002a7	50		 push	 eax
  002a8	0f b7 46 62	 movzx	 eax, WORD PTR [esi+98]
  002ac	51		 push	 ecx
  002ad	8b 4d cc	 mov	 ecx, DWORD PTR tv685[ebp]
  002b0	52		 push	 edx
  002b1	8b 55 e8	 mov	 edx, DWORD PTR tv687[ebp]
  002b4	50		 push	 eax
  002b5	0f b7 46 60	 movzx	 eax, WORD PTR [esi+96]
  002b9	50		 push	 eax
  002ba	8b 45 d8	 mov	 eax, DWORD PTR tv691[ebp]
  002bd	50		 push	 eax
  002be	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  002c1	51		 push	 ecx
  002c2	52		 push	 edx
  002c3	50		 push	 eax
  002c4	33 db		 xor	 ebx, ebx
  002c6	68 00 00 00 00	 push	 OFFSET ??_C@_0KA@DFFDLLM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  002cb	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  002ce	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002d3	83 c4 38	 add	 esp, 56			; 00000038H

; 265  : 		}
; 266  : 		else

  002d6	eb 09		 jmp	 SHORT $LN4@LoadPreFix
$LN5@LoadPreFix:

; 267  : 		{
; 268  : 			m_bFixCastleStateStartDate = 1;

  002d8	c7 46 54 01 00
	00 00		 mov	 DWORD PTR [esi+84], 1
  002df	33 db		 xor	 ebx, ebx
$LN4@LoadPreFix:

; 269  : 		}
; 270  : 
; 271  : 		if(m_iFixCastleSpecificState == 8)

  002e1	83 7e 50 08	 cmp	 DWORD PTR [esi+80], 8
  002e5	75 10		 jne	 SHORT $LN3@LoadPreFix

; 272  : 		{
; 273  : 			MsgBox("[CastleSiege] CCastleSiege::LoadPreFixData() - FIX STATE 'CASTLESIEGE_STATE_ENDSIEGE' CAN'T BE USED");

  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_0GE@MEAHOCFO@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  002ec	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002f1	83 c4 04	 add	 esp, 4

; 274  : 			m_bFixCastleStateStartDate = 0;

  002f4	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
$LN3@LoadPreFix:

; 275  : 		}
; 276  : 
; 277  : 		if(MONTH_MACRO(m_tmFixCastleStateStartDate.wMonth) == FALSE
; 278  : 			|| DAY_MACRO(m_tmFixCastleStateStartDate.wDay) == FALSE
; 279  : 			|| HOUR_MACRO(m_tmFixCastleStateStartDate.wHour) == FALSE
; 280  : 			|| MINUTE_MACRO(m_tmFixCastleStateStartDate.wMinute) == FALSE)

  002f7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002fc	66 3b 46 5a	 cmp	 ax, WORD PTR [esi+90]
  00300	1b c0		 sbb	 eax, eax
  00302	40		 inc	 eax
  00303	3b c3		 cmp	 eax, ebx
  00305	74 34		 je	 SHORT $LN10@LoadPreFix
  00307	0f b7 46 5e	 movzx	 eax, WORD PTR [esi+94]
  0030b	48		 dec	 eax
  0030c	3b c3		 cmp	 eax, ebx
  0030e	7c 2b		 jl	 SHORT $LN10@LoadPreFix
  00310	33 c9		 xor	 ecx, ecx
  00312	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00315	0f 9e c1	 setle	 cl
  00318	3b cb		 cmp	 ecx, ebx
  0031a	74 1f		 je	 SHORT $LN10@LoadPreFix
  0031c	66 ba 17 00	 mov	 dx, 23			; 00000017H
  00320	66 3b 56 60	 cmp	 dx, WORD PTR [esi+96]
  00324	1b c0		 sbb	 eax, eax
  00326	40		 inc	 eax
  00327	3b c3		 cmp	 eax, ebx
  00329	74 10		 je	 SHORT $LN10@LoadPreFix
  0032b	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  00330	66 3b 46 62	 cmp	 ax, WORD PTR [esi+98]
  00334	1b c0		 sbb	 eax, eax
  00336	40		 inc	 eax
  00337	3b c3		 cmp	 eax, ebx
  00339	75 03		 jne	 SHORT $LN2@LoadPreFix
$LN10@LoadPreFix:

; 248  : 	{
; 249  : 		m_bFixCastleStateStartDate = 0;

  0033b	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
$LN2@LoadPreFix:

; 281  : 		{
; 282  : 			m_bFixCastleStateStartDate = 0;
; 283  : 		}
; 284  : 	}
; 285  : 
; 286  : 	WritePrivateProfileString("GameServerInfo","CastleCycleStartYear","0",lpszFileName);

  0033e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__WritePrivateProfileStringA@16
  00344	57		 push	 edi
  00345	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  0034a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ICAJFEMK@CastleCycleStartYear?$AA@
  0034f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00354	ff d3		 call	 ebx

; 287  : 	WritePrivateProfileString("GameServerInfo","CastleCycleStartMonth","0",lpszFileName);

  00356	57		 push	 edi
  00357	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  0035c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FIAOPHJN@CastleCycleStartMonth?$AA@
  00361	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00366	ff d3		 call	 ebx

; 288  : 	WritePrivateProfileString("GameServerInfo","CastleCycleStartDay","0",lpszFileName);

  00368	57		 push	 edi
  00369	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  0036e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JIMKKEIB@CastleCycleStartDay?$AA@
  00373	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00378	ff d3		 call	 ebx

; 289  : 	WritePrivateProfileString("GameServerInfo","CastleSpecificState","0",lpszFileName);

  0037a	57		 push	 edi
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00380	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KMBFCGLK@CastleSpecificState?$AA@
  00385	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0038a	ff d3		 call	 ebx

; 290  : 	WritePrivateProfileString("GameServerInfo","CastleStateStartYear","0",lpszFileName);

  0038c	57		 push	 edi
  0038d	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00392	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BLNJJFJH@CastleStateStartYear?$AA@
  00397	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0039c	ff d3		 call	 ebx

; 291  : 	WritePrivateProfileString("GameServerInfo","CastleStateStartMonth","0",lpszFileName);

  0039e	57		 push	 edi
  0039f	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  003a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@ENENAKBF@CastleStateStartMonth?$AA@
  003a9	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  003ae	ff d3		 call	 ebx

; 292  : 	WritePrivateProfileString("GameServerInfo","CastleStateStartDay","0",lpszFileName);

  003b0	57		 push	 edi
  003b1	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  003b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EBFKEDIC@CastleStateStartDay?$AA@
  003bb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  003c0	ff d3		 call	 ebx

; 293  : 	WritePrivateProfileString("GameServerInfo","CastleStateStartHour","0",lpszFileName);

  003c2	57		 push	 edi
  003c3	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  003c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DCMLMAGN@CastleStateStartHour?$AA@
  003cd	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  003d2	ff d3		 call	 ebx

; 294  : 	WritePrivateProfileString("GameServerInfo","CastleStateStartMinute","0",lpszFileName);

  003d4	57		 push	 edi
  003d5	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  003da	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OMDOIGP@CastleStateStartMinute?$AA@
  003df	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  003e4	ff d3		 call	 ebx

; 295  : 
; 296  : 	return m_bFixCastleCycleStartDate & m_bFixCastleStateStartDate;

  003e6	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]

; 297  : }

  003e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ec	23 46 54	 and	 eax, DWORD PTR [esi+84]
  003ef	5b		 pop	 ebx
  003f0	5f		 pop	 edi
  003f1	33 cd		 xor	 ecx, ebp
  003f3	5e		 pop	 esi
  003f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003f9	8b e5		 mov	 esp, ebp
  003fb	5d		 pop	 ebp
  003fc	c2 04 00	 ret	 4
$LN7@LoadPreFix:

; 252  : 	{
; 253  : 		m_bFixCastleStateStartDate = 0;

  003ff	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 254  : 	}
; 255  : 	else

  00406	e9 33 ff ff ff	 jmp	 $LN2@LoadPreFix
?LoadPreFixData@CCastleSiege@@QAEHPAD@Z ENDP		; CCastleSiege::LoadPreFixData
_TEXT	ENDS
PUBLIC	?ResetAllUserCsJoinSide@CCastleSiege@@QAEXXZ	; CCastleSiege::ResetAllUserCsJoinSide
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ResetAllUserCsJoinSide@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
tv128 = -8						; size = 4
_this$ = -4						; size = 4
?ResetAllUserCsJoinSide@CCastleSiege@@QAEXXZ PROC	; CCastleSiege::ResetAllUserCsJoinSide, COMDAT
; _this$ = ecx

; 858  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 859  : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  00008	8d 81 8c 01 00
	00		 lea	 eax, DWORD PTR [ecx+396]
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00013	89 45 f8	 mov	 DWORD PTR tv128[ebp], eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 860  : 
; 861  : 	for(int iUSER = OBJ_STARTUSERINDEX; iUSER < OBJMAX; iUSER++)

  0001c	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00021	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  00026	33 db		 xor	 ebx, ebx
$LL4@ResetAllUs:

; 862  : 	{
; 863  : 		if(::gObjIsConnected(iUSER) == FALSE)

  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 3b		 je	 SHORT $LN3@ResetAllUs

; 864  : 			continue;
; 865  : 
; 866  : 		gObj[iUSER].m_btCsJoinSide = 0;

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003a	88 9c 06 5a 20
	00 00		 mov	 BYTE PTR [esi+eax+8282], bl

; 867  : 		gObj[iUSER].m_bCsGuildInvolved = 0;

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00047	88 9c 0e 5b 20
	00 00		 mov	 BYTE PTR [esi+ecx+8283], bl

; 868  : 		gObj[iUSER].m_btLifeStoneCount = 0;

  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 869  : 
; 870  : 		NotifySelfCsJoinSide(iUSER);

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	57		 push	 edi
  00058	88 9c 16 6c 20
	00 00		 mov	 BYTE PTR [esi+edx+8300], bl
  0005f	e8 00 00 00 00	 call	 ?NotifySelfCsJoinSide@CCastleSiege@@QAEXH@Z ; CCastleSiege::NotifySelfCsJoinSide

; 871  : 
; 872  : 		gObj[iUSER].m_iAccumulatedCrownAccessTime = 0;

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00069	89 9c 06 74 20
	00 00		 mov	 DWORD PTR [esi+eax+8308], ebx
$LN3@ResetAllUs:

; 860  : 
; 861  : 	for(int iUSER = OBJ_STARTUSERINDEX; iUSER < OBJMAX; iUSER++)

  00070	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00076	47		 inc	 edi
  00077	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  0007d	7c a9		 jl	 SHORT $LL4@ResetAllUs

; 873  : 	}
; 874  : 
; 875  : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  0007f	8b 4d f8	 mov	 ecx, DWORD PTR tv128[ebp]
  00082	51		 push	 ecx
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 876  : }

  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?ResetAllUserCsJoinSide@CCastleSiege@@QAEXXZ ENDP	; CCastleSiege::ResetAllUserCsJoinSide
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SetState_ENDSIEGE@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetState_ENDSIEGE
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
; Function compile flags: /Ogtp
;	COMDAT ?SetState_ENDSIEGE@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_ttSTime$185786 = -44					; size = 4
_tmETime$185788 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_bSetRemainMsec$ = 8					; size = 4
?SetState_ENDSIEGE@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_ENDSIEGE, COMDAT
; _this$ = ecx

; 1797 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1798 : 	if(bSetRemainMsec != FALSE)

  00010	83 7d 08 00	 cmp	 DWORD PTR _bSetRemainMsec$[ebp], 0
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	74 76		 je	 SHORT $LN1@SetState_E

; 1799 : 	{
; 1800 : 		long ttSTime;
; 1801 : 		long ttETime;
; 1802 : 		tm tmETime;
; 1803 : 		double dResultSecond;
; 1804 : 
; 1805 : 		memset(&tmETime,0x00,sizeof(tmETime));
; 1806 : 
; 1807 : 		tmETime.tm_year = m_tmEndDate.wYear - 1900;
; 1808 : 		tmETime.tm_mon = m_tmEndDate.wMonth - 1;

  00019	0f b7 8e c6 00
	00 00		 movzx	 ecx, WORD PTR [esi+198]

; 1809 : 		tmETime.tm_mday = m_tmEndDate.wDay;

  00020	0f b7 96 ca 00
	00 00		 movzx	 edx, WORD PTR [esi+202]
  00027	33 c0		 xor	 eax, eax
  00029	89 45 e4	 mov	 DWORD PTR _tmETime$185788[ebp+12], eax
  0002c	89 45 e8	 mov	 DWORD PTR _tmETime$185788[ebp+16], eax
  0002f	89 45 ec	 mov	 DWORD PTR _tmETime$185788[ebp+20], eax
  00032	89 45 d8	 mov	 DWORD PTR _tmETime$185788[ebp], eax
  00035	89 45 dc	 mov	 DWORD PTR _tmETime$185788[ebp+4], eax
  00038	89 45 e0	 mov	 DWORD PTR _tmETime$185788[ebp+8], eax
  0003b	89 45 f0	 mov	 DWORD PTR _tmETime$185788[ebp+24], eax
  0003e	89 45 f4	 mov	 DWORD PTR _tmETime$185788[ebp+28], eax
  00041	89 45 f8	 mov	 DWORD PTR _tmETime$185788[ebp+32], eax
  00044	0f b7 86 c4 00
	00 00		 movzx	 eax, WORD PTR [esi+196]
  0004b	2d 6c 07 00 00	 sub	 eax, 1900		; 0000076cH
  00050	89 45 ec	 mov	 DWORD PTR _tmETime$185788[ebp+20], eax

; 1810 : 
; 1811 : 		time((time_t*)&ttSTime);

  00053	8d 45 d4	 lea	 eax, DWORD PTR _ttSTime$185786[ebp]
  00056	49		 dec	 ecx
  00057	50		 push	 eax
  00058	89 4d e8	 mov	 DWORD PTR _tmETime$185788[ebp+16], ecx
  0005b	89 55 e4	 mov	 DWORD PTR _tmETime$185788[ebp+12], edx
  0005e	e8 00 00 00 00	 call	 __time64

; 1812 : 		ttETime = (long)mktime(&tmETime);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR _tmETime$185788[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 __mktime64
  0006c	8b c8		 mov	 ecx, eax

; 1813 : 
; 1814 : 		dResultSecond = difftime(ttETime,ttSTime);

  0006e	8b 45 d4	 mov	 eax, DWORD PTR _ttSTime$185786[ebp]
  00071	99		 cdq
  00072	52		 push	 edx
  00073	50		 push	 eax

; 1815 : 		m_iCS_REMAIN_MSEC = (int)(dResultSecond*1000.0);

  00074	8b c1		 mov	 eax, ecx
  00076	99		 cdq
  00077	52		 push	 edx
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 __difftime64
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@408f400000000000
  00087	e8 00 00 00 00	 call	 __ftol2_sse
  0008c	89 46 68	 mov	 DWORD PTR [esi+104], eax
$LN1@SetState_E:

; 1816 : 	}
; 1817 : 
; 1818 : 	ClearNonDbNPC();

  0008f	8b ce		 mov	 ecx, esi
  00091	e8 00 00 00 00	 call	 ?ClearNonDbNPC@CCastleSiege@@QAEXXZ ; CCastleSiege::ClearNonDbNPC

; 1819 : 	ResetAllUserCsJoinSide();

  00096	8b ce		 mov	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?ResetAllUserCsJoinSide@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetAllUserCsJoinSide

; 1820 : 	SendAllUserAnyMsg(lMsg.Get(MSGGET(6, 84)),1);

  0009d	6a 01		 push	 1
  0009f	68 54 06 00 00	 push	 1620			; 00000654H
  000a4	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000a9	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000ae	50		 push	 eax
  000af	8b ce		 mov	 ecx, esi
  000b1	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z ; CCastleSiege::SendAllUserAnyMsg

; 1821 : }

  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	33 cd		 xor	 ecx, ebp
  000bb	5e		 pop	 esi
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
?SetState_ENDSIEGE@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_ENDSIEGE
_TEXT	ENDS
PUBLIC	?CheckAttackGuildExist@CCastleSiege@@QAEHXZ	; CCastleSiege::CheckAttackGuildExist
; Function compile flags: /Ogtp
;	COMDAT ?CheckAttackGuildExist@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?CheckAttackGuildExist@CCastleSiege@@QAEHXZ PROC	; CCastleSiege::CheckAttackGuildExist, COMDAT
; _this$ = ecx

; 1917 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 1918 : 	int iRETVAL = FALSE;
; 1919 : 
; 1920 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  00005	8d be 8c 01 00
	00		 lea	 edi, DWORD PTR [esi+396]
  0000b	57		 push	 edi
  0000c	33 db		 xor	 ebx, ebx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1921 : 	if(!m_mapCsTotalGuildInfo.empty())

  00014	39 9e 84 01 00
	00		 cmp	 DWORD PTR [esi+388], ebx
  0001a	74 05		 je	 SHORT $LN1@CheckAttac

; 1922 : 	{
; 1923 : 		iRETVAL = TRUE;

  0001c	bb 01 00 00 00	 mov	 ebx, 1
$LN1@CheckAttac:

; 1924 : 	}
; 1925 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  00021	57		 push	 edi
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 1926 : 
; 1927 : return iRETVAL;

  0002a	8b c3		 mov	 eax, ebx
  0002c	5b		 pop	 ebx

; 1928 : }

  0002d	c3		 ret	 0
?CheckAttackGuildExist@CCastleSiege@@QAEHXZ ENDP	; CCastleSiege::CheckAttackGuildExist
_TEXT	ENDS
PUBLIC	??_C@_0CN@NJJMBNKH@?$FLCastleSiege?$FN?5Castle?5Final?5Winne@ ; `string'
PUBLIC	??_C@_04OKGDLNCL@NONE?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CheckCastleSiegeResult@CCastleSiege@@QAEHXZ	; CCastleSiege::CheckCastleSiegeResult
EXTRN	__imp__wsprintfA:PROC
;	COMDAT ??_C@_0CN@NJJMBNKH@?$FLCastleSiege?$FN?5Castle?5Final?5Winne@
CONST	SEGMENT
??_C@_0CN@NJJMBNKH@?$FLCastleSiege?$FN?5Castle?5Final?5Winne@ DB '[Castle'
	DB	'Siege] Castle Final Winner Guild : %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE?$AA@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE?$AA@ DB 'NONE', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckCastleSiegeResult@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
_szMsg$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?CheckCastleSiegeResult@CCastleSiege@@QAEHXZ PROC	; CCastleSiege::CheckCastleSiegeResult, COMDAT
; _this$ = ecx

; 1931 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 1932 : 	char szMsg[0x100] = {0};

  00016	68 ff 00 00 00	 push	 255			; 000000ffH
  0001b	8d 85 fd fe ff
	ff		 lea	 eax, DWORD PTR _szMsg$[ebp+1]
  00021	6a 00		 push	 0
  00023	50		 push	 eax
  00024	8b d9		 mov	 ebx, ecx
  00026	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _szMsg$[ebp], 0
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1933 : 	int bRETVAL = FALSE;
; 1934 : 
; 1935 : 	if(m_btIsCastleOccupied == TRUE && strcmp(m_szCastleOwnerGuild,"") != FALSE)

  00035	80 bb d6 00 00
	00 01		 cmp	 BYTE PTR [ebx+214], 1
  0003c	0f 85 01 01 00
	00		 jne	 $LN32@CheckCastl@4
  00042	8d b3 d7 00 00
	00		 lea	 esi, DWORD PTR [ebx+215]
  00048	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0004d	8b c6		 mov	 eax, esi
  0004f	90		 npad	 1
$LL12@CheckCastl@4:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN13@CheckCastl@4
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN14@CheckCastl@4
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN13@CheckCastl@4
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL12@CheckCastl@4
$LN14@CheckCastl@4:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN15@CheckCastl@4
$LN13@CheckCastl@4:
  00070	1b c0		 sbb	 eax, eax
  00072	83 d8 ff	 sbb	 eax, -1
$LN15@CheckCastl@4:
  00075	85 c0		 test	 eax, eax
  00077	0f 84 c6 00 00
	00		 je	 $LN32@CheckCastl@4

; 1936 : 	{
; 1937 : 		if(strcmp(m_szMiddleWinnerGuild,"") == FALSE || strcmp(m_szMiddleWinnerGuild,m_szCastleOwnerGuild) == FALSE)

  0007d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00082	8d 83 04 02 00
	00		 lea	 eax, DWORD PTR [ebx+516]
$LL16@CheckCastl@4:
  00088	8a 10		 mov	 dl, BYTE PTR [eax]
  0008a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0008c	75 1a		 jne	 SHORT $LN17@CheckCastl@4
  0008e	84 d2		 test	 dl, dl
  00090	74 12		 je	 SHORT $LN18@CheckCastl@4
  00092	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00095	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00098	75 0e		 jne	 SHORT $LN17@CheckCastl@4
  0009a	83 c0 02	 add	 eax, 2
  0009d	83 c1 02	 add	 ecx, 2
  000a0	84 d2		 test	 dl, dl
  000a2	75 e4		 jne	 SHORT $LL16@CheckCastl@4
$LN18@CheckCastl@4:
  000a4	33 c0		 xor	 eax, eax
  000a6	eb 05		 jmp	 SHORT $LN19@CheckCastl@4
$LN17@CheckCastl@4:
  000a8	1b c0		 sbb	 eax, eax
  000aa	83 d8 ff	 sbb	 eax, -1
$LN19@CheckCastl@4:
  000ad	85 c0		 test	 eax, eax
  000af	74 63		 je	 SHORT $LN5@CheckCastl@4
  000b1	8b ce		 mov	 ecx, esi
  000b3	8d 83 04 02 00
	00		 lea	 eax, DWORD PTR [ebx+516]
  000b9	8d a4 24 00 00
	00 00		 npad	 7
$LL20@CheckCastl@4:
  000c0	8a 10		 mov	 dl, BYTE PTR [eax]
  000c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000c4	75 1a		 jne	 SHORT $LN21@CheckCastl@4
  000c6	84 d2		 test	 dl, dl
  000c8	74 12		 je	 SHORT $LN22@CheckCastl@4
  000ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000d0	75 0e		 jne	 SHORT $LN21@CheckCastl@4
  000d2	83 c0 02	 add	 eax, 2
  000d5	83 c1 02	 add	 ecx, 2
  000d8	84 d2		 test	 dl, dl
  000da	75 e4		 jne	 SHORT $LL20@CheckCastl@4
$LN22@CheckCastl@4:
  000dc	33 c0		 xor	 eax, eax
  000de	eb 05		 jmp	 SHORT $LN23@CheckCastl@4
$LN21@CheckCastl@4:
  000e0	1b c0		 sbb	 eax, eax
  000e2	83 d8 ff	 sbb	 eax, -1
$LN23@CheckCastl@4:
  000e5	85 c0		 test	 eax, eax
  000e7	74 2b		 je	 SHORT $LN5@CheckCastl@4

; 1942 : 		}
; 1943 : 		else
; 1944 : 		{
; 1945 : 			m_btIsCastleOccupied = TRUE;
; 1946 : 			memset(m_szCastleOwnerGuild,0x00,sizeof(m_szCastleOwnerGuild));

  000e9	33 c0		 xor	 eax, eax
  000eb	c6 83 d6 00 00
	00 01		 mov	 BYTE PTR [ebx+214], 1
  000f2	89 06		 mov	 DWORD PTR [esi], eax
  000f4	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000f7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000fa	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 1947 : 			memcpy(m_szCastleOwnerGuild,m_szMiddleWinnerGuild,0x08);

  000fd	8b 8b 04 02 00
	00		 mov	 ecx, DWORD PTR [ebx+516]
  00103	8b 93 08 02 00
	00		 mov	 edx, DWORD PTR [ebx+520]
  00109	89 0e		 mov	 DWORD PTR [esi], ecx
  0010b	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1948 : 			wsprintf(szMsg,lMsg.Get(MSGGET(6, 198)),m_szCastleOwnerGuild);

  0010e	56		 push	 esi

; 1949 : 			bRETVAL = TRUE;

  0010f	e9 bb 00 00 00	 jmp	 $LN33@CheckCastl@4
$LN5@CheckCastl@4:

; 1938 : 		{
; 1939 : 			m_btIsCastleOccupied = TRUE;
; 1940 : 			wsprintf(szMsg,lMsg.Get(MSGGET(6, 197)),m_szCastleOwnerGuild);

  00114	56		 push	 esi
  00115	68 c5 06 00 00	 push	 1733			; 000006c5H
  0011a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0011f	c6 83 d6 00 00
	00 01		 mov	 BYTE PTR [ebx+214], 1
  00126	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0012b	50		 push	 eax
  0012c	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szMsg$[ebp]
  00132	51		 push	 ecx
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1941 : 			bRETVAL = FALSE;

  0013c	33 f6		 xor	 esi, esi

; 1950 : 		}
; 1951 : 	}
; 1952 : 	else

  0013e	e9 b1 00 00 00	 jmp	 $LN1@CheckCastl@4
$LN32@CheckCastl@4:

; 1953 : 	{
; 1954 : 		if(strcmp(m_szMiddleWinnerGuild,"") == FALSE)

  00143	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00148	8d 83 04 02 00
	00		 lea	 eax, DWORD PTR [ebx+516]
  0014e	8b ff		 npad	 2
$LL24@CheckCastl@4:
  00150	8a 10		 mov	 dl, BYTE PTR [eax]
  00152	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00154	75 1a		 jne	 SHORT $LN25@CheckCastl@4
  00156	84 d2		 test	 dl, dl
  00158	74 12		 je	 SHORT $LN26@CheckCastl@4
  0015a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0015d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00160	75 0e		 jne	 SHORT $LN25@CheckCastl@4
  00162	83 c0 02	 add	 eax, 2
  00165	83 c1 02	 add	 ecx, 2
  00168	84 d2		 test	 dl, dl
  0016a	75 e4		 jne	 SHORT $LL24@CheckCastl@4
$LN26@CheckCastl@4:
  0016c	33 c0		 xor	 eax, eax
  0016e	eb 05		 jmp	 SHORT $LN27@CheckCastl@4
$LN25@CheckCastl@4:
  00170	1b c0		 sbb	 eax, eax
  00172	83 d8 ff	 sbb	 eax, -1
$LN27@CheckCastl@4:
  00175	85 c0		 test	 eax, eax
  00177	75 2a		 jne	 SHORT $LN2@CheckCastl@4

; 1955 : 		{
; 1956 : 			m_btIsCastleOccupied = FALSE;
; 1957 : 			wsprintf(szMsg,lMsg.Get(MSGGET(6, 199)));

  00179	68 c7 06 00 00	 push	 1735			; 000006c7H
  0017e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00183	88 83 d6 00 00
	00		 mov	 BYTE PTR [ebx+214], al
  00189	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0018e	50		 push	 eax
  0018f	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _szMsg$[ebp]
  00195	52		 push	 edx
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0019c	83 c4 08	 add	 esp, 8

; 1958 : 			bRETVAL = FALSE;

  0019f	33 f6		 xor	 esi, esi

; 1959 : 		}
; 1960 : 		else

  001a1	eb 51		 jmp	 SHORT $LN1@CheckCastl@4
$LN2@CheckCastl@4:

; 1961 : 		{
; 1962 : 			m_btIsCastleOccupied = TRUE;
; 1963 : 			memset(m_szCastleOwnerGuild,0x00,sizeof(m_szCastleOwnerGuild));

  001a3	8d 83 d7 00 00
	00		 lea	 eax, DWORD PTR [ebx+215]
  001a9	33 c9		 xor	 ecx, ecx
  001ab	c6 83 d6 00 00
	00 01		 mov	 BYTE PTR [ebx+214], 1
  001b2	89 08		 mov	 DWORD PTR [eax], ecx
  001b4	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  001b7	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  001ba	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1964 : 			memcpy(m_szCastleOwnerGuild,m_szMiddleWinnerGuild,0x08);

  001bd	8b 8b 04 02 00
	00		 mov	 ecx, DWORD PTR [ebx+516]
  001c3	8b 93 08 02 00
	00		 mov	 edx, DWORD PTR [ebx+520]
  001c9	89 08		 mov	 DWORD PTR [eax], ecx
  001cb	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1965 : 			wsprintf(szMsg,lMsg.Get(MSGGET(6, 198)),m_szCastleOwnerGuild);

  001ce	50		 push	 eax
$LN33@CheckCastl@4:
  001cf	68 c6 06 00 00	 push	 1734			; 000006c6H
  001d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001d9	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001de	50		 push	 eax
  001df	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMsg$[ebp]
  001e5	50		 push	 eax
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 1966 : 			bRETVAL = TRUE;

  001ec	be 01 00 00 00	 mov	 esi, 1
  001f1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@CheckCastl@4:

; 1967 : 		}
; 1968 : 	}
; 1969 : 
; 1970 : 	m_btIsSiegeEnded = TRUE;

  001f4	c6 83 d5 00 00
	00 01		 mov	 BYTE PTR [ebx+213], 1

; 1971 : 
; 1972 : 	LogAddTD("[CastleSiege] Castle Final Winner Guild : %s",(strcmp(m_szCastleOwnerGuild,"") == FALSE) ? "NONE" : m_szCastleOwnerGuild);

  001fb	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00200	8d 83 d7 00 00
	00		 lea	 eax, DWORD PTR [ebx+215]
$LL28@CheckCastl@4:
  00206	8a 10		 mov	 dl, BYTE PTR [eax]
  00208	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0020a	75 1a		 jne	 SHORT $LN29@CheckCastl@4
  0020c	84 d2		 test	 dl, dl
  0020e	74 12		 je	 SHORT $LN30@CheckCastl@4
  00210	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00213	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00216	75 0e		 jne	 SHORT $LN29@CheckCastl@4
  00218	83 c0 02	 add	 eax, 2
  0021b	83 c1 02	 add	 ecx, 2
  0021e	84 d2		 test	 dl, dl
  00220	75 e4		 jne	 SHORT $LL28@CheckCastl@4
$LN30@CheckCastl@4:
  00222	33 c0		 xor	 eax, eax
  00224	eb 05		 jmp	 SHORT $LN31@CheckCastl@4
$LN29@CheckCastl@4:
  00226	1b c0		 sbb	 eax, eax
  00228	83 d8 ff	 sbb	 eax, -1
$LN31@CheckCastl@4:
  0022b	85 c0		 test	 eax, eax
  0022d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04OKGDLNCL@NONE?$AA@
  00232	74 06		 je	 SHORT $LN11@CheckCastl@4
  00234	8d 83 d7 00 00
	00		 lea	 eax, DWORD PTR [ebx+215]
$LN11@CheckCastl@4:
  0023a	50		 push	 eax
  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@NJJMBNKH@?$FLCastleSiege?$FN?5Castle?5Final?5Winne@
  00240	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00246	83 c4 08	 add	 esp, 8

; 1973 : 	SendMapServerGroupMsg(szMsg);

  00249	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szMsg$[ebp]
  0024f	51		 push	 ecx
  00250	8b cb		 mov	 ecx, ebx
  00252	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCastleSiege@@QAEXPAD@Z ; CCastleSiege::SendMapServerGroupMsg

; 1974 : 
; 1975 : return bRETVAL;
; 1976 : }

  00257	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025a	5f		 pop	 edi
  0025b	8b c6		 mov	 eax, esi
  0025d	5e		 pop	 esi
  0025e	33 cd		 xor	 ecx, ebp
  00260	5b		 pop	 ebx
  00261	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00266	8b e5		 mov	 esp, ebp
  00268	5d		 pop	 ebp
  00269	c3		 ret	 0
?CheckCastleSiegeResult@CCastleSiege@@QAEHXZ ENDP	; CCastleSiege::CheckCastleSiegeResult
_TEXT	ENDS
PUBLIC	??1?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@XZ	; std::pair<int,_CS_MINIMAP_DATA>::~pair<int,_CS_MINIMAP_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??1?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@XZ PROC		; std::pair<int,_CS_MINIMAP_DATA>::~pair<int,_CS_MINIMAP_DATA>, COMDAT
; _this$ = ecx
  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00007	c3		 ret	 0
??1?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@XZ ENDP		; std::pair<int,_CS_MINIMAP_DATA>::~pair<int,_CS_MINIMAP_DATA>
_TEXT	ENDS
PUBLIC	??_C@_0FD@NMEPOKII@?$FLCastleSiege?$FN?5CCastleSiege?3?3Noti@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?NotifyCrownSwitchInfo@CCastleSiege@@QAEXH@Z	; CCastleSiege::NotifyCrownSwitchInfo
EXTRN	?GetUnionName@TUnion@@QAEHHPAD@Z:PROC		; TUnion::GetUnionName
;	COMDAT ??_C@_0FD@NMEPOKII@?$FLCastleSiege?$FN?5CCastleSiege?3?3Noti@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\include\prodef.h
CONST	SEGMENT
??_C@_0FD@NMEPOKII@?$FLCastleSiege?$FN?5CCastleSiege?3?3Noti@ DB '[Castle'
	DB	'Siege] CCastleSiege::NotifyCrownSwitchInfo() - iCrownSwitchIn'
	DB	'dex is Invalid', 00H			; `string'
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
CONST	ENDS
;	COMDAT ?NotifyCrownSwitchInfo@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -40						; size = 26
_UnionName$187780 = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_iIndex$ = 8						; size = 4
?NotifyCrownSwitchInfo@CCastleSiege@@QAEXH@Z PROC	; CCastleSiege::NotifyCrownSwitchInfo, COMDAT
; _this$ = ecx

; 3817 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _iIndex$[ebp]

; 3818 : 	if(gObjIsConnected(iIndex) == FALSE)

  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	75 21		 jne	 SHORT $LN10@NotifyCrow@2

; 3819 : 	{
; 3820 : 		LogAddC(2,"[CastleSiege] CCastleSiege::NotifyCrownSwitchInfo() - iCrownSwitchIndex is Invalid");

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@NMEPOKII@?$FLCastleSiege?$FN?5CCastleSiege?3?3Noti@
  00026	6a 02		 push	 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0002e	83 c4 08	 add	 esp, 8
  00031	5b		 pop	 ebx

; 3883 : 		}
; 3884 : 	}
; 3885 : }

  00032	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00035	33 cd		 xor	 ecx, ebp
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN10@NotifyCrow@2:
  00042	57		 push	 edi

; 3821 : 		return;
; 3822 : 	}
; 3823 : 
; 3824 : 	if(gObj[iIndex].Class != 217 && gObj[iIndex].Class != 218)

  00043	8b fb		 mov	 edi, ebx
  00045	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  0004b	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00051	ba d9 00 00 00	 mov	 edx, 217		; 000000d9H
  00056	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  0005d	66 3b c2	 cmp	 ax, dx
  00060	74 2c		 je	 SHORT $LN9@NotifyCrow@2
  00062	b9 da 00 00 00	 mov	 ecx, 218		; 000000daH
  00067	66 3b c1	 cmp	 ax, cx
  0006a	74 22		 je	 SHORT $LN9@NotifyCrow@2

; 3825 : 	{
; 3826 : 		LogAddC(2,"[CastleSiege] CCastleSiege::NotifyCrownSwitchInfo() - iCrownSwitchIndex is Invalid");

  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@NMEPOKII@?$FLCastleSiege?$FN?5CCastleSiege?3?3Noti@
  00071	6a 02		 push	 2
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00079	83 c4 08	 add	 esp, 8
  0007c	5f		 pop	 edi
  0007d	5b		 pop	 ebx

; 3883 : 		}
; 3884 : 	}
; 3885 : }

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00081	33 cd		 xor	 ecx, ebp
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
$LN9@NotifyCrow@2:

; 3827 : 		return;
; 3828 : 	}
; 3829 : 
; 3830 : 	LPOBJ lpObj = &gObj[iIndex];
; 3831 : 
; 3832 : 	if(lpObj->VPCount2 < 1)

  0008e	83 bf d0 0f 00
	00 01		 cmp	 DWORD PTR [edi+4048], 1
  00095	0f 8c 21 01 00
	00		 jl	 $LN17@NotifyCrow@2

; 3833 : 		return;
; 3834 : 
; 3835 : 	PMSG_CROWNSWITCH_INFO pMsg;
; 3836 : 
; 3837 : 	pMsg.h.set((PBYTE)&pMsg,0xB2,0x20,sizeof(pMsg));
; 3838 : 
; 3839 : 	pMsg.IndexH = SET_NUMBERH(iIndex & 0xFFFF);
; 3840 : 	pMsg.IndexL = SET_NUMBERL(iIndex & 0xFFFF);
; 3841 : 
; 3842 : 	pMsg.bResult = FALSE;
; 3843 : 	pMsg.btCsJoinSide = NULL;
; 3844 : 
; 3845 : 	memset(pMsg.szGuildName,0x00,sizeof(pMsg.szGuildName));

  0009b	33 c0		 xor	 eax, eax
  0009d	8b d3		 mov	 edx, ebx
  0009f	88 5d dd	 mov	 BYTE PTR _pMsg$[ebp+5], bl
  000a2	c1 ea 08	 shr	 edx, 8
  000a5	33 db		 xor	 ebx, ebx
  000a7	88 55 dc	 mov	 BYTE PTR _pMsg$[ebp+4], dl
  000aa	89 45 e0	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  000ad	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+12], eax

; 3846 : 	memset(pMsg.szName,0x00,sizeof(pMsg.szName));

  000b0	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  000b3	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+20], eax
  000b6	66 89 45 f0	 mov	 WORD PTR _pMsg$[ebp+24], ax
  000ba	c7 45 d8 c1 1a
	b2 20		 mov	 DWORD PTR _pMsg$[ebp], 548543169 ; 20b21ac1H
  000c1	66 89 5d de	 mov	 WORD PTR _pMsg$[ebp+6], bx

; 3847 : 
; 3848 : 	int iCrownUser = g_CastleSiege.GetCrownSwitchUserIndex(lpObj->Class);

  000c5	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  000cc	56		 push	 esi
  000cd	50		 push	 eax
  000ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000d3	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  000d8	8b f0		 mov	 esi, eax

; 3849 : 
; 3850 : 	if(gObjIsConnected(iCrownUser))

  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000e0	83 c4 04	 add	 esp, 4
  000e3	85 c0		 test	 eax, eax
  000e5	0f 84 8b 00 00
	00		 je	 $LN7@NotifyCrow@2

; 3851 : 	{
; 3852 : 		LPOBJ lpCrownUser = &gObj[iCrownUser];

  000eb	8b c6		 mov	 eax, esi
  000ed	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  000f3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 3853 : 		pMsg.bResult = TRUE;

  000f9	c6 45 de 01	 mov	 BYTE PTR _pMsg$[ebp+6], 1

; 3854 : 		pMsg.btCsJoinSide = lpCrownUser->m_btCsJoinSide;

  000fd	8a 88 5a 20 00
	00		 mov	 cl, BYTE PTR [eax+8282]
  00103	88 4d df	 mov	 BYTE PTR _pMsg$[ebp+7], cl

; 3855 : 
; 3856 : 		memcpy(pMsg.szName,lpCrownUser->Name,sizeof(pMsg.szName));

  00106	8b 50 5d	 mov	 edx, DWORD PTR [eax+93]
  00109	89 55 e8	 mov	 DWORD PTR _pMsg$[ebp+16], edx
  0010c	8b 48 61	 mov	 ecx, DWORD PTR [eax+97]
  0010f	89 4d ec	 mov	 DWORD PTR _pMsg$[ebp+20], ecx
  00112	66 8b 50 65	 mov	 dx, WORD PTR [eax+101]
  00116	66 89 55 f0	 mov	 WORD PTR _pMsg$[ebp+24], dx

; 3857 : 		memcpy(pMsg.szGuildName,lpCrownUser->GuildName,sizeof(pMsg.szGuildName));

  0011a	8b 88 1c 06 00
	00		 mov	 ecx, DWORD PTR [eax+1564]
  00120	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00123	8b 90 20 06 00
	00		 mov	 edx, DWORD PTR [eax+1568]

; 3858 : 
; 3859 : 		char UnionName[8];
; 3860 : 
; 3861 : 		memset(UnionName,0x00,sizeof(UnionName));

  00129	33 c9		 xor	 ecx, ecx
  0012b	89 55 e4	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  0012e	89 4d f4	 mov	 DWORD PTR _UnionName$187780[ebp], ecx
  00131	89 4d f8	 mov	 DWORD PTR _UnionName$187780[ebp+4], ecx

; 3862 : 
; 3863 : 		if(lpCrownUser->lpGuild != NULL)

  00134	8b 80 18 06 00
	00		 mov	 eax, DWORD PTR [eax+1560]
  0013a	3b c3		 cmp	 eax, ebx
  0013c	74 26		 je	 SHORT $LN5@NotifyCrow@2

; 3864 : 		{
; 3865 : 			if(UnionManager.GetUnionName(lpCrownUser->lpGuild->iGuildUnion,UnionName) != -1)

  0013e	8b 90 44 07 00
	00		 mov	 edx, DWORD PTR [eax+1860]
  00144	8d 4d f4	 lea	 ecx, DWORD PTR _UnionName$187780[ebp]
  00147	51		 push	 ecx
  00148	52		 push	 edx
  00149	b9 00 00 00 00	 mov	 ecx, OFFSET ?UnionManager@@3VTUnion@@A ; UnionManager
  0014e	e8 00 00 00 00	 call	 ?GetUnionName@TUnion@@QAEHHPAD@Z ; TUnion::GetUnionName
  00153	83 f8 ff	 cmp	 eax, -1
  00156	74 0c		 je	 SHORT $LN5@NotifyCrow@2

; 3866 : 			{
; 3867 : 				memcpy(pMsg.szGuildName,UnionName,sizeof(pMsg.szGuildName));

  00158	8b 45 f4	 mov	 eax, DWORD PTR _UnionName$187780[ebp]
  0015b	8b 4d f8	 mov	 ecx, DWORD PTR _UnionName$187780[ebp+4]
  0015e	89 45 e0	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00161	89 4d e4	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
$LN5@NotifyCrow@2:

; 3868 : 			}
; 3869 : 		}
; 3870 : 
; 3871 : 		DataSend(iCrownUser,(PBYTE)&pMsg,pMsg.h.size);

  00164	0f b6 55 d9	 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00168	52		 push	 edx
  00169	8d 45 d8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0016c	50		 push	 eax
  0016d	56		 push	 esi
  0016e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00173	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@NotifyCrow@2:

; 3872 : 	}
; 3873 : 
; 3874 : 	int tObjNum = -1;
; 3875 : 
; 3876 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  00176	8d b7 4a 0c 00
	00		 lea	 esi, DWORD PTR [edi+3146]
  0017c	bf 4b 00 00 00	 mov	 edi, 75			; 0000004bH
$LL4@NotifyCrow@2:

; 3877 : 	{
; 3878 : 		tObjNum = lpObj->VpPlayer2[n].number;

  00181	0f bf 06	 movsx	 eax, WORD PTR [esi]

; 3879 : 
; 3880 : 		if(tObjNum >= 0 && gObj[tObjNum].Type == OBJ_USER && gObj[tObjNum].Live != FALSE)

  00184	3b c3		 cmp	 eax, ebx
  00186	7c 2d		 jl	 SHORT $LN3@NotifyCrow@2
  00188	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018e	8b c8		 mov	 ecx, eax
  00190	69 c9 40 27 00
	00		 imul	 ecx, 10048		; 00002740H
  00196	80 7c 11 50 01	 cmp	 BYTE PTR [ecx+edx+80], 1
  0019b	75 18		 jne	 SHORT $LN3@NotifyCrow@2
  0019d	38 5c 11 51	 cmp	 BYTE PTR [ecx+edx+81], bl
  001a1	74 12		 je	 SHORT $LN3@NotifyCrow@2

; 3881 : 		{
; 3882 : 			DataSend(tObjNum,(PBYTE)&pMsg,pMsg.h.size);

  001a3	0f b6 4d d9	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  001a7	51		 push	 ecx
  001a8	8d 55 d8	 lea	 edx, DWORD PTR _pMsg$[ebp]
  001ab	52		 push	 edx
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@NotifyCrow@2:

; 3872 : 	}
; 3873 : 
; 3874 : 	int tObjNum = -1;
; 3875 : 
; 3876 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  001b5	83 c6 0c	 add	 esi, 12			; 0000000cH
  001b8	4f		 dec	 edi
  001b9	75 c6		 jne	 SHORT $LL4@NotifyCrow@2
  001bb	5e		 pop	 esi
$LN17@NotifyCrow@2:

; 3883 : 		}
; 3884 : 	}
; 3885 : }

  001bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bf	5f		 pop	 edi
  001c0	33 cd		 xor	 ecx, ebp
  001c2	5b		 pop	 ebx
  001c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c2 04 00	 ret	 4
?NotifyCrownSwitchInfo@CCastleSiege@@QAEXH@Z ENDP	; CCastleSiege::NotifyCrownSwitchInfo
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1435 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 
; 1438 : 		if (this->_Mysize <= _Off)
; 1439 : 
; 1440 : 			_DEBUG_ERROR("string subscript out of range");
; 1441 : 
; 1442 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1443 : 		_SCL_SECURE_VALIDATE_RANGE(_Off < this->_Mysize);
; 1444 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1445 : 
; 1446 : 		return (_Myptr()[_Off]);

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 0b		 jb	 SHORT $LN5@operator@5
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000e	03 c1		 add	 eax, ecx

; 1447 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4

; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 
; 1438 : 		if (this->_Mysize <= _Off)
; 1439 : 
; 1440 : 			_DEBUG_ERROR("string subscript out of range");
; 1441 : 
; 1442 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1443 : 		_SCL_SECURE_VALIDATE_RANGE(_Off < this->_Mysize);
; 1444 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1445 : 
; 1446 : 		return (_Myptr()[_Off]);

$LN5@operator@5:
  00014	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00017	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 1447 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?empty@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::empty
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBE_NXZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::empty, COMDAT
; _this$ = ecx

; 879  : 		return (size() == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 94 c0	 sete	 al

; 880  : 		}

  00008	c3		 ret	 0
?empty@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::empty
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >, COMDAT
; _this$ = ecx

; 298  : 	_Vector_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 299  : 		{	// construct with null vector pointer
; 300  : 		}

  00008	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEAAU_CS_SCHEDULE_DATA@@XZ ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEAAU_CS_SCHEDULE_DATA@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEAAU_CS_SCHEDULE_DATA@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEAAU_CS_SCHEDULE_DATA@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator*
_TEXT	ENDS
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator!=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator!=, COMDAT
; _this$ = ecx

; 334  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 336  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >, COMDAT
; _this$ = ecx

; 298  : 	_Vector_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 299  : 		{	// construct with null vector pointer
; 300  : 		}

  00008	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEAAU_CS_NPC_DATA@@XZ ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEAAU_CS_NPC_DATA@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEAAU_CS_NPC_DATA@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEAAU_CS_NPC_DATA@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator*
_TEXT	ENDS
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEPAU_CS_NPC_DATA@@XZ ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEPAU_CS_NPC_DATA@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEPAU_CS_NPC_DATA@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator->, COMDAT
; _this$ = ecx

; 327  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBEPAU_CS_NPC_DATA@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator->
_TEXT	ENDS
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator!=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator!=, COMDAT
; _this$ = ecx

; 334  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 336  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator!=
_TEXT	ENDS
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator!=, COMDAT
; _this$ = ecx

; 334  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 336  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator!=
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_SCHEDULE_DATA@@@1@@Z ; std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_SCHEDULE_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_SCHEDULE_DATA@@@1@@Z PROC ; std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_SCHEDULE_DATA@@@1@@Z ENDP ; std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_NPC_DATA@@@1@@Z ; std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_NPC_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_NPC_DATA@@@1@@Z PROC ; std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_NPC_DATA@@@1@@Z ENDP ; std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lmost
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1759 : 		return (this->_Left(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1760 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Rmost
; Function compile flags: /Ogtp
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1784 : 		return (this->_Right(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1785 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Root
; Function compile flags: /Ogtp
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1789 : 		return (this->_Parent(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1790 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Root
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >, COMDAT
; _this$ = ecx

; 555  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx

; 556  : 		}

  0000a	c3		 ret	 0
??1?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Key
; Function compile flags: /Ogtp
;	COMDAT ?_Key@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Key, COMDAT

; 616  : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 		return ((key_type&)_Traits::_Kfn(_Myval(_Pnode)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 618  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Key@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lmost
; Function compile flags: /Ogtp
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1759 : 		return (this->_Left(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1760 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Rmost
; Function compile flags: /Ogtp
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1784 : 		return (this->_Right(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1785 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Root
; Function compile flags: /Ogtp
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1789 : 		return (this->_Parent(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1790 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Root
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >, COMDAT
; _this$ = ecx

; 555  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx

; 556  : 		}

  0000a	c3		 ret	 0
??1?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Key
; Function compile flags: /Ogtp
;	COMDAT ?_Key@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Key, COMDAT

; 616  : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 		return ((key_type&)_Traits::_Kfn(_Myval(_Pnode)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 618  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Key@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Key
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 555  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx

; 556  : 		}

  0000a	c3		 ret	 0
??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAIPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Key
; Function compile flags: /Ogtp
;	COMDAT ?_Key@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAIPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAIPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Key, COMDAT

; 616  : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 		return ((key_type&)_Traits::_Kfn(_Myval(_Pnode)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 618  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Key@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAAAIPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Key
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@PAU_CS_SCHEDULE_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@PAU_CS_SCHEDULE_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@PAU_CS_SCHEDULE_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE@PAU_CS_SCHEDULE_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@PAU_CS_NPC_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@PAU_CS_NPC_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@PAU_CS_NPC_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE@PAU_CS_NPC_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 74	 add	 DWORD PTR [eax], 116	; 00000074H

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator==
_TEXT	ENDS
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator*
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator*, COMDAT
; _this$ = ecx

; 396  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 397  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator*, COMDAT
; _this$ = ecx

; 396  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 397  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_REG_GUILD_DATA@@@1@@Z ; std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_REG_GUILD_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_REG_GUILD_DATA@@@1@@Z PROC ; std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@V?$allocator@U_CS_REG_GUILD_DATA@@@1@@Z ENDP ; std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QAE@PAU_CS_REG_GUILD_DATA@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QAE@PAU_CS_REG_GUILD_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QAE@PAU_CS_REG_GUILD_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QAE@PAU_CS_REG_GUILD_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEII@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1275 : 		size_type _Capacity = capacity();

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]
  00009	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000e	f7 ee		 imul	 esi
  00010	03 d6		 add	 edx, esi
  00012	c1 fa 04	 sar	 edx, 4
  00015	8b c2		 mov	 eax, edx
  00017	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001a	03 c2		 add	 eax, edx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0001c	8b c8		 mov	 ecx, eax
  0001e	d1 e9		 shr	 ecx, 1
  00020	ba 49 92 24 09	 mov	 edx, 153391689		; 09249249H
  00025	2b d1		 sub	 edx, ecx
  00027	5e		 pop	 esi
  00028	3b d0		 cmp	 edx, eax
  0002a	73 04		 jae	 SHORT $LN4@Grow_to
  0002c	33 c0		 xor	 eax, eax
  0002e	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00030	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00032	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00035	3b c1		 cmp	 eax, ecx
  00037	73 02		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00039	8b c1		 mov	 eax, ecx
$LN1@Grow_to:

; 1282 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 2c f7 34 02	 mov	 eax, 37025580		; 0234f72cH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEII@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1275 : 		size_type _Capacity = capacity();

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]
  00009	b8 09 cb 3d 8d	 mov	 eax, -1925330167	; 8d3dcb09H
  0000e	f7 ee		 imul	 esi
  00010	03 d6		 add	 edx, esi
  00012	c1 fa 06	 sar	 edx, 6
  00015	8b c2		 mov	 eax, edx
  00017	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001a	03 c2		 add	 eax, edx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0001c	8b c8		 mov	 ecx, eax
  0001e	d1 e9		 shr	 ecx, 1
  00020	ba 2c f7 34 02	 mov	 edx, 37025580		; 0234f72cH
  00025	2b d1		 sub	 edx, ecx
  00027	5e		 pop	 esi
  00028	3b d0		 cmp	 edx, eax
  0002a	73 04		 jae	 SHORT $LN4@Grow_to@2
  0002c	33 c0		 xor	 eax, eax
  0002e	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  00030	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00032	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00035	3b c1		 cmp	 eax, ecx
  00037	73 02		 jae	 SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00039	8b c1		 mov	 eax, ecx
$LN1@Grow_to@2:

; 1282 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lbound
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@ABH@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1741 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1742 : 		_Nodeptr _Pnode = _Root();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00009	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  00010	75 1c		 jne	 SHORT $LN3@Lbound
  00012	8b 55 08	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00015	8b 12		 mov	 edx, DWORD PTR [edx]
$LL4@Lbound:

; 1746 : 			if (_DEBUG_LT_PRED(this->comp, this->_Key(_Pnode), _Keyval))

  00017	39 51 0c	 cmp	 DWORD PTR [ecx+12], edx
  0001a	7d 05		 jge	 SHORT $LN2@Lbound

; 1747 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  0001c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1748 : 			else

  0001f	eb 04		 jmp	 SHORT $LN1@Lbound
$LN2@Lbound:

; 1749 : 				{	// _Pnode not less than _Keyval, remember it
; 1750 : 				_Wherenode = _Pnode;

  00021	8b c1		 mov	 eax, ecx

; 1751 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00023	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN1@Lbound:

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00025	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  0002c	74 e9		 je	 SHORT $LL4@Lbound
$LN3@Lbound:

; 1752 : 				}
; 1753 : 
; 1754 : 		return (_Wherenode);	// return best remembered candidate
; 1755 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to@3
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to@3
$LN4@Grow_to@3:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to@3:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to@3

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to@3:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >, COMDAT
; _this$ = ecx

; 213  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 214  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >, COMDAT
; _this$ = ecx

; 213  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 214  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >, COMDAT
; _this$ = ecx

; 213  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 214  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEII@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 03	 mov	 edx, 67108863		; 03ffffffH
  0000d	c1 f8 06	 sar	 eax, 6
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to@4
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to@4
$LN4@Grow_to@4:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to@4:

; 1279 : 		if (_Capacity < _Count)

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	3b c1		 cmp	 eax, ecx
  00025	73 02		 jae	 SHORT $LN1@Grow_to@4

; 1280 : 			_Capacity = _Count;
; 1281 : 		return (_Capacity);

  00027	8b c1		 mov	 eax, ecx
$LN1@Grow_to@4:

; 1282 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Grow_to@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Grow_to
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1450 : 		{	// subscript nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1451 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1452 : 		if (this->_Mysize < _Off)	// sic
; 1453 : 			_DEBUG_ERROR("string subscript out of range");
; 1454 : 
; 1455 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1456 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1457 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1458 : 
; 1459 : 		return (_Myptr()[_Off]);

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 0b		 jb	 SHORT $LN5@operator@6
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000e	03 c1		 add	 eax, ecx

; 1460 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4

; 1451 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1452 : 		if (this->_Mysize < _Off)	// sic
; 1453 : 			_DEBUG_ERROR("string subscript out of range");
; 1454 : 
; 1455 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1456 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1457 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1458 : 
; 1459 : 		return (_Myptr()[_Off]);

$LN5@operator@6:
  00014	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00017	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 1460 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEPAU_CS_SCHEDULE_DATA@@I@Z ; std::allocator<_CS_SCHEDULE_DATA>::allocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEPAU_CS_SCHEDULE_DATA@@I@Z
_TEXT	SEGMENT
$T202372 = -12						; size = 12
$T202364 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEPAU_CS_SCHEDULE_DATA@@I@Z PROC ; std::allocator<_CS_SCHEDULE_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 4a		 je	 SHORT $LN1@allocate
  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 1a		 ja	 SHORT $LN3@allocate
  00017	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001e	2b c1		 sub	 eax, ecx
  00020	03 c0		 add	 eax, eax
  00022	03 c0		 add	 eax, eax
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  00031	8d 4d 08	 lea	 ecx, DWORD PTR $T202364[ebp]
  00034	51		 push	 ecx
  00035	8d 4d f4	 lea	 ecx, DWORD PTR $T202372[ebp]
  00038	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T202364[ebp], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 55 f4	 lea	 edx, DWORD PTR $T202372[ebp]
  0004c	52		 push	 edx
  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T202372[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00054	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEPAU_CS_SCHEDULE_DATA@@I@Z ENDP ; std::allocator<_CS_SCHEDULE_DATA>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_CS_NPC_DATA@@@std@@QAEPAU_CS_NPC_DATA@@I@Z ; std::allocator<_CS_NPC_DATA>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@U_CS_NPC_DATA@@@std@@QAEPAU_CS_NPC_DATA@@I@Z
_TEXT	SEGMENT
$T202395 = -12						; size = 12
$T202387 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_CS_NPC_DATA@@@std@@QAEPAU_CS_NPC_DATA@@I@Z PROC ; std::allocator<_CS_NPC_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 40		 je	 SHORT $LN1@allocate@2
  0000f	81 f9 2c f7 34
	02		 cmp	 ecx, 37025580		; 0234f72cH
  00015	77 10		 ja	 SHORT $LN3@allocate@2
  00017	6b c9 74	 imul	 ecx, 116		; 00000074H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	75 28		 jne	 SHORT $LN1@allocate@2
$LN3@allocate@2:
  00027	8d 45 08	 lea	 eax, DWORD PTR $T202387[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T202395[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T202387[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T202395[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T202395[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@2:
$LN1@allocate@2:

; 188  : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN12@allocate@2:
?allocate@?$allocator@U_CS_NPC_DATA@@@std@@QAEPAU_CS_NPC_DATA@@I@Z ENDP ; std::allocator<_CS_NPC_DATA>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct traits from _Parg and allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 483  : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>::allocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
$T202430 = -12						; size = 12
$T202422 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 40		 je	 SHORT $LN1@allocate@3
  0000f	81 f9 ff ff ff
	03		 cmp	 ecx, 67108863		; 03ffffffH
  00015	77 10		 ja	 SHORT $LN3@allocate@3
  00017	c1 e1 06	 shl	 ecx, 6
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	75 28		 jne	 SHORT $LN1@allocate@3
$LN3@allocate@3:
  00027	8d 45 08	 lea	 eax, DWORD PTR $T202422[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T202430[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T202422[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T202430[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T202430[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@3:
$LN1@allocate@3:

; 188  : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN12@allocate@3:
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct traits from _Parg and allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 483  : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>::allocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
$T202465 = -12						; size = 12
$T202457 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 40		 je	 SHORT $LN1@allocate@4
  0000f	81 f9 ff ff 1f
	00		 cmp	 ecx, 2097151		; 001fffffH
  00015	77 10		 ja	 SHORT $LN3@allocate@4
  00017	c1 e1 0b	 shl	 ecx, 11			; 0000000bH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	75 28		 jne	 SHORT $LN1@allocate@4
$LN3@allocate@4:
  00027	8d 45 08	 lea	 eax, DWORD PTR $T202457[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T202465[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T202457[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T202465[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T202465[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@4:
$LN1@allocate@4:

; 188  : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN12@allocate@4:
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
$T202488 = -12						; size = 12
$T202480 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate@5
  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 14		 ja	 SHORT $LN3@allocate@5
  00017	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate@5
$LN3@allocate@5:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T202480[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T202488[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T202480[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T202488[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T202488[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@5:
$LN1@allocate@5:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate@5:
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lmost
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1759 : 		return (this->_Left(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1760 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Root
; Function compile flags: /Ogtp
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1789 : 		return (this->_Parent(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1790 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Root
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct traits from _Parg and allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 483  : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::allocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
$T202536 = -12						; size = 12
$T202528 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 46		 je	 SHORT $LN1@allocate@6
  0000f	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00015	77 16		 ja	 SHORT $LN3@allocate@6
  00017	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	03 c0		 add	 eax, eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	75 28		 jne	 SHORT $LN1@allocate@6
$LN3@allocate@6:
  0002d	8d 4d 08	 lea	 ecx, DWORD PTR $T202528[ebp]
  00030	51		 push	 ecx
  00031	8d 4d f4	 lea	 ecx, DWORD PTR $T202536[ebp]
  00034	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T202528[ebp], 0
  0003b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00040	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00045	8d 55 f4	 lea	 edx, DWORD PTR $T202536[ebp]
  00048	52		 push	 edx
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T202536[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@6:
$LN1@allocate@6:

; 188  : 		}

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN12@allocate@6:
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator++
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 59   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 10		 mov	 edx, DWORD PTR [eax]
  00004	80 7a 3d 00	 cmp	 BYTE PTR [edx+61], 0
  00008	75 40		 jne	 SHORT $LN3@operator@7

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0000d	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  00011	75 1a		 jne	 SHORT $LN34@operator@7

; 62   : 			_Ptr = _Mytree::_Min(
; 63   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	80 7a 3d 00	 cmp	 BYTE PTR [edx+61], 0
  00019	75 0f		 jne	 SHORT $LN17@operator@7
  0001b	eb 03 8d 49 00	 npad	 5
$LL18@operator@7:
  00020	8b ca		 mov	 ecx, edx
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	80 7a 3d 00	 cmp	 BYTE PTR [edx+61], 0
  00028	74 f6		 je	 SHORT $LL18@operator@7
$LN17@operator@7:
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0002c	c3		 ret	 0
$LN34@operator@7:

; 64   : 		else
; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00030	80 7a 3d 00	 cmp	 BYTE PTR [edx+61], 0
  00034	75 12		 jne	 SHORT $LN1@operator@7
$LL2@operator@7:
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0003b	75 0b		 jne	 SHORT $LN1@operator@7

; 69   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003d	89 10		 mov	 DWORD PTR [eax], edx
  0003f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00042	80 7a 3d 00	 cmp	 BYTE PTR [edx+61], 0
  00046	74 ee		 je	 SHORT $LL2@operator@7
$LN1@operator@7:

; 70   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00048	89 10		 mov	 DWORD PTR [eax], edx
$LN3@operator@7:

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0004a	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 59   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 10		 mov	 edx, DWORD PTR [eax]
  00004	80 ba fd 07 00
	00 00		 cmp	 BYTE PTR [edx+2045], 0
  0000b	75 4a		 jne	 SHORT $LN3@operator@8

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000d	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00010	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  00017	75 1b		 jne	 SHORT $LN34@operator@8

; 62   : 			_Ptr = _Mytree::_Min(
; 63   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	80 ba fd 07 00
	00 00		 cmp	 BYTE PTR [edx+2045], 0
  00022	75 0d		 jne	 SHORT $LN17@operator@8
$LL18@operator@8:
  00024	8b ca		 mov	 ecx, edx
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	80 ba fd 07 00
	00 00		 cmp	 BYTE PTR [edx+2045], 0
  0002f	74 f3		 je	 SHORT $LL18@operator@8
$LN17@operator@8:
  00031	89 08		 mov	 DWORD PTR [eax], ecx

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  00033	c3		 ret	 0
$LN34@operator@8:

; 64   : 		else
; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  00034	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00037	80 ba fd 07 00
	00 00		 cmp	 BYTE PTR [edx+2045], 0
  0003e	75 15		 jne	 SHORT $LN1@operator@8
$LL2@operator@8:
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  00045	75 0e		 jne	 SHORT $LN1@operator@8

; 69   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00047	89 10		 mov	 DWORD PTR [eax], edx
  00049	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0004c	80 ba fd 07 00
	00 00		 cmp	 BYTE PTR [edx+2045], 0
  00053	74 eb		 je	 SHORT $LL2@operator@8
$LN1@operator@8:

; 70   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00055	89 10		 mov	 DWORD PTR [eax], edx
$LN3@operator@8:

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  00057	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEPAU_CS_REG_GUILD_DATA@@I@Z ; std::allocator<_CS_REG_GUILD_DATA>::allocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEPAU_CS_REG_GUILD_DATA@@I@Z
_TEXT	SEGMENT
$T202659 = -12						; size = 12
$T202651 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEPAU_CS_REG_GUILD_DATA@@I@Z PROC ; std::allocator<_CS_REG_GUILD_DATA>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 40		 je	 SHORT $LN1@allocate@7
  0000f	81 f9 ff ff ff
	03		 cmp	 ecx, 67108863		; 03ffffffH
  00015	77 10		 ja	 SHORT $LN3@allocate@7
  00017	c1 e1 06	 shl	 ecx, 6
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	75 28		 jne	 SHORT $LN1@allocate@7
$LN3@allocate@7:
  00027	8d 45 08	 lea	 eax, DWORD PTR $T202651[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR $T202659[ebp]
  0002e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T202651[ebp], 0
  00035	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T202659[ebp]
  00042	51		 push	 ecx
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T202659[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@7:
$LN1@allocate@7:

; 188  : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN12@allocate@7:
?allocate@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEPAU_CS_REG_GUILD_DATA@@I@Z ENDP ; std::allocator<_CS_REG_GUILD_DATA>::allocate
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lrotate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1763 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1764 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00009	56		 push	 esi

; 1765 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1766 : 
; 1767 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
  00011	80 7e 3d 00	 cmp	 BYTE PTR [esi+61], 0
  00015	75 03		 jne	 SHORT $LN5@Lrotate

; 1768 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate:

; 1769 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1770 : 
; 1771 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0c		 jne	 SHORT $LN4@Lrotate

; 1772 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN4@Lrotate:

; 1773 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0b		 jne	 SHORT $LN2@Lrotate

; 1774 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0003e	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  00040	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN2@Lrotate:

; 1775 : 		else
; 1776 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Rrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1793 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1794 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	56		 push	 esi

; 1795 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000c	89 32		 mov	 DWORD PTR [edx], esi

; 1796 : 
; 1797 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0000e	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00011	80 7e 3d 00	 cmp	 BYTE PTR [esi+61], 0
  00015	75 03		 jne	 SHORT $LN5@Rrotate

; 1798 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate:

; 1799 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1800 : 
; 1801 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0d		 jne	 SHORT $LN4@Rrotate

; 1802 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN4@Rrotate:

; 1803 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0d		 jne	 SHORT $LN2@Rrotate

; 1804 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  00041	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00044	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN2@Rrotate:

; 1805 : 		else
; 1806 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1763 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1764 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00009	56		 push	 esi

; 1765 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1766 : 
; 1767 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
  00011	80 be fd 07 00
	00 00		 cmp	 BYTE PTR [esi+2045], 0
  00018	75 03		 jne	 SHORT $LN5@Lrotate@2

; 1768 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  0001a	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate@2:

; 1769 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001d	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00020	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1770 : 
; 1771 : 		if (_Wherenode == _Root())

  00023	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00026	5e		 pop	 esi
  00027	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0002a	75 0c		 jne	 SHORT $LN4@Lrotate@2

; 1772 : 			_Root() = _Pnode;

  0002c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0002f	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  00031	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN4@Lrotate@2:

; 1773 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00038	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0003b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003d	75 0b		 jne	 SHORT $LN2@Lrotate@2

; 1774 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003f	89 01		 mov	 DWORD PTR [ecx], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  00041	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  00043	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN2@Lrotate@2:

; 1775 : 		else
; 1776 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0004a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0004d	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0004f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Rrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1793 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1794 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	56		 push	 esi

; 1795 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000c	89 32		 mov	 DWORD PTR [edx], esi

; 1796 : 
; 1797 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0000e	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00011	80 be fd 07 00
	00 00		 cmp	 BYTE PTR [esi+2045], 0
  00018	75 03		 jne	 SHORT $LN5@Rrotate@2

; 1798 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  0001a	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate@2:

; 1799 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001d	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00020	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1800 : 
; 1801 : 		if (_Wherenode == _Root())

  00023	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00026	5e		 pop	 esi
  00027	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0002a	75 0d		 jne	 SHORT $LN4@Rrotate@2

; 1802 : 			_Root() = _Pnode;

  0002c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0002f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00032	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN4@Rrotate@2:

; 1803 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00039	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0003c	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003f	75 0d		 jne	 SHORT $LN2@Rrotate@2

; 1804 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00041	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  00044	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00047	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN2@Rrotate@2:

; 1805 : 		else
; 1806 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004e	89 01		 mov	 DWORD PTR [ecx], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  00050	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00053	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 1887 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1888 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1889 : 		if (_Count != 0)
; 1890 : 			_DEBUG_POINTER(_Ptr);
; 1891 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1892 : 
; 1893 : 		if (this->_Mysize < _Off)

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR __Off$[ebp]
  0000c	3b c7		 cmp	 eax, edi
  0000e	73 0a		 jae	 SHORT $LN2@compare@2

; 1894 : 			_Xran();	// _Off off end

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00015	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN19@compare@2:
$LN2@compare@2:

; 1895 : 		if (this->_Mysize - _Off < _N0)

  0001a	8b 75 0c	 mov	 esi, DWORD PTR __N0$[ebp]
  0001d	2b c7		 sub	 eax, edi
  0001f	3b c6		 cmp	 eax, esi
  00021	73 02		 jae	 SHORT $LN1@compare@2

; 1896 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size

  00023	8b f0		 mov	 esi, eax
$LN1@compare@2:

; 1897 : 
; 1898 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 1899 : 			_N0 < _Count ? _N0 : _Count);

  00025	8b 5d 14	 mov	 ebx, DWORD PTR __Count$[ebp]
  00028	8b d6		 mov	 edx, esi
  0002a	3b f3		 cmp	 esi, ebx
  0002c	72 02		 jb	 SHORT $LN6@compare@2
  0002e	8b d3		 mov	 edx, ebx
$LN6@compare@2:
  00030	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00034	72 04		 jb	 SHORT $LN16@compare@2
  00036	8b 01		 mov	 eax, DWORD PTR [ecx]
  00038	eb 02		 jmp	 SHORT $LN17@compare@2
$LN16@compare@2:
  0003a	8b c1		 mov	 eax, ecx
$LN17@compare@2:
  0003c	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003f	52		 push	 edx
  00040	51		 push	 ecx
  00041	03 c7		 add	 eax, edi
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1900 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 1901 : 			: _N0 == _Count ? 0 : +1);

  0004c	85 c0		 test	 eax, eax
  0004e	75 15		 jne	 SHORT $LN8@compare@2
  00050	3b f3		 cmp	 esi, ebx
  00052	73 0a		 jae	 SHORT $LN7@compare@2
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	83 c8 ff	 or	 eax, -1
  00059	5b		 pop	 ebx

; 1902 : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 10 00	 ret	 16			; 00000010H
$LN7@compare@2:

; 1900 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 1901 : 			: _N0 == _Count ? 0 : +1);

  0005e	33 c0		 xor	 eax, eax
  00060	3b f3		 cmp	 esi, ebx
  00062	0f 95 c0	 setne	 al
$LN8@compare@2:
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx

; 1902 : 		}

  00068	5d		 pop	 ebp
  00069	c2 10 00	 ret	 16			; 00000010H
$LN18@compare@2:
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1763 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1764 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00009	56		 push	 esi

; 1765 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1766 : 
; 1767 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
  00011	80 7e 15 00	 cmp	 BYTE PTR [esi+21], 0
  00015	75 03		 jne	 SHORT $LN5@Lrotate@3

; 1768 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate@3:

; 1769 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1770 : 
; 1771 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0c		 jne	 SHORT $LN4@Lrotate@3

; 1772 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN4@Lrotate@3:

; 1773 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0b		 jne	 SHORT $LN2@Lrotate@3

; 1774 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0003e	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  00040	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN2@Lrotate@3:

; 1775 : 		else
; 1776 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1793 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1794 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	56		 push	 esi

; 1795 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000c	89 32		 mov	 DWORD PTR [edx], esi

; 1796 : 
; 1797 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0000e	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00011	80 7e 15 00	 cmp	 BYTE PTR [esi+21], 0
  00015	75 03		 jne	 SHORT $LN5@Rrotate@3

; 1798 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate@3:

; 1799 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1800 : 
; 1801 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0d		 jne	 SHORT $LN4@Rrotate@3

; 1802 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN4@Rrotate@3:

; 1803 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0d		 jne	 SHORT $LN2@Rrotate@3

; 1804 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  00041	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00044	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN2@Rrotate@3:

; 1805 : 		else
; 1806 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 250  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 251  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 252  : 		if (this->_Getcont() == 0
; 253  : 			|| this->_Ptr == 0
; 254  : 			|| _Mytree::_Isnil(this->_Ptr))
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 263  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 264  : 
; 265  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator++

; 266  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 267  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??$?0HH@?$pair@IH@std@@QAE@$$QAH0@Z		; std::pair<unsigned int,int>::pair<unsigned int,int><int,int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0HH@?$pair@IH@std@@QAE@$$QAH0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HH@?$pair@IH@std@@QAE@$$QAH0@Z PROC		; std::pair<unsigned int,int>::pair<unsigned int,int><int,int>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0HH@?$pair@IH@std@@QAE@$$QAH0@Z ENDP		; std::pair<unsigned int,int>::pair<unsigned int,int><int,int>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 2d		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001c	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00022	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00025	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00028	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002e	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00031	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00034	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN7@Cons_val:

; 281  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN7@Cons_val@2
  0000a	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
$LN7@Cons_val@2:

; 281  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ; std::_Cons_val<std::allocator<int>,int,int &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val@3
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN7@Cons_val@3:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int &>
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00@Z		; std::_Move<int *,int *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAHPAH@std@@YAPAHPAH00@Z PROC			; std::_Move<int *,int *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi
  0000a	2b c1		 sub	 eax, ecx
  0000c	57		 push	 edi
  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	c1 f8 02	 sar	 eax, 2
  00013	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0001a	56		 push	 esi
  0001b	51		 push	 ecx
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2536 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00@Z ENDP			; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  : 	_Ty _Tmp = _Move(_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	56		 push	 esi

; 103  : 	_Left = _Move(_Right);

  00009	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0000c	8a 16		 mov	 dl, BYTE PTR [esi]
  0000e	88 10		 mov	 BYTE PTR [eax], dl

; 104  : 	_Right = _Move(_Tmp);

  00010	88 0e		 mov	 BYTE PTR [esi], cl
  00012	5e		 pop	 esi

; 105  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1952 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1953 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1954 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@ABU3@@Z ; std::allocator<_CS_SCHEDULE_DATA>::construct
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@ABU3@@Z PROC ; std::allocator<_CS_SCHEDULE_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 2d		 je	 SHORT $LN5@construct@4
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001c	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00022	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00025	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00028	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002e	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00031	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00034	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN5@construct@4:

; 198  : 		}

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?construct@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@ABU3@@Z ENDP ; std::allocator<_CS_SCHEDULE_DATA>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@ABU3@@Z ; std::allocator<_CS_NPC_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@ABU3@@Z PROC ; std::allocator<_CS_NPC_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN5@construct@5
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
$LN5@construct@5:

; 198  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?construct@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@ABU3@@Z ENDP ; std::allocator<_CS_NPC_DATA>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@H@std@@QAEXPAHABH@Z	; std::allocator<int>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@H@std@@QAEXPAHABH@Z PROC		; std::allocator<int>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@6
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct@6:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@H@std@@QAEXPAHABH@Z ENDP		; std::allocator<int>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U?$pair@$$CBIH@std@@@std@@QAEXPAU?$pair@$$CBIH@2@@Z ; std::allocator<std::pair<unsigned int const ,int> >::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U?$pair@$$CBIH@std@@@std@@QAEXPAU?$pair@$$CBIH@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U?$pair@$$CBIH@std@@@std@@QAEXPAU?$pair@$$CBIH@2@@Z PROC ; std::allocator<std::pair<unsigned int const ,int> >::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U?$pair@$$CBIH@std@@@std@@QAEXPAU?$pair@$$CBIH@2@@Z ENDP ; std::allocator<std::pair<unsigned int const ,int> >::destroy
_TEXT	ENDS
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator-
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator-, COMDAT
; _this$ = ecx

; 380  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 		return (*(_Mybase *)this - _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	2b 08		 sub	 ecx, DWORD PTR [eax]
  0000a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000f	f7 e9		 imul	 ecx
  00011	03 d1		 add	 edx, ecx
  00013	c1 fa 04	 sar	 edx, 4
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx

; 382  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator-
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1108 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1109 : 		if (this->_Mysize < _Off)

  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000c	57		 push	 edi
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0a		 jae	 SHORT $LN3@erase

; 1110 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN28@erase:
$LN3@erase:

; 1111 : 		if (this->_Mysize - _Off < _Count)

  0001b	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0001e	2b c1		 sub	 eax, ecx
  00020	3b c7		 cmp	 eax, edi
  00022	73 02		 jae	 SHORT $LN2@erase

; 1112 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00024	8b f8		 mov	 edi, eax
$LN2@erase:

; 1113 : 		if (0 < _Count)

  00026	85 ff		 test	 edi, edi
  00028	74 50		 je	 SHORT $LN25@erase

; 1114 : 			{	// move elements down
; 1115 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1116 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	53		 push	 ebx
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b de		 mov	 ebx, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c7		 sub	 eax, edi
  00046	03 d9		 add	 ebx, ecx
  00048	50		 push	 eax
  00049	03 df		 add	 ebx, edi
  0004b	03 d1		 add	 edx, ecx
  0004d	53		 push	 ebx
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _memmove

; 1117 : 			size_type _Newsize = this->_Mysize - _Count;

  00054	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	2b c7		 sub	 eax, edi

; 1118 : 			_Eos(_Newsize);

  0005c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00060	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00063	5b		 pop	 ebx
  00064	72 0e		 jb	 SHORT $LN23@erase
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0006c	5f		 pop	 edi

; 1119 : 			}
; 1120 : 		return (*this);

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1121 : 		}

  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8

; 1118 : 			_Eos(_Newsize);

$LN23@erase:
  00074	8b ce		 mov	 ecx, esi
  00076	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1119 : 			}
; 1120 : 		return (*this);

  0007a	5f		 pop	 edi
  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi

; 1121 : 		}

  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1516 : 		size_type _Num = this->_Alval.max_size();
; 1517 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1518 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
$T203444 = -12						; size = 12
$T203436 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 3a		 je	 SHORT $LN1@allocate@8
  0000f	83 f9 ff	 cmp	 ecx, -1
  00012	77 0d		 ja	 SHORT $LN3@allocate@8
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	75 28		 jne	 SHORT $LN1@allocate@8
$LN3@allocate@8:
  00021	8d 45 08	 lea	 eax, DWORD PTR $T203436[ebp]
  00024	50		 push	 eax
  00025	8d 4d f4	 lea	 ecx, DWORD PTR $T203444[ebp]
  00028	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T203436[ebp], 0
  0002f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00034	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00039	8d 4d f4	 lea	 ecx, DWORD PTR $T203444[ebp]
  0003c	51		 push	 ecx
  0003d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T203444[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00044	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@8:
$LN1@allocate@8:

; 188  : 		}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN12@allocate@8:
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::operator-
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::operator-, COMDAT
; _this$ = ecx

; 190  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 191  : 		_Compat(_Right);
; 192  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	c1 f8 06	 sar	 eax, 6

; 193  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::operator-
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::max_size, COMDAT
; _this$ = ecx

; 874  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 05	 mov	 eax, 89478485		; 05555555H

; 875  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::max_size
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::max_size, COMDAT
; _this$ = ecx

; 874  : 		return (this->_Alval.max_size());

  00000	b8 81 40 20 00	 mov	 eax, 2113665		; 00204081H

; 875  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::max_size, COMDAT
; _this$ = ecx

; 874  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 875  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::max_size
_TEXT	ENDS
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator--
; Function compile flags: /Ogtp
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 277  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 278  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 279  : 		if (this->_Getcont() == 0
; 280  : 			|| this->_Ptr == 0)
; 281  : 			{	// report error
; 282  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 283  : 			_SCL_SECURE_OUT_OF_RANGE;
; 284  : 			}
; 285  : 
; 286  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 287  : 		--(*(_Mybase *)this);
; 288  : 		if (_Ptrsav == this->_Ptr)
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 295  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 296  : 
; 297  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 298  : 		--(*(_Mybase *)this);
; 299  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 300  : 
; 301  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 302  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator--

; 303  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 304  : 
; 305  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 306  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 146  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator--
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 277  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 278  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 279  : 		if (this->_Getcont() == 0
; 280  : 			|| this->_Ptr == 0)
; 281  : 			{	// report error
; 282  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 283  : 			_SCL_SECURE_OUT_OF_RANGE;
; 284  : 			}
; 285  : 
; 286  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 287  : 		--(*(_Mybase *)this);
; 288  : 		if (_Ptrsav == this->_Ptr)
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 295  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 296  : 
; 297  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 298  : 		--(*(_Mybase *)this);
; 299  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 300  : 
; 301  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 302  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator--

; 303  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 304  : 
; 305  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 306  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 146  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator--
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 277  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 278  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 279  : 		if (this->_Getcont() == 0
; 280  : 			|| this->_Ptr == 0)
; 281  : 			{	// report error
; 282  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 283  : 			_SCL_SECURE_OUT_OF_RANGE;
; 284  : 			}
; 285  : 
; 286  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 287  : 		--(*(_Mybase *)this);
; 288  : 		if (_Ptrsav == this->_Ptr)
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 295  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 296  : 
; 297  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 298  : 		--(*(_Mybase *)this);
; 299  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 300  : 
; 301  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 302  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator--

; 303  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 304  : 
; 305  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 306  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 146  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@YAPAU_CS_SCHEDULE_DATA@@V?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@YAPAU_CS_SCHEDULE_DATA@@V?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@YAPAU_CS_SCHEDULE_DATA@@V?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >, COMDAT

; 393  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 395  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@YAPAU_CS_SCHEDULE_DATA@@V?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >
_TEXT	ENDS
PUBLIC	??$?0AAHAAU_CS_MINIMAP_DATA@@@?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@AAHAAU_CS_MINIMAP_DATA@@@Z ; std::_Pair_base<int,_CS_MINIMAP_DATA>::_Pair_base<int,_CS_MINIMAP_DATA><int &,_CS_MINIMAP_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAHAAU_CS_MINIMAP_DATA@@@?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@AAHAAU_CS_MINIMAP_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAU_CS_MINIMAP_DATA@@@?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@AAHAAU_CS_MINIMAP_DATA@@@Z PROC ; std::_Pair_base<int,_CS_MINIMAP_DATA>::_Pair_base<int,_CS_MINIMAP_DATA><int &,_CS_MINIMAP_DATA &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00016	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00019	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001f	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00022	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00025	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00028	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0002e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00031	56		 push	 esi
  00032	57		 push	 edi
  00033	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00036	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00039	8d 71 1c	 lea	 esi, DWORD PTR [ecx+28]
  0003c	8d 78 20	 lea	 edi, DWORD PTR [eax+32]
  0003f	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00044	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00047	f3 a5		 rep movsd
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 164  : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
??$?0AAHAAU_CS_MINIMAP_DATA@@@?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@AAHAAU_CS_MINIMAP_DATA@@@Z ENDP ; std::_Pair_base<int,_CS_MINIMAP_DATA>::_Pair_base<int,_CS_MINIMAP_DATA><int &,_CS_MINIMAP_DATA &>
_TEXT	ENDS
PUBLIC	??$?0ABHAAU_CS_MINIMAP_DATA@@@?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@ABHAAU_CS_MINIMAP_DATA@@@Z ; std::_Pair_base<int,_CS_MINIMAP_DATA>::_Pair_base<int,_CS_MINIMAP_DATA><int const &,_CS_MINIMAP_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0ABHAAU_CS_MINIMAP_DATA@@@?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@ABHAAU_CS_MINIMAP_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABHAAU_CS_MINIMAP_DATA@@@?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@ABHAAU_CS_MINIMAP_DATA@@@Z PROC ; std::_Pair_base<int,_CS_MINIMAP_DATA>::_Pair_base<int,_CS_MINIMAP_DATA><int const &,_CS_MINIMAP_DATA &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00016	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00019	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001f	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00022	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00025	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00028	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0002e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00031	56		 push	 esi
  00032	57		 push	 edi
  00033	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00036	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00039	8d 71 1c	 lea	 esi, DWORD PTR [ecx+28]
  0003c	8d 78 20	 lea	 edi, DWORD PTR [eax+32]
  0003f	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00044	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00047	f3 a5		 rep movsd
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 164  : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
??$?0ABHAAU_CS_MINIMAP_DATA@@@?$_Pair_base@HU_CS_MINIMAP_DATA@@@std@@QAE@ABHAAU_CS_MINIMAP_DATA@@@Z ENDP ; std::_Pair_base<int,_CS_MINIMAP_DATA>::_Pair_base<int,_CS_MINIMAP_DATA><int const &,_CS_MINIMAP_DATA &>
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@YAPAU_CS_REG_GUILD_DATA@@V?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@YAPAU_CS_REG_GUILD_DATA@@V?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@YAPAU_CS_REG_GUILD_DATA@@V?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >, COMDAT

; 393  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 395  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@YAPAU_CS_REG_GUILD_DATA@@V?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >, COMDAT

; 393  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 395  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??$_Rechecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAV10@PAH@Z ; std::_Rechecked<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Rechecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAV10@PAH@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Rechecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAV10@PAH@Z PROC ; std::_Rechecked<std::_Vector_val<int,std::allocator<int> > >, COMDAT

; 402  : 	{	// convert to checked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 403  : 	return (_Iter._Rechecked(_Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 404  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAV10@PAH@Z ENDP ; std::_Rechecked<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??$_Move@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	3b c2		 cmp	 eax, edx
  0000b	74 3a		 je	 SHORT $LN12@Move
  0000d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00010	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00013	56		 push	 esi
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00014	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  00017	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0001c	89 70 08	 mov	 DWORD PTR [eax+8], esi
  0001f	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00022	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  00025	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00028	89 70 10	 mov	 DWORD PTR [eax+16], esi
  0002b	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  0002e	89 70 14	 mov	 DWORD PTR [eax+20], esi
  00031	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  00034	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00037	89 70 18	 mov	 DWORD PTR [eax+24], esi
  0003a	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  0003d	83 c0 1c	 add	 eax, 28			; 0000001cH
  00040	3b f2		 cmp	 esi, edx
  00042	75 d0		 jne	 SHORT $LL3@Move
  00044	5e		 pop	 esi

; 2516 : 	}

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN12@Move:

; 2515 : 	return (_Dest);

  00047	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2516 : 	}

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??$_Move@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Move@PAU_CS_NPC_DATA@@PAU1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<_CS_NPC_DATA *,_CS_NPC_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAU_CS_NPC_DATA@@PAU1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAU_CS_NPC_DATA@@PAU1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<_CS_NPC_DATA *,_CS_NPC_DATA *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	3b c6		 cmp	 eax, esi
  0000c	0f 84 dd 00 00
	00		 je	 $LN12@Move@2
  00012	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LL3@Move@2:

; 2514 : 		*_Dest = _STD move(*_First);

  00018	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0001b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00020	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00032	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00035	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00038	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0003b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003e	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00041	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00044	89 50 20	 mov	 DWORD PTR [eax+32], edx
  00047	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0004a	89 50 24	 mov	 DWORD PTR [eax+36], edx
  0004d	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00050	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00053	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00056	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  00059	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0005c	89 50 30	 mov	 DWORD PTR [eax+48], edx
  0005f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00062	89 50 34	 mov	 DWORD PTR [eax+52], edx
  00065	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00068	89 50 38	 mov	 DWORD PTR [eax+56], edx
  0006b	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0006e	89 50 3c	 mov	 DWORD PTR [eax+60], edx
  00071	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00074	89 50 40	 mov	 DWORD PTR [eax+64], edx
  00077	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0007a	89 50 44	 mov	 DWORD PTR [eax+68], edx
  0007d	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00080	89 50 48	 mov	 DWORD PTR [eax+72], edx
  00083	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00086	89 50 4c	 mov	 DWORD PTR [eax+76], edx
  00089	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  0008c	89 50 50	 mov	 DWORD PTR [eax+80], edx
  0008f	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00092	89 50 54	 mov	 DWORD PTR [eax+84], edx
  00095	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00098	89 50 58	 mov	 DWORD PTR [eax+88], edx
  0009b	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0009e	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  000a1	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  000a4	89 50 60	 mov	 DWORD PTR [eax+96], edx
  000a7	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  000aa	89 50 64	 mov	 DWORD PTR [eax+100], edx
  000ad	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000b0	89 50 68	 mov	 DWORD PTR [eax+104], edx
  000b3	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  000b6	89 50 6c	 mov	 DWORD PTR [eax+108], edx
  000b9	0f b6 51 68	 movzx	 edx, BYTE PTR [ecx+104]
  000bd	88 50 70	 mov	 BYTE PTR [eax+112], dl
  000c0	0f b6 51 69	 movzx	 edx, BYTE PTR [ecx+105]
  000c4	88 50 71	 mov	 BYTE PTR [eax+113], dl
  000c7	0f b6 51 6a	 movzx	 edx, BYTE PTR [ecx+106]
  000cb	88 50 72	 mov	 BYTE PTR [eax+114], dl
  000ce	0f b6 51 6b	 movzx	 edx, BYTE PTR [ecx+107]
  000d2	88 50 73	 mov	 BYTE PTR [eax+115], dl
  000d5	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  000d8	83 c1 74	 add	 ecx, 116		; 00000074H
  000db	89 50 70	 mov	 DWORD PTR [eax+112], edx
  000de	8d 51 f8	 lea	 edx, DWORD PTR [ecx-8]
  000e1	83 c0 74	 add	 eax, 116		; 00000074H
  000e4	3b d6		 cmp	 edx, esi
  000e6	0f 85 2c ff ff
	ff		 jne	 $LL3@Move@2
  000ec	5e		 pop	 esi

; 2516 : 	}

  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
$LN12@Move@2:

; 2515 : 	return (_Dest);

  000ef	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  000f2	5e		 pop	 esi

; 2516 : 	}

  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
??$_Move@PAU_CS_NPC_DATA@@PAU1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<_CS_NPC_DATA *,_CS_NPC_DATA *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::allocator<int> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi
  0000c	c1 f8 02	 sar	 eax, 2
  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 472  : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &,bool>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??1?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@XZ	; std::pair<int const ,_CS_MINIMAP_DATA>::~pair<int const ,_CS_MINIMAP_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??1?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@XZ PROC	; std::pair<int const ,_CS_MINIMAP_DATA>::~pair<int const ,_CS_MINIMAP_DATA>, COMDAT
; _this$ = ecx
  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00007	c3		 ret	 0
??1?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@XZ ENDP	; std::pair<int const ,_CS_MINIMAP_DATA>::~pair<int const ,_CS_MINIMAP_DATA>
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Buynode@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
$T203716 = -16						; size = 12
$T203694 = -4						; size = 4
?_Buynode@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 559  : 		{	// allocate a node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00007	6a 40		 push	 64			; 00000040H
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	33 c9		 xor	 ecx, ecx
  00012	83 c4 04	 add	 esp, 4
  00015	3b c1		 cmp	 eax, ecx
  00017	74 1a		 je	 SHORT $LN5@Buynode

; 561  : 
; 562  : 		this->_Left(_Wherenode) = this->_Myhead;

  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	89 10		 mov	 DWORD PTR [eax], edx

; 563  : 		this->_Parent(_Wherenode) = this->_Myhead;

  0001e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 564  : 		this->_Right(_Wherenode) = this->_Myhead;

  00024	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00027	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 565  : 		this->_Color(_Wherenode) = this->_Red;

  0002a	66 89 48 3c	 mov	 WORD PTR [eax+60], cx
  0002e	5e		 pop	 esi

; 566  : 		this->_Isnil(_Wherenode) = false;
; 567  : 		return (_Wherenode);
; 568  : 		}

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

$LN5@Buynode:
  00033	8d 45 fc	 lea	 eax, DWORD PTR $T203694[ebp]
  00036	89 4d fc	 mov	 DWORD PTR $T203694[ebp], ecx
  00039	50		 push	 eax
  0003a	8d 4d f0	 lea	 ecx, DWORD PTR $T203716[ebp]
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00042	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00047	8d 4d f0	 lea	 ecx, DWORD PTR $T203716[ebp]
  0004a	51		 push	 ecx
  0004b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T203716[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00052	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Buynode:
$LN26@Buynode:
  00057	cc		 int	 3
?_Buynode@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Buynode
; Function compile flags: /Ogtp
;	COMDAT ?_Buynode@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
$T203770 = -16						; size = 12
$T203747 = -4						; size = 4
?_Buynode@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 559  : 		{	// allocate a node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00007	68 00 08 00 00	 push	 2048			; 00000800H
  0000c	8b f1		 mov	 esi, ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	33 c9		 xor	 ecx, ecx
  00015	83 c4 04	 add	 esp, 4
  00018	3b c1		 cmp	 eax, ecx
  0001a	74 1d		 je	 SHORT $LN5@Buynode@2

; 561  : 
; 562  : 		this->_Left(_Wherenode) = this->_Myhead;

  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	89 10		 mov	 DWORD PTR [eax], edx

; 563  : 		this->_Parent(_Wherenode) = this->_Myhead;

  00021	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00024	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 564  : 		this->_Right(_Wherenode) = this->_Myhead;

  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 565  : 		this->_Color(_Wherenode) = this->_Red;

  0002d	66 89 88 fc 07
	00 00		 mov	 WORD PTR [eax+2044], cx
  00034	5e		 pop	 esi

; 566  : 		this->_Isnil(_Wherenode) = false;
; 567  : 		return (_Wherenode);
; 568  : 		}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

$LN5@Buynode@2:
  00039	8d 45 fc	 lea	 eax, DWORD PTR $T203747[ebp]
  0003c	89 4d fc	 mov	 DWORD PTR $T203747[ebp], ecx
  0003f	50		 push	 eax
  00040	8d 4d f0	 lea	 ecx, DWORD PTR $T203770[ebp]
  00043	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00048	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0004d	8d 4d f0	 lea	 ecx, DWORD PTR $T203770[ebp]
  00050	51		 push	 ecx
  00051	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T203770[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00058	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Buynode@2:
$LN26@Buynode@2:
  0005d	cc		 int	 3
?_Buynode@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode
; Function compile flags: /Ogtp
;	COMDAT ?_Buynode@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
$T203816 = -16						; size = 12
$T203800 = -4						; size = 4
?_Buynode@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 559  : 		{	// allocate a node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00007	6a 18		 push	 24			; 00000018H
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	33 c9		 xor	 ecx, ecx
  00012	83 c4 04	 add	 esp, 4
  00015	3b c1		 cmp	 eax, ecx
  00017	74 1a		 je	 SHORT $LN5@Buynode@3

; 561  : 
; 562  : 		this->_Left(_Wherenode) = this->_Myhead;

  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	89 10		 mov	 DWORD PTR [eax], edx

; 563  : 		this->_Parent(_Wherenode) = this->_Myhead;

  0001e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 564  : 		this->_Right(_Wherenode) = this->_Myhead;

  00024	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00027	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 565  : 		this->_Color(_Wherenode) = this->_Red;

  0002a	66 89 48 14	 mov	 WORD PTR [eax+20], cx
  0002e	5e		 pop	 esi

; 566  : 		this->_Isnil(_Wherenode) = false;
; 567  : 		return (_Wherenode);
; 568  : 		}

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

$LN5@Buynode@3:
  00033	8d 45 fc	 lea	 eax, DWORD PTR $T203800[ebp]
  00036	89 4d fc	 mov	 DWORD PTR $T203800[ebp], ecx
  00039	50		 push	 eax
  0003a	8d 4d f0	 lea	 ecx, DWORD PTR $T203816[ebp]
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00042	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00047	8d 4d f0	 lea	 ecx, DWORD PTR $T203816[ebp]
  0004a	51		 push	 ecx
  0004b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T203816[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00052	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Buynode@3:
$LN26@Buynode@3:
  00057	cc		 int	 3
?_Buynode@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@@Z ; std::allocator<_CS_SCHEDULE_DATA>::destroy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@@Z PROC ; std::allocator<_CS_SCHEDULE_DATA>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 00		 push	 0
  0000c	ff d2		 call	 edx

; 214  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?destroy@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@@Z ENDP ; std::allocator<_CS_SCHEDULE_DATA>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@@Z ; std::allocator<_CS_NPC_DATA>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@@Z PROC ; std::allocator<_CS_NPC_DATA>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 00		 push	 0
  0000c	ff d2		 call	 edx

; 214  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?destroy@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@@Z ENDP ; std::allocator<_CS_NPC_DATA>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@@Z ; std::allocator<_CS_REG_GUILD_DATA>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@@Z PROC ; std::allocator<_CS_REG_GUILD_DATA>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 00		 push	 0
  0000c	ff d2		 call	 edx

; 214  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?destroy@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@@Z ENDP ; std::allocator<_CS_REG_GUILD_DATA>::destroy
_TEXT	ENDS
PUBLIC	??$?0AAPAU_CS_SCHEDULE_DATA@@AAPAU0@@?$pair@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@QAE@AAPAU_CS_SCHEDULE_DATA@@0@Z ; std::pair<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>::pair<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *><_CS_SCHEDULE_DATA * &,_CS_SCHEDULE_DATA * &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAPAU_CS_SCHEDULE_DATA@@AAPAU0@@?$pair@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@QAE@AAPAU_CS_SCHEDULE_DATA@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU_CS_SCHEDULE_DATA@@AAPAU0@@?$pair@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@QAE@AAPAU_CS_SCHEDULE_DATA@@0@Z PROC ; std::pair<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>::pair<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *><_CS_SCHEDULE_DATA * &,_CS_SCHEDULE_DATA * &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAU_CS_SCHEDULE_DATA@@AAPAU0@@?$pair@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@QAE@AAPAU_CS_SCHEDULE_DATA@@0@Z ENDP ; std::pair<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>::pair<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *><_CS_SCHEDULE_DATA * &,_CS_SCHEDULE_DATA * &>
_TEXT	ENDS
PUBLIC	??$?0AAPAU_CS_REG_GUILD_DATA@@AAPAU0@@?$pair@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@QAE@AAPAU_CS_REG_GUILD_DATA@@0@Z ; std::pair<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>::pair<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *><_CS_REG_GUILD_DATA * &,_CS_REG_GUILD_DATA * &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAPAU_CS_REG_GUILD_DATA@@AAPAU0@@?$pair@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@QAE@AAPAU_CS_REG_GUILD_DATA@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU_CS_REG_GUILD_DATA@@AAPAU0@@?$pair@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@QAE@AAPAU_CS_REG_GUILD_DATA@@0@Z PROC ; std::pair<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>::pair<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *><_CS_REG_GUILD_DATA * &,_CS_REG_GUILD_DATA * &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAU_CS_REG_GUILD_DATA@@AAPAU0@@?$pair@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@QAE@AAPAU_CS_REG_GUILD_DATA@@0@Z ENDP ; std::pair<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>::pair<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *><_CS_REG_GUILD_DATA * &,_CS_REG_GUILD_DATA * &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@$$QAU3@@Z ; std::allocator<_CS_SCHEDULE_DATA>::construct
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@$$QAU3@@Z PROC ; std::allocator<_CS_SCHEDULE_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 2d		 je	 SHORT $LN3@construct@7
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001c	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00022	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00025	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00028	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002e	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00031	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00034	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN3@construct@7:

; 203  : 		}

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?construct@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEXPAU_CS_SCHEDULE_DATA@@$$QAU3@@Z ENDP ; std::allocator<_CS_SCHEDULE_DATA>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@$$QAU3@@Z ; std::allocator<_CS_NPC_DATA>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@$$QAU3@@Z PROC ; std::allocator<_CS_NPC_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN3@construct@8
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
$LN3@construct@8:

; 203  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?construct@?$allocator@U_CS_NPC_DATA@@@std@@QAEXPAU_CS_NPC_DATA@@$$QAU3@@Z ENDP ; std::allocator<_CS_NPC_DATA>::construct
_TEXT	ENDS
PUBLIC	??$?0IH@?$pair@$$CBIH@std@@QAE@$$QAU?$pair@IH@1@@Z ; std::pair<unsigned int const ,int>::pair<unsigned int const ,int><unsigned int,int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0IH@?$pair@$$CBIH@std@@QAE@$$QAU?$pair@IH@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0IH@?$pair@$$CBIH@std@@QAE@$$QAU?$pair@IH@1@@Z PROC	; std::pair<unsigned int const ,int>::pair<unsigned int const ,int><unsigned int,int>, COMDAT
; _this$ = ecx

; 255  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 256  : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??$?0IH@?$pair@$$CBIH@std@@QAE@$$QAU?$pair@IH@1@@Z ENDP	; std::pair<unsigned int const ,int>::pair<unsigned int const ,int><unsigned int,int>
_TEXT	ENDS
PUBLIC	??$swap@U_CS_SCHEDULE_DATA@@@std@@YAXAAU_CS_SCHEDULE_DATA@@0@Z ; std::swap<_CS_SCHEDULE_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$swap@U_CS_SCHEDULE_DATA@@@std@@YAXAAU_CS_SCHEDULE_DATA@@0@Z
_TEXT	SEGMENT
__Tmp$ = -28						; size = 28
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@U_CS_SCHEDULE_DATA@@@std@@YAXAAU_CS_SCHEDULE_DATA@@0@Z PROC ; std::swap<_CS_SCHEDULE_DATA>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 102  : 	_Ty _Tmp = _Move(_Left);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0000f	89 4d f4	 mov	 DWORD PTR __Tmp$[ebp+16], ecx
  00012	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00015	53		 push	 ebx
  00016	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp+20], ecx
  00019	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001c	89 4d fc	 mov	 DWORD PTR __Tmp$[ebp+24], ecx

; 103  : 	_Left = _Move(_Right);

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00022	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  00025	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00028	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  0002b	56		 push	 esi
  0002c	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0002f	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00032	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
  00035	57		 push	 edi
  00036	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  00039	89 58 0c	 mov	 DWORD PTR [eax+12], ebx
  0003c	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
  0003f	89 58 10	 mov	 DWORD PTR [eax+16], ebx
  00042	8b 59 14	 mov	 ebx, DWORD PTR [ecx+20]
  00045	89 58 14	 mov	 DWORD PTR [eax+20], ebx
  00048	8b 59 18	 mov	 ebx, DWORD PTR [ecx+24]
  0004b	89 58 18	 mov	 DWORD PTR [eax+24], ebx

; 104  : 	_Right = _Move(_Tmp);

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Tmp$[ebp+20]
  00051	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00054	8b 55 f4	 mov	 edx, DWORD PTR __Tmp$[ebp+16]
  00057	89 79 0c	 mov	 DWORD PTR [ecx+12], edi
  0005a	5f		 pop	 edi
  0005b	89 71 08	 mov	 DWORD PTR [ecx+8], esi
  0005e	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  00061	8b 55 fc	 mov	 edx, DWORD PTR __Tmp$[ebp+24]
  00064	5e		 pop	 esi
  00065	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00068	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0006b	5b		 pop	 ebx

; 105  : 	}

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
??$swap@U_CS_SCHEDULE_DATA@@@std@@YAXAAU_CS_SCHEDULE_DATA@@0@Z ENDP ; std::swap<_CS_SCHEDULE_DATA>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Adjust_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Adjust_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Adjust_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z PROC ; std::_Adjust_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 2565 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2566 : 	_Diff _Top = _Hole;
; 2567 : 	_Diff _Idx = 2 * _Hole + 2;
; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  0000f	8d 74 3f 02	 lea	 esi, DWORD PTR [edi+edi+2]
  00013	89 7d 0c	 mov	 DWORD PTR __Top$[ebp], edi
  00016	3b f2		 cmp	 esi, edx
  00018	7d 6e		 jge	 SHORT $LN20@Adjust_hea
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL5@Adjust_hea:

; 2570 : 		{	// move _Hole down to larger child
; 2571 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00020	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  00027	2b c6		 sub	 eax, esi
  00029	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0002c	8d 48 e4	 lea	 ecx, DWORD PTR [eax-28]
  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	ff 55 18	 call	 DWORD PTR __Pred$[ebp]
  00034	83 c4 08	 add	 esp, 8
  00037	84 c0		 test	 al, al
  00039	74 01		 je	 SHORT $LN2@Adjust_hea

; 2572 : 			--_Idx;

  0003b	4e		 dec	 esi
$LN2@Adjust_hea:

; 2573 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0003c	8d 14 f5 00 00
	00 00		 lea	 edx, DWORD PTR [esi*8]
  00043	2b d6		 sub	 edx, esi
  00045	8d 04 93	 lea	 eax, DWORD PTR [ebx+edx*4]
  00048	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004b	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  00052	2b cf		 sub	 ecx, edi
  00054	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  00057	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0005a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0005d	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00060	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00063	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00066	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00069	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0006c	8b 50 14	 mov	 edx, DWORD PTR [eax+20]

; 2574 : 		_Hole = _Idx;

  0006f	8b fe		 mov	 edi, esi
  00071	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  00074	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00077	8d 74 36 02	 lea	 esi, DWORD PTR [esi+esi+2]
  0007b	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0007e	3b 75 10	 cmp	 esi, DWORD PTR __Bottom$[ebp]
  00081	7c 9d		 jl	 SHORT $LL5@Adjust_hea

; 2575 : 		}
; 2576 : 
; 2577 : 	if (_Idx == _Bottom)

  00083	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
  00086	3b f2		 cmp	 esi, edx
$LN20@Adjust_hea:
  00088	75 41		 jne	 SHORT $LN1@Adjust_hea

; 2578 : 		{	// only child at bottom, move _Hole down to it
; 2579 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  0008a	8d 0c d5 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*8]
  00091	2b ca		 sub	 ecx, edx
  00093	8b 74 8b e8	 mov	 esi, DWORD PTR [ebx+ecx*4-24]
  00097	8d 44 8b e4	 lea	 eax, DWORD PTR [ebx+ecx*4-28]
  0009b	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  000a2	2b cf		 sub	 ecx, edi
  000a4	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  000a7	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000aa	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000ad	89 71 08	 mov	 DWORD PTR [ecx+8], esi
  000b0	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  000b3	89 71 0c	 mov	 DWORD PTR [ecx+12], esi
  000b6	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  000b9	89 71 10	 mov	 DWORD PTR [ecx+16], esi
  000bc	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  000bf	89 71 14	 mov	 DWORD PTR [ecx+20], esi
  000c2	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000c5	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 2580 : 		_Hole = _Bottom - 1;

  000c8	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
$LN1@Adjust_hea:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  000cb	8b 4d 18	 mov	 ecx, DWORD PTR __Pred$[ebp]
  000ce	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  000d1	8b 45 0c	 mov	 eax, DWORD PTR __Top$[ebp]
  000d4	51		 push	 ecx
  000d5	52		 push	 edx
  000d6	50		 push	 eax
  000d7	57		 push	 edi
  000d8	53		 push	 ebx
  000d9	e8 00 00 00 00	 call	 ??$_Push_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Push_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  000de	83 c4 14	 add	 esp, 20			; 00000014H
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx

; 2583 : 	}

  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
??$_Adjust_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ENDP ; std::_Adjust_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00@Z ; std::_Move_backward<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$204006 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00@Z PROC ; std::_Move_backward<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>, COMDAT

; 2638 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2639 : 	return (_Move_backward(_First, _Last,
; 2640 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$204006[ebp]
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move_backward@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 2641 : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Move_backward@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00@Z ENDP ; std::_Move_backward<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
_TEXT	ENDS
PUBLIC	??$?0HU_CS_MINIMAP_DATA@@@?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ; std::pair<int const ,_CS_MINIMAP_DATA>::pair<int const ,_CS_MINIMAP_DATA><int,_CS_MINIMAP_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0HU_CS_MINIMAP_DATA@@@?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0HU_CS_MINIMAP_DATA@@@?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z PROC ; std::pair<int const ,_CS_MINIMAP_DATA>::pair<int const ,_CS_MINIMAP_DATA><int,_CS_MINIMAP_DATA>, COMDAT
; _this$ = ecx

; 255  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00013	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00016	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00019	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001c	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0001f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00022	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00025	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00028	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0002b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00033	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00036	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]
  00039	8d 78 20	 lea	 edi, DWORD PTR [eax+32]
  0003c	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00041	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00044	f3 a5		 rep movsd
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi

; 256  : 		}

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??$?0HU_CS_MINIMAP_DATA@@@?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAE@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ENDP ; std::pair<int const ,_CS_MINIMAP_DATA>::pair<int const ,_CS_MINIMAP_DATA><int,_CS_MINIMAP_DATA>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00$$QAU1@P6AEAAU1@2@ZPAH@Z ; std::_Pop_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00$$QAU1@P6AEAAU1@2@ZPAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
___formal$ = 28						; size = 4
??$_Pop_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00$$QAU1@P6AEAAU1@2@ZPAH@Z PROC ; std::_Pop_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 2591 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2592 : 	*_Dest = _Move(*_First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00012	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00015	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00018	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0001b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0001e	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00021	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00024	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00027	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0002a	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 2593 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2594 : 		_Move(_Val), _Pred);

  0002d	8b 45 18	 mov	 eax, DWORD PTR __Pred$[ebp]
  00030	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  00033	56		 push	 esi
  00034	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00037	50		 push	 eax
  00038	52		 push	 edx
  00039	2b f1		 sub	 esi, ecx
  0003b	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00040	f7 ee		 imul	 esi
  00042	03 d6		 add	 edx, esi
  00044	c1 fa 04	 sar	 edx, 4
  00047	8b c2		 mov	 eax, edx
  00049	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004c	03 c2		 add	 eax, edx
  0004e	50		 push	 eax
  0004f	6a 00		 push	 0
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Adjust_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  00057	83 c4 14	 add	 esp, 20			; 00000014H
  0005a	5e		 pop	 esi

; 2595 : 	}

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
??$_Pop_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00$$QAU1@P6AEAAU1@2@ZPAH@Z ENDP ; std::_Pop_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??0?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@XZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@XZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::end
_TEXT	ENDS
PUBLIC	??0?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@XZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@XZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::end
_TEXT	ENDS
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 339  : 		++*this;

  0000a	83 c2 1c	 add	 edx, 28			; 0000001cH
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 340  : 		return (_Tmp);
; 341  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 337  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 339  : 		++*this;

  0000a	83 c2 74	 add	 edx, 116		; 00000074H
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 340  : 		return (_Tmp);
; 341  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> > >::operator!=
_TEXT	ENDS
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator->
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator->, COMDAT
; _this$ = ecx

; 401  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 402  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator->
_TEXT	ENDS
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator->, COMDAT
; _this$ = ecx

; 401  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 402  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator->
_TEXT	ENDS
PUBLIC	??0?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@2@XZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@2@XZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >, COMDAT
; _this$ = ecx

; 378  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >, COMDAT
; _this$ = ecx

; 378  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >, COMDAT
; _this$ = ecx

; 378  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
$T204471 = -16						; size = 12
$T204449 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >, COMDAT
; _this$ = ecx

; 542  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

  00009	6a 40		 push	 64			; 00000040H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN15@Tree_val
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 545  : 
; 546  : 		this->_Left(this->_Myhead) = this->_Myhead;

  00021	89 00		 mov	 DWORD PTR [eax], eax

; 547  : 		this->_Parent(this->_Myhead) = this->_Myhead;

  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 548  : 		this->_Right(this->_Myhead) = this->_Myhead;

  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 549  : 		this->_Color(this->_Myhead) = this->_Black;

  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 3c	 mov	 BYTE PTR [ecx+60], al

; 550  : 		this->_Isnil(this->_Myhead) = true;

  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 3d	 mov	 BYTE PTR [edx+61], al

; 551  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN15@Tree_val:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T204449[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T204471[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T204449[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T204471[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T204471[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Tree_val:
$LN36@Tree_val:
  0006e	cc		 int	 3
??0?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
$T204551 = -16						; size = 12
$T204528 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >, COMDAT
; _this$ = ecx

; 542  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

  00009	68 00 08 00 00	 push	 2048			; 00000800H
  0000e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	74 2e		 je	 SHORT $LN15@Tree_val@2
  00021	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 545  : 
; 546  : 		this->_Left(this->_Myhead) = this->_Myhead;

  00024	89 00		 mov	 DWORD PTR [eax], eax

; 547  : 		this->_Parent(this->_Myhead) = this->_Myhead;

  00026	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00029	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 548  : 		this->_Right(this->_Myhead) = this->_Myhead;

  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 549  : 		this->_Color(this->_Myhead) = this->_Black;

  00032	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00035	b0 01		 mov	 al, 1
  00037	88 81 fc 07 00
	00		 mov	 BYTE PTR [ecx+2044], al

; 550  : 		this->_Isnil(this->_Myhead) = true;

  0003d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00040	88 82 fd 07 00
	00		 mov	 BYTE PTR [edx+2045], al

; 551  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN15@Tree_val@2:
  0004f	8d 45 fc	 lea	 eax, DWORD PTR $T204528[ebp]
  00052	50		 push	 eax
  00053	8d 4d f0	 lea	 ecx, DWORD PTR $T204551[ebp]
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T204528[ebp], 0
  0005d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00062	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00067	8d 4d f0	 lea	 ecx, DWORD PTR $T204551[ebp]
  0006a	51		 push	 ecx
  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T204551[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00072	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Tree_val@2:
$LN36@Tree_val@2:
  00077	cc		 int	 3
??0?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::begin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (iterator(_Lmost(), this));

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 808  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::begin
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lbound
; Function compile flags: /Ogtp
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABI@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABI@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1741 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1742 : 		_Nodeptr _Pnode = _Root();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00009	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  0000d	75 19		 jne	 SHORT $LN3@Lbound@2
  0000f	8b 55 08	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00012	8b 12		 mov	 edx, DWORD PTR [edx]
$LL4@Lbound@2:

; 1746 : 			if (_DEBUG_LT_PRED(this->comp, this->_Key(_Pnode), _Keyval))

  00014	39 51 0c	 cmp	 DWORD PTR [ecx+12], edx
  00017	73 05		 jae	 SHORT $LN2@Lbound@2

; 1747 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00019	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1748 : 			else

  0001c	eb 04		 jmp	 SHORT $LN1@Lbound@2
$LN2@Lbound@2:

; 1749 : 				{	// _Pnode not less than _Keyval, remember it
; 1750 : 				_Wherenode = _Pnode;

  0001e	8b c1		 mov	 eax, ecx

; 1751 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00020	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN1@Lbound@2:

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00022	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00026	74 ec		 je	 SHORT $LL4@Lbound@2
$LN3@Lbound@2:

; 1752 : 				}
; 1753 : 
; 1754 : 		return (_Wherenode);	// return best remembered candidate
; 1755 : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABI@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z
_TEXT	SEGMENT
$T204703 = -16						; size = 12
$T204680 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 542  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

  00009	6a 18		 push	 24			; 00000018H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN15@Tree_val@3
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 545  : 
; 546  : 		this->_Left(this->_Myhead) = this->_Myhead;

  00021	89 00		 mov	 DWORD PTR [eax], eax

; 547  : 		this->_Parent(this->_Myhead) = this->_Myhead;

  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 548  : 		this->_Right(this->_Myhead) = this->_Myhead;

  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 549  : 		this->_Color(this->_Myhead) = this->_Black;

  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 14	 mov	 BYTE PTR [ecx+20], al

; 550  : 		this->_Isnil(this->_Myhead) = true;

  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 15	 mov	 BYTE PTR [edx+21], al

; 551  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN15@Tree_val@3:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T204680[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T204703[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T204680[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T204703[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T204703[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Tree_val@3:
$LN36@Tree_val@3:
  0006e	cc		 int	 3
??0?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 250  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 251  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 252  : 		if (this->_Getcont() == 0
; 253  : 			|| this->_Ptr == 0
; 254  : 			|| _Mytree::_Isnil(this->_Ptr))
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 263  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 264  : 
; 265  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator++

; 266  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 267  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 250  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 251  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 252  : 		if (this->_Getcont() == 0
; 253  : 			|| this->_Ptr == 0
; 254  : 			|| _Mytree::_Isnil(this->_Ptr))
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 263  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 264  : 
; 265  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator++

; 266  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 267  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 1852 : 		{	// compare [0, _Mysize) with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1853 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0000d	72 02		 jb	 SHORT $LN7@compare@3
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@compare@3:
  00011	52		 push	 edx
  00012	50		 push	 eax
  00013	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00016	50		 push	 eax
  00017	6a 00		 push	 0
  00019	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 1854 : 		}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator++
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 270  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 272  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator++

; 273  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 274  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 270  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 272  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator++

; 273  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 274  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 270  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 272  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator++

; 273  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 274  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1987 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1988 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 22		 je	 SHORT $LN9@Tidy@2

; 1989 : 			;
; 1990 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1c		 jb	 SHORT $LN9@Tidy@2

; 1991 : 			{	// copy any leftovers to small buffer and deallocate
; 1992 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1993 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy@2

; 1994 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy@2:

; 1995 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	5b		 pop	 ebx
$LN9@Tidy@2:

; 1996 : 			}
; 1997 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1998 : 		_Eos(_Newsize);

  00032	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00035	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003c	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 1999 : 		}

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??$?0AAHAAU_CS_MINIMAP_DATA@@@?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@AAHAAU_CS_MINIMAP_DATA@@@Z ; std::pair<int,_CS_MINIMAP_DATA>::pair<int,_CS_MINIMAP_DATA><int &,_CS_MINIMAP_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAHAAU_CS_MINIMAP_DATA@@@?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@AAHAAU_CS_MINIMAP_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAU_CS_MINIMAP_DATA@@@?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@AAHAAU_CS_MINIMAP_DATA@@@Z PROC ; std::pair<int,_CS_MINIMAP_DATA>::pair<int,_CS_MINIMAP_DATA><int &,_CS_MINIMAP_DATA &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00016	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00019	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001f	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00022	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00025	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00028	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0002e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00031	56		 push	 esi
  00032	57		 push	 edi
  00033	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00036	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00039	8d 71 1c	 lea	 esi, DWORD PTR [ecx+28]
  0003c	8d 78 20	 lea	 edi, DWORD PTR [eax+32]
  0003f	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00044	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00047	f3 a5		 rep movsd
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 248  : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
??$?0AAHAAU_CS_MINIMAP_DATA@@@?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@AAHAAU_CS_MINIMAP_DATA@@@Z ENDP ; std::pair<int,_CS_MINIMAP_DATA>::pair<int,_CS_MINIMAP_DATA><int &,_CS_MINIMAP_DATA &>
_TEXT	ENDS
PUBLIC	??$?0ABHAAU_CS_MINIMAP_DATA@@@?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@ABHAAU_CS_MINIMAP_DATA@@@Z ; std::pair<int,_CS_MINIMAP_DATA>::pair<int,_CS_MINIMAP_DATA><int const &,_CS_MINIMAP_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0ABHAAU_CS_MINIMAP_DATA@@@?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@ABHAAU_CS_MINIMAP_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABHAAU_CS_MINIMAP_DATA@@@?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@ABHAAU_CS_MINIMAP_DATA@@@Z PROC ; std::pair<int,_CS_MINIMAP_DATA>::pair<int,_CS_MINIMAP_DATA><int const &,_CS_MINIMAP_DATA &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00016	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00019	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001f	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00022	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00025	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00028	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0002e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00031	56		 push	 esi
  00032	57		 push	 edi
  00033	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00036	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00039	8d 71 1c	 lea	 esi, DWORD PTR [ecx+28]
  0003c	8d 78 20	 lea	 edi, DWORD PTR [eax+32]
  0003f	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00044	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00047	f3 a5		 rep movsd
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 248  : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
??$?0ABHAAU_CS_MINIMAP_DATA@@@?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@ABHAAU_CS_MINIMAP_DATA@@@Z ENDP ; std::pair<int,_CS_MINIMAP_DATA>::pair<int,_CS_MINIMAP_DATA><int const &,_CS_MINIMAP_DATA &>
_TEXT	ENDS
PUBLIC	??$find@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@H@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@V10@0ABH@Z ; std::find<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >,int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$find@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@H@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@V10@0ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$find@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@H@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@V10@0ABH@Z PROC ; std::find<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >,int>, COMDAT

; 71   : 	{	// find first matching _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   : 	_DEBUG_RANGE(_First, _Last);
; 73   : 	return (_Rechecked(_First,
; 74   : 		_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	3b c8		 cmp	 ecx, eax
  0000b	74 10		 je	 SHORT $LN25@find
  0000d	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  00010	8b 12		 mov	 edx, DWORD PTR [edx]
$LL14@find:
  00012	39 11		 cmp	 DWORD PTR [ecx], edx
  00014	74 07		 je	 SHORT $LN25@find
  00016	83 c1 04	 add	 ecx, 4
  00019	3b c8		 cmp	 ecx, eax
  0001b	75 f5		 jne	 SHORT $LL14@find
$LN25@find:
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 75   : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$find@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@H@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@V10@0ABH@Z ENDP ; std::find<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >,int>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 2d		 je	 SHORT $LN9@Cons_val@4
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001c	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00022	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00025	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00028	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002e	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00031	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00034	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN9@Cons_val@4:

; 281  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN9@Cons_val@5
  0000a	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
$LN9@Cons_val@5:

; 281  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@6
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
$LN9@Cons_val@6:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int const &>
_TEXT	ENDS
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 226  : 	{	// test if string < string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 227  : 	return (_Left.compare(_Right) < 0);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	72 02		 jb	 SHORT $LN9@operator@9
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@operator@9:
  00011	51		 push	 ecx
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00015	50		 push	 eax
  00016	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00019	50		 push	 eax
  0001a	6a 00		 push	 0
  0001c	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00021	33 c9		 xor	 ecx, ecx
  00023	85 c0		 test	 eax, eax
  00025	0f 98 c0	 sets	 al

; 228  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Move@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00@Z ; std::_Move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$205048 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00@Z PROC ; std::_Move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$205048[ebp]
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Move@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00@Z ENDP ; std::_Move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Move@PAU_CS_NPC_DATA@@PAU1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00@Z ; std::_Move<_CS_NPC_DATA *,_CS_NPC_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAU_CS_NPC_DATA@@PAU1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$205055 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAU_CS_NPC_DATA@@PAU1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00@Z PROC ; std::_Move<_CS_NPC_DATA *,_CS_NPC_DATA *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$205055[ebp]
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move@PAU_CS_NPC_DATA@@PAU1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<_CS_NPC_DATA *,_CS_NPC_DATA *>
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Move@PAU_CS_NPC_DATA@@PAU1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00@Z ENDP ; std::_Move<_CS_NPC_DATA *,_CS_NPC_DATA *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi
  0000c	c1 f8 02	 sar	 eax, 2
  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	8b 45 10	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1326 : 		}

  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U?$pair@$$CBIH@std@@@std@@U?$pair@$$CBIH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBIH@std@@@0@PAU?$pair@$$CBIH@0@@Z ; std::_Dest_val<std::allocator<std::pair<unsigned int const ,int> >,std::pair<unsigned int const ,int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@U?$pair@$$CBIH@std@@@std@@U?$pair@$$CBIH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBIH@std@@@0@PAU?$pair@$$CBIH@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U?$pair@$$CBIH@std@@@std@@U?$pair@$$CBIH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBIH@std@@@0@PAU?$pair@$$CBIH@0@@Z PROC ; std::_Dest_val<std::allocator<std::pair<unsigned int const ,int> >,std::pair<unsigned int const ,int> >, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@U?$pair@$$CBIH@std@@@std@@U?$pair@$$CBIH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBIH@std@@@0@PAU?$pair@$$CBIH@0@@Z ENDP ; std::_Dest_val<std::allocator<std::pair<unsigned int const ,int> >,std::pair<unsigned int const ,int> >
_TEXT	ENDS
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::operator-
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::operator-, COMDAT
; _this$ = ecx

; 380  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 		return (*(_Mybase *)this - _Right);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	c1 f8 06	 sar	 eax, 6

; 382  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >::operator-
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
$T205191 = -40						; size = 12
__Newres$ = -28						; size = 4
$T205174 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1918 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 1919 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 1920 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN9@Copy

; 1921 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax
  0003f	eb 27		 jmp	 SHORT $LN39@Copy
$LN9@Copy:

; 1922 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00041	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b ca		 cmp	 ecx, edx
  00053	76 13		 jbe	 SHORT $LN39@Copy

; 1923 : 			;
; 1924 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx

; 1925 : 			_Newres = this->_Myres
; 1926 : 				+ this->_Myres / 2;	// grow exponentially if possible

  0005c	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
  0005f	3b d8		 cmp	 ebx, eax
  00061	76 05		 jbe	 SHORT $LN39@Copy

; 1927 : 		else
; 1928 : 			_Newres = max_size();	// settle for max_size()

  00063	be fe ff ff ff	 mov	 esi, -2			; fffffffeH
$LN39@Copy:

; 1929 : 
; 1930 : 		_Elem *_Ptr;
; 1931 : 		_TRY_BEGIN

  00068	33 c0		 xor	 eax, eax

; 1932 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0006a	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0006d	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax
  00070	3b c8		 cmp	 ecx, eax
  00072	76 12		 jbe	 SHORT $LN47@Copy
  00074	83 f9 ff	 cmp	 ecx, -1
  00077	77 12		 ja	 SHORT $LN46@Copy
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007f	83 c4 04	 add	 esp, 4
  00082	85 c0		 test	 eax, eax
  00084	74 05		 je	 SHORT $LN46@Copy
$LN47@Copy:
  00086	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00089	eb 51		 jmp	 SHORT $LN19@Copy
$LN46@Copy:
  0008b	8d 4d e8	 lea	 ecx, DWORD PTR $T205174[ebp]
  0008e	51		 push	 ecx
  0008f	8d 4d d8	 lea	 ecx, DWORD PTR $T205191[ebp]
  00092	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T205174[ebp], 0
  00099	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0009e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  000a3	8d 55 d8	 lea	 edx, DWORD PTR $T205191[ebp]
  000a6	52		 push	 edx
  000a7	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T205191[ebp], OFFSET ??_7bad_alloc@std@@6B@
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN112@Copy:
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1933 : 		_CATCH_ALL
; 1934 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  000b3	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]

; 1935 : 			_TRY_BEGIN
; 1936 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  000b6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	89 45 e4	 mov	 DWORD PTR __Newres$[ebp], eax
  000bc	40		 inc	 eax
  000bd	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  000c0	50		 push	 eax
  000c1	83 c1 18	 add	 ecx, 24			; 00000018H
  000c4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000c8	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000cd	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 1940 : 			_CATCH_END
; 1941 : 		_CATCH_END

  000d0	b8 00 00 00 00	 mov	 eax, $LN107@Copy
  000d5	c3		 ret	 0
$LN107@Copy:
  000d6	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000d9	8b 75 e4	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1942 : 
; 1943 : 		if (0 < _Oldlen)

  000dc	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000df	85 db		 test	 ebx, ebx
  000e1	74 1a		 je	 SHORT $LN78@Copy

; 1944 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000e3	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  000e7	72 04		 jb	 SHORT $LN76@Copy
  000e9	8b 07		 mov	 eax, DWORD PTR [edi]
  000eb	eb 02		 jmp	 SHORT $LN77@Copy
$LN76@Copy:
  000ed	8b c7		 mov	 eax, edi
$LN77@Copy:
  000ef	53		 push	 ebx
  000f0	50		 push	 eax
  000f1	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _memcpy
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN78@Copy:

; 1945 : 		_Tidy(true);

  000fd	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00101	72 0b		 jb	 SHORT $LN88@Copy
  00103	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00105	51		 push	 ecx
  00106	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010b	83 c4 04	 add	 esp, 4
$LN88@Copy:

; 1946 : 		this->_Bx._Ptr = _Ptr;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00111	c6 07 00	 mov	 BYTE PTR [edi], 0
  00114	89 07		 mov	 DWORD PTR [edi], eax

; 1947 : 		this->_Myres = _Newres;

  00116	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 1948 : 		_Eos(_Oldlen);

  00119	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
  0011c	83 fe 10	 cmp	 esi, 16			; 00000010H
  0011f	72 02		 jb	 SHORT $LN102@Copy
  00121	8b f8		 mov	 edi, eax
$LN102@Copy:
  00123	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 1949 : 		}

  00127	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0012a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00131	59		 pop	 ecx
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1937 : 			_CATCH_ALL
; 1938 : 			_Tidy(true);	// failed again, discard storage and reraise

  0013b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0013e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00142	72 0b		 jb	 SHORT $LN64@Copy
  00144	8b 16		 mov	 edx, DWORD PTR [esi]
  00146	52		 push	 edx
  00147	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0014c	83 c4 04	 add	 esp, 4
$LN64@Copy:

; 1939 : 			_RERAISE;

  0014f	6a 00		 push	 0
  00151	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00158	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0015f	6a 00		 push	 0
  00161	c6 06 00	 mov	 BYTE PTR [esi], 0
  00164	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN113@Copy:
$LN111@Copy:
  00169	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@1@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1631 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1632 : 		if (max_size() - 1 <= this->_Mysize)

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	3d fe ff ff 1f	 cmp	 eax, 536870910		; 1ffffffeH
  0000b	72 16		 jb	 SHORT $LN17@Insert

; 1633 : 			{	// tree would get too big, fail
; 1634 : 			_Dest_val(this->_Alval,
; 1635 : 				_STD addressof(this->_Myval(_Newnode)));
; 1636 : 
; 1637 : 			this->_Alnod.deallocate(_Newnode, 1);

  0000d	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4

; 1638 : 
; 1639 : 			_Xlength_error("map/set<T> too long");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0001e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN377@Insert:
$LN17@Insert:

; 1640 : 			}
; 1641 : 		++this->_Mysize;

  00023	40		 inc	 eax
  00024	53		 push	 ebx
  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1642 : 		_Newnode->_Parent = _Wherenode;

  00028	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0002b	57		 push	 edi
  0002c	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0002f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1643 : 
; 1644 : 		if (_Wherenode == this->_Myhead)

  00032	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00035	32 db		 xor	 bl, bl
  00037	3b c2		 cmp	 eax, edx
  00039	75 10		 jne	 SHORT $LN16@Insert

; 1645 : 			{	// first node in tree, just set head values
; 1646 : 			_Root() = _Newnode;

  0003b	89 7a 04	 mov	 DWORD PTR [edx+4], edi

; 1647 : 			_Lmost() = _Newnode;

  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	89 3a		 mov	 DWORD PTR [edx], edi

; 1648 : 			_Rmost() = _Newnode;

  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00046	89 78 08	 mov	 DWORD PTR [eax+8], edi
  00049	eb 20		 jmp	 SHORT $LN11@Insert
$LN16@Insert:

; 1649 : 			}
; 1650 : 		else if (_Addleft)

  0004b	38 5d 0c	 cmp	 BYTE PTR __Addleft$[ebp], bl
  0004e	74 0d		 je	 SHORT $LN14@Insert

; 1651 : 			{	// add to left of _Wherenode
; 1652 : 			this->_Left(_Wherenode) = _Newnode;

  00050	89 38		 mov	 DWORD PTR [eax], edi

; 1653 : 			if (_Wherenode == _Lmost())

  00052	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00055	3b 02		 cmp	 eax, DWORD PTR [edx]
  00057	75 12		 jne	 SHORT $LN11@Insert

; 1654 : 				_Lmost() = _Newnode;

  00059	89 3a		 mov	 DWORD PTR [edx], edi

; 1655 : 			}
; 1656 : 		else

  0005b	eb 0e		 jmp	 SHORT $LN11@Insert
$LN14@Insert:

; 1657 : 			{	// add to right of _Wherenode
; 1658 : 			this->_Right(_Wherenode) = _Newnode;

  0005d	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 1659 : 			if (_Wherenode == _Rmost())

  00060	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00063	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00066	75 03		 jne	 SHORT $LN11@Insert

; 1660 : 				_Rmost() = _Newnode;

  00068	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN11@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  0006b	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0006e	8b c7		 mov	 eax, edi
  00070	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  00073	0f 85 97 01 00
	00		 jne	 $LN9@Insert
  00079	56		 push	 esi
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL10@Insert:

; 1665 : 			if (this->_Parent(_Pnode)
; 1666 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  00080	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00083	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00086	3b 16		 cmp	 edx, DWORD PTR [esi]
  00088	0f 85 c1 00 00
	00		 jne	 $LN8@Insert

; 1667 : 				{	// fixup red-red in left subtree
; 1668 : 				_Wherenode =
; 1669 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  0008e	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 1670 : 				if (this->_Color(_Wherenode) == this->_Red)

  00091	38 5e 14	 cmp	 BYTE PTR [esi+20], bl
  00094	75 1c		 jne	 SHORT $LN7@Insert

; 1671 : 					{	// parent has two red children, blacken both
; 1672 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  00096	c6 42 14 01	 mov	 BYTE PTR [edx+20], 1

; 1673 : 					this->_Color(_Wherenode) = this->_Black;

  0009a	c6 46 14 01	 mov	 BYTE PTR [esi+20], 1

; 1674 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1675 : 						= this->_Red;

  0009e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000a4	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1676 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000aa	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1677 : 					}
; 1678 : 				else

  000ad	e9 51 01 00 00	 jmp	 $LN316@Insert
$LN7@Insert:

; 1679 : 					{	// parent has red and black children
; 1680 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  000b2	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000b5	75 3a		 jne	 SHORT $LN111@Insert

; 1681 : 						{	// rotate right child to left
; 1682 : 						_Pnode = this->_Parent(_Pnode);

  000b7	8b c2		 mov	 eax, edx

; 1683 : 						_Lrotate(_Pnode);

  000b9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000bc	8b 32		 mov	 esi, DWORD PTR [edx]
  000be	89 70 08	 mov	 DWORD PTR [eax+8], esi
  000c1	8b 32		 mov	 esi, DWORD PTR [edx]
  000c3	38 5e 15	 cmp	 BYTE PTR [esi+21], bl
  000c6	75 03		 jne	 SHORT $LN110@Insert
  000c8	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN110@Insert:
  000cb	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000ce	89 72 04	 mov	 DWORD PTR [edx+4], esi
  000d1	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000d4	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000d7	75 05		 jne	 SHORT $LN109@Insert
  000d9	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000dc	eb 0e		 jmp	 SHORT $LN106@Insert
$LN109@Insert:
  000de	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000e1	3b 06		 cmp	 eax, DWORD PTR [esi]
  000e3	75 04		 jne	 SHORT $LN107@Insert
  000e5	89 16		 mov	 DWORD PTR [esi], edx
  000e7	eb 03		 jmp	 SHORT $LN106@Insert
$LN107@Insert:
  000e9	89 56 08	 mov	 DWORD PTR [esi+8], edx
$LN106@Insert:
  000ec	89 02		 mov	 DWORD PTR [edx], eax
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN111@Insert:

; 1684 : 						}
; 1685 : 					this->_Color(this->_Parent(_Pnode)) =
; 1686 : 						this->_Black;	// propagate red up

  000f1	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000f4	c6 42 14 01	 mov	 BYTE PTR [edx+20], 1

; 1687 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1688 : 						this->_Red;

  000f8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000fb	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000fe	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  00101	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00104	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00107	8b 32		 mov	 esi, DWORD PTR [edx]
  00109	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0010c	89 3a		 mov	 DWORD PTR [edx], edi
  0010e	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00111	38 5f 15	 cmp	 BYTE PTR [edi+21], bl
  00114	75 03		 jne	 SHORT $LN173@Insert
  00116	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN173@Insert:
  00119	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  0011c	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0011f	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00122	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  00125	75 0b		 jne	 SHORT $LN172@Insert
  00127	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0012a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  0012d	e9 cb 00 00 00	 jmp	 $LN376@Insert

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN172@Insert:
  00132	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  00135	3b 57 08	 cmp	 edx, DWORD PTR [edi+8]
  00138	75 0b		 jne	 SHORT $LN170@Insert
  0013a	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0013d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00140	e9 b8 00 00 00	 jmp	 $LN376@Insert

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN170@Insert:
  00145	89 37		 mov	 DWORD PTR [edi], esi
  00147	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  0014a	e9 ae 00 00 00	 jmp	 $LN376@Insert
$LN8@Insert:

; 1693 : 				{	// fixup red-red in right subtree
; 1694 : 				_Wherenode =
; 1695 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

  0014f	8b 36		 mov	 esi, DWORD PTR [esi]

; 1696 : 				if (this->_Color(_Wherenode) == this->_Red)

  00151	38 5e 14	 cmp	 BYTE PTR [esi+20], bl
  00154	75 1c		 jne	 SHORT $LN3@Insert

; 1697 : 					{	// parent has two red children, blacken both
; 1698 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  00156	c6 42 14 01	 mov	 BYTE PTR [edx+20], 1

; 1699 : 					this->_Color(_Wherenode) = this->_Black;

  0015a	c6 46 14 01	 mov	 BYTE PTR [esi+20], 1

; 1700 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1701 : 						this->_Red;

  0015e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00161	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00164	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1702 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  00167	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1703 : 					}
; 1704 : 				else

  0016d	e9 91 00 00 00	 jmp	 $LN316@Insert
$LN3@Insert:

; 1705 : 					{	// parent has red and black children
; 1706 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00172	3b 02		 cmp	 eax, DWORD PTR [edx]
  00174	75 3c		 jne	 SHORT $LN253@Insert

; 1707 : 						{	// rotate left child to right
; 1708 : 						_Pnode = this->_Parent(_Pnode);

  00176	8b c2		 mov	 eax, edx

; 1709 : 						_Rrotate(_Pnode);

  00178	8b 10		 mov	 edx, DWORD PTR [eax]
  0017a	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  0017d	89 30		 mov	 DWORD PTR [eax], esi
  0017f	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00182	38 5e 15	 cmp	 BYTE PTR [esi+21], bl
  00185	75 03		 jne	 SHORT $LN252@Insert
  00187	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN252@Insert:
  0018a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0018d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00190	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00193	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00196	75 05		 jne	 SHORT $LN251@Insert
  00198	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0019b	eb 0f		 jmp	 SHORT $LN248@Insert
$LN251@Insert:
  0019d	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  001a0	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  001a3	75 05		 jne	 SHORT $LN249@Insert
  001a5	89 56 08	 mov	 DWORD PTR [esi+8], edx
  001a8	eb 02		 jmp	 SHORT $LN248@Insert
$LN249@Insert:
  001aa	89 16		 mov	 DWORD PTR [esi], edx
$LN248@Insert:
  001ac	89 42 08	 mov	 DWORD PTR [edx+8], eax
  001af	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN253@Insert:

; 1710 : 						}
; 1711 : 					this->_Color(this->_Parent(_Pnode)) =
; 1712 : 						this->_Black;	// propagate red up

  001b2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001b5	c6 42 14 01	 mov	 BYTE PTR [edx+20], 1

; 1713 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1714 : 						this->_Red;

  001b9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001bc	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001bf	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1715 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  001c2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001c5	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001c8	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  001cb	8b 3e		 mov	 edi, DWORD PTR [esi]
  001cd	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  001d0	8b 3e		 mov	 edi, DWORD PTR [esi]
  001d2	38 5f 15	 cmp	 BYTE PTR [edi+21], bl
  001d5	75 03		 jne	 SHORT $LN315@Insert
  001d7	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN315@Insert:
  001da	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001dd	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  001e0	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  001e3	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  001e6	75 05		 jne	 SHORT $LN314@Insert
  001e8	89 77 04	 mov	 DWORD PTR [edi+4], esi
  001eb	eb 0e		 jmp	 SHORT $LN311@Insert
$LN314@Insert:
  001ed	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001f0	3b 17		 cmp	 edx, DWORD PTR [edi]
  001f2	75 04		 jne	 SHORT $LN312@Insert
  001f4	89 37		 mov	 DWORD PTR [edi], esi
  001f6	eb 03		 jmp	 SHORT $LN311@Insert
$LN312@Insert:
  001f8	89 77 08	 mov	 DWORD PTR [edi+8], esi
$LN311@Insert:
  001fb	89 16		 mov	 DWORD PTR [esi], edx
$LN376@Insert:
  001fd	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00200	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN316@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00203	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00206	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  00209	0f 84 71 fe ff
	ff		 je	 $LL10@Insert
  0020f	5e		 pop	 esi
$LN9@Insert:

; 1716 : 					}
; 1717 : 				}
; 1718 : 
; 1719 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  00210	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00213	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1720 : 		return (iterator(_Newnode, this));

  00216	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00219	89 38		 mov	 DWORD PTR [eax], edi
  0021b	5f		 pop	 edi
  0021c	c6 41 14 01	 mov	 BYTE PTR [ecx+20], 1
  00220	5b		 pop	 ebx

; 1721 : 		}

  00221	5d		 pop	 ebp
  00222	c2 10 00	 ret	 16			; 00000010H
$LN375@Insert:
?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@1@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
_TEXT	ENDS
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator--
; Function compile flags: /Ogtp
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 418  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 419  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator--

; 420  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 421  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 228  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator--
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 418  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 419  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator--

; 420  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 421  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 228  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator--
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 418  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 419  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator--

; 420  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 421  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 228  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??_G?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAEPAXI@Z ; std::pair<int const ,_CS_MINIMAP_DATA>::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAEPAXI@Z PROC	; std::pair<int const ,_CS_MINIMAP_DATA>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00011	74 09		 je	 SHORT $LN10@scalar@6
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00019	83 c4 04	 add	 esp, 4
$LN10@scalar@6:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@QAEPAXI@Z ENDP	; std::pair<int const ,_CS_MINIMAP_DATA>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z PROC ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 00		 push	 0
  0000c	ff d2		 call	 edx

; 288  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z PROC ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 00		 push	 0
  0000c	ff d2		 call	 edx

; 288  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z PROC ; std::_Dest_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 00		 push	 0
  0000c	ff d2		 call	 edx

; 288  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z ENDP ; std::_Dest_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
_TEXT	ENDS
PUBLIC	??$construct@U?$pair@IH@std@@@?$allocator@U?$pair@$$CBIH@std@@@std@@QAEXPAU?$pair@$$CBIH@1@$$QAU?$pair@IH@1@@Z ; std::allocator<std::pair<unsigned int const ,int> >::construct<std::pair<unsigned int,int> >
; Function compile flags: /Ogtp
;	COMDAT ??$construct@U?$pair@IH@std@@@?$allocator@U?$pair@$$CBIH@std@@@std@@QAEXPAU?$pair@$$CBIH@1@$$QAU?$pair@IH@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@U?$pair@IH@std@@@?$allocator@U?$pair@$$CBIH@std@@@std@@QAEXPAU?$pair@$$CBIH@1@$$QAU?$pair@IH@1@@Z PROC ; std::allocator<std::pair<unsigned int const ,int> >::construct<std::pair<unsigned int,int> >, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@9
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@9:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U?$pair@IH@std@@@?$allocator@U?$pair@$$CBIH@std@@@std@@QAEXPAU?$pair@$$CBIH@1@$$QAU?$pair@IH@1@@Z ENDP ; std::allocator<std::pair<unsigned int const ,int> >::construct<std::pair<unsigned int,int> >
_TEXT	ENDS
PUBLIC	??$iter_swap@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0@Z ; std::iter_swap<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$iter_swap@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0@Z
_TEXT	SEGMENT
__Tmp$206310 = -28					; size = 28
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0@Z PROC ; std::iter_swap<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>, COMDAT

; 2133 : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 2134 : 	swap(*_Left, *_Right);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0000f	89 4d f4	 mov	 DWORD PTR __Tmp$206310[ebp+16], ecx
  00012	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00015	53		 push	 ebx
  00016	89 4d f8	 mov	 DWORD PTR __Tmp$206310[ebp+20], ecx
  00019	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001c	89 4d fc	 mov	 DWORD PTR __Tmp$206310[ebp+24], ecx
  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00022	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  00025	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00028	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  0002b	56		 push	 esi
  0002c	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0002f	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00032	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
  00035	57		 push	 edi
  00036	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  00039	89 58 0c	 mov	 DWORD PTR [eax+12], ebx
  0003c	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
  0003f	89 58 10	 mov	 DWORD PTR [eax+16], ebx
  00042	8b 59 14	 mov	 ebx, DWORD PTR [ecx+20]
  00045	89 58 14	 mov	 DWORD PTR [eax+20], ebx
  00048	8b 59 18	 mov	 ebx, DWORD PTR [ecx+24]
  0004b	89 58 18	 mov	 DWORD PTR [eax+24], ebx
  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Tmp$206310[ebp+20]
  00051	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00054	8b 55 f4	 mov	 edx, DWORD PTR __Tmp$206310[ebp+16]
  00057	89 79 0c	 mov	 DWORD PTR [ecx+12], edi
  0005a	5f		 pop	 edi
  0005b	89 71 08	 mov	 DWORD PTR [ecx+8], esi
  0005e	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  00061	8b 55 fc	 mov	 edx, DWORD PTR __Tmp$206310[ebp+24]
  00064	5e		 pop	 esi
  00065	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00068	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0006b	5b		 pop	 ebx

; 2135 : 	}

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
??$iter_swap@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0@Z ENDP ; std::iter_swap<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z ; std::_Make_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z$0
__ehfuncinfo$??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z
_TEXT	SEGMENT
__Val$196736 = -40					; size = 28
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z PROC ; std::_Make_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 2658 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2659 : 	_Diff _Bottom = _Last - _First;

  00028	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0002e	2b f1		 sub	 esi, ecx
  00030	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00035	f7 ee		 imul	 esi
  00037	03 d6		 add	 edx, esi
  00039	c1 fa 04	 sar	 edx, 4
  0003c	8b da		 mov	 ebx, edx
  0003e	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00041	03 da		 add	 ebx, edx

; 2660 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  00043	8b c3		 mov	 eax, ebx
  00045	99		 cdq
  00046	2b c2		 sub	 eax, edx
  00048	8b f8		 mov	 edi, eax
  0004a	d1 ff		 sar	 edi, 1
  0004c	85 ff		 test	 edi, edi
  0004e	7e 67		 jle	 SHORT $LN1@Make_heap

; 2659 : 	_Diff _Bottom = _Last - _First;

  00050	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00057	2b c7		 sub	 eax, edi
  00059	8d 74 81 08	 lea	 esi, DWORD PTR [ecx+eax*4+8]
  0005d	eb 04		 jmp	 SHORT $LN2@Make_heap
  0005f	90		 npad	 1
$LL16@Make_heap:
  00060	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
$LN2@Make_heap:

; 2661 : 		{	// reheap top half, bottom to top
; 2662 : 		--_Hole;
; 2663 : 		_Ty _Val = _Move(*(_First + _Hole));

  00063	8b 56 e0	 mov	 edx, DWORD PTR [esi-32]
  00066	8b 46 e4	 mov	 eax, DWORD PTR [esi-28]
  00069	83 ee 1c	 sub	 esi, 28			; 0000001cH
  0006c	89 55 dc	 mov	 DWORD PTR __Val$196736[ebp+4], edx
  0006f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00072	89 45 e0	 mov	 DWORD PTR __Val$196736[ebp+8], eax
  00075	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00078	89 55 e4	 mov	 DWORD PTR __Val$196736[ebp+12], edx
  0007b	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0007e	89 45 e8	 mov	 DWORD PTR __Val$196736[ebp+16], eax
  00081	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00084	4f		 dec	 edi
  00085	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Val$196736[ebp], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  0008c	89 55 ec	 mov	 DWORD PTR __Val$196736[ebp+20], edx
  0008f	89 45 f0	 mov	 DWORD PTR __Val$196736[ebp+24], eax

; 2664 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2665 : 			_Move(_Val), _Pred);

  00092	8b 55 10	 mov	 edx, DWORD PTR __Pred$[ebp]
  00095	52		 push	 edx
  00096	8d 45 d8	 lea	 eax, DWORD PTR __Val$196736[ebp]
  00099	50		 push	 eax
  0009a	53		 push	 ebx
  0009b	57		 push	 edi
  0009c	51		 push	 ecx
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a4	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Adjust_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  000a9	83 c4 14	 add	 esp, 20			; 00000014H

; 2666 : 		}

  000ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b3	85 ff		 test	 edi, edi
  000b5	7f a9		 jg	 SHORT $LL16@Make_heap
$LN1@Make_heap:

; 2667 : 	}

  000b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c1	59		 pop	 ecx
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Val$196736[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_CS_SCHEDULE_DATA@@UAE@XZ ; _CS_SCHEDULE_DATA::~_CS_SCHEDULE_DATA
__ehhandler$??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z ENDP ; std::_Make_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
PUBLIC	??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Insertion_sort1<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &),_CS_SCHEDULE_DATA>
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z$0
__ehfuncinfo$??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z
_TEXT	SEGMENT
__Val$196771 = -40					; size = 28
__$EHRec$ = -12						; size = 12
__Cat$206370 = 8					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z PROC ; std::_Insertion_sort1<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &),_CS_SCHEDULE_DATA>, COMDAT

; 3650 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3651 : 	if (_First != _Last)

  00028	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0002e	3b f0		 cmp	 esi, eax
  00030	0f 84 0c 01 00
	00		 je	 $LN6@Insertion_

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00036	8d 5e 1c	 lea	 ebx, DWORD PTR [esi+28]
  00039	3b d8		 cmp	 ebx, eax
  0003b	0f 84 01 01 00
	00		 je	 $LN6@Insertion_
$LL7@Insertion_:

; 3653 : 			{	// order next element
; 3654 : 			_BidIt _Next1 = _Next;
; 3655 : 			_Ty _Val = _Move(*_Next);

  00041	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00044	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00047	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  0004a	89 45 dc	 mov	 DWORD PTR __Val$196771[ebp+4], eax
  0004d	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00050	89 4d e0	 mov	 DWORD PTR __Val$196771[ebp+8], ecx
  00053	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00056	89 55 e4	 mov	 DWORD PTR __Val$196771[ebp+12], edx
  00059	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  0005c	8b fb		 mov	 edi, ebx
  0005e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Val$196771[ebp], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00065	89 45 e8	 mov	 DWORD PTR __Val$196771[ebp+16], eax
  00068	89 4d ec	 mov	 DWORD PTR __Val$196771[ebp+20], ecx
  0006b	89 55 f0	 mov	 DWORD PTR __Val$196771[ebp+24], edx

; 3656 : 
; 3657 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  0006e	8d 45 d8	 lea	 eax, DWORD PTR __Val$196771[ebp]
  00071	56		 push	 esi
  00072	50		 push	 eax
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007a	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  0007d	83 c4 08	 add	 esp, 8
  00080	84 c0		 test	 al, al
  00082	74 38		 je	 SHORT $LN5@Insertion_

; 3658 : 				{	// found new earliest element, move to front
; 3659 : 				_Move_backward(_First, _Next, ++_Next1);

  00084	8b 4d 08	 mov	 ecx, DWORD PTR __Cat$206370[ebp]
  00087	51		 push	 ecx
  00088	8d 53 1c	 lea	 edx, DWORD PTR [ebx+28]
  0008b	52		 push	 edx
  0008c	53		 push	 ebx
  0008d	56		 push	 esi
  0008e	e8 00 00 00 00	 call	 ??$_Move_backward@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>

; 3660 : 				*_First = _Move(_Val);

  00093	8b 45 dc	 mov	 eax, DWORD PTR __Val$196771[ebp+4]
  00096	8b 4d e0	 mov	 ecx, DWORD PTR __Val$196771[ebp+8]
  00099	8b 55 e4	 mov	 edx, DWORD PTR __Val$196771[ebp+12]
  0009c	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0009f	8b 45 e8	 mov	 eax, DWORD PTR __Val$196771[ebp+16]
  000a2	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  000a5	8b 4d ec	 mov	 ecx, DWORD PTR __Val$196771[ebp+20]
  000a8	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  000ab	8b 55 f0	 mov	 edx, DWORD PTR __Val$196771[ebp+24]
  000ae	83 c4 10	 add	 esp, 16			; 00000010H
  000b1	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000b4	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000b7	89 56 18	 mov	 DWORD PTR [esi+24], edx

; 3661 : 				}
; 3662 : 			else

  000ba	eb 73		 jmp	 SHORT $LN30@Insertion_
$LN5@Insertion_:

; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  000bc	8d 73 e4	 lea	 esi, DWORD PTR [ebx-28]

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  000bf	8d 45 d8	 lea	 eax, DWORD PTR __Val$196771[ebp]
  000c2	56		 push	 esi
  000c3	50		 push	 eax
  000c4	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  000c7	83 c4 08	 add	 esp, 8
  000ca	84 c0		 test	 al, al
  000cc	74 3a		 je	 SHORT $LN1@Insertion_
  000ce	8b ff		 npad	 2
$LL3@Insertion_:

; 3667 : 					*_Next1 = _Move(*_First1);	// move hole down

  000d0	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d3	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  000d6	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  000d9	89 57 08	 mov	 DWORD PTR [edi+8], edx
  000dc	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000df	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  000e2	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000e5	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  000e8	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000eb	89 57 14	 mov	 DWORD PTR [edi+20], edx
  000ee	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000f1	89 47 18	 mov	 DWORD PTR [edi+24], eax
  000f4	8b fe		 mov	 edi, esi
  000f6	83 ee 1c	 sub	 esi, 28			; 0000001cH
  000f9	8d 4d d8	 lea	 ecx, DWORD PTR __Val$196771[ebp]
  000fc	56		 push	 esi
  000fd	51		 push	 ecx
  000fe	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  00101	83 c4 08	 add	 esp, 8
  00104	84 c0		 test	 al, al
  00106	75 c8		 jne	 SHORT $LL3@Insertion_
$LN1@Insertion_:

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

  00108	8b 55 dc	 mov	 edx, DWORD PTR __Val$196771[ebp+4]
  0010b	8b 45 e0	 mov	 eax, DWORD PTR __Val$196771[ebp+8]
  0010e	8b 4d e4	 mov	 ecx, DWORD PTR __Val$196771[ebp+12]
  00111	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00114	89 57 04	 mov	 DWORD PTR [edi+4], edx
  00117	8b 55 e8	 mov	 edx, DWORD PTR __Val$196771[ebp+16]
  0011a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0011d	8b 45 ec	 mov	 eax, DWORD PTR __Val$196771[ebp+20]
  00120	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  00123	8b 4d f0	 mov	 ecx, DWORD PTR __Val$196771[ebp+24]
  00126	89 57 10	 mov	 DWORD PTR [edi+16], edx
  00129	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0012c	89 4f 18	 mov	 DWORD PTR [edi+24], ecx
$LN30@Insertion_:

; 3669 : 				}
; 3670 : 			}

  0012f	83 c3 1c	 add	 ebx, 28			; 0000001cH
  00132	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00139	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0013c	0f 85 ff fe ff
	ff		 jne	 $LL7@Insertion_
$LN6@Insertion_:

; 3671 : 	}

  00142	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00145	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014c	59		 pop	 ecx
  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi
  0014f	5b		 pop	 ebx
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Val$196771[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_CS_SCHEDULE_DATA@@UAE@XZ ; _CS_SCHEDULE_DATA::~_CS_SCHEDULE_DATA
__ehhandler$??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z ENDP ; std::_Insertion_sort1<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &),_CS_SCHEDULE_DATA>
PUBLIC	??$construct@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::construct<std::pair<int,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z PROC ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::construct<std::pair<int,_CS_MINIMAP_DATA> >, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 43		 je	 SHORT $LN3@construct@10
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00018	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00021	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00024	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00027	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002d	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00030	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00033	56		 push	 esi
  00034	57		 push	 edi
  00035	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00038	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0003b	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]
  0003e	8d 78 20	 lea	 edi, DWORD PTR [eax+32]
  00041	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00046	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00049	f3 a5		 rep movsd
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
$LN3@construct@10:

; 209  : 		}

  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
??$construct@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ENDP ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::construct<std::pair<int,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 2d		 je	 SHORT $LN7@Cons_val@7
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001c	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00022	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00025	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00028	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002e	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00031	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00034	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN7@Cons_val@7:

; 281  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN7@Cons_val@8
  0000a	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
$LN7@Cons_val@8:

; 281  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA>
_TEXT	ENDS
PUBLIC	??$_Med3@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z ; std::_Med3<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__Tmp$206677 = -28					; size = 28
__Tmp$206618 = -28					; size = 28
__Tmp$206559 = -28					; size = 28
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Med3@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z PROC ; std::_Med3<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 3683 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 3684 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00008	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000f	57		 push	 edi
  00010	56		 push	 esi
  00011	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00014	83 c4 08	 add	 esp, 8
  00017	84 c0		 test	 al, al
  00019	74 5a		 je	 SHORT $LN22@Med3

; 3685 : 		_STD iter_swap(_Mid, _First);

  0001b	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00024	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00027	89 5d f4	 mov	 DWORD PTR __Tmp$206559[ebp+16], ebx
  0002a	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  0002d	89 5d f8	 mov	 DWORD PTR __Tmp$206559[ebp+20], ebx
  00030	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00033	89 5d fc	 mov	 DWORD PTR __Tmp$206559[ebp+24], ebx
  00036	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00039	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0003c	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0003f	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00042	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00045	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00048	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0004b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0004e	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00051	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00054	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00057	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  0005a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0005d	8b 45 f4	 mov	 eax, DWORD PTR __Tmp$206559[ebp+16]
  00060	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  00063	8b 4d f8	 mov	 ecx, DWORD PTR __Tmp$206559[ebp+20]
  00066	89 57 0c	 mov	 DWORD PTR [edi+12], edx
  00069	8b 55 fc	 mov	 edx, DWORD PTR __Tmp$206559[ebp+24]
  0006c	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0006f	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  00072	89 57 18	 mov	 DWORD PTR [edi+24], edx
$LN22@Med3:

; 3686 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00075	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  00078	56		 push	 esi
  00079	53		 push	 ebx
  0007a	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0007d	83 c4 08	 add	 esp, 8
  00080	84 c0		 test	 al, al
  00082	74 60		 je	 SHORT $LN40@Med3

; 3687 : 		_STD iter_swap(_Last, _Mid);

  00084	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  00087	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0008d	89 55 f0	 mov	 DWORD PTR __Tmp$206618[ebp+12], edx
  00090	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00093	89 55 f4	 mov	 DWORD PTR __Tmp$206618[ebp+16], edx
  00096	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00099	89 55 f8	 mov	 DWORD PTR __Tmp$206618[ebp+20], edx
  0009c	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  0009f	89 55 fc	 mov	 DWORD PTR __Tmp$206618[ebp+24], edx
  000a2	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000a5	89 53 04	 mov	 DWORD PTR [ebx+4], edx
  000a8	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  000ab	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  000ae	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000b1	89 53 0c	 mov	 DWORD PTR [ebx+12], edx
  000b4	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000b7	89 53 10	 mov	 DWORD PTR [ebx+16], edx
  000ba	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000bd	89 53 14	 mov	 DWORD PTR [ebx+20], edx
  000c0	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  000c3	89 53 18	 mov	 DWORD PTR [ebx+24], edx
  000c6	8b 55 f8	 mov	 edx, DWORD PTR __Tmp$206618[ebp+20]
  000c9	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000cc	8b 45 f0	 mov	 eax, DWORD PTR __Tmp$206618[ebp+12]
  000cf	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __Tmp$206618[ebp+16]
  000d5	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000d8	8b 45 fc	 mov	 eax, DWORD PTR __Tmp$206618[ebp+24]
  000db	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  000de	89 56 14	 mov	 DWORD PTR [esi+20], edx
  000e1	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN40@Med3:

; 3688 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  000e4	57		 push	 edi
  000e5	56		 push	 esi
  000e6	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000e9	83 c4 08	 add	 esp, 8
  000ec	84 c0		 test	 al, al
  000ee	74 5a		 je	 SHORT $LN58@Med3

; 3689 : 		_STD iter_swap(_Mid, _First);

  000f0	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  000f3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000f9	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000fc	89 5d f4	 mov	 DWORD PTR __Tmp$206677[ebp+16], ebx
  000ff	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00102	89 5d f8	 mov	 DWORD PTR __Tmp$206677[ebp+20], ebx
  00105	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00108	89 5d fc	 mov	 DWORD PTR __Tmp$206677[ebp+24], ebx
  0010b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0010e	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00111	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  00114	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00117	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  0011a	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  0011d	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00120	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00123	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00126	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00129	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  0012c	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  0012f	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00132	8b 45 fc	 mov	 eax, DWORD PTR __Tmp$206677[ebp+24]
  00135	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  00138	8b 4d f4	 mov	 ecx, DWORD PTR __Tmp$206677[ebp+16]
  0013b	89 57 0c	 mov	 DWORD PTR [edi+12], edx
  0013e	8b 55 f8	 mov	 edx, DWORD PTR __Tmp$206677[ebp+20]
  00141	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  00144	89 57 14	 mov	 DWORD PTR [edi+20], edx
  00147	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN58@Med3:
  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx

; 3690 : 	}

  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c3		 ret	 0
??$_Med3@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z ENDP ; std::_Med3<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Pop_heap_0<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z$0
__ehfuncinfo$??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z
_TEXT	SEGMENT
__Val$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z PROC ; std::_Pop_heap_0<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 2601 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2602 : 	_Ty _Val = _Move(*(_Last - 1));

  00026	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00029	8b 48 e8	 mov	 ecx, DWORD PTR [eax-24]
  0002c	8b 50 ec	 mov	 edx, DWORD PTR [eax-20]
  0002f	89 4d dc	 mov	 DWORD PTR __Val$[ebp+4], ecx
  00032	8b 48 f0	 mov	 ecx, DWORD PTR [eax-16]
  00035	89 55 e0	 mov	 DWORD PTR __Val$[ebp+8], edx
  00038	8b 50 f4	 mov	 edx, DWORD PTR [eax-12]
  0003b	89 4d e4	 mov	 DWORD PTR __Val$[ebp+12], ecx
  0003e	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00041	89 55 e8	 mov	 DWORD PTR __Val$[ebp+16], edx
  00044	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00047	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Val$[ebp], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  0004e	89 4d ec	 mov	 DWORD PTR __Val$[ebp+20], ecx
  00051	89 55 f0	 mov	 DWORD PTR __Val$[ebp+24], edx

; 2603 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2604 : 		_Move(_Val), _Pred, _Dist_type(_First));

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00057	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005a	89 50 e8	 mov	 DWORD PTR [eax-24], edx
  0005d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00060	89 50 ec	 mov	 DWORD PTR [eax-20], edx
  00063	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00066	89 50 f0	 mov	 DWORD PTR [eax-16], edx
  00069	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0006c	89 50 f4	 mov	 DWORD PTR [eax-12], edx
  0006f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00072	89 50 f8	 mov	 DWORD PTR [eax-8], edx
  00075	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00078	89 50 fc	 mov	 DWORD PTR [eax-4], edx
  0007b	8b 55 10	 mov	 edx, DWORD PTR __Pred$[ebp]
  0007e	52		 push	 edx
  0007f	2b c1		 sub	 eax, ecx
  00081	8d 70 e4	 lea	 esi, DWORD PTR [eax-28]
  00084	8d 55 d8	 lea	 edx, DWORD PTR __Val$[ebp]
  00087	52		 push	 edx
  00088	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0008d	f7 ee		 imul	 esi
  0008f	03 d6		 add	 edx, esi
  00091	c1 fa 04	 sar	 edx, 4
  00094	8b c2		 mov	 eax, edx
  00096	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00099	03 c2		 add	 eax, edx
  0009b	50		 push	 eax
  0009c	6a 00		 push	 0
  0009e	51		 push	 ecx
  0009f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a6	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Adjust_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  000ab	83 c4 14	 add	 esp, 20			; 00000014H

; 2605 : 	}

  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b8	59		 pop	 ecx
  000b9	5e		 pop	 esi
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Val$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_CS_SCHEDULE_DATA@@UAE@XZ ; _CS_SCHEDULE_DATA::~_CS_SCHEDULE_DATA
__ehhandler$??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z ENDP ; std::_Pop_heap_0<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
PUBLIC	??_C@_0GG@DODLAEAG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Crea@ ; `string'
PUBLIC	?CreateAllCsGateLever@CCastleSiege@@QAEXXZ	; CCastleSiege::CreateAllCsGateLever
;	COMDAT ??_C@_0GG@DODLAEAG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Crea@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
CONST	SEGMENT
??_C@_0GG@DODLAEAG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Crea@ DB '[Castle'
	DB	'Siege] CCastleSiege::CreateAllCsGateLever() ERROR - Failed to'
	DB	' Create Gate Lever : GateIndex:%d', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateAllCsGateLever@CCastleSiege@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateAllCsGateLever@CCastleSiege@@QAEXXZ$0
__ehfuncinfo$?CreateAllCsGateLever@CCastleSiege@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateAllCsGateLever@CCastleSiege@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?CreateAllCsGateLever@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_$S1$185485 = -132					; size = 116
tv288 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateAllCsGateLever@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::CreateAllCsGateLever, COMDAT
; _this$ = ecx

; 1103 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateAllCsGateLever@CCastleSiege@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 78	 sub	 esp, 120		; 00000078H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1104 : 	EnterCriticalSection(&m_critNpcData);

  0002a	8d 9f 38 01 00
	00		 lea	 ebx, DWORD PTR [edi+312]
  00030	53		 push	 ebx
  00031	89 5d f0	 mov	 DWORD PTR tv288[ebp], ebx
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1105 : 
; 1106 : 	if(!m_vtNpcData.empty())

  0003a	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]
  00040	3b b7 2c 01 00
	00		 cmp	 esi, DWORD PTR [edi+300]
  00046	0f 84 85 00 00
	00		 je	 $LN5@CreateAllC

; 1107 : 	{
; 1108 : 		vector<_CS_NPC_DATA>::iterator it;
; 1109 : 		for(it = m_vtNpcData.begin(); it != m_vtNpcData.end(); it++)

  0004c	83 cb ff	 or	 ebx, -1
  0004f	90		 npad	 1
$LL32@CreateAllC:

; 1110 : 		{
; 1111 : 			_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00050	56		 push	 esi
  00051	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$185485[ebp]
  00057	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 1112 : 
; 1113 : 			if(pNpcData.m_iNPC_NUM == 277)

  0005c	81 7d 84 15 01
	00 00		 cmp	 DWORD PTR _$S1$185485[ebp+8], 277 ; 00000115H
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	75 54		 jne	 SHORT $LN1@CreateAllC

; 1114 : 			{
; 1115 : 				if(pNpcData.m_iCS_GATE_LEVER_INDEX != -1 && CheckLeverAlive(pNpcData.m_iCS_GATE_LEVER_INDEX) == 1)

  0006c	8b 45 e0	 mov	 eax, DWORD PTR _$S1$185485[ebp+100]
  0006f	3b c3		 cmp	 eax, ebx
  00071	74 0d		 je	 SHORT $LN3@CreateAllC
  00073	50		 push	 eax
  00074	8b cf		 mov	 ecx, edi
  00076	e8 00 00 00 00	 call	 ?CheckLeverAlive@CCastleSiege@@QAEHH@Z ; CCastleSiege::CheckLeverAlive
  0007b	83 f8 01	 cmp	 eax, 1

; 1116 : 				{
; 1117 : 					continue;

  0007e	74 40		 je	 SHORT $LN1@CreateAllC
$LN3@CreateAllC:

; 1118 : 				}
; 1119 : 
; 1120 : 				int iLeverIndex = CreateCsGateLever(pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY + 4);

  00080	8b 45 ac	 mov	 eax, DWORD PTR _$S1$185485[ebp+48]
  00083	8b 4d a8	 mov	 ecx, DWORD PTR _$S1$185485[ebp+44]
  00086	83 c0 04	 add	 eax, 4
  00089	50		 push	 eax
  0008a	51		 push	 ecx
  0008b	8b cf		 mov	 ecx, edi
  0008d	e8 00 00 00 00	 call	 ?CreateCsGateLever@CCastleSiege@@QAEHHH@Z ; CCastleSiege::CreateCsGateLever

; 1121 : 
; 1122 : 				if(OBJMAX_RANGE(iLeverIndex))

  00092	85 c0		 test	 eax, eax
  00094	78 13		 js	 SHORT $LN72@CreateAllC
  00096	33 c9		 xor	 ecx, ecx
  00098	3d eb 2c 00 00	 cmp	 eax, 11499		; 00002cebH
  0009d	0f 9e c1	 setle	 cl
  000a0	85 c9		 test	 ecx, ecx
  000a2	74 05		 je	 SHORT $LN72@CreateAllC

; 1123 : 				{
; 1124 : 					it->m_iCS_GATE_LEVER_INDEX = iLeverIndex;

  000a4	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 1125 : 				}
; 1126 : 				else

  000a7	eb 17		 jmp	 SHORT $LN1@CreateAllC

; 1127 : 				{
; 1128 : 					it->m_iCS_GATE_LEVER_INDEX = -1;

$LN72@CreateAllC:

; 1129 : 					LogAddC(2,"[CastleSiege] CCastleSiege::CreateAllCsGateLever() ERROR - Failed to Create Gate Lever : GateIndex:%d",
; 1130 : 						pNpcData.m_iNPC_INDEX);

  000a9	8b 55 88	 mov	 edx, DWORD PTR _$S1$185485[ebp+12]
  000ac	52		 push	 edx
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@DODLAEAG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Crea@
  000b2	6a 02		 push	 2
  000b4	89 5e 64	 mov	 DWORD PTR [esi+100], ebx
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@CreateAllC:

; 1131 : 				}
; 1132 : 			}
; 1133 : 		}

  000c0	83 c6 74	 add	 esi, 116		; 00000074H
  000c3	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  000c6	3b b7 2c 01 00
	00		 cmp	 esi, DWORD PTR [edi+300]
  000cc	75 82		 jne	 SHORT $LL32@CreateAllC

; 1107 : 	{
; 1108 : 		vector<_CS_NPC_DATA>::iterator it;
; 1109 : 		for(it = m_vtNpcData.begin(); it != m_vtNpcData.end(); it++)

  000ce	8b 5d f0	 mov	 ebx, DWORD PTR tv288[ebp]
$LN5@CreateAllC:

; 1134 : 	}
; 1135 : 
; 1136 : 	LeaveCriticalSection(&m_critNpcData);

  000d1	53		 push	 ebx
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 1137 : }

  000d8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000db	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e2	59		 pop	 ecx
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateAllCsGateLever@CCastleSiege@@QAEXXZ$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$185485[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?CreateAllCsGateLever@CCastleSiege@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateAllCsGateLever@CCastleSiege@@QAEXXZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateAllCsGateLever@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::CreateAllCsGateLever
PUBLIC	??_C@_0FN@CABELLH@?$FLCastleSiege?$FN?5CCastleSiege?3?3Crea@ ; `string'
PUBLIC	?CreateDbNPC@CCastleSiege@@QAEXXZ		; CCastleSiege::CreateDbNPC
;	COMDAT ??_C@_0FN@CABELLH@?$FLCastleSiege?$FN?5CCastleSiege?3?3Crea@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
CONST	SEGMENT
??_C@_0FN@CABELLH@?$FLCastleSiege?$FN?5CCastleSiege?3?3Crea@ DB '[CastleS'
	DB	'iege] CCastleSiege::CreateDbNPC() ERROR - Failed to Create Ga'
	DB	'te Lever : GateIndex:%d', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateDbNPC@CCastleSiege@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDbNPC@CCastleSiege@@QAEXXZ$0
__ehfuncinfo$?CreateDbNPC@CCastleSiege@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateDbNPC@CCastleSiege@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?CreateDbNPC@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_$S2$185650 = -140					; size = 116
tv576 = -24						; size = 4
_iNPC_RG_LEVEL$185659 = -20				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateDbNPC@CCastleSiege@@QAEXXZ PROC			; CCastleSiege::CreateDbNPC, COMDAT
; _this$ = ecx

; 1434 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateDbNPC@CCastleSiege@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 1435 : 	EnterCriticalSection(&m_critNpcData);

  00030	8d 9e 38 01 00
	00		 lea	 ebx, DWORD PTR [esi+312]
  00036	53		 push	 ebx
  00037	89 5d e8	 mov	 DWORD PTR tv576[ebp], ebx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1436 : 
; 1437 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  00040	8b be 28 01 00
	00		 mov	 edi, DWORD PTR [esi+296]

; 1438 : 	int bExist = 0;
; 1439 : 
; 1440 : 	while(it != m_vtNpcData.end())

  00046	3b be 2c 01 00
	00		 cmp	 edi, DWORD PTR [esi+300]
  0004c	0f 84 a5 03 00
	00		 je	 $LN21@CreateDbNP
$LL22@CreateDbNP:

; 1441 : 	{
; 1442 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00052	57		 push	 edi
  00053	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$185650[ebp]
  00059	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 1443 : 
; 1444 : 		if(pNpcData.m_bIN_USE == 1 && pNpcData.m_iNPC_LIVE == 1)

  0005e	b8 01 00 00 00	 mov	 eax, 1
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	39 85 78 ff ff
	ff		 cmp	 DWORD PTR _$S2$185650[ebp+4], eax
  00070	0f 85 68 03 00
	00		 jne	 $LN19@CreateDbNP
  00076	39 45 dc	 cmp	 DWORD PTR _$S2$185650[ebp+104], eax
  00079	0f 85 5f 03 00
	00		 jne	 $LN19@CreateDbNP

; 1445 : 		{
; 1446 : 			int iNPC_INDEX = gObjAddMonster(MAP_INDEX_CASTLESIEGE);

  0007f	6a 1e		 push	 30			; 0000001eH
  00081	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00086	0f bf d8	 movsx	 ebx, ax
  00089	83 c4 04	 add	 esp, 4

; 1447 : 
; 1448 : 			if(iNPC_INDEX >= 0)

  0008c	85 db		 test	 ebx, ebx
  0008e	0f 88 4a 03 00
	00		 js	 $LN19@CreateDbNP

; 1449 : 			{
; 1450 : 				gObjSetMonster(iNPC_INDEX,pNpcData.m_iNPC_NUM);

  00094	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _$S2$185650[ebp+8]
  0009a	50		 push	 eax
  0009b	53		 push	 ebx
  0009c	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 1451 : 				gObj[iNPC_INDEX].m_PosNum = -1;
; 1452 : 				gObj[iNPC_INDEX].X = pNpcData.m_iNPC_SX;
; 1453 : 				gObj[iNPC_INDEX].Y = pNpcData.m_iNPC_SY;
; 1454 : 				gObj[iNPC_INDEX].MapNumber = MAP_INDEX_CASTLESIEGE;
; 1455 : 				gObj[iNPC_INDEX].TX = gObj[iNPC_INDEX].X;
; 1456 : 				gObj[iNPC_INDEX].TY = gObj[iNPC_INDEX].Y;
; 1457 : 				gObj[iNPC_INDEX].m_OldX = gObj[iNPC_INDEX].X;
; 1458 : 				gObj[iNPC_INDEX].m_OldY = gObj[iNPC_INDEX].Y;
; 1459 : 				gObj[iNPC_INDEX].Dir = pNpcData.m_iNPC_DIR;
; 1460 : 				gObj[iNPC_INDEX].StartX = gObj[iNPC_INDEX].X;
; 1461 : 				gObj[iNPC_INDEX].StartY = gObj[iNPC_INDEX].Y;
; 1462 : 				gObj[iNPC_INDEX].DieRegen = 0;
; 1463 : 				gObj[iNPC_INDEX].MaxRegenTime = 0;
; 1464 : 				gObj[iNPC_INDEX].Life = (float)pNpcData.m_iNPC_HP;

  000a1	db 45 9c	 fild	 DWORD PTR _$S2$185650[ebp+40]
  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000aa	8b f3		 mov	 esi, ebx
  000ac	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  000b2	83 c9 ff	 or	 ecx, -1
  000b5	66 89 8c 16 98
	05 00 00	 mov	 WORD PTR [esi+edx+1432], cx
  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c2	0f b6 4d a0	 movzx	 ecx, BYTE PTR _$S2$185650[ebp+44]
  000c6	88 8c 06 20 01
	00 00		 mov	 BYTE PTR [esi+eax+288], cl
  000cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d3	0f b6 45 a4	 movzx	 eax, BYTE PTR _$S2$185650[ebp+48]
  000d7	88 84 16 21 01
	00 00		 mov	 BYTE PTR [esi+edx+289], al
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e4	c6 84 0e 23 01
	00 00 1e	 mov	 BYTE PTR [esi+ecx+291], 30 ; 0000001eH
  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f1	0f b6 94 06 20
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+288]
  000f9	88 94 06 52 01
	00 00		 mov	 BYTE PTR [esi+eax+338], dl
  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00105	0f b6 8c 06 21
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+289]
  0010d	88 8c 06 53 01
	00 00		 mov	 BYTE PTR [esi+eax+339], cl
  00114	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00119	0f b6 94 06 20
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+288]
  00121	88 94 06 50 01
	00 00		 mov	 BYTE PTR [esi+eax+336], dl
  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0012d	0f b6 8c 06 21
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+289]
  00135	88 8c 06 51 01
	00 00		 mov	 BYTE PTR [esi+eax+337], cl
  0013c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00142	0f b6 45 b0	 movzx	 eax, BYTE PTR _$S2$185650[ebp+60]
  00146	88 84 16 22 01
	00 00		 mov	 BYTE PTR [esi+edx+290], al
  0014d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00152	0f b6 8c 06 20
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+288]
  0015a	88 8c 06 4e 01
	00 00		 mov	 BYTE PTR [esi+eax+334], cl
  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00166	0f b6 94 06 21
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+289]
  0016e	88 94 06 4f 01
	00 00		 mov	 BYTE PTR [esi+eax+335], dl
  00175	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017a	c6 84 06 8a 05
	00 00 00	 mov	 BYTE PTR [esi+eax+1418], 0
  00182	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00188	33 d2		 xor	 edx, edx
  0018a	89 94 0e 94 05
	00 00		 mov	 DWORD PTR [esi+ecx+1428], edx
  00191	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00196	83 c4 08	 add	 esp, 8
  00199	d9 9c 06 d8 00
	00 00		 fstp	 DWORD PTR [esi+eax+216]

; 1465 : 				gObj[iNPC_INDEX].MaxLife = (float)pNpcData.m_iNPC_MAXHP;

  001a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a6	db 45 98	 fild	 DWORD PTR _$S2$185650[ebp+36]
  001a9	d9 9c 0e dc 00
	00 00		 fstp	 DWORD PTR [esi+ecx+220]

; 1466 : 				gObj[iNPC_INDEX].m_btCsNpcType = 1;

  001b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b5	c6 84 06 50 20
	00 00 01	 mov	 BYTE PTR [esi+eax+8272], 1

; 1467 : 
; 1468 : 				int iNPC_DF_LEVEL = pNpcData.m_iNPC_DF_LEVEL;

  001bd	8b 45 90	 mov	 eax, DWORD PTR _$S2$185650[ebp+28]

; 1469 : 
; 1470 : 				if(iNPC_DF_LEVEL < 0)

  001c0	3b c2		 cmp	 eax, edx
  001c2	7d 04		 jge	 SHORT $LN18@CreateDbNP

; 1471 : 				{
; 1472 : 					iNPC_DF_LEVEL = 0;

  001c4	33 c0		 xor	 eax, eax

; 1473 : 				}
; 1474 : 
; 1475 : 				if(iNPC_DF_LEVEL > CS_MAX_UPGRADE)

  001c6	eb 0a		 jmp	 SHORT $LN17@CreateDbNP
$LN18@CreateDbNP:
  001c8	83 f8 03	 cmp	 eax, 3
  001cb	7e 05		 jle	 SHORT $LN17@CreateDbNP

; 1476 : 				{
; 1477 : 					iNPC_DF_LEVEL = CS_MAX_UPGRADE;

  001cd	b8 03 00 00 00	 mov	 eax, 3
$LN17@CreateDbNP:

; 1478 : 				}
; 1479 : 
; 1480 : 				int iNPC_RG_LEVEL = pNpcData.m_iNPC_RG_LEVEL;

  001d2	8b 4d 94	 mov	 ecx, DWORD PTR _$S2$185650[ebp+32]
  001d5	89 4d ec	 mov	 DWORD PTR _iNPC_RG_LEVEL$185659[ebp], ecx

; 1481 : 
; 1482 : 				if(iNPC_RG_LEVEL < 0)

  001d8	3b ca		 cmp	 ecx, edx
  001da	7d 05		 jge	 SHORT $LN16@CreateDbNP

; 1483 : 				{
; 1484 : 					iNPC_RG_LEVEL = 0;

  001dc	89 55 ec	 mov	 DWORD PTR _iNPC_RG_LEVEL$185659[ebp], edx

; 1485 : 				}
; 1486 : 
; 1487 : 				if(iNPC_RG_LEVEL > CS_MAX_UPGRADE)

  001df	eb 0c		 jmp	 SHORT $LN15@CreateDbNP
$LN16@CreateDbNP:
  001e1	83 f9 03	 cmp	 ecx, 3
  001e4	7e 07		 jle	 SHORT $LN15@CreateDbNP

; 1488 : 				{
; 1489 : 					iNPC_RG_LEVEL = CS_MAX_UPGRADE;

  001e6	c7 45 ec 03 00
	00 00		 mov	 DWORD PTR _iNPC_RG_LEVEL$185659[ebp], 3
$LN15@CreateDbNP:

; 1490 : 				}
; 1491 : 
; 1492 : 				switch(pNpcData.m_iNPC_NUM)

  001ed	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _$S2$185650[ebp+8]
  001f3	81 e9 15 01 00
	00		 sub	 ecx, 277		; 00000115H
  001f9	74 4c		 je	 SHORT $LN12@CreateDbNP
  001fb	83 e9 06	 sub	 ecx, 6
  001fe	75 7c		 jne	 SHORT $LN63@CreateDbNP

; 1498 : 					break;
; 1499 : 				case 283:
; 1500 : 					gObj[iNPC_INDEX].m_Defense = g_iNpcDefense_CSTATUE[iNPC_DF_LEVEL];

  00200	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcDefense_CSTATUE@@3PAHA[eax*4]
  00207	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0020d	89 8c 16 74 06
	00 00		 mov	 DWORD PTR [esi+edx+1652], ecx

; 1501 : 					gObj[iNPC_INDEX].m_MagicDefense = g_iNpcDefense_CSTATUE[iNPC_DF_LEVEL];

  00214	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcDefense_CSTATUE@@3PAHA[eax*4]
  0021b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00221	89 8c 16 78 06
	00 00		 mov	 DWORD PTR [esi+edx+1656], ecx

; 1502 : 					gObj[iNPC_INDEX].m_btCsNpcDfLevel = iNPC_DF_LEVEL;

  00228	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0022e	88 84 0e 58 20
	00 00		 mov	 BYTE PTR [esi+ecx+8280], al

; 1503 : 					gObj[iNPC_INDEX].m_btCsNpcRgLevel = iNPC_RG_LEVEL;

  00235	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0023b	8a 45 ec	 mov	 al, BYTE PTR _iNPC_RG_LEVEL$185659[ebp]
  0023e	88 84 16 59 20
	00 00		 mov	 BYTE PTR [esi+edx+8281], al

; 1504 : 					break;

  00245	eb 35		 jmp	 SHORT $LN63@CreateDbNP
$LN12@CreateDbNP:

; 1493 : 				{
; 1494 : 				case 277:
; 1495 : 					gObj[iNPC_INDEX].m_Defense = g_iNpcDefense_CGATE[iNPC_DF_LEVEL];

  00247	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcDefense_CGATE@@3PAHA[eax*4]
  0024e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00254	89 8c 16 74 06
	00 00		 mov	 DWORD PTR [esi+edx+1652], ecx

; 1496 : 					gObj[iNPC_INDEX].m_MagicDefense = g_iNpcDefense_CGATE[iNPC_DF_LEVEL];

  0025b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcDefense_CGATE@@3PAHA[eax*4]
  00262	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00268	89 8c 16 78 06
	00 00		 mov	 DWORD PTR [esi+edx+1656], ecx

; 1497 : 					gObj[iNPC_INDEX].m_btCsNpcDfLevel = iNPC_DF_LEVEL;

  0026f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00275	88 84 0e 58 20
	00 00		 mov	 BYTE PTR [esi+ecx+8280], al

; 1505 : 				}
; 1506 : 
; 1507 : 				it->m_btCsNpcExistVal1 = rand()%255+1;

$LN63@CreateDbNP:
  0027c	e8 00 00 00 00	 call	 _rand
  00281	99		 cdq
  00282	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00287	f7 f9		 idiv	 ecx
  00289	fe c2		 inc	 dl
  0028b	88 57 70	 mov	 BYTE PTR [edi+112], dl

; 1508 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal1 = it->m_btCsNpcExistVal1;

  0028e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00293	88 94 06 4c 20
	00 00		 mov	 BYTE PTR [esi+eax+8268], dl

; 1509 : 
; 1510 : 				it->m_btCsNpcExistVal2 = rand()%256;

  0029a	e8 00 00 00 00	 call	 _rand
  0029f	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  002a4	79 07		 jns	 SHORT $LN183@CreateDbNP
  002a6	48		 dec	 eax
  002a7	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  002ac	40		 inc	 eax
$LN183@CreateDbNP:
  002ad	88 47 71	 mov	 BYTE PTR [edi+113], al

; 1511 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal2 = it->m_btCsNpcExistVal2;

  002b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002b6	88 84 0e 4d 20
	00 00		 mov	 BYTE PTR [esi+ecx+8269], al

; 1512 : 
; 1513 : 				it->m_btCsNpcExistVal3 = rand()%256;

  002bd	e8 00 00 00 00	 call	 _rand
  002c2	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  002c7	79 07		 jns	 SHORT $LN184@CreateDbNP
  002c9	48		 dec	 eax
  002ca	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  002cf	40		 inc	 eax
$LN184@CreateDbNP:
  002d0	88 47 72	 mov	 BYTE PTR [edi+114], al

; 1514 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal3 = it->m_btCsNpcExistVal3;

  002d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002d9	88 84 16 4e 20
	00 00		 mov	 BYTE PTR [esi+edx+8270], al

; 1515 : 
; 1516 : 				it->m_btCsNpcExistVal4 = rand()%256;

  002e0	e8 00 00 00 00	 call	 _rand
  002e5	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  002ea	79 07		 jns	 SHORT $LN185@CreateDbNP
  002ec	48		 dec	 eax
  002ed	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  002f2	40		 inc	 eax
$LN185@CreateDbNP:

; 1517 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal4 = it->m_btCsNpcExistVal4;
; 1518 : 
; 1519 : 				if(pNpcData.m_iNPC_NUM == 277)

  002f3	81 bd 7c ff ff
	ff 15 01 00 00	 cmp	 DWORD PTR _$S2$185650[ebp+8], 277 ; 00000115H
  002fd	88 47 73	 mov	 BYTE PTR [edi+115], al
  00300	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00306	88 84 0e 4f 20
	00 00		 mov	 BYTE PTR [esi+ecx+8271], al
  0030d	0f 85 be 00 00
	00		 jne	 $LN153@CreateDbNP

; 1520 : 				{
; 1521 : 					SetGateBlockState(pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY,1);

  00313	8b 55 a4	 mov	 edx, DWORD PTR _$S2$185650[ebp+48]
  00316	8b 45 a0	 mov	 eax, DWORD PTR _$S2$185650[ebp+44]
  00319	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0031c	6a 01		 push	 1
  0031e	52		 push	 edx
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?SetGateBlockState@CCastleSiege@@QAEXHHH@Z ; CCastleSiege::SetGateBlockState

; 1522 : 					gObjAddBuffEffect(&gObj[iNPC_INDEX],BUFF_GATESTATUS,0,0,0,0,-10);

  00325	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0032b	6a f6		 push	 -10			; fffffff6H
  0032d	6a 00		 push	 0
  0032f	6a 00		 push	 0
  00331	6a 00		 push	 0
  00333	6a 00		 push	 0
  00335	8d 14 0e	 lea	 edx, DWORD PTR [esi+ecx]
  00338	6a 0d		 push	 13			; 0000000dH
  0033a	52		 push	 edx
  0033b	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 1523 : 					gObj[iNPC_INDEX].m_btCsGateOpen = TRUE;

  00340	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00345	c6 84 06 51 20
	00 00 01	 mov	 BYTE PTR [esi+eax+8273], 1

; 1524 : 					int bCreateLever = FALSE;
; 1525 : 
; 1526 : 					if(pNpcData.m_iCS_GATE_LEVER_INDEX == -1)

  0034d	8b 75 d8	 mov	 esi, DWORD PTR _$S2$185650[ebp+100]
  00350	83 c4 1c	 add	 esp, 28			; 0000001cH
  00353	83 fe ff	 cmp	 esi, -1

; 1527 : 					{
; 1528 : 						bCreateLever = TRUE;

  00356	74 0d		 je	 SHORT $LN175@CreateDbNP

; 1529 : 					}
; 1530 : 					else if(CheckLeverAlive(pNpcData.m_iCS_GATE_LEVER_INDEX) == FALSE)

  00358	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0035b	56		 push	 esi
  0035c	e8 00 00 00 00	 call	 ?CheckLeverAlive@CCastleSiege@@QAEHH@Z ; CCastleSiege::CheckLeverAlive
  00361	85 c0		 test	 eax, eax
  00363	75 4a		 jne	 SHORT $LN6@CreateDbNP
$LN175@CreateDbNP:

; 1531 : 					{
; 1532 : 						bCreateLever = TRUE;
; 1533 : 					}
; 1534 : 
; 1535 : 					if(bCreateLever != FALSE)
; 1536 : 					{
; 1537 : 						int iLeverIndex = CreateCsGateLever(pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY+4);

  00365	8b 4d a4	 mov	 ecx, DWORD PTR _$S2$185650[ebp+48]
  00368	8b 55 a0	 mov	 edx, DWORD PTR _$S2$185650[ebp+44]
  0036b	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  0036e	83 c1 04	 add	 ecx, 4
  00371	51		 push	 ecx
  00372	52		 push	 edx
  00373	8b ce		 mov	 ecx, esi
  00375	e8 00 00 00 00	 call	 ?CreateCsGateLever@CCastleSiege@@QAEHHH@Z ; CCastleSiege::CreateCsGateLever

; 1538 : 
; 1539 : 						if(OBJMAX_RANGE(iLeverIndex))

  0037a	85 c0		 test	 eax, eax
  0037c	78 24		 js	 SHORT $LN144@CreateDbNP
  0037e	33 c9		 xor	 ecx, ecx
  00380	3d eb 2c 00 00	 cmp	 eax, 11499		; 00002cebH
  00385	0f 9e c1	 setle	 cl
  00388	85 c9		 test	 ecx, ecx
  0038a	74 16		 je	 SHORT $LN144@CreateDbNP

; 1540 : 						{
; 1541 : 							it->m_iCS_GATE_LEVER_INDEX = iLeverIndex;
; 1542 : 
; 1543 : 							int bRETVAL = LinkCsGateLever(iLeverIndex,iNPC_INDEX);

  0038c	53		 push	 ebx
  0038d	50		 push	 eax
  0038e	8b ce		 mov	 ecx, esi
  00390	89 47 64	 mov	 DWORD PTR [edi+100], eax
  00393	e8 00 00 00 00	 call	 ?LinkCsGateLever@CCastleSiege@@QAEHHH@Z ; CCastleSiege::LinkCsGateLever

; 1544 : 
; 1545 : 							if(bRETVAL == FALSE)

  00398	85 c0		 test	 eax, eax
  0039a	75 35		 jne	 SHORT $LN153@CreateDbNP

; 1546 : 							{
; 1547 : 								LogAddC(2,"[CastleSiege] CCastleSiege::CreateDbNPC() ERROR - Failed to Create Gate Lever : GateIndex:%d",pNpcData.m_iNPC_INDEX);

  0039c	8b 45 80	 mov	 eax, DWORD PTR _$S2$185650[ebp+12]
  0039f	50		 push	 eax

; 1548 : 							}
; 1549 : 						}
; 1550 : 						else

  003a0	eb 1f		 jmp	 SHORT $LN186@CreateDbNP

; 1551 : 						{
; 1552 : 							it->m_iCS_GATE_LEVER_INDEX = -1;

$LN144@CreateDbNP:

; 1553 : 							LogAddC(2,"[CastleSiege] CCastleSiege::CreateDbNPC() ERROR - Failed to Create Gate Lever : GateIndex:%d",pNpcData.m_iNPC_INDEX);

  003a2	8b 4d 80	 mov	 ecx, DWORD PTR _$S2$185650[ebp+12]
  003a5	c7 47 64 ff ff
	ff ff		 mov	 DWORD PTR [edi+100], -1
  003ac	51		 push	 ecx

; 1554 : 						}
; 1555 : 					}
; 1556 : 					else

  003ad	eb 12		 jmp	 SHORT $LN186@CreateDbNP
$LN6@CreateDbNP:

; 1557 : 					{
; 1558 : 						int bRETVAL = LinkCsGateLever(pNpcData.m_iCS_GATE_LEVER_INDEX,iNPC_INDEX);

  003af	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003b2	53		 push	 ebx
  003b3	56		 push	 esi
  003b4	e8 00 00 00 00	 call	 ?LinkCsGateLever@CCastleSiege@@QAEHHH@Z ; CCastleSiege::LinkCsGateLever

; 1559 : 
; 1560 : 						if(bRETVAL == FALSE)

  003b9	85 c0		 test	 eax, eax
  003bb	75 14		 jne	 SHORT $LN153@CreateDbNP

; 1561 : 						{
; 1562 : 							LogAddC(2,"[CastleSiege] CCastleSiege::CreateDbNPC() ERROR - Failed to Create Gate Lever : GateIndex:%d",pNpcData.m_iNPC_INDEX);

  003bd	8b 55 80	 mov	 edx, DWORD PTR _$S2$185650[ebp+12]
  003c0	52		 push	 edx
$LN186@CreateDbNP:
  003c1	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@CABELLH@?$FLCastleSiege?$FN?5CCastleSiege?3?3Crea@
  003c6	6a 02		 push	 2
  003c8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  003ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1563 : 						}
; 1564 : 					}
; 1565 : 				}
; 1566 : 
; 1567 : 				it->m_iNPC_OBJINDEX = iNPC_INDEX;

$LN153@CreateDbNP:

; 1568 : 				it->m_iNPC_LIVE = 2;

  003d1	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  003d4	89 5f 18	 mov	 DWORD PTR [edi+24], ebx
  003d7	c7 47 68 02 00
	00 00		 mov	 DWORD PTR [edi+104], 2
$LN19@CreateDbNP:

; 1569 : 			}
; 1570 : 		}
; 1571 : 
; 1572 : 		it++;

  003de	83 c7 74	 add	 edi, 116		; 00000074H

; 1573 : 	}

  003e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003e8	3b be 2c 01 00
	00		 cmp	 edi, DWORD PTR [esi+300]
  003ee	0f 85 5e fc ff
	ff		 jne	 $LL22@CreateDbNP

; 1438 : 	int bExist = 0;
; 1439 : 
; 1440 : 	while(it != m_vtNpcData.end())

  003f4	8b 5d e8	 mov	 ebx, DWORD PTR tv576[ebp]
$LN21@CreateDbNP:

; 1574 : 	LeaveCriticalSection(&m_critNpcData);

  003f7	53		 push	 ebx
  003f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 1575 : }

  003fe	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00401	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00408	59		 pop	 ecx
  00409	5f		 pop	 edi
  0040a	5e		 pop	 esi
  0040b	5b		 pop	 ebx
  0040c	8b e5		 mov	 esp, ebp
  0040e	5d		 pop	 ebp
  0040f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateDbNPC@CCastleSiege@@QAEXXZ$0:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$185650[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?CreateDbNPC@CCastleSiege@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateDbNPC@CCastleSiege@@QAEXXZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateDbNPC@CCastleSiege@@QAEXXZ ENDP			; CCastleSiege::CreateDbNPC
PUBLIC	?GetStateGapSec@CCastleSiege@@QAEHH@Z		; CCastleSiege::GetStateGapSec
; Function compile flags: /Ogtp
;	COMDAT ?GetStateGapSec@CCastleSiege@@QAEHH@Z
_TEXT	SEGMENT
_iCastleSiegeState$ = 8					; size = 4
?GetStateGapSec@CCastleSiege@@QAEHH@Z PROC		; CCastleSiege::GetStateGapSec, COMDAT
; _this$ = ecx

; 1869 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 1870 : 	int iGAP_SEC = -1;
; 1871 : 
; 1872 : 	EnterCriticalSection(&m_critScheduleData);

  00008	8d be 10 01 00
	00		 lea	 edi, DWORD PTR [esi+272]
  0000e	57		 push	 edi
  0000f	83 cb ff	 or	 ebx, -1
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1873 : 
; 1874 : 	vector<_CS_SCHEDULE_DATA>::iterator it;
; 1875 : 
; 1876 : 	for( it = m_vtScheduleData.begin(); it != m_vtScheduleData.end(); it++)

  00018	8b 86 00 01 00
	00		 mov	 eax, DWORD PTR [esi+256]
  0001e	8b b6 04 01 00
	00		 mov	 esi, DWORD PTR [esi+260]
  00024	3b c6		 cmp	 eax, esi
  00026	74 27		 je	 SHORT $LN2@GetStateGa
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _iCastleSiegeState$[ebp]
  0002b	eb 03 8d 49 00	 npad	 5
$LL23@GetStateGa:

; 1877 : 	{
; 1878 : 		_CS_SCHEDULE_DATA & pScheduleData = *it;
; 1879 : 
; 1880 : 		if(pScheduleData.m_iSTATE == iCastleSiegeState)

  00030	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  00033	74 17		 je	 SHORT $LN47@GetStateGa

; 1873 : 
; 1874 : 	vector<_CS_SCHEDULE_DATA>::iterator it;
; 1875 : 
; 1876 : 	for( it = m_vtScheduleData.begin(); it != m_vtScheduleData.end(); it++)

  00035	83 c0 1c	 add	 eax, 28			; 0000001cH
  00038	3b c6		 cmp	 eax, esi
  0003a	75 f4		 jne	 SHORT $LL23@GetStateGa

; 1883 : 			break;
; 1884 : 		}
; 1885 : 	}
; 1886 : 
; 1887 : 	LeaveCriticalSection(&m_critScheduleData);

  0003c	57		 push	 edi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 1888 : 
; 1889 : 	return iGAP_SEC;

  00045	8b c3		 mov	 eax, ebx
  00047	5b		 pop	 ebx

; 1890 : }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN47@GetStateGa:

; 1881 : 		{
; 1882 : 			iGAP_SEC = pScheduleData.m_iGAP_SEC;

  0004c	8b 58 18	 mov	 ebx, DWORD PTR [eax+24]
$LN2@GetStateGa:

; 1883 : 			break;
; 1884 : 		}
; 1885 : 	}
; 1886 : 
; 1887 : 	LeaveCriticalSection(&m_critScheduleData);

  0004f	57		 push	 edi
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1888 : 
; 1889 : 	return iGAP_SEC;

  00058	8b c3		 mov	 eax, ebx
  0005a	5b		 pop	 ebx

; 1890 : }

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?GetStateGapSec@CCastleSiege@@QAEHH@Z ENDP		; CCastleSiege::GetStateGapSec
_TEXT	ENDS
PUBLIC	??_C@_0DF@FFEANMMB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@ ; `string'
PUBLIC	??_C@_0GG@KOPDCIML@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@ ; `string'
PUBLIC	__real@00000000
PUBLIC	_this$GSCopy$
PUBLIC	??_C@_0DH@HHIDCEGC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?StoreDbNpc@CCastleSiege@@QAEXXZ		; CCastleSiege::StoreDbNpc
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0DF@FFEANMMB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\include\prodef.h
CONST	SEGMENT
??_C@_0DF@FFEANMMB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@ DB '[Castle'
	DB	'Siege] CCastleSiege::StoreDbNpc() - << END >>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@KOPDCIML@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@
CONST	SEGMENT
??_C@_0GG@KOPDCIML@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@ DB '[Castle'
	DB	'Siege] CCastleSiege::StoreDbNpc() NPC INFO (CLS:%d, IDX:%d(%d'
	DB	'), MAXHP:%d, HP:%d, DF:%d, RG:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0DH@HHIDCEGC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@
CONST	SEGMENT
??_C@_0DH@HHIDCEGC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@ DB '[Castle'
	DB	'Siege] CCastleSiege::StoreDbNpc() - << START >>', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StoreDbNpc@CCastleSiege@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StoreDbNpc@CCastleSiege@@QAEXXZ$0
__ehfuncinfo$?StoreDbNpc@CCastleSiege@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?StoreDbNpc@CCastleSiege@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?StoreDbNpc@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_$S3$185897 = -4388					; size = 116
_this$GSCopy$ = -4272					; size = 4
tv580 = -4268						; size = 4
_it$ = -4264						; size = 4
_iCOUNT$ = -4260					; size = 4
_cBUFFER$ = -4256					; size = 4240
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?StoreDbNpc@CCastleSiege@@QAEXXZ PROC			; CCastleSiege::StoreDbNpc, COMDAT
; _this$ = ecx

; 1999 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?StoreDbNpc@CCastleSiege@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 18 11 00 00	 mov	 eax, 4376		; 00001118H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b f9		 mov	 edi, ecx

; 2000 : 	LogAddTD("[CastleSiege] CCastleSiege::StoreDbNpc() - << START >>");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@HHIDCEGC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@

; 2001 : 
; 2002 : 	char cBUFFER[0x1090];
; 2003 : 
; 2004 : 	CSP_REQ_NPCUPDATEDATA * lpMsg = (CSP_REQ_NPCUPDATEDATA *)cBUFFER;
; 2005 : 	CSP_NPCUPDATEDATA * lpMsgBody = (CSP_NPCUPDATEDATA *)&cBUFFER[sizeof(CSP_REQ_NPCUPDATEDATA)];
; 2006 : 
; 2007 : 	int iCOUNT = 0;

  00039	89 bd 50 ef ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00045	83 c4 04	 add	 esp, 4

; 2008 : 
; 2009 : 	EnterCriticalSection(&m_critNpcData);

  00048	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  0004e	33 f6		 xor	 esi, esi
  00050	50		 push	 eax
  00051	89 b5 5c ef ff
	ff		 mov	 DWORD PTR _iCOUNT$[ebp], esi
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 2010 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  0005d	8b 9f 28 01 00
	00		 mov	 ebx, DWORD PTR [edi+296]
  00063	89 9d 58 ef ff
	ff		 mov	 DWORD PTR _it$[ebp], ebx

; 2011 : 	int bExist = FALSE;
; 2012 : 
; 2013 : 	while(it != m_vtNpcData.end())

  00069	3b 9f 2c 01 00
	00		 cmp	 ebx, DWORD PTR [edi+300]
  0006f	0f 84 72 01 00
	00		 je	 $LN49@StoreDbNpc

; 2041 : 			iCOUNT++;

  00075	8d b5 74 ef ff
	ff		 lea	 esi, DWORD PTR _cBUFFER$[ebp+20]
  0007b	eb 03 8d 49 00	 npad	 5
$LL5@StoreDbNpc:

; 2014 : 	{
; 2015 : 		if(iCOUNT >= 150)

  00080	81 bd 5c ef ff
	ff 96 00 00 00	 cmp	 DWORD PTR _iCOUNT$[ebp], 150 ; 00000096H
  0008a	0f 8d 51 01 00
	00		 jge	 $LN51@StoreDbNpc

; 2016 : 			break;
; 2017 : 
; 2018 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00090	53		 push	 ebx
  00091	8d 8d dc ee ff
	ff		 lea	 ecx, DWORD PTR _$S3$185897[ebp]
  00097	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 2019 : 
; 2020 : 		if(pNpcData.m_bNPC_DBSAVE == TRUE 
; 2021 : 			&& gObjIsConnected(pNpcData.m_iNPC_OBJINDEX)
; 2022 : 			&& gObj[pNpcData.m_iNPC_OBJINDEX].Class == pNpcData.m_iNPC_NUM
; 2023 : 			&& gObj[pNpcData.m_iNPC_OBJINDEX].m_iCsNpcExistVal == pNpcData.m_iCsNpcExistVal
; 2024 : 			&& gObj[pNpcData.m_iNPC_OBJINDEX].m_iCsNpcExistVal != NULL
; 2025 : 			&& gObj[pNpcData.m_iNPC_OBJINDEX].Live == TRUE
; 2026 : 			&& gObj[pNpcData.m_iNPC_OBJINDEX].Life > 0)

  0009c	83 bd ec ee ff
	ff 01		 cmp	 DWORD PTR _$S3$185897[ebp+16], 1
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000aa	0f 85 15 01 00
	00		 jne	 $LN2@StoreDbNpc
  000b0	8b 85 f4 ee ff
	ff		 mov	 eax, DWORD PTR _$S3$185897[ebp+24]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000bc	83 c4 04	 add	 esp, 4
  000bf	85 c0		 test	 eax, eax
  000c1	0f 84 fe 00 00
	00		 je	 $LN2@StoreDbNpc
  000c7	8b 8d f4 ee ff
	ff		 mov	 ecx, DWORD PTR _$S3$185897[ebp+24]
  000cd	8b 95 e4 ee ff
	ff		 mov	 edx, DWORD PTR _$S3$185897[ebp+8]
  000d3	69 c9 40 27 00
	00		 imul	 ecx, 10048		; 00002740H
  000d9	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000df	0f b7 81 90 00
	00 00		 movzx	 eax, WORD PTR [ecx+144]
  000e6	3b c2		 cmp	 eax, edx
  000e8	0f 85 d7 00 00
	00		 jne	 $LN2@StoreDbNpc
  000ee	8b 81 4c 20 00
	00		 mov	 eax, DWORD PTR [ecx+8268]
  000f4	3b 85 4c ef ff
	ff		 cmp	 eax, DWORD PTR _$S3$185897[ebp+112]
  000fa	0f 85 c5 00 00
	00		 jne	 $LN2@StoreDbNpc
  00100	85 c0		 test	 eax, eax
  00102	0f 84 bd 00 00
	00		 je	 $LN2@StoreDbNpc
  00108	80 79 51 01	 cmp	 BYTE PTR [ecx+81], 1
  0010c	0f 85 b3 00 00
	00		 jne	 $LN2@StoreDbNpc
  00112	d9 ee		 fldz
  00114	8d 81 d8 00 00
	00		 lea	 eax, DWORD PTR [ecx+216]
  0011a	d8 18		 fcomp	 DWORD PTR [eax]
  0011c	89 85 54 ef ff
	ff		 mov	 DWORD PTR tv580[ebp], eax
  00122	df e0		 fnstsw	 ax
  00124	f6 c4 05	 test	 ah, 5
  00127	0f 8a 98 00 00
	00		 jp	 $LN2@StoreDbNpc

; 2027 : 		{
; 2028 : 			lpMsgBody[iCOUNT].iNpcNumber = pNpcData.m_iNPC_NUM;
; 2029 : 			lpMsgBody[iCOUNT].iNpcIndex = pNpcData.m_iNPC_INDEX;

  0012d	8b bd e8 ee ff
	ff		 mov	 edi, DWORD PTR _$S3$185897[ebp+12]

; 2030 : 			lpMsgBody[iCOUNT].iNpcDfLevel = pNpcData.m_iNPC_DF_LEVEL;

  00133	8b 9d f8 ee ff
	ff		 mov	 ebx, DWORD PTR _$S3$185897[ebp+28]
  00139	89 56 f8	 mov	 DWORD PTR [esi-8], edx

; 2031 : 			lpMsgBody[iCOUNT].iNpcRgLevel = pNpcData.m_iNPC_RG_LEVEL;

  0013c	8b 95 fc ee ff
	ff		 mov	 edx, DWORD PTR _$S3$185897[ebp+32]
  00142	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00145	89 7e fc	 mov	 DWORD PTR [esi-4], edi
  00148	89 1e		 mov	 DWORD PTR [esi], ebx

; 2032 : 			lpMsgBody[iCOUNT].iNpcMaxHp = (int)gObj[pNpcData.m_iNPC_OBJINDEX].MaxLife;

  0014a	d9 81 dc 00 00
	00		 fld	 DWORD PTR [ecx+220]
  00150	e8 00 00 00 00	 call	 __ftol2_sse
  00155	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 2033 : 			lpMsgBody[iCOUNT].iNpcHp = (int)gObj[pNpcData.m_iNPC_OBJINDEX].Life;

  00158	8b 85 54 ef ff
	ff		 mov	 eax, DWORD PTR tv580[ebp]
  0015e	d9 00		 fld	 DWORD PTR [eax]
  00160	e8 00 00 00 00	 call	 __ftol2_sse

; 2034 : 			lpMsgBody[iCOUNT].btNpcX = pNpcData.m_iNPC_SX;

  00165	8a 8d 08 ef ff
	ff		 mov	 cl, BYTE PTR _$S3$185897[ebp+44]

; 2035 : 			lpMsgBody[iCOUNT].btNpcY = pNpcData.m_iNPC_SY;

  0016b	8a 95 0c ef ff
	ff		 mov	 dl, BYTE PTR _$S3$185897[ebp+48]
  00171	88 4e 10	 mov	 BYTE PTR [esi+16], cl

; 2036 : 			lpMsgBody[iCOUNT].btNpcDIR = pNpcData.m_iNPC_DIR;
; 2037 : 
; 2038 : 
; 2039 : 			LogAddTD("[CastleSiege] CCastleSiege::StoreDbNpc() NPC INFO (CLS:%d, IDX:%d(%d), MAXHP:%d, HP:%d, DF:%d, RG:%d)",
; 2040 : 				pNpcData.m_iNPC_NUM,pNpcData.m_iNPC_INDEX,pNpcData.m_iNPC_OBJINDEX,lpMsgBody[iCOUNT].iNpcMaxHp,lpMsgBody[iCOUNT].iNpcHp,lpMsgBody[iCOUNT].iNpcDfLevel,lpMsgBody[iCOUNT].iNpcRgLevel);

  00174	8b 8d fc ee ff
	ff		 mov	 ecx, DWORD PTR _$S3$185897[ebp+32]
  0017a	51		 push	 ecx
  0017b	8b 8d f4 ee ff
	ff		 mov	 ecx, DWORD PTR _$S3$185897[ebp+24]
  00181	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00184	8a 85 18 ef ff
	ff		 mov	 al, BYTE PTR _$S3$185897[ebp+60]
  0018a	53		 push	 ebx
  0018b	88 56 11	 mov	 BYTE PTR [esi+17], dl
  0018e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00191	52		 push	 edx
  00192	8b 95 e4 ee ff
	ff		 mov	 edx, DWORD PTR _$S3$185897[ebp+8]
  00198	88 46 12	 mov	 BYTE PTR [esi+18], al
  0019b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0019e	50		 push	 eax
  0019f	51		 push	 ecx
  001a0	57		 push	 edi
  001a1	52		 push	 edx
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@KOPDCIML@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2041 : 			iCOUNT++;

  001ad	ff 85 5c ef ff
	ff		 inc	 DWORD PTR _iCOUNT$[ebp]
  001b3	8b bd 50 ef ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  001b9	8b 9d 58 ef ff
	ff		 mov	 ebx, DWORD PTR _it$[ebp]
  001bf	83 c4 20	 add	 esp, 32			; 00000020H
  001c2	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN2@StoreDbNpc:

; 2042 : 		}
; 2043 : 
; 2044 : 		it++;

  001c5	83 c3 74	 add	 ebx, 116		; 00000074H
  001c8	89 9d 58 ef ff
	ff		 mov	 DWORD PTR _it$[ebp], ebx

; 2045 : 	}

  001ce	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001d5	3b 9f 2c 01 00
	00		 cmp	 ebx, DWORD PTR [edi+300]
  001db	0f 85 9f fe ff
	ff		 jne	 $LL5@StoreDbNpc
$LN51@StoreDbNpc:

; 2011 : 	int bExist = FALSE;
; 2012 : 
; 2013 : 	while(it != m_vtNpcData.end())

  001e1	8b b5 5c ef ff
	ff		 mov	 esi, DWORD PTR _iCOUNT$[ebp]
$LN49@StoreDbNpc:

; 2046 : 
; 2047 : 	LeaveCriticalSection(&m_critNpcData);

  001e7	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  001ed	50		 push	 eax
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 2048 : 
; 2049 : 	if(iCOUNT < 0)

  001f4	85 f6		 test	 esi, esi
  001f6	79 10		 jns	 SHORT $LN1@StoreDbNpc

; 2050 : 	{
; 2051 : 		iCOUNT = 0;

  001f8	c7 85 5c ef ff
	ff 00 00 00 00	 mov	 DWORD PTR _iCOUNT$[ebp], 0
  00202	8b b5 5c ef ff
	ff		 mov	 esi, DWORD PTR _iCOUNT$[ebp]
$LN1@StoreDbNpc:

; 2052 : 	}
; 2053 : 
; 2054 : 	lpMsg->wMapSvrNum = m_iMapSvrGroup;

  00208	66 8b 47 18	 mov	 ax, WORD PTR [edi+24]
  0020c	66 89 85 64 ef
	ff ff		 mov	 WORD PTR _cBUFFER$[ebp+4], ax

; 2055 : 	lpMsg->iCount = iCOUNT;
; 2056 : 	lpMsg->h.set((PBYTE)lpMsg,0x89,iCOUNT * sizeof(CSP_NPCUPDATEDATA) + sizeof(CSP_REQ_NPCUPDATEDATA));

  00213	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  0021a	2b c6		 sub	 eax, esi
  0021c	8d 04 85 0c 00
	00 00		 lea	 eax, DWORD PTR [eax*4+12]
  00223	8b c8		 mov	 ecx, eax
  00225	c1 e9 08	 shr	 ecx, 8

; 2057 : 
; 2058 : 	cDBSMng.Send((char *)lpMsg,iCOUNT * sizeof(CSP_NPCUPDATEDATA) + sizeof(CSP_REQ_NPCUPDATEDATA));

  00228	50		 push	 eax
  00229	8d 95 60 ef ff
	ff		 lea	 edx, DWORD PTR _cBUFFER$[ebp]
  0022f	88 8d 61 ef ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+1], cl
  00235	52		 push	 edx
  00236	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0023b	89 b5 68 ef ff
	ff		 mov	 DWORD PTR _cBUFFER$[ebp+8], esi
  00241	c6 85 60 ef ff
	ff c2		 mov	 BYTE PTR _cBUFFER$[ebp], 194 ; 000000c2H
  00248	88 85 62 ef ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+2], al
  0024e	c6 85 63 ef ff
	ff 89		 mov	 BYTE PTR _cBUFFER$[ebp+3], 137 ; 00000089H
  00255	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 2059 : 	LogAddTD("[CastleSiege] CCastleSiege::StoreDbNpc() - << END >>");

  0025a	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@FFEANMMB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Stor@
  0025f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00265	83 c4 04	 add	 esp, 4

; 2060 : }

  00268	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0026b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00272	59		 pop	 ecx
  00273	5f		 pop	 edi
  00274	5e		 pop	 esi
  00275	5b		 pop	 ebx
  00276	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00279	33 cd		 xor	 ecx, ebp
  0027b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00280	8b e5		 mov	 esp, ebp
  00282	5d		 pop	 ebp
  00283	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StoreDbNpc@CCastleSiege@@QAEXXZ$0:
  00000	8d 8d dc ee ff
	ff		 lea	 ecx, DWORD PTR _$S3$185897[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?StoreDbNpc@CCastleSiege@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d8 ee ff
	ff		 mov	 ecx, DWORD PTR [edx-4392]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?StoreDbNpc@CCastleSiege@@QAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?StoreDbNpc@CCastleSiege@@QAEXXZ ENDP			; CCastleSiege::StoreDbNpc
PUBLIC	?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ	; CCastleSiege::CheckReviveNonDbNPC
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ$0
__ehfuncinfo$?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_$S4$185954 = -140					; size = 116
tv352 = -24						; size = 4
_this$ = -20						; size = 4
_it$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::CheckReviveNonDbNPC, COMDAT
; _this$ = ecx

; 2090 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 2091 : 	EnterCriticalSection(&m_critNpcData);

  00030	8d 9e 38 01 00
	00		 lea	 ebx, DWORD PTR [esi+312]
  00036	53		 push	 ebx
  00037	89 5d e8	 mov	 DWORD PTR tv352[ebp], ebx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 2092 : 
; 2093 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  00040	8b be 28 01 00
	00		 mov	 edi, DWORD PTR [esi+296]
  00046	89 7d f0	 mov	 DWORD PTR _it$[ebp], edi

; 2094 : 
; 2095 : 	while(it != m_vtNpcData.end())

  00049	3b be 2c 01 00
	00		 cmp	 edi, DWORD PTR [esi+300]
  0004f	0f 84 cc 01 00
	00		 je	 $LN10@CheckReviv
  00055	33 db		 xor	 ebx, ebx
  00057	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL11@CheckReviv:

; 2096 : 	{
; 2097 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00060	57		 push	 edi
  00061	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$185954[ebp]
  00067	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
  0006c	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 2098 : 
; 2099 : 		if(pNpcData.m_bNPC_DBSAVE == 0)

  0006f	39 5d 84	 cmp	 DWORD PTR _$S4$185954[ebp+16], ebx
  00072	0f 85 8d 01 00
	00		 jne	 $LN8@CheckReviv

; 2100 : 		{
; 2101 : 			int iNPC_INDEX = gObjAddMonster(MAP_INDEX_CASTLESIEGE);

  00078	6a 1e		 push	 30			; 0000001eH
  0007a	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  0007f	0f bf f0	 movsx	 esi, ax
  00082	83 c4 04	 add	 esp, 4

; 2102 : 
; 2103 : 			if(iNPC_INDEX >= 0)

  00085	3b f3		 cmp	 esi, ebx
  00087	0f 8c 75 01 00
	00		 jl	 $LN64@CheckReviv

; 2104 : 			{
; 2105 : 				gObjSetMonster(iNPC_INDEX,pNpcData.m_iNPC_NUM);

  0008d	8b bd 7c ff ff
	ff		 mov	 edi, DWORD PTR _$S4$185954[ebp+8]
  00093	57		 push	 edi
  00094	56		 push	 esi
  00095	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 2106 : 
; 2107 : 				gObj[iNPC_INDEX].m_PosNum = -1;
; 2108 : 				gObj[iNPC_INDEX].X = pNpcData.m_iNPC_SX;
; 2109 : 				gObj[iNPC_INDEX].Y = pNpcData.m_iNPC_SY;
; 2110 : 				gObj[iNPC_INDEX].MapNumber = MAP_INDEX_CASTLESIEGE;
; 2111 : 				gObj[iNPC_INDEX].TX = gObj[iNPC_INDEX].X;
; 2112 : 				gObj[iNPC_INDEX].TY = gObj[iNPC_INDEX].Y;
; 2113 : 				gObj[iNPC_INDEX].m_OldX = gObj[iNPC_INDEX].X;
; 2114 : 				gObj[iNPC_INDEX].m_OldY = gObj[iNPC_INDEX].Y;
; 2115 : 				gObj[iNPC_INDEX].Dir = pNpcData.m_iNPC_DIR;
; 2116 : 				gObj[iNPC_INDEX].StartX = gObj[iNPC_INDEX].X;
; 2117 : 				gObj[iNPC_INDEX].StartY = gObj[iNPC_INDEX].Y;
; 2118 : 				gObj[iNPC_INDEX].DieRegen = 0;
; 2119 : 				gObj[iNPC_INDEX].MaxRegenTime = 0;
; 2120 : 				gObj[iNPC_INDEX].Life = (float)pNpcData.m_iNPC_HP;

  0009a	db 45 9c	 fild	 DWORD PTR _$S4$185954[ebp+40]
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a3	83 c9 ff	 or	 ecx, -1
  000a6	8b c6		 mov	 eax, esi
  000a8	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  000ae	66 89 8c 10 98
	05 00 00	 mov	 WORD PTR [eax+edx+1432], cx
  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bc	0f b6 55 a0	 movzx	 edx, BYTE PTR _$S4$185954[ebp+44]
  000c0	88 94 08 20 01
	00 00		 mov	 BYTE PTR [eax+ecx+288], dl
  000c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000cd	0f b6 55 a4	 movzx	 edx, BYTE PTR _$S4$185954[ebp+48]
  000d1	88 94 08 21 01
	00 00		 mov	 BYTE PTR [eax+ecx+289], dl
  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000de	c6 84 08 23 01
	00 00 1e	 mov	 BYTE PTR [eax+ecx+291], 30 ; 0000001eH
  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ec	0f b6 94 08 20
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+288]
  000f4	88 94 08 52 01
	00 00		 mov	 BYTE PTR [eax+ecx+338], dl
  000fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00101	0f b6 94 08 21
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+289]
  00109	88 94 08 53 01
	00 00		 mov	 BYTE PTR [eax+ecx+339], dl
  00110	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00116	0f b6 94 08 20
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+288]
  0011e	88 94 08 50 01
	00 00		 mov	 BYTE PTR [eax+ecx+336], dl
  00125	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0012b	0f b6 94 08 21
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+289]
  00133	88 94 08 51 01
	00 00		 mov	 BYTE PTR [eax+ecx+337], dl
  0013a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00140	0f b6 55 b0	 movzx	 edx, BYTE PTR _$S4$185954[ebp+60]
  00144	88 94 08 22 01
	00 00		 mov	 BYTE PTR [eax+ecx+290], dl
  0014b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00151	0f b6 94 08 20
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+288]
  00159	88 94 08 4e 01
	00 00		 mov	 BYTE PTR [eax+ecx+334], dl
  00160	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00166	0f b6 94 08 21
	01 00 00	 movzx	 edx, BYTE PTR [eax+ecx+289]
  0016e	88 94 08 4f 01
	00 00		 mov	 BYTE PTR [eax+ecx+335], dl
  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017b	88 9c 08 8a 05
	00 00		 mov	 BYTE PTR [eax+ecx+1418], bl
  00182	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00188	89 9c 10 94 05
	00 00		 mov	 DWORD PTR [eax+edx+1428], ebx
  0018f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00195	83 c4 08	 add	 esp, 8
  00198	d9 9c 08 d8 00
	00 00		 fstp	 DWORD PTR [eax+ecx+216]

; 2121 : 				gObj[iNPC_INDEX].MaxLife = (float)pNpcData.m_iNPC_MAXHP;

  0019f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a5	db 45 98	 fild	 DWORD PTR _$S4$185954[ebp+36]

; 2122 : 
; 2123 : 				switch(pNpcData.m_iNPC_NUM)

  001a8	8d 8f 29 ff ff
	ff		 lea	 ecx, DWORD PTR [edi-215]
  001ae	d9 9c 10 dc 00
	00 00		 fstp	 DWORD PTR [eax+edx+220]
  001b5	83 f9 49	 cmp	 ecx, 73			; 00000049H
  001b8	77 2e		 ja	 SHORT $LN1@CheckReviv
  001ba	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN63@CheckReviv[ecx]
  001c1	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN67@CheckReviv[ecx*4]
$LN4@CheckReviv:

; 2124 : 				{
; 2125 : 				case 215:
; 2126 : 					gObj[iNPC_INDEX].m_btCsNpcType = 2;
; 2127 : 					break;
; 2128 : 				case 221:
; 2129 : 					gObj[iNPC_INDEX].m_btCsNpcType = 3;

  001c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ce	c6 84 08 50 20
	00 00 03	 mov	 BYTE PTR [eax+ecx+8272], 3

; 2130 : 					break;
; 2131 : 				case 222:
; 2132 : 					gObj[iNPC_INDEX].m_btCsNpcType = 2;
; 2133 : 					break;

  001d6	eb 1e		 jmp	 SHORT $LN50@CheckReviv
$LN2@CheckReviv:

; 2134 : 				case 288:
; 2135 : 					gObj[iNPC_INDEX].m_btCsNpcType = 2;

  001d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001de	c6 84 08 50 20
	00 00 02	 mov	 BYTE PTR [eax+ecx+8272], 2

; 2136 : 					break;

  001e6	eb 0e		 jmp	 SHORT $LN50@CheckReviv
$LN1@CheckReviv:

; 2137 : 				default:
; 2138 : 					gObj[iNPC_INDEX].m_btCsNpcType = 2;

  001e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ee	c6 84 10 50 20
	00 00 02	 mov	 BYTE PTR [eax+edx+8272], 2

; 2139 : 					break;
; 2140 : 				}
; 2141 : 
; 2142 : 				it->m_bIN_USE = TRUE;

$LN50@CheckReviv:
  001f6	8b 45 f0	 mov	 eax, DWORD PTR _it$[ebp]
  001f9	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1
  00200	8b f8		 mov	 edi, eax
$LN64@CheckReviv:
  00202	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LN8@CheckReviv:

; 2143 : 			}
; 2144 : 		}
; 2145 : 
; 2146 : 		it++;

  00205	83 c7 74	 add	 edi, 116		; 00000074H
  00208	89 7d f0	 mov	 DWORD PTR _it$[ebp], edi

; 2147 : 	}

  0020b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00212	3b be 2c 01 00
	00		 cmp	 edi, DWORD PTR [esi+300]
  00218	0f 85 42 fe ff
	ff		 jne	 $LL11@CheckReviv

; 2094 : 
; 2095 : 	while(it != m_vtNpcData.end())

  0021e	8b 5d e8	 mov	 ebx, DWORD PTR tv352[ebp]
$LN10@CheckReviv:

; 2148 : 
; 2149 : 	LeaveCriticalSection(&m_critNpcData);

  00221	53		 push	 ebx
  00222	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 2150 : }

  00228	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0022b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00232	59		 pop	 ecx
  00233	5f		 pop	 edi
  00234	5e		 pop	 esi
  00235	5b		 pop	 ebx
  00236	8b e5		 mov	 esp, ebp
  00238	5d		 pop	 ebp
  00239	c3		 ret	 0
  0023a	8b ff		 npad	 2
$LN67@CheckReviv:
  0023c	00 00 00 00	 DD	 $LN1@CheckReviv
  00240	00 00 00 00	 DD	 $LN4@CheckReviv
  00244	00 00 00 00	 DD	 $LN2@CheckReviv
  00248	00 00 00 00	 DD	 $LN1@CheckReviv
$LN63@CheckReviv:
  0024c	00		 DB	 0
  0024d	03		 DB	 3
  0024e	03		 DB	 3
  0024f	03		 DB	 3
  00250	03		 DB	 3
  00251	03		 DB	 3
  00252	01		 DB	 1
  00253	00		 DB	 0
  00254	03		 DB	 3
  00255	03		 DB	 3
  00256	03		 DB	 3
  00257	03		 DB	 3
  00258	03		 DB	 3
  00259	03		 DB	 3
  0025a	03		 DB	 3
  0025b	03		 DB	 3
  0025c	03		 DB	 3
  0025d	03		 DB	 3
  0025e	03		 DB	 3
  0025f	03		 DB	 3
  00260	03		 DB	 3
  00261	03		 DB	 3
  00262	03		 DB	 3
  00263	03		 DB	 3
  00264	03		 DB	 3
  00265	03		 DB	 3
  00266	03		 DB	 3
  00267	03		 DB	 3
  00268	03		 DB	 3
  00269	03		 DB	 3
  0026a	03		 DB	 3
  0026b	03		 DB	 3
  0026c	03		 DB	 3
  0026d	03		 DB	 3
  0026e	03		 DB	 3
  0026f	03		 DB	 3
  00270	03		 DB	 3
  00271	03		 DB	 3
  00272	03		 DB	 3
  00273	03		 DB	 3
  00274	03		 DB	 3
  00275	03		 DB	 3
  00276	03		 DB	 3
  00277	03		 DB	 3
  00278	03		 DB	 3
  00279	03		 DB	 3
  0027a	03		 DB	 3
  0027b	03		 DB	 3
  0027c	03		 DB	 3
  0027d	03		 DB	 3
  0027e	03		 DB	 3
  0027f	03		 DB	 3
  00280	03		 DB	 3
  00281	03		 DB	 3
  00282	03		 DB	 3
  00283	03		 DB	 3
  00284	03		 DB	 3
  00285	03		 DB	 3
  00286	03		 DB	 3
  00287	03		 DB	 3
  00288	03		 DB	 3
  00289	03		 DB	 3
  0028a	03		 DB	 3
  0028b	03		 DB	 3
  0028c	03		 DB	 3
  0028d	03		 DB	 3
  0028e	03		 DB	 3
  0028f	03		 DB	 3
  00290	03		 DB	 3
  00291	03		 DB	 3
  00292	03		 DB	 3
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	02		 DB	 2
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ$0:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$185954[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::CheckReviveNonDbNPC
PUBLIC	?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ	; CCastleSiege::CheckReviveGuardianStatue
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ$0
__ehfuncinfo$?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_$S5$185985 = -140					; size = 116
tv480 = -24						; size = 4
_this$ = -20						; size = 4
_iNPC_RG_LEVEL$185994 = -16				; size = 4
__$EHRec$ = -12						; size = 12
?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ PROC	; CCastleSiege::CheckReviveGuardianStatue, COMDAT
; _this$ = ecx

; 2153 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 2154 : 	EnterCriticalSection(&m_critNpcData);

  00030	8d 9e 38 01 00
	00		 lea	 ebx, DWORD PTR [esi+312]
  00036	53		 push	 ebx
  00037	89 5d e8	 mov	 DWORD PTR tv480[ebp], ebx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 2155 : 
; 2156 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  00040	8b be 28 01 00
	00		 mov	 edi, DWORD PTR [esi+296]

; 2157 : 
; 2158 : 	while(it != m_vtNpcData.end())

  00046	3b be 2c 01 00
	00		 cmp	 edi, DWORD PTR [esi+300]
  0004c	0f 84 7c 02 00
	00		 je	 $LN7@CheckReviv@2
$LL8@CheckReviv@2:

; 2159 : 	{
; 2160 : 
; 2161 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00052	57		 push	 edi
  00053	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$185985[ebp]
  00059	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 2162 : 
; 2163 : 		if(pNpcData.m_iNPC_NUM == 283
; 2164 : 			&& pNpcData.m_iNPC_LIVE == FALSE
; 2165 : 			)

  0005e	81 bd 7c ff ff
	ff 1b 01 00 00	 cmp	 DWORD PTR _$S5$185985[ebp+8], 283 ; 0000011bH
  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006f	0f 85 40 02 00
	00		 jne	 $LN5@CheckReviv@2
  00075	83 7d dc 00	 cmp	 DWORD PTR _$S5$185985[ebp+104], 0
  00079	0f 85 36 02 00
	00		 jne	 $LN5@CheckReviv@2

; 2166 : 		{
; 2167 : 			int iNPC_INDEX = gObjAddMonster(MAP_INDEX_CASTLESIEGE);

  0007f	6a 1e		 push	 30			; 0000001eH
  00081	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00086	0f bf d8	 movsx	 ebx, ax
  00089	83 c4 04	 add	 esp, 4

; 2168 : 
; 2169 : 			if(iNPC_INDEX >= 0)

  0008c	85 db		 test	 ebx, ebx
  0008e	0f 88 21 02 00
	00		 js	 $LN5@CheckReviv@2

; 2170 : 			{
; 2171 : 				gObjSetMonster(iNPC_INDEX,pNpcData.m_iNPC_NUM);

  00094	68 1b 01 00 00	 push	 283			; 0000011bH
  00099	53		 push	 ebx
  0009a	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 2172 : 
; 2173 : 				gObj[iNPC_INDEX].m_PosNum = -1;
; 2174 : 				gObj[iNPC_INDEX].X = pNpcData.m_iNPC_SX;
; 2175 : 				gObj[iNPC_INDEX].Y = pNpcData.m_iNPC_SY;
; 2176 : 				gObj[iNPC_INDEX].MapNumber = MAP_INDEX_CASTLESIEGE;
; 2177 : 				gObj[iNPC_INDEX].TX = gObj[iNPC_INDEX].X;
; 2178 : 				gObj[iNPC_INDEX].TY = gObj[iNPC_INDEX].Y;
; 2179 : 				gObj[iNPC_INDEX].m_OldX = gObj[iNPC_INDEX].X;
; 2180 : 				gObj[iNPC_INDEX].m_OldY = gObj[iNPC_INDEX].Y;
; 2181 : 				gObj[iNPC_INDEX].Dir = pNpcData.m_iNPC_DIR;
; 2182 : 				gObj[iNPC_INDEX].StartX = gObj[iNPC_INDEX].X;
; 2183 : 				gObj[iNPC_INDEX].StartY = gObj[iNPC_INDEX].Y;
; 2184 : 				gObj[iNPC_INDEX].DieRegen = 0;
; 2185 : 				gObj[iNPC_INDEX].MaxRegenTime = 0;
; 2186 : 				gObj[iNPC_INDEX].Life = (float)pNpcData.m_iNPC_HP;

  0009f	db 45 9c	 fild	 DWORD PTR _$S5$185985[ebp+40]
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a8	83 c8 ff	 or	 eax, -1
  000ab	8b f3		 mov	 esi, ebx
  000ad	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  000b3	66 89 84 0e 98
	05 00 00	 mov	 WORD PTR [esi+ecx+1432], ax
  000bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c1	8a 45 a0	 mov	 al, BYTE PTR _$S5$185985[ebp+44]
  000c4	88 84 16 20 01
	00 00		 mov	 BYTE PTR [esi+edx+288], al
  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d1	0f b6 55 a4	 movzx	 edx, BYTE PTR _$S5$185985[ebp+48]
  000d5	88 94 0e 21 01
	00 00		 mov	 BYTE PTR [esi+ecx+289], dl
  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e1	c6 84 06 23 01
	00 00 1e	 mov	 BYTE PTR [esi+eax+291], 30 ; 0000001eH
  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ee	0f b6 8c 06 20
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+288]
  000f6	88 8c 06 52 01
	00 00		 mov	 BYTE PTR [esi+eax+338], cl
  000fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00102	0f b6 94 06 21
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+289]
  0010a	88 94 06 53 01
	00 00		 mov	 BYTE PTR [esi+eax+339], dl
  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00116	0f b6 8c 06 20
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+288]
  0011e	88 8c 06 50 01
	00 00		 mov	 BYTE PTR [esi+eax+336], cl
  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0012a	0f b6 94 06 21
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+289]
  00132	0f b6 4d b0	 movzx	 ecx, BYTE PTR _$S5$185985[ebp+60]
  00136	88 94 06 51 01
	00 00		 mov	 BYTE PTR [esi+eax+337], dl
  0013d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00142	88 8c 06 22 01
	00 00		 mov	 BYTE PTR [esi+eax+290], cl
  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014e	0f b6 94 06 20
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+288]
  00156	88 94 06 4e 01
	00 00		 mov	 BYTE PTR [esi+eax+334], dl
  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00162	0f b6 8c 06 21
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+289]
  0016a	88 8c 06 4f 01
	00 00		 mov	 BYTE PTR [esi+eax+335], cl
  00171	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00177	c6 84 16 8a 05
	00 00 00	 mov	 BYTE PTR [esi+edx+1418], 0
  0017f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00184	33 d2		 xor	 edx, edx
  00186	89 94 06 94 05
	00 00		 mov	 DWORD PTR [esi+eax+1428], edx
  0018d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00193	83 c4 08	 add	 esp, 8
  00196	d9 9c 0e d8 00
	00 00		 fstp	 DWORD PTR [esi+ecx+216]

; 2187 : 				gObj[iNPC_INDEX].MaxLife = (float)pNpcData.m_iNPC_MAXHP;

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a2	db 45 98	 fild	 DWORD PTR _$S5$185985[ebp+36]
  001a5	d9 9c 06 dc 00
	00 00		 fstp	 DWORD PTR [esi+eax+220]

; 2188 : 				gObj[iNPC_INDEX].m_btCsNpcType = 1;
; 2189 : 
; 2190 : 				int iNPC_DF_LEVEL = pNpcData.m_iNPC_BASE_DF_LEVEL;

  001ac	8b 45 b4	 mov	 eax, DWORD PTR _$S5$185985[ebp+64]
  001af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b5	c6 84 0e 50 20
	00 00 01	 mov	 BYTE PTR [esi+ecx+8272], 1

; 2191 : 
; 2192 : 				if(iNPC_DF_LEVEL < 0)

  001bd	3b c2		 cmp	 eax, edx
  001bf	7d 04		 jge	 SHORT $LN4@CheckReviv@2

; 2193 : 				{
; 2194 : 					iNPC_DF_LEVEL = 0;

  001c1	33 c0		 xor	 eax, eax

; 2195 : 				}
; 2196 : 
; 2197 : 				if(iNPC_DF_LEVEL > CS_MAX_UPGRADE)

  001c3	eb 0a		 jmp	 SHORT $LN3@CheckReviv@2
$LN4@CheckReviv@2:
  001c5	83 f8 03	 cmp	 eax, 3
  001c8	7e 05		 jle	 SHORT $LN3@CheckReviv@2

; 2198 : 				{
; 2199 : 					iNPC_DF_LEVEL = CS_MAX_UPGRADE;

  001ca	b8 03 00 00 00	 mov	 eax, 3
$LN3@CheckReviv@2:

; 2200 : 				}
; 2201 : 
; 2202 : 				int iNPC_RG_LEVEL = pNpcData.m_iNPC_BASE_RG_LEVEL;

  001cf	8b 4d b8	 mov	 ecx, DWORD PTR _$S5$185985[ebp+68]
  001d2	89 4d f0	 mov	 DWORD PTR _iNPC_RG_LEVEL$185994[ebp], ecx

; 2203 : 
; 2204 : 				if(iNPC_RG_LEVEL < 0)

  001d5	3b ca		 cmp	 ecx, edx
  001d7	7d 05		 jge	 SHORT $LN2@CheckReviv@2

; 2205 : 				{
; 2206 : 					iNPC_RG_LEVEL = 0;

  001d9	89 55 f0	 mov	 DWORD PTR _iNPC_RG_LEVEL$185994[ebp], edx

; 2207 : 				}
; 2208 : 
; 2209 : 				if(iNPC_RG_LEVEL > CS_MAX_UPGRADE)

  001dc	eb 0c		 jmp	 SHORT $LN1@CheckReviv@2
$LN2@CheckReviv@2:
  001de	83 f9 03	 cmp	 ecx, 3
  001e1	7e 07		 jle	 SHORT $LN1@CheckReviv@2

; 2210 : 				{
; 2211 : 					iNPC_RG_LEVEL = CS_MAX_UPGRADE;

  001e3	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _iNPC_RG_LEVEL$185994[ebp], 3
$LN1@CheckReviv@2:

; 2212 : 				}
; 2213 : 
; 2214 : 				gObj[iNPC_INDEX].m_Defense = g_iNpcDefense_CSTATUE[iNPC_DF_LEVEL];

  001ea	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?g_iNpcDefense_CSTATUE@@3PAHA[eax*4]
  001f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001f7	89 94 0e 74 06
	00 00		 mov	 DWORD PTR [esi+ecx+1652], edx

; 2215 : 				gObj[iNPC_INDEX].m_btCsNpcDfLevel = iNPC_DF_LEVEL;

  001fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2216 : 				gObj[iNPC_INDEX].m_btCsNpcRgLevel = iNPC_RG_LEVEL;

  00204	8a 4d f0	 mov	 cl, BYTE PTR _iNPC_RG_LEVEL$185994[ebp]
  00207	88 84 16 58 20
	00 00		 mov	 BYTE PTR [esi+edx+8280], al
  0020e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00213	88 8c 06 59 20
	00 00		 mov	 BYTE PTR [esi+eax+8281], cl

; 2217 : 
; 2218 : 				it->m_btCsNpcExistVal1 = rand()%255+1;

  0021a	e8 00 00 00 00	 call	 _rand
  0021f	99		 cdq
  00220	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00225	f7 f9		 idiv	 ecx
  00227	fe c2		 inc	 dl
  00229	88 57 70	 mov	 BYTE PTR [edi+112], dl

; 2219 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal1 = it->m_btCsNpcExistVal1;

  0022c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00231	88 94 06 4c 20
	00 00		 mov	 BYTE PTR [esi+eax+8268], dl

; 2220 : 
; 2221 : 				it->m_btCsNpcExistVal2 = rand()%256;

  00238	e8 00 00 00 00	 call	 _rand
  0023d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00242	79 07		 jns	 SHORT $LN152@CheckReviv@2
  00244	48		 dec	 eax
  00245	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0024a	40		 inc	 eax
$LN152@CheckReviv@2:
  0024b	88 47 71	 mov	 BYTE PTR [edi+113], al

; 2222 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal2 = it->m_btCsNpcExistVal2;

  0024e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00254	88 84 0e 4d 20
	00 00		 mov	 BYTE PTR [esi+ecx+8269], al

; 2223 : 
; 2224 : 				it->m_btCsNpcExistVal3 = rand()%256;

  0025b	e8 00 00 00 00	 call	 _rand
  00260	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00265	79 07		 jns	 SHORT $LN153@CheckReviv@2
  00267	48		 dec	 eax
  00268	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0026d	40		 inc	 eax
$LN153@CheckReviv@2:
  0026e	88 47 72	 mov	 BYTE PTR [edi+114], al

; 2225 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal3 = it->m_btCsNpcExistVal3;

  00271	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00277	88 84 16 4e 20
	00 00		 mov	 BYTE PTR [esi+edx+8270], al

; 2226 : 
; 2227 : 				it->m_btCsNpcExistVal4 = rand()%256;

  0027e	e8 00 00 00 00	 call	 _rand
  00283	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00288	79 07		 jns	 SHORT $LN154@CheckReviv@2
  0028a	48		 dec	 eax
  0028b	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  00290	40		 inc	 eax
$LN154@CheckReviv@2:
  00291	88 47 73	 mov	 BYTE PTR [edi+115], al

; 2228 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal4 = it->m_btCsNpcExistVal4;

  00294	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0029a	88 84 0e 4f 20
	00 00		 mov	 BYTE PTR [esi+ecx+8271], al

; 2229 : 
; 2230 : 				it->m_iNPC_OBJINDEX = iNPC_INDEX;
; 2231 : 				it->m_iNPC_LIVE = 2;
; 2232 : 				it->m_bIN_USE = TRUE;

  002a1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  002a4	89 5f 18	 mov	 DWORD PTR [edi+24], ebx
  002a7	c7 47 68 02 00
	00 00		 mov	 DWORD PTR [edi+104], 2
  002ae	c7 47 04 01 00
	00 00		 mov	 DWORD PTR [edi+4], 1
$LN5@CheckReviv@2:

; 2233 : 			}
; 2234 : 		}
; 2235 : 		it++;

  002b5	83 c7 74	 add	 edi, 116		; 00000074H

; 2236 : 	}

  002b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002bf	3b be 2c 01 00
	00		 cmp	 edi, DWORD PTR [esi+300]
  002c5	0f 85 87 fd ff
	ff		 jne	 $LL8@CheckReviv@2

; 2157 : 
; 2158 : 	while(it != m_vtNpcData.end())

  002cb	8b 5d e8	 mov	 ebx, DWORD PTR tv480[ebp]
$LN7@CheckReviv@2:

; 2237 : 
; 2238 : 	LeaveCriticalSection(&m_critNpcData);

  002ce	53		 push	 ebx
  002cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 2239 : }

  002d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002df	59		 pop	 ecx
  002e0	5f		 pop	 edi
  002e1	5e		 pop	 esi
  002e2	5b		 pop	 ebx
  002e3	8b e5		 mov	 esp, ebp
  002e5	5d		 pop	 ebp
  002e6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ$0:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$185985[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckReviveGuardianStatue@CCastleSiege@@QAEXXZ ENDP	; CCastleSiege::CheckReviveGuardianStatue
PUBLIC	?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ		; CCastleSiege::AdjustDbNpcLevel
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ$0
__ehfuncinfo$?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_$S6$186013 = -132					; size = 116
tv288 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::AdjustDbNpcLevel, COMDAT
; _this$ = ecx

; 2242 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 78	 sub	 esp, 120		; 00000078H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 2243 : 	EnterCriticalSection(&m_critNpcData);

  00029	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  0002f	50		 push	 eax
  00030	89 45 f0	 mov	 DWORD PTR tv288[ebp], eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 2244 : 
; 2245 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  00039	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]

; 2246 : 
; 2247 : 	while(it != m_vtNpcData.end())

  0003f	8b bf 2c 01 00
	00		 mov	 edi, DWORD PTR [edi+300]
  00045	3b f7		 cmp	 esi, edi
  00047	0f 84 0f 01 00
	00		 je	 $LN7@AdjustDbNp
  0004d	8d 49 00	 npad	 3
$LL12@AdjustDbNp:

; 2248 : 	{
; 2249 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00050	56		 push	 esi
  00051	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S6$186013[ebp]
  00057	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 2250 : 
; 2251 : 		if(pNpcData.m_bIN_USE == 1
; 2252 : 			&& pNpcData.m_iNPC_LIVE > 0)

  0005c	83 7d 80 01	 cmp	 DWORD PTR _$S6$186013[ebp+4], 1
  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00067	75 06		 jne	 SHORT $LN10@AdjustDbNp
  00069	83 7d e4 00	 cmp	 DWORD PTR _$S6$186013[ebp+104], 0
  0006d	7f 13		 jg	 SHORT $LN56@AdjustDbNp
$LN10@AdjustDbNp:

; 2301 : 				}
; 2302 : 			}
; 2303 : 
; 2304 : 			break;
; 2305 : 		}
; 2306 : 
; 2307 : 		it++;

  0006f	83 c6 74	 add	 esi, 116		; 00000074H

; 2308 : 	}

  00072	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00079	3b f7		 cmp	 esi, edi
  0007b	75 d3		 jne	 SHORT $LL12@AdjustDbNp

; 2250 : 
; 2251 : 		if(pNpcData.m_bIN_USE == 1
; 2252 : 			&& pNpcData.m_iNPC_LIVE > 0)

  0007d	e9 da 00 00 00	 jmp	 $LN7@AdjustDbNp
$LN56@AdjustDbNp:

; 2253 : 		{
; 2254 : 			int iNPC_INDEX = pNpcData.m_iNPC_OBJINDEX;
; 2255 : 
; 2256 : 			if(gObjIsConnected(iNPC_INDEX)
; 2257 : 				&& gObj[iNPC_INDEX].Class == pNpcData.m_iNPC_NUM
; 2258 : 				&& gObj[iNPC_INDEX].m_btCsNpcType != FALSE
; 2259 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal == pNpcData.m_iCsNpcExistVal
; 2260 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal != NULL)

  00082	8b 75 94	 mov	 esi, DWORD PTR _$S6$186013[ebp+24]
  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0008b	83 c4 04	 add	 esp, 4
  0008e	85 c0		 test	 eax, eax
  00090	0f 84 c6 00 00
	00		 je	 $LN7@AdjustDbNp
  00096	8b c6		 mov	 eax, esi
  00098	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009e	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  000a4	0f b7 94 30 90
	00 00 00	 movzx	 edx, WORD PTR [eax+esi+144]
  000ac	3b 55 84	 cmp	 edx, DWORD PTR _$S6$186013[ebp+8]
  000af	0f 85 a7 00 00
	00		 jne	 $LN7@AdjustDbNp
  000b5	80 bc 30 50 20
	00 00 00	 cmp	 BYTE PTR [eax+esi+8272], 0
  000bd	0f 84 99 00 00
	00		 je	 $LN7@AdjustDbNp
  000c3	8b 8c 30 4c 20
	00 00		 mov	 ecx, DWORD PTR [eax+esi+8268]
  000ca	3b 4d ec	 cmp	 ecx, DWORD PTR _$S6$186013[ebp+112]
  000cd	0f 85 89 00 00
	00		 jne	 $LN7@AdjustDbNp
  000d3	85 c9		 test	 ecx, ecx
  000d5	0f 84 81 00 00
	00		 je	 $LN7@AdjustDbNp

; 2261 : 			{
; 2262 : 				switch(gObj[iNPC_INDEX].Class)

  000db	8b ca		 mov	 ecx, edx
  000dd	81 e9 15 01 00
	00		 sub	 ecx, 277		; 00000115H
  000e3	74 47		 je	 SHORT $LN6@AdjustDbNp
  000e5	83 e9 06	 sub	 ecx, 6
  000e8	75 72		 jne	 SHORT $LN7@AdjustDbNp

; 2280 : 					}
; 2281 : 					break;
; 2282 : 				case 283:
; 2283 : 					{
; 2284 : 						int iDF_LEVEL = pNpcData.m_iNPC_DF_LEVEL;

  000ea	8b 4d 98	 mov	 ecx, DWORD PTR _$S6$186013[ebp+28]

; 2285 : 
; 2286 : 						if(iDF_LEVEL < 0)

  000ed	85 c9		 test	 ecx, ecx
  000ef	79 04		 jns	 SHORT $LN2@AdjustDbNp

; 2287 : 						{
; 2288 : 							iDF_LEVEL = 0;

  000f1	33 c9		 xor	 ecx, ecx

; 2289 : 						}
; 2290 : 
; 2291 : 						if(iDF_LEVEL > CS_MAX_UPGRADE)

  000f3	eb 0a		 jmp	 SHORT $LN1@AdjustDbNp
$LN2@AdjustDbNp:
  000f5	83 f9 03	 cmp	 ecx, 3
  000f8	7e 05		 jle	 SHORT $LN1@AdjustDbNp

; 2292 : 						{
; 2293 : 							iDF_LEVEL = CS_MAX_UPGRADE;

  000fa	b9 03 00 00 00	 mov	 ecx, 3
$LN1@AdjustDbNp:

; 2294 : 						}
; 2295 : 
; 2296 : 						gObj[iNPC_INDEX].m_btCsNpcDfLevel = iDF_LEVEL;

  000ff	88 8c 30 58 20
	00 00		 mov	 BYTE PTR [eax+esi+8280], cl

; 2297 : 						gObj[iNPC_INDEX].m_Defense = g_iNpcDefense_CSTATUE[iDF_LEVEL];

  00106	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcDefense_CSTATUE@@3PAHA[ecx*4]
  0010d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00113	89 8c 10 74 06
	00 00		 mov	 DWORD PTR [eax+edx+1652], ecx

; 2298 : 						gObj[iNPC_INDEX].m_btCsNpcRgLevel = pNpcData.m_iNPC_RG_LEVEL;

  0011a	8a 4d 9c	 mov	 cl, BYTE PTR _$S6$186013[ebp+32]
  0011d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00123	88 8c 10 59 20
	00 00		 mov	 BYTE PTR [eax+edx+8281], cl

; 2299 : 					}
; 2300 : 					break;

  0012a	eb 30		 jmp	 SHORT $LN7@AdjustDbNp
$LN6@AdjustDbNp:

; 2263 : 				{
; 2264 : 				case 277:
; 2265 : 					{
; 2266 : 						int iDF_LEVEL = pNpcData.m_iNPC_DF_LEVEL;

  0012c	8b 4d 98	 mov	 ecx, DWORD PTR _$S6$186013[ebp+28]

; 2267 : 
; 2268 : 						if(iDF_LEVEL < 0)

  0012f	85 c9		 test	 ecx, ecx
  00131	79 04		 jns	 SHORT $LN5@AdjustDbNp

; 2269 : 						{
; 2270 : 							iDF_LEVEL = 0;

  00133	33 c9		 xor	 ecx, ecx

; 2271 : 						}
; 2272 : 
; 2273 : 						if(iDF_LEVEL > CS_MAX_UPGRADE)

  00135	eb 0a		 jmp	 SHORT $LN4@AdjustDbNp
$LN5@AdjustDbNp:
  00137	83 f9 03	 cmp	 ecx, 3
  0013a	7e 05		 jle	 SHORT $LN4@AdjustDbNp

; 2274 : 						{
; 2275 : 							iDF_LEVEL = CS_MAX_UPGRADE;

  0013c	b9 03 00 00 00	 mov	 ecx, 3
$LN4@AdjustDbNp:

; 2276 : 						}
; 2277 : 
; 2278 : 						gObj[iNPC_INDEX].m_btCsNpcDfLevel = iDF_LEVEL;

  00141	88 8c 30 58 20
	00 00		 mov	 BYTE PTR [eax+esi+8280], cl

; 2279 : 						gObj[iNPC_INDEX].m_Defense = g_iNpcDefense_CGATE[iDF_LEVEL];

  00148	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcDefense_CGATE@@3PAHA[ecx*4]
  0014f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00155	89 8c 10 74 06
	00 00		 mov	 DWORD PTR [eax+edx+1652], ecx
$LN7@AdjustDbNp:

; 2309 : 
; 2310 : 	LeaveCriticalSection(&m_critNpcData);

  0015c	8b 45 f0	 mov	 eax, DWORD PTR tv288[ebp]
  0015f	50		 push	 eax
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 2311 : }

  00166	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00169	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00170	59		 pop	 ecx
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S6$186013[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::AdjustDbNpcLevel
PUBLIC	?SetAllCastleGateState@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetAllCastleGateState
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?SetAllCastleGateState@CCastleSiege@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAllCastleGateState@CCastleSiege@@QAEXH@Z$0
__ehfuncinfo$?SetAllCastleGateState@CCastleSiege@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetAllCastleGateState@CCastleSiege@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?SetAllCastleGateState@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_$S7$186047 = -132					; size = 116
tv256 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bOpenType$ = 8						; size = 4
?SetAllCastleGateState@CCastleSiege@@QAEXH@Z PROC	; CCastleSiege::SetAllCastleGateState, COMDAT
; _this$ = ecx

; 2314 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetAllCastleGateState@CCastleSiege@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 78	 sub	 esp, 120		; 00000078H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 2315 : 	EnterCriticalSection(&m_critNpcData);

  0002a	8d b7 38 01 00
	00		 lea	 esi, DWORD PTR [edi+312]
  00030	56		 push	 esi
  00031	89 75 f0	 mov	 DWORD PTR tv256[ebp], esi
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 2316 : 
; 2317 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  0003a	8b 9f 28 01 00
	00		 mov	 ebx, DWORD PTR [edi+296]

; 2318 : 	int bExist = FALSE;
; 2319 : 
; 2320 : 	while(it != m_vtNpcData.end())

  00040	3b 9f 2c 01 00
	00		 cmp	 ebx, DWORD PTR [edi+300]
  00046	0f 84 e7 00 00
	00		 je	 $LN6@SetAllCast
  0004c	8d 64 24 00	 npad	 4
$LL7@SetAllCast:

; 2321 : 	{
; 2322 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00050	53		 push	 ebx
  00051	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S7$186047[ebp]
  00057	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 2323 : 
; 2324 : 		if(pNpcData.m_iNPC_NUM == 277
; 2325 : 			&& gObjIsConnected(pNpcData.m_iNPC_OBJINDEX)
; 2326 : 			&& gObj[pNpcData.m_iNPC_OBJINDEX].Class == 277)

  0005c	81 7d 84 15 01
	00 00		 cmp	 DWORD PTR _$S7$186047[ebp+8], 277 ; 00000115H
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	0f 85 aa 00 00
	00		 jne	 $LN3@SetAllCast
  00070	8b 75 94	 mov	 esi, DWORD PTR _$S7$186047[ebp+24]
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00079	83 c4 04	 add	 esp, 4
  0007c	85 c0		 test	 eax, eax
  0007e	0f 84 96 00 00
	00		 je	 $LN3@SetAllCast
  00084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008a	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  00090	b8 15 01 00 00	 mov	 eax, 277		; 00000115H
  00095	66 39 84 0e 90
	00 00 00	 cmp	 WORD PTR [esi+ecx+144], ax
  0009d	75 7b		 jne	 SHORT $LN3@SetAllCast

; 2327 : 		{
; 2328 : 			switch(bOpenType)

  0009f	8b 45 08	 mov	 eax, DWORD PTR _bOpenType$[ebp]
  000a2	83 e8 00	 sub	 eax, 0
  000a5	74 41		 je	 SHORT $LN2@SetAllCast
  000a7	48		 dec	 eax
  000a8	75 70		 jne	 SHORT $LN3@SetAllCast

; 2334 : 				break;
; 2335 : 			case 1:
; 2336 : 				SetGateBlockState(pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY,1);

  000aa	8b 55 ac	 mov	 edx, DWORD PTR _$S7$186047[ebp+48]
  000ad	8b 45 a8	 mov	 eax, DWORD PTR _$S7$186047[ebp+44]
  000b0	6a 01		 push	 1
  000b2	52		 push	 edx
  000b3	50		 push	 eax
  000b4	8b cf		 mov	 ecx, edi
  000b6	e8 00 00 00 00	 call	 ?SetGateBlockState@CCastleSiege@@QAEXHHH@Z ; CCastleSiege::SetGateBlockState

; 2337 : 				gObjAddBuffEffect(&gObj[pNpcData.m_iNPC_OBJINDEX],BUFF_GATESTATUS,0,0,0,0,-10);

  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c1	6a f6		 push	 -10			; fffffff6H
  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	6a 00		 push	 0
  000c9	6a 00		 push	 0
  000cb	8d 14 0e	 lea	 edx, DWORD PTR [esi+ecx]
  000ce	6a 0d		 push	 13			; 0000000dH
  000d0	52		 push	 edx
  000d1	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2338 : 				gObj[pNpcData.m_iNPC_OBJINDEX].m_btCsGateOpen = 1;

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000db	83 c4 1c	 add	 esp, 28			; 0000001cH
  000de	c6 84 06 51 20
	00 00 01	 mov	 BYTE PTR [esi+eax+8273], 1

; 2339 : 				break;

  000e6	eb 32		 jmp	 SHORT $LN3@SetAllCast
$LN2@SetAllCast:

; 2329 : 			{
; 2330 : 			case 0:
; 2331 : 				SetGateBlockState(pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY,0);

  000e8	8b 4d ac	 mov	 ecx, DWORD PTR _$S7$186047[ebp+48]
  000eb	8b 55 a8	 mov	 edx, DWORD PTR _$S7$186047[ebp+44]
  000ee	6a 00		 push	 0
  000f0	51		 push	 ecx
  000f1	52		 push	 edx
  000f2	8b cf		 mov	 ecx, edi
  000f4	e8 00 00 00 00	 call	 ?SetGateBlockState@CCastleSiege@@QAEXHHH@Z ; CCastleSiege::SetGateBlockState

; 2332 : 				gObjRemoveBuffEffect(&gObj[pNpcData.m_iNPC_OBJINDEX],BUFF_GATESTATUS);

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fe	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  00101	6a 0d		 push	 13			; 0000000dH
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect

; 2333 : 				gObj[pNpcData.m_iNPC_OBJINDEX].m_btCsGateOpen = 0;

  00109	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010f	83 c4 08	 add	 esp, 8
  00112	c6 84 16 51 20
	00 00 00	 mov	 BYTE PTR [esi+edx+8273], 0
$LN3@SetAllCast:

; 2340 : 			}
; 2341 : 		}
; 2342 : 
; 2343 : 		it++;

  0011a	83 c3 74	 add	 ebx, 116		; 00000074H

; 2344 : 	}

  0011d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00124	3b 9f 2c 01 00
	00		 cmp	 ebx, DWORD PTR [edi+300]
  0012a	0f 85 20 ff ff
	ff		 jne	 $LL7@SetAllCast

; 2318 : 	int bExist = FALSE;
; 2319 : 
; 2320 : 	while(it != m_vtNpcData.end())

  00130	8b 75 f0	 mov	 esi, DWORD PTR tv256[ebp]
$LN6@SetAllCast:

; 2345 : 
; 2346 : 	LeaveCriticalSection(&m_critNpcData);

  00133	56		 push	 esi
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 2347 : }

  0013a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00144	59		 pop	 ecx
  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetAllCastleGateState@CCastleSiege@@QAEXH@Z$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S7$186047[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?SetAllCastleGateState@CCastleSiege@@QAEXH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetAllCastleGateState@CCastleSiege@@QAEXH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetAllCastleGateState@CCastleSiege@@QAEXH@Z ENDP	; CCastleSiege::SetAllCastleGateState
PUBLIC	??_C@_0EB@MKPHLIIG@?$FLCastleSiege?$FN?5Castle?5Gate?5is?5Bro@ ; `string'
PUBLIC	??_C@_0ED@FPOFMBBM@?$FLCastleSiege?$FN?5Defend?5Statue?5is?5B@ ; `string'
PUBLIC	?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ		; CCastleSiege::CheckCsDbNpcAlive
;	COMDAT ??_C@_0EB@MKPHLIIG@?$FLCastleSiege?$FN?5Castle?5Gate?5is?5Bro@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
CONST	SEGMENT
??_C@_0EB@MKPHLIIG@?$FLCastleSiege?$FN?5Castle?5Gate?5is?5Bro@ DB '[Castl'
	DB	'eSiege] Castle Gate is Broken (CLS:%d, IDX:%d, X:%d, Y:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@FPOFMBBM@?$FLCastleSiege?$FN?5Defend?5Statue?5is?5B@
CONST	SEGMENT
??_C@_0ED@FPOFMBBM@?$FLCastleSiege?$FN?5Defend?5Statue?5is?5B@ DB '[Castl'
	DB	'eSiege] Defend Statue is Broken (CLS:%d, IDX:%d, X:%d, Y:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ$0
__ehfuncinfo$?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_$S9$186653 = -140					; size = 116
tv356 = -24						; size = 4
_it$186644 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::CheckCsDbNpcAlive, COMDAT
; _this$ = ecx

; 3088 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 3089 : 	if(m_iCastleSiegeState != CASTLESIEGE_STATE_STARTSIEGE)

  00030	83 7e 28 07	 cmp	 DWORD PTR [esi+40], 7
  00034	0f 85 a0 01 00
	00		 jne	 $LN16@CheckCsDbN

; 3090 : 		return;
; 3091 : 	EnterCriticalSection(&m_critNpcData);

  0003a	8d 9e 38 01 00
	00		 lea	 ebx, DWORD PTR [esi+312]
  00040	53		 push	 ebx
  00041	89 5d e8	 mov	 DWORD PTR tv356[ebp], ebx
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 3092 : 	
; 3093 : 	if(!m_vtNpcData.empty())

  0004a	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  00050	3b 86 2c 01 00
	00		 cmp	 eax, DWORD PTR [esi+300]
  00056	0f 84 77 01 00
	00		 je	 $LN11@CheckCsDbN

; 3094 : 	{
; 3095 : 		vector<_CS_NPC_DATA>::iterator it;
; 3096 : 		for(it = m_vtNpcData.begin(); it != m_vtNpcData.end();it++)

  0005c	8b f8		 mov	 edi, eax
  0005e	89 7d ec	 mov	 DWORD PTR _it$186644[ebp], edi
  00061	3b be 2c 01 00
	00		 cmp	 edi, DWORD PTR [esi+300]
  00067	0f 84 66 01 00
	00		 je	 $LN11@CheckCsDbN
  0006d	8d 49 00	 npad	 3
$LL37@CheckCsDbN:

; 3097 : 		{
; 3098 : 			_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00070	57		 push	 edi
  00071	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S9$186653[ebp]
  00077	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 3099 : 
; 3100 : 			if((pNpcData.m_iNPC_NUM == 277 || pNpcData.m_iNPC_NUM == 283)
; 3101 : 				&& pNpcData.m_iNPC_OBJINDEX != -1)

  0007c	8b 9d 7c ff ff
	ff		 mov	 ebx, DWORD PTR _$S9$186653[ebp+8]
  00082	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00089	81 fb 15 01 00
	00		 cmp	 ebx, 277		; 00000115H
  0008f	74 0c		 je	 SHORT $LN9@CheckCsDbN
  00091	81 fb 1b 01 00
	00		 cmp	 ebx, 283		; 0000011bH
  00097	0f 85 1a 01 00
	00		 jne	 $LN8@CheckCsDbN
$LN9@CheckCsDbN:
  0009d	8b 75 8c	 mov	 esi, DWORD PTR _$S9$186653[ebp+24]
  000a0	83 fe ff	 cmp	 esi, -1
  000a3	0f 84 0b 01 00
	00		 je	 $LN76@CheckCsDbN

; 3102 : 			{
; 3103 : 				if(gObjIsConnected(pNpcData.m_iNPC_OBJINDEX) == FALSE
; 3104 : 					|| gObj[pNpcData.m_iNPC_OBJINDEX].m_iCsNpcExistVal != pNpcData.m_iCsNpcExistVal
; 3105 : 					|| gObj[pNpcData.m_iNPC_OBJINDEX].m_iCsNpcExistVal == 0
; 3106 : 					|| (gObj[pNpcData.m_iNPC_OBJINDEX].Class != 277 && gObj[pNpcData.m_iNPC_OBJINDEX].Class != 283)
; 3107 : 					|| gObj[pNpcData.m_iNPC_OBJINDEX].Live == FALSE)

  000a9	56		 push	 esi
  000aa	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000af	83 c4 04	 add	 esp, 4
  000b2	85 c0		 test	 eax, eax
  000b4	74 42		 je	 SHORT $LN7@CheckCsDbN
  000b6	8b c6		 mov	 eax, esi
  000b8	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  000be	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c4	8b 88 4c 20 00
	00		 mov	 ecx, DWORD PTR [eax+8268]
  000ca	3b 4d e4	 cmp	 ecx, DWORD PTR _$S9$186653[ebp+112]
  000cd	75 29		 jne	 SHORT $LN7@CheckCsDbN
  000cf	85 c9		 test	 ecx, ecx
  000d1	74 25		 je	 SHORT $LN7@CheckCsDbN
  000d3	0f b7 88 90 00
	00 00		 movzx	 ecx, WORD PTR [eax+144]
  000da	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  000df	66 3b ca	 cmp	 cx, dx
  000e2	74 0a		 je	 SHORT $LN6@CheckCsDbN
  000e4	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH
  000e9	66 3b ca	 cmp	 cx, dx
  000ec	75 0a		 jne	 SHORT $LN7@CheckCsDbN
$LN6@CheckCsDbN:
  000ee	80 78 51 00	 cmp	 BYTE PTR [eax+81], 0
  000f2	0f 85 bc 00 00
	00		 jne	 $LN76@CheckCsDbN
$LN7@CheckCsDbN:

; 3108 : 				{
; 3109 : 					pNpcData.m_iNPC_HP = pNpcData.m_iNPC_BASE_HP;

  000f8	8b 45 c0	 mov	 eax, DWORD PTR _$S9$186653[ebp+76]

; 3110 : 					pNpcData.m_iNPC_MAXHP = pNpcData.m_iNPC_BASE_MAXHP;

  000fb	8b 4d bc	 mov	 ecx, DWORD PTR _$S9$186653[ebp+72]

; 3111 : 					pNpcData.m_iNPC_RG_LEVEL = pNpcData.m_iNPC_BASE_RG_LEVEL;

  000fe	8b 55 b8	 mov	 edx, DWORD PTR _$S9$186653[ebp+68]
  00101	89 45 9c	 mov	 DWORD PTR _$S9$186653[ebp+40], eax

; 3112 : 					pNpcData.m_iNPC_DF_LEVEL = pNpcData.m_iNPC_BASE_DF_LEVEL;

  00104	8b 45 b4	 mov	 eax, DWORD PTR _$S9$186653[ebp+64]
  00107	89 45 90	 mov	 DWORD PTR _$S9$186653[ebp+28], eax

; 3113 : 
; 3114 : 					switch(pNpcData.m_iNPC_NUM)

  0010a	8b c3		 mov	 eax, ebx
  0010c	2d 15 01 00 00	 sub	 eax, 277		; 00000115H
  00111	89 4d 98	 mov	 DWORD PTR _$S9$186653[ebp+36], ecx
  00114	89 55 94	 mov	 DWORD PTR _$S9$186653[ebp+32], edx
  00117	74 48		 je	 SHORT $LN3@CheckCsDbN
  00119	83 e8 06	 sub	 eax, 6
  0011c	0f 85 8b 00 00
	00		 jne	 $LN66@CheckCsDbN

; 3121 : 						break;
; 3122 : 					case 283:
; 3123 : 						if(CheckGuardianStatueExist() == FALSE)

  00122	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  00125	8b ce		 mov	 ecx, esi
  00127	e8 00 00 00 00	 call	 ?CheckGuardianStatueExist@CCastleSiege@@QAEHXZ ; CCastleSiege::CheckGuardianStatueExist
  0012c	85 c0		 test	 eax, eax
  0012e	75 10		 jne	 SHORT $LN1@CheckCsDbN

; 3124 : 						{
; 3125 : 							ClearCastleTowerBarrier();

  00130	8b ce		 mov	 ecx, esi
  00132	e8 00 00 00 00	 call	 ?ClearCastleTowerBarrier@CCastleSiege@@QAEXXZ ; CCastleSiege::ClearCastleTowerBarrier

; 3126 : 							SetCastleTowerAccessable(TRUE);

  00137	6a 01		 push	 1
  00139	8b ce		 mov	 ecx, esi
  0013b	e8 00 00 00 00	 call	 ?SetCastleTowerAccessable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetCastleTowerAccessable
$LN1@CheckCsDbN:

; 3127 : 						}
; 3128 : 
; 3129 : 						LogAddTD("[CastleSiege] Defend Statue is Broken (CLS:%d, IDX:%d, X:%d, Y:%d)",
; 3130 : 							pNpcData.m_iNPC_NUM,pNpcData.m_iNPC_INDEX,pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY);

  00140	8b 4d a4	 mov	 ecx, DWORD PTR _$S9$186653[ebp+48]
  00143	8b 55 a0	 mov	 edx, DWORD PTR _$S9$186653[ebp+44]
  00146	8b 45 80	 mov	 eax, DWORD PTR _$S9$186653[ebp+12]
  00149	51		 push	 ecx
  0014a	52		 push	 edx
  0014b	50		 push	 eax
  0014c	68 1b 01 00 00	 push	 283			; 0000011bH
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FPOFMBBM@?$FLCastleSiege?$FN?5Defend?5Statue?5is?5B@
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0015c	83 c4 14	 add	 esp, 20			; 00000014H

; 3131 : 						break;

  0015f	eb 4c		 jmp	 SHORT $LN66@CheckCsDbN
$LN3@CheckCsDbN:

; 3115 : 					{
; 3116 : 					case 277:
; 3117 : 						SetGateBlockState(pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY,1);

  00161	8b 7d a4	 mov	 edi, DWORD PTR _$S9$186653[ebp+48]
  00164	8b 5d a0	 mov	 ebx, DWORD PTR _$S9$186653[ebp+44]
  00167	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	6a 01		 push	 1
  0016c	57		 push	 edi
  0016d	53		 push	 ebx
  0016e	e8 00 00 00 00	 call	 ?SetGateBlockState@CCastleSiege@@QAEXHHH@Z ; CCastleSiege::SetGateBlockState

; 3118 : 						gObjAddBuffEffect(&gObj[pNpcData.m_iNPC_OBJINDEX],BUFF_GATESTATUS,0,0,0,0,-10);

  00173	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  00179	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017f	6a f6		 push	 -10			; fffffff6H
  00181	6a 00		 push	 0
  00183	6a 00		 push	 0
  00185	6a 00		 push	 0
  00187	6a 00		 push	 0
  00189	6a 0d		 push	 13			; 0000000dH
  0018b	56		 push	 esi
  0018c	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 3119 : 						LogAddTD("[CastleSiege] Castle Gate is Broken (CLS:%d, IDX:%d, X:%d, Y:%d)",
; 3120 : 							pNpcData.m_iNPC_NUM,pNpcData.m_iNPC_INDEX,pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY);

  00191	8b 4d 80	 mov	 ecx, DWORD PTR _$S9$186653[ebp+12]
  00194	57		 push	 edi
  00195	53		 push	 ebx
  00196	51		 push	 ecx
  00197	68 15 01 00 00	 push	 277			; 00000115H
  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@MKPHLIIG@?$FLCastleSiege?$FN?5Castle?5Gate?5is?5Bro@
  001a1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001a7	8b 7d ec	 mov	 edi, DWORD PTR _it$186644[ebp]
  001aa	83 c4 30	 add	 esp, 48			; 00000030H

; 3132 : 					}
; 3133 : 
; 3134 : 					it->m_iNPC_OBJINDEX = -1;

$LN66@CheckCsDbN:
  001ad	c7 47 18 ff ff
	ff ff		 mov	 DWORD PTR [edi+24], -1
$LN76@CheckCsDbN:
  001b4	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
$LN8@CheckCsDbN:

; 3094 : 	{
; 3095 : 		vector<_CS_NPC_DATA>::iterator it;
; 3096 : 		for(it = m_vtNpcData.begin(); it != m_vtNpcData.end();it++)

  001b7	83 c7 74	 add	 edi, 116		; 00000074H

; 3135 : 				}
; 3136 : 			}
; 3137 : 		}

  001ba	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c1	89 7d ec	 mov	 DWORD PTR _it$186644[ebp], edi
  001c4	3b be 2c 01 00
	00		 cmp	 edi, DWORD PTR [esi+300]
  001ca	0f 85 a0 fe ff
	ff		 jne	 $LL37@CheckCsDbN

; 3094 : 	{
; 3095 : 		vector<_CS_NPC_DATA>::iterator it;
; 3096 : 		for(it = m_vtNpcData.begin(); it != m_vtNpcData.end();it++)

  001d0	8b 5d e8	 mov	 ebx, DWORD PTR tv356[ebp]
$LN11@CheckCsDbN:

; 3138 : 	}
; 3139 : 
; 3140 : 	LeaveCriticalSection(&m_critNpcData);

  001d3	53		 push	 ebx
  001d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN16@CheckCsDbN:

; 3141 : }

  001da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e4	59		 pop	 ecx
  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ$0:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S9$186653[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::CheckCsDbNpcAlive
PUBLIC	??_C@_0EG@FCEACCAF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Calc@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CalcCastleLeftSiegeDate@CCastleSiege@@QAEHXZ	; CCastleSiege::CalcCastleLeftSiegeDate
;	COMDAT ??_C@_0EG@FCEACCAF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Calc@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0EG@FCEACCAF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Calc@ DB '[Castle'
	DB	'Siege] CCastleSiege::CalcCastleLeftSiegeDate() - iGAP_SEC == '
	DB	'0', 00H					; `string'
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
CONST	ENDS
;	COMDAT ?CalcCastleLeftSiegeDate@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
_bAddStart$ = -24					; size = 4
_tmNowDate$187655 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
?CalcCastleLeftSiegeDate@CCastleSiege@@QAEHXZ PROC	; CCastleSiege::CalcCastleLeftSiegeDate, COMDAT
; _this$ = ecx

; 3546 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3547 : 	memset(&m_tmLeftCastleSiegeDate,0x00,sizeof(m_tmLeftCastleSiegeDate));

  00010	33 c0		 xor	 eax, eax
  00012	56		 push	 esi
  00013	8b f1		 mov	 esi, ecx
  00015	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  0001b	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  00021	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  00027	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 3548 : 
; 3549 : 	if(m_iCastleSiegeState < CASTLESIEGE_STATE_IDLE_1 || m_iCastleSiegeState > CASTLESIEGE_STATE_ENDCYCLE)

  0002d	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00030	85 c0		 test	 eax, eax
  00032	78 0b		 js	 SHORT $LN14@CalcCastle
  00034	83 f8 09	 cmp	 eax, 9
  00037	7f 06		 jg	 SHORT $LN14@CalcCastle

; 3550 : 	{
; 3551 : 		return -3;
; 3552 : 	}
; 3553 : 
; 3554 : 	if(m_bDoRun == FALSE)

  00039	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0003d	75 14		 jne	 SHORT $LN13@CalcCastle
$LN14@CalcCastle:

; 3555 : 	{
; 3556 : 		return -3;

  0003f	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  00044	5e		 pop	 esi

; 3616 : }

  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	33 cd		 xor	 ecx, ebp
  0004a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN13@CalcCastle:

; 3557 : 	}
; 3558 : 
; 3559 : 	if(m_iCastleSiegeState == CASTLESIEGE_STATE_STARTSIEGE)

  00053	83 f8 07	 cmp	 eax, 7
  00056	75 12		 jne	 SHORT $LN12@CalcCastle

; 3560 : 	{
; 3561 : 		return -1;

  00058	83 c8 ff	 or	 eax, -1
  0005b	5e		 pop	 esi

; 3616 : }

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005f	33 cd		 xor	 ecx, ebp
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN12@CalcCastle:

; 3562 : 	}
; 3563 : 
; 3564 : 	if(m_btIsSiegeEnded == TRUE || m_iCastleSiegeState >= CASTLESIEGE_STATE_ENDSIEGE)

  0006a	80 be d5 00 00
	00 01		 cmp	 BYTE PTR [esi+213], 1
  00071	0f 84 f8 00 00
	00		 je	 $LN10@CalcCastle
  00077	83 f8 08	 cmp	 eax, 8
  0007a	0f 8d ef 00 00
	00		 jge	 $LN10@CalcCastle

; 3565 : 	{
; 3566 : 		return -2;
; 3567 : 	}
; 3568 : 
; 3569 : 	int iGAP_SEC = -1;
; 3570 : 	int bAddStart = FALSE;
; 3571 : 
; 3572 : 	EnterCriticalSection(&m_critScheduleData);

  00080	53		 push	 ebx
  00081	57		 push	 edi
  00082	8d 86 10 01 00
	00		 lea	 eax, DWORD PTR [esi+272]
  00088	50		 push	 eax
  00089	83 cf ff	 or	 edi, -1
  0008c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bAddStart$[ebp], 0
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 3573 : 
; 3574 : 	vector<_CS_SCHEDULE_DATA>::iterator it;
; 3575 : 	for(it = m_vtScheduleData.begin();it != m_vtScheduleData.end(); it++)

  00099	8b 9e 00 01 00
	00		 mov	 ebx, DWORD PTR [esi+256]
  0009f	3b 9e 04 01 00
	00		 cmp	 ebx, DWORD PTR [esi+260]
  000a5	74 3a		 je	 SHORT $LN58@CalcCastle
$LL34@CalcCastle:

; 3576 : 	{
; 3577 : 		_CS_SCHEDULE_DATA & pScheduleData = *it;
; 3578 : 
; 3579 : 		if(pScheduleData.m_iSTATE == 7)

  000a7	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000aa	83 f8 07	 cmp	 eax, 7
  000ad	74 32		 je	 SHORT $LN58@CalcCastle

; 3580 : 		{
; 3581 : 			break;
; 3582 : 		}
; 3583 : 		else
; 3584 : 		{
; 3585 : 			if(bAddStart != FALSE)

  000af	83 7d e8 00	 cmp	 DWORD PTR _bAddStart$[ebp], 0
  000b3	74 03		 je	 SHORT $LN4@CalcCastle

; 3586 : 			{
; 3587 : 				iGAP_SEC += pScheduleData.m_iGAP_SEC;

  000b5	03 7b 18	 add	 edi, DWORD PTR [ebx+24]
$LN4@CalcCastle:

; 3588 : 			}
; 3589 : 
; 3590 : 			if(pScheduleData.m_iSTATE == m_iCastleSiegeState)

  000b8	3b 46 28	 cmp	 eax, DWORD PTR [esi+40]
  000bb	75 19		 jne	 SHORT $LN8@CalcCastle

; 3591 : 			{
; 3592 : 				iGAP_SEC = m_iCS_REMAIN_MSEC / 1000;

  000bd	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  000c2	f7 6e 68	 imul	 DWORD PTR [esi+104]
  000c5	c1 fa 06	 sar	 edx, 6
  000c8	8b fa		 mov	 edi, edx
  000ca	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  000cd	03 fa		 add	 edi, edx

; 3593 : 				bAddStart = TRUE;

  000cf	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _bAddStart$[ebp], 1
$LN8@CalcCastle:

; 3573 : 
; 3574 : 	vector<_CS_SCHEDULE_DATA>::iterator it;
; 3575 : 	for(it = m_vtScheduleData.begin();it != m_vtScheduleData.end(); it++)

  000d6	83 c3 1c	 add	 ebx, 28			; 0000001cH
  000d9	3b 9e 04 01 00
	00		 cmp	 ebx, DWORD PTR [esi+260]
  000df	75 c6		 jne	 SHORT $LL34@CalcCastle
$LN58@CalcCastle:

; 3594 : 			}
; 3595 : 		}
; 3596 : 	}
; 3597 : 	LeaveCriticalSection(&m_critScheduleData);

  000e1	8d 86 10 01 00
	00		 lea	 eax, DWORD PTR [esi+272]
  000e7	50		 push	 eax
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 3598 : 
; 3599 : 	if(iGAP_SEC >= 0)

  000ee	85 ff		 test	 edi, edi
  000f0	78 67		 js	 SHORT $LN2@CalcCastle

; 3600 : 	{
; 3601 : 		_SYSTEMTIME tmNowDate;
; 3602 : 		GetLocalTime(&tmNowDate);

  000f2	8d 45 ec	 lea	 eax, DWORD PTR _tmNowDate$187655[ebp]
  000f5	50		 push	 eax
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 3603 : 
; 3604 : 		GetNextDay(&tmNowDate,0,0,0,iGAP_SEC);

  000fc	57		 push	 edi
  000fd	6a 00		 push	 0
  000ff	6a 00		 push	 0
  00101	6a 00		 push	 0
  00103	8d 4d ec	 lea	 ecx, DWORD PTR _tmNowDate$187655[ebp]
  00106	51		 push	 ecx
  00107	8b ce		 mov	 ecx, esi
  00109	e8 00 00 00 00	 call	 ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay

; 3605 : 
; 3606 : 		m_tmLeftCastleSiegeDate = tmNowDate;

  0010e	8b 55 ec	 mov	 edx, DWORD PTR _tmNowDate$187655[ebp]
  00111	8b 45 f0	 mov	 eax, DWORD PTR _tmNowDate$187655[ebp+4]
  00114	8b 4d f4	 mov	 ecx, DWORD PTR _tmNowDate$187655[ebp+8]
  00117	89 96 80 00 00
	00		 mov	 DWORD PTR [esi+128], edx
  0011d	8b 55 f8	 mov	 edx, DWORD PTR _tmNowDate$187655[ebp+12]
  00120	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  00126	89 8e 88 00 00
	00		 mov	 DWORD PTR [esi+136], ecx
  0012c	89 96 8c 00 00
	00		 mov	 DWORD PTR [esi+140], edx

; 3607 : 
; 3608 : 		if(iGAP_SEC == 0)

  00132	85 ff		 test	 edi, edi
  00134	75 10		 jne	 SHORT $LN1@CalcCastle

; 3609 : 		{
; 3610 : 			LogAddC(2,"[CastleSiege] CCastleSiege::CalcCastleLeftSiegeDate() - iGAP_SEC == 0");

  00136	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@FCEACCAF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Calc@
  0013b	6a 02		 push	 2
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00143	83 c4 08	 add	 esp, 8
$LN1@CalcCastle:

; 3611 : 		}
; 3612 : 
; 3613 : 		return iGAP_SEC;

  00146	8b c7		 mov	 eax, edi
  00148	5f		 pop	 edi
  00149	5b		 pop	 ebx
  0014a	5e		 pop	 esi

; 3616 : }

  0014b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014e	33 cd		 xor	 ecx, ebp
  00150	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c3		 ret	 0
$LN2@CalcCastle:
  00159	5f		 pop	 edi
  0015a	5b		 pop	 ebx

; 3614 : 	}
; 3615 : return -3;

  0015b	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  00160	5e		 pop	 esi

; 3616 : }

  00161	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00164	33 cd		 xor	 ecx, ebp
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
$LN10@CalcCastle:
  0016f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00172	33 cd		 xor	 ecx, ebp
  00174	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00179	5e		 pop	 esi
  0017a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
?CalcCastleLeftSiegeDate@CCastleSiege@@QAEHXZ ENDP	; CCastleSiege::CalcCastleLeftSiegeDate
_TEXT	ENDS
PUBLIC	?CreateNonDbNPC@CCastleSiege@@QAEXH@Z		; CCastleSiege::CreateNonDbNPC
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?CreateNonDbNPC@CCastleSiege@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateNonDbNPC@CCastleSiege@@QAEXH@Z$0
__ehfuncinfo$?CreateNonDbNPC@CCastleSiege@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateNonDbNPC@CCastleSiege@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?CreateNonDbNPC@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_$S11$187697 = -132					; size = 116
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv481 = 8						; size = 4
_bDelFirst$ = 8						; size = 4
?CreateNonDbNPC@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::CreateNonDbNPC, COMDAT
; _this$ = ecx

; 3664 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateNonDbNPC@CCastleSiege@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 78	 sub	 esp, 120		; 00000078H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 3665 : 	if(bDelFirst != FALSE)

  0002d	83 7d 08 00	 cmp	 DWORD PTR _bDelFirst$[ebp], 0
  00031	74 05		 je	 SHORT $LN10@CreateNonD

; 3666 : 		ClearNonDbNPC();

  00033	e8 00 00 00 00	 call	 ?ClearNonDbNPC@CCastleSiege@@QAEXXZ ; CCastleSiege::ClearNonDbNPC
$LN10@CreateNonD:

; 3667 : 
; 3668 : 	EnterCriticalSection(&m_critNpcData);

  00038	8d 9e 38 01 00
	00		 lea	 ebx, DWORD PTR [esi+312]
  0003e	53		 push	 ebx
  0003f	89 5d 08	 mov	 DWORD PTR tv481[ebp], ebx
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 3669 : 
; 3670 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  00048	8b be 28 01 00
	00		 mov	 edi, DWORD PTR [esi+296]

; 3671 : 
; 3672 : 	while( it != m_vtNpcData.end())

  0004e	3b be 2c 01 00
	00		 cmp	 edi, DWORD PTR [esi+300]
  00054	0f 84 40 02 00
	00		 je	 $LN8@CreateNonD
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL9@CreateNonD:

; 3673 : 	{
; 3674 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00060	57		 push	 edi
  00061	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S11$187697[ebp]
  00067	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 3675 : 
; 3676 : 		if(pNpcData.m_bIN_USE == TRUE && pNpcData.m_bNPC_DBSAVE == FALSE)

  0006c	83 7d 80 01	 cmp	 DWORD PTR _$S11$187697[ebp+4], 1
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00077	0f 85 04 02 00
	00		 jne	 $LN6@CreateNonD
  0007d	83 7d 8c 00	 cmp	 DWORD PTR _$S11$187697[ebp+16], 0
  00081	0f 85 fa 01 00
	00		 jne	 $LN6@CreateNonD

; 3677 : 		{
; 3678 : 			int iNPC_INDEX = gObjAddMonster(MAP_INDEX_CASTLESIEGE);

  00087	6a 1e		 push	 30			; 0000001eH
  00089	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  0008e	0f bf d8	 movsx	 ebx, ax
  00091	83 c4 04	 add	 esp, 4

; 3679 : 
; 3680 : 			if(iNPC_INDEX >= 0)

  00094	85 db		 test	 ebx, ebx
  00096	0f 88 e5 01 00
	00		 js	 $LN6@CreateNonD

; 3681 : 			{
; 3682 : 				gObjSetMonster(iNPC_INDEX,pNpcData.m_iNPC_NUM);

  0009c	8b 45 84	 mov	 eax, DWORD PTR _$S11$187697[ebp+8]
  0009f	50		 push	 eax
  000a0	53		 push	 ebx
  000a1	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 3683 : 
; 3684 : 				gObj[iNPC_INDEX].m_PosNum = -1;
; 3685 : 				gObj[iNPC_INDEX].X = pNpcData.m_iNPC_SX;
; 3686 : 				gObj[iNPC_INDEX].Y = pNpcData.m_iNPC_SY;
; 3687 : 				gObj[iNPC_INDEX].MapNumber = MAP_INDEX_CASTLESIEGE;
; 3688 : 				gObj[iNPC_INDEX].TX = gObj[iNPC_INDEX].X;
; 3689 : 				gObj[iNPC_INDEX].TY = gObj[iNPC_INDEX].Y;
; 3690 : 				gObj[iNPC_INDEX].m_OldX = gObj[iNPC_INDEX].X;
; 3691 : 				gObj[iNPC_INDEX].m_OldY = gObj[iNPC_INDEX].Y;
; 3692 : 				gObj[iNPC_INDEX].Dir = pNpcData.m_iNPC_DIR;
; 3693 : 				gObj[iNPC_INDEX].StartX = gObj[iNPC_INDEX].X;
; 3694 : 				gObj[iNPC_INDEX].StartY = gObj[iNPC_INDEX].Y;
; 3695 : 				gObj[iNPC_INDEX].DieRegen = FALSE;
; 3696 : 				gObj[iNPC_INDEX].MaxRegenTime = NULL;
; 3697 : 				gObj[iNPC_INDEX].Life = (float)pNpcData.m_iNPC_HP;

  000a6	db 45 a4	 fild	 DWORD PTR _$S11$187697[ebp+40]
  000a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000af	8b f3		 mov	 esi, ebx
  000b1	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  000b7	83 c9 ff	 or	 ecx, -1
  000ba	66 89 8c 16 98
	05 00 00	 mov	 WORD PTR [esi+edx+1432], cx
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c7	0f b6 4d a8	 movzx	 ecx, BYTE PTR _$S11$187697[ebp+44]
  000cb	88 8c 06 20 01
	00 00		 mov	 BYTE PTR [esi+eax+288], cl
  000d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d8	0f b6 45 ac	 movzx	 eax, BYTE PTR _$S11$187697[ebp+48]
  000dc	88 84 16 21 01
	00 00		 mov	 BYTE PTR [esi+edx+289], al
  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e9	c6 84 0e 23 01
	00 00 1e	 mov	 BYTE PTR [esi+ecx+291], 30 ; 0000001eH
  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f6	0f b6 94 06 20
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+288]
  000fe	88 94 06 52 01
	00 00		 mov	 BYTE PTR [esi+eax+338], dl
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010a	0f b6 8c 06 21
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+289]
  00112	88 8c 06 53 01
	00 00		 mov	 BYTE PTR [esi+eax+339], cl
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0011e	0f b6 94 06 20
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+288]
  00126	88 94 06 50 01
	00 00		 mov	 BYTE PTR [esi+eax+336], dl
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00132	0f b6 8c 06 21
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+289]
  0013a	88 8c 06 51 01
	00 00		 mov	 BYTE PTR [esi+eax+337], cl
  00141	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00147	0f b6 45 b8	 movzx	 eax, BYTE PTR _$S11$187697[ebp+60]
  0014b	88 84 16 22 01
	00 00		 mov	 BYTE PTR [esi+edx+290], al
  00152	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00157	0f b6 8c 06 20
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+288]
  0015f	88 8c 06 4e 01
	00 00		 mov	 BYTE PTR [esi+eax+334], cl
  00166	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016b	0f b6 94 06 21
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+289]
  00173	88 94 06 4f 01
	00 00		 mov	 BYTE PTR [esi+eax+335], dl
  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017f	c6 84 06 8a 05
	00 00 00	 mov	 BYTE PTR [esi+eax+1418], 0
  00187	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018d	c7 84 0e 94 05
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+ecx+1428], 0
  00198	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019e	83 c4 08	 add	 esp, 8
  001a1	d9 9c 16 d8 00
	00 00		 fstp	 DWORD PTR [esi+edx+216]

; 3698 : 				gObj[iNPC_INDEX].MaxLife = (float)pNpcData.m_iNPC_MAXHP;

  001a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ad	db 45 a0	 fild	 DWORD PTR _$S11$187697[ebp+36]
  001b0	d9 9c 06 dc 00
	00 00		 fstp	 DWORD PTR [esi+eax+220]

; 3699 : 
; 3700 : 				switch(pNpcData.m_iNPC_SIDE)

  001b7	8b 45 90	 mov	 eax, DWORD PTR _$S11$187697[ebp+20]
  001ba	48		 dec	 eax
  001bb	74 23		 je	 SHORT $LN3@CreateNonD
  001bd	48		 dec	 eax
  001be	74 10		 je	 SHORT $LN2@CreateNonD

; 3708 : 				default:
; 3709 : 					gObj[iNPC_INDEX].m_btCsNpcType = 3;

  001c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c6	c6 84 0e 50 20
	00 00 03	 mov	 BYTE PTR [esi+ecx+8272], 3

; 3710 : 					break;

  001ce	eb 1d		 jmp	 SHORT $LN49@CreateNonD
$LN2@CreateNonD:

; 3704 : 					break;
; 3705 : 				case 2:
; 3706 : 					gObj[iNPC_INDEX].m_btCsNpcType = 3;

  001d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d6	c6 84 16 50 20
	00 00 03	 mov	 BYTE PTR [esi+edx+8272], 3

; 3707 : 					break;

  001de	eb 0d		 jmp	 SHORT $LN49@CreateNonD
$LN3@CreateNonD:

; 3701 : 				{
; 3702 : 				case 1:
; 3703 : 					gObj[iNPC_INDEX].m_btCsNpcType = 2;

  001e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e5	c6 84 06 50 20
	00 00 02	 mov	 BYTE PTR [esi+eax+8272], 2

; 3711 : 				}
; 3712 : 
; 3713 : 				it->m_btCsNpcExistVal1 = rand()%255+1;

$LN49@CreateNonD:
  001ed	e8 00 00 00 00	 call	 _rand
  001f2	99		 cdq
  001f3	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  001f8	f7 f9		 idiv	 ecx
  001fa	fe c2		 inc	 dl
  001fc	88 57 70	 mov	 BYTE PTR [edi+112], dl

; 3714 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal1 = it->m_btCsNpcExistVal1;

  001ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00204	88 94 06 4c 20
	00 00		 mov	 BYTE PTR [esi+eax+8268], dl

; 3715 : 
; 3716 : 				it->m_btCsNpcExistVal2 = rand()%256;

  0020b	e8 00 00 00 00	 call	 _rand
  00210	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00215	79 07		 jns	 SHORT $LN145@CreateNonD
  00217	48		 dec	 eax
  00218	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0021d	40		 inc	 eax
$LN145@CreateNonD:
  0021e	88 47 71	 mov	 BYTE PTR [edi+113], al

; 3717 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal2 = it->m_btCsNpcExistVal2;

  00221	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00227	88 84 0e 4d 20
	00 00		 mov	 BYTE PTR [esi+ecx+8269], al

; 3718 : 
; 3719 : 				it->m_btCsNpcExistVal3 = rand()%256;

  0022e	e8 00 00 00 00	 call	 _rand
  00233	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00238	79 07		 jns	 SHORT $LN146@CreateNonD
  0023a	48		 dec	 eax
  0023b	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  00240	40		 inc	 eax
$LN146@CreateNonD:
  00241	88 47 72	 mov	 BYTE PTR [edi+114], al

; 3720 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal3 = it->m_btCsNpcExistVal3;

  00244	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0024a	88 84 16 4e 20
	00 00		 mov	 BYTE PTR [esi+edx+8270], al

; 3721 : 
; 3722 : 				it->m_btCsNpcExistVal4 = rand()%256;

  00251	e8 00 00 00 00	 call	 _rand
  00256	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  0025b	79 07		 jns	 SHORT $LN147@CreateNonD
  0025d	48		 dec	 eax
  0025e	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  00263	40		 inc	 eax
$LN147@CreateNonD:
  00264	88 47 73	 mov	 BYTE PTR [edi+115], al

; 3723 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal4 = it->m_btCsNpcExistVal4;

  00267	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0026d	88 84 0e 4f 20
	00 00		 mov	 BYTE PTR [esi+ecx+8271], al

; 3724 : 
; 3725 : 				it->m_iNPC_OBJINDEX = iNPC_INDEX;
; 3726 : 				it->m_iNPC_LIVE = 2;

  00274	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  00277	89 5f 18	 mov	 DWORD PTR [edi+24], ebx
  0027a	c7 47 68 02 00
	00 00		 mov	 DWORD PTR [edi+104], 2
$LN6@CreateNonD:

; 3727 : 			}
; 3728 : 		}
; 3729 : 
; 3730 : 		it++;

  00281	83 c7 74	 add	 edi, 116		; 00000074H

; 3731 : 	}

  00284	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0028b	3b be 2c 01 00
	00		 cmp	 edi, DWORD PTR [esi+300]
  00291	0f 85 c9 fd ff
	ff		 jne	 $LL9@CreateNonD

; 3671 : 
; 3672 : 	while( it != m_vtNpcData.end())

  00297	8b 5d 08	 mov	 ebx, DWORD PTR tv481[ebp]
$LN8@CreateNonD:

; 3732 : 
; 3733 : 	LeaveCriticalSection(&m_critNpcData);

  0029a	53		 push	 ebx
  0029b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 3734 : }

  002a1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002a4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ab	59		 pop	 ecx
  002ac	5f		 pop	 edi
  002ad	5e		 pop	 esi
  002ae	5b		 pop	 ebx
  002af	8b e5		 mov	 esp, ebp
  002b1	5d		 pop	 ebp
  002b2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateNonDbNPC@CCastleSiege@@QAEXH@Z$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S11$187697[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?CreateNonDbNPC@CCastleSiege@@QAEXH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateNonDbNPC@CCastleSiege@@QAEXH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateNonDbNPC@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::CreateNonDbNPC
PUBLIC	?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z	; CCastleSiege::CheckAddDbNPC
EXTRN	?GS_GDReqCastleNpcBuy@@YAXHHHHHHHHEEEH@Z:PROC	; GS_GDReqCastleNpcBuy
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z$0
__ehfuncinfo$?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z
_TEXT	SEGMENT
_$S12$187731 = -136					; size = 116
tv288 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iIndex$ = 8						; size = 4
_iNpcType$ = 12						; size = 4
_iNpcIndex$ = 16					; size = 4
_btResult$ = 20						; size = 4
?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z PROC		; CCastleSiege::CheckAddDbNPC, COMDAT
; _this$ = ecx

; 3737 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 3738 : 	int iRETVAL = FALSE;
; 3739 : 
; 3740 : 	EnterCriticalSection(&m_critNpcData);

  0002d	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00033	50		 push	 eax
  00034	33 db		 xor	 ebx, ebx
  00036	89 45 ec	 mov	 DWORD PTR tv288[ebp], eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 3741 : 
; 3742 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  0003f	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]

; 3743 : 
; 3744 : 	while(it != m_vtNpcData.end())

  00045	8b bf 2c 01 00
	00		 mov	 edi, DWORD PTR [edi+300]
  0004b	3b f7		 cmp	 esi, edi
  0004d	0f 84 11 01 00
	00		 je	 $LN9@CheckAddDb
$LL10@CheckAddDb:

; 3745 : 	{
; 3746 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00053	56		 push	 esi
  00054	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S12$187731[ebp]
  0005a	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 3747 : 
; 3748 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 3749 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex)

  0005f	8b 45 80	 mov	 eax, DWORD PTR _$S12$187731[ebp+8]
  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00069	3b 45 0c	 cmp	 eax, DWORD PTR _iNpcType$[ebp]
  0006c	75 08		 jne	 SHORT $LN1@CheckAddDb
  0006e	8b 4d 84	 mov	 ecx, DWORD PTR _$S12$187731[ebp+12]
  00071	3b 4d 10	 cmp	 ecx, DWORD PTR _iNpcIndex$[ebp]
  00074	74 13		 je	 SHORT $LN58@CheckAddDb
$LN1@CheckAddDb:

; 3788 : 				iRETVAL = 1;
; 3789 : 				break;
; 3790 : 			}
; 3791 : 		}
; 3792 : 		it++;

  00076	83 c6 74	 add	 esi, 116		; 00000074H

; 3793 : 	}

  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	3b f7		 cmp	 esi, edi
  00082	75 cf		 jne	 SHORT $LL10@CheckAddDb

; 3747 : 
; 3748 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 3749 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex)

  00084	e9 db 00 00 00	 jmp	 $LN9@CheckAddDb
$LN58@CheckAddDb:

; 3750 : 		{
; 3751 : 			if(pNpcData.m_bIN_USE == TRUE
; 3752 : 			&&pNpcData.m_iNPC_LIVE > 0
; 3753 : 			&& gObjIsConnected(pNpcData.m_iNPC_OBJINDEX)
; 3754 : 			&& gObj[pNpcData.m_iNPC_OBJINDEX].Class == iNpcType
; 3755 : 			&& gObj[pNpcData.m_iNPC_OBJINDEX].Live == TRUE
; 3756 : 			&& gObj[pNpcData.m_iNPC_OBJINDEX].m_iCsNpcExistVal == pNpcData.m_iCsNpcExistVal
; 3757 : 			&& gObj[pNpcData.m_iNPC_OBJINDEX].m_iCsNpcExistVal != 0)

  00089	bb 01 00 00 00	 mov	 ebx, 1
  0008e	39 9d 7c ff ff
	ff		 cmp	 DWORD PTR _$S12$187731[ebp+4], ebx
  00094	75 50		 jne	 SHORT $LN7@CheckAddDb
  00096	83 7d e0 00	 cmp	 DWORD PTR _$S12$187731[ebp+104], 0
  0009a	7e 4a		 jle	 SHORT $LN7@CheckAddDb
  0009c	8b 75 90	 mov	 esi, DWORD PTR _$S12$187731[ebp+24]
  0009f	56		 push	 esi
  000a0	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000a5	83 c4 04	 add	 esp, 4
  000a8	85 c0		 test	 eax, eax
  000aa	74 3a		 je	 SHORT $LN7@CheckAddDb
  000ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b2	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  000b8	0f b7 8c 16 90
	00 00 00	 movzx	 ecx, WORD PTR [esi+edx+144]
  000c0	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000c3	3b 4d 0c	 cmp	 ecx, DWORD PTR _iNpcType$[ebp]
  000c6	75 1e		 jne	 SHORT $LN7@CheckAddDb
  000c8	38 58 51	 cmp	 BYTE PTR [eax+81], bl
  000cb	75 19		 jne	 SHORT $LN7@CheckAddDb
  000cd	8b 80 4c 20 00
	00		 mov	 eax, DWORD PTR [eax+8268]
  000d3	3b 45 e8	 cmp	 eax, DWORD PTR _$S12$187731[ebp+112]
  000d6	75 0e		 jne	 SHORT $LN7@CheckAddDb
  000d8	85 c0		 test	 eax, eax
  000da	74 0a		 je	 SHORT $LN7@CheckAddDb

; 3758 : 			{
; 3759 : 				*btResult = 0;

  000dc	8b 55 14	 mov	 edx, DWORD PTR _btResult$[ebp]
  000df	c6 02 00	 mov	 BYTE PTR [edx], 0

; 3760 : 				iRETVAL = 0;

  000e2	33 db		 xor	 ebx, ebx

; 3761 : 				break;

  000e4	eb 7e		 jmp	 SHORT $LN9@CheckAddDb
$LN7@CheckAddDb:

; 3762 : 			}
; 3763 : 
; 3764 : 			int iBuyCost = 0;
; 3765 : 
; 3766 : 			switch(pNpcData.m_iNPC_NUM)

  000e6	8b 4d 80	 mov	 ecx, DWORD PTR _$S12$187731[ebp+8]
  000e9	33 c0		 xor	 eax, eax
  000eb	81 e9 15 01 00
	00		 sub	 ecx, 277		; 00000115H
  000f1	74 0d		 je	 SHORT $LN4@CheckAddDb
  000f3	83 e9 06	 sub	 ecx, 6
  000f6	75 0e		 jne	 SHORT $LN5@CheckAddDb

; 3770 : 				break;
; 3771 : 			case 283:
; 3772 : 				iBuyCost = pNpcData.m_iNPC_BASE_MAXHP * 3;

  000f8	8b 45 c0	 mov	 eax, DWORD PTR _$S12$187731[ebp+72]
  000fb	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]

; 3773 : 				break;

  000fe	eb 06		 jmp	 SHORT $LN5@CheckAddDb
$LN4@CheckAddDb:

; 3767 : 			{
; 3768 : 			case 277:
; 3769 : 				iBuyCost = pNpcData.m_iNPC_BASE_MAXHP * 5;

  00100	8b 45 c0	 mov	 eax, DWORD PTR _$S12$187731[ebp+72]
  00103	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
$LN5@CheckAddDb:

; 3774 : 			}
; 3775 : 	
; 3776 : 			if(gObj[iIndex].Money < iBuyCost)

  00106	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00109	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010f	8b d1		 mov	 edx, ecx
  00111	69 d2 40 27 00
	00		 imul	 edx, 10048		; 00002740H
  00117	39 84 32 cc 00
	00 00		 cmp	 DWORD PTR [edx+esi+204], eax
  0011e	7d 0a		 jge	 SHORT $LN2@CheckAddDb

; 3777 : 			{
; 3778 : 				*btResult = 3;

  00120	8b 45 14	 mov	 eax, DWORD PTR _btResult$[ebp]
  00123	c6 00 03	 mov	 BYTE PTR [eax], 3

; 3779 : 				iRETVAL = 0;

  00126	33 db		 xor	 ebx, ebx

; 3780 : 				break;

  00128	eb 3a		 jmp	 SHORT $LN9@CheckAddDb
$LN2@CheckAddDb:

; 3781 : 			}
; 3782 : 			else
; 3783 : 			{
; 3784 : 				GS_GDReqCastleNpcBuy(m_iMapSvrGroup,iIndex,iNpcType,iNpcIndex,
; 3785 : 					pNpcData.m_iNPC_DF_LEVEL,pNpcData.m_iNPC_RG_LEVEL,pNpcData.m_iNPC_MAXHP,pNpcData.m_iNPC_HP,pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY,pNpcData.m_iNPC_DIR,iBuyCost);

  0012a	8b 55 b4	 mov	 edx, DWORD PTR _$S12$187731[ebp+60]
  0012d	50		 push	 eax
  0012e	8b 45 a8	 mov	 eax, DWORD PTR _$S12$187731[ebp+48]
  00131	52		 push	 edx
  00132	8b 55 a4	 mov	 edx, DWORD PTR _$S12$187731[ebp+44]
  00135	50		 push	 eax
  00136	8b 45 a0	 mov	 eax, DWORD PTR _$S12$187731[ebp+40]
  00139	52		 push	 edx
  0013a	8b 55 9c	 mov	 edx, DWORD PTR _$S12$187731[ebp+36]
  0013d	50		 push	 eax
  0013e	8b 45 98	 mov	 eax, DWORD PTR _$S12$187731[ebp+32]
  00141	52		 push	 edx
  00142	8b 55 94	 mov	 edx, DWORD PTR _$S12$187731[ebp+28]
  00145	50		 push	 eax
  00146	8b 45 10	 mov	 eax, DWORD PTR _iNpcIndex$[ebp]
  00149	52		 push	 edx
  0014a	8b 55 0c	 mov	 edx, DWORD PTR _iNpcType$[ebp]
  0014d	50		 push	 eax
  0014e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00151	52		 push	 edx
  00152	51		 push	 ecx
  00153	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00156	51		 push	 ecx
  00157	e8 00 00 00 00	 call	 ?GS_GDReqCastleNpcBuy@@YAXHHHHHHHHEEEH@Z ; GS_GDReqCastleNpcBuy

; 3786 : 
; 3787 : 				*btResult = 1;

  0015c	8b 55 14	 mov	 edx, DWORD PTR _btResult$[ebp]
  0015f	83 c4 30	 add	 esp, 48			; 00000030H
  00162	88 1a		 mov	 BYTE PTR [edx], bl
$LN9@CheckAddDb:

; 3794 : 
; 3795 : 	LeaveCriticalSection(&m_critNpcData);

  00164	8b 45 ec	 mov	 eax, DWORD PTR tv288[ebp]
  00167	50		 push	 eax
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 3796 : return iRETVAL;

  0016e	8b c3		 mov	 eax, ebx

; 3797 : }

  00170	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00173	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017a	59		 pop	 ecx
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z$0:
  00000	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S12$187731[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckAddDbNPC@CCastleSiege@@QAEHHHHPAE@Z ENDP		; CCastleSiege::CheckAddDbNPC
PUBLIC	?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z		; CCastleSiege::RepairDbNPC
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z$0
__ehfuncinfo$?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z
_TEXT	SEGMENT
_$S13$187838 = -136					; size = 116
tv288 = -20						; size = 4
_bEXIST$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iNpcType$ = 8						; size = 4
_iNpcIndex$ = 12					; size = 4
_iNpcHP$ = 16						; size = 4
_iNpcMaxHP$ = 20					; size = 4
?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z PROC		; CCastleSiege::RepairDbNPC, COMDAT
; _this$ = ecx

; 3930 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 3931 : 	int bEXIST = FALSE;
; 3932 : 
; 3933 : 	EnterCriticalSection(&m_critNpcData);

  0002a	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00030	50		 push	 eax
  00031	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bEXIST$[ebp], 0
  00038	89 45 ec	 mov	 DWORD PTR tv288[ebp], eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 3934 : 
; 3935 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  00041	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]

; 3936 : 
; 3937 : 	while(it != m_vtNpcData.end())

  00047	8b bf 2c 01 00
	00		 mov	 edi, DWORD PTR [edi+300]
  0004d	3b f7		 cmp	 esi, edi
  0004f	0f 84 a9 00 00
	00		 je	 $LN1@RepairDbNP
  00055	8b 5d 08	 mov	 ebx, DWORD PTR _iNpcType$[ebp]
  00058	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL4@RepairDbNP:

; 3938 : 	{
; 3939 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00060	56		 push	 esi
  00061	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S13$187838[ebp]
  00067	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3940 : 
; 3941 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 3942 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex
; 3943 : 			&& pNpcData.m_bIN_USE == TRUE
; 3944 : 			&& pNpcData.m_iNPC_LIVE > 0)

  00073	39 5d 80	 cmp	 DWORD PTR _$S13$187838[ebp+8], ebx
  00076	75 17		 jne	 SHORT $LN2@RepairDbNP
  00078	8b 45 0c	 mov	 eax, DWORD PTR _iNpcIndex$[ebp]
  0007b	39 45 84	 cmp	 DWORD PTR _$S13$187838[ebp+12], eax
  0007e	75 0f		 jne	 SHORT $LN2@RepairDbNP
  00080	83 bd 7c ff ff
	ff 01		 cmp	 DWORD PTR _$S13$187838[ebp+4], 1
  00087	75 06		 jne	 SHORT $LN2@RepairDbNP
  00089	83 7d e0 00	 cmp	 DWORD PTR _$S13$187838[ebp+104], 0
  0008d	7f 10		 jg	 SHORT $LN66@RepairDbNP
$LN2@RepairDbNP:

; 3959 : 			}
; 3960 : 
; 3961 : 			break;
; 3962 : 		}
; 3963 : 
; 3964 : 		it++;

  0008f	83 c6 74	 add	 esi, 116		; 00000074H

; 3965 : 	}

  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	3b f7		 cmp	 esi, edi
  0009b	75 c3		 jne	 SHORT $LL4@RepairDbNP

; 3940 : 
; 3941 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 3942 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex
; 3943 : 			&& pNpcData.m_bIN_USE == TRUE
; 3944 : 			&& pNpcData.m_iNPC_LIVE > 0)

  0009d	eb 5f		 jmp	 SHORT $LN1@RepairDbNP
$LN66@RepairDbNP:

; 3945 : 		{
; 3946 : 			it->m_iNPC_HP = iNpcHP;

  0009f	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcHP$[ebp]

; 3947 : 			it->m_iNPC_MAXHP = iNpcMaxHP;

  000a2	8b 55 14	 mov	 edx, DWORD PTR _iNpcMaxHP$[ebp]
  000a5	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  000a8	89 56 24	 mov	 DWORD PTR [esi+36], edx

; 3948 : 
; 3949 : 			int iNPC_INDEX = pNpcData.m_iNPC_OBJINDEX;
; 3950 : 
; 3951 : 			if(gObjIsConnected(iNPC_INDEX)
; 3952 : 				&& gObj[iNPC_INDEX].m_btCsNpcType != FALSE
; 3953 : 				&& gObj[iNPC_INDEX].Class == iNpcType
; 3954 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal == pNpcData.m_iCsNpcExistVal
; 3955 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal != FALSE)

  000ab	8b 75 90	 mov	 esi, DWORD PTR _$S13$187838[ebp+24]
  000ae	56		 push	 esi
  000af	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000b4	83 c4 04	 add	 esp, 4
  000b7	85 c0		 test	 eax, eax
  000b9	74 43		 je	 SHORT $LN1@RepairDbNP
  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c0	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  000c6	03 c6		 add	 eax, esi
  000c8	80 b8 50 20 00
	00 00		 cmp	 BYTE PTR [eax+8272], 0
  000cf	74 2d		 je	 SHORT $LN1@RepairDbNP
  000d1	0f b7 88 90 00
	00 00		 movzx	 ecx, WORD PTR [eax+144]
  000d8	3b cb		 cmp	 ecx, ebx
  000da	75 22		 jne	 SHORT $LN1@RepairDbNP
  000dc	8b 88 4c 20 00
	00		 mov	 ecx, DWORD PTR [eax+8268]
  000e2	3b 4d e8	 cmp	 ecx, DWORD PTR _$S13$187838[ebp+112]
  000e5	75 17		 jne	 SHORT $LN1@RepairDbNP
  000e7	85 c9		 test	 ecx, ecx
  000e9	74 13		 je	 SHORT $LN1@RepairDbNP

; 3956 : 			{
; 3957 : 				gObj[iNPC_INDEX].Life = gObj[iNPC_INDEX].MaxLife;

  000eb	d9 80 dc 00 00
	00		 fld	 DWORD PTR [eax+220]

; 3958 : 				bEXIST = TRUE;

  000f1	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bEXIST$[ebp], 1
  000f8	d9 98 d8 00 00
	00		 fstp	 DWORD PTR [eax+216]
$LN1@RepairDbNP:

; 3966 : 
; 3967 : 	LeaveCriticalSection(&m_critNpcData);

  000fe	8b 55 ec	 mov	 edx, DWORD PTR tv288[ebp]
  00101	52		 push	 edx
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 3968 : 	return bEXIST;

  00108	8b 45 f0	 mov	 eax, DWORD PTR _bEXIST$[ebp]

; 3969 : }

  0010b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00115	59		 pop	 ecx
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z$0:
  00000	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S13$187838[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RepairDbNPC@CCastleSiege@@QAEHHHHH@Z ENDP		; CCastleSiege::RepairDbNPC
PUBLIC	?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z ; CCastleSiege::GetNpcData
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z$0
__ehfuncinfo$?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z
_TEXT	SEGMENT
_$S14$187972 = -140					; size = 116
tv310 = -24						; size = 4
tv316 = -20						; size = 4
_this$ = -20						; size = 4
_bEXIST$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iNpcType$ = 8						; size = 4
_iNpcIndex$ = 12					; size = 4
_it$ = 16						; size = 4
_pRetNpcData$ = 16					; size = 4
?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z PROC ; CCastleSiege::GetNpcData, COMDAT
; _this$ = ecx

; 4185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 4186 : 	pRetNpcData.Clear();

  0002e	8b 75 10	 mov	 esi, DWORD PTR _pRetNpcData$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	83 cf ff	 or	 edi, -1

; 4187 : 	int bEXIST = FALSE;
; 4188 : 
; 4189 : 	EnterCriticalSection(&m_critNpcData);

  00036	8d 81 38 01 00
	00		 lea	 eax, DWORD PTR [ecx+312]
  0003c	50		 push	 eax
  0003d	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00040	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00043	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00046	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
  00049	89 7e 6c	 mov	 DWORD PTR [esi+108], edi
  0004c	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0004f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00052	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00055	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00058	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  0005b	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  0005e	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00061	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  00064	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  00067	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  0006a	89 7e 38	 mov	 DWORD PTR [esi+56], edi
  0006d	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  00070	89 5e 40	 mov	 DWORD PTR [esi+64], ebx
  00073	89 5e 44	 mov	 DWORD PTR [esi+68], ebx
  00076	89 5e 48	 mov	 DWORD PTR [esi+72], ebx
  00079	89 5e 4c	 mov	 DWORD PTR [esi+76], ebx
  0007c	89 7e 50	 mov	 DWORD PTR [esi+80], edi
  0007f	89 7e 54	 mov	 DWORD PTR [esi+84], edi
  00082	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  00085	89 7e 5c	 mov	 DWORD PTR [esi+92], edi
  00088	89 7e 60	 mov	 DWORD PTR [esi+96], edi
  0008b	89 5e 70	 mov	 DWORD PTR [esi+112], ebx
  0008e	89 5d f0	 mov	 DWORD PTR _bEXIST$[ebp], ebx
  00091	89 45 e8	 mov	 DWORD PTR tv310[ebp], eax
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4190 : 
; 4191 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  0009a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]

; 4192 : 
; 4193 : 	while(it != m_vtNpcData.end())

  000a3	8b 89 2c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+300]
  000a9	89 45 10	 mov	 DWORD PTR _it$[ebp], eax
  000ac	89 4d ec	 mov	 DWORD PTR tv316[ebp], ecx
  000af	3b c1		 cmp	 eax, ecx
  000b1	0f 84 9b 00 00
	00		 je	 $LN1@GetNpcData
  000b7	eb 0a		 jmp	 SHORT $LN4@GetNpcData
  000b9	8d a4 24 00 00
	00 00		 npad	 7
$LL52@GetNpcData:
  000c0	8b 45 10	 mov	 eax, DWORD PTR _it$[ebp]
$LN4@GetNpcData:

; 4194 : 	{
; 4195 : 
; 4196 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  000c3	50		 push	 eax
  000c4	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S14$187972[ebp]
  000ca	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 4197 : 
; 4198 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 4199 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex
; 4200 : 			&& pNpcData.m_bIN_USE == TRUE
; 4201 : 			&& pNpcData.m_iNPC_LIVE > 0)

  000cf	8b 45 08	 mov	 eax, DWORD PTR _iNpcType$[ebp]
  000d2	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  000d5	39 85 7c ff ff
	ff		 cmp	 DWORD PTR _$S14$187972[ebp+8], eax
  000db	75 16		 jne	 SHORT $LN2@GetNpcData
  000dd	8b 4d 0c	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  000e0	39 4d 80	 cmp	 DWORD PTR _$S14$187972[ebp+12], ecx
  000e3	75 0e		 jne	 SHORT $LN2@GetNpcData
  000e5	83 bd 78 ff ff
	ff 01		 cmp	 DWORD PTR _$S14$187972[ebp+4], 1
  000ec	75 05		 jne	 SHORT $LN2@GetNpcData
  000ee	39 5d dc	 cmp	 DWORD PTR _$S14$187972[ebp+104], ebx
  000f1	7f 13		 jg	 SHORT $LN50@GetNpcData
$LN2@GetNpcData:

; 4212 : 			}
; 4213 : 			break;
; 4214 : 		}
; 4215 : 
; 4216 : 		it++;

  000f3	8b 45 10	 mov	 eax, DWORD PTR _it$[ebp]
  000f6	83 c0 74	 add	 eax, 116		; 00000074H
  000f9	89 45 10	 mov	 DWORD PTR _it$[ebp], eax

; 4217 : 	}

  000fc	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  000ff	3b 45 ec	 cmp	 eax, DWORD PTR tv316[ebp]
  00102	75 bc		 jne	 SHORT $LL52@GetNpcData

; 4197 : 
; 4198 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 4199 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex
; 4200 : 			&& pNpcData.m_bIN_USE == TRUE
; 4201 : 			&& pNpcData.m_iNPC_LIVE > 0)

  00104	eb 4c		 jmp	 SHORT $LN1@GetNpcData
$LN50@GetNpcData:

; 4202 : 		{
; 4203 : 			int iNPC_INDEX = pNpcData.m_iNPC_OBJINDEX;
; 4204 : 
; 4205 : 			if(gObjIsConnected(iNPC_INDEX)
; 4206 : 				&& gObj[iNPC_INDEX].m_btCsNpcType != 0
; 4207 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal == pNpcData.m_iCsNpcExistVal
; 4208 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal != 0)

  00106	8b 7d 8c	 mov	 edi, DWORD PTR _$S14$187972[ebp+24]
  00109	57		 push	 edi
  0010a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0010f	83 c4 04	 add	 esp, 4
  00112	85 c0		 test	 eax, eax
  00114	74 3c		 je	 SHORT $LN1@GetNpcData
  00116	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0011c	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  00122	38 9c 17 50 20
	00 00		 cmp	 BYTE PTR [edi+edx+8272], bl
  00129	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  0012c	74 24		 je	 SHORT $LN1@GetNpcData
  0012e	8b 80 4c 20 00
	00		 mov	 eax, DWORD PTR [eax+8268]
  00134	3b 45 e4	 cmp	 eax, DWORD PTR _$S14$187972[ebp+112]
  00137	75 19		 jne	 SHORT $LN1@GetNpcData
  00139	3b c3		 cmp	 eax, ebx
  0013b	74 15		 je	 SHORT $LN1@GetNpcData

; 4209 : 			{
; 4210 : 				pRetNpcData = pNpcData;

  0013d	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _$S14$187972[ebp]
  00143	50		 push	 eax
  00144	8b ce		 mov	 ecx, esi
  00146	e8 00 00 00 00	 call	 ??4_CS_NPC_DATA@@QAEAAU0@ABU0@@Z

; 4211 : 				bEXIST = TRUE;

  0014b	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bEXIST$[ebp], 1
$LN1@GetNpcData:

; 4218 : 
; 4219 : 	LeaveCriticalSection(&m_critNpcData);

  00152	8b 4d e8	 mov	 ecx, DWORD PTR tv310[ebp]
  00155	51		 push	 ecx
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4220 : 
; 4221 : 	return bEXIST;

  0015c	8b 45 f0	 mov	 eax, DWORD PTR _bEXIST$[ebp]

; 4222 : }

  0015f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00162	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00169	59		 pop	 ecx
  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z$0:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S14$187972[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z ENDP ; CCastleSiege::GetNpcData
PUBLIC	?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z	; CCastleSiege::UpgradeDbNPC_DFLEVEL
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z$0
__ehfuncinfo$?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z
_TEXT	SEGMENT
_$S15$188020 = -136					; size = 116
tv288 = -20						; size = 4
_bEXIST$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iNpcType$ = 8						; size = 4
_iNpcIndex$ = 12					; size = 4
_iNpcDfLevel$ = 16					; size = 4
?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z PROC	; CCastleSiege::UpgradeDbNPC_DFLEVEL, COMDAT
; _this$ = ecx

; 4271 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 4272 : 	int bEXIST = FALSE;
; 4273 : 	vector<_CS_NPC_DATA>::iterator it;
; 4274 : 
; 4275 : 	EnterCriticalSection(&m_critNpcData);

  0002a	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00030	50		 push	 eax
  00031	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bEXIST$[ebp], 0
  00038	89 45 ec	 mov	 DWORD PTR tv288[ebp], eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4276 : 
; 4277 : 	it = m_vtNpcData.begin();

  00041	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]

; 4278 : 
; 4279 : 	while(it != m_vtNpcData.end())

  00047	8b bf 2c 01 00
	00		 mov	 edi, DWORD PTR [edi+300]
  0004d	3b f7		 cmp	 esi, edi
  0004f	0f 84 c4 00 00
	00		 je	 $LN1@UpgradeDbN
  00055	8b 5d 08	 mov	 ebx, DWORD PTR _iNpcType$[ebp]
  00058	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL4@UpgradeDbN:

; 4280 : 	{
; 4281 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00060	56		 push	 esi
  00061	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S15$188020[ebp]
  00067	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 4282 : 
; 4283 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 4284 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex
; 4285 : 			&& pNpcData.m_bIN_USE == TRUE
; 4286 : 			&& pNpcData.m_iNPC_LIVE > 0)

  00073	39 5d 80	 cmp	 DWORD PTR _$S15$188020[ebp+8], ebx
  00076	75 17		 jne	 SHORT $LN2@UpgradeDbN
  00078	8b 45 0c	 mov	 eax, DWORD PTR _iNpcIndex$[ebp]
  0007b	39 45 84	 cmp	 DWORD PTR _$S15$188020[ebp+12], eax
  0007e	75 0f		 jne	 SHORT $LN2@UpgradeDbN
  00080	83 bd 7c ff ff
	ff 01		 cmp	 DWORD PTR _$S15$188020[ebp+4], 1
  00087	75 06		 jne	 SHORT $LN2@UpgradeDbN
  00089	83 7d e0 00	 cmp	 DWORD PTR _$S15$188020[ebp+104], 0
  0008d	7f 10		 jg	 SHORT $LN61@UpgradeDbN
$LN2@UpgradeDbN:

; 4300 : 			}
; 4301 : 
; 4302 : 			break;
; 4303 : 		}
; 4304 : 
; 4305 : 		it++;

  0008f	83 c6 74	 add	 esi, 116		; 00000074H

; 4306 : 	}

  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	3b f7		 cmp	 esi, edi
  0009b	75 c3		 jne	 SHORT $LL4@UpgradeDbN

; 4282 : 
; 4283 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 4284 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex
; 4285 : 			&& pNpcData.m_bIN_USE == TRUE
; 4286 : 			&& pNpcData.m_iNPC_LIVE > 0)

  0009d	eb 7a		 jmp	 SHORT $LN1@UpgradeDbN
$LN61@UpgradeDbN:

; 4287 : 		{
; 4288 : 			int iNPC_INDEX = pNpcData.m_iNPC_OBJINDEX;
; 4289 : 
; 4290 : 			if(gObjIsConnected(iNPC_INDEX)
; 4291 : 				&& gObj[iNPC_INDEX].m_btCsNpcType != 0
; 4292 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal == pNpcData.m_iCsNpcExistVal
; 4293 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal != 0)

  0009f	8b 7d 90	 mov	 edi, DWORD PTR _$S15$188020[ebp+24]
  000a2	57		 push	 edi
  000a3	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000a8	83 c4 04	 add	 esp, 4
  000ab	85 c0		 test	 eax, eax
  000ad	74 6a		 je	 SHORT $LN1@UpgradeDbN
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b5	8b c7		 mov	 eax, edi
  000b7	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  000bd	80 bc 08 50 20
	00 00 00	 cmp	 BYTE PTR [eax+ecx+8272], 0
  000c5	74 52		 je	 SHORT $LN1@UpgradeDbN
  000c7	8b 8c 08 4c 20
	00 00		 mov	 ecx, DWORD PTR [eax+ecx+8268]
  000ce	3b 4d e8	 cmp	 ecx, DWORD PTR _$S15$188020[ebp+112]
  000d1	75 46		 jne	 SHORT $LN1@UpgradeDbN
  000d3	85 c9		 test	 ecx, ecx
  000d5	74 42		 je	 SHORT $LN1@UpgradeDbN

; 4294 : 			{
; 4295 : 				it->m_iNPC_DF_LEVEL = iNpcDfLevel;

  000d7	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcDfLevel$[ebp]
  000da	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx

; 4296 : 				bEXIST = TRUE;
; 4297 : 				gObj[iNPC_INDEX].m_Defense = g_iNpcDefense_CGATE[iNpcDfLevel];

  000dd	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?g_iNpcDefense_CGATE@@3PAHA[ecx*4]
  000e4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ea	89 94 30 74 06
	00 00		 mov	 DWORD PTR [eax+esi+1652], edx

; 4298 : 				gObj[iNPC_INDEX].m_MagicDefense = g_iNpcDefense_CGATE[iNpcDfLevel];

  000f1	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?g_iNpcDefense_CGATE@@3PAHA[ecx*4]
  000f8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fe	89 94 30 78 06
	00 00		 mov	 DWORD PTR [eax+esi+1656], edx

; 4299 : 				gObj[iNPC_INDEX].m_btCsNpcDfLevel = iNpcDfLevel;

  00105	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010b	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bEXIST$[ebp], 1
  00112	88 8c 10 58 20
	00 00		 mov	 BYTE PTR [eax+edx+8280], cl
$LN1@UpgradeDbN:

; 4307 : 
; 4308 : 	LeaveCriticalSection(&m_critNpcData);

  00119	8b 45 ec	 mov	 eax, DWORD PTR tv288[ebp]
  0011c	50		 push	 eax
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4309 : 	return bEXIST;

  00123	8b 45 f0	 mov	 eax, DWORD PTR _bEXIST$[ebp]

; 4310 : }

  00126	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00129	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00130	59		 pop	 ecx
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z$0:
  00000	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S15$188020[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z ENDP	; CCastleSiege::UpgradeDbNPC_DFLEVEL
PUBLIC	?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z	; CCastleSiege::UpgradeDbNPC_MAXHP
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z$0
__ehfuncinfo$?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z
_TEXT	SEGMENT
_$S16$188044 = -136					; size = 116
tv288 = -20						; size = 4
_bEXIST$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iNpcType$ = 8						; size = 4
_iNpcIndex$ = 12					; size = 4
tv336 = 16						; size = 4
_iNpcMaxHP$ = 16					; size = 4
?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z PROC	; CCastleSiege::UpgradeDbNPC_MAXHP, COMDAT
; _this$ = ecx

; 4313 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 4314 : 	int bEXIST = FALSE;
; 4315 : 	vector<_CS_NPC_DATA>::iterator it;
; 4316 : 
; 4317 : 	EnterCriticalSection(&m_critNpcData);

  0002a	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00030	50		 push	 eax
  00031	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bEXIST$[ebp], 0
  00038	89 45 ec	 mov	 DWORD PTR tv288[ebp], eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4318 : 
; 4319 : 	it = m_vtNpcData.begin();

  00041	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]

; 4320 : 
; 4321 : 	while(it != m_vtNpcData.end())

  00047	8b bf 2c 01 00
	00		 mov	 edi, DWORD PTR [edi+300]
  0004d	3b f7		 cmp	 esi, edi
  0004f	0f 84 b5 00 00
	00		 je	 $LN1@UpgradeDbN@2
  00055	8b 5d 08	 mov	 ebx, DWORD PTR _iNpcType$[ebp]
  00058	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL4@UpgradeDbN@2:

; 4322 : 	{
; 4323 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00060	56		 push	 esi
  00061	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S16$188044[ebp]
  00067	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 4324 : 
; 4325 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 4326 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex
; 4327 : 			&& pNpcData.m_bIN_USE == TRUE
; 4328 : 			&& pNpcData.m_iNPC_LIVE > 0)

  00073	39 5d 80	 cmp	 DWORD PTR _$S16$188044[ebp+8], ebx
  00076	75 17		 jne	 SHORT $LN2@UpgradeDbN@2
  00078	8b 45 0c	 mov	 eax, DWORD PTR _iNpcIndex$[ebp]
  0007b	39 45 84	 cmp	 DWORD PTR _$S16$188044[ebp+12], eax
  0007e	75 0f		 jne	 SHORT $LN2@UpgradeDbN@2
  00080	83 bd 7c ff ff
	ff 01		 cmp	 DWORD PTR _$S16$188044[ebp+4], 1
  00087	75 06		 jne	 SHORT $LN2@UpgradeDbN@2
  00089	83 7d e0 00	 cmp	 DWORD PTR _$S16$188044[ebp+104], 0
  0008d	7f 10		 jg	 SHORT $LN70@UpgradeDbN@2
$LN2@UpgradeDbN@2:

; 4343 : 			}
; 4344 : 
; 4345 : 			break;
; 4346 : 		}
; 4347 : 
; 4348 : 		it++;

  0008f	83 c6 74	 add	 esi, 116		; 00000074H

; 4349 : 	}

  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	3b f7		 cmp	 esi, edi
  0009b	75 c3		 jne	 SHORT $LL4@UpgradeDbN@2

; 4324 : 
; 4325 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 4326 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex
; 4327 : 			&& pNpcData.m_bIN_USE == TRUE
; 4328 : 			&& pNpcData.m_iNPC_LIVE > 0)

  0009d	eb 6b		 jmp	 SHORT $LN1@UpgradeDbN@2
$LN70@UpgradeDbN@2:

; 4329 : 		{
; 4330 : 			int iNPC_INDEX = pNpcData.m_iNPC_OBJINDEX;
; 4331 : 
; 4332 : 			if(gObjIsConnected(iNPC_INDEX)
; 4333 : 				&& gObj[iNPC_INDEX].m_btCsNpcType != 0
; 4334 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal == pNpcData.m_iCsNpcExistVal
; 4335 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal != 0)

  0009f	8b 7d 90	 mov	 edi, DWORD PTR _$S16$188044[ebp+24]
  000a2	57		 push	 edi
  000a3	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000a8	83 c4 04	 add	 esp, 4
  000ab	85 c0		 test	 eax, eax
  000ad	74 5b		 je	 SHORT $LN1@UpgradeDbN@2
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b5	8b c7		 mov	 eax, edi
  000b7	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  000bd	80 bc 08 50 20
	00 00 00	 cmp	 BYTE PTR [eax+ecx+8272], 0
  000c5	74 43		 je	 SHORT $LN1@UpgradeDbN@2
  000c7	8b 8c 08 4c 20
	00 00		 mov	 ecx, DWORD PTR [eax+ecx+8268]
  000ce	3b 4d e8	 cmp	 ecx, DWORD PTR _$S16$188044[ebp+112]
  000d1	75 37		 jne	 SHORT $LN1@UpgradeDbN@2
  000d3	85 c9		 test	 ecx, ecx
  000d5	74 33		 je	 SHORT $LN1@UpgradeDbN@2

; 4336 : 			{
; 4337 : 				it->m_iNPC_MAXHP = iNpcMaxHP;

  000d7	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcMaxHP$[ebp]

; 4338 : 				it->m_iNPC_HP = iNpcMaxHP;
; 4339 : 				bEXIST = TRUE;
; 4340 : 
; 4341 : 				gObj[iNPC_INDEX].MaxLife = (float)iNpcMaxHP;

  000da	db 45 10	 fild	 DWORD PTR _iNpcMaxHP$[ebp]
  000dd	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  000e0	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e9	d9 5d 10	 fstp	 DWORD PTR tv336[ebp]
  000ec	d9 45 10	 fld	 DWORD PTR tv336[ebp]
  000ef	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bEXIST$[ebp], 1
  000f6	d9 94 08 dc 00
	00 00		 fst	 DWORD PTR [eax+ecx+220]

; 4342 : 				gObj[iNPC_INDEX].Life = (float)iNpcMaxHP;

  000fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00103	d9 9c 10 d8 00
	00 00		 fstp	 DWORD PTR [eax+edx+216]
$LN1@UpgradeDbN@2:

; 4350 : 
; 4351 : 	LeaveCriticalSection(&m_critNpcData);

  0010a	8b 45 ec	 mov	 eax, DWORD PTR tv288[ebp]
  0010d	50		 push	 eax
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4352 : 	return bEXIST;

  00114	8b 45 f0	 mov	 eax, DWORD PTR _bEXIST$[ebp]

; 4353 : }

  00117	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00121	59		 pop	 ecx
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z$0:
  00000	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S16$188044[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z ENDP	; CCastleSiege::UpgradeDbNPC_MAXHP
PUBLIC	?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z	; CCastleSiege::UpgradeDbNPC_RGLEVEL
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z$0
__ehfuncinfo$?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z
_TEXT	SEGMENT
_$S17$188070 = -136					; size = 116
tv256 = -20						; size = 4
_bEXIST$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iNpcType$ = 8						; size = 4
_iNpcIndex$ = 12					; size = 4
_iNpcRgLevel$ = 16					; size = 4
?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z PROC	; CCastleSiege::UpgradeDbNPC_RGLEVEL, COMDAT
; _this$ = ecx

; 4356 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 4357 : 	int bEXIST = FALSE;
; 4358 : 	vector<_CS_NPC_DATA>::iterator it;
; 4359 : 
; 4360 : 	EnterCriticalSection(&m_critNpcData);

  0002a	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00030	50		 push	 eax
  00031	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bEXIST$[ebp], 0
  00038	89 45 ec	 mov	 DWORD PTR tv256[ebp], eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4361 : 
; 4362 : 	it = m_vtNpcData.begin();

  00041	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]

; 4363 : 
; 4364 : 	while(it != m_vtNpcData.end())

  00047	8b bf 2c 01 00
	00		 mov	 edi, DWORD PTR [edi+300]
  0004d	3b f7		 cmp	 esi, edi
  0004f	0f 84 9c 00 00
	00		 je	 $LN1@UpgradeDbN@3
  00055	8b 5d 08	 mov	 ebx, DWORD PTR _iNpcType$[ebp]
  00058	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL4@UpgradeDbN@3:

; 4365 : 	{
; 4366 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00060	56		 push	 esi
  00061	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S17$188070[ebp]
  00067	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 4367 : 
; 4368 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 4369 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex
; 4370 : 			&& pNpcData.m_bIN_USE == TRUE
; 4371 : 			&& pNpcData.m_iNPC_LIVE > 0)

  00073	39 5d 80	 cmp	 DWORD PTR _$S17$188070[ebp+8], ebx
  00076	75 17		 jne	 SHORT $LN2@UpgradeDbN@3
  00078	8b 45 0c	 mov	 eax, DWORD PTR _iNpcIndex$[ebp]
  0007b	39 45 84	 cmp	 DWORD PTR _$S17$188070[ebp+12], eax
  0007e	75 0f		 jne	 SHORT $LN2@UpgradeDbN@3
  00080	83 bd 7c ff ff
	ff 01		 cmp	 DWORD PTR _$S17$188070[ebp+4], 1
  00087	75 06		 jne	 SHORT $LN2@UpgradeDbN@3
  00089	83 7d e0 00	 cmp	 DWORD PTR _$S17$188070[ebp+104], 0
  0008d	7f 10		 jg	 SHORT $LN61@UpgradeDbN@3
$LN2@UpgradeDbN@3:

; 4383 : 			}
; 4384 : 
; 4385 : 			break;
; 4386 : 		}
; 4387 : 
; 4388 : 		it++;

  0008f	83 c6 74	 add	 esi, 116		; 00000074H

; 4389 : 	}

  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	3b f7		 cmp	 esi, edi
  0009b	75 c3		 jne	 SHORT $LL4@UpgradeDbN@3

; 4367 : 
; 4368 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 4369 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex
; 4370 : 			&& pNpcData.m_bIN_USE == TRUE
; 4371 : 			&& pNpcData.m_iNPC_LIVE > 0)

  0009d	eb 52		 jmp	 SHORT $LN1@UpgradeDbN@3
$LN61@UpgradeDbN@3:

; 4372 : 		{
; 4373 : 			int iNPC_INDEX = pNpcData.m_iNPC_OBJINDEX;
; 4374 : 
; 4375 : 			if(gObjIsConnected(iNPC_INDEX)
; 4376 : 				&& gObj[iNPC_INDEX].m_btCsNpcType != 0
; 4377 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal == pNpcData.m_iCsNpcExistVal
; 4378 : 				&& gObj[iNPC_INDEX].m_iCsNpcExistVal != 0)

  0009f	8b 7d 90	 mov	 edi, DWORD PTR _$S17$188070[ebp+24]
  000a2	57		 push	 edi
  000a3	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000a8	83 c4 04	 add	 esp, 4
  000ab	85 c0		 test	 eax, eax
  000ad	74 42		 je	 SHORT $LN1@UpgradeDbN@3
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b5	8b c7		 mov	 eax, edi
  000b7	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  000bd	80 bc 08 50 20
	00 00 00	 cmp	 BYTE PTR [eax+ecx+8272], 0
  000c5	74 2a		 je	 SHORT $LN1@UpgradeDbN@3
  000c7	8b 8c 08 4c 20
	00 00		 mov	 ecx, DWORD PTR [eax+ecx+8268]
  000ce	3b 4d e8	 cmp	 ecx, DWORD PTR _$S17$188070[ebp+112]
  000d1	75 1e		 jne	 SHORT $LN1@UpgradeDbN@3
  000d3	85 c9		 test	 ecx, ecx
  000d5	74 1a		 je	 SHORT $LN1@UpgradeDbN@3

; 4379 : 			{
; 4380 : 				it->m_iNPC_RG_LEVEL = iNpcRgLevel;

  000d7	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcRgLevel$[ebp]
  000da	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 4381 : 				bEXIST = TRUE;
; 4382 : 				gObj[iNPC_INDEX].m_btCsNpcRgLevel = iNpcRgLevel;

  000dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e3	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bEXIST$[ebp], 1
  000ea	88 8c 10 59 20
	00 00		 mov	 BYTE PTR [eax+edx+8281], cl
$LN1@UpgradeDbN@3:

; 4390 : 
; 4391 : 	LeaveCriticalSection(&m_critNpcData);

  000f1	8b 45 ec	 mov	 eax, DWORD PTR tv256[ebp]
  000f4	50		 push	 eax
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4392 : 	return bEXIST;

  000fb	8b 45 f0	 mov	 eax, DWORD PTR _bEXIST$[ebp]

; 4393 : }

  000fe	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00101	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00108	59		 pop	 ecx
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z$0:
  00000	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S17$188070[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z ENDP	; CCastleSiege::UpgradeDbNPC_RGLEVEL
PUBLIC	??_C@_0EM@CPILBMDE@?$FLCastleSiege?$FN?$FL?5State?3?$CFd?5?$FN?5Delete@ ; `string'
PUBLIC	?DelNPC@CCastleSiege@@QAEHHHHH@Z		; CCastleSiege::DelNPC
EXTRN	?GS_GDReqNpcRemove@@YAXHHH@Z:PROC		; GS_GDReqNpcRemove
;	COMDAT ??_C@_0EM@CPILBMDE@?$FLCastleSiege?$FN?$FL?5State?3?$CFd?5?$FN?5Delete@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
CONST	SEGMENT
??_C@_0EM@CPILBMDE@?$FLCastleSiege?$FN?$FL?5State?3?$CFd?5?$FN?5Delete@ DB '['
	DB	'CastleSiege][ State:%d ] Delete Castle Gate ( CLS:%d, IDX:%d,'
	DB	' X:%d. Y:%d )', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DelNPC@CCastleSiege@@QAEHHHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DelNPC@CCastleSiege@@QAEHHHHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DelNPC@CCastleSiege@@QAEHHHHH@Z$1
__ehfuncinfo$?DelNPC@CCastleSiege@@QAEHHHHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DelNPC@CCastleSiege@@QAEHHHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?DelNPC@CCastleSiege@@QAEHHHHH@Z
_TEXT	SEGMENT
_pTempNpcData$ = -248					; size = 116
_$S18$188098 = -132					; size = 116
_bEXIST$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iIndex$ = 8						; size = 4
_iNpcType$ = 12						; size = 4
_iMonsterExistVal$ = 16					; size = 4
_bDbSave$ = 20						; size = 4
?DelNPC@CCastleSiege@@QAEHHHHH@Z PROC			; CCastleSiege::DelNPC, COMDAT
; _this$ = ecx

; 4396 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DelNPC@CCastleSiege@@QAEHHHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx

; 4397 : 
; 4398 : 	if(OBJMAX_RANGE(iIndex) == FALSE)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00030	33 f6		 xor	 esi, esi
  00032	3b c6		 cmp	 eax, esi
  00034	7c 0e		 jl	 SHORT $LN94@DelNPC
  00036	33 c9		 xor	 ecx, ecx
  00038	3d eb 2c 00 00	 cmp	 eax, 11499		; 00002cebH
  0003d	0f 9e c1	 setle	 cl
  00040	3b ce		 cmp	 ecx, esi
  00042	75 16		 jne	 SHORT $LN10@DelNPC
$LN94@DelNPC:

; 4399 : 		return false;

  00044	33 c0		 xor	 eax, eax

; 4471 : }

  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 10 00	 ret	 16			; 00000010H
$LN10@DelNPC:

; 4400 : 
; 4401 : 	int bEXIST = FALSE;
; 4402 : 	int bNPC_DB = FALSE;
; 4403 : 
; 4404 : 	_CS_NPC_DATA pTempNpcData;

  0005a	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _pTempNpcData$[ebp]
  00060	89 75 f0	 mov	 DWORD PTR _bEXIST$[ebp], esi
  00063	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@XZ	; _CS_NPC_DATA::_CS_NPC_DATA

; 4405 : 	vector<_CS_NPC_DATA>::iterator it;
; 4406 : 
; 4407 : 	EnterCriticalSection(&m_critNpcData);

  00068	8d 83 38 01 00
	00		 lea	 eax, DWORD PTR [ebx+312]
  0006e	50		 push	 eax
  0006f	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4408 : 
; 4409 : 	it = m_vtNpcData.begin();

  00078	8b b3 28 01 00
	00		 mov	 esi, DWORD PTR [ebx+296]

; 4410 : 
; 4411 : 	while(it != m_vtNpcData.end())

  0007e	3b b3 2c 01 00
	00		 cmp	 esi, DWORD PTR [ebx+300]
  00084	0f 84 77 01 00
	00		 je	 $LN8@DelNPC
  0008a	8d 9b 00 00 00
	00		 npad	 6
$LL9@DelNPC:

; 4412 : 	{
; 4413 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00090	56		 push	 esi
  00091	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S18$188098[ebp]
  00097	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 4414 : 
; 4415 : 
; 4416 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 4417 : 			&& pNpcData.m_iNPC_OBJINDEX == iIndex
; 4418 : 			&& pNpcData.m_iCsNpcExistVal == iMonsterExistVal
; 4419 : 			&& pNpcData.m_bIN_USE == TRUE
; 4420 : 			&& pNpcData.m_iNPC_LIVE > NULL)

  0009c	8b 45 84	 mov	 eax, DWORD PTR _$S18$188098[ebp+8]
  0009f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a3	3b 45 0c	 cmp	 eax, DWORD PTR _iNpcType$[ebp]
  000a6	75 20		 jne	 SHORT $LN7@DelNPC
  000a8	8b 7d 94	 mov	 edi, DWORD PTR _$S18$188098[ebp+24]
  000ab	3b 7d 08	 cmp	 edi, DWORD PTR _iIndex$[ebp]
  000ae	75 18		 jne	 SHORT $LN7@DelNPC
  000b0	8b 55 10	 mov	 edx, DWORD PTR _iMonsterExistVal$[ebp]
  000b3	39 55 ec	 cmp	 DWORD PTR _$S18$188098[ebp+112], edx
  000b6	75 10		 jne	 SHORT $LN7@DelNPC
  000b8	b9 01 00 00 00	 mov	 ecx, 1
  000bd	39 4d 80	 cmp	 DWORD PTR _$S18$188098[ebp+4], ecx
  000c0	75 06		 jne	 SHORT $LN7@DelNPC
  000c2	83 7d e4 00	 cmp	 DWORD PTR _$S18$188098[ebp+104], 0
  000c6	7f 14		 jg	 SHORT $LN92@DelNPC
$LN7@DelNPC:

; 4458 : 
; 4459 : 		}
; 4460 : 
; 4461 : 		it++;

  000c8	83 c6 74	 add	 esi, 116		; 00000074H

; 4462 : 	}

  000cb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000cf	3b b3 2c 01 00
	00		 cmp	 esi, DWORD PTR [ebx+300]
  000d5	75 b9		 jne	 SHORT $LL9@DelNPC

; 4414 : 
; 4415 : 
; 4416 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 4417 : 			&& pNpcData.m_iNPC_OBJINDEX == iIndex
; 4418 : 			&& pNpcData.m_iCsNpcExistVal == iMonsterExistVal
; 4419 : 			&& pNpcData.m_bIN_USE == TRUE
; 4420 : 			&& pNpcData.m_iNPC_LIVE > NULL)

  000d7	e9 25 01 00 00	 jmp	 $LN8@DelNPC
$LN92@DelNPC:

; 4421 : 		{
; 4422 : 			it->SetBaseValue();

  000dc	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  000df	89 56 1c	 mov	 DWORD PTR [esi+28], edx
  000e2	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  000e5	89 56 20	 mov	 DWORD PTR [esi+32], edx
  000e8	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  000eb	89 56 24	 mov	 DWORD PTR [esi+36], edx
  000ee	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  000f1	89 56 28	 mov	 DWORD PTR [esi+40], edx
  000f4	8b 56 50	 mov	 edx, DWORD PTR [esi+80]
  000f7	89 56 2c	 mov	 DWORD PTR [esi+44], edx
  000fa	8b 56 54	 mov	 edx, DWORD PTR [esi+84]
  000fd	89 56 30	 mov	 DWORD PTR [esi+48], edx
  00100	8b 56 58	 mov	 edx, DWORD PTR [esi+88]
  00103	89 56 34	 mov	 DWORD PTR [esi+52], edx
  00106	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  00109	89 56 38	 mov	 DWORD PTR [esi+56], edx
  0010c	8b 56 60	 mov	 edx, DWORD PTR [esi+96]
  0010f	89 56 3c	 mov	 DWORD PTR [esi+60], edx

; 4423 : 			it->m_iNPC_OBJINDEX = -1;

  00112	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1

; 4424 : 			it->m_iNPC_LIVE = NULL;

  00119	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 4425 : 
; 4426 : 			if(pNpcData.m_iNPC_NUM == 277 || pNpcData.m_iNPC_NUM == 283)

  00120	3d 15 01 00 00	 cmp	 eax, 277		; 00000115H
  00125	74 07		 je	 SHORT $LN5@DelNPC
  00127	3d 1b 01 00 00	 cmp	 eax, 283		; 0000011bH
  0012c	75 18		 jne	 SHORT $LN6@DelNPC
$LN5@DelNPC:

; 4427 : 			{
; 4428 : 				pNpcData.m_iNPC_HP = pNpcData.m_iNPC_BASE_HP;

  0012e	8b 45 c8	 mov	 eax, DWORD PTR _$S18$188098[ebp+76]

; 4429 : 				pNpcData.m_iNPC_MAXHP = pNpcData.m_iNPC_BASE_MAXHP;

  00131	8b 55 c4	 mov	 edx, DWORD PTR _$S18$188098[ebp+72]
  00134	89 45 a4	 mov	 DWORD PTR _$S18$188098[ebp+40], eax

; 4430 : 				pNpcData.m_iNPC_RG_LEVEL = pNpcData.m_iNPC_BASE_RG_LEVEL;

  00137	8b 45 c0	 mov	 eax, DWORD PTR _$S18$188098[ebp+68]
  0013a	89 55 a0	 mov	 DWORD PTR _$S18$188098[ebp+36], edx

; 4431 : 				pNpcData.m_iNPC_DF_LEVEL = pNpcData.m_iNPC_BASE_DF_LEVEL;

  0013d	8b 55 bc	 mov	 edx, DWORD PTR _$S18$188098[ebp+64]
  00140	89 45 9c	 mov	 DWORD PTR _$S18$188098[ebp+32], eax
  00143	89 55 98	 mov	 DWORD PTR _$S18$188098[ebp+28], edx
$LN6@DelNPC:

; 4432 : 			}
; 4433 : 
; 4434 : 			bEXIST = TRUE;
; 4435 : 			pTempNpcData = pNpcData;

  00146	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _$S18$188098[ebp]
  0014c	89 4d f0	 mov	 DWORD PTR _bEXIST$[ebp], ecx
  0014f	50		 push	 eax
  00150	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _pTempNpcData$[ebp]
  00156	e8 00 00 00 00	 call	 ??4_CS_NPC_DATA@@QAEAAU0@ABU0@@Z

; 4436 : 
; 4437 : 			if(pNpcData.m_iNPC_NUM == 277)

  0015b	8b 45 84	 mov	 eax, DWORD PTR _$S18$188098[ebp+8]
  0015e	3d 15 01 00 00	 cmp	 eax, 277		; 00000115H
  00163	75 51		 jne	 SHORT $LN4@DelNPC

; 4438 : 			{
; 4439 : 				SetGateBlockState(pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY,1);

  00165	8b 75 ac	 mov	 esi, DWORD PTR _$S18$188098[ebp+48]
  00168	8b 4d a8	 mov	 ecx, DWORD PTR _$S18$188098[ebp+44]
  0016b	6a 01		 push	 1
  0016d	56		 push	 esi
  0016e	51		 push	 ecx
  0016f	8b cb		 mov	 ecx, ebx
  00171	e8 00 00 00 00	 call	 ?SetGateBlockState@CCastleSiege@@QAEXHHH@Z ; CCastleSiege::SetGateBlockState

; 4440 : 				gObjAddBuffEffect(&gObj[pNpcData.m_iNPC_OBJINDEX],BUFF_GATESTATUS,0,0,0,0,-10);

  00176	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  0017c	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00182	6a f6		 push	 -10			; fffffff6H
  00184	6a 00		 push	 0
  00186	6a 00		 push	 0
  00188	6a 00		 push	 0
  0018a	6a 00		 push	 0
  0018c	6a 0d		 push	 13			; 0000000dH
  0018e	57		 push	 edi
  0018f	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 4441 : 				LogAddTD("[CastleSiege][ State:%d ] Delete Castle Gate ( CLS:%d, IDX:%d, X:%d. Y:%d )",
; 4442 : 					m_iCastleSiegeState,pNpcData.m_iNPC_NUM,pNpcData.m_iNPC_INDEX,pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY);

  00194	8b 55 a8	 mov	 edx, DWORD PTR _$S18$188098[ebp+44]
  00197	8b 45 88	 mov	 eax, DWORD PTR _$S18$188098[ebp+12]
  0019a	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  0019d	56		 push	 esi
  0019e	52		 push	 edx
  0019f	50		 push	 eax
  001a0	68 15 01 00 00	 push	 277			; 00000115H
  001a5	51		 push	 ecx
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@CPILBMDE@?$FLCastleSiege?$FN?$FL?5State?3?$CFd?5?$FN?5Delete@
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001b1	83 c4 34	 add	 esp, 52			; 00000034H

; 4443 : 			}
; 4444 : 
; 4445 : 			if(pNpcData.m_iNPC_NUM == 283 &&  m_iCastleSiegeState == CASTLESIEGE_STATE_STARTSIEGE)

  001b4	eb 47		 jmp	 SHORT $LN3@DelNPC
$LN4@DelNPC:
  001b6	3d 1b 01 00 00	 cmp	 eax, 283		; 0000011bH
  001bb	75 40		 jne	 SHORT $LN3@DelNPC
  001bd	83 7b 28 07	 cmp	 DWORD PTR [ebx+40], 7
  001c1	75 3a		 jne	 SHORT $LN3@DelNPC

; 4446 : 			{
; 4447 : 				if(CheckGuardianStatueExist() == FALSE)

  001c3	8b cb		 mov	 ecx, ebx
  001c5	e8 00 00 00 00	 call	 ?CheckGuardianStatueExist@CCastleSiege@@QAEHXZ ; CCastleSiege::CheckGuardianStatueExist
  001ca	85 c0		 test	 eax, eax
  001cc	75 10		 jne	 SHORT $LN2@DelNPC

; 4448 : 				{
; 4449 : 					ClearCastleTowerBarrier();

  001ce	8b cb		 mov	 ecx, ebx
  001d0	e8 00 00 00 00	 call	 ?ClearCastleTowerBarrier@CCastleSiege@@QAEXXZ ; CCastleSiege::ClearCastleTowerBarrier

; 4450 : 					SetCastleTowerAccessable(TRUE);

  001d5	6a 01		 push	 1
  001d7	8b cb		 mov	 ecx, ebx
  001d9	e8 00 00 00 00	 call	 ?SetCastleTowerAccessable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetCastleTowerAccessable
$LN2@DelNPC:

; 4451 : 				}
; 4452 : 
; 4453 : 				LogAddTD("[CastleSiege] Defend Statue is Broken (CLS:%d, IDX:%d, X:%d, Y:%d)",
; 4454 : 					pNpcData.m_iNPC_NUM,pNpcData.m_iNPC_INDEX,pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY);

  001de	8b 55 ac	 mov	 edx, DWORD PTR _$S18$188098[ebp+48]
  001e1	8b 45 a8	 mov	 eax, DWORD PTR _$S18$188098[ebp+44]
  001e4	8b 4d 88	 mov	 ecx, DWORD PTR _$S18$188098[ebp+12]
  001e7	52		 push	 edx
  001e8	50		 push	 eax
  001e9	51		 push	 ecx
  001ea	68 1b 01 00 00	 push	 283			; 0000011bH
  001ef	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FPOFMBBM@?$FLCastleSiege?$FN?5Defend?5Statue?5is?5B@
  001f4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001fa	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@DelNPC:

; 4455 : 			}
; 4456 : 
; 4457 : 			break;

  001fd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
$LN8@DelNPC:

; 4463 : 
; 4464 : 	LeaveCriticalSection(&m_critNpcData);

  00201	8d 83 38 01 00
	00		 lea	 eax, DWORD PTR [ebx+312]
  00207	50		 push	 eax
  00208	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4465 : 
; 4466 : 	if(bEXIST == TRUE && bDbSave == TRUE && m_iCastleSiegeState != CASTLESIEGE_STATE_STARTSIEGE)

  0020e	be 01 00 00 00	 mov	 esi, 1
  00213	39 75 f0	 cmp	 DWORD PTR _bEXIST$[ebp], esi
  00216	75 25		 jne	 SHORT $LN1@DelNPC
  00218	39 75 14	 cmp	 DWORD PTR _bDbSave$[ebp], esi
  0021b	75 20		 jne	 SHORT $LN1@DelNPC
  0021d	83 7b 28 07	 cmp	 DWORD PTR [ebx+40], 7
  00221	74 1a		 je	 SHORT $LN1@DelNPC

; 4467 : 	{
; 4468 : 		GS_GDReqNpcRemove(m_iMapSvrGroup,pTempNpcData.m_iNPC_NUM,pTempNpcData.m_iNPC_INDEX);

  00223	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR _pTempNpcData$[ebp+12]
  00229	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _pTempNpcData$[ebp+8]
  0022f	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  00232	52		 push	 edx
  00233	50		 push	 eax
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 ?GS_GDReqNpcRemove@@YAXHHH@Z ; GS_GDReqNpcRemove
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@DelNPC:

; 4469 : 	}
; 4470 : 	return true;

  0023d	8b c6		 mov	 eax, esi

; 4471 : }

  0023f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00242	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00249	59		 pop	 ecx
  0024a	5f		 pop	 edi
  0024b	5e		 pop	 esi
  0024c	5b		 pop	 ebx
  0024d	8b e5		 mov	 esp, ebp
  0024f	5d		 pop	 ebp
  00250	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DelNPC@CCastleSiege@@QAEHHHHH@Z$0:
  00000	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _pTempNpcData$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__unwindfunclet$?DelNPC@CCastleSiege@@QAEHHHHH@Z$1:
  0000b	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S18$188098[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?DelNPC@CCastleSiege@@QAEHHHHH@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a 04 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-252]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DelNPC@CCastleSiege@@QAEHHHHH@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DelNPC@CCastleSiege@@QAEHHHHH@Z ENDP			; CCastleSiege::DelNPC
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SendNpcStateList@CCastleSiege@@QAEXHH@Z	; CCastleSiege::SendNpcStateList
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\include\prodef.h
xdata$x	SEGMENT
__unwindtable$?SendNpcStateList@CCastleSiege@@QAEXHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendNpcStateList@CCastleSiege@@QAEXHH@Z$0
__ehfuncinfo$?SendNpcStateList@CCastleSiege@@QAEXHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendNpcStateList@CCastleSiege@@QAEXHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?SendNpcStateList@CCastleSiege@@QAEXHH@Z
_TEXT	SEGMENT
_$S19$188161 = -1560					; size = 116
tv385 = -1444						; size = 4
_this$GSCopy$ = -1440					; size = 4
_it$ = -1436						; size = 4
_iNPC_COUNT$ = -1432					; size = 4
_cNPC_LIST$ = -1428					; size = 1412
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iIndex$ = 8						; size = 4
_iNpcType$ = 12						; size = 4
?SendNpcStateList@CCastleSiege@@QAEXHH@Z PROC		; CCastleSiege::SendNpcStateList, COMDAT
; _this$ = ecx

; 4494 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SendNpcStateList@CCastleSiege@@QAEXHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 0c 06 00
	00		 sub	 esp, 1548		; 0000060cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 4495 : 	if(gObjIsConnected(iIndex) == FALSE)

  0002e	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00031	8b f9		 mov	 edi, ecx
  00033	50		 push	 eax

; 4531 : 				{
; 4532 : 					iHP = (int)gObj[iNPC_INDEX].Life;

  00034	89 bd 60 fa ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0003a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003f	83 c4 04	 add	 esp, 4
  00042	85 c0		 test	 eax, eax
  00044	0f 84 e0 01 00
	00		 je	 $LN10@SendNpcSta

; 4496 : 		return;
; 4497 : 
; 4498 : 	char cNPC_LIST[0x584] = {0};

  0004a	68 83 05 00 00	 push	 1411			; 00000583H
  0004f	8d 8d 6d fa ff
	ff		 lea	 ecx, DWORD PTR _cNPC_LIST$[ebp+1]
  00055	6a 00		 push	 0
  00057	51		 push	 ecx
  00058	c6 85 6c fa ff
	ff 00		 mov	 BYTE PTR _cNPC_LIST$[ebp], 0
  0005f	e8 00 00 00 00	 call	 _memset

; 4499 : 	int iNPC_COUNT = 0;
; 4500 : 
; 4501 : 	PMSG_ANS_NPCDBLIST * lpMsgSend = (PMSG_ANS_NPCDBLIST *)cNPC_LIST;
; 4502 : 	PMSG_NPCDBLIST * lpMsgSendBody = (PMSG_NPCDBLIST *)&cNPC_LIST[sizeof(PMSG_ANS_NPCDBLIST)];
; 4503 : 
; 4504 : 	EnterCriticalSection(&m_critNpcData);

  00064	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	33 f6		 xor	 esi, esi
  0006f	50		 push	 eax
  00070	89 b5 68 fa ff
	ff		 mov	 DWORD PTR _iNPC_COUNT$[ebp], esi
  00076	89 85 5c fa ff
	ff		 mov	 DWORD PTR tv385[ebp], eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4505 : 
; 4506 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  00082	8b 9f 28 01 00
	00		 mov	 ebx, DWORD PTR [edi+296]
  00088	89 9d 64 fa ff
	ff		 mov	 DWORD PTR _it$[ebp], ebx

; 4507 : 
; 4508 : 	while(it != m_vtNpcData.end())

  0008e	3b 9f 2c 01 00
	00		 cmp	 ebx, DWORD PTR [edi+300]
  00094	0f 84 38 01 00
	00		 je	 $LN53@SendNpcSta

; 4496 : 		return;
; 4497 : 
; 4498 : 	char cNPC_LIST[0x584] = {0};

  0009a	8d b5 80 fa ff
	ff		 lea	 esi, DWORD PTR _cNPC_LIST$[ebp+20]
$LL8@SendNpcSta:

; 4509 : 	{
; 4510 : 
; 4511 : 		if(iNPC_COUNT >= 50)

  000a0	83 bd 68 fa ff
	ff 32		 cmp	 DWORD PTR _iNPC_COUNT$[ebp], 50 ; 00000032H
  000a7	0f 8d 1f 01 00
	00		 jge	 $LN56@SendNpcSta

; 4512 : 			break;
; 4513 : 
; 4514 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  000ad	53		 push	 ebx
  000ae	8d 8d e8 f9 ff
	ff		 lea	 ecx, DWORD PTR _$S19$188161[ebp]
  000b4	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 4515 : 
; 4516 : 		if(pNpcData.m_iNPC_NUM == iNpcType && pNpcData.m_bIN_USE == TRUE)

  000b9	8b 55 0c	 mov	 edx, DWORD PTR _iNpcType$[ebp]
  000bc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000c3	39 95 f0 f9 ff
	ff		 cmp	 DWORD PTR _$S19$188161[ebp+8], edx
  000c9	0f 85 e1 00 00
	00		 jne	 $LN5@SendNpcSta
  000cf	83 bd ec f9 ff
	ff 01		 cmp	 DWORD PTR _$S19$188161[ebp+4], 1
  000d6	0f 85 d4 00 00
	00		 jne	 $LN5@SendNpcSta

; 4517 : 		{
; 4518 : 			int iHP = 0;
; 4519 : 			int iMAX_HP = 0;
; 4520 : 			unsigned char btLIVE = 0;
; 4521 : 			int iNPC_INDEX = pNpcData.m_iNPC_OBJINDEX;
; 4522 : 
; 4523 : 			if(gObjIsConnected(iNPC_INDEX))

  000dc	8b 9d 00 fa ff
	ff		 mov	 ebx, DWORD PTR _$S19$188161[ebp+24]
  000e2	53		 push	 ebx
  000e3	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000e8	83 c4 04	 add	 esp, 4
  000eb	85 c0		 test	 eax, eax
  000ed	74 64		 je	 SHORT $LN4@SendNpcSta

; 4524 : 			{
; 4525 : 				if(gObj[iNPC_INDEX].Class == iNpcType
; 4526 : 					&& gObj[iNPC_INDEX].Live == TRUE
; 4527 : 					&& gObj[iNPC_INDEX].Life > 0.0f
; 4528 : 					&& gObj[iNPC_INDEX].m_btCsNpcType != FALSE
; 4529 : 					&& gObj[iNPC_INDEX].m_iCsNpcExistVal == pNpcData.m_iCsNpcExistVal
; 4530 : 					&& gObj[iNPC_INDEX].m_iCsNpcExistVal != FALSE)

  000ef	69 db 40 27 00
	00		 imul	 ebx, 10048		; 00002740H
  000f5	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fb	0f b7 8b 90 00
	00 00		 movzx	 ecx, WORD PTR [ebx+144]
  00102	3b 4d 0c	 cmp	 ecx, DWORD PTR _iNpcType$[ebp]
  00105	75 4c		 jne	 SHORT $LN4@SendNpcSta
  00107	80 7b 51 01	 cmp	 BYTE PTR [ebx+81], 1
  0010b	75 46		 jne	 SHORT $LN4@SendNpcSta
  0010d	d9 ee		 fldz
  0010f	d8 9b d8 00 00
	00		 fcomp	 DWORD PTR [ebx+216]
  00115	df e0		 fnstsw	 ax
  00117	f6 c4 05	 test	 ah, 5
  0011a	7a 37		 jp	 SHORT $LN4@SendNpcSta
  0011c	80 bb 50 20 00
	00 00		 cmp	 BYTE PTR [ebx+8272], 0
  00123	74 2e		 je	 SHORT $LN4@SendNpcSta
  00125	8b 83 4c 20 00
	00		 mov	 eax, DWORD PTR [ebx+8268]
  0012b	3b 85 58 fa ff
	ff		 cmp	 eax, DWORD PTR _$S19$188161[ebp+112]
  00131	75 20		 jne	 SHORT $LN4@SendNpcSta
  00133	85 c0		 test	 eax, eax
  00135	74 1c		 je	 SHORT $LN4@SendNpcSta

; 4531 : 				{
; 4532 : 					iHP = (int)gObj[iNPC_INDEX].Life;

  00137	d9 83 d8 00 00
	00		 fld	 DWORD PTR [ebx+216]
  0013d	e8 00 00 00 00	 call	 __ftol2_sse

; 4533 : 					iMAX_HP = (int)gObj[iNPC_INDEX].MaxLife;

  00142	d9 83 dc 00 00
	00		 fld	 DWORD PTR [ebx+220]
  00148	8b f8		 mov	 edi, eax
  0014a	e8 00 00 00 00	 call	 __ftol2_sse

; 4534 : 					btLIVE = TRUE;

  0014f	b1 01		 mov	 cl, 1

; 4535 : 				}
; 4536 : 				else

  00151	eb 0a		 jmp	 SHORT $LN1@SendNpcSta
$LN4@SendNpcSta:

; 4537 : 				{
; 4538 : 					iHP = 0;
; 4539 : 					iMAX_HP = pNpcData.m_iNPC_BASE_MAXHP;
; 4540 : 					btLIVE = FALSE;
; 4541 : 				}
; 4542 : 			}
; 4543 : 			else
; 4544 : 			{
; 4545 : 				iHP = 0;
; 4546 : 				iMAX_HP = pNpcData.m_iNPC_BASE_MAXHP;

  00153	8b 85 30 fa ff
	ff		 mov	 eax, DWORD PTR _$S19$188161[ebp+72]
  00159	33 ff		 xor	 edi, edi

; 4547 : 				btLIVE = FALSE;

  0015b	32 c9		 xor	 cl, cl
$LN1@SendNpcSta:

; 4548 : 			}
; 4549 : 
; 4550 : 			lpMsgSendBody[iNPC_COUNT].iNpcNumber = pNpcData.m_iNPC_NUM;

  0015d	8b 95 f0 f9 ff
	ff		 mov	 edx, DWORD PTR _$S19$188161[ebp+8]

; 4551 : 			lpMsgSendBody[iNPC_COUNT].iNpcIndex = pNpcData.m_iNPC_INDEX;
; 4552 : 			lpMsgSendBody[iNPC_COUNT].iNpcDfLevel = pNpcData.m_iNPC_DF_LEVEL;
; 4553 : 			lpMsgSendBody[iNPC_COUNT].iNpcRgLevel = pNpcData.m_iNPC_RG_LEVEL;
; 4554 : 			lpMsgSendBody[iNPC_COUNT].iNpcHp = iHP;
; 4555 : 			lpMsgSendBody[iNPC_COUNT].iNpcMaxHp = iMAX_HP;
; 4556 : 			lpMsgSendBody[iNPC_COUNT].btNpcX = pNpcData.m_iNPC_SX;
; 4557 : 			lpMsgSendBody[iNPC_COUNT].btNpcY = pNpcData.m_iNPC_SY;
; 4558 : 			lpMsgSendBody[iNPC_COUNT].btNpcLive = btLIVE;
; 4559 : 			iNPC_COUNT++;

  00163	ff 85 68 fa ff
	ff		 inc	 DWORD PTR _iNPC_COUNT$[ebp]
  00169	8b 9d 64 fa ff
	ff		 mov	 ebx, DWORD PTR _it$[ebp]
  0016f	89 56 f8	 mov	 DWORD PTR [esi-8], edx
  00172	8b 95 f4 f9 ff
	ff		 mov	 edx, DWORD PTR _$S19$188161[ebp+12]
  00178	89 56 fc	 mov	 DWORD PTR [esi-4], edx
  0017b	8b 95 04 fa ff
	ff		 mov	 edx, DWORD PTR _$S19$188161[ebp+28]
  00181	89 16		 mov	 DWORD PTR [esi], edx
  00183	8b 95 08 fa ff
	ff		 mov	 edx, DWORD PTR _$S19$188161[ebp+32]
  00189	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0018c	8a 95 18 fa ff
	ff		 mov	 dl, BYTE PTR _$S19$188161[ebp+48]
  00192	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00195	8a 85 14 fa ff
	ff		 mov	 al, BYTE PTR _$S19$188161[ebp+44]
  0019b	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  0019e	8b bd 60 fa ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  001a4	88 46 10	 mov	 BYTE PTR [esi+16], al
  001a7	88 56 11	 mov	 BYTE PTR [esi+17], dl
  001aa	88 4e 12	 mov	 BYTE PTR [esi+18], cl
  001ad	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN5@SendNpcSta:

; 4560 : 		}
; 4561 : 
; 4562 : 		it++;

  001b0	83 c3 74	 add	 ebx, 116		; 00000074H
  001b3	89 9d 64 fa ff
	ff		 mov	 DWORD PTR _it$[ebp], ebx

; 4563 : 	}

  001b9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c0	3b 9f 2c 01 00
	00		 cmp	 ebx, DWORD PTR [edi+300]
  001c6	0f 85 d4 fe ff
	ff		 jne	 $LL8@SendNpcSta
$LN56@SendNpcSta:

; 4507 : 
; 4508 : 	while(it != m_vtNpcData.end())

  001cc	8b b5 68 fa ff
	ff		 mov	 esi, DWORD PTR _iNPC_COUNT$[ebp]
$LN53@SendNpcSta:

; 4564 : 
; 4565 : 	LeaveCriticalSection(&m_critNpcData);

  001d2	8b 85 5c fa ff
	ff		 mov	 eax, DWORD PTR tv385[ebp]
  001d8	50		 push	 eax
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4566 : 
; 4567 : 	lpMsgSend->btResult = TRUE;
; 4568 : 	lpMsgSend->h.set((PBYTE)cNPC_LIST,0xB3,iNPC_COUNT * sizeof(PMSG_NPCDBLIST) + sizeof(PMSG_ANS_NPCDBLIST));

  001df	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  001e6	2b c6		 sub	 eax, esi
  001e8	8d 04 85 0c 00
	00 00		 lea	 eax, DWORD PTR [eax*4+12]

; 4569 : 	lpMsgSend->iCount = iNPC_COUNT;
; 4570 : 
; 4571 : 	DataSend(iIndex,(PBYTE)cNPC_LIST,iNPC_COUNT * sizeof(PMSG_NPCDBLIST) + sizeof(PMSG_ANS_NPCDBLIST));

  001ef	50		 push	 eax
  001f0	8b c8		 mov	 ecx, eax
  001f2	8d 95 6c fa ff
	ff		 lea	 edx, DWORD PTR _cNPC_LIST$[ebp]
  001f8	88 85 6e fa ff
	ff		 mov	 BYTE PTR _cNPC_LIST$[ebp+2], al
  001fe	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00201	52		 push	 edx
  00202	c1 e9 08	 shr	 ecx, 8
  00205	50		 push	 eax
  00206	c6 85 6c fa ff
	ff c2		 mov	 BYTE PTR _cNPC_LIST$[ebp], 194 ; 000000c2H
  0020d	88 8d 6d fa ff
	ff		 mov	 BYTE PTR _cNPC_LIST$[ebp+1], cl
  00213	66 c7 85 6f fa
	ff ff b3 01	 mov	 WORD PTR _cNPC_LIST$[ebp+3], 435 ; 000001b3H
  0021c	89 b5 74 fa ff
	ff		 mov	 DWORD PTR _cNPC_LIST$[ebp+8], esi
  00222	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SendNpcSta:

; 4572 : }

  0022a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0022d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00234	59		 pop	 ecx
  00235	5f		 pop	 edi
  00236	5e		 pop	 esi
  00237	5b		 pop	 ebx
  00238	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00242	8b e5		 mov	 esp, ebp
  00244	5d		 pop	 ebp
  00245	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendNpcStateList@CCastleSiege@@QAEXHH@Z$0:
  00000	8d 8d e8 f9 ff
	ff		 lea	 ecx, DWORD PTR _$S19$188161[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?SendNpcStateList@CCastleSiege@@QAEXHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a e4 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1564]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SendNpcStateList@CCastleSiege@@QAEXHH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SendNpcStateList@CCastleSiege@@QAEXHH@Z ENDP		; CCastleSiege::SendNpcStateList
PUBLIC	?OperateGate@CCastleSiege@@QAEHHHH@Z		; CCastleSiege::OperateGate
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?OperateGate@CCastleSiege@@QAEHHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OperateGate@CCastleSiege@@QAEHHHH@Z$0
__ehfuncinfo$?OperateGate@CCastleSiege@@QAEHHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OperateGate@CCastleSiege@@QAEHHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?OperateGate@CCastleSiege@@QAEHHHH@Z
_TEXT	SEGMENT
_$S20$189369 = -136					; size = 116
tv257 = -20						; size = 4
_bRETVAL$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iObjIndex$ = 8						; size = 4
_iMonsterExistVal$ = 12					; size = 4
_bOpenType$ = 16					; size = 4
?OperateGate@CCastleSiege@@QAEHHHH@Z PROC		; CCastleSiege::OperateGate, COMDAT
; _this$ = ecx

; 5081 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OperateGate@CCastleSiege@@QAEHHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 5082 : 	if(gObjIsConnected(iObjIndex) == FALSE)

  0002a	8b 45 08	 mov	 eax, DWORD PTR _iObjIndex$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00033	83 c4 04	 add	 esp, 4
  00036	85 c0		 test	 eax, eax
  00038	75 14		 jne	 SHORT $LN5@OperateGat

; 5121 : }

  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
$LN5@OperateGat:

; 5083 : 		return false;
; 5084 : 
; 5085 : 	int bRETVAL = FALSE;
; 5086 : 
; 5087 : 	EnterCriticalSection(&m_critNpcData);

  0004e	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00054	50		 push	 eax
  00055	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bRETVAL$[ebp], 0
  0005c	89 45 ec	 mov	 DWORD PTR tv257[ebp], eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5088 : 
; 5089 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  00065	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]

; 5090 : 
; 5091 : 	while(it != m_vtNpcData.end())

  0006b	8b 9f 2c 01 00
	00		 mov	 ebx, DWORD PTR [edi+300]
  00071	3b f3		 cmp	 esi, ebx
  00073	0f 84 af 00 00
	00		 je	 $LN1@OperateGat
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL4@OperateGat:

; 5092 : 	{
; 5093 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00080	56		 push	 esi
  00081	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S20$189369[ebp]
  00087	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 5094 : 
; 5095 : 		if(pNpcData.m_iNPC_NUM == 277
; 5096 : 			&& pNpcData.m_iNPC_OBJINDEX == iObjIndex
; 5097 : 			&& pNpcData.m_bIN_USE == TRUE
; 5098 : 			&& pNpcData.m_iNPC_LIVE == 2)

  0008c	81 7d 80 15 01
	00 00		 cmp	 DWORD PTR _$S20$189369[ebp+8], 277 ; 00000115H
  00093	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009a	75 17		 jne	 SHORT $LN2@OperateGat
  0009c	8b 45 90	 mov	 eax, DWORD PTR _$S20$189369[ebp+24]
  0009f	3b 45 08	 cmp	 eax, DWORD PTR _iObjIndex$[ebp]
  000a2	75 0f		 jne	 SHORT $LN2@OperateGat
  000a4	83 bd 7c ff ff
	ff 01		 cmp	 DWORD PTR _$S20$189369[ebp+4], 1
  000ab	75 06		 jne	 SHORT $LN2@OperateGat
  000ad	83 7d e0 02	 cmp	 DWORD PTR _$S20$189369[ebp+104], 2
  000b1	74 10		 je	 SHORT $LN49@OperateGat
$LN2@OperateGat:

; 5109 : 			}
; 5110 : 
; 5111 : 			break;
; 5112 : 		}
; 5113 : 
; 5114 : 		it++;

  000b3	83 c6 74	 add	 esi, 116		; 00000074H

; 5115 : 	}

  000b6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bd	3b f3		 cmp	 esi, ebx
  000bf	75 bf		 jne	 SHORT $LL4@OperateGat

; 5094 : 
; 5095 : 		if(pNpcData.m_iNPC_NUM == 277
; 5096 : 			&& pNpcData.m_iNPC_OBJINDEX == iObjIndex
; 5097 : 			&& pNpcData.m_bIN_USE == TRUE
; 5098 : 			&& pNpcData.m_iNPC_LIVE == 2)

  000c1	eb 65		 jmp	 SHORT $LN1@OperateGat
$LN49@OperateGat:

; 5099 : 		{
; 5100 : 			int iNPC_INDEX = pNpcData.m_iNPC_OBJINDEX;
; 5101 : 
; 5102 : 			if(gObj[iNPC_INDEX].m_btCsNpcType != FALSE
; 5103 : 				&& iMonsterExistVal == pNpcData.m_iCsNpcExistVal)

  000c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c9	8b f0		 mov	 esi, eax
  000cb	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  000d1	80 bc 0e 50 20
	00 00 00	 cmp	 BYTE PTR [esi+ecx+8272], 0
  000d9	74 4d		 je	 SHORT $LN1@OperateGat
  000db	8b 55 0c	 mov	 edx, DWORD PTR _iMonsterExistVal$[ebp]
  000de	3b 55 e8	 cmp	 edx, DWORD PTR _$S20$189369[ebp+112]
  000e1	75 45		 jne	 SHORT $LN1@OperateGat

; 5104 : 			{
; 5105 : 				SetGateBlockState(pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY,bOpenType);

  000e3	8b 5d 10	 mov	 ebx, DWORD PTR _bOpenType$[ebp]
  000e6	8b 45 a8	 mov	 eax, DWORD PTR _$S20$189369[ebp+48]
  000e9	8b 4d a4	 mov	 ecx, DWORD PTR _$S20$189369[ebp+44]
  000ec	53		 push	 ebx
  000ed	50		 push	 eax
  000ee	51		 push	 ecx
  000ef	8b cf		 mov	 ecx, edi
  000f1	e8 00 00 00 00	 call	 ?SetGateBlockState@CCastleSiege@@QAEXHHH@Z ; CCastleSiege::SetGateBlockState

; 5106 : 				gObjAddBuffEffect(&gObj[iNPC_INDEX],BUFF_GATESTATUS,0,0,0,0,-10);

  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fc	6a f6		 push	 -10			; fffffff6H
  000fe	6a 00		 push	 0
  00100	6a 00		 push	 0
  00102	6a 00		 push	 0
  00104	6a 00		 push	 0
  00106	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00109	6a 0d		 push	 13			; 0000000dH
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 5107 : 				gObj[iNPC_INDEX].m_btCsGateOpen = bOpenType;

  00111	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00117	83 c4 1c	 add	 esp, 28			; 0000001cH
  0011a	88 9c 0e 51 20
	00 00		 mov	 BYTE PTR [esi+ecx+8273], bl

; 5108 : 				bRETVAL = TRUE;

  00121	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bRETVAL$[ebp], 1
$LN1@OperateGat:

; 5116 : 
; 5117 : 	LeaveCriticalSection(&m_critNpcData);

  00128	8b 55 ec	 mov	 edx, DWORD PTR tv257[ebp]
  0012b	52		 push	 edx
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 5118 : 
; 5119 : 
; 5120 : return bRETVAL;

  00132	8b 45 f0	 mov	 eax, DWORD PTR _bRETVAL$[ebp]

; 5121 : }

  00135	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OperateGate@CCastleSiege@@QAEHHHH@Z$0:
  00000	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S20$189369[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?OperateGate@CCastleSiege@@QAEHHHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OperateGate@CCastleSiege@@QAEHHHH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OperateGate@CCastleSiege@@QAEHHHH@Z ENDP		; CCastleSiege::OperateGate
PUBLIC	?CreateDbNPC_INS@CCastleSiege@@QAEXXZ		; CCastleSiege::CreateDbNPC_INS
; Function compile flags: /Ogtp
;	COMDAT ?CreateDbNPC_INS@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_$S21$189787 = -116					; size = 116
?CreateDbNPC_INS@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::CreateDbNPC_INS, COMDAT
; _this$ = ecx

; 5711 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 5712 : 	ClearDbNPC();

  0000a	e8 00 00 00 00	 call	 ?ClearDbNPC@CCastleSiege@@QAEXXZ ; CCastleSiege::ClearDbNPC

; 5713 : 
; 5714 : 	EnterCriticalSection(&m_critNpcData);

  0000f	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5715 : 
; 5716 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  0001c	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]

; 5717 : 
; 5718 : 	while( it != m_vtNpcData.end() )

  00022	3b b7 2c 01 00
	00		 cmp	 esi, DWORD PTR [edi+300]
  00028	74 65		 je	 SHORT $LN2@CreateDbNP@2
  0002a	53		 push	 ebx
  0002b	bb 01 00 00 00	 mov	 ebx, 1
$LL3@CreateDbNP@2:

; 5719 : 	{
; 5720 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00030	56		 push	 esi
  00031	8d 4d 8c	 lea	 ecx, DWORD PTR _$S21$189787[ebp]
  00034	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 5721 : 
; 5722 : 		if(pNpcData.m_bNPC_DBSAVE == TRUE)

  00039	39 5d 9c	 cmp	 DWORD PTR _$S21$189787[ebp+16], ebx
  0003c	75 45		 jne	 SHORT $LN1@CreateDbNP@2

; 5723 : 		{
; 5724 : 			it->SetBaseValue();

  0003e	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00041	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00044	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00047	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0004a	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0004d	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00050	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00053	89 56 24	 mov	 DWORD PTR [esi+36], edx
  00056	8b 56 54	 mov	 edx, DWORD PTR [esi+84]
  00059	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0005c	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0005f	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
  00062	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00065	89 56 30	 mov	 DWORD PTR [esi+48], edx
  00068	8b 56 60	 mov	 edx, DWORD PTR [esi+96]
  0006b	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 5725 : 			it->m_iNPC_LIVE = TRUE;
; 5726 : 			it->m_iNPC_SIDE = 1;
; 5727 : 			it->m_iNPC_OBJINDEX = -1;

  0006e	83 c8 ff	 or	 eax, -1
  00071	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00074	89 56 3c	 mov	 DWORD PTR [esi+60], edx
  00077	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
  0007a	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0007d	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 5728 : 			it->m_iCS_GATE_LEVER_INDEX = -1;

  00080	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN1@CreateDbNP@2:

; 5729 : 		}
; 5730 : 
; 5731 : 		it++;

  00083	83 c6 74	 add	 esi, 116		; 00000074H
  00086	3b b7 2c 01 00
	00		 cmp	 esi, DWORD PTR [edi+300]
  0008c	75 a2		 jne	 SHORT $LL3@CreateDbNP@2
  0008e	5b		 pop	 ebx
$LN2@CreateDbNP@2:

; 5732 : 	}
; 5733 : 
; 5734 : 	LeaveCriticalSection(&m_critNpcData);

  0008f	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00095	50		 push	 eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 5735 : 
; 5736 : 	m_bDbNpcCreated = FALSE;

  0009c	c7 87 50 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+336], 0
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi

; 5737 : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
?CreateDbNPC_INS@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::CreateDbNPC_INS
_TEXT	ENDS
PUBLIC	??_C@_0GC@MCEKCBBC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Firs@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?FirstCreateDbNPC@CCastleSiege@@QAEHXZ		; CCastleSiege::FirstCreateDbNPC
;	COMDAT ??_C@_0GC@MCEKCBBC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Firs@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\include\prodef.h
CONST	SEGMENT
??_C@_0GC@MCEKCBBC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Firs@ DB '[Castle'
	DB	'Siege] CCastleSiege::FirstCreateDbNPC() - m_iCastleDataLoadSt'
	DB	'ate != CASTLESIEGE_DATALOAD_4', 00H		; `string'
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
CONST	ENDS
;	COMDAT ?FirstCreateDbNPC@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
_$S22$189906 = -4364					; size = 116
_this$GSCopy$ = -4248					; size = 4
_cBUFFER$ = -4244					; size = 4240
__$ArrayPad$ = -4					; size = 4
?FirstCreateDbNPC@CCastleSiege@@QAEHXZ PROC		; CCastleSiege::FirstCreateDbNPC, COMDAT
; _this$ = ecx

; 5893 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 0c 11 00 00	 mov	 eax, 4364		; 0000110cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 5894 : 	if(m_iCastleDataLoadState != 4)

  0001a	83 7f 1c 04	 cmp	 DWORD PTR [edi+28], 4

; 5935 : 	}
; 5936 : 
; 5937 : 	LeaveCriticalSection(&m_critNpcData);

  0001e	89 bd 68 ef ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00024	74 21		 je	 SHORT $LN4@FirstCreat

; 5895 : 	{
; 5896 : 		LogAddC(2,"[CastleSiege] CCastleSiege::FirstCreateDbNPC() - m_iCastleDataLoadState != CASTLESIEGE_DATALOAD_4");

  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@MCEKCBBC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Firs@
  0002b	6a 02		 push	 2
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00033	83 c4 08	 add	 esp, 8

; 5897 : 		return false;

  00036	33 c0		 xor	 eax, eax
  00038	5f		 pop	 edi

; 5944 : 
; 5945 : 	return true;
; 5946 : }

  00039	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003c	33 cd		 xor	 ecx, ebp
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN4@FirstCreat:
  00047	53		 push	 ebx
  00048	56		 push	 esi

; 5906 : 
; 5907 : 	EnterCriticalSection(&m_critNpcData);

  00049	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  0004f	50		 push	 eax
  00050	33 db		 xor	 ebx, ebx
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5908 : 
; 5909 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  00058	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]

; 5910 : 
; 5911 : 	int bExist = FALSE;
; 5912 : 
; 5913 : 	while( it != m_vtNpcData.end() )

  0005e	3b b7 2c 01 00
	00		 cmp	 esi, DWORD PTR [edi+300]
  00064	0f 84 cd 00 00
	00		 je	 $LN2@FirstCreat

; 5898 : 	}
; 5899 : 
; 5900 : 	char cBUFFER[0x1090];
; 5901 : 
; 5902 : 	CSP_REQ_NPCSAVEDATA * lpMsg = (CSP_REQ_NPCSAVEDATA *)cBUFFER;
; 5903 : 	CSP_NPCSAVEDATA * lpMsgBody = (CSP_NPCSAVEDATA *)&cBUFFER[sizeof(CSP_REQ_NPCSAVEDATA)];
; 5904 : 
; 5905 : 	int iCOUNT = NULL;

  0006a	8d bd 80 ef ff
	ff		 lea	 edi, DWORD PTR _cBUFFER$[ebp+20]
$LL3@FirstCreat:

; 5914 : 	{
; 5915 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00070	56		 push	 esi
  00071	8d 8d f4 ee ff
	ff		 lea	 ecx, DWORD PTR _$S22$189906[ebp]
  00077	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 5916 : 
; 5917 : 		if(pNpcData.m_bNPC_DBSAVE == TRUE)

  0007c	b8 01 00 00 00	 mov	 eax, 1
  00081	39 85 04 ef ff
	ff		 cmp	 DWORD PTR _$S22$189906[ebp+16], eax
  00087	0f 85 93 00 00
	00		 jne	 $LN1@FirstCreat

; 5918 : 		{
; 5919 : 			it->SetBaseValue();

  0008d	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00090	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00093	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx
  00096	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00099	89 56 20	 mov	 DWORD PTR [esi+32], edx
  0009c	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  0009f	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  000a2	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  000a5	89 56 28	 mov	 DWORD PTR [esi+40], edx
  000a8	8b 56 54	 mov	 edx, DWORD PTR [esi+84]
  000ab	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
  000ae	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000b1	89 56 30	 mov	 DWORD PTR [esi+48], edx
  000b4	8b 56 5c	 mov	 edx, DWORD PTR [esi+92]
  000b7	89 4e 34	 mov	 DWORD PTR [esi+52], ecx
  000ba	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  000bd	89 56 38	 mov	 DWORD PTR [esi+56], edx

; 5920 : 			it->m_iNPC_LIVE = TRUE;
; 5921 : 			it->m_iNPC_SIDE = 1;
; 5922 : 
; 5923 : 			lpMsgBody[iCOUNT].iNpcNumber = pNpcData.m_iNPC_NUM;

  000c0	8b 95 fc ee ff
	ff		 mov	 edx, DWORD PTR _$S22$189906[ebp+8]
  000c6	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx

; 5924 : 			lpMsgBody[iCOUNT].iNpcIndex = pNpcData.m_iNPC_INDEX;

  000c9	8b 8d 00 ef ff
	ff		 mov	 ecx, DWORD PTR _$S22$189906[ebp+12]
  000cf	89 46 68	 mov	 DWORD PTR [esi+104], eax
  000d2	89 46 14	 mov	 DWORD PTR [esi+20], eax
  000d5	89 57 f8	 mov	 DWORD PTR [edi-8], edx

; 5925 : 			lpMsgBody[iCOUNT].iNpcDfLevel = pNpcData.m_iNPC_BASE_DF_LEVEL;

  000d8	8b 95 34 ef ff
	ff		 mov	 edx, DWORD PTR _$S22$189906[ebp+64]
  000de	89 17		 mov	 DWORD PTR [edi], edx

; 5926 : 			lpMsgBody[iCOUNT].iNpcRgLevel = pNpcData.m_iNPC_BASE_RG_LEVEL;
; 5927 : 			lpMsgBody[iCOUNT].iNpcMaxHp = pNpcData.m_iNPC_BASE_MAXHP;

  000e0	8b 95 3c ef ff
	ff		 mov	 edx, DWORD PTR _$S22$189906[ebp+72]
  000e6	89 4f fc	 mov	 DWORD PTR [edi-4], ecx
  000e9	8b 8d 38 ef ff
	ff		 mov	 ecx, DWORD PTR _$S22$189906[ebp+68]
  000ef	89 57 08	 mov	 DWORD PTR [edi+8], edx

; 5928 : 			lpMsgBody[iCOUNT].iNpcHp = pNpcData.m_iNPC_BASE_HP;
; 5929 : 			lpMsgBody[iCOUNT].btNpcX = pNpcData.m_iNPC_BASE_SX;

  000f2	0f b6 95 44 ef
	ff ff		 movzx	 edx, BYTE PTR _$S22$189906[ebp+80]
  000f9	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  000fc	8b 8d 40 ef ff
	ff		 mov	 ecx, DWORD PTR _$S22$189906[ebp+76]
  00102	88 57 10	 mov	 BYTE PTR [edi+16], dl

; 5930 : 			lpMsgBody[iCOUNT].btNpcY = pNpcData.m_iNPC_BASE_SY;
; 5931 : 			lpMsgBody[iCOUNT].btNpcDIR = pNpcData.m_iNPC_BASE_DIR;

  00105	0f b6 95 54 ef
	ff ff		 movzx	 edx, BYTE PTR _$S22$189906[ebp+96]
  0010c	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  0010f	8a 8d 48 ef ff
	ff		 mov	 cl, BYTE PTR _$S22$189906[ebp+84]
  00115	88 4f 11	 mov	 BYTE PTR [edi+17], cl
  00118	88 57 12	 mov	 BYTE PTR [edi+18], dl

; 5932 : 			iCOUNT++;

  0011b	03 d8		 add	 ebx, eax
  0011d	83 c7 1c	 add	 edi, 28			; 0000001cH
$LN1@FirstCreat:

; 5933 : 		}
; 5934 : 		it++;

  00120	8b 85 68 ef ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00126	83 c6 74	 add	 esi, 116		; 00000074H
  00129	3b b0 2c 01 00
	00		 cmp	 esi, DWORD PTR [eax+300]
  0012f	0f 85 3b ff ff
	ff		 jne	 $LL3@FirstCreat

; 5910 : 
; 5911 : 	int bExist = FALSE;
; 5912 : 
; 5913 : 	while( it != m_vtNpcData.end() )

  00135	8b f8		 mov	 edi, eax
$LN2@FirstCreat:

; 5935 : 	}
; 5936 : 
; 5937 : 	LeaveCriticalSection(&m_critNpcData);

  00137	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  0013d	50		 push	 eax
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 5938 : 
; 5939 : 	lpMsg->wMapSvrNum = m_iMapSvrGroup;

  00144	66 8b 4f 18	 mov	 cx, WORD PTR [edi+24]

; 5940 : 	lpMsg->iCount = iCOUNT;
; 5941 : 
; 5942 : 	lpMsg->h.set((PBYTE)lpMsg,0x84,sizeof(CSP_REQ_NPCSAVEDATA) + sizeof(CSP_NPCSAVEDATA) * iCOUNT);

  00148	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
  0014f	2b c3		 sub	 eax, ebx
  00151	8d 04 85 0c 00
	00 00		 lea	 eax, DWORD PTR [eax*4+12]
  00158	8b d0		 mov	 edx, eax

; 5943 : 	cDBSMng.Send((char *)lpMsg,sizeof(CSP_REQ_NPCSAVEDATA) + sizeof(CSP_NPCSAVEDATA) * iCOUNT);

  0015a	50		 push	 eax
  0015b	88 85 6e ef ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+2], al
  00161	8d 85 6c ef ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  00167	66 89 8d 70 ef
	ff ff		 mov	 WORD PTR _cBUFFER$[ebp+4], cx
  0016e	c1 ea 08	 shr	 edx, 8
  00171	50		 push	 eax
  00172	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00177	89 9d 74 ef ff
	ff		 mov	 DWORD PTR _cBUFFER$[ebp+8], ebx
  0017d	c6 85 6c ef ff
	ff c2		 mov	 BYTE PTR _cBUFFER$[ebp], 194 ; 000000c2H
  00184	88 95 6d ef ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+1], dl
  0018a	c6 85 6f ef ff
	ff 84		 mov	 BYTE PTR _cBUFFER$[ebp+3], 132 ; 00000084H
  00191	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 5944 : 
; 5945 : 	return true;
; 5946 : }

  00196	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00199	5e		 pop	 esi
  0019a	5b		 pop	 ebx
  0019b	33 cd		 xor	 ecx, ebp
  0019d	b8 01 00 00 00	 mov	 eax, 1
  001a2	5f		 pop	 edi
  001a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c3		 ret	 0
?FirstCreateDbNPC@CCastleSiege@@QAEHXZ ENDP		; CCastleSiege::FirstCreateDbNPC
_TEXT	ENDS
PUBLIC	?GetStateDateTime@CCastleSiege@@QAEXHPAU_SYSTEMTIME@@@Z ; CCastleSiege::GetStateDateTime
; Function compile flags: /Ogtp
;	COMDAT ?GetStateDateTime@CCastleSiege@@QAEXHPAU_SYSTEMTIME@@@Z
_TEXT	SEGMENT
_iState$ = 8						; size = 4
_tm$ = 12						; size = 4
?GetStateDateTime@CCastleSiege@@QAEXHPAU_SYSTEMTIME@@@Z PROC ; CCastleSiege::GetStateDateTime, COMDAT
; _this$ = ecx

; 5949 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 5950 : 	EnterCriticalSection(&m_critScheduleData);

  00007	8d be 10 01 00
	00		 lea	 edi, DWORD PTR [esi+272]
  0000d	57		 push	 edi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5951 : 
; 5952 : 	vector<_CS_SCHEDULE_DATA>::iterator it;
; 5953 : 	for(it = m_vtScheduleData.begin();it != m_vtScheduleData.end();it++)

  00014	8b 86 00 01 00
	00		 mov	 eax, DWORD PTR [esi+256]
  0001a	8b b6 04 01 00
	00		 mov	 esi, DWORD PTR [esi+260]
  00020	3b c6		 cmp	 eax, esi
  00022	74 3d		 je	 SHORT $LN2@GetStateDa
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _iState$[ebp]
$LL23@GetStateDa:

; 5954 : 	{
; 5955 : 		_CS_SCHEDULE_DATA & pScheduleData = *it;
; 5956 : 
; 5957 : 		if(pScheduleData.m_iSTATE == iState)

  00027	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  0002a	74 14		 je	 SHORT $LN47@GetStateDa

; 5951 : 
; 5952 : 	vector<_CS_SCHEDULE_DATA>::iterator it;
; 5953 : 	for(it = m_vtScheduleData.begin();it != m_vtScheduleData.end();it++)

  0002c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0002f	3b c6		 cmp	 eax, esi
  00031	75 f4		 jne	 SHORT $LL23@GetStateDa

; 5963 : 			break;
; 5964 : 		}
; 5965 : 	}
; 5966 : 
; 5967 : 	LeaveCriticalSection(&m_critScheduleData);

  00033	57		 push	 edi
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 5968 : }

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
$LN47@GetStateDa:

; 5958 : 		{
; 5959 : 			tm->wDay = pScheduleData.m_iADD_DAY;

  00040	0f b7 50 0c	 movzx	 edx, WORD PTR [eax+12]
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _tm$[ebp]
  00047	66 89 51 06	 mov	 WORD PTR [ecx+6], dx

; 5960 : 			tm->wHour = pScheduleData.m_iADD_HOUR;

  0004b	0f b7 50 10	 movzx	 edx, WORD PTR [eax+16]
  0004f	66 89 51 08	 mov	 WORD PTR [ecx+8], dx

; 5961 : 			tm->wMinute = pScheduleData.m_iADD_MIN;

  00053	66 8b 40 14	 mov	 ax, WORD PTR [eax+20]

; 5962 : 			tm->wSecond = NULL;

  00057	33 d2		 xor	 edx, edx
  00059	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax
  0005d	66 89 51 0c	 mov	 WORD PTR [ecx+12], dx
$LN2@GetStateDa:

; 5963 : 			break;
; 5964 : 		}
; 5965 : 	}
; 5966 : 
; 5967 : 	LeaveCriticalSection(&m_critScheduleData);

  00061	57		 push	 edi
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi

; 5968 : }

  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?GetStateDateTime@CCastleSiege@@QAEXHPAU_SYSTEMTIME@@@Z ENDP ; CCastleSiege::GetStateDateTime
_TEXT	ENDS
PUBLIC	??_C@_0EO@FOJGKABN@?$FLCastleSiege?$FN?$FLCreateDBNPC?$FN?5?$CIInde@ ; `string'
PUBLIC	??_C@_0HA@GIMKBFJD@?$FLCastleSiege?$FN?5CCastleSiege?3?3AddD@ ; `string'
PUBLIC	?AddDbNPC@CCastleSiege@@QAEHHH@Z		; CCastleSiege::AddDbNPC
;	COMDAT ??_C@_0EO@FOJGKABN@?$FLCastleSiege?$FN?$FLCreateDBNPC?$FN?5?$CIInde@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
CONST	SEGMENT
??_C@_0EO@FOJGKABN@?$FLCastleSiege?$FN?$FLCreateDBNPC?$FN?5?$CIInde@ DB '['
	DB	'CastleSiege][CreateDBNPC] (Index:%d, Num:%d, DF:%d, RG:%d, Ma'
	DB	'xHP:%d, HP:%d )', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HA@GIMKBFJD@?$FLCastleSiege?$FN?5CCastleSiege?3?3AddD@
CONST	SEGMENT
??_C@_0HA@GIMKBFJD@?$FLCastleSiege?$FN?5CCastleSiege?3?3AddD@ DB '[Castle'
	DB	'Siege] CCastleSiege::AddDbNPC() ERROR - DB NPC EXIST (CLS:%d,'
	DB	' IDX:%d(%d), MAXHP:%d, HP:%d, DF:%d, RG:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddDbNPC@CCastleSiege@@QAEHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddDbNPC@CCastleSiege@@QAEHHH@Z$0
__ehfuncinfo$?AddDbNPC@CCastleSiege@@QAEHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddDbNPC@CCastleSiege@@QAEHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?AddDbNPC@CCastleSiege@@QAEHHH@Z
_TEXT	SEGMENT
_$S23$189951 = -140					; size = 116
tv704 = -24						; size = 4
_iRETVAL$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iNPC_RG_LEVEL$189962 = 8				; size = 4
_iNpcType$ = 8						; size = 4
_iNpcIndex$ = 12					; size = 4
?AddDbNPC@CCastleSiege@@QAEHHH@Z PROC			; CCastleSiege::AddDbNPC, COMDAT
; _this$ = ecx

; 5971 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddDbNPC@CCastleSiege@@QAEHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx

; 5972 : 	int iRETVAL = FALSE;
; 5973 : 
; 5974 : 	EnterCriticalSection(&m_critNpcData);

  00030	8d 83 38 01 00
	00		 lea	 eax, DWORD PTR [ebx+312]
  00036	50		 push	 eax
  00037	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iRETVAL$[ebp], 0
  0003e	89 45 e8	 mov	 DWORD PTR tv704[ebp], eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5975 : 
; 5976 : 	vector<_CS_NPC_DATA>::iterator it = m_vtNpcData.begin();

  00047	8b bb 28 01 00
	00		 mov	 edi, DWORD PTR [ebx+296]

; 5977 : 
; 5978 : 	while(it != m_vtNpcData.end())

  0004d	3b bb 2c 01 00
	00		 cmp	 edi, DWORD PTR [ebx+300]
  00053	0f 84 42 04 00
	00		 je	 $LN2@AddDbNPC
$LN25@AddDbNPC:

; 5979 : 	{
; 5980 : 		_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  00059	57		 push	 edi
  0005a	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S23$189951[ebp]
  00060	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 5981 : 
; 5982 : 		if(pNpcData.m_iNPC_NUM == iNpcType
; 5983 : 			&& pNpcData.m_iNPC_INDEX == iNpcIndex)

  00065	8b b5 7c ff ff
	ff		 mov	 esi, DWORD PTR _$S23$189951[ebp+8]
  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00072	3b 75 08	 cmp	 esi, DWORD PTR _iNpcType$[ebp]
  00075	75 5e		 jne	 SHORT $LN21@AddDbNPC
  00077	8b 45 0c	 mov	 eax, DWORD PTR _iNpcIndex$[ebp]
  0007a	39 45 80	 cmp	 DWORD PTR _$S23$189951[ebp+12], eax
  0007d	75 56		 jne	 SHORT $LN21@AddDbNPC

; 5984 : 		{
; 5985 : 			if(gObjIsConnected(pNpcData.m_iNPC_OBJINDEX)
; 5986 : 				&& gObj[pNpcData.m_iNPC_OBJINDEX].Class == iNpcType
; 5987 : 				&& gObj[pNpcData.m_iNPC_OBJINDEX].Live == TRUE
; 5988 : 				&& gObj[pNpcData.m_iNPC_OBJINDEX].m_iCsNpcExistVal == pNpcData.m_iCsNpcExistVal
; 5989 : 				&& gObj[pNpcData.m_iNPC_OBJINDEX].m_iCsNpcExistVal != FALSE)

  0007f	8b 5d 8c	 mov	 ebx, DWORD PTR _$S23$189951[ebp+24]
  00082	53		 push	 ebx
  00083	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00088	83 c4 04	 add	 esp, 4
  0008b	85 c0		 test	 eax, eax
  0008d	74 32		 je	 SHORT $LN22@AddDbNPC
  0008f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00095	8b c3		 mov	 eax, ebx
  00097	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  0009d	0f b7 8c 10 90
	00 00 00	 movzx	 ecx, WORD PTR [eax+edx+144]
  000a5	3b 4d 08	 cmp	 ecx, DWORD PTR _iNpcType$[ebp]
  000a8	75 17		 jne	 SHORT $LN22@AddDbNPC
  000aa	80 7c 10 51 01	 cmp	 BYTE PTR [eax+edx+81], 1
  000af	75 10		 jne	 SHORT $LN22@AddDbNPC
  000b1	8b 84 10 4c 20
	00 00		 mov	 eax, DWORD PTR [eax+edx+8268]
  000b8	3b 45 e4	 cmp	 eax, DWORD PTR _$S23$189951[ebp+112]
  000bb	75 04		 jne	 SHORT $LN22@AddDbNPC
  000bd	85 c0		 test	 eax, eax
  000bf	75 2f		 jne	 SHORT $LN190@AddDbNPC
$LN22@AddDbNPC:

; 5995 : 			}
; 5996 : 
; 5997 : 			int iNPC_INDEX = gObjAddMonster(MAP_INDEX_CASTLESIEGE);

  000c1	6a 1e		 push	 30			; 0000001eH
  000c3	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  000c8	0f bf d8	 movsx	 ebx, ax
  000cb	83 c4 04	 add	 esp, 4

; 5998 : 
; 5999 : 			if(iNPC_INDEX >= 0)

  000ce	85 db		 test	 ebx, ebx
  000d0	79 6e		 jns	 SHORT $LN191@AddDbNPC
  000d2	8b 5d f0	 mov	 ebx, DWORD PTR _this$[ebp]
$LN21@AddDbNPC:

; 6130 : 				}
; 6131 : 
; 6132 : 				break;
; 6133 : 			}
; 6134 : 		}
; 6135 : 
; 6136 : 		it++;

  000d5	83 c7 74	 add	 edi, 116		; 00000074H

; 6137 : 	}

  000d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000df	3b bb 2c 01 00
	00		 cmp	 edi, DWORD PTR [ebx+300]
  000e5	0f 85 6e ff ff
	ff		 jne	 $LN25@AddDbNPC

; 5998 : 
; 5999 : 			if(iNPC_INDEX >= 0)

  000eb	e9 ab 03 00 00	 jmp	 $LN2@AddDbNPC
$LN190@AddDbNPC:

; 5990 : 			{
; 5991 : 				LogAddTD("[CastleSiege] CCastleSiege::AddDbNPC() ERROR - DB NPC EXIST (CLS:%d, IDX:%d(%d), MAXHP:%d, HP:%d, DF:%d, RG:%d)",
; 5992 : 					pNpcData.m_iNPC_NUM, pNpcData.m_iNPC_INDEX, pNpcData.m_iNPC_OBJINDEX, gObj[pNpcData.m_iNPC_OBJINDEX].MaxLife, 
; 5993 : 					gObj[pNpcData.m_iNPC_OBJINDEX].Life, gObj[pNpcData.m_iNPC_OBJINDEX].m_btCsNpcDfLevel, gObj[pNpcData.m_iNPC_OBJINDEX].m_btCsNpcRgLevel);

  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f5	8b d3		 mov	 edx, ebx
  000f7	69 d2 40 27 00
	00		 imul	 edx, 10048		; 00002740H
  000fd	d9 84 10 d8 00
	00 00		 fld	 DWORD PTR [eax+edx+216]
  00104	0f b6 8c 10 59
	20 00 00	 movzx	 ecx, BYTE PTR [eax+edx+8281]
  0010c	03 c2		 add	 eax, edx
  0010e	0f b6 90 58 20
	00 00		 movzx	 edx, BYTE PTR [eax+8280]
  00115	51		 push	 ecx
  00116	52		 push	 edx
  00117	83 ec 10	 sub	 esp, 16			; 00000010H
  0011a	dd 5c 24 08	 fstp	 QWORD PTR [esp+8]
  0011e	d9 80 dc 00 00
	00		 fld	 DWORD PTR [eax+220]
  00124	8b 45 80	 mov	 eax, DWORD PTR _$S23$189951[ebp+12]
  00127	dd 1c 24	 fstp	 QWORD PTR [esp]
  0012a	53		 push	 ebx
  0012b	50		 push	 eax
  0012c	56		 push	 esi
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_0HA@GIMKBFJD@?$FLCastleSiege?$FN?5CCastleSiege?3?3AddD@
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00138	83 c4 28	 add	 esp, 40			; 00000028H

; 5994 : 				break;

  0013b	e9 5b 03 00 00	 jmp	 $LN2@AddDbNPC
$LN191@AddDbNPC:

; 6000 : 			{
; 6001 : 				gObjSetMonster(iNPC_INDEX,pNpcData.m_iNPC_NUM);

  00140	56		 push	 esi
  00141	53		 push	 ebx
  00142	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 6002 : 				gObj[iNPC_INDEX].m_PosNum = -1;
; 6003 : 				gObj[iNPC_INDEX].X = pNpcData.m_iNPC_SX;
; 6004 : 				gObj[iNPC_INDEX].Y = pNpcData.m_iNPC_SY;
; 6005 : 				gObj[iNPC_INDEX].MapNumber = MAP_INDEX_CASTLESIEGE;
; 6006 : 				gObj[iNPC_INDEX].TX = gObj[iNPC_INDEX].X;
; 6007 : 				gObj[iNPC_INDEX].TY = gObj[iNPC_INDEX].Y;
; 6008 : 				gObj[iNPC_INDEX].m_OldX = gObj[iNPC_INDEX].X;
; 6009 : 				gObj[iNPC_INDEX].m_OldY = gObj[iNPC_INDEX].Y;
; 6010 : 				gObj[iNPC_INDEX].Dir = pNpcData.m_iNPC_DIR;
; 6011 : 				gObj[iNPC_INDEX].StartX = gObj[iNPC_INDEX].X;
; 6012 : 				gObj[iNPC_INDEX].StartY = gObj[iNPC_INDEX].Y;
; 6013 : 				gObj[iNPC_INDEX].DieRegen = 0;
; 6014 : 				gObj[iNPC_INDEX].MaxRegenTime = 0;
; 6015 : 				gObj[iNPC_INDEX].Life = (float)pNpcData.m_iNPC_HP;

  00147	db 45 9c	 fild	 DWORD PTR _$S23$189951[ebp+40]
  0014a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00150	8b f3		 mov	 esi, ebx
  00152	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  00158	83 c9 ff	 or	 ecx, -1
  0015b	66 89 8c 16 98
	05 00 00	 mov	 WORD PTR [esi+edx+1432], cx
  00163	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00168	0f b6 4d a0	 movzx	 ecx, BYTE PTR _$S23$189951[ebp+44]
  0016c	88 8c 06 20 01
	00 00		 mov	 BYTE PTR [esi+eax+288], cl
  00173	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00179	0f b6 45 a4	 movzx	 eax, BYTE PTR _$S23$189951[ebp+48]
  0017d	88 84 16 21 01
	00 00		 mov	 BYTE PTR [esi+edx+289], al
  00184	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018a	c6 84 0e 23 01
	00 00 1e	 mov	 BYTE PTR [esi+ecx+291], 30 ; 0000001eH
  00192	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00197	0f b6 94 06 20
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+288]
  0019f	88 94 06 52 01
	00 00		 mov	 BYTE PTR [esi+eax+338], dl
  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ab	0f b6 8c 06 21
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+289]
  001b3	88 8c 06 53 01
	00 00		 mov	 BYTE PTR [esi+eax+339], cl
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001bf	0f b6 94 06 20
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+288]
  001c7	88 94 06 50 01
	00 00		 mov	 BYTE PTR [esi+eax+336], dl
  001ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d3	0f b6 8c 06 21
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+289]
  001db	88 8c 06 51 01
	00 00		 mov	 BYTE PTR [esi+eax+337], cl
  001e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e8	0f b6 45 b0	 movzx	 eax, BYTE PTR _$S23$189951[ebp+60]
  001ec	88 84 16 22 01
	00 00		 mov	 BYTE PTR [esi+edx+290], al
  001f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001f8	0f b6 8c 06 20
	01 00 00	 movzx	 ecx, BYTE PTR [esi+eax+288]
  00200	88 8c 06 4e 01
	00 00		 mov	 BYTE PTR [esi+eax+334], cl
  00207	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0020c	0f b6 94 06 21
	01 00 00	 movzx	 edx, BYTE PTR [esi+eax+289]
  00214	88 94 06 4f 01
	00 00		 mov	 BYTE PTR [esi+eax+335], dl
  0021b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00220	c6 84 06 8a 05
	00 00 00	 mov	 BYTE PTR [esi+eax+1418], 0
  00228	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0022e	33 d2		 xor	 edx, edx
  00230	89 94 0e 94 05
	00 00		 mov	 DWORD PTR [esi+ecx+1428], edx
  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0023c	83 c4 08	 add	 esp, 8
  0023f	d9 9c 06 d8 00
	00 00		 fstp	 DWORD PTR [esi+eax+216]

; 6016 : 				gObj[iNPC_INDEX].MaxLife = (float)pNpcData.m_iNPC_MAXHP;

  00246	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0024c	db 45 98	 fild	 DWORD PTR _$S23$189951[ebp+36]
  0024f	d9 9c 0e dc 00
	00 00		 fstp	 DWORD PTR [esi+ecx+220]

; 6017 : 				gObj[iNPC_INDEX].m_btCsNpcType = 1;

  00256	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0025b	c6 84 06 50 20
	00 00 01	 mov	 BYTE PTR [esi+eax+8272], 1

; 6018 : 
; 6019 : 				int iNPC_DF_LEVEL = pNpcData.m_iNPC_BASE_DF_LEVEL;

  00263	8b 45 b4	 mov	 eax, DWORD PTR _$S23$189951[ebp+64]

; 6020 : 
; 6021 : 				if(iNPC_DF_LEVEL < 0)

  00266	3b c2		 cmp	 eax, edx
  00268	7d 04		 jge	 SHORT $LN20@AddDbNPC

; 6022 : 				{
; 6023 : 					iNPC_DF_LEVEL = 0;

  0026a	33 c0		 xor	 eax, eax

; 6024 : 				}
; 6025 : 
; 6026 : 				if(iNPC_DF_LEVEL > CS_MAX_UPGRADE)

  0026c	eb 0a		 jmp	 SHORT $LN19@AddDbNPC
$LN20@AddDbNPC:
  0026e	83 f8 03	 cmp	 eax, 3
  00271	7e 05		 jle	 SHORT $LN19@AddDbNPC

; 6027 : 				{
; 6028 : 					iNPC_DF_LEVEL = CS_MAX_UPGRADE;

  00273	b8 03 00 00 00	 mov	 eax, 3
$LN19@AddDbNPC:

; 6029 : 				}
; 6030 : 
; 6031 : 				int iNPC_RG_LEVEL = pNpcData.m_iNPC_BASE_RG_LEVEL;

  00278	8b 4d b8	 mov	 ecx, DWORD PTR _$S23$189951[ebp+68]
  0027b	89 4d 08	 mov	 DWORD PTR _iNPC_RG_LEVEL$189962[ebp], ecx

; 6032 : 
; 6033 : 				if(iNPC_RG_LEVEL < 0)

  0027e	3b ca		 cmp	 ecx, edx
  00280	7d 05		 jge	 SHORT $LN18@AddDbNPC

; 6034 : 				{
; 6035 : 					iNPC_RG_LEVEL = 0;

  00282	89 55 08	 mov	 DWORD PTR _iNPC_RG_LEVEL$189962[ebp], edx

; 6036 : 				}
; 6037 : 
; 6038 : 				if(iNPC_RG_LEVEL > CS_MAX_UPGRADE)

  00285	eb 0c		 jmp	 SHORT $LN17@AddDbNPC
$LN18@AddDbNPC:
  00287	83 f9 03	 cmp	 ecx, 3
  0028a	7e 07		 jle	 SHORT $LN17@AddDbNPC

; 6039 : 				{
; 6040 : 					iNPC_RG_LEVEL = CS_MAX_UPGRADE;

  0028c	c7 45 08 03 00
	00 00		 mov	 DWORD PTR _iNPC_RG_LEVEL$189962[ebp], 3
$LN17@AddDbNPC:

; 6041 : 				}
; 6042 : 
; 6043 : 				switch(pNpcData.m_iNPC_NUM)

  00293	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _$S23$189951[ebp+8]
  00299	81 e9 15 01 00
	00		 sub	 ecx, 277		; 00000115H
  0029f	74 38		 je	 SHORT $LN14@AddDbNPC
  002a1	83 e9 06	 sub	 ecx, 6
  002a4	75 54		 jne	 SHORT $LN68@AddDbNPC

; 6048 : 					break;
; 6049 : 				case 283:
; 6050 : 					gObj[iNPC_INDEX].m_Defense = g_iNpcDefense_CSTATUE[iNPC_DF_LEVEL];

  002a6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcDefense_CSTATUE@@3PAHA[eax*4]
  002ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002b3	89 8c 16 74 06
	00 00		 mov	 DWORD PTR [esi+edx+1652], ecx

; 6051 : 					gObj[iNPC_INDEX].m_btCsNpcDfLevel = iNPC_DF_LEVEL;

  002ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002c0	88 84 0e 58 20
	00 00		 mov	 BYTE PTR [esi+ecx+8280], al

; 6052 : 					gObj[iNPC_INDEX].m_btCsNpcRgLevel = iNPC_RG_LEVEL;

  002c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002cd	8a 45 08	 mov	 al, BYTE PTR _iNPC_RG_LEVEL$189962[ebp]
  002d0	88 84 16 59 20
	00 00		 mov	 BYTE PTR [esi+edx+8281], al

; 6053 : 					break;

  002d7	eb 21		 jmp	 SHORT $LN68@AddDbNPC
$LN14@AddDbNPC:

; 6044 : 				{
; 6045 : 				case 277:
; 6046 : 					gObj[iNPC_INDEX].m_Defense = g_iNpcDefense_CGATE[iNPC_DF_LEVEL];

  002d9	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcDefense_CGATE@@3PAHA[eax*4]
  002e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002e6	89 8c 16 74 06
	00 00		 mov	 DWORD PTR [esi+edx+1652], ecx

; 6047 : 					gObj[iNPC_INDEX].m_btCsNpcDfLevel = iNPC_DF_LEVEL;

  002ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002f3	88 84 0e 58 20
	00 00		 mov	 BYTE PTR [esi+ecx+8280], al

; 6054 : 				}
; 6055 : 
; 6056 : 				it->m_btCsNpcExistVal1 = rand()%255+1;

$LN68@AddDbNPC:
  002fa	e8 00 00 00 00	 call	 _rand
  002ff	99		 cdq
  00300	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00305	f7 f9		 idiv	 ecx
  00307	fe c2		 inc	 dl
  00309	88 57 70	 mov	 BYTE PTR [edi+112], dl

; 6057 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal1 = it->m_btCsNpcExistVal1;

  0030c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00311	88 94 06 4c 20
	00 00		 mov	 BYTE PTR [esi+eax+8268], dl

; 6058 : 
; 6059 : 				it->m_btCsNpcExistVal2 = rand()%256;

  00318	e8 00 00 00 00	 call	 _rand
  0031d	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00322	79 07		 jns	 SHORT $LN201@AddDbNPC
  00324	48		 dec	 eax
  00325	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0032a	40		 inc	 eax
$LN201@AddDbNPC:
  0032b	88 47 71	 mov	 BYTE PTR [edi+113], al

; 6060 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal2 = it->m_btCsNpcExistVal2;

  0032e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00334	88 84 0e 4d 20
	00 00		 mov	 BYTE PTR [esi+ecx+8269], al

; 6061 : 
; 6062 : 				it->m_btCsNpcExistVal3 = rand()%256;

  0033b	e8 00 00 00 00	 call	 _rand
  00340	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00345	79 07		 jns	 SHORT $LN202@AddDbNPC
  00347	48		 dec	 eax
  00348	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  0034d	40		 inc	 eax
$LN202@AddDbNPC:
  0034e	88 47 72	 mov	 BYTE PTR [edi+114], al

; 6063 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal3 = it->m_btCsNpcExistVal3;

  00351	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00357	88 84 16 4e 20
	00 00		 mov	 BYTE PTR [esi+edx+8270], al

; 6064 : 
; 6065 : 				it->m_btCsNpcExistVal4 = rand()%256;

  0035e	e8 00 00 00 00	 call	 _rand
  00363	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  00368	79 07		 jns	 SHORT $LN203@AddDbNPC
  0036a	48		 dec	 eax
  0036b	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  00370	40		 inc	 eax
$LN203@AddDbNPC:

; 6066 : 				gObj[iNPC_INDEX].m_btCsNpcExistVal4 = it->m_btCsNpcExistVal4;
; 6067 : 
; 6068 : 				if(pNpcData.m_iNPC_NUM == 277)

  00371	81 bd 7c ff ff
	ff 15 01 00 00	 cmp	 DWORD PTR _$S23$189951[ebp+8], 277 ; 00000115H
  0037b	88 47 73	 mov	 BYTE PTR [edi+115], al
  0037e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00384	88 84 0e 4f 20
	00 00		 mov	 BYTE PTR [esi+ecx+8271], al
  0038b	0f 85 be 00 00
	00		 jne	 $LN158@AddDbNPC

; 6069 : 				{
; 6070 : 					SetGateBlockState(pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY,TRUE);

  00391	8b 55 a4	 mov	 edx, DWORD PTR _$S23$189951[ebp+48]
  00394	8b 45 a0	 mov	 eax, DWORD PTR _$S23$189951[ebp+44]
  00397	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0039a	6a 01		 push	 1
  0039c	52		 push	 edx
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 ?SetGateBlockState@CCastleSiege@@QAEXHHH@Z ; CCastleSiege::SetGateBlockState

; 6071 : 					gObjAddBuffEffect(&gObj[iNPC_INDEX],BUFF_GATESTATUS,0,0,0,0,-10);

  003a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003a9	6a f6		 push	 -10			; fffffff6H
  003ab	6a 00		 push	 0
  003ad	6a 00		 push	 0
  003af	6a 00		 push	 0
  003b1	6a 00		 push	 0
  003b3	8d 14 0e	 lea	 edx, DWORD PTR [esi+ecx]
  003b6	6a 0d		 push	 13			; 0000000dH
  003b8	52		 push	 edx
  003b9	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 6072 : 
; 6073 : 					gObj[iNPC_INDEX].m_btCsGateOpen = TRUE;

  003be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003c3	c6 84 06 51 20
	00 00 01	 mov	 BYTE PTR [esi+eax+8273], 1

; 6074 : 
; 6075 : 					int bCreateLever = FALSE;
; 6076 : 
; 6077 : 					if(pNpcData.m_iCS_GATE_LEVER_INDEX == -1)

  003cb	8b 75 d8	 mov	 esi, DWORD PTR _$S23$189951[ebp+100]
  003ce	83 c4 1c	 add	 esp, 28			; 0000001cH
  003d1	83 fe ff	 cmp	 esi, -1

; 6078 : 					{
; 6079 : 						bCreateLever = TRUE;

  003d4	74 0d		 je	 SHORT $LN193@AddDbNPC

; 6080 : 					}
; 6081 : 					else if(CheckLeverAlive(pNpcData.m_iCS_GATE_LEVER_INDEX) == FALSE)

  003d6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003d9	56		 push	 esi
  003da	e8 00 00 00 00	 call	 ?CheckLeverAlive@CCastleSiege@@QAEHH@Z ; CCastleSiege::CheckLeverAlive
  003df	85 c0		 test	 eax, eax
  003e1	75 4a		 jne	 SHORT $LN8@AddDbNPC
$LN193@AddDbNPC:

; 6082 : 					{
; 6083 : 						bCreateLever = TRUE;
; 6084 : 					}
; 6085 : 
; 6086 : 					if(bCreateLever != FALSE)
; 6087 : 					{
; 6088 : 						int iLeverIndex = CreateCsGateLever(pNpcData.m_iNPC_SX,pNpcData.m_iNPC_SY+4);

  003e3	8b 4d a4	 mov	 ecx, DWORD PTR _$S23$189951[ebp+48]
  003e6	8b 55 a0	 mov	 edx, DWORD PTR _$S23$189951[ebp+44]
  003e9	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  003ec	83 c1 04	 add	 ecx, 4
  003ef	51		 push	 ecx
  003f0	52		 push	 edx
  003f1	8b ce		 mov	 ecx, esi
  003f3	e8 00 00 00 00	 call	 ?CreateCsGateLever@CCastleSiege@@QAEHHH@Z ; CCastleSiege::CreateCsGateLever

; 6089 : 
; 6090 : 						if(OBJMAX_RANGE(iLeverIndex))

  003f8	85 c0		 test	 eax, eax
  003fa	78 24		 js	 SHORT $LN149@AddDbNPC
  003fc	33 c9		 xor	 ecx, ecx
  003fe	3d eb 2c 00 00	 cmp	 eax, 11499		; 00002cebH
  00403	0f 9e c1	 setle	 cl
  00406	85 c9		 test	 ecx, ecx
  00408	74 16		 je	 SHORT $LN149@AddDbNPC

; 6091 : 						{
; 6092 : 							it->m_iCS_GATE_LEVER_INDEX = iLeverIndex;
; 6093 : 
; 6094 : 							int bRETVAL = LinkCsGateLever(iLeverIndex,iNPC_INDEX);

  0040a	53		 push	 ebx
  0040b	50		 push	 eax
  0040c	8b ce		 mov	 ecx, esi
  0040e	89 47 64	 mov	 DWORD PTR [edi+100], eax
  00411	e8 00 00 00 00	 call	 ?LinkCsGateLever@CCastleSiege@@QAEHHH@Z ; CCastleSiege::LinkCsGateLever

; 6095 : 
; 6096 : 							if(bRETVAL == FALSE)

  00416	85 c0		 test	 eax, eax
  00418	75 35		 jne	 SHORT $LN158@AddDbNPC

; 6097 : 							{
; 6098 : 								LogAddC(2, "[CastleSiege] CCastleSiege::CreateDbNPC() ERROR - Failed to Create Gate Lever : GateIndex:%d", 
; 6099 : 									pNpcData.m_iNPC_INDEX);

  0041a	8b 45 80	 mov	 eax, DWORD PTR _$S23$189951[ebp+12]
  0041d	50		 push	 eax

; 6100 : 							}
; 6101 : 						}
; 6102 : 						else

  0041e	eb 1f		 jmp	 SHORT $LN204@AddDbNPC

; 6103 : 						{
; 6104 : 							it->m_iCS_GATE_LEVER_INDEX = -1;

$LN149@AddDbNPC:

; 6105 : 							LogAddC(2, "[CastleSiege] CCastleSiege::CreateDbNPC() ERROR - Failed to Create Gate Lever : GateIndex:%d", 
; 6106 : 								pNpcData.m_iNPC_INDEX);

  00420	8b 4d 80	 mov	 ecx, DWORD PTR _$S23$189951[ebp+12]
  00423	c7 47 64 ff ff
	ff ff		 mov	 DWORD PTR [edi+100], -1
  0042a	51		 push	 ecx

; 6107 : 						}
; 6108 : 					}
; 6109 : 					else

  0042b	eb 12		 jmp	 SHORT $LN204@AddDbNPC
$LN8@AddDbNPC:

; 6110 : 					{
; 6111 : 						int bRETVAL = LinkCsGateLever(pNpcData.m_iCS_GATE_LEVER_INDEX,iNPC_INDEX);

  0042d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00430	53		 push	 ebx
  00431	56		 push	 esi
  00432	e8 00 00 00 00	 call	 ?LinkCsGateLever@CCastleSiege@@QAEHHH@Z ; CCastleSiege::LinkCsGateLever

; 6112 : 						if(bRETVAL == FALSE)

  00437	85 c0		 test	 eax, eax
  00439	75 14		 jne	 SHORT $LN158@AddDbNPC

; 6113 : 						{
; 6114 : 							LogAddC(2,"[CastleSiege] CCastleSiege::CreateDbNPC() ERROR - Failed to Create Gate Lever : GateIndex:%d", 
; 6115 : 								pNpcData.m_iNPC_INDEX);

  0043b	8b 55 80	 mov	 edx, DWORD PTR _$S23$189951[ebp+12]
  0043e	52		 push	 edx
$LN204@AddDbNPC:
  0043f	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@CABELLH@?$FLCastleSiege?$FN?5CCastleSiege?3?3Crea@
  00444	6a 02		 push	 2
  00446	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0044c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6116 : 						}
; 6117 : 					}
; 6118 : 				}
; 6119 : 
; 6120 : 				it->m_iNPC_OBJINDEX = iNPC_INDEX;

$LN158@AddDbNPC:

; 6121 : 				it->m_iNPC_LIVE = 2;
; 6122 : 				it->m_bIN_USE = TRUE;

  0044f	b8 01 00 00 00	 mov	 eax, 1
  00454	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 6123 : 				iRETVAL = TRUE;

  00457	89 45 ec	 mov	 DWORD PTR _iRETVAL$[ebp], eax

; 6124 : 
; 6125 : 				if(pNpcData.m_iNPC_NUM == 277 || pNpcData.m_iNPC_NUM == 283)

  0045a	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _$S23$189951[ebp+8]
  00460	89 5f 18	 mov	 DWORD PTR [edi+24], ebx
  00463	c7 47 68 02 00
	00 00		 mov	 DWORD PTR [edi+104], 2
  0046a	3d 15 01 00 00	 cmp	 eax, 277		; 00000115H
  0046f	74 07		 je	 SHORT $LN1@AddDbNPC
  00471	3d 1b 01 00 00	 cmp	 eax, 283		; 0000011bH
  00476	75 23		 jne	 SHORT $LN2@AddDbNPC
$LN1@AddDbNPC:

; 6126 : 				{
; 6127 : 					LogAddTD("[CastleSiege][CreateDBNPC] (Index:%d, Num:%d, DF:%d, RG:%d, MaxHP:%d, HP:%d )",
; 6128 : 						pNpcData.m_iNPC_INDEX, pNpcData.m_iNPC_NUM, pNpcData.m_iNPC_DF_LEVEL, pNpcData.m_iNPC_RG_LEVEL,
; 6129 : 						pNpcData.m_iNPC_MAXHP, pNpcData.m_iNPC_HP);

  00478	8b 4d 9c	 mov	 ecx, DWORD PTR _$S23$189951[ebp+40]
  0047b	8b 55 98	 mov	 edx, DWORD PTR _$S23$189951[ebp+36]
  0047e	51		 push	 ecx
  0047f	8b 4d 94	 mov	 ecx, DWORD PTR _$S23$189951[ebp+32]
  00482	52		 push	 edx
  00483	8b 55 90	 mov	 edx, DWORD PTR _$S23$189951[ebp+28]
  00486	51		 push	 ecx
  00487	52		 push	 edx
  00488	50		 push	 eax
  00489	8b 45 80	 mov	 eax, DWORD PTR _$S23$189951[ebp+12]
  0048c	50		 push	 eax
  0048d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@FOJGKABN@?$FLCastleSiege?$FN?$FLCreateDBNPC?$FN?5?$CIInde@
  00492	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00498	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@AddDbNPC:

; 6138 : 
; 6139 : 	LeaveCriticalSection(&m_critNpcData);

  0049b	8b 4d e8	 mov	 ecx, DWORD PTR tv704[ebp]
  0049e	51		 push	 ecx
  0049f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 6140 : 
; 6141 : 	return iRETVAL;

  004a5	8b 45 ec	 mov	 eax, DWORD PTR _iRETVAL$[ebp]

; 6142 : }

  004a8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004b2	59		 pop	 ecx
  004b3	5f		 pop	 edi
  004b4	5e		 pop	 esi
  004b5	5b		 pop	 ebx
  004b6	8b e5		 mov	 esp, ebp
  004b8	5d		 pop	 ebp
  004b9	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddDbNPC@CCastleSiege@@QAEHHH@Z$0:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _$S23$189951[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?AddDbNPC@CCastleSiege@@QAEHHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddDbNPC@CCastleSiege@@QAEHHH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddDbNPC@CCastleSiege@@QAEHHH@Z ENDP			; CCastleSiege::AddDbNPC
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::begin
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::begin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (iterator(_Lmost(), this));

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 808  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::end, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 		return (iterator(this->_Myhead, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 818  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::end
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::begin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (iterator(_Lmost(), this));

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 808  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::end, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 		return (iterator(this->_Myhead, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 818  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::end
_TEXT	ENDS
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector@2
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector@2:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1179 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1180 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1181 : 			_VIPTR(_Where));

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000c	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000f	2b d0		 sub	 edx, eax
  00011	c1 fa 02	 sar	 edx, 2
  00014	03 d2		 add	 edx, edx
  00016	03 d2		 add	 edx, edx
  00018	52		 push	 edx
  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 _memmove

; 1182 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1183 : 		--this->_Mylast;
; 1184 : 		return (_Make_iter(_Where));

  00020	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	83 46 04 fc	 add	 DWORD PTR [esi+4], -4	; fffffffcH
  0002d	89 08		 mov	 DWORD PTR [eax], ecx
  0002f	5e		 pop	 esi

; 1185 : 		}

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::erase
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::end
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::end, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 		return (iterator(this->_Myhead, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 818  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::end
_TEXT	ENDS
PUBLIC	??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
;	COMDAT ??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z PROC ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator(), COMDAT
; _this$ = ecx

; 124  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		return (_Left < _Right);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	72 02		 jb	 SHORT $LN11@operator@10
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN11@operator@10:
  00011	51		 push	 ecx
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00015	50		 push	 eax
  00016	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00019	50		 push	 eax
  0001a	6a 00		 push	 0
  0001c	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00021	33 c9		 xor	 ecx, ecx
  00023	85 c0		 test	 eax, eax
  00025	0f 98 c0	 sets	 al

; 126  : 		}

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ENDP ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
$T211622 = -16						; size = 12
$T211557 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >, COMDAT
; _this$ = ecx

; 698  : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 40		 push	 64			; 00000040H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN20@Tree
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 3c	 mov	 BYTE PTR [ecx+60], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 3d	 mov	 BYTE PTR [edx+61], al

; 699  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 698  : 		{	// construct empty tree

$LN20@Tree:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T211557[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T211622[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T211557[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T211622[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T211622[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@Tree:
$LN42@Tree:
  0006e	cc		 int	 3
??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
$T211746 = -16						; size = 12
$T211680 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >, COMDAT
; _this$ = ecx

; 698  : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	68 00 08 00 00	 push	 2048			; 00000800H
  0000e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	74 2e		 je	 SHORT $LN20@Tree@2
  00021	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00024	89 00		 mov	 DWORD PTR [eax], eax
  00026	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00029	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00032	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00035	b0 01		 mov	 al, 1
  00037	88 81 fc 07 00
	00		 mov	 BYTE PTR [ecx+2044], al
  0003d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00040	88 82 fd 07 00
	00		 mov	 BYTE PTR [edx+2045], al

; 699  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8

; 698  : 		{	// construct empty tree

$LN20@Tree@2:
  0004f	8d 45 fc	 lea	 eax, DWORD PTR $T211680[ebp]
  00052	50		 push	 eax
  00053	8d 4d f0	 lea	 ecx, DWORD PTR $T211746[ebp]
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T211680[ebp], 0
  0005d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00062	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00067	8d 4d f0	 lea	 ecx, DWORD PTR $T211746[ebp]
  0006a	51		 push	 ecx
  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T211746[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00072	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@Tree@2:
$LN42@Tree@2:
  00077	cc		 int	 3
??0?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::lower_bound
; Function compile flags: /Ogtp
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1449 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1450 : 		return (iterator(_Lbound(_Keyval), this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00010	75 1c		 jne	 SHORT $LN36@lower_boun
  00012	8b 55 0c	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00015	8b 12		 mov	 edx, DWORD PTR [edx]
$LL6@lower_boun:
  00017	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  0001a	7d 05		 jge	 SHORT $LN4@lower_boun
  0001c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001f	eb 04		 jmp	 SHORT $LN3@lower_boun
$LN4@lower_boun:
  00021	8b c8		 mov	 ecx, eax
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@lower_boun:
  00025	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  0002c	74 e9		 je	 SHORT $LL6@lower_boun
$LN36@lower_boun:
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	89 08		 mov	 DWORD PTR [eax], ecx

; 1451 : 		}

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z
_TEXT	SEGMENT
$T211957 = -16						; size = 12
$T211891 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 698  : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 18		 push	 24			; 00000018H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN20@Tree@3
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 14	 mov	 BYTE PTR [ecx+20], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 15	 mov	 BYTE PTR [edx+21], al

; 699  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 698  : 		{	// construct empty tree

$LN20@Tree@3:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T211891[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T211957[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T211891[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T211957[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T211957[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@Tree@3:
$LN42@Tree@3:
  0006e	cc		 int	 3
??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::lower_bound
; Function compile flags: /Ogtp
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@ABI@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@ABI@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1449 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1450 : 		return (iterator(_Lbound(_Keyval), this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0000d	75 19		 jne	 SHORT $LN36@lower_boun@2
  0000f	8b 55 0c	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00012	8b 12		 mov	 edx, DWORD PTR [edx]
$LL6@lower_boun@2:
  00014	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  00017	73 05		 jae	 SHORT $LN4@lower_boun@2
  00019	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001c	eb 04		 jmp	 SHORT $LN3@lower_boun@2
$LN4@lower_boun@2:
  0001e	8b c8		 mov	 ecx, eax
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@lower_boun@2:
  00022	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00026	74 ec		 je	 SHORT $LL6@lower_boun@2
$LN36@lower_boun@2:
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 1451 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@ABI@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 405  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 406  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator++

; 407  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 408  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 405  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 406  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator++

; 407  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 408  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lbound
; Function compile flags: /Ogtp
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
tv272 = -8						; size = 4
__Wherenode$ = -4					; size = 4
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1741 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1742 : 		_Nodeptr _Pnode = _Root();

  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	57		 push	 edi
  0000a	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  0000d	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  00011	89 45 fc	 mov	 DWORD PTR __Wherenode$[ebp], eax
  00014	75 68		 jne	 SHORT $LN3@Lbound@3

; 1746 : 			if (_DEBUG_LT_PRED(this->comp, this->_Key(_Pnode), _Keyval))

  00016	8b 55 08	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00019	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0001c	53		 push	 ebx
  0001d	8b 5a 10	 mov	 ebx, DWORD PTR [edx+16]
  00020	56		 push	 esi
  00021	89 45 f8	 mov	 DWORD PTR tv272[ebp], eax
  00024	eb 03		 jmp	 SHORT $LN4@Lbound@3
$LL60@Lbound@3:

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails

  00026	8b 55 08	 mov	 edx, DWORD PTR __Keyval$[ebp]
$LN4@Lbound@3:

; 1746 : 			if (_DEBUG_LT_PRED(this->comp, this->_Key(_Pnode), _Keyval))

  00029	83 7d f8 10	 cmp	 DWORD PTR tv272[ebp], 16 ; 00000010H
  0002d	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00030	72 02		 jb	 SHORT $LN29@Lbound@3
  00032	8b 12		 mov	 edx, DWORD PTR [edx]
$LN29@Lbound@3:
  00034	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  00037	8b ce		 mov	 ecx, esi
  00039	3b ce		 cmp	 ecx, esi
  0003b	73 00		 jae	 SHORT $LN31@Lbound@3
$LN31@Lbound@3:
  0003d	8b ce		 mov	 ecx, esi
  0003f	3b f3		 cmp	 esi, ebx
  00041	72 02		 jb	 SHORT $LN36@Lbound@3
  00043	8b cb		 mov	 ecx, ebx
$LN36@Lbound@3:
  00045	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00049	72 02		 jb	 SHORT $LN46@Lbound@3
  0004b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN46@Lbound@3:
  0004d	51		 push	 ecx
  0004e	52		 push	 edx
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	85 c0		 test	 eax, eax
  0005a	75 0b		 jne	 SHORT $LN61@Lbound@3
  0005c	3b f3		 cmp	 esi, ebx
  0005e	72 09		 jb	 SHORT $LN58@Lbound@3
  00060	3b f3		 cmp	 esi, ebx
  00062	0f 95 c0	 setne	 al
  00065	85 c0		 test	 eax, eax
$LN61@Lbound@3:
  00067	79 05		 jns	 SHORT $LN2@Lbound@3
$LN58@Lbound@3:

; 1747 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00069	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]

; 1748 : 			else

  0006c	eb 05		 jmp	 SHORT $LN1@Lbound@3
$LN2@Lbound@3:

; 1749 : 				{	// _Pnode not less than _Keyval, remember it
; 1750 : 				_Wherenode = _Pnode;

  0006e	89 7d fc	 mov	 DWORD PTR __Wherenode$[ebp], edi

; 1751 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00071	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN1@Lbound@3:

; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00073	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  00077	74 ad		 je	 SHORT $LL60@Lbound@3

; 1752 : 				}
; 1753 : 
; 1754 : 		return (_Wherenode);	// return best remembered candidate

  00079	8b 45 fc	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
$LN3@Lbound@3:
  0007e	5f		 pop	 edi

; 1755 : 		}

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z PROC ; std::vector<int,std::allocator<int> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00015	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0001d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	3b c8		 cmp	 ecx, eax
  00024	73 50		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00026	53		 push	 ebx
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002c	e8 00 00 00 00	 call	 ?allocate@?$allocator@H@std@@QAEPAHI@Z ; std::allocator<int>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00031	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00034	8b d8		 mov	 ebx, eax
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	2b d0		 sub	 edx, eax
  0003a	c1 fa 02	 sar	 edx, 2
  0003d	03 d2		 add	 edx, edx
  0003f	03 d2		 add	 edx, edx
  00041	52		 push	 edx
  00042	50		 push	 eax
  00043	53		 push	 ebx
  00044	e8 00 00 00 00	 call	 _memmove

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004e	2b f8		 sub	 edi, eax
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00056	85 c0		 test	 eax, eax
  00058	74 09		 je	 SHORT $LN37@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00060	83 c4 04	 add	 esp, 4
$LN37@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00063	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 770  : 			this->_Mylast = _Ptr + _Size;

  00066	8d 14 bb	 lea	 edx, DWORD PTR [ebx+edi*4]
  00069	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  0006c	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  0006d	89 1e		 mov	 DWORD PTR [esi], ebx
  0006f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00072	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00075	5b		 pop	 ebx
$LN3@reserve:
  00076	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::reserve
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  00009	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00010	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00013	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 752  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 753  : 		_Tidy(true);

  00003	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00007	72 0b		 jb	 SHORT $LN11@basic_stri
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4
$LN11@basic_stri:
  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0001b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00022	c6 06 00	 mov	 BYTE PTR [esi], 0
  00025	5e		 pop	 esi

; 754  : 		}

  00026	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv795 = -12						; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 1195 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1198 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1199 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1200 : 		++_Where;	// save successor iterator for return
; 1201 : 		_Orphan_ptr(*this, _Erasednode);
; 1202 : 
; 1203 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1204 : 		if (this->_Isnil(_Where._Mynode()))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	80 7b 15 00	 cmp	 BYTE PTR [ebx+21], 0
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00013	74 0a		 je	 SHORT $LN40@erase@2

; 1205 : 			_Xout_of_range("invalid map/set<T> iterator");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN295@erase@2:
$LN40@erase@2:

; 1206 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1207 : 		++_Where;	// save successor iterator for return

  0001f	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00022	89 5d f8	 mov	 DWORD PTR __Erasednode$[ebp], ebx
  00025	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator++

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1211 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1212 : 		_Nodeptr _Pnode = _Erasednode;
; 1213 : 
; 1214 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0002a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0002c	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00030	74 05		 je	 SHORT $LN39@erase@2

; 1215 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00032	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 1216 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00035	eb 17		 jmp	 SHORT $LN291@erase@2
$LN39@erase@2:
  00037	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0003a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0003e	74 04		 je	 SHORT $LN37@erase@2

; 1217 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00040	8b f9		 mov	 edi, ecx

; 1218 : 		else

  00042	eb 0a		 jmp	 SHORT $LN291@erase@2
$LN37@erase@2:

; 1219 : 			{	// two subtrees, must lift successor node to replace erased
; 1220 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  00044	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 1221 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00047	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 1222 : 			}
; 1223 : 
; 1224 : 		if (_Pnode == _Erasednode)

  0004a	3b c3		 cmp	 eax, ebx
  0004c	75 72		 jne	 SHORT $LN35@erase@2
$LN291@erase@2:

; 1225 : 			{	// at most one subtree, relink it
; 1226 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1227 : 			if (!this->_Isnil(_Fixnode))

  0004e	80 7f 15 00	 cmp	 BYTE PTR [edi+21], 0
  00052	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00055	75 03		 jne	 SHORT $LN34@erase@2

; 1228 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  00057	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase@2:

; 1229 : 
; 1230 : 			if (_Root() == _Erasednode)

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00060	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00063	75 05		 jne	 SHORT $LN33@erase@2

; 1231 : 				_Root() = _Fixnode;	// link down from root

  00065	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1232 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00068	eb 0b		 jmp	 SHORT $LN30@erase@2
$LN33@erase@2:
  0006a	39 1e		 cmp	 DWORD PTR [esi], ebx
  0006c	75 04		 jne	 SHORT $LN31@erase@2

; 1233 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  0006e	89 3e		 mov	 DWORD PTR [esi], edi

; 1234 : 			else

  00070	eb 03		 jmp	 SHORT $LN30@erase@2
$LN31@erase@2:

; 1235 : 				this->_Right(_Fixnodeparent) =
; 1236 : 					_Fixnode;	// link down to right

  00072	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase@2:

; 1237 : 
; 1238 : 			if (_Lmost() == _Erasednode)

  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	39 18		 cmp	 DWORD PTR [eax], ebx
  0007a	75 1b		 jne	 SHORT $LN29@erase@2

; 1239 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1240 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1241 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  0007c	80 7f 15 00	 cmp	 BYTE PTR [edi+21], 0
  00080	74 04		 je	 SHORT $LN43@erase@2
  00082	8b c6		 mov	 eax, esi
  00084	eb 0c		 jmp	 SHORT $LN44@erase@2
$LN43@erase@2:
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Min
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	83 c4 04	 add	 esp, 4
$LN44@erase@2:
  00092	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00095	89 02		 mov	 DWORD PTR [edx], eax
$LN29@erase@2:

; 1242 : 
; 1243 : 			if (_Rmost() == _Erasednode)

  00097	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009a	89 4d f4	 mov	 DWORD PTR tv795[ebp], ecx
  0009d	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  000a0	75 78		 jne	 SHORT $LN165@erase@2

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000a2	80 7f 15 00	 cmp	 BYTE PTR [edi+21], 0
  000a6	74 07		 je	 SHORT $LN45@erase@2
  000a8	8b c6		 mov	 eax, esi
  000aa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000ad	eb 6b		 jmp	 SHORT $LN165@erase@2
$LN45@erase@2:

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000af	57		 push	 edi
  000b0	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Max
  000b5	8b 4d f4	 mov	 ecx, DWORD PTR tv795[ebp]
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000be	eb 5a		 jmp	 SHORT $LN165@erase@2
$LN35@erase@2:

; 1249 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1250 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1251 : 				_Pnode;	// link left up

  000c0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1252 : 			this->_Left(_Pnode) =
; 1253 : 				this->_Left(_Erasednode);	// link successor down

  000c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c5	89 08		 mov	 DWORD PTR [eax], ecx

; 1254 : 
; 1255 : 			if (_Pnode == this->_Right(_Erasednode))

  000c7	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  000ca	75 04		 jne	 SHORT $LN26@erase@2

; 1256 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000cc	8b f0		 mov	 esi, eax

; 1257 : 			else

  000ce	eb 1a		 jmp	 SHORT $LN25@erase@2
$LN26@erase@2:

; 1258 : 				{	// successor further down, link in place of erased
; 1259 : 				_Fixnodeparent =
; 1260 : 					this->_Parent(_Pnode);	// parent is successor's
; 1261 : 				if (!this->_Isnil(_Fixnode))

  000d0	80 7f 15 00	 cmp	 BYTE PTR [edi+21], 0
  000d4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d7	75 03		 jne	 SHORT $LN24@erase@2

; 1262 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000d9	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase@2:

; 1263 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000dc	89 3e		 mov	 DWORD PTR [esi], edi

; 1264 : 				this->_Right(_Pnode) =
; 1265 : 					this->_Right(_Erasednode);	// link next down

  000de	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000e1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1266 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1267 : 					_Pnode;	// right up

  000e4	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000e7	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN25@erase@2:

; 1268 : 				}
; 1269 : 
; 1270 : 			if (_Root() == _Erasednode)

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f0	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  000f3	75 05		 jne	 SHORT $LN23@erase@2

; 1271 : 				_Root() = _Pnode;	// link down from root

  000f5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1272 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000f8	eb 0e		 jmp	 SHORT $LN20@erase@2
$LN23@erase@2:
  000fa	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000fd	39 19		 cmp	 DWORD PTR [ecx], ebx
  000ff	75 04		 jne	 SHORT $LN21@erase@2

; 1273 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1274 : 					_Pnode;	// link down to left

  00101	89 01		 mov	 DWORD PTR [ecx], eax

; 1275 : 			else

  00103	eb 03		 jmp	 SHORT $LN20@erase@2
$LN21@erase@2:

; 1276 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1277 : 					_Pnode;	// link down to right

  00105	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase@2:

; 1278 : 
; 1279 : 			this->_Parent(_Pnode) =
; 1280 : 				this->_Parent(_Erasednode);	// link successor up

  00108	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0010b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1281 : 			_STD swap(this->_Color(_Pnode),
; 1282 : 				this->_Color(_Erasednode));	// recolor it

  0010e	8a 53 14	 mov	 dl, BYTE PTR [ebx+20]
  00111	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00114	88 50 14	 mov	 BYTE PTR [eax+20], dl
  00117	88 4b 14	 mov	 BYTE PTR [ebx+20], cl
$LN165@erase@2:

; 1283 : 			}
; 1284 : 
; 1285 : 		if (this->_Color(_Erasednode) == this->_Black)

  0011a	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0011d	b3 01		 mov	 bl, 1
  0011f	38 58 14	 cmp	 BYTE PTR [eax+20], bl
  00122	0f 85 fa 00 00
	00		 jne	 $LN19@erase@2

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00128	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	3b 7a 04	 cmp	 edi, DWORD PTR [edx+4]
  00131	0f 84 e8 00 00
	00		 je	 $LN16@erase@2
$LL18@erase@2:
  00137	38 5f 14	 cmp	 BYTE PTR [edi+20], bl
  0013a	0f 85 df 00 00
	00		 jne	 $LN16@erase@2

; 1290 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	3b f8		 cmp	 edi, eax
  00144	75 65		 jne	 SHORT $LN15@erase@2

; 1291 : 					{	// fixup left subtree
; 1292 : 					_Pnode = this->_Right(_Fixnodeparent);

  00146	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1293 : 					if (this->_Color(_Pnode) == this->_Red)

  00149	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  0014d	75 13		 jne	 SHORT $LN14@erase@2

; 1294 : 						{	// rotate red up from right subtree
; 1295 : 						this->_Color(_Pnode) = this->_Black;

  0014f	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 1296 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1297 : 						_Lrotate(_Fixnodeparent);

  00152	56		 push	 esi
  00153	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  00157	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate

; 1298 : 						_Pnode = this->_Right(_Fixnodeparent);

  0015c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN14@erase@2:

; 1299 : 						}
; 1300 : 
; 1301 : 					if (this->_Isnil(_Pnode))

  00162	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0

; 1302 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1303 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

  00166	75 74		 jne	 SHORT $LN293@erase@2

; 1304 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00168	8b 10		 mov	 edx, DWORD PTR [eax]
  0016a	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  0016d	75 08		 jne	 SHORT $LN11@erase@2
  0016f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00172	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  00175	74 61		 je	 SHORT $LN294@erase@2
$LN11@erase@2:

; 1305 : 						{	// redden right subtree with black children
; 1306 : 						this->_Color(_Pnode) = this->_Red;
; 1307 : 						_Fixnode = _Fixnodeparent;
; 1308 : 						}
; 1309 : 					else
; 1310 : 						{	// must rearrange right subtree
; 1311 : 						if (this->_Color(this->_Right(_Pnode))
; 1312 : 							== this->_Black)

  00177	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0017a	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  0017d	75 15		 jne	 SHORT $LN9@erase@2

; 1313 : 							{	// rotate red up from left sub-subtree
; 1314 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1315 : 							this->_Color(_Pnode) = this->_Red;
; 1316 : 							_Rrotate(_Pnode);

  00184	50		 push	 eax
  00185	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  00189	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate

; 1317 : 							_Pnode = this->_Right(_Fixnodeparent);

  0018e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00191	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN9@erase@2:

; 1318 : 							}
; 1319 : 
; 1320 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00194	8a 56 14	 mov	 dl, BYTE PTR [esi+20]
  00197	88 50 14	 mov	 BYTE PTR [eax+20], dl

; 1321 : 						this->_Color(_Fixnodeparent) = this->_Black;

  0019a	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 1322 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  0019d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1323 : 						_Lrotate(_Fixnodeparent);

  001a0	56		 push	 esi
  001a1	88 58 14	 mov	 BYTE PTR [eax+20], bl
  001a4	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate

; 1324 : 						break;	// tree now recolored/rebalanced

  001a9	eb 74		 jmp	 SHORT $LN16@erase@2
$LN15@erase@2:

; 1325 : 						}
; 1326 : 					}
; 1327 : 				else
; 1328 : 					{	// fixup right subtree
; 1329 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1330 : 					if (this->_Color(_Pnode) == this->_Red)

  001ab	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  001af	75 12		 jne	 SHORT $LN7@erase@2

; 1331 : 						{	// rotate red up from left subtree
; 1332 : 						this->_Color(_Pnode) = this->_Black;

  001b1	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 1333 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1334 : 						_Rrotate(_Fixnodeparent);

  001b4	56		 push	 esi
  001b5	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  001b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate

; 1335 : 						_Pnode = this->_Left(_Fixnodeparent);

  001be	8b 06		 mov	 eax, DWORD PTR [esi]
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN7@erase@2:

; 1336 : 						}
; 1337 : 					if (this->_Isnil(_Pnode))

  001c3	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0

; 1338 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1339 : 					else if (this->_Color(this->_Right(_Pnode)) ==

  001c7	75 13		 jne	 SHORT $LN293@erase@2

; 1340 : 						this->_Black
; 1341 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001c9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001cc	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001cf	75 1e		 jne	 SHORT $LN4@erase@2
  001d1	8b 10		 mov	 edx, DWORD PTR [eax]
  001d3	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001d6	75 17		 jne	 SHORT $LN4@erase@2
$LN294@erase@2:

; 1342 : 						{	// redden left subtree with black children
; 1343 : 						this->_Color(_Pnode) = this->_Red;

  001d8	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
$LN293@erase@2:

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001dc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1344 : 						_Fixnode = _Fixnodeparent;

  001df	8b fe		 mov	 edi, esi
  001e1	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001e4	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001e7	0f 85 4a ff ff
	ff		 jne	 $LL18@erase@2

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001ed	eb 30		 jmp	 SHORT $LN16@erase@2
$LN4@erase@2:

; 1345 : 						}
; 1346 : 					else
; 1347 : 						{	// must rearrange left subtree
; 1348 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  001ef	8b 10		 mov	 edx, DWORD PTR [eax]
  001f1	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001f4	75 15		 jne	 SHORT $LN2@erase@2

; 1349 : 							{	// rotate red up from right sub-subtree
; 1350 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f9	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 1351 : 							this->_Color(_Pnode) = this->_Red;
; 1352 : 							_Lrotate(_Pnode);

  001fc	50		 push	 eax
  001fd	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  00201	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate

; 1353 : 							_Pnode = this->_Left(_Fixnodeparent);

  00206	8b 06		 mov	 eax, DWORD PTR [esi]
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN2@erase@2:

; 1354 : 							}
; 1355 : 
; 1356 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  0020b	8a 56 14	 mov	 dl, BYTE PTR [esi+20]
  0020e	88 50 14	 mov	 BYTE PTR [eax+20], dl

; 1357 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00211	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 1358 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  00214	8b 00		 mov	 eax, DWORD PTR [eax]

; 1359 : 						_Rrotate(_Fixnodeparent);

  00216	56		 push	 esi
  00217	88 58 14	 mov	 BYTE PTR [eax+20], bl
  0021a	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate
$LN16@erase@2:

; 1360 : 						break;	// tree now recolored/rebalanced
; 1361 : 						}
; 1362 : 					}
; 1363 : 
; 1364 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0021f	88 5f 14	 mov	 BYTE PTR [edi+20], bl
$LN19@erase@2:

; 1365 : 			}
; 1366 : 
; 1367 : 		_Dest_val(this->_Alval,
; 1368 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1369 : 
; 1370 : 		this->_Alnod.deallocate(_Erasednode, 1);

  00222	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  00225	51		 push	 ecx
  00226	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1371 : 
; 1372 : 		if (0 < this->_Mysize)

  0022b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00231	83 c4 04	 add	 esp, 4
  00234	5f		 pop	 edi
  00235	5e		 pop	 esi
  00236	5b		 pop	 ebx
  00237	85 c0		 test	 eax, eax
  00239	74 04		 je	 SHORT $LN1@erase@2

; 1373 : 			--this->_Mysize;

  0023b	48		 dec	 eax
  0023c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@erase@2:

; 1374 : 
; 1375 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

  0023f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00242	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]
  00245	89 10		 mov	 DWORD PTR [eax], edx

; 1376 : 		}

  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c2 08 00	 ret	 8
$LN292@erase@2:
?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Erase
; Function compile flags: /Ogtp
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1610 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1611 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]

; 1612 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00009	80 7f 15 00	 cmp	 BYTE PTR [edi+21], 0
  0000d	8b d9		 mov	 ebx, ecx
  0000f	8b f7		 mov	 esi, edi
  00011	75 1e		 jne	 SHORT $LN1@Erase
$LL3@Erase:

; 1613 : 			{	// free subtrees, then node
; 1614 : 			_Erase(this->_Right(_Pnode));

  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	50		 push	 eax
  00017	8b cb		 mov	 ecx, ebx
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Erase

; 1615 : 			_Pnode = this->_Left(_Pnode);

  0001e	8b 36		 mov	 esi, DWORD PTR [esi]

; 1616 : 			_Dest_val(this->_Alval,
; 1617 : 				_STD addressof(this->_Myval(_Rootnode)));
; 1618 : 
; 1619 : 			this->_Alnod.deallocate(_Rootnode, 1);

  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4
  00029	80 7e 15 00	 cmp	 BYTE PTR [esi+21], 0
  0002d	8b fe		 mov	 edi, esi
  0002f	74 e2		 je	 SHORT $LL3@Erase
$LN1@Erase:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 1620 : 			}
; 1621 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?_Linsert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Linsert
; Function compile flags: /Ogtp
;	COMDAT ?_Linsert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@_N@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Node$ = 12						; size = 4
$T212915 = 16						; size = 4
$T212913 = 16						; size = 4
__Where$194982 = 16					; size = 4
__Leftish$ = 16						; size = 1
?_Linsert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@_N@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Linsert, COMDAT
; _this$ = ecx

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 945  : 		const value_type& _Val = this->_Myval(_Node);
; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();
; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00010	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	b1 01		 mov	 cl, 1
  00019	57		 push	 edi
  0001a	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl
  0001d	75 2d		 jne	 SHORT $LN11@Linsert
  0001f	8b 7a 0c	 mov	 edi, DWORD PTR [edx+12]
$LL12@Linsert:

; 951  : 			{	// look for leaf to insert before (_Addleft) or after
; 952  : 			_Wherenode = _Trynode;
; 953  : 			if (_Leftish)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Leftish$[ebp], 0
  00026	8b f0		 mov	 esi, eax
  00028	74 08		 je	 SHORT $LN10@Linsert

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  0002a	39 78 0c	 cmp	 DWORD PTR [eax+12], edi
  0002d	0f 93 c1	 setae	 cl

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  00030	eb 06		 jmp	 SHORT $LN146@Linsert
$LN10@Linsert:

; 958  : 				_Addleft = _DEBUG_LT_PRED(this->comp,

  00032	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  00035	0f 92 c1	 setb	 cl
$LN146@Linsert:
  00038	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl

; 959  : 					this->_Kfn(_Val),
; 960  : 					this->_Key(_Trynode));	// favor right end
; 961  : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 962  : 				: this->_Right(_Trynode);

  0003b	84 c9		 test	 cl, cl
  0003d	74 04		 je	 SHORT $LN15@Linsert
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	eb 03		 jmp	 SHORT $LN16@Linsert
$LN15@Linsert:
  00043	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN16@Linsert:

; 945  : 		const value_type& _Val = this->_Myval(_Node);
; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();
; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00046	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0004a	74 d6		 je	 SHORT $LL12@Linsert
$LN11@Linsert:

; 963  : 			}
; 964  : 
; 965  : 		if (this->_Multi)
; 966  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));
; 967  : 		else
; 968  : 			{	// insert only if unique
; 969  : 			iterator _Where = iterator(_Wherenode, this);

  0004c	8b fe		 mov	 edi, esi
  0004e	89 7d 10	 mov	 DWORD PTR __Where$194982[ebp], edi

; 970  : 			if (!_Addleft)

  00051	84 c9		 test	 cl, cl
  00053	74 35		 je	 SHORT $LN99@Linsert

; 971  : 				;	// need to test if insert after is okay
; 972  : 			else if (_Where == begin())

  00055	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 973  : 				return (_Pairib(_Insert(true, _Wherenode, _Node), true));

  00058	8d 4d 10	 lea	 ecx, DWORD PTR $T212913[ebp]
  0005b	3b 30		 cmp	 esi, DWORD PTR [eax]
  0005d	75 20		 jne	 SHORT $LN4@Linsert
  0005f	52		 push	 edx
  00060	56		 push	 esi
  00061	6a 01		 push	 1
  00063	51		 push	 ecx
  00064	8b cb		 mov	 ecx, ebx
  00066	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
  0006b	8b 10		 mov	 edx, DWORD PTR [eax]
  0006d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	89 10		 mov	 DWORD PTR [eax], edx
  00074	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  00078	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Linsert:

; 974  : 			else
; 975  : 				--_Where;	// need to test if insert before is okay

  0007f	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >,std::_Iterator_base0>::operator--
  00084	8b 7d 10	 mov	 edi, DWORD PTR __Where$194982[ebp]
  00087	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
$LN99@Linsert:

; 976  : 
; 977  : 			if (_DEBUG_LT_PRED(this->comp,

  0008a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 978  : 				this->_Key(_Where._Mynode()),
; 979  : 				this->_Kfn(_Val)))
; 980  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  0008d	52		 push	 edx
  0008e	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00091	73 24		 jae	 SHORT $LN2@Linsert
  00093	8b 4d fc	 mov	 ecx, DWORD PTR __Addleft$[ebp]
  00096	56		 push	 esi
  00097	51		 push	 ecx
  00098	8d 55 10	 lea	 edx, DWORD PTR $T212915[ebp]
  0009b	52		 push	 edx
  0009c	8b cb		 mov	 ecx, ebx
  0009e	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
  000a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	89 08		 mov	 DWORD PTR [eax], ecx
  000ac	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  000b0	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Linsert:

; 981  : 			else
; 982  : 				{	// duplicate, don't insert
; 983  : 				_Dest_val(this->_Alval,
; 984  : 					_STD addressof(this->_Myval(_Node)));
; 985  : 
; 986  : 				this->_Alnod.deallocate(_Node, 1);

  000b7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  000bc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000bf	83 c4 04	 add	 esp, 4
  000c2	89 38		 mov	 DWORD PTR [eax], edi
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000ca	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 0c 00	 ret	 12			; 0000000cH
?_Linsert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@_N@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Linsert
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1958 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1959 : 		if (max_size() < _Newsize)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000d	76 0a		 jbe	 SHORT $LN6@Grow

; 1960 : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00014	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN49@Grow:
$LN6@Grow:

; 1961 : 		if (this->_Myres < _Newsize)

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	3b c3		 cmp	 eax, ebx
  0001e	73 18		 jae	 SHORT $LN5@Grow

; 1962 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  00020	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  0002a	33 c9		 xor	 ecx, ecx
  0002c	3b cb		 cmp	 ecx, ebx
  0002e	1b c0		 sbb	 eax, eax
  00030	5e		 pop	 esi
  00031	f7 d8		 neg	 eax
  00033	5b		 pop	 ebx

; 1969 : 		}

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN5@Grow:

; 1963 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00038	80 7d 0c 00	 cmp	 BYTE PTR __Trim$[ebp], 0
  0003c	74 4e		 je	 SHORT $LN3@Grow
  0003e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00041	73 49		 jae	 SHORT $LN3@Grow

; 1964 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1965 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00043	57		 push	 edi
  00044	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00047	3b df		 cmp	 ebx, edi
  00049	73 02		 jae	 SHORT $LN9@Grow
  0004b	8b fb		 mov	 edi, ebx
$LN9@Grow:
  0004d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00050	72 1d		 jb	 SHORT $LN30@Grow
  00052	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00054	85 ff		 test	 edi, edi
  00056	74 0b		 je	 SHORT $LN28@Grow
  00058	57		 push	 edi
  00059	53		 push	 ebx
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _memcpy
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN28@Grow:
  00063	53		 push	 ebx
  00064	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00069	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0006c	83 c4 04	 add	 esp, 4
$LN30@Grow:
  0006f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00072	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  00079	33 c9		 xor	 ecx, ecx
  0007b	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 1969 : 		}

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
$LN3@Grow:

; 1966 : 		else if (_Newsize == 0)

  0008c	85 db		 test	 ebx, ebx
  0008e	75 0d		 jne	 SHORT $LN46@Grow

; 1967 : 			_Eos(0);	// new size is zero, just null terminate

  00090	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00093	83 f8 10	 cmp	 eax, 16			; 00000010H
  00096	72 02		 jb	 SHORT $LN44@Grow
  00098	8b 36		 mov	 esi, DWORD PTR [esi]
$LN44@Grow:
  0009a	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN46@Grow:

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  0009d	33 c9		 xor	 ecx, ecx
  0009f	3b cb		 cmp	 ecx, ebx
  000a1	1b c0		 sbb	 eax, eax
  000a3	5e		 pop	 esi
  000a4	f7 d8		 neg	 eax
  000a6	5b		 pop	 ebx

; 1969 : 		}

  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN48@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAXPAU_CS_SCHEDULE_DATA@@0AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<_CS_SCHEDULE_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAXPAU_CS_SCHEDULE_DATA@@0AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAXPAU_CS_SCHEDULE_DATA@@0AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<_CS_SCHEDULE_DATA> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 16		 je	 SHORT $LN1@Destroy_ra
  0000f	53		 push	 ebx
  00010	8b 5d 10	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00013	56		 push	 esi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
  0001a	83 c6 1c	 add	 esi, 28			; 0000001cH
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL3@Destroy_ra
  00024	5b		 pop	 ebx
$LN1@Destroy_ra:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 98   : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Destroy_range@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAXPAU_CS_SCHEDULE_DATA@@0AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<_CS_SCHEDULE_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAXPAU_CS_NPC_DATA@@0AAV?$allocator@U_CS_NPC_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<_CS_NPC_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAXPAU_CS_NPC_DATA@@0AAV?$allocator@U_CS_NPC_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAXPAU_CS_NPC_DATA@@0AAV?$allocator@U_CS_NPC_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<_CS_NPC_DATA> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 16		 je	 SHORT $LN1@Destroy_ra@2
  0000f	53		 push	 ebx
  00010	8b 5d 10	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL3@Destroy_ra@2:

; 97   : 		_Dest_val(_Al, _First);

  00013	56		 push	 esi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
  0001a	83 c6 74	 add	 esi, 116		; 00000074H
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL3@Destroy_ra@2
  00024	5b		 pop	 ebx
$LN1@Destroy_ra@2:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 98   : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Destroy_range@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAXPAU_CS_NPC_DATA@@0AAV?$allocator@U_CS_NPC_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<_CS_NPC_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAXPAU_CS_REG_GUILD_DATA@@0AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<_CS_REG_GUILD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAXPAU_CS_REG_GUILD_DATA@@0AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAXPAU_CS_REG_GUILD_DATA@@0AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<_CS_REG_GUILD_DATA> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 16		 je	 SHORT $LN1@Destroy_ra@3
  0000f	53		 push	 ebx
  00010	8b 5d 10	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL3@Destroy_ra@3:

; 97   : 		_Dest_val(_Al, _First);

  00013	56		 push	 esi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
  0001a	83 c6 40	 add	 esi, 64			; 00000040H
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL3@Destroy_ra@3
  00024	5b		 pop	 ebx
$LN1@Destroy_ra@3:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 98   : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Destroy_range@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAXPAU_CS_REG_GUILD_DATA@@0AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<_CS_REG_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@YAXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z ; std::_Destroy<std::pair<int const ,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@YAXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@YAXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z PROC ; std::_Destroy<std::pair<int const ,_CS_MINIMAP_DATA> >, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@

; 64   : 	}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Destroy@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@YAXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z ENDP ; std::_Destroy<std::pair<int const ,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	??1?$_Pair_base@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::~_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Pair_base@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Pair_base@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ PROC ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::~_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00007	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0000e	72 0b		 jb	 SHORT $LN17@Pair_base
  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN17@Pair_base:
  0001b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00022	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00029	c6 06 00	 mov	 BYTE PTR [esi], 0
  0002c	5e		 pop	 esi
  0002d	c3		 ret	 0
??1?$_Pair_base@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ ENDP ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::~_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@$$CBIH@std@@@std@@U?$pair@$$CBIH@2@U?$pair@IH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBIH@std@@@0@PAU?$pair@$$CBIH@0@$$QAU?$pair@IH@0@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned int const ,int> >,std::pair<unsigned int const ,int>,std::pair<unsigned int,int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@$$CBIH@std@@@std@@U?$pair@$$CBIH@2@U?$pair@IH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBIH@std@@@0@PAU?$pair@$$CBIH@0@$$QAU?$pair@IH@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@$$CBIH@std@@@std@@U?$pair@$$CBIH@2@U?$pair@IH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBIH@std@@@0@PAU?$pair@$$CBIH@0@$$QAU?$pair@IH@0@@Z PROC ; std::_Cons_val<std::allocator<std::pair<unsigned int const ,int> >,std::pair<unsigned int const ,int>,std::pair<unsigned int,int> >, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@9
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@9:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@U?$pair@$$CBIH@std@@@std@@U?$pair@$$CBIH@2@U?$pair@IH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBIH@std@@@0@PAU?$pair@$$CBIH@0@$$QAU?$pair@IH@0@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<unsigned int const ,int> >,std::pair<unsigned int const ,int>,std::pair<unsigned int,int> >
_TEXT	ENDS
PUBLIC	??$make_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ; std::make_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$make_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$make_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z PROC ; std::make_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 2672 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2673 : 	_DEBUG_RANGE(_First, _Last);
; 2674 : 	_DEBUG_POINTER(_Pred);
; 2675 : 	if (1 < _Last - _First)

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	8b ce		 mov	 ecx, esi
  0000d	2b cf		 sub	 ecx, edi
  0000f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00014	f7 e9		 imul	 ecx
  00016	03 d1		 add	 edx, ecx
  00018	c1 fa 04	 sar	 edx, 4
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
  00022	83 f8 01	 cmp	 eax, 1
  00025	7e 12		 jle	 SHORT $LN1@make_heap

; 2676 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2677 : 			_Dist_type(_First), _Val_type(_First));

  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Pred$[ebp]
  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	51		 push	 ecx
  0002f	56		 push	 esi
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z ; std::_Make_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  00036	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@make_heap:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 2678 : 	}

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$make_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ENDP ; std::make_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ; std::_Insertion_sort<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Insertion_sort@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Insertion_sort@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z PROC ; std::_Insertion_sort<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 3676 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3677 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Pred$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000c	6a 00		 push	 0
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Insertion_sort1<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &),_CS_SCHEDULE_DATA>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 3678 : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Insertion_sort@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ENDP ; std::_Insertion_sort<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@U?$pair@HU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@0@@Z ; std::_Cons_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA>,std::pair<int,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@U?$pair@HU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@U?$pair@HU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@0@@Z PROC ; std::_Cons_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA>,std::pair<int,_CS_MINIMAP_DATA> >, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 43		 je	 SHORT $LN7@Cons_val@10
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00018	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00021	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00024	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00027	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0002a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002d	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00030	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00033	56		 push	 esi
  00034	57		 push	 edi
  00035	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00038	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0003b	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]
  0003e	8d 78 20	 lea	 edi, DWORD PTR [eax+32]
  00041	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00046	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00049	f3 a5		 rep movsd
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
$LN7@Cons_val@10:

; 281  : 	}

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??$_Cons_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@U?$pair@HU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@0@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA>,std::pair<int,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *,std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *,std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA>
  0001e	83 c6 1c	 add	 esi, 28			; 0000001cH
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 1c	 add	 edi, 28			; 0000001cH
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *,std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@U1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_NPC_DATA *,_CS_NPC_DATA *,std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@U1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@U1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_CS_NPC_DATA *,_CS_NPC_DATA *,std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 23		 je	 SHORT $LN17@Uninit_mov@2
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL6@Uninit_mov@2:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00013	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA>
  0001e	83 c6 74	 add	 esi, 116		; 00000074H
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	83 c7 74	 add	 edi, 116		; 00000074H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL6@Uninit_mov@2

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 438  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN17@Uninit_mov@2:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00032	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 438  : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Uninit_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@U1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_CS_NPC_DATA *,_CS_NPC_DATA *,std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
_TEXT	ENDS
PUBLIC	??$_Median@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z ; std::_Median<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Median@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Median@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z PROC ; std::_Median<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 3695 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3696 : 	if (40 < _Last - _First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	8b f3		 mov	 esi, ebx
  0000d	2b f1		 sub	 esi, ecx
  0000f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00014	f7 ee		 imul	 esi
  00016	03 d6		 add	 edx, esi
  00018	c1 fa 04	 sar	 edx, 4
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
  00022	83 f8 28	 cmp	 eax, 40			; 00000028H
  00025	7e 7f		 jle	 SHORT $LN2@Median

; 3697 : 		{	// median of nine
; 3698 : 		size_t _Step = (_Last - _First + 1) / 8;

  00027	40		 inc	 eax
  00028	99		 cdq
  00029	57		 push	 edi
  0002a	83 e2 07	 and	 edx, 7
  0002d	03 c2		 add	 eax, edx

; 3699 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  0002f	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  00032	c1 f8 03	 sar	 eax, 3
  00035	8d 3c c5 00 00
	00 00		 lea	 edi, DWORD PTR [eax*8]
  0003c	2b f8		 sub	 edi, eax
  0003e	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]
  00045	03 ff		 add	 edi, edi
  00047	2b f0		 sub	 esi, eax
  00049	52		 push	 edx
  0004a	03 ff		 add	 edi, edi
  0004c	03 ff		 add	 edi, edi
  0004e	03 f6		 add	 esi, esi
  00050	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  00053	03 f6		 add	 esi, esi
  00055	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00058	52		 push	 edx
  00059	50		 push	 eax
  0005a	51		 push	 ecx
  0005b	89 45 08	 mov	 DWORD PTR tv200[ebp], eax
  0005e	e8 00 00 00 00	 call	 ??$_Med3@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z ; std::_Med3<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>

; 3700 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00063	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  00066	50		 push	 eax
  00067	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0006a	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  0006d	51		 push	 ecx
  0006e	50		 push	 eax
  0006f	2b c6		 sub	 eax, esi
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Med3@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z ; std::_Med3<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>

; 3701 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  00077	8b c3		 mov	 eax, ebx
  00079	2b c6		 sub	 eax, esi
  0007b	8b 75 14	 mov	 esi, DWORD PTR __Pred$[ebp]
  0007e	56		 push	 esi
  0007f	53		 push	 ebx
  00080	50		 push	 eax
  00081	2b df		 sub	 ebx, edi
  00083	53		 push	 ebx
  00084	89 45 10	 mov	 DWORD PTR tv203[ebp], eax
  00087	e8 00 00 00 00	 call	 ??$_Med3@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z ; std::_Med3<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>

; 3702 : 		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

  0008c	8b 55 10	 mov	 edx, DWORD PTR tv203[ebp]
  0008f	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00092	8b 4d 08	 mov	 ecx, DWORD PTR tv200[ebp]
  00095	56		 push	 esi
  00096	52		 push	 edx
  00097	50		 push	 eax
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ??$_Med3@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z ; std::_Med3<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  0009e	83 c4 40	 add	 esp, 64			; 00000040H
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx

; 3706 : 	}

  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN2@Median:

; 3703 : 		}
; 3704 : 	else
; 3705 : 		_Med3(_First, _Mid, _Last, _Pred);

  000a6	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000ac	52		 push	 edx
  000ad	53		 push	 ebx
  000ae	50		 push	 eax
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 ??$_Med3@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z ; std::_Med3<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  000b5	83 c4 10	 add	 esp, 16			; 00000010H
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx

; 3706 : 	}

  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
??$_Median@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z ENDP ; std::_Median<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ; std::_Pop_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Pop_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z PROC ; std::_Pop_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 2610 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2611 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2612 : 		_Val_type(_First));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Pred$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000c	6a 00		 push	 0
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Pop_heap_0<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 2613 : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Pop_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ENDP ; std::_Pop_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??_7_CS_REG_GUILD_DATA@@6B@			; _CS_REG_GUILD_DATA::`vftable'
PUBLIC	??1_CS_REG_GUILD_DATA@@UAE@XZ			; _CS_REG_GUILD_DATA::~_CS_REG_GUILD_DATA
PUBLIC	??_R4_CS_REG_GUILD_DATA@@6B@			; _CS_REG_GUILD_DATA::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU_CS_REG_GUILD_DATA@@@8			; _CS_REG_GUILD_DATA `RTTI Type Descriptor'
PUBLIC	??_R3_CS_REG_GUILD_DATA@@8			; _CS_REG_GUILD_DATA::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_CS_REG_GUILD_DATA@@8			; _CS_REG_GUILD_DATA::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_CS_REG_GUILD_DATA@@8		; _CS_REG_GUILD_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_CS_REG_GUILD_DATA@@UAEPAXI@Z:PROC		; _CS_REG_GUILD_DATA::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_CS_REG_GUILD_DATA@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
rdata$r	SEGMENT
??_R1A@?0A@EA@_CS_REG_GUILD_DATA@@8 DD FLAT:??_R0?AU_CS_REG_GUILD_DATA@@@8 ; _CS_REG_GUILD_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_CS_REG_GUILD_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R2_CS_REG_GUILD_DATA@@8
rdata$r	SEGMENT
??_R2_CS_REG_GUILD_DATA@@8 DD FLAT:??_R1A@?0A@EA@_CS_REG_GUILD_DATA@@8 ; _CS_REG_GUILD_DATA::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_CS_REG_GUILD_DATA@@8
rdata$r	SEGMENT
??_R3_CS_REG_GUILD_DATA@@8 DD 00H			; _CS_REG_GUILD_DATA::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_CS_REG_GUILD_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_CS_REG_GUILD_DATA@@@8
_DATA	SEGMENT
??_R0?AU_CS_REG_GUILD_DATA@@@8 DD FLAT:??_7type_info@@6B@ ; _CS_REG_GUILD_DATA `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_CS_REG_GUILD_DATA@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_CS_REG_GUILD_DATA@@6B@
rdata$r	SEGMENT
??_R4_CS_REG_GUILD_DATA@@6B@ DD 00H			; _CS_REG_GUILD_DATA::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU_CS_REG_GUILD_DATA@@@8
	DD	FLAT:??_R3_CS_REG_GUILD_DATA@@8
rdata$r	ENDS
;	COMDAT ??_7_CS_REG_GUILD_DATA@@6B@
CONST	SEGMENT
??_7_CS_REG_GUILD_DATA@@6B@ DD FLAT:??_R4_CS_REG_GUILD_DATA@@6B@ ; _CS_REG_GUILD_DATA::`vftable'
	DD	FLAT:??_E_CS_REG_GUILD_DATA@@UAEPAXI@Z
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
CONST	ENDS
;	COMDAT ??1_CS_REG_GUILD_DATA@@UAE@XZ
_TEXT	SEGMENT
??1_CS_REG_GUILD_DATA@@UAE@XZ PROC			; _CS_REG_GUILD_DATA::~_CS_REG_GUILD_DATA, COMDAT
; _this$ = ecx

; 172  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@

; 173  : 
; 174  : 	};

  00009	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN14@CS_REG_GUI
  0000f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN14@CS_REG_GUI:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00024	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00027	88 46 0c	 mov	 BYTE PTR [esi+12], al
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??1_CS_REG_GUILD_DATA@@UAE@XZ ENDP			; _CS_REG_GUILD_DATA::~_CS_REG_GUILD_DATA
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_G_CS_REG_GUILD_DATA@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_CS_REG_GUILD_DATA@@UAEPAXI@Z PROC			; _CS_REG_GUILD_DATA::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  0000c	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00010	72 0c		 jb	 SHORT $LN16@scalar@7
  00012	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN16@scalar@7:
  0001e	33 c0		 xor	 eax, eax
  00020	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00024	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  0002b	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002e	88 46 0c	 mov	 BYTE PTR [esi+12], al
  00031	74 09		 je	 SHORT $LN28@scalar@7
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00039	83 c4 04	 add	 esp, 4
$LN28@scalar@7:
  0003c	8b c6		 mov	 eax, esi
  0003e	5e		 pop	 esi
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
??_G_CS_REG_GUILD_DATA@@UAEPAXI@Z ENDP			; _CS_REG_GUILD_DATA::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DP@EHCAMHEO@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ ; `string'
PUBLIC	?SetState_REGSIEGE@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetState_REGSIEGE
EXTRN	?GS_GDReqRestartCastleState@@YAXH@Z:PROC	; GS_GDReqRestartCastleState
;	COMDAT ??_C@_0DP@EHCAMHEO@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
CONST	SEGMENT
??_C@_0DP@EHCAMHEO@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ DB '[Castle'
	DB	'Siege] CCastleSiege::SetState_REGSIEGE() - iGAP_SEC < 0', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_REGSIEGE@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bSetRemainMsec$ = 8					; size = 4
?SetState_REGSIEGE@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_REGSIEGE, COMDAT
; _this$ = ecx

; 1636 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1637 : 	if(bSetRemainMsec != FALSE)

  00003	83 7d 08 00	 cmp	 DWORD PTR _bSetRemainMsec$[ebp], 0
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	74 2c		 je	 SHORT $LN2@SetState_R

; 1638 : 	{
; 1639 : 		int iGAP_SEC = GetStateGapSec(CASTLESIEGE_STATE_REGSIEGE);

  0000c	56		 push	 esi
  0000d	6a 01		 push	 1
  0000f	e8 00 00 00 00	 call	 ?GetStateGapSec@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetStateGapSec
  00014	8b f0		 mov	 esi, eax

; 1640 : 
; 1641 : 		if(iGAP_SEC < 0)

  00016	85 f6		 test	 esi, esi
  00018	79 14		 jns	 SHORT $LN1@SetState_R

; 1642 : 		{
; 1643 : 			m_bDoRun = 0;
; 1644 : 			MsgBox("[CastleSiege] CCastleSiege::SetState_REGSIEGE() - iGAP_SEC < 0");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@EHCAMHEO@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
  0001f	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00026	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002b	83 c4 04	 add	 esp, 4
$LN1@SetState_R:

; 1645 : 		}
; 1646 : 
; 1647 : 		m_iCS_REMAIN_MSEC = iGAP_SEC * 1000;

  0002e	69 f6 e8 03 00
	00		 imul	 esi, 1000		; 000003e8H
  00034	89 77 68	 mov	 DWORD PTR [edi+104], esi
  00037	5e		 pop	 esi
$LN2@SetState_R:

; 1648 : 	}
; 1649 : 
; 1650 : 	GS_GDReqRestartCastleState(m_iMapSvrGroup);

  00038	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?GS_GDReqRestartCastleState@@YAXH@Z ; GS_GDReqRestartCastleState
  00041	83 c4 04	 add	 esp, 4
  00044	5f		 pop	 edi

; 1651 : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?SetState_REGSIEGE@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_REGSIEGE
_TEXT	ENDS
PUBLIC	??_C@_0DN@NGBGKOLO@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ ; `string'
PUBLIC	?SetState_IDLE_2@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetState_IDLE_2
;	COMDAT ??_C@_0DN@NGBGKOLO@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
CONST	SEGMENT
??_C@_0DN@NGBGKOLO@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ DB '[Castle'
	DB	'Siege] CCastleSiege::SetState_IDLE_2() - iGAP_SEC < 0', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_IDLE_2@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bSetRemainMsec$ = 8					; size = 4
?SetState_IDLE_2@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_IDLE_2, COMDAT
; _this$ = ecx

; 1654 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 	if(bSetRemainMsec != FALSE)

  00003	83 7d 08 00	 cmp	 DWORD PTR _bSetRemainMsec$[ebp], 0
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	74 2c		 je	 SHORT $LN2@SetState_I@2

; 1656 : 	{
; 1657 : 		int iGAP_SEC = GetStateGapSec(CASTLESIEGE_STATE_IDLE_2);

  0000c	56		 push	 esi
  0000d	6a 02		 push	 2
  0000f	e8 00 00 00 00	 call	 ?GetStateGapSec@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetStateGapSec
  00014	8b f0		 mov	 esi, eax

; 1658 : 
; 1659 : 		if(iGAP_SEC < 0)

  00016	85 f6		 test	 esi, esi
  00018	79 14		 jns	 SHORT $LN1@SetState_I@2

; 1660 : 		{
; 1661 : 			m_bDoRun = 0;
; 1662 : 			MsgBox("[CastleSiege] CCastleSiege::SetState_IDLE_2() - iGAP_SEC < 0");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@NGBGKOLO@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
  0001f	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00026	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002b	83 c4 04	 add	 esp, 4
$LN1@SetState_I@2:

; 1663 : 		}
; 1664 : 
; 1665 : 		m_iCS_REMAIN_MSEC = iGAP_SEC * 1000;

  0002e	69 f6 e8 03 00
	00		 imul	 esi, 1000		; 000003e8H
  00034	89 77 68	 mov	 DWORD PTR [edi+104], esi
  00037	5e		 pop	 esi
$LN2@SetState_I@2:
  00038	5f		 pop	 edi

; 1666 : 	}
; 1667 : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?SetState_IDLE_2@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_IDLE_2
_TEXT	ENDS
PUBLIC	??_C@_0DO@DNEHGNON@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ ; `string'
PUBLIC	?SetState_REGMARK@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetState_REGMARK
;	COMDAT ??_C@_0DO@DNEHGNON@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
CONST	SEGMENT
??_C@_0DO@DNEHGNON@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ DB '[Castle'
	DB	'Siege] CCastleSiege::SetState_REGMARK() - iGAP_SEC < 0', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_REGMARK@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bSetRemainMsec$ = 8					; size = 4
?SetState_REGMARK@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_REGMARK, COMDAT
; _this$ = ecx

; 1670 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1671 : 	if(bSetRemainMsec != FALSE)

  00003	83 7d 08 00	 cmp	 DWORD PTR _bSetRemainMsec$[ebp], 0
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	74 2c		 je	 SHORT $LN2@SetState_R@2

; 1672 : 	{
; 1673 : 		int iGAP_SEC = GetStateGapSec(CASTLESIEGE_STATE_REGMARK);

  0000c	56		 push	 esi
  0000d	6a 03		 push	 3
  0000f	e8 00 00 00 00	 call	 ?GetStateGapSec@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetStateGapSec
  00014	8b f0		 mov	 esi, eax

; 1674 : 
; 1675 : 		if(iGAP_SEC < 0)

  00016	85 f6		 test	 esi, esi
  00018	79 14		 jns	 SHORT $LN1@SetState_R@2

; 1676 : 		{
; 1677 : 			m_bDoRun = 0;
; 1678 : 			MsgBox("[CastleSiege] CCastleSiege::SetState_REGMARK() - iGAP_SEC < 0");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@DNEHGNON@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
  0001f	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00026	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002b	83 c4 04	 add	 esp, 4
$LN1@SetState_R@2:

; 1679 : 		}
; 1680 : 
; 1681 : 		m_iCS_REMAIN_MSEC = iGAP_SEC * 1000;

  0002e	69 f6 e8 03 00
	00		 imul	 esi, 1000		; 000003e8H
  00034	89 77 68	 mov	 DWORD PTR [edi+104], esi
  00037	5e		 pop	 esi
$LN2@SetState_R@2:
  00038	5f		 pop	 edi

; 1682 : 	}
; 1683 : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?SetState_REGMARK@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_REGMARK
_TEXT	ENDS
PUBLIC	??_C@_0DN@BPECOOG@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ ; `string'
PUBLIC	?SetState_IDLE_3@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetState_IDLE_3
;	COMDAT ??_C@_0DN@BPECOOG@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
CONST	SEGMENT
??_C@_0DN@BPECOOG@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ DB '[CastleS'
	DB	'iege] CCastleSiege::SetState_IDLE_3() - iGAP_SEC < 0', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_IDLE_3@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bSetRemainMsec$ = 8					; size = 4
?SetState_IDLE_3@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_IDLE_3, COMDAT
; _this$ = ecx

; 1686 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1687 : 	if(bSetRemainMsec != FALSE)

  00003	83 7d 08 00	 cmp	 DWORD PTR _bSetRemainMsec$[ebp], 0
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	74 2c		 je	 SHORT $LN2@SetState_I@3

; 1688 : 	{
; 1689 : 		int iGAP_SEC = GetStateGapSec(CASTLESIEGE_STATE_IDLE_3);

  0000c	56		 push	 esi
  0000d	6a 04		 push	 4
  0000f	e8 00 00 00 00	 call	 ?GetStateGapSec@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetStateGapSec
  00014	8b f0		 mov	 esi, eax

; 1690 : 
; 1691 : 		if(iGAP_SEC < 0)

  00016	85 f6		 test	 esi, esi
  00018	79 14		 jns	 SHORT $LN1@SetState_I@3

; 1692 : 		{
; 1693 : 			m_bDoRun = 0;
; 1694 : 			MsgBox("[CastleSiege] CCastleSiege::SetState_IDLE_3() - iGAP_SEC < 0");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@BPECOOG@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
  0001f	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00026	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002b	83 c4 04	 add	 esp, 4
$LN1@SetState_I@3:

; 1695 : 		}
; 1696 : 
; 1697 : 		m_iCS_REMAIN_MSEC = iGAP_SEC * 1000;

  0002e	69 f6 e8 03 00
	00		 imul	 esi, 1000		; 000003e8H
  00034	89 77 68	 mov	 DWORD PTR [edi+104], esi
  00037	5e		 pop	 esi
$LN2@SetState_I@3:
  00038	5f		 pop	 edi

; 1698 : 	}
; 1699 : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?SetState_IDLE_3@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_IDLE_3
_TEXT	ENDS
PUBLIC	??_C@_0FC@JJCABAKE@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@ ; `string'
PUBLIC	??_C@_0FF@IKADDNNL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EI@LGJKELKE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EO@KCAMBNJE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0GD@ICLIBPMM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@ ; `string'
PUBLIC	?SetCastleInitData@CCastleSiege@@QAEHPAUCSP_ANS_CSINITDATA@@@Z ; CCastleSiege::SetCastleInitData
;	COMDAT ??_C@_0FC@JJCABAKE@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@
CONST	SEGMENT
??_C@_0FC@JJCABAKE@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@ DB '[Castle'
	DB	'Siege] CCastleSiege::SetCastleInitData() - iSTART_DATE_NUM > '
	DB	'iEND_DATE_NUM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@IKADDNNL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0FF@IKADDNNL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Siege Schedule End Date (%d'
	DB	'-%d-%d(%d:%d:%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@LGJKELKE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EI@LGJKELKE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Siege Schedule Date (%d-%d-'
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@KCAMBNJE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EO@KCAMBNJE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Siege Schedule Start Date ('
	DB	'%d-%d-%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@ICLIBPMM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@
CONST	SEGMENT
??_C@_0GD@ICLIBPMM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@ DB '[Castle'
	DB	'Siege] CCastleSiege::SetCastleInitData() - m_iCastleDataLoadS'
	DB	'tate != CASTLESIEGE_DATALOAD_3', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetCastleInitData@CCastleSiege@@QAEHPAUCSP_ANS_CSINITDATA@@@Z
_TEXT	SEGMENT
_stTime$ = -16						; size = 16
tv424 = 8						; size = 4
_lpMsg$ = 8						; size = 4
?SetCastleInitData@CCastleSiege@@QAEHPAUCSP_ANS_CSINITDATA@@@Z PROC ; CCastleSiege::SetCastleInitData, COMDAT
; _this$ = ecx

; 2575 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 2576 : 	if(m_iCastleDataLoadState != 3)

  00009	83 7e 1c 03	 cmp	 DWORD PTR [esi+28], 3
  0000d	74 19		 je	 SHORT $LN3@SetCastleI

; 2577 : 	{
; 2578 : 		LogAddC(2,"[CastleSiege] CCastleSiege::SetCastleInitData() - m_iCastleDataLoadState != CASTLESIEGE_DATALOAD_3");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0GD@ICLIBPMM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@
  00014	6a 02		 push	 2
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0001c	83 c4 08	 add	 esp, 8
$LN6@SetCastleI:

; 2579 : 		return false;

  0001f	33 c0		 xor	 eax, eax
  00021	5e		 pop	 esi

; 2636 : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN3@SetCastleI:

; 2580 : 	}
; 2581 : 
; 2582 : 	if(lpMsg == NULL)

  00028	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  0002b	85 c0		 test	 eax, eax

; 2583 : 		return false;

  0002d	74 f0		 je	 SHORT $LN6@SetCastleI

; 2584 : 
; 2585 : 	memset(&m_tmStartDate,0x00,sizeof(m_tmStartDate));

  0002f	33 c9		 xor	 ecx, ecx
  00031	89 8e b4 00 00
	00		 mov	 DWORD PTR [esi+180], ecx
  00037	89 8e b8 00 00
	00		 mov	 DWORD PTR [esi+184], ecx
  0003d	89 8e bc 00 00
	00		 mov	 DWORD PTR [esi+188], ecx
  00043	89 8e c0 00 00
	00		 mov	 DWORD PTR [esi+192], ecx

; 2586 : 	memset(&m_tmEndDate,0x00,sizeof(m_tmEndDate));

  00049	89 8e c4 00 00
	00		 mov	 DWORD PTR [esi+196], ecx
  0004f	89 8e c8 00 00
	00		 mov	 DWORD PTR [esi+200], ecx
  00055	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx
  0005b	89 8e d0 00 00
	00		 mov	 DWORD PTR [esi+208], ecx

; 2587 : 
; 2588 : 	m_tmStartDate.wYear = lpMsg->wStartYear;

  00061	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  00065	66 89 8e b4 00
	00 00		 mov	 WORD PTR [esi+180], cx

; 2589 : 	m_tmStartDate.wMonth = lpMsg->btStartMonth;

  0006c	0f b6 50 0c	 movzx	 edx, BYTE PTR [eax+12]
  00070	66 89 96 b6 00
	00 00		 mov	 WORD PTR [esi+182], dx

; 2590 : 	m_tmStartDate.wDay = lpMsg->btStartDay;

  00077	0f b6 48 0d	 movzx	 ecx, BYTE PTR [eax+13]
  0007b	66 89 8e ba 00
	00 00		 mov	 WORD PTR [esi+186], cx

; 2591 : 
; 2592 : 	m_tmEndDate.wYear = lpMsg->wEndYear;

  00082	0f b7 50 0e	 movzx	 edx, WORD PTR [eax+14]
  00086	66 89 96 c4 00
	00 00		 mov	 WORD PTR [esi+196], dx

; 2593 : 	m_tmEndDate.wMonth = lpMsg->btEndMonth;

  0008d	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  00091	66 89 8e c6 00
	00 00		 mov	 WORD PTR [esi+198], cx

; 2594 : 	m_tmEndDate.wDay = lpMsg->btEndDay;

  00098	0f b6 50 11	 movzx	 edx, BYTE PTR [eax+17]
  0009c	66 89 96 ca 00
	00 00		 mov	 WORD PTR [esi+202], dx

; 2595 : 
; 2596 : 	m_btIsSiegeGuildList = lpMsg->btIsSiegeGuildList;

  000a3	0f b6 48 12	 movzx	 ecx, BYTE PTR [eax+18]
  000a7	88 8e d4 00 00
	00		 mov	 BYTE PTR [esi+212], cl

; 2597 : 	m_btIsSiegeEnded = lpMsg->btIsSiegeEnded;

  000ad	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  000b0	88 96 d5 00 00
	00		 mov	 BYTE PTR [esi+213], dl

; 2598 : 	m_btIsCastleOccupied = lpMsg->btIsCastleOccupied;

  000b6	0f b6 48 14	 movzx	 ecx, BYTE PTR [eax+20]
  000ba	88 8e d6 00 00
	00		 mov	 BYTE PTR [esi+214], cl

; 2599 : 
; 2600 : 	memset(m_szCastleOwnerGuild,0x00,sizeof(m_szCastleOwnerGuild));

  000c0	33 c9		 xor	 ecx, ecx
  000c2	89 8e d7 00 00
	00		 mov	 DWORD PTR [esi+215], ecx
  000c8	89 8e db 00 00
	00		 mov	 DWORD PTR [esi+219], ecx
  000ce	89 8e df 00 00
	00		 mov	 DWORD PTR [esi+223], ecx
  000d4	89 8e e3 00 00
	00		 mov	 DWORD PTR [esi+227], ecx

; 2601 : 	memcpy(m_szCastleOwnerGuild,lpMsg->szCastleOwnGuild,sizeof(lpMsg->szCastleOwnGuild));

  000da	8b 50 15	 mov	 edx, DWORD PTR [eax+21]
  000dd	89 96 d7 00 00
	00		 mov	 DWORD PTR [esi+215], edx
  000e3	8b 48 19	 mov	 ecx, DWORD PTR [eax+25]
  000e6	89 8e db 00 00
	00		 mov	 DWORD PTR [esi+219], ecx

; 2602 : 
; 2603 : 	m_i64CastleMoney = lpMsg->i64CastleMoney;

  000ec	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  000ef	89 96 e8 00 00
	00		 mov	 DWORD PTR [esi+232], edx
  000f5	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000f8	89 8e ec 00 00
	00		 mov	 DWORD PTR [esi+236], ecx

; 2604 : 
; 2605 : 	m_iTaxRateChaos = lpMsg->iTaxRateChaos;

  000fe	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00101	53		 push	 ebx

; 2606 : 	m_iTaxRateStore = lpMsg->iTaxRateStore;
; 2607 : 	m_iTaxHuntZone = lpMsg->iTaxHuntZone;
; 2608 : 
; 2609 : 	int iSTART_DATE_NUM = MACRO2(( MACRO1(m_tmStartDate.wDay) | MACRO1(m_tmStartDate.wMonth) << 8 ) & 0xFFFF ) | MACRO2(m_tmStartDate.wYear) << 16;
; 2610 : 	int iEND_DATE_NUM = MACRO2(( MACRO1(m_tmEndDate.wDay) | MACRO1(m_tmEndDate.wMonth) << 8 ) & 0xFFFF ) | MACRO2(m_tmEndDate.wYear) << 16;

  00102	0f b7 9e c6 00
	00 00		 movzx	 ebx, WORD PTR [esi+198]
  00109	89 96 f0 00 00
	00		 mov	 DWORD PTR [esi+240], edx
  0010f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00112	57		 push	 edi
  00113	0f b7 be b6 00
	00 00		 movzx	 edi, WORD PTR [esi+182]
  0011a	89 8e f4 00 00
	00		 mov	 DWORD PTR [esi+244], ecx
  00120	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00123	0f b7 86 b4 00
	00 00		 movzx	 eax, WORD PTR [esi+180]
  0012a	0f b7 8e ba 00
	00 00		 movzx	 ecx, WORD PTR [esi+186]
  00131	89 96 f8 00 00
	00		 mov	 DWORD PTR [esi+248], edx
  00137	0f b7 96 c4 00
	00 00		 movzx	 edx, WORD PTR [esi+196]
  0013e	c1 e0 08	 shl	 eax, 8
  00141	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  00147	0b f8		 or	 edi, eax
  00149	0f b7 86 ca 00
	00 00		 movzx	 eax, WORD PTR [esi+202]
  00150	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00156	c1 e2 08	 shl	 edx, 8
  00159	0b da		 or	 ebx, edx

; 2611 : 
; 2612 : 	m_tmNowDate = m_tmStartDate;

  0015b	8b 96 b8 00 00
	00		 mov	 edx, DWORD PTR [esi+184]
  00161	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00167	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0016c	c1 e7 08	 shl	 edi, 8
  0016f	0b f9		 or	 edi, ecx
  00171	8b 8e b4 00 00
	00		 mov	 ecx, DWORD PTR [esi+180]
  00177	c1 e3 08	 shl	 ebx, 8
  0017a	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
  0017d	8b 8e bc 00 00
	00		 mov	 ecx, DWORD PTR [esi+188]
  00183	0b d8		 or	 ebx, eax
  00185	8d 46 2c	 lea	 eax, DWORD PTR [esi+44]
  00188	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0018b	8b 96 c0 00 00
	00		 mov	 edx, DWORD PTR [esi+192]
  00191	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00194	89 45 08	 mov	 DWORD PTR tv424[ebp], eax
  00197	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 2613 : 
; 2614 : 	_SYSTEMTIME stTime;
; 2615 : 
; 2616 : 	GetStateDateTime(CASTLESIEGE_STATE_ENDCYCLE,&stTime);

  0019a	8d 45 f0	 lea	 eax, DWORD PTR _stTime$[ebp]
  0019d	50		 push	 eax
  0019e	6a 09		 push	 9
  001a0	8b ce		 mov	 ecx, esi
  001a2	e8 00 00 00 00	 call	 ?GetStateDateTime@CCastleSiege@@QAEXHPAU_SYSTEMTIME@@@Z ; CCastleSiege::GetStateDateTime

; 2617 : 
; 2618 : 	LogAddTD("[CastleSiege] CCastleSiege::LoadData() - Siege Schedule Start Date (%d-%d-%d)",
; 2619 : 		m_tmStartDate.wYear,m_tmStartDate.wMonth,m_tmStartDate.wDay);

  001a7	0f b7 8e ba 00
	00 00		 movzx	 ecx, WORD PTR [esi+186]
  001ae	0f b7 96 b6 00
	00 00		 movzx	 edx, WORD PTR [esi+182]
  001b5	0f b7 86 b4 00
	00 00		 movzx	 eax, WORD PTR [esi+180]
  001bc	51		 push	 ecx
  001bd	52		 push	 edx
  001be	50		 push	 eax
  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@KCAMBNJE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2620 : 
; 2621 : 	LogAddTD("[CastleSiege] CCastleSiege::LoadData() - Siege Schedule Date (%d-%d-%d)",
; 2622 : 		stTime.wDay,stTime.wHour,stTime.wMinute);

  001ca	0f b7 45 fa	 movzx	 eax, WORD PTR _stTime$[ebp+10]
  001ce	0f b7 4d f8	 movzx	 ecx, WORD PTR _stTime$[ebp+8]
  001d2	0f b7 55 f6	 movzx	 edx, WORD PTR _stTime$[ebp+6]
  001d6	50		 push	 eax
  001d7	51		 push	 ecx
  001d8	52		 push	 edx
  001d9	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@LGJKELKE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  001de	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2623 : 
; 2624 : 	GetNextDay(&m_tmNowDate,stTime.wDay,stTime.wHour,stTime.wMinute,0);

  001e4	0f b7 45 fa	 movzx	 eax, WORD PTR _stTime$[ebp+10]
  001e8	8b 4d 08	 mov	 ecx, DWORD PTR tv424[ebp]
  001eb	83 c4 20	 add	 esp, 32			; 00000020H
  001ee	6a 00		 push	 0
  001f0	50		 push	 eax
  001f1	0f b7 45 f8	 movzx	 eax, WORD PTR _stTime$[ebp+8]
  001f5	50		 push	 eax
  001f6	0f b7 45 f6	 movzx	 eax, WORD PTR _stTime$[ebp+6]
  001fa	50		 push	 eax
  001fb	51		 push	 ecx
  001fc	8b ce		 mov	 ecx, esi
  001fe	e8 00 00 00 00	 call	 ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay

; 2625 : 
; 2626 : 	LogAddTD("[CastleSiege] CCastleSiege::LoadData() - Siege Schedule End Date (%d-%d-%d(%d:%d:%d)",
; 2627 : 		m_tmNowDate.wYear,m_tmNowDate.wMonth,m_tmNowDate.wDay,m_tmNowDate.wHour,m_tmNowDate.wMinute,m_tmNowDate.wSecond);

  00203	0f b7 56 38	 movzx	 edx, WORD PTR [esi+56]
  00207	0f b7 46 36	 movzx	 eax, WORD PTR [esi+54]
  0020b	0f b7 4e 34	 movzx	 ecx, WORD PTR [esi+52]
  0020f	52		 push	 edx
  00210	0f b7 56 32	 movzx	 edx, WORD PTR [esi+50]
  00214	50		 push	 eax
  00215	0f b7 46 2e	 movzx	 eax, WORD PTR [esi+46]
  00219	51		 push	 ecx
  0021a	8b 4d 08	 mov	 ecx, DWORD PTR tv424[ebp]
  0021d	52		 push	 edx
  0021e	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00221	50		 push	 eax
  00222	52		 push	 edx
  00223	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@IKADDNNL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  00228	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0022e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2628 : 
; 2629 : 	if(iSTART_DATE_NUM > iEND_DATE_NUM)

  00231	3b fb		 cmp	 edi, ebx
  00233	5f		 pop	 edi
  00234	5b		 pop	 ebx
  00235	7e 19		 jle	 SHORT $LN1@SetCastleI

; 2630 : 	{
; 2631 : 		LogAddC(2,"[CastleSiege] CCastleSiege::SetCastleInitData() - iSTART_DATE_NUM > iEND_DATE_NUM");

  00237	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@JJCABAKE@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@
  0023c	6a 02		 push	 2
  0023e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00244	83 c4 08	 add	 esp, 8

; 2632 : 		return false;

  00247	33 c0		 xor	 eax, eax
  00249	5e		 pop	 esi

; 2636 : }

  0024a	8b e5		 mov	 esp, ebp
  0024c	5d		 pop	 ebp
  0024d	c2 04 00	 ret	 4
$LN1@SetCastleI:

; 2633 : 	}
; 2634 : 
; 2635 : 	return true;

  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	5e		 pop	 esi

; 2636 : }

  00256	8b e5		 mov	 esp, ebp
  00258	5d		 pop	 ebp
  00259	c2 04 00	 ret	 4
?SetCastleInitData@CCastleSiege@@QAEHPAUCSP_ANS_CSINITDATA@@@Z ENDP ; CCastleSiege::SetCastleInitData
_TEXT	ENDS
PUBLIC	??_C@_0EK@KCBLHNIJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3PayF@ ; `string'
PUBLIC	??_C@_0GB@HIFLOIMF@?$FLCastleSiege?$FN?5CCastleSiege?3?3PayF@ ; `string'
PUBLIC	?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z	; CCastleSiege::PayForUpgradeDbNPC
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?GCAnsNpcUpgrade@@YAXHHHHHH@Z:PROC		; GCAnsNpcUpgrade
;	COMDAT ??_C@_0EK@KCBLHNIJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3PayF@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
CONST	SEGMENT
??_C@_0EK@KCBLHNIJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3PayF@ DB '[Castle'
	DB	'Siege] CCastleSiege::PayForUpgradeDbNPC() ERROR - bIsLive == '
	DB	'FALSE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@HIFLOIMF@?$FLCastleSiege?$FN?5CCastleSiege?3?3PayF@
CONST	SEGMENT
??_C@_0GB@HIFLOIMF@?$FLCastleSiege?$FN?5CCastleSiege?3?3PayF@ DB '[Castle'
	DB	'Siege] CCastleSiege::PayForUpgradeDbNPC() ERROR - lpMsg->iNpc'
	DB	'UpIndex is Out of Bound : %d', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z$0
__ehfuncinfo$?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z
_TEXT	SEGMENT
_pNpcData$ = -132					; size = 116
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iIndex$ = 8						; size = 4
_iNpcType$ = 12						; size = 4
_iNpcIndex$ = 16					; size = 4
_iNpcUpType$ = 20					; size = 4
_iNpcUpValue$ = 24					; size = 4
_iNpcUpIndex$ = 28					; size = 4
?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z PROC	; CCastleSiege::PayForUpgradeDbNPC, COMDAT
; _this$ = ecx

; 3974 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 78	 sub	 esp, 120		; 00000078H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx

; 3975 : 
; 3976 : 	int iNEED_GEMOFDEFEND = 0;
; 3977 : 	int iNEED_MONEY = 0;
; 3978 : 
; 3979 : 	if(CS_UPGRADE_RANGE(iNpcUpIndex) == FALSE)

  0002d	8b 7d 1c	 mov	 edi, DWORD PTR _iNpcUpIndex$[ebp]
  00030	85 ff		 test	 edi, edi
  00032	78 0c		 js	 SHORT $LN61@PayForUpgr
  00034	33 c0		 xor	 eax, eax
  00036	83 ff 02	 cmp	 edi, 2
  00039	0f 9e c0	 setle	 al
  0003c	85 c0		 test	 eax, eax
  0003e	75 27		 jne	 SHORT $LN27@PayForUpgr
$LN61@PayForUpgr:

; 3980 : 	{
; 3981 : 		LogAddC(2,"[CastleSiege] CCastleSiege::PayForUpgradeDbNPC() ERROR - lpMsg->iNpcUpIndex is Out of Bound : %d",
; 3982 : 			iNpcUpIndex);

  00040	57		 push	 edi
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0GB@HIFLOIMF@?$FLCastleSiege?$FN?5CCastleSiege?3?3PayF@
  00046	6a 02		 push	 2
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3983 : 		return false;

  00051	33 c0		 xor	 eax, eax

; 4126 : }

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 18 00	 ret	 24			; 00000018H
$LN27@PayForUpgr:

; 3984 : 	}
; 3985 : 
; 3986 : 	_CS_NPC_DATA pNpcData;

  00067	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _pNpcData$[ebp]
  0006d	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@XZ	; _CS_NPC_DATA::_CS_NPC_DATA

; 3987 : 
; 3988 : 	int bIsLive = GetNpcData(iNpcType,iNpcIndex,(_CS_NPC_DATA &)pNpcData);

  00072	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  00075	8b 75 0c	 mov	 esi, DWORD PTR _iNpcType$[ebp]
  00078	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _pNpcData$[ebp]
  0007e	50		 push	 eax
  0007f	51		 push	 ecx
  00080	56		 push	 esi
  00081	8b cb		 mov	 ecx, ebx
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008a	e8 00 00 00 00	 call	 ?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z ; CCastleSiege::GetNpcData

; 3989 : 
; 3990 : 	if(bIsLive == FALSE)

  0008f	85 c0		 test	 eax, eax
  00091	75 2a		 jne	 SHORT $LN26@PayForUpgr

; 3991 : 	{
; 3992 : 		LogAddC(2,"[CastleSiege] CCastleSiege::PayForUpgradeDbNPC() ERROR - bIsLive == FALSE",
; 3993 : 			iNpcIndex);

  00093	8b 55 10	 mov	 edx, DWORD PTR _iNpcIndex$[ebp]
  00096	52		 push	 edx
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KCBLHNIJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3PayF@
  0009c	6a 02		 push	 2
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3994 : 		return false;

  000a7	33 c0		 xor	 eax, eax

; 4126 : }

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 18 00	 ret	 24			; 00000018H
$LN26@PayForUpgr:

; 3995 : 	}
; 3996 : 
; 3997 : 	switch(iNpcType)

  000bd	8b c6		 mov	 eax, esi
  000bf	2d 15 01 00 00	 sub	 eax, 277		; 00000115H
  000c4	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  000c7	0f 84 08 02 00
	00		 je	 $LN23@PayForUpgr
  000cd	83 e8 06	 sub	 eax, 6
  000d0	0f 85 5d 03 00
	00		 jne	 $LN21@PayForUpgr

; 4047 : 		}
; 4048 : 		break;
; 4049 : 	case 283:
; 4050 : 		{
; 4051 : 			switch(iNpcUpType)

  000d6	8b 4d 14	 mov	 ecx, DWORD PTR _iNpcUpType$[ebp]
  000d9	8b c1		 mov	 eax, ecx
  000db	48		 dec	 eax
  000dc	0f 84 55 01 00
	00		 je	 $LN10@PayForUpgr
  000e2	48		 dec	 eax
  000e3	0f 84 b0 00 00
	00		 je	 $LN7@PayForUpgr
  000e9	48		 dec	 eax
  000ea	74 31		 je	 SHORT $LN4@PayForUpgr

; 4111 : 						return false;
; 4112 : 					}
; 4113 : 					gObj[iIndex].Money -= iNEED_MONEY;
; 4114 : 				}
; 4115 : 				break;
; 4116 : 			default:
; 4117 : 				GCAnsNpcUpgrade(iIndex,5,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  000ec	8b 45 18	 mov	 eax, DWORD PTR _iNpcUpValue$[ebp]
  000ef	50		 push	 eax
  000f0	51		 push	 ecx
  000f1	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  000f4	51		 push	 ecx
  000f5	68 1b 01 00 00	 push	 283			; 0000011bH
  000fa	8b d6		 mov	 edx, esi
  000fc	6a 05		 push	 5
  000fe	52		 push	 edx
  000ff	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  00104	83 c4 18	 add	 esp, 24			; 00000018H
  00107	33 c0		 xor	 eax, eax

; 4126 : }

  00109	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00113	59		 pop	 ecx
  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 18 00	 ret	 24			; 00000018H
$LN4@PayForUpgr:

; 4090 : 						return false;
; 4091 : 					}
; 4092 : 					gObj[iIndex].Money -= iNEED_MONEY;
; 4093 : 				}
; 4094 : 				break;
; 4095 : 			case 3:
; 4096 : 				{
; 4097 : 					iNEED_GEMOFDEFEND = g_iNpcUpMaxHP_CSTATUE[iNpcUpIndex][1];

  0011d	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]

; 4098 : 					iNEED_MONEY = g_iNpcUpMaxHP_CSTATUE[iNpcUpIndex][2];
; 4099 : 					
; 4100 : 					if(gObj[iIndex].Money < iNEED_MONEY)

  00120	8b fe		 mov	 edi, esi
  00122	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  00128	03 c0		 add	 eax, eax
  0012a	8b 9c 00 08 00
	00 00		 mov	 ebx, DWORD PTR ?g_iNpcUpMaxHP_CSTATUE@@3PAY02HA[eax+eax+8]
  00131	8b 8c 00 04 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcUpMaxHP_CSTATUE@@3PAY02HA[eax+eax+4]
  00138	03 c0		 add	 eax, eax
  0013a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0013f	39 9c 07 cc 00
	00 00		 cmp	 DWORD PTR [edi+eax+204], ebx
  00146	7d 0f		 jge	 SHORT $LN3@PayForUpgr

; 4101 : 					{
; 4102 : 						GCAnsNpcUpgrade(iIndex,3,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  00148	8b 4d 18	 mov	 ecx, DWORD PTR _iNpcUpValue$[ebp]
  0014b	8b 55 10	 mov	 edx, DWORD PTR _iNpcIndex$[ebp]
  0014e	51		 push	 ecx
  0014f	6a 03		 push	 3
  00151	52		 push	 edx

; 4103 : 						return false;

  00152	e9 16 01 00 00	 jmp	 $LN67@PayForUpgr
$LN3@PayForUpgr:

; 4104 : 					}
; 4105 : 					
; 4106 : 					int bDelGemOfDefend = DelGemOfDefend(iIndex,iNEED_GEMOFDEFEND);

  00157	51		 push	 ecx
  00158	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0015b	56		 push	 esi
  0015c	e8 00 00 00 00	 call	 ?DelGemOfDefend@CCastleSiege@@QAEHHH@Z ; CCastleSiege::DelGemOfDefend

; 4107 : 					
; 4108 : 					if(bDelGemOfDefend == FALSE)

  00161	85 c0		 test	 eax, eax
  00163	0f 85 be 02 00
	00		 jne	 $LN18@PayForUpgr

; 4109 : 					{
; 4110 : 						GCAnsNpcUpgrade(iIndex,4,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  00169	8b 45 18	 mov	 eax, DWORD PTR _iNpcUpValue$[ebp]
  0016c	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  0016f	50		 push	 eax
  00170	6a 03		 push	 3
  00172	51		 push	 ecx
  00173	68 1b 01 00 00	 push	 283			; 0000011bH
  00178	6a 04		 push	 4
  0017a	56		 push	 esi
  0017b	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  00180	83 c4 18	 add	 esp, 24			; 00000018H
  00183	33 c0		 xor	 eax, eax

; 4126 : }

  00185	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00188	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018f	59		 pop	 ecx
  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	5b		 pop	 ebx
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c2 18 00	 ret	 24			; 00000018H
$LN7@PayForUpgr:

; 4069 : 						return false;
; 4070 : 					}
; 4071 : 					gObj[iIndex].Money -= iNEED_MONEY;
; 4072 : 				}
; 4073 : 				break;
; 4074 : 			case 2:
; 4075 : 				{
; 4076 : 					iNEED_GEMOFDEFEND = g_iNpcUpRgLevel_CSTATUE[iNpcUpIndex][1];
; 4077 : 					iNEED_MONEY = g_iNpcUpRgLevel_CSTATUE[iNpcUpIndex][2];
; 4078 : 
; 4079 : 					if(gObj[iIndex].Money < iNEED_MONEY)

  00199	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019f	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  001a2	8b fe		 mov	 edi, esi
  001a4	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  001aa	03 c0		 add	 eax, eax
  001ac	8b 9c 00 08 00
	00 00		 mov	 ebx, DWORD PTR ?g_iNpcUpRgLevel_CSTATUE@@3PAY02HA[eax+eax+8]
  001b3	8b 8c 00 04 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcUpRgLevel_CSTATUE@@3PAY02HA[eax+eax+4]
  001ba	03 c0		 add	 eax, eax
  001bc	39 9c 17 cc 00
	00 00		 cmp	 DWORD PTR [edi+edx+204], ebx
  001c3	7d 30		 jge	 SHORT $LN6@PayForUpgr

; 4080 : 					{
; 4081 : 						GCAnsNpcUpgrade(iIndex,3,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  001c5	8b 45 18	 mov	 eax, DWORD PTR _iNpcUpValue$[ebp]
  001c8	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  001cb	50		 push	 eax
  001cc	6a 02		 push	 2
  001ce	51		 push	 ecx
  001cf	68 1b 01 00 00	 push	 283			; 0000011bH
  001d4	6a 03		 push	 3
  001d6	56		 push	 esi
  001d7	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  001dc	83 c4 18	 add	 esp, 24			; 00000018H

; 4082 : 						return false;

  001df	33 c0		 xor	 eax, eax

; 4126 : }

  001e1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001eb	59		 pop	 ecx
  001ec	5f		 pop	 edi
  001ed	5e		 pop	 esi
  001ee	5b		 pop	 ebx
  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c2 18 00	 ret	 24			; 00000018H
$LN6@PayForUpgr:

; 4083 : 					}
; 4084 : 
; 4085 : 					int bDelGemOfDefend = DelGemOfDefend(iIndex,iNEED_GEMOFDEFEND);

  001f5	51		 push	 ecx
  001f6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f9	56		 push	 esi
  001fa	e8 00 00 00 00	 call	 ?DelGemOfDefend@CCastleSiege@@QAEHHH@Z ; CCastleSiege::DelGemOfDefend

; 4086 : 					
; 4087 : 					if(bDelGemOfDefend == FALSE)

  001ff	85 c0		 test	 eax, eax
  00201	0f 85 20 02 00
	00		 jne	 $LN18@PayForUpgr

; 4088 : 					{
; 4089 : 						GCAnsNpcUpgrade(iIndex,4,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  00207	8b 55 18	 mov	 edx, DWORD PTR _iNpcUpValue$[ebp]
  0020a	8b 45 10	 mov	 eax, DWORD PTR _iNpcIndex$[ebp]
  0020d	52		 push	 edx
  0020e	6a 02		 push	 2
  00210	50		 push	 eax
  00211	68 1b 01 00 00	 push	 283			; 0000011bH
  00216	6a 04		 push	 4
  00218	56		 push	 esi
  00219	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  0021e	83 c4 18	 add	 esp, 24			; 00000018H
  00221	33 c0		 xor	 eax, eax

; 4126 : }

  00223	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00226	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022d	59		 pop	 ecx
  0022e	5f		 pop	 edi
  0022f	5e		 pop	 esi
  00230	5b		 pop	 ebx
  00231	8b e5		 mov	 esp, ebp
  00233	5d		 pop	 ebp
  00234	c2 18 00	 ret	 24			; 00000018H
$LN10@PayForUpgr:

; 4052 : 			{
; 4053 : 			case 1:
; 4054 : 				{
; 4055 : 					iNEED_GEMOFDEFEND = g_iNpcUpDfLevel_CSTATUE[iNpcUpIndex][1];
; 4056 : 					iNEED_MONEY = g_iNpcUpDfLevel_CSTATUE[iNpcUpIndex][2];
; 4057 : 
; 4058 : 					if(gObj[iIndex].Money < iNEED_MONEY)

  00237	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0023d	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00240	8b fe		 mov	 edi, esi
  00242	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  00248	03 c0		 add	 eax, eax
  0024a	8b 9c 00 08 00
	00 00		 mov	 ebx, DWORD PTR ?g_iNpcUpDfLevel_CSTATUE@@3PAY02HA[eax+eax+8]
  00251	8b 8c 00 04 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcUpDfLevel_CSTATUE@@3PAY02HA[eax+eax+4]
  00258	03 c0		 add	 eax, eax
  0025a	39 9c 17 cc 00
	00 00		 cmp	 DWORD PTR [edi+edx+204], ebx
  00261	7d 30		 jge	 SHORT $LN9@PayForUpgr

; 4059 : 					{
; 4060 : 						GCAnsNpcUpgrade(iIndex,3,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  00263	8b 45 18	 mov	 eax, DWORD PTR _iNpcUpValue$[ebp]
  00266	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  00269	50		 push	 eax
  0026a	6a 01		 push	 1
  0026c	51		 push	 ecx
$LN67@PayForUpgr:
  0026d	68 1b 01 00 00	 push	 283			; 0000011bH
  00272	6a 03		 push	 3
  00274	56		 push	 esi
  00275	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  0027a	83 c4 18	 add	 esp, 24			; 00000018H

; 4061 : 						return false;

  0027d	33 c0		 xor	 eax, eax

; 4126 : }

  0027f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00282	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00289	59		 pop	 ecx
  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c2 18 00	 ret	 24			; 00000018H
$LN9@PayForUpgr:

; 4062 : 					}
; 4063 : 
; 4064 : 					int bDelGemOfDefend = DelGemOfDefend(iIndex,iNEED_GEMOFDEFEND);

  00293	51		 push	 ecx
  00294	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00297	56		 push	 esi
  00298	e8 00 00 00 00	 call	 ?DelGemOfDefend@CCastleSiege@@QAEHHH@Z ; CCastleSiege::DelGemOfDefend

; 4065 : 					
; 4066 : 					if(bDelGemOfDefend == FALSE)

  0029d	85 c0		 test	 eax, eax
  0029f	0f 85 82 01 00
	00		 jne	 $LN18@PayForUpgr

; 4067 : 					{
; 4068 : 						GCAnsNpcUpgrade(iIndex,4,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  002a5	8b 55 18	 mov	 edx, DWORD PTR _iNpcUpValue$[ebp]
  002a8	8b 45 10	 mov	 eax, DWORD PTR _iNpcIndex$[ebp]
  002ab	52		 push	 edx
  002ac	6a 01		 push	 1
  002ae	50		 push	 eax
  002af	68 1b 01 00 00	 push	 283			; 0000011bH
  002b4	6a 04		 push	 4
  002b6	56		 push	 esi
  002b7	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  002bc	83 c4 18	 add	 esp, 24			; 00000018H
  002bf	33 c0		 xor	 eax, eax

; 4126 : }

  002c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002cb	59		 pop	 ecx
  002cc	5f		 pop	 edi
  002cd	5e		 pop	 esi
  002ce	5b		 pop	 ebx
  002cf	8b e5		 mov	 esp, ebp
  002d1	5d		 pop	 ebp
  002d2	c2 18 00	 ret	 24			; 00000018H
$LN23@PayForUpgr:

; 3998 : 	{
; 3999 : 	case 277:
; 4000 : 		switch(iNpcUpType)

  002d5	8b 4d 14	 mov	 ecx, DWORD PTR _iNpcUpType$[ebp]
  002d8	8b c1		 mov	 eax, ecx
  002da	48		 dec	 eax
  002db	0f 84 ac 00 00
	00		 je	 $LN20@PayForUpgr
  002e1	83 e8 02	 sub	 eax, 2
  002e4	74 31		 je	 SHORT $LN17@PayForUpgr

; 4044 : 		default:
; 4045 : 			GCAnsNpcUpgrade(iIndex,5,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  002e6	8b 55 18	 mov	 edx, DWORD PTR _iNpcUpValue$[ebp]
  002e9	8b 45 10	 mov	 eax, DWORD PTR _iNpcIndex$[ebp]
  002ec	52		 push	 edx
  002ed	51		 push	 ecx
  002ee	50		 push	 eax
  002ef	68 15 01 00 00	 push	 277			; 00000115H
  002f4	8b ce		 mov	 ecx, esi
  002f6	6a 05		 push	 5
  002f8	51		 push	 ecx
  002f9	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  002fe	83 c4 18	 add	 esp, 24			; 00000018H

; 4046 : 			return false;

  00301	33 c0		 xor	 eax, eax

; 4126 : }

  00303	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00306	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0030d	59		 pop	 ecx
  0030e	5f		 pop	 edi
  0030f	5e		 pop	 esi
  00310	5b		 pop	 ebx
  00311	8b e5		 mov	 esp, ebp
  00313	5d		 pop	 ebp
  00314	c2 18 00	 ret	 24			; 00000018H
$LN17@PayForUpgr:

; 4021 : 			}
; 4022 : 			break;
; 4023 : 		case 3:
; 4024 : 			{
; 4025 : 				iNEED_GEMOFDEFEND = g_iNpcUpMaxHP_CGATE[iNpcUpIndex][1];
; 4026 : 				iNEED_MONEY = g_iNpcUpMaxHP_CGATE[iNpcUpIndex][2];
; 4027 : 	
; 4028 : 				if(gObj[iIndex].Money < iNEED_MONEY)

  00317	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0031d	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00320	8b fe		 mov	 edi, esi
  00322	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  00328	03 c0		 add	 eax, eax
  0032a	8b 9c 00 08 00
	00 00		 mov	 ebx, DWORD PTR ?g_iNpcUpMaxHP_CGATE@@3PAY02HA[eax+eax+8]
  00331	8b 8c 00 04 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcUpMaxHP_CGATE@@3PAY02HA[eax+eax+4]
  00338	03 c0		 add	 eax, eax
  0033a	39 9c 17 cc 00
	00 00		 cmp	 DWORD PTR [edi+edx+204], ebx
  00341	7d 30		 jge	 SHORT $LN16@PayForUpgr

; 4029 : 				{
; 4030 : 					GCAnsNpcUpgrade(iIndex,3,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  00343	8b 45 18	 mov	 eax, DWORD PTR _iNpcUpValue$[ebp]
  00346	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  00349	50		 push	 eax
  0034a	6a 03		 push	 3
  0034c	51		 push	 ecx
  0034d	68 15 01 00 00	 push	 277			; 00000115H
  00352	6a 03		 push	 3
  00354	56		 push	 esi
  00355	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  0035a	83 c4 18	 add	 esp, 24			; 00000018H

; 4031 : 					return false;

  0035d	33 c0		 xor	 eax, eax

; 4126 : }

  0035f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00362	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00369	59		 pop	 ecx
  0036a	5f		 pop	 edi
  0036b	5e		 pop	 esi
  0036c	5b		 pop	 ebx
  0036d	8b e5		 mov	 esp, ebp
  0036f	5d		 pop	 ebp
  00370	c2 18 00	 ret	 24			; 00000018H
$LN16@PayForUpgr:

; 4032 : 				}
; 4033 : 	
; 4034 : 				int bDelGemOfDefend = DelGemOfDefend(iIndex,iNEED_GEMOFDEFEND);

  00373	51		 push	 ecx
  00374	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00377	56		 push	 esi
  00378	e8 00 00 00 00	 call	 ?DelGemOfDefend@CCastleSiege@@QAEHHH@Z ; CCastleSiege::DelGemOfDefend

; 4035 : 	
; 4036 : 				if(bDelGemOfDefend == FALSE)

  0037d	85 c0		 test	 eax, eax
  0037f	0f 85 a2 00 00
	00		 jne	 $LN18@PayForUpgr

; 4037 : 				{
; 4038 : 					GCAnsNpcUpgrade(iIndex,4,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  00385	8b 55 18	 mov	 edx, DWORD PTR _iNpcUpValue$[ebp]
  00388	52		 push	 edx
  00389	6a 03		 push	 3

; 4039 : 					return false;
; 4040 : 				}
; 4041 : 				gObj[iIndex].Money -= iNEED_MONEY;
; 4042 : 			}
; 4043 : 			break;

  0038b	eb 70		 jmp	 SHORT $LN66@PayForUpgr
$LN20@PayForUpgr:

; 4001 : 		{
; 4002 : 		case 1:
; 4003 : 			{
; 4004 : 				iNEED_GEMOFDEFEND = g_iNpcUpDfLevel_CGATE[iNpcUpIndex][1];
; 4005 : 				iNEED_MONEY = g_iNpcUpDfLevel_CGATE[iNpcUpIndex][2];
; 4006 : 	
; 4007 : 				if(gObj[iIndex].Money < iNEED_MONEY)

  0038d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00393	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00396	8b fe		 mov	 edi, esi
  00398	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  0039e	03 c0		 add	 eax, eax
  003a0	8b 9c 00 08 00
	00 00		 mov	 ebx, DWORD PTR ?g_iNpcUpDfLevel_CGATE@@3PAY02HA[eax+eax+8]
  003a7	8b 8c 00 04 00
	00 00		 mov	 ecx, DWORD PTR ?g_iNpcUpDfLevel_CGATE@@3PAY02HA[eax+eax+4]
  003ae	03 c0		 add	 eax, eax
  003b0	39 9c 17 cc 00
	00 00		 cmp	 DWORD PTR [edi+edx+204], ebx
  003b7	7d 30		 jge	 SHORT $LN19@PayForUpgr

; 4008 : 				{
; 4009 : 					GCAnsNpcUpgrade(iIndex,3,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  003b9	8b 45 18	 mov	 eax, DWORD PTR _iNpcUpValue$[ebp]
  003bc	8b 4d 10	 mov	 ecx, DWORD PTR _iNpcIndex$[ebp]
  003bf	50		 push	 eax
  003c0	6a 01		 push	 1
  003c2	51		 push	 ecx
  003c3	68 15 01 00 00	 push	 277			; 00000115H
  003c8	6a 03		 push	 3
  003ca	56		 push	 esi
  003cb	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  003d0	83 c4 18	 add	 esp, 24			; 00000018H

; 4010 : 					return false;

  003d3	33 c0		 xor	 eax, eax

; 4126 : }

  003d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003df	59		 pop	 ecx
  003e0	5f		 pop	 edi
  003e1	5e		 pop	 esi
  003e2	5b		 pop	 ebx
  003e3	8b e5		 mov	 esp, ebp
  003e5	5d		 pop	 ebp
  003e6	c2 18 00	 ret	 24			; 00000018H
$LN19@PayForUpgr:

; 4011 : 				}
; 4012 : 	
; 4013 : 				int bDelGemOfDefend = DelGemOfDefend(iIndex,iNEED_GEMOFDEFEND);

  003e9	51		 push	 ecx
  003ea	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003ed	56		 push	 esi
  003ee	e8 00 00 00 00	 call	 ?DelGemOfDefend@CCastleSiege@@QAEHHH@Z ; CCastleSiege::DelGemOfDefend

; 4014 : 	
; 4015 : 				if(bDelGemOfDefend == FALSE)

  003f3	85 c0		 test	 eax, eax
  003f5	75 30		 jne	 SHORT $LN18@PayForUpgr

; 4016 : 				{
; 4017 : 					GCAnsNpcUpgrade(iIndex,4,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  003f7	8b 55 18	 mov	 edx, DWORD PTR _iNpcUpValue$[ebp]
  003fa	52		 push	 edx
  003fb	6a 01		 push	 1
$LN66@PayForUpgr:
  003fd	8b 45 10	 mov	 eax, DWORD PTR _iNpcIndex$[ebp]
  00400	50		 push	 eax
  00401	68 15 01 00 00	 push	 277			; 00000115H
  00406	6a 04		 push	 4
  00408	56		 push	 esi
  00409	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  0040e	83 c4 18	 add	 esp, 24			; 00000018H

; 4018 : 					return false;

  00411	33 c0		 xor	 eax, eax

; 4126 : }

  00413	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00416	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0041d	59		 pop	 ecx
  0041e	5f		 pop	 edi
  0041f	5e		 pop	 esi
  00420	5b		 pop	 ebx
  00421	8b e5		 mov	 esp, ebp
  00423	5d		 pop	 ebp
  00424	c2 18 00	 ret	 24			; 00000018H
$LN18@PayForUpgr:

; 4019 : 				}
; 4020 : 				gObj[iIndex].Money -= iNEED_MONEY;

  00427	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0042c	29 9c 07 cc 00
	00 00		 sub	 DWORD PTR [edi+eax+204], ebx
$LN21@PayForUpgr:

; 4118 : 				return false;
; 4119 : 			}
; 4120 : 		}
; 4121 : 		break;
; 4122 : 	}
; 4123 : 
; 4124 : 	GCMoneySend(iIndex,gObj[iIndex].Money);

  00433	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00439	8b ce		 mov	 ecx, esi
  0043b	69 c9 40 27 00
	00		 imul	 ecx, 10048		; 00002740H
  00441	8b 84 11 cc 00
	00 00		 mov	 eax, DWORD PTR [ecx+edx+204]
  00448	50		 push	 eax
  00449	56		 push	 esi
  0044a	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0044f	83 c4 08	 add	 esp, 8

; 4125 : 	return true;

  00452	b8 01 00 00 00	 mov	 eax, 1

; 4126 : }

  00457	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0045a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00461	59		 pop	 ecx
  00462	5f		 pop	 edi
  00463	5e		 pop	 esi
  00464	5b		 pop	 ebx
  00465	8b e5		 mov	 esp, ebp
  00467	5d		 pop	 ebp
  00468	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _pNpcData$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PayForUpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z ENDP	; CCastleSiege::PayForUpgradeDbNPC
PUBLIC	??_C@_0EE@HIFDLAHI@?$FLCastleSiege?$FN?5CCastleSiege?3?3Upgr@ ; `string'
PUBLIC	??_C@_0FL@KBEBLPPL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Upgr@ ; `string'
PUBLIC	?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z	; CCastleSiege::UpgradeDbNPC
;	COMDAT ??_C@_0EE@HIFDLAHI@?$FLCastleSiege?$FN?5CCastleSiege?3?3Upgr@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
CONST	SEGMENT
??_C@_0EE@HIFDLAHI@?$FLCastleSiege?$FN?5CCastleSiege?3?3Upgr@ DB '[Castle'
	DB	'Siege] CCastleSiege::UpgradeDbNPC() ERROR - bIsLive == FALSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@KBEBLPPL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Upgr@
CONST	SEGMENT
??_C@_0FL@KBEBLPPL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Upgr@ DB '[Castle'
	DB	'Siege] CCastleSiege::UpgradeDbNPC() ERROR - lpMsg->iNpcUpInde'
	DB	'x is Out of Bound : %d', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z$0
__ehfuncinfo$?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z
_TEXT	SEGMENT
_pNpcData$ = -128					; size = 116
__$EHRec$ = -12						; size = 12
_iIndex$ = 8						; size = 4
_iNpcType$ = 12						; size = 4
_iNpcIndex$ = 16					; size = 4
_iNpcUpType$ = 20					; size = 4
_iNpcUpValue$ = 24					; size = 4
_iNpcUpIndex$ = 28					; size = 4
?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z PROC		; CCastleSiege::UpgradeDbNPC, COMDAT
; _this$ = ecx

; 4129 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 74	 sub	 esp, 116		; 00000074H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 4130 : 	if(CS_UPGRADE_RANGE(iNpcUpIndex) == FALSE)

  0002a	8b 45 1c	 mov	 eax, DWORD PTR _iNpcUpIndex$[ebp]
  0002d	85 c0		 test	 eax, eax
  0002f	78 0c		 js	 SHORT $LN31@UpgradeDbN@4
  00031	33 c9		 xor	 ecx, ecx
  00033	83 f8 02	 cmp	 eax, 2
  00036	0f 9e c1	 setle	 cl
  00039	85 c9		 test	 ecx, ecx
  0003b	75 27		 jne	 SHORT $LN17@UpgradeDbN@4
$LN31@UpgradeDbN@4:

; 4131 : 	{
; 4132 : 		LogAddC(2,"[CastleSiege] CCastleSiege::UpgradeDbNPC() ERROR - lpMsg->iNpcUpIndex is Out of Bound : %d",iNpcUpIndex);

  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@KBEBLPPL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Upgr@
  00043	6a 02		 push	 2
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4133 : 		return false;

  0004e	33 c0		 xor	 eax, eax

; 4182 : }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 18 00	 ret	 24			; 00000018H
$LN17@UpgradeDbN@4:

; 4134 : 	}
; 4135 : 
; 4136 : 	_CS_NPC_DATA pNpcData;

  00064	8d 4d 80	 lea	 ecx, DWORD PTR _pNpcData$[ebp]
  00067	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@XZ	; _CS_NPC_DATA::_CS_NPC_DATA

; 4137 : 
; 4138 : 	int bIsLive = GetNpcData(iNpcType,iNpcIndex,(_CS_NPC_DATA &)pNpcData);

  0006c	8b 75 10	 mov	 esi, DWORD PTR _iNpcIndex$[ebp]
  0006f	8b 5d 0c	 mov	 ebx, DWORD PTR _iNpcType$[ebp]
  00072	8d 45 80	 lea	 eax, DWORD PTR _pNpcData$[ebp]
  00075	50		 push	 eax
  00076	56		 push	 esi
  00077	53		 push	 ebx
  00078	8b cf		 mov	 ecx, edi
  0007a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00081	e8 00 00 00 00	 call	 ?GetNpcData@CCastleSiege@@QAEHHHAAU_CS_NPC_DATA@@@Z ; CCastleSiege::GetNpcData

; 4139 : 
; 4140 : 	if(bIsLive == FALSE)

  00086	85 c0		 test	 eax, eax
  00088	75 26		 jne	 SHORT $LN16@UpgradeDbN@4

; 4141 : 	{
; 4142 : 		LogAddC(2,"[CastleSiege] CCastleSiege::UpgradeDbNPC() ERROR - bIsLive == FALSE");

  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@HIFDLAHI@?$FLCastleSiege?$FN?5CCastleSiege?3?3Upgr@
  0008f	6a 02		 push	 2
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00097	83 c4 08	 add	 esp, 8

; 4143 : 		return false;

  0009a	33 c0		 xor	 eax, eax

; 4182 : }

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 18 00	 ret	 24			; 00000018H
$LN16@UpgradeDbN@4:

; 4144 : 	}
; 4145 : 
; 4146 : 	switch(iNpcType)

  000b0	8b c3		 mov	 eax, ebx
  000b2	2d 15 01 00 00	 sub	 eax, 277		; 00000115H
  000b7	74 56		 je	 SHORT $LN13@UpgradeDbN@4
  000b9	83 e8 06	 sub	 eax, 6
  000bc	0f 85 ad 00 00
	00		 jne	 $LN11@UpgradeDbN@4

; 4160 : 		}
; 4161 : 		break;
; 4162 : 	case 283:
; 4163 : 		switch(iNpcUpType)

  000c2	8b 4d 14	 mov	 ecx, DWORD PTR _iNpcUpType$[ebp]
  000c5	8b c1		 mov	 eax, ecx
  000c7	48		 dec	 eax
  000c8	74 39		 je	 SHORT $LN4@UpgradeDbN@4
  000ca	48		 dec	 eax
  000cb	74 23		 je	 SHORT $LN3@UpgradeDbN@4
  000cd	48		 dec	 eax
  000ce	74 0d		 je	 SHORT $LN2@UpgradeDbN@4

; 4174 : 		default:
; 4175 : 			GCAnsNpcUpgrade(iIndex,5,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  000d0	8b 55 18	 mov	 edx, DWORD PTR _iNpcUpValue$[ebp]
  000d3	52		 push	 edx
  000d4	51		 push	 ecx
  000d5	56		 push	 esi
  000d6	68 1b 01 00 00	 push	 283			; 0000011bH

; 4176 : 			return false;

  000db	eb 4a		 jmp	 SHORT $LN35@UpgradeDbN@4
$LN2@UpgradeDbN@4:

; 4171 : 		case 3:
; 4172 : 			UpgradeDbNPC_MAXHP(iNpcType,iNpcIndex,iNpcUpValue);

  000dd	8b 4d 18	 mov	 ecx, DWORD PTR _iNpcUpValue$[ebp]
  000e0	51		 push	 ecx
  000e1	56		 push	 esi
  000e2	68 1b 01 00 00	 push	 283			; 0000011bH
  000e7	8b cf		 mov	 ecx, edi
  000e9	e8 00 00 00 00	 call	 ?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z ; CCastleSiege::UpgradeDbNPC_MAXHP

; 4173 : 			break;

  000ee	eb 7f		 jmp	 SHORT $LN11@UpgradeDbN@4
$LN3@UpgradeDbN@4:

; 4167 : 			break;
; 4168 : 		case 2:
; 4169 : 			UpgradeDbNPC_RGLEVEL(iNpcType,iNpcIndex,iNpcUpValue);

  000f0	8b 55 18	 mov	 edx, DWORD PTR _iNpcUpValue$[ebp]
  000f3	52		 push	 edx
  000f4	56		 push	 esi
  000f5	68 1b 01 00 00	 push	 283			; 0000011bH
  000fa	8b cf		 mov	 ecx, edi
  000fc	e8 00 00 00 00	 call	 ?UpgradeDbNPC_RGLEVEL@CCastleSiege@@QAEHHHH@Z ; CCastleSiege::UpgradeDbNPC_RGLEVEL

; 4170 : 			break;

  00101	eb 6c		 jmp	 SHORT $LN11@UpgradeDbN@4
$LN4@UpgradeDbN@4:

; 4164 : 		{
; 4165 : 		case 1:
; 4166 : 			UpgradeDbNPC_DFLEVEL(iNpcType,iNpcIndex,iNpcUpValue);

  00103	8b 45 18	 mov	 eax, DWORD PTR _iNpcUpValue$[ebp]
  00106	50		 push	 eax
  00107	56		 push	 esi
  00108	68 1b 01 00 00	 push	 283			; 0000011bH

; 4177 : 		}
; 4178 : 		break;

  0010d	eb 59		 jmp	 SHORT $LN34@UpgradeDbN@4
$LN13@UpgradeDbN@4:

; 4147 : 	{
; 4148 : 	case 277:
; 4149 : 		switch(iNpcUpType)

  0010f	8b 4d 14	 mov	 ecx, DWORD PTR _iNpcUpType$[ebp]
  00112	8b c1		 mov	 eax, ecx
  00114	48		 dec	 eax
  00115	74 47		 je	 SHORT $LN10@UpgradeDbN@4
  00117	83 e8 02	 sub	 eax, 2
  0011a	74 2f		 je	 SHORT $LN9@UpgradeDbN@4

; 4157 : 		default:
; 4158 : 			GCAnsNpcUpgrade(iIndex,5,iNpcType,iNpcIndex,iNpcUpType,iNpcUpValue);

  0011c	8b 55 18	 mov	 edx, DWORD PTR _iNpcUpValue$[ebp]
  0011f	52		 push	 edx
  00120	51		 push	 ecx
  00121	56		 push	 esi
  00122	68 15 01 00 00	 push	 277			; 00000115H
$LN35@UpgradeDbN@4:
  00127	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0012a	6a 05		 push	 5
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ?GCAnsNpcUpgrade@@YAXHHHHHH@Z ; GCAnsNpcUpgrade
  00132	83 c4 18	 add	 esp, 24			; 00000018H

; 4159 : 			return false;

  00135	33 c0		 xor	 eax, eax

; 4182 : }

  00137	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00141	59		 pop	 ecx
  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	5b		 pop	 ebx
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c2 18 00	 ret	 24			; 00000018H
$LN9@UpgradeDbN@4:

; 4153 : 			break;
; 4154 : 		case 3:
; 4155 : 			UpgradeDbNPC_MAXHP(iNpcType,iNpcIndex,iNpcUpValue);

  0014b	8b 4d 18	 mov	 ecx, DWORD PTR _iNpcUpValue$[ebp]
  0014e	51		 push	 ecx
  0014f	56		 push	 esi
  00150	68 15 01 00 00	 push	 277			; 00000115H
  00155	8b cf		 mov	 ecx, edi
  00157	e8 00 00 00 00	 call	 ?UpgradeDbNPC_MAXHP@CCastleSiege@@QAEHHHH@Z ; CCastleSiege::UpgradeDbNPC_MAXHP

; 4156 : 			break;

  0015c	eb 11		 jmp	 SHORT $LN11@UpgradeDbN@4
$LN10@UpgradeDbN@4:

; 4150 : 		{
; 4151 : 		case 1:
; 4152 : 			UpgradeDbNPC_DFLEVEL(iNpcType,iNpcIndex,iNpcUpValue);

  0015e	8b 55 18	 mov	 edx, DWORD PTR _iNpcUpValue$[ebp]
  00161	52		 push	 edx
  00162	56		 push	 esi
  00163	68 15 01 00 00	 push	 277			; 00000115H
$LN34@UpgradeDbN@4:
  00168	8b cf		 mov	 ecx, edi
  0016a	e8 00 00 00 00	 call	 ?UpgradeDbNPC_DFLEVEL@CCastleSiege@@QAEHHHH@Z ; CCastleSiege::UpgradeDbNPC_DFLEVEL
$LN11@UpgradeDbN@4:

; 4179 : 	}
; 4180 : 
; 4181 : 	return true;

  0016f	b8 01 00 00 00	 mov	 eax, 1

; 4182 : }

  00174	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00177	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017e	59		 pop	 ecx
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	5b		 pop	 ebx
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z$0:
  00000	8d 4d 80	 lea	 ecx, DWORD PTR _pNpcData$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpgradeDbNPC@CCastleSiege@@QAEHHHHHHH@Z ENDP		; CCastleSiege::UpgradeDbNPC
PUBLIC	??1?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::~_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ PROC ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::~_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00007	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0000e	72 0b		 jb	 SHORT $LN17@Pair_base@2
  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN17@Pair_base@2:
  0001b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00022	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00029	c6 06 00	 mov	 BYTE PTR [esi], 0
  0002c	5e		 pop	 esi
  0002d	c3		 ret	 0
??1?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ ENDP ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::~_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>
_TEXT	ENDS
PUBLIC	?DelMiniMapDataReqUser@CCastleSiege@@QAEXH@Z	; CCastleSiege::DelMiniMapDataReqUser
; Function compile flags: /Ogtp
;	COMDAT ?DelMiniMapDataReqUser@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?DelMiniMapDataReqUser@CCastleSiege@@QAEXH@Z PROC	; CCastleSiege::DelMiniMapDataReqUser, COMDAT
; _this$ = ecx

; 5401 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 5402 : 	EnterCriticalSection(&m_critCsMiniMap);

  00007	8d be bc 01 00
	00		 lea	 edi, DWORD PTR [esi+444]
  0000d	57		 push	 edi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5403 : 
; 5404 : 	vector<int>::iterator  it = find(m_vtMiniMapReqUser.begin(),m_vtMiniMapReqUser.end(),iIndex);

  00014	8b 8e d8 01 00
	00		 mov	 ecx, DWORD PTR [esi+472]
  0001a	8b 86 d4 01 00
	00		 mov	 eax, DWORD PTR [esi+468]
  00020	3b c1		 cmp	 eax, ecx
  00022	74 36		 je	 SHORT $LN68@DelMiniMap
  00024	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
$LL33@DelMiniMap:
  00027	39 10		 cmp	 DWORD PTR [eax], edx
  00029	74 07		 je	 SHORT $LN71@DelMiniMap
  0002b	83 c0 04	 add	 eax, 4
  0002e	3b c1		 cmp	 eax, ecx
  00030	75 f5		 jne	 SHORT $LL33@DelMiniMap
$LN71@DelMiniMap:

; 5405 : 
; 5406 : 	if(it != m_vtMiniMapReqUser.end())	{

  00032	3b c1		 cmp	 eax, ecx
  00034	74 24		 je	 SHORT $LN68@DelMiniMap

; 5407 : 		m_vtMiniMapReqUser.erase(it);

  00036	8b 96 d8 01 00
	00		 mov	 edx, DWORD PTR [esi+472]
  0003c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0003f	2b d1		 sub	 edx, ecx
  00041	c1 fa 02	 sar	 edx, 2
  00044	03 d2		 add	 edx, edx
  00046	03 d2		 add	 edx, edx
  00048	52		 push	 edx
  00049	51		 push	 ecx
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _memmove
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	83 86 d8 01 00
	00 fc		 add	 DWORD PTR [esi+472], -4	; fffffffcH
$LN68@DelMiniMap:

; 5408 : 	}
; 5409 : 
; 5410 : 	LeaveCriticalSection(&m_critCsMiniMap);

  0005a	57		 push	 edi
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 5411 : }

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?DelMiniMapDataReqUser@CCastleSiege@@QAEXH@Z ENDP	; CCastleSiege::DelMiniMapDataReqUser
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::find
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
$T214280 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::find, COMDAT
; _this$ = ecx

; 1423 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1424 : 		iterator _Where = lower_bound(_Keyval);

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000a	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00011	57		 push	 edi
  00012	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  00015	75 21		 jne	 SHORT $LN9@find@2
  00017	56		 push	 esi
  00018	8b 37		 mov	 esi, DWORD PTR [edi]
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL10@find@2:
  00020	39 70 0c	 cmp	 DWORD PTR [eax+12], esi
  00023	7d 05		 jge	 SHORT $LN8@find@2
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	eb 04		 jmp	 SHORT $LN7@find@2
$LN8@find@2:
  0002a	8b d0		 mov	 edx, eax
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@find@2:
  0002e	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00035	74 e9		 je	 SHORT $LL10@find@2
  00037	5e		 pop	 esi
$LN9@find@2:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  00038	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003b	89 55 0c	 mov	 DWORD PTR __Where$[ebp], edx
  0003e	3b d0		 cmp	 edx, eax
  00040	74 18		 je	 SHORT $LN3@find@2
  00042	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00044	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  00047	7c 11		 jl	 SHORT $LN3@find@2
  00049	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  0004c	8b 10		 mov	 edx, DWORD PTR [eax]
  0004e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00051	89 10		 mov	 DWORD PTR [eax], edx
  00053	5f		 pop	 edi

; 1429 : 		}

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
$LN3@find@2:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  0005a	89 45 fc	 mov	 DWORD PTR $T214280[ebp], eax
  0005d	8d 45 fc	 lea	 eax, DWORD PTR $T214280[ebp]
  00060	8b 10		 mov	 edx, DWORD PTR [eax]
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	89 10		 mov	 DWORD PTR [eax], edx
  00067	5f		 pop	 edi

; 1429 : 		}

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::find
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::find
; Function compile flags: /Ogtp
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@ABI@Z
_TEXT	SEGMENT
$T214503 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@ABI@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::find, COMDAT
; _this$ = ecx

; 1423 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1424 : 		iterator _Where = lower_bound(_Keyval);

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000a	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  00012	75 18		 jne	 SHORT $LN9@find@3
  00014	56		 push	 esi
  00015	8b 37		 mov	 esi, DWORD PTR [edi]
$LL10@find@3:
  00017	39 70 0c	 cmp	 DWORD PTR [eax+12], esi
  0001a	73 05		 jae	 SHORT $LN8@find@3
  0001c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001f	eb 04		 jmp	 SHORT $LN7@find@3
$LN8@find@3:
  00021	8b d0		 mov	 edx, eax
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@find@3:
  00025	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00029	74 ec		 je	 SHORT $LL10@find@3
  0002b	5e		 pop	 esi
$LN9@find@3:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  0002c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002f	89 55 0c	 mov	 DWORD PTR __Where$[ebp], edx
  00032	3b d0		 cmp	 edx, eax
  00034	74 18		 je	 SHORT $LN3@find@3
  00036	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00038	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  0003b	72 11		 jb	 SHORT $LN3@find@3
  0003d	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  00040	8b 10		 mov	 edx, DWORD PTR [eax]
  00042	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	5f		 pop	 edi

; 1429 : 		}

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN3@find@3:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  0004e	89 45 fc	 mov	 DWORD PTR $T214503[ebp], eax
  00051	8d 45 fc	 lea	 eax, DWORD PTR $T214503[ebp]
  00054	8b 10		 mov	 edx, DWORD PTR [eax]
  00056	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00059	89 10		 mov	 DWORD PTR [eax], edx
  0005b	5f		 pop	 edi

; 1429 : 		}

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@ABI@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::find
_TEXT	ENDS
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 411  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 413  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator++

; 414  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 415  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 411  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 413  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator++

; 414  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 415  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::lower_bound
; Function compile flags: /Ogtp
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1449 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1450 : 		return (iterator(_Lbound(_Keyval), this));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lbound
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
  00011	8b c1		 mov	 eax, ecx

; 1451 : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  00014	c1 f8 02	 sar	 eax, 2
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 02	 sar	 edx, 2
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve
$LN23@Reserve:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN1@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve:
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::clear, COMDAT
; _this$ = ecx

; 1410 : 		{	// erase all

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		this->_Orphan_ptr(*this, 0);
; 1413 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1414 : 
; 1415 : 		_Erase(_Root());

  00005	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00008	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  0000b	80 7b 15 00	 cmp	 BYTE PTR [ebx+21], 0
  0000f	8b f3		 mov	 esi, ebx
  00011	75 1e		 jne	 SHORT $LN7@clear
$LL9@clear:
  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	51		 push	 ecx
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Erase
  0001e	8b 36		 mov	 esi, DWORD PTR [esi]
  00020	53		 push	 ebx
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4
  00029	80 7e 15 00	 cmp	 BYTE PTR [esi+21], 0
  0002d	8b de		 mov	 ebx, esi
  0002f	74 e2		 je	 SHORT $LL9@clear
$LN7@clear:

; 1416 : 		_Root() = this->_Myhead;

  00031	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00034	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1417 : 		_Lmost() = this->_Myhead;

  00037	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003a	89 00		 mov	 DWORD PTR [eax], eax

; 1418 : 		_Rmost() = this->_Myhead;

  0003c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1419 : 		this->_Mysize = 0;

  00042	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 1420 : 		}

  0004c	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::clear
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAXPAU_CS_SCHEDULE_DATA@@0AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<_CS_SCHEDULE_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAXPAU_CS_SCHEDULE_DATA@@0AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAXPAU_CS_SCHEDULE_DATA@@0AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<_CS_SCHEDULE_DATA> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 16		 je	 SHORT $LN5@Destroy_ra@4
  0000f	53		 push	 ebx
  00010	8b 5d 10	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL7@Destroy_ra@4:
  00013	56		 push	 esi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
  0001a	83 c6 1c	 add	 esi, 28			; 0000001cH
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL7@Destroy_ra@4
  00024	5b		 pop	 ebx
$LN5@Destroy_ra@4:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 89   : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Destroy_range@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAXPAU_CS_SCHEDULE_DATA@@0AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<_CS_SCHEDULE_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAXPAU_CS_NPC_DATA@@0AAV?$allocator@U_CS_NPC_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<_CS_NPC_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAXPAU_CS_NPC_DATA@@0AAV?$allocator@U_CS_NPC_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAXPAU_CS_NPC_DATA@@0AAV?$allocator@U_CS_NPC_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<_CS_NPC_DATA> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 16		 je	 SHORT $LN5@Destroy_ra@5
  0000f	53		 push	 ebx
  00010	8b 5d 10	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL7@Destroy_ra@5:
  00013	56		 push	 esi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
  0001a	83 c6 74	 add	 esi, 116		; 00000074H
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL7@Destroy_ra@5
  00024	5b		 pop	 ebx
$LN5@Destroy_ra@5:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 89   : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Destroy_range@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAXPAU_CS_NPC_DATA@@0AAV?$allocator@U_CS_NPC_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<_CS_NPC_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAXPAU_CS_REG_GUILD_DATA@@0AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@@Z ; std::_Destroy_range<std::allocator<_CS_REG_GUILD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAXPAU_CS_REG_GUILD_DATA@@0AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAXPAU_CS_REG_GUILD_DATA@@0AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@@Z PROC ; std::_Destroy_range<std::allocator<_CS_REG_GUILD_DATA> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 16		 je	 SHORT $LN5@Destroy_ra@6
  0000f	53		 push	 ebx
  00010	8b 5d 10	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL7@Destroy_ra@6:
  00013	56		 push	 esi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
  0001a	83 c6 40	 add	 esi, 64			; 00000040H
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL7@Destroy_ra@6
  00024	5b		 pop	 ebx
$LN5@Destroy_ra@6:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 89   : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Destroy_range@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAXPAU_CS_REG_GUILD_DATA@@0AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<_CS_REG_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@Z ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@Z PROC ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@

; 214  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?destroy@?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@Z ENDP ; std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >::destroy
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 892  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 893  : 		if (_Right.size() < _Roff)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Roff$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000d	57		 push	 edi
  0000e	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]
  00011	3b fb		 cmp	 edi, ebx
  00013	73 0a		 jae	 SHORT $LN5@assign

; 894  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN83@assign:
$LN5@assign:

; 895  : 		size_type _Num = _Right.size() - _Roff;
; 896  : 		if (_Count < _Num)

  0001f	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00022	2b fb		 sub	 edi, ebx
  00024	3b c7		 cmp	 eax, edi
  00026	73 02		 jae	 SHORT $LN4@assign

; 897  : 			_Num = _Count;	// trim _Num to size

  00028	8b f8		 mov	 edi, eax
$LN4@assign:

; 898  : 
; 899  : 		if (this == &_Right)

  0002a	3b f1		 cmp	 esi, ecx
  0002c	75 1f		 jne	 SHORT $LN3@assign

; 900  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002e	6a ff		 push	 -1
  00030	03 fb		 add	 edi, ebx
  00032	57		 push	 edi
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003a	53		 push	 ebx
  0003b	6a 00		 push	 0
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00044	5f		 pop	 edi

; 905  : 			}
; 906  : 		return (*this);

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx

; 907  : 		}

  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 901  : 		else if (_Grow(_Num))

  0004d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00050	76 0a		 jbe	 SHORT $LN20@assign
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00057	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN84@assign:
$LN20@assign:
  0005c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005f	3b c7		 cmp	 eax, edi
  00061	73 28		 jae	 SHORT $LN19@assign
  00063	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00066	50		 push	 eax
  00067	57		 push	 edi
  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00072	85 ff		 test	 edi, edi
  00074	74 68		 je	 SHORT $LN78@assign
$LN82@assign:

; 902  : 			{	// make room and assign new stuff
; 903  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00076	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007b	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  0007e	72 02		 jb	 SHORT $LN64@assign
  00080	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN64@assign:
  00082	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00085	72 2a		 jb	 SHORT $LN68@assign
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	eb 28		 jmp	 SHORT $LN69@assign

; 901  : 		else if (_Grow(_Num))

$LN19@assign:
  0008b	85 ff		 test	 edi, edi
  0008d	75 e7		 jne	 SHORT $LN82@assign
  0008f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 0e		 jb	 SHORT $LN58@assign
  00097	8b 06		 mov	 eax, DWORD PTR [esi]
  00099	5f		 pop	 edi
  0009a	c6 00 00	 mov	 BYTE PTR [eax], 0

; 905  : 			}
; 906  : 		return (*this);

  0009d	8b c6		 mov	 eax, esi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx

; 907  : 		}

  000a1	5d		 pop	 ebp
  000a2	c2 0c 00	 ret	 12			; 0000000cH

; 901  : 		else if (_Grow(_Num))

$LN58@assign:
  000a5	5f		 pop	 edi
  000a6	8b c6		 mov	 eax, esi
  000a8	5e		 pop	 esi
  000a9	c6 00 00	 mov	 BYTE PTR [eax], 0
  000ac	5b		 pop	 ebx

; 907  : 		}

  000ad	5d		 pop	 ebp
  000ae	c2 0c 00	 ret	 12			; 0000000cH

; 902  : 			{	// make room and assign new stuff
; 903  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$LN68@assign:
  000b1	8b c6		 mov	 eax, esi
$LN69@assign:
  000b3	57		 push	 edi
  000b4	03 cb		 add	 ecx, ebx
  000b6	51		 push	 ecx
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _memcpy
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 904  : 			_Eos(_Num);

  000c0	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000c4	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000c7	72 0f		 jb	 SHORT $LN76@assign
  000c9	8b 06		 mov	 eax, DWORD PTR [esi]
  000cb	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000cf	5f		 pop	 edi

; 905  : 			}
; 906  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 907  : 		}

  000d4	5d		 pop	 ebp
  000d5	c2 0c 00	 ret	 12			; 0000000cH

; 904  : 			_Eos(_Num);

$LN76@assign:
  000d8	8b c6		 mov	 eax, esi
  000da	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN78@assign:

; 905  : 			}
; 906  : 		return (*this);

  000de	5f		 pop	 edi
  000df	8b c6		 mov	 eax, esi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx

; 907  : 		}

  000e3	5d		 pop	 ebp
  000e4	c2 0c 00	 ret	 12			; 0000000cH
$LN80@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$_Buynode@U?$pair@IH@std@@@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@$$QAU?$pair@IH@1@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode<std::pair<unsigned int,int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??$_Buynode@U?$pair@IH@std@@@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@$$QAU?$pair@IH@1@@Z
_TEXT	SEGMENT
$T215266 = -12						; size = 12
$T215220 = 8						; size = 4
__Val$ = 8						; size = 4
??$_Buynode@U?$pair@IH@std@@@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@$$QAU?$pair@IH@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode<std::pair<unsigned int,int> >, COMDAT
; _this$ = ecx

; 586  : 		_Nodeptr _Buynode(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

  00008	6a 18		 push	 24			; 00000018H
  0000a	8b f9		 mov	 edi, ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	8b f0		 mov	 esi, eax
  00013	33 c0		 xor	 eax, eax
  00015	83 c4 04	 add	 esp, 4
  00018	3b f0		 cmp	 esi, eax
  0001a	74 33		 je	 SHORT $LN12@Buynode@4
  0001c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001f	89 0e		 mov	 DWORD PTR [esi], ecx
  00021	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00024	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00027	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 589  : 
; 590  : 		_TRY_BEGIN
; 591  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Wherenode)),
; 592  : 			_STD forward<_Valty>(_Val));

  0002a	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  0002d	66 89 46 14	 mov	 WORD PTR [esi+20], ax
  00031	52		 push	 edx
  00032	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00035	50		 push	 eax
  00036	83 c7 0d	 add	 edi, 13			; 0000000dH
  00039	57		 push	 edi
  0003a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0003d	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U?$pair@$$CBIH@std@@@std@@U?$pair@$$CBIH@2@U?$pair@IH@2@@std@@YAXAAV?$allocator@U?$pair@$$CBIH@std@@@0@PAU?$pair@$$CBIH@0@$$QAU?$pair@IH@0@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned int const ,int> >,std::pair<unsigned int const ,int>,std::pair<unsigned int,int> >
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	5f		 pop	 edi

; 593  : 		_CATCH_ALL
; 594  : 		this->_Alnod.deallocate(_Wherenode, 1);
; 595  : 		_RERAISE;
; 596  : 		_CATCH_END
; 597  : 
; 598  : 		return (_Wherenode);

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi

; 599  : 		}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

$LN12@Buynode@4:
  0004f	8d 4d 08	 lea	 ecx, DWORD PTR $T215220[ebp]
  00052	51		 push	 ecx
  00053	8d 4d f4	 lea	 ecx, DWORD PTR $T215266[ebp]
  00056	89 45 08	 mov	 DWORD PTR $T215220[ebp], eax
  00059	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0005e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00063	8d 55 f4	 lea	 edx, DWORD PTR $T215266[ebp]
  00066	52		 push	 edx
  00067	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T215266[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Buynode@4:
$LN43@Buynode@4:
  00073	cc		 int	 3
??$_Buynode@U?$pair@IH@std@@@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@$$QAU?$pair@IH@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode<std::pair<unsigned int,int> >
_TEXT	ENDS
PUBLIC	??$_Buynode@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Buynode<std::pair<int,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Buynode@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z
_TEXT	SEGMENT
$T215371 = -12						; size = 12
$T215319 = 8						; size = 4
__Val$ = 8						; size = 4
??$_Buynode@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Buynode<std::pair<int,_CS_MINIMAP_DATA> >, COMDAT
; _this$ = ecx

; 586  : 		_Nodeptr _Buynode(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

  00008	68 00 08 00 00	 push	 2048			; 00000800H
  0000d	8b f9		 mov	 edi, ecx
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00014	8b f0		 mov	 esi, eax
  00016	33 c0		 xor	 eax, eax
  00018	83 c4 04	 add	 esp, 4
  0001b	3b f0		 cmp	 esi, eax
  0001d	74 36		 je	 SHORT $LN12@Buynode@5
  0001f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00022	89 0e		 mov	 DWORD PTR [esi], ecx
  00024	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00027	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0002a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 589  : 
; 590  : 		_TRY_BEGIN
; 591  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Wherenode)),
; 592  : 			_STD forward<_Valty>(_Val));

  0002d	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00030	66 89 86 fc 07
	00 00		 mov	 WORD PTR [esi+2044], ax
  00037	52		 push	 edx
  00038	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0003b	50		 push	 eax
  0003c	83 c7 0d	 add	 edi, 13			; 0000000dH
  0003f	57		 push	 edi
  00040	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00043	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@U?$pair@HU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@0@@Z ; std::_Cons_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA>,std::pair<int,_CS_MINIMAP_DATA> >
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	5f		 pop	 edi

; 593  : 		_CATCH_ALL
; 594  : 		this->_Alnod.deallocate(_Wherenode, 1);
; 595  : 		_RERAISE;
; 596  : 		_CATCH_END
; 597  : 
; 598  : 		return (_Wherenode);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 599  : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

$LN12@Buynode@5:
  00055	8d 4d 08	 lea	 ecx, DWORD PTR $T215319[ebp]
  00058	51		 push	 ecx
  00059	8d 4d f4	 lea	 ecx, DWORD PTR $T215371[ebp]
  0005c	89 45 08	 mov	 DWORD PTR $T215319[ebp], eax
  0005f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00064	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00069	8d 55 f4	 lea	 edx, DWORD PTR $T215371[ebp]
  0006c	52		 push	 edx
  0006d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T215371[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00074	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Buynode@5:
$LN43@Buynode@5:
  00079	cc		 int	 3
??$_Buynode@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Buynode<std::pair<int,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@@Z ; std::_Uninitialized_move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *,std::allocator<_CS_SCHEDULE_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$215410 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@@Z PROC ; std::_Uninitialized_move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *,std::allocator<_CS_SCHEDULE_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$215410[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *,std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *,std::allocator<_CS_SCHEDULE_DATA> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@@Z ; std::_Uninitialized_move<_CS_NPC_DATA *,_CS_NPC_DATA *,std::allocator<_CS_NPC_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$215420 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@@Z PROC ; std::_Uninitialized_move<_CS_NPC_DATA *,_CS_NPC_DATA *,std::allocator<_CS_NPC_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$215420[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@U1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_NPC_DATA *,_CS_NPC_DATA *,std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<_CS_NPC_DATA *,_CS_NPC_DATA *,std::allocator<_CS_NPC_DATA> >
_TEXT	ENDS
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00007	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0000e	72 0b		 jb	 SHORT $LN18@pair
  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN18@pair:
  0001b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00022	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00029	c6 06 00	 mov	 BYTE PTR [esi], 0
  0002c	5e		 pop	 esi
  0002d	c3		 ret	 0
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YA?AU?$pair@PAU_CS_SCHEDULE_DATA@@PAU1@@0@PAU_CS_SCHEDULE_DATA@@0P6AEAAU2@1@Z@Z ; std::_Unguarded_partition<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YA?AU?$pair@PAU_CS_SCHEDULE_DATA@@PAU1@@0@PAU_CS_SCHEDULE_DATA@@0P6AEAAU2@1@Z@Z
_TEXT	SEGMENT
__Tmp$215979 = -204					; size = 28
__Tmp$215736 = -176					; size = 28
__Tmp$215918 = -148					; size = 28
__Tmp$215583 = -120					; size = 28
__Tmp$215858 = -92					; size = 28
__Tmp$215643 = -64					; size = 28
__Tmp$215797 = -36					; size = 28
tv584 = -8						; size = 4
__Glast$ = -8						; size = 4
tv1477 = -4						; size = 4
$T215814 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Unguarded_partition@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YA?AU?$pair@PAU_CS_SCHEDULE_DATA@@PAU1@@0@PAU_CS_SCHEDULE_DATA@@0P6AEAAU2@1@Z@Z PROC ; std::_Unguarded_partition<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 3712 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx

; 3713 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  0000a	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  00012	8b cb		 mov	 ecx, ebx
  00014	2b cf		 sub	 ecx, edi
  00016	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0001b	f7 e9		 imul	 ecx
  0001d	03 d1		 add	 edx, ecx
  0001f	c1 fa 04	 sar	 edx, 4
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
  00029	99		 cdq
  0002a	2b c2		 sub	 eax, edx

; 3714 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  0002c	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  0002f	d1 f8		 sar	 eax, 1
  00031	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00038	52		 push	 edx
  00039	2b c8		 sub	 ecx, eax
  0003b	83 c3 e4	 add	 ebx, -28		; ffffffe4H
  0003e	8d 34 8f	 lea	 esi, DWORD PTR [edi+ecx*4]
  00041	53		 push	 ebx
  00042	56		 push	 esi
  00043	57		 push	 edi
  00044	e8 00 00 00 00	 call	 ??$_Median@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@00P6AEAAU1@1@Z@Z ; std::_Median<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 3715 : 	_RanIt _Pfirst = _Mid;
; 3716 : 	_RanIt _Plast = _Pfirst + 1;

  0004c	8d 5e 1c	 lea	 ebx, DWORD PTR [esi+28]

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  0004f	3b fe		 cmp	 edi, esi
  00051	73 28		 jae	 SHORT $LN170@Unguarded_
$LL27@Unguarded_:
  00053	8d 46 e4	 lea	 eax, DWORD PTR [esi-28]
  00056	56		 push	 esi
  00057	50		 push	 eax
  00058	89 45 f8	 mov	 DWORD PTR tv584[ebp], eax
  0005b	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0005e	83 c4 08	 add	 esp, 8
  00061	84 c0		 test	 al, al
  00063	75 16		 jne	 SHORT $LN170@Unguarded_
  00065	8b 45 f8	 mov	 eax, DWORD PTR tv584[ebp]
  00068	50		 push	 eax
  00069	56		 push	 esi
  0006a	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0006d	83 c4 08	 add	 esp, 8
  00070	84 c0		 test	 al, al
  00072	75 07		 jne	 SHORT $LN170@Unguarded_

; 3721 : 		--_Pfirst;

  00074	8b 75 f8	 mov	 esi, DWORD PTR tv584[ebp]
  00077	3b fe		 cmp	 edi, esi
  00079	72 d8		 jb	 SHORT $LL27@Unguarded_
$LN170@Unguarded_:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  0007b	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0007e	73 21		 jae	 SHORT $LN24@Unguarded_
$LL25@Unguarded_:
  00080	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  00083	56		 push	 esi
  00084	53		 push	 ebx
  00085	ff d7		 call	 edi
  00087	83 c4 08	 add	 esp, 8
  0008a	84 c0		 test	 al, al
  0008c	75 13		 jne	 SHORT $LN24@Unguarded_
  0008e	53		 push	 ebx
  0008f	56		 push	 esi
  00090	ff d7		 call	 edi
  00092	83 c4 08	 add	 esp, 8
  00095	84 c0		 test	 al, al
  00097	75 08		 jne	 SHORT $LN24@Unguarded_

; 3725 : 		++_Plast;

  00099	83 c3 1c	 add	 ebx, 28			; 0000001cH
  0009c	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0009f	72 df		 jb	 SHORT $LL25@Unguarded_
$LN24@Unguarded_:

; 3726 : 
; 3727 : 	_RanIt _Gfirst = _Plast;
; 3728 : 	_RanIt _Glast = _Pfirst;

  000a1	8b c6		 mov	 eax, esi
  000a3	8b fb		 mov	 edi, ebx
  000a5	89 45 f8	 mov	 DWORD PTR __Glast$[ebp], eax
  000a8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL23@Unguarded_:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000b0	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  000b3	0f 83 99 00 00
	00		 jae	 $LN174@Unguarded_
  000b9	8d a4 24 00 00
	00 00		 npad	 7
$LL21@Unguarded_:

; 3733 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  000c0	57		 push	 edi
  000c1	56		 push	 esi
  000c2	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000c5	83 c4 08	 add	 esp, 8
  000c8	84 c0		 test	 al, al
  000ca	75 77		 jne	 SHORT $LN20@Unguarded_

; 3734 : 				;
; 3735 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  000cc	56		 push	 esi
  000cd	57		 push	 edi
  000ce	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000d1	83 c4 08	 add	 esp, 8
  000d4	84 c0		 test	 al, al
  000d6	75 77		 jne	 SHORT $LN182@Unguarded_

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

  000d8	8b c3		 mov	 eax, ebx
  000da	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000dd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e0	89 55 90	 mov	 DWORD PTR __Tmp$215583[ebp+8], edx
  000e3	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000e6	89 55 94	 mov	 DWORD PTR __Tmp$215583[ebp+12], edx
  000e9	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000ec	89 55 98	 mov	 DWORD PTR __Tmp$215583[ebp+16], edx
  000ef	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000f2	89 55 9c	 mov	 DWORD PTR __Tmp$215583[ebp+20], edx
  000f5	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000f8	89 55 a0	 mov	 DWORD PTR __Tmp$215583[ebp+24], edx
  000fb	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000fe	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00101	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00104	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00107	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  0010a	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0010d	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00110	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00113	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00116	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00119	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  0011c	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0011f	8b 45 90	 mov	 eax, DWORD PTR __Tmp$215583[ebp+8]
  00122	8b 55 98	 mov	 edx, DWORD PTR __Tmp$215583[ebp+16]
  00125	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  00128	8b 4d 94	 mov	 ecx, DWORD PTR __Tmp$215583[ebp+12]
  0012b	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0012e	8b 45 9c	 mov	 eax, DWORD PTR __Tmp$215583[ebp+20]
  00131	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  00134	8b 4d a0	 mov	 ecx, DWORD PTR __Tmp$215583[ebp+24]
  00137	83 c3 1c	 add	 ebx, 28			; 0000001cH
  0013a	89 57 10	 mov	 DWORD PTR [edi+16], edx
  0013d	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00140	89 4f 18	 mov	 DWORD PTR [edi+24], ecx
$LN20@Unguarded_:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00143	83 c7 1c	 add	 edi, 28			; 0000001cH
  00146	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00149	0f 82 71 ff ff
	ff		 jb	 $LL21@Unguarded_
$LN182@Unguarded_:
  0014f	8b 45 f8	 mov	 eax, DWORD PTR __Glast$[ebp]
$LN174@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  00152	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  00155	0f 86 ba 00 00
	00		 jbe	 $LN186@Unguarded_
  0015b	83 c0 ec	 add	 eax, -20		; ffffffecH
  0015e	89 45 fc	 mov	 DWORD PTR tv1477[ebp], eax
$LL183@Unguarded_:

; 3740 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  00161	8b 45 fc	 mov	 eax, DWORD PTR tv1477[ebp]
  00164	83 c0 f8	 add	 eax, -8			; fffffff8H
  00167	56		 push	 esi
  00168	50		 push	 eax
  00169	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0016c	83 c4 08	 add	 esp, 8
  0016f	84 c0		 test	 al, al

; 3741 : 				;
; 3742 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  00171	8b 45 fc	 mov	 eax, DWORD PTR tv1477[ebp]
  00174	0f 85 7d 00 00
	00		 jne	 $LN13@Unguarded_
  0017a	83 c0 f8	 add	 eax, -8			; fffffff8H
  0017d	50		 push	 eax
  0017e	56		 push	 esi
  0017f	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00182	83 c4 08	 add	 esp, 8
  00185	84 c0		 test	 al, al
  00187	0f 85 82 00 00
	00		 jne	 $LN185@Unguarded_

; 3743 : 				break;
; 3744 : 			else
; 3745 : 				_STD iter_swap(--_Pfirst, _Glast - 1);

  0018d	8b 56 ec	 mov	 edx, DWORD PTR [esi-20]
  00190	8b 46 f0	 mov	 eax, DWORD PTR [esi-16]
  00193	8b 4e e8	 mov	 ecx, DWORD PTR [esi-24]
  00196	83 ee 1c	 sub	 esi, 28			; 0000001cH
  00199	89 55 c8	 mov	 DWORD PTR __Tmp$215643[ebp+8], edx
  0019c	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0019f	89 55 d0	 mov	 DWORD PTR __Tmp$215643[ebp+16], edx
  001a2	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  001a5	89 55 d8	 mov	 DWORD PTR __Tmp$215643[ebp+24], edx
  001a8	89 45 cc	 mov	 DWORD PTR __Tmp$215643[ebp+12], eax
  001ab	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001ae	89 45 d4	 mov	 DWORD PTR __Tmp$215643[ebp+20], eax
  001b1	8b 45 fc	 mov	 eax, DWORD PTR tv1477[ebp]
  001b4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001b7	89 56 04	 mov	 DWORD PTR [esi+4], edx
  001ba	8b 10		 mov	 edx, DWORD PTR [eax]
  001bc	89 56 08	 mov	 DWORD PTR [esi+8], edx
  001bf	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001c2	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  001c5	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001c8	89 56 10	 mov	 DWORD PTR [esi+16], edx
  001cb	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  001ce	89 56 14	 mov	 DWORD PTR [esi+20], edx
  001d1	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  001d4	89 56 18	 mov	 DWORD PTR [esi+24], edx
  001d7	8b 55 cc	 mov	 edx, DWORD PTR __Tmp$215643[ebp+12]
  001da	89 48 fc	 mov	 DWORD PTR [eax-4], ecx
  001dd	8b 4d c8	 mov	 ecx, DWORD PTR __Tmp$215643[ebp+8]
  001e0	89 08		 mov	 DWORD PTR [eax], ecx
  001e2	8b 4d d0	 mov	 ecx, DWORD PTR __Tmp$215643[ebp+16]
  001e5	89 50 04	 mov	 DWORD PTR [eax+4], edx
  001e8	8b 55 d4	 mov	 edx, DWORD PTR __Tmp$215643[ebp+20]
  001eb	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  001ee	8b 4d d8	 mov	 ecx, DWORD PTR __Tmp$215643[ebp+24]
  001f1	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  001f4	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN13@Unguarded_:

; 3739 : 		for (; _First < _Glast; --_Glast)

  001f7	8b 4d f8	 mov	 ecx, DWORD PTR __Glast$[ebp]
  001fa	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  001fd	83 e8 1c	 sub	 eax, 28			; 0000001cH
  00200	89 4d f8	 mov	 DWORD PTR __Glast$[ebp], ecx
  00203	89 45 fc	 mov	 DWORD PTR tv1477[ebp], eax
  00206	39 4d 0c	 cmp	 DWORD PTR __First$[ebp], ecx
  00209	0f 82 52 ff ff
	ff		 jb	 $LL183@Unguarded_
$LN185@Unguarded_:
  0020f	8b 45 f8	 mov	 eax, DWORD PTR __Glast$[ebp]

; 3746 : 		if (_Glast == _First && _Gfirst == _Last)

  00212	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
$LN186@Unguarded_:
  00215	0f 85 29 01 00
	00		 jne	 $LN6@Unguarded_
  0021b	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  0021e	0f 84 a8 02 00
	00		 je	 $LN176@Unguarded_

; 3748 : 
; 3749 : 		if (_Glast == _First)
; 3750 : 			{	// no room at bottom, rotate pivot upward
; 3751 : 			if (_Plast != _Gfirst)

  00224	3b df		 cmp	 ebx, edi
  00226	0f 84 84 00 00
	00		 je	 $LN94@Unguarded_

; 3752 : 				_STD iter_swap(_Pfirst, _Plast);

  0022c	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0022f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00232	89 95 58 ff ff
	ff		 mov	 DWORD PTR __Tmp$215736[ebp+8], edx
  00238	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0023b	89 95 5c ff ff
	ff		 mov	 DWORD PTR __Tmp$215736[ebp+12], edx
  00241	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00244	89 95 60 ff ff
	ff		 mov	 DWORD PTR __Tmp$215736[ebp+16], edx
  0024a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0024d	89 95 64 ff ff
	ff		 mov	 DWORD PTR __Tmp$215736[ebp+20], edx
  00253	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00256	89 95 68 ff ff
	ff		 mov	 DWORD PTR __Tmp$215736[ebp+24], edx
  0025c	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0025f	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00262	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00265	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00268	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  0026b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0026e	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00271	89 56 10	 mov	 DWORD PTR [esi+16], edx
  00274	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00277	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0027a	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  0027d	89 56 18	 mov	 DWORD PTR [esi+24], edx
  00280	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR __Tmp$215736[ebp+12]
  00286	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  00289	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR __Tmp$215736[ebp+8]
  0028f	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx
  00292	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR __Tmp$215736[ebp+16]
  00298	89 53 0c	 mov	 DWORD PTR [ebx+12], edx
  0029b	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR __Tmp$215736[ebp+20]
  002a1	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  002a4	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR __Tmp$215736[ebp+24]
  002aa	89 53 14	 mov	 DWORD PTR [ebx+20], edx
  002ad	89 4b 18	 mov	 DWORD PTR [ebx+24], ecx
$LN94@Unguarded_:

; 3753 : 			++_Plast;
; 3754 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  002b0	8b ce		 mov	 ecx, esi
  002b2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002b5	89 55 e0	 mov	 DWORD PTR __Tmp$215797[ebp+4], edx
  002b8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002bb	89 55 e4	 mov	 DWORD PTR __Tmp$215797[ebp+8], edx
  002be	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  002c1	89 55 e8	 mov	 DWORD PTR __Tmp$215797[ebp+12], edx
  002c4	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002c7	89 55 ec	 mov	 DWORD PTR __Tmp$215797[ebp+16], edx
  002ca	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002cd	89 55 f0	 mov	 DWORD PTR __Tmp$215797[ebp+20], edx
  002d0	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  002d3	89 55 f4	 mov	 DWORD PTR __Tmp$215797[ebp+24], edx
  002d6	89 7d fc	 mov	 DWORD PTR $T215814[ebp], edi
  002d9	8b 55 fc	 mov	 edx, DWORD PTR $T215814[ebp]
  002dc	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  002df	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  002e2	8b 55 fc	 mov	 edx, DWORD PTR $T215814[ebp]
  002e5	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  002e8	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  002eb	8b 55 fc	 mov	 edx, DWORD PTR $T215814[ebp]
  002ee	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  002f1	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  002f4	8b 55 fc	 mov	 edx, DWORD PTR $T215814[ebp]
  002f7	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  002fa	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  002fd	8b 55 fc	 mov	 edx, DWORD PTR $T215814[ebp]
  00300	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00303	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  00306	8b 55 fc	 mov	 edx, DWORD PTR $T215814[ebp]
  00309	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  0030c	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0030f	8b 4d fc	 mov	 ecx, DWORD PTR $T215814[ebp]
  00312	8b 55 e0	 mov	 edx, DWORD PTR __Tmp$215797[ebp+4]
  00315	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00318	8b 55 e4	 mov	 edx, DWORD PTR __Tmp$215797[ebp+8]
  0031b	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0031e	8b 55 e8	 mov	 edx, DWORD PTR __Tmp$215797[ebp+12]
  00321	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00324	8b 55 ec	 mov	 edx, DWORD PTR __Tmp$215797[ebp+16]
  00327	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0032a	8b 55 f0	 mov	 edx, DWORD PTR __Tmp$215797[ebp+20]
  0032d	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  00330	8b 55 f4	 mov	 edx, DWORD PTR __Tmp$215797[ebp+24]
  00333	83 c3 1c	 add	 ebx, 28			; 0000001cH
  00336	83 c6 1c	 add	 esi, 28			; 0000001cH
  00339	83 c7 1c	 add	 edi, 28			; 0000001cH
  0033c	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0033f	e9 6c fd ff ff	 jmp	 $LL23@Unguarded_
$LN6@Unguarded_:

; 3755 : 			}
; 3756 : 		else if (_Gfirst == _Last)
; 3757 : 			{	// no room at top, rotate pivot downward
; 3758 : 			if (--_Glast != --_Pfirst)

  00344	83 e8 1c	 sub	 eax, 28			; 0000001cH
  00347	89 45 f8	 mov	 DWORD PTR __Glast$[ebp], eax
  0034a	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  0034d	0f 85 ed 00 00
	00		 jne	 $LN3@Unguarded_
  00353	83 ee 1c	 sub	 esi, 28			; 0000001cH
  00356	3b c6		 cmp	 eax, esi
  00358	74 66		 je	 SHORT $LN130@Unguarded_

; 3759 : 				_STD iter_swap(_Glast, _Pfirst);

  0035a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0035d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00360	89 55 ac	 mov	 DWORD PTR __Tmp$215858[ebp+8], edx
  00363	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00366	89 55 b0	 mov	 DWORD PTR __Tmp$215858[ebp+12], edx
  00369	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0036c	89 55 b4	 mov	 DWORD PTR __Tmp$215858[ebp+16], edx
  0036f	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00372	89 55 b8	 mov	 DWORD PTR __Tmp$215858[ebp+20], edx
  00375	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00378	89 55 bc	 mov	 DWORD PTR __Tmp$215858[ebp+24], edx
  0037b	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0037e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00381	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00384	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00387	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0038a	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0038d	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00390	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00393	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00396	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00399	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  0039c	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0039f	8b 55 b0	 mov	 edx, DWORD PTR __Tmp$215858[ebp+12]
  003a2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  003a5	8b 4d ac	 mov	 ecx, DWORD PTR __Tmp$215858[ebp+8]
  003a8	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  003ab	8b 4d b4	 mov	 ecx, DWORD PTR __Tmp$215858[ebp+16]
  003ae	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  003b1	8b 55 b8	 mov	 edx, DWORD PTR __Tmp$215858[ebp+20]
  003b4	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  003b7	8b 4d bc	 mov	 ecx, DWORD PTR __Tmp$215858[ebp+24]
  003ba	89 56 14	 mov	 DWORD PTR [esi+20], edx
  003bd	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
$LN130@Unguarded_:

; 3760 : 			_STD iter_swap(_Pfirst, --_Plast);

  003c0	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  003c3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  003c6	89 95 74 ff ff
	ff		 mov	 DWORD PTR __Tmp$215918[ebp+8], edx
  003cc	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  003cf	89 95 78 ff ff
	ff		 mov	 DWORD PTR __Tmp$215918[ebp+12], edx
  003d5	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  003d8	89 95 7c ff ff
	ff		 mov	 DWORD PTR __Tmp$215918[ebp+16], edx
  003de	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  003e1	83 eb 1c	 sub	 ebx, 28			; 0000001cH
  003e4	89 55 80	 mov	 DWORD PTR __Tmp$215918[ebp+20], edx
  003e7	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  003ea	89 55 84	 mov	 DWORD PTR __Tmp$215918[ebp+24], edx
  003ed	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  003f0	89 56 04	 mov	 DWORD PTR [esi+4], edx
  003f3	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  003f6	89 56 08	 mov	 DWORD PTR [esi+8], edx
  003f9	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  003fc	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  003ff	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00402	89 56 10	 mov	 DWORD PTR [esi+16], edx
  00405	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  00408	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0040b	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  0040e	89 56 18	 mov	 DWORD PTR [esi+24], edx
  00411	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR __Tmp$215918[ebp+12]
  00417	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  0041a	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR __Tmp$215918[ebp+8]
  00420	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx
  00423	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR __Tmp$215918[ebp+16]
  00429	89 53 0c	 mov	 DWORD PTR [ebx+12], edx
  0042c	8b 55 80	 mov	 edx, DWORD PTR __Tmp$215918[ebp+20]
  0042f	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  00432	8b 4d 84	 mov	 ecx, DWORD PTR __Tmp$215918[ebp+24]
  00435	89 53 14	 mov	 DWORD PTR [ebx+20], edx
  00438	89 4b 18	 mov	 DWORD PTR [ebx+24], ecx

; 3761 : 			}
; 3762 : 		else

  0043b	e9 70 fc ff ff	 jmp	 $LL23@Unguarded_
$LN3@Unguarded_:

; 3763 : 			_STD iter_swap(_Gfirst++, --_Glast);

  00440	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00443	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00446	89 95 3c ff ff
	ff		 mov	 DWORD PTR __Tmp$215979[ebp+8], edx
  0044c	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  0044f	89 95 40 ff ff
	ff		 mov	 DWORD PTR __Tmp$215979[ebp+12], edx
  00455	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00458	89 95 44 ff ff
	ff		 mov	 DWORD PTR __Tmp$215979[ebp+16], edx
  0045e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00461	89 95 48 ff ff
	ff		 mov	 DWORD PTR __Tmp$215979[ebp+20], edx
  00467	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  0046a	89 95 4c ff ff
	ff		 mov	 DWORD PTR __Tmp$215979[ebp+24], edx
  00470	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00473	89 57 04	 mov	 DWORD PTR [edi+4], edx
  00476	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00479	89 57 08	 mov	 DWORD PTR [edi+8], edx
  0047c	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0047f	89 57 0c	 mov	 DWORD PTR [edi+12], edx
  00482	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00485	89 57 10	 mov	 DWORD PTR [edi+16], edx
  00488	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0048b	89 57 14	 mov	 DWORD PTR [edi+20], edx
  0048e	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00491	89 57 18	 mov	 DWORD PTR [edi+24], edx
  00494	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR __Tmp$215979[ebp+12]
  0049a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0049d	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR __Tmp$215979[ebp+8]
  004a3	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  004a6	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR __Tmp$215979[ebp+16]
  004ac	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  004af	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR __Tmp$215979[ebp+20]
  004b5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  004b8	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR __Tmp$215979[ebp+24]
  004be	89 50 14	 mov	 DWORD PTR [eax+20], edx
  004c1	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  004c4	83 c7 1c	 add	 edi, 28			; 0000001cH

; 3764 : 		}

  004c7	e9 e4 fb ff ff	 jmp	 $LL23@Unguarded_
$LN176@Unguarded_:

; 3747 : 			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  004cc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  004cf	5f		 pop	 edi
  004d0	89 30		 mov	 DWORD PTR [eax], esi
  004d2	5e		 pop	 esi
  004d3	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  004d6	5b		 pop	 ebx

; 3765 : 	}

  004d7	8b e5		 mov	 esp, ebp
  004d9	5d		 pop	 ebp
  004da	c3		 ret	 0
??$_Unguarded_partition@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YA?AU?$pair@PAU_CS_SCHEDULE_DATA@@PAU1@@0@PAU_CS_SCHEDULE_DATA@@0P6AEAAU2@1@Z@Z ENDP ; std::_Unguarded_partition<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ; std::_Sort_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Sort_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Sort_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z PROC ; std::_Sort_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 2700 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2701 : 	for (; 1 < _Last - _First; --_Last)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000c	8b f7		 mov	 esi, edi
  0000e	2b f3		 sub	 esi, ebx
  00010	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
  00019	c1 fa 04	 sar	 edx, 4
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
  00023	83 f8 01	 cmp	 eax, 1
  00026	7e 2e		 jle	 SHORT $LN1@Sort_heap
$LL3@Sort_heap:

; 2702 : 		_Pop_heap(_First, _Last, _Pred);

  00028	8b 4d 10	 mov	 ecx, DWORD PTR __Pred$[ebp]
  0002b	6a 00		 push	 0
  0002d	51		 push	 ecx
  0002e	57		 push	 edi
  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAU_CS_SCHEDULE_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Pop_heap_0<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  00035	83 ee 1c	 sub	 esi, 28			; 0000001cH
  00038	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0003d	f7 ee		 imul	 esi
  0003f	03 d6		 add	 edx, esi
  00041	c1 fa 04	 sar	 edx, 4
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00049	03 c2		 add	 eax, edx
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	83 ef 1c	 sub	 edi, 28			; 0000001cH
  00051	83 f8 01	 cmp	 eax, 1
  00054	7f d2		 jg	 SHORT $LL3@Sort_heap
$LN1@Sort_heap:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx

; 2703 : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
??$_Sort_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ENDP ; std::_Sort_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00007	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0000e	72 0b		 jb	 SHORT $LN18@pair@2
  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN18@pair@2:
  0001b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00022	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00029	c6 06 00	 mov	 BYTE PTR [esi], 0
  0002c	5e		 pop	 esi
  0002d	c3		 ret	 0
??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>
_TEXT	ENDS
PUBLIC	?GetCsAttkGuildList@CCastleSiege@@QAEHPAUPMSG_CSATTKGUILDLIST@@PAH@Z ; CCastleSiege::GetCsAttkGuildList
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
;	COMDAT ?GetCsAttkGuildList@CCastleSiege@@QAEHPAUPMSG_CSATTKGUILDLIST@@PAH@Z
_TEXT	SEGMENT
tv399 = 8						; size = 4
_lpMsgBody$ = 8						; size = 4
_it$189445 = 12						; size = 4
_iCount$ = 12						; size = 4
?GetCsAttkGuildList@CCastleSiege@@QAEHPAUPMSG_CSATTKGUILDLIST@@PAH@Z PROC ; CCastleSiege::GetCsAttkGuildList, COMDAT
; _this$ = ecx

; 5229 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 5230 : 	*iCount = 0;

  00005	8b 75 0c	 mov	 esi, DWORD PTR _iCount$[ebp]
  00008	57		 push	 edi

; 5231 : 
; 5232 : 	if(lpMsgBody == NULL)

  00009	8b 7d 08	 mov	 edi, DWORD PTR _lpMsgBody$[ebp]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00014	85 ff		 test	 edi, edi
  00016	75 09		 jne	 SHORT $LN7@GetCsAttkG

; 5233 : 		return false;

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	33 c0		 xor	 eax, eax
  0001c	5b		 pop	 ebx

; 5257 : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
$LN7@GetCsAttkG:

; 5234 : 
; 5235 : 	if(m_iCastleSiegeState != CASTLESIEGE_STATE_NOTIFY && m_iCastleSiegeState != CASTLESIEGE_STATE_READYSIEGE)

  00021	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00024	83 f8 05	 cmp	 eax, 5
  00027	74 11		 je	 SHORT $LN6@GetCsAttkG
  00029	83 f8 06	 cmp	 eax, 6
  0002c	74 0c		 je	 SHORT $LN6@GetCsAttkG

; 5236 : 		return 2;

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	b8 02 00 00 00	 mov	 eax, 2
  00035	5b		 pop	 ebx

; 5257 : }

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
$LN6@GetCsAttkG:

; 5237 : 
; 5238 : 	if(m_bCsBasicGuildInfoLoadOK == FALSE || m_bCsTotalGuildInfoLoadOK == FALSE)

  0003a	83 bb a4 01 00
	00 00		 cmp	 DWORD PTR [ebx+420], 0
  00041	0f 84 ab 00 00
	00		 je	 $LN4@GetCsAttkG
  00047	83 bb a8 01 00
	00 00		 cmp	 DWORD PTR [ebx+424], 0
  0004e	0f 84 9e 00 00
	00		 je	 $LN4@GetCsAttkG

; 5240 : 
; 5241 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  00054	8d 83 8c 01 00
	00		 lea	 eax, DWORD PTR [ebx+396]
  0005a	50		 push	 eax
  0005b	89 45 08	 mov	 DWORD PTR tv399[ebp], eax
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5242 : 
; 5243 : 	for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsTotalGuildInfo.begin(); it != m_mapCsTotalGuildInfo.end(); it++)

  00064	8b 8b 80 01 00
	00		 mov	 ecx, DWORD PTR [ebx+384]
  0006a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006c	89 45 0c	 mov	 DWORD PTR _it$189445[ebp], eax
  0006f	3b c1		 cmp	 eax, ecx
  00071	74 69		 je	 SHORT $LN1@GetCsAttkG
$LL28@GetCsAttkG:

; 5244 : 	{
; 5245 : 		lpMsgBody[*iCount].btCsJoinSide = it->second.m_iCsGuildID;

  00073	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00075	0f b6 50 30	 movzx	 edx, BYTE PTR [eax+48]
  00079	03 c9		 add	 ecx, ecx
  0007b	88 14 cf	 mov	 BYTE PTR [edi+ecx*8], dl

; 5246 : 		lpMsgBody[*iCount].btGuildInvolved = it->second.m_bGuildInvolved;

  0007e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00080	0f b6 50 34	 movzx	 edx, BYTE PTR [eax+52]
  00084	03 c9		 add	 ecx, ecx
  00086	88 54 cf 01	 mov	 BYTE PTR [edi+ecx*8+1], dl

; 5247 : 		lpMsgBody[*iCount].iScore = it->second.m_iTotalScore;

  0008a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008c	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  0008f	03 c9		 add	 ecx, ecx
  00091	89 54 cf 0c	 mov	 DWORD PTR [edi+ecx*8+12], edx

; 5248 : 
; 5249 : 		memset(lpMsgBody[*iCount].szGuildName,0x00,10);

  00095	8b 16		 mov	 edx, DWORD PTR [esi]
  00097	33 c9		 xor	 ecx, ecx
  00099	03 d2		 add	 edx, edx
  0009b	8d 54 d7 02	 lea	 edx, DWORD PTR [edi+edx*8+2]
  0009f	89 0a		 mov	 DWORD PTR [edx], ecx
  000a1	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  000a4	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 5250 : 		memcpy(lpMsgBody[*iCount].szGuildName,&it->first[0],8);

  000a8	83 78 20 10	 cmp	 DWORD PTR [eax+32], 16	; 00000010H
  000ac	72 05		 jb	 SHORT $LN80@GetCsAttkG
  000ae	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000b1	eb 03		 jmp	 SHORT $LN81@GetCsAttkG
$LN80@GetCsAttkG:
  000b3	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
$LN81@GetCsAttkG:
  000b6	8b 06		 mov	 eax, DWORD PTR [esi]
  000b8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ba	03 c0		 add	 eax, eax
  000bc	89 54 c7 02	 mov	 DWORD PTR [edi+eax*8+2], edx
  000c0	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c3	89 4c c7 06	 mov	 DWORD PTR [edi+eax*8+6], ecx

; 5251 : 
; 5252 : 		*iCount += 1;

  000c7	ff 06		 inc	 DWORD PTR [esi]
  000c9	8d 4d 0c	 lea	 ecx, DWORD PTR _it$189445[ebp]
  000cc	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator++
  000d1	8b 45 0c	 mov	 eax, DWORD PTR _it$189445[ebp]
  000d4	3b 83 80 01 00
	00		 cmp	 eax, DWORD PTR [ebx+384]
  000da	75 97		 jne	 SHORT $LL28@GetCsAttkG
$LN1@GetCsAttkG:

; 5253 : 	}
; 5254 : 
; 5255 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  000dc	8b 55 08	 mov	 edx, DWORD PTR tv399[ebp]
  000df	52		 push	 edx
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi

; 5256 : return true;

  000e8	b8 01 00 00 00	 mov	 eax, 1
  000ed	5b		 pop	 ebx

; 5257 : }

  000ee	5d		 pop	 ebp
  000ef	c2 08 00	 ret	 8
$LN4@GetCsAttkG:
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi

; 5239 : 		return 3;

  000f4	b8 03 00 00 00	 mov	 eax, 3
  000f9	5b		 pop	 ebx

; 5257 : }

  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
?GetCsAttkGuildList@CCastleSiege@@QAEHPAUPMSG_CSATTKGUILDLIST@@PAH@Z ENDP ; CCastleSiege::GetCsAttkGuildList
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 543  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 544  : 		_Tidy();
; 545  : 		assign(_Right, 0, npos);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	6a ff		 push	 -1
  00009	8b f1		 mov	 esi, ecx
  0000b	6a 00		 push	 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001b	50		 push	 eax
  0001c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 546  : 		}

  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::find
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
$T216446 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::find, COMDAT
; _this$ = ecx

; 1423 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1424 : 		iterator _Where = lower_bound(_Keyval);

  00006	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
  0000c	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lbound
  00011	89 45 0c	 mov	 DWORD PTR __Where$[ebp], eax

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  00014	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00017	74 33		 je	 SHORT $LN3@find@4
  00019	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0001c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001f	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00023	72 02		 jb	 SHORT $LN45@find@4
  00025	8b 00		 mov	 eax, DWORD PTR [eax]
$LN45@find@4:
  00027	51		 push	 ecx
  00028	50		 push	 eax
  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	8b cf		 mov	 ecx, edi
  00031	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00036	85 c0		 test	 eax, eax
  00038	78 12		 js	 SHORT $LN3@find@4
  0003a	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  0003d	8b 10		 mov	 edx, DWORD PTR [eax]
  0003f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00042	5f		 pop	 edi
  00043	89 10		 mov	 DWORD PTR [eax], edx
  00045	5e		 pop	 esi

; 1429 : 		}

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
$LN3@find@4:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  0004c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004f	8d 45 fc	 lea	 eax, DWORD PTR $T216446[ebp]
  00052	89 4d fc	 mov	 DWORD PTR $T216446[ebp], ecx
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005a	5f		 pop	 edi
  0005b	89 10		 mov	 DWORD PTR [eax], edx
  0005d	5e		 pop	 esi

; 1429 : 		}

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::find
_TEXT	ENDS
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 39		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 33		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002f	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ; std::_Cons_val<std::allocator<int>,int,int &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00040	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN4@push_back:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0004a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004d	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004f	6a 01		 push	 1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00058	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00069	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXPAU_CS_SCHEDULE_DATA@@0@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXPAU_CS_SCHEDULE_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXPAU_CS_SCHEDULE_DATA@@0@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 16		 je	 SHORT $LN7@Destroy
  0000f	53		 push	 ebx
  00010	8d 59 0c	 lea	 ebx, DWORD PTR [ecx+12]
$LL9@Destroy:
  00013	56		 push	 esi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
  0001a	83 c6 1c	 add	 esi, 28			; 0000001cH
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL9@Destroy
  00024	5b		 pop	 ebx
$LN7@Destroy:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1271 : 		}

  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
?_Destroy@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXPAU_CS_SCHEDULE_DATA@@0@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXPAU_CS_NPC_DATA@@0@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXPAU_CS_NPC_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXPAU_CS_NPC_DATA@@0@Z PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 16		 je	 SHORT $LN7@Destroy@2
  0000f	53		 push	 ebx
  00010	8d 59 0c	 lea	 ebx, DWORD PTR [ecx+12]
$LL9@Destroy@2:
  00013	56		 push	 esi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
  0001a	83 c6 74	 add	 esi, 116		; 00000074H
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL9@Destroy@2
  00024	5b		 pop	 ebx
$LN7@Destroy@2:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1271 : 		}

  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
?_Destroy@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXPAU_CS_NPC_DATA@@0@Z ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T216705 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 1379 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1380 : 		if (_First == begin() && _Last == end())

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00012	75 1c		 jne	 SHORT $LN97@erase@3
  00014	3b d0		 cmp	 edx, eax
  00016	75 18		 jne	 SHORT $LN97@erase@3

; 1381 : 			{	// erase all
; 1382 : 			clear();

  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::clear

; 1383 : 			return (begin());

  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1389 : 			return (iterator(_First._Ptr, this));

  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00027	89 08		 mov	 DWORD PTR [eax], ecx
  00029	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
$LN97@erase@3:

; 1384 : 			}
; 1385 : 		else
; 1386 : 			{	// partial erase, one at a time
; 1387 : 			while (_First != _Last)

  00030	3b ca		 cmp	 ecx, edx
  00032	74 5e		 je	 SHORT $LN1@erase@3
$LL2@erase@3:

; 1388 : 				erase(_First++);

  00034	80 79 15 00	 cmp	 BYTE PTR [ecx+21], 0
  00038	8b d1		 mov	 edx, ecx
  0003a	75 42		 jne	 SHORT $LN59@erase@3
  0003c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0003f	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00043	75 1a		 jne	 SHORT $LN99@erase@3
  00045	8b c8		 mov	 ecx, eax
  00047	8b 01		 mov	 eax, DWORD PTR [ecx]
  00049	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0004d	75 0b		 jne	 SHORT $LN73@erase@3
  0004f	90		 npad	 1
$LL74@erase@3:
  00050	8b c8		 mov	 ecx, eax
  00052	8b 01		 mov	 eax, DWORD PTR [ecx]
  00054	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00058	74 f6		 je	 SHORT $LL74@erase@3
$LN73@erase@3:
  0005a	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  0005d	eb 1f		 jmp	 SHORT $LN59@erase@3
$LN99@erase@3:
  0005f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00062	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00066	75 13		 jne	 SHORT $LN57@erase@3
$LL58@erase@3:
  00068	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0006b	75 0e		 jne	 SHORT $LN57@erase@3
  0006d	8b c8		 mov	 ecx, eax
  0006f	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  00072	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00075	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00079	74 ed		 je	 SHORT $LL58@erase@3
$LN57@erase@3:
  0007b	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
$LN59@erase@3:
  0007e	52		 push	 edx
  0007f	8d 55 fc	 lea	 edx, DWORD PTR $T216705[ebp]
  00082	52		 push	 edx
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  0008d	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00090	75 a2		 jne	 SHORT $LL2@erase@3
$LN1@erase@3:

; 1389 : 			return (iterator(_First._Ptr, this));

  00092	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00095	89 08		 mov	 DWORD PTR [eax], ecx
  00097	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXPAU_CS_REG_GUILD_DATA@@0@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Destroy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXPAU_CS_REG_GUILD_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXPAU_CS_REG_GUILD_DATA@@0@Z PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 16		 je	 SHORT $LN7@Destroy@3
  0000f	53		 push	 ebx
  00010	8d 59 0c	 lea	 ebx, DWORD PTR [ecx+12]
$LL9@Destroy@3:
  00013	56		 push	 esi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
  0001a	83 c6 40	 add	 esi, 64			; 00000040H
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL9@Destroy@3
  00024	5b		 pop	 ebx
$LN7@Destroy@3:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1271 : 		}

  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
?_Destroy@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXPAU_CS_REG_GUILD_DATA@@0@Z ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Destroy
_TEXT	ENDS
PUBLIC	??$insert@U?$pair@IH@std@@@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@IH@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert<std::pair<unsigned int,int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??$insert@U?$pair@IH@std@@@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@IH@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@IH@std@@@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@IH@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert<std::pair<unsigned int,int> >, COMDAT
; _this$ = ecx

; 753  : 		_Pairib insert(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 754  : 		{	// try to insert node with value _Val, favoring right side
; 755  : 		return (_Linsert(this->_Buynode(_STD forward<_Valty>(_Val)),
; 756  : 			false));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@IH@std@@@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@$$QAU?$pair@IH@1@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode<std::pair<unsigned int,int> >
  00012	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00015	50		 push	 eax
  00016	57		 push	 edi
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Linsert
  0001e	8b c7		 mov	 eax, edi
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 757  : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??$insert@U?$pair@IH@std@@@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@IH@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert<std::pair<unsigned int,int> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA> >, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@

; 288  : 	}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Dest_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAU_CS_SCHEDULE_DATA@@@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEPAU_CS_SCHEDULE_DATA@@PAU2@00@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Umove<_CS_SCHEDULE_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAU_CS_SCHEDULE_DATA@@@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEPAU_CS_SCHEDULE_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$217137 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAU_CS_SCHEDULE_DATA@@@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEPAU_CS_SCHEDULE_DATA@@PAU2@00@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Umove<_CS_SCHEDULE_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$217137[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *,std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAU_CS_SCHEDULE_DATA@@@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEPAU_CS_SCHEDULE_DATA@@PAU2@00@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Umove<_CS_SCHEDULE_DATA *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAU_CS_NPC_DATA@@@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEPAU_CS_NPC_DATA@@PAU2@00@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Umove<_CS_NPC_DATA *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAU_CS_NPC_DATA@@@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEPAU_CS_NPC_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$217156 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAU_CS_NPC_DATA@@@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEPAU_CS_NPC_DATA@@PAU2@00@Z PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Umove<_CS_NPC_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$217156[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@U1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_NPC_DATA *,_CS_NPC_DATA *,std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAU_CS_NPC_DATA@@@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEPAU_CS_NPC_DATA@@PAU2@00@Z ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Umove<_CS_NPC_DATA *>
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 910  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 911  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 912  : 		if (_Count != 0)
; 913  : 			_DEBUG_POINTER(_Ptr);
; 914  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 915  : 
; 916  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 59		 je	 SHORT $LN85@assign@2
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00014	72 04		 jb	 SHORT $LN12@assign@2
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN13@assign@2
$LN12@assign@2:
  0001a	8b c6		 mov	 eax, esi
$LN13@assign@2:
  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 47		 jb	 SHORT $LN85@assign@2
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN16@assign@2
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN17@assign@2
$LN16@assign@2:
  00029	8b c6		 mov	 eax, esi
$LN17@assign@2:
  0002b	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0002e	03 d0		 add	 edx, eax
  00030	3b d3		 cmp	 edx, ebx
  00032	76 33		 jbe	 SHORT $LN85@assign@2

; 917  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00037	72 17		 jb	 SHORT $LN20@assign@2
  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0003e	51		 push	 ecx
  0003f	2b d8		 sub	 ebx, eax
  00041	53		 push	 ebx
  00042	56		 push	 esi
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 925  : 		}

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8

; 917  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

$LN20@assign@2:
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00053	8b c6		 mov	 eax, esi
  00055	51		 push	 ecx
  00056	2b d8		 sub	 ebx, eax
  00058	53		 push	 ebx
  00059	56		 push	 esi
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx

; 925  : 		}

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
$LN85@assign@2:
  00067	57		 push	 edi

; 918  : 
; 919  : 		if (_Grow(_Count))

  00068	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0006b	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0006e	76 0a		 jbe	 SHORT $LN27@assign@2
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00075	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN89@assign@2:
$LN27@assign@2:
  0007a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0007d	3b c7		 cmp	 eax, edi
  0007f	73 1a		 jae	 SHORT $LN26@assign@2
  00081	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00084	52		 push	 edx
  00085	57		 push	 edi
  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0008d	85 ff		 test	 edi, edi
  0008f	74 5b		 je	 SHORT $LN82@assign@2
$LN88@assign@2:

; 920  : 			{	// make room and assign new stuff
; 921  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00091	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00095	72 2a		 jb	 SHORT $LN72@assign@2
  00097	8b 06		 mov	 eax, DWORD PTR [esi]
  00099	eb 28		 jmp	 SHORT $LN73@assign@2

; 918  : 
; 919  : 		if (_Grow(_Count))

$LN26@assign@2:
  0009b	85 ff		 test	 edi, edi
  0009d	75 f2		 jne	 SHORT $LN88@assign@2
  0009f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000a2	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a5	72 0e		 jb	 SHORT $LN65@assign@2
  000a7	8b 06		 mov	 eax, DWORD PTR [esi]
  000a9	5f		 pop	 edi
  000aa	c6 00 00	 mov	 BYTE PTR [eax], 0

; 923  : 			}
; 924  : 		return (*this);

  000ad	8b c6		 mov	 eax, esi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx

; 925  : 		}

  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8

; 918  : 
; 919  : 		if (_Grow(_Count))

$LN65@assign@2:
  000b5	5f		 pop	 edi
  000b6	8b c6		 mov	 eax, esi
  000b8	5e		 pop	 esi
  000b9	c6 00 00	 mov	 BYTE PTR [eax], 0
  000bc	5b		 pop	 ebx

; 925  : 		}

  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8

; 920  : 			{	// make room and assign new stuff
; 921  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

$LN72@assign@2:
  000c1	8b c6		 mov	 eax, esi
$LN73@assign@2:
  000c3	57		 push	 edi
  000c4	53		 push	 ebx
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _memcpy
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 922  : 			_Eos(_Count);

  000ce	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000d2	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000d5	72 0f		 jb	 SHORT $LN80@assign@2
  000d7	8b 06		 mov	 eax, DWORD PTR [esi]
  000d9	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000dd	5f		 pop	 edi

; 923  : 			}
; 924  : 		return (*this);

  000de	8b c6		 mov	 eax, esi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx

; 925  : 		}

  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8

; 922  : 			_Eos(_Count);

$LN80@assign@2:
  000e6	8b c6		 mov	 eax, esi
  000e8	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN82@assign@2:

; 923  : 			}
; 924  : 		return (*this);

  000ec	5f		 pop	 edi
  000ed	8b c6		 mov	 eax, esi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx

; 925  : 		}

  000f1	5d		 pop	 ebp
  000f2	c2 08 00	 ret	 8
$LN86@assign@2:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 886  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 887  : 		return (assign(_Right, 0, npos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	6a ff		 push	 -1
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 888  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Insert
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@1@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1631 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1632 : 		if (max_size() - 1 <= this->_Mysize)

  00008	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0000b	3d 80 40 20 00	 cmp	 eax, 2113664		; 00204080H
  00010	72 23		 jb	 SHORT $LN17@Insert@2

; 1633 : 			{	// tree would get too big, fail
; 1634 : 			_Dest_val(this->_Alval,
; 1635 : 				_STD addressof(this->_Myval(_Newnode)));

  00012	8b 75 14	 mov	 esi, DWORD PTR __Newnode$[ebp]
  00015	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00018	50		 push	 eax
  00019	83 c7 0d	 add	 edi, 13			; 0000000dH
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA> >

; 1636 : 
; 1637 : 			this->_Alnod.deallocate(_Newnode, 1);

  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1638 : 
; 1639 : 			_Xlength_error("map/set<T> too long");

  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  00030	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN329@Insert@2:
$LN17@Insert@2:

; 1640 : 			}
; 1641 : 		++this->_Mysize;
; 1642 : 		_Newnode->_Parent = _Wherenode;

  00035	8b 55 14	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00038	40		 inc	 eax
  00039	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0003c	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0003f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1643 : 
; 1644 : 		if (_Wherenode == this->_Myhead)

  00042	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00045	3b c1		 cmp	 eax, ecx
  00047	75 10		 jne	 SHORT $LN16@Insert@2

; 1645 : 			{	// first node in tree, just set head values
; 1646 : 			_Root() = _Newnode;

  00049	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1647 : 			_Lmost() = _Newnode;

  0004c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0004f	89 11		 mov	 DWORD PTR [ecx], edx

; 1648 : 			_Rmost() = _Newnode;

  00051	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00054	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00057	eb 21		 jmp	 SHORT $LN11@Insert@2
$LN16@Insert@2:

; 1649 : 			}
; 1650 : 		else if (_Addleft)

  00059	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0005d	74 0d		 je	 SHORT $LN14@Insert@2

; 1651 : 			{	// add to left of _Wherenode
; 1652 : 			this->_Left(_Wherenode) = _Newnode;

  0005f	89 10		 mov	 DWORD PTR [eax], edx

; 1653 : 			if (_Wherenode == _Lmost())

  00061	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00064	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00066	75 12		 jne	 SHORT $LN11@Insert@2

; 1654 : 				_Lmost() = _Newnode;

  00068	89 11		 mov	 DWORD PTR [ecx], edx

; 1655 : 			}
; 1656 : 		else

  0006a	eb 0e		 jmp	 SHORT $LN11@Insert@2
$LN14@Insert@2:

; 1657 : 			{	// add to right of _Wherenode
; 1658 : 			this->_Right(_Wherenode) = _Newnode;

  0006c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1659 : 			if (_Wherenode == _Rmost())

  0006f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00072	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00075	75 03		 jne	 SHORT $LN11@Insert@2

; 1660 : 				_Rmost() = _Newnode;

  00077	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN11@Insert@2:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  0007a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0007d	80 b9 fc 07 00
	00 00		 cmp	 BYTE PTR [ecx+2044], 0
  00084	8b f2		 mov	 esi, edx
  00086	b3 01		 mov	 bl, 1
  00088	0f 85 70 01 00
	00		 jne	 $LN9@Insert@2
  0008e	8b ff		 npad	 2
$LL10@Insert@2:

; 1665 : 			if (this->_Parent(_Pnode)
; 1666 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00096	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00098	0f 85 bb 00 00
	00		 jne	 $LN8@Insert@2

; 1667 : 				{	// fixup red-red in left subtree
; 1668 : 				_Wherenode =
; 1669 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  0009e	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1670 : 				if (this->_Color(_Wherenode) == this->_Red)

  000a1	80 b9 fc 07 00
	00 00		 cmp	 BYTE PTR [ecx+2044], 0

; 1671 : 					{	// parent has two red children, blacken both
; 1672 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1673 : 					this->_Color(_Wherenode) = this->_Black;
; 1674 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1675 : 						= this->_Red;
; 1676 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1677 : 					}
; 1678 : 				else

  000a8	0f 84 b6 00 00
	00		 je	 $LN328@Insert@2

; 1679 : 					{	// parent has red and black children
; 1680 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  000ae	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000b1	75 3e		 jne	 SHORT $LN111@Insert@2

; 1681 : 						{	// rotate right child to left
; 1682 : 						_Pnode = this->_Parent(_Pnode);

  000b3	8b f0		 mov	 esi, eax

; 1683 : 						_Lrotate(_Pnode);

  000b5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b8	8b 10		 mov	 edx, DWORD PTR [eax]
  000ba	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bf	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  000c6	75 03		 jne	 SHORT $LN110@Insert@2
  000c8	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN110@Insert@2:
  000cb	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ce	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000d1	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d4	3b 71 04	 cmp	 esi, DWORD PTR [ecx+4]
  000d7	75 05		 jne	 SHORT $LN109@Insert@2
  000d9	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000dc	eb 0e		 jmp	 SHORT $LN106@Insert@2
$LN109@Insert@2:
  000de	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000e1	3b 31		 cmp	 esi, DWORD PTR [ecx]
  000e3	75 04		 jne	 SHORT $LN107@Insert@2
  000e5	89 01		 mov	 DWORD PTR [ecx], eax
  000e7	eb 03		 jmp	 SHORT $LN106@Insert@2
$LN107@Insert@2:
  000e9	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN106@Insert@2:
  000ec	89 30		 mov	 DWORD PTR [eax], esi
  000ee	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN111@Insert@2:

; 1684 : 						}
; 1685 : 					this->_Color(this->_Parent(_Pnode)) =
; 1686 : 						this->_Black;	// propagate red up

  000f1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000f4	88 9a fc 07 00
	00		 mov	 BYTE PTR [edx+2044], bl

; 1687 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1688 : 						this->_Red;

  000fa	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000fd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00100	c6 81 fc 07 00
	00 00		 mov	 BYTE PTR [ecx+2044], 0

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  00107	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0010a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0010d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00112	89 10		 mov	 DWORD PTR [eax], edx
  00114	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00117	80 ba fd 07 00
	00 00		 cmp	 BYTE PTR [edx+2045], 0
  0011e	75 03		 jne	 SHORT $LN173@Insert@2
  00120	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN173@Insert@2:
  00123	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00126	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00129	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0012c	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0012f	75 0b		 jne	 SHORT $LN172@Insert@2
  00131	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00134	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00137	e9 ac 00 00 00	 jmp	 $LN327@Insert@2

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN172@Insert@2:
  0013c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0013f	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00142	75 0b		 jne	 SHORT $LN170@Insert@2
  00144	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00147	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  0014a	e9 99 00 00 00	 jmp	 $LN327@Insert@2

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN170@Insert@2:
  0014f	89 0a		 mov	 DWORD PTR [edx], ecx
  00151	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00154	e9 8f 00 00 00	 jmp	 $LN327@Insert@2
$LN8@Insert@2:

; 1693 : 				{	// fixup red-red in right subtree
; 1694 : 				_Wherenode =
; 1695 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

  00159	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 1696 : 				if (this->_Color(_Wherenode) == this->_Red)

  0015b	80 b9 fc 07 00
	00 00		 cmp	 BYTE PTR [ecx+2044], 0
  00162	75 21		 jne	 SHORT $LN3@Insert@2
$LN328@Insert@2:

; 1697 : 					{	// parent has two red children, blacken both
; 1698 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  00164	88 98 fc 07 00
	00		 mov	 BYTE PTR [eax+2044], bl

; 1699 : 					this->_Color(_Wherenode) = this->_Black;

  0016a	88 99 fc 07 00
	00		 mov	 BYTE PTR [ecx+2044], bl

; 1700 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1701 : 						this->_Red;

  00170	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00173	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00176	c6 80 fc 07 00
	00 00		 mov	 BYTE PTR [eax+2044], 0

; 1702 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  0017d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00180	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]

; 1703 : 					}
; 1704 : 				else

  00183	eb 69		 jmp	 SHORT $LN267@Insert@2
$LN3@Insert@2:

; 1705 : 					{	// parent has red and black children
; 1706 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00185	3b 30		 cmp	 esi, DWORD PTR [eax]
  00187	75 0a		 jne	 SHORT $LN1@Insert@2

; 1707 : 						{	// rotate left child to right
; 1708 : 						_Pnode = this->_Parent(_Pnode);

  00189	8b f0		 mov	 esi, eax

; 1709 : 						_Rrotate(_Pnode);

  0018b	56		 push	 esi
  0018c	8b cf		 mov	 ecx, edi
  0018e	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Rrotate
$LN1@Insert@2:

; 1710 : 						}
; 1711 : 					this->_Color(this->_Parent(_Pnode)) =
; 1712 : 						this->_Black;	// propagate red up

  00193	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00196	88 9a fc 07 00
	00		 mov	 BYTE PTR [edx+2044], bl

; 1713 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1714 : 						this->_Red;

  0019c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0019f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001a2	c6 81 fc 07 00
	00 00		 mov	 BYTE PTR [ecx+2044], 0

; 1715 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  001a9	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  001ac	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b4	89 50 08	 mov	 DWORD PTR [eax+8], edx
  001b7	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b9	80 ba fd 07 00
	00 00		 cmp	 BYTE PTR [edx+2045], 0
  001c0	75 03		 jne	 SHORT $LN266@Insert@2
  001c2	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN266@Insert@2:
  001c5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001c8	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  001cb	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  001ce	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  001d1	75 05		 jne	 SHORT $LN265@Insert@2
  001d3	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  001d6	eb 0e		 jmp	 SHORT $LN262@Insert@2
$LN265@Insert@2:
  001d8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001db	3b 02		 cmp	 eax, DWORD PTR [edx]
  001dd	75 04		 jne	 SHORT $LN263@Insert@2
  001df	89 0a		 mov	 DWORD PTR [edx], ecx
  001e1	eb 03		 jmp	 SHORT $LN262@Insert@2
$LN263@Insert@2:
  001e3	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN262@Insert@2:
  001e6	89 01		 mov	 DWORD PTR [ecx], eax
$LN327@Insert@2:
  001e8	8b 55 14	 mov	 edx, DWORD PTR __Newnode$[ebp]
  001eb	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN267@Insert@2:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  001ee	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001f1	80 b8 fc 07 00
	00 00		 cmp	 BYTE PTR [eax+2044], 0
  001f8	0f 84 92 fe ff
	ff		 je	 $LL10@Insert@2
$LN9@Insert@2:

; 1716 : 					}
; 1717 : 				}
; 1718 : 
; 1719 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  001fe	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00201	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00204	5f		 pop	 edi
  00205	88 98 fc 07 00
	00		 mov	 BYTE PTR [eax+2044], bl

; 1720 : 		return (iterator(_Newnode, this));

  0020b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0020e	5e		 pop	 esi
  0020f	89 10		 mov	 DWORD PTR [eax], edx
  00211	5b		 pop	 ebx

; 1721 : 		}

  00212	5d		 pop	 ebp
  00213	c2 10 00	 ret	 16			; 00000010H
$LN326@Insert@2:
?_Insert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@1@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Insert
_TEXT	ENDS
PUBLIC	??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,_CS_TOTAL_GUILD_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z PROC ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,_CS_TOTAL_GUILD_DATA &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	56		 push	 esi
  00007	6a ff		 push	 -1
  00009	8b f1		 mov	 esi, ecx
  0000b	6a 00		 push	 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001b	50		 push	 eax
  0001c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00024	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00027	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0002e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00031	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00034	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00037	89 56 24	 mov	 DWORD PTR [esi+36], edx
  0003a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003d	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  00040	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00043	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 164  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z ENDP ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,_CS_TOTAL_GUILD_DATA &>
_TEXT	ENDS
PUBLIC	??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,_CS_TOTAL_GUILD_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z PROC ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,_CS_TOTAL_GUILD_DATA &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	56		 push	 esi
  00007	6a ff		 push	 -1
  00009	8b f1		 mov	 esi, ecx
  0000b	6a 00		 push	 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001b	50		 push	 eax
  0001c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00024	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00027	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0002e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00031	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00034	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00037	89 56 24	 mov	 DWORD PTR [esi+36], edx
  0003a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003d	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  00040	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00043	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 164  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z ENDP ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,_CS_TOTAL_GUILD_DATA &>
_TEXT	ENDS
PUBLIC	??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z		; _CS_REG_GUILD_DATA::_CS_REG_GUILD_DATA
; Function compile flags: /Ogtp
;	COMDAT ??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z PROC			; _CS_REG_GUILD_DATA::_CS_REG_GUILD_DATA, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  00010	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00013	6a ff		 push	 -1
  00015	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00018	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001b	6a 00		 push	 0
  0001d	8d 57 0c	 lea	 edx, DWORD PTR [edi+12]
  00020	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  00027	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0002e	52		 push	 edx
  0002f	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00032	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00037	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0003a	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0003d	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00040	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
  00043	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00046	89 56 30	 mov	 DWORD PTR [esi+48], edx
  00049	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  0004c	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0004f	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00052	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00055	8b 57 3c	 mov	 edx, DWORD PTR [edi+60]
  00058	5f		 pop	 edi
  00059	89 56 3c	 mov	 DWORD PTR [esi+60], edx
  0005c	8b c6		 mov	 eax, esi
  0005e	5e		 pop	 esi
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z ENDP			; _CS_REG_GUILD_DATA::_CS_REG_GUILD_DATA
_TEXT	ENDS
PUBLIC	??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAEPAXI@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAEPAXI@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0000a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  00011	72 0b		 jb	 SHORT $LN20@scalar@8
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN20@scalar@8:
  0001e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00022	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00029	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00030	c6 06 00	 mov	 BYTE PTR [esi], 0
  00033	74 09		 je	 SHORT $LN32@scalar@8
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
$LN32@scalar@8:
  0003e	8b c6		 mov	 eax, esi
  00040	5e		 pop	 esi
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAEPAXI@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$sort_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ; std::sort_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$sort_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z PROC ; std::sort_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 2708 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2713 : 	}

  00003	5d		 pop	 ebp

; 2709 : 	_DEBUG_RANGE(_First, _Last);
; 2710 : 	_DEBUG_POINTER(_Pred);
; 2711 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2712 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00004	e9 00 00 00 00	 jmp	 ??$_Sort_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ; std::_Sort_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
??$sort_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ENDP ; std::sort_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z ; std::allocator<_CS_REG_GUILD_DATA>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z$0
__ehfuncinfo$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
$T218503 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z PROC ; std::allocator<_CS_REG_GUILD_DATA>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T218503[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 09		 je	 SHORT $LN3@construct@11
  00034	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z
$LN3@construct@11:

; 203  : 		}

  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T218503[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@$$QAU3@@Z ENDP ; std::allocator<_CS_REG_GUILD_DATA>::construct
PUBLIC	??_C@_0EH@MJEMODHO@?$FLCastleSiege?$FN?5Siege?5Guild?5List?5S@ ; `string'
PUBLIC	??_C@_0FO@OHINBPBM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Save@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ	; CCastleSiege::SaveCsTotalGuildInfo
;	COMDAT ??_C@_0EH@MJEMODHO@?$FLCastleSiege?$FN?5Siege?5Guild?5List?5S@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0EH@MJEMODHO@?$FLCastleSiege?$FN?5Siege?5Guild?5List?5S@ DB '[Castl'
	DB	'eSiege] Siege Guild List Save - GNAME:%s, CSGUID:%d, INVOLVED'
	DB	':%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FO@OHINBPBM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Save@
CONST	SEGMENT
??_C@_0FO@OHINBPBM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Save@ DB '[Castle'
	DB	'Siege] CCastleSiege::SaveCsTotalGuildInfo() ERROR - m_bCsTota'
	DB	'lGuildInfoLoadOK == FALSE', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ$2
__ehfuncinfo$?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
tv1035 = -2764						; size = 4
_this$GSCopy$ = -2760					; size = 4
_strGuildName$189271 = -2756				; size = 28
_strGuildName$189249 = -2728				; size = 28
_stTEMP$189272 = -2720					; size = 20
_cBUFFER$ = -2700					; size = 2684
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::SaveCsTotalGuildInfo, COMDAT
; _this$ = ecx

; 4934 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 0a 00
	00		 sub	 esp, 2752		; 00000ac0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx

; 4935 : 	if(m_bCsTotalGuildInfoLoadOK == FALSE)

  00030	33 db		 xor	 ebx, ebx

; 4973 : 
; 4974 : 	for(int iSize = m_mapCsTotalGuildInfo.size();it2 != m_mapCsTotalGuildInfo.end(); it2++)

  00032	89 bd 38 f5 ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00038	39 9f a8 01 00
	00		 cmp	 DWORD PTR [edi+424], ebx
  0003e	75 15		 jne	 SHORT $LN8@SaveCsTota

; 4936 : 	{
; 4937 : 		LogAddC(2,"[CastleSiege] CCastleSiege::SaveCsTotalGuildInfo() ERROR - m_bCsTotalGuildInfoLoadOK == FALSE");

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@OHINBPBM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Save@
  00045	6a 02		 push	 2
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0004d	83 c4 08	 add	 esp, 8

; 4938 : 		return;

  00050	e9 90 02 00 00	 jmp	 $LN9@SaveCsTota
$LN8@SaveCsTota:

; 4939 : 	}
; 4940 : 
; 4941 : 	char cBUFFER[0xA7C];
; 4942 : 
; 4943 : 	CSP_REQ_CSSAVETOTALGUILDINFO * lpMsgSend = (CSP_REQ_CSSAVETOTALGUILDINFO *)cBUFFER;
; 4944 : 	CSP_CSSAVETOTALGUILDINFO * lpMsgSendBody = (CSP_CSSAVETOTALGUILDINFO *)&cBUFFER[sizeof(CSP_REQ_CSSAVETOTALGUILDINFO)];
; 4945 : 
; 4946 : 	lpMsgSend->wMapSvrNum = m_iMapSvrGroup;

  00055	66 8b 47 18	 mov	 ax, WORD PTR [edi+24]
  00059	66 89 85 78 f5
	ff ff		 mov	 WORD PTR _cBUFFER$[ebp+4], ax

; 4947 : 	lpMsgSend->iCount = 0;
; 4948 : 
; 4949 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  00060	8d 87 8c 01 00
	00		 lea	 eax, DWORD PTR [edi+396]
  00066	50		 push	 eax
  00067	89 9d 7c f5 ff
	ff		 mov	 DWORD PTR _cBUFFER$[ebp+8], ebx
  0006d	89 85 34 f5 ff
	ff		 mov	 DWORD PTR tv1035[ebp], eax
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4950 : 
; 4951 : 	for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsTotalGuildInfo.begin();it != m_mapCsTotalGuildInfo.end(); it++)

  00079	8b 87 80 01 00
	00		 mov	 eax, DWORD PTR [edi+384]
  0007f	8b 30		 mov	 esi, DWORD PTR [eax]
  00081	3b f0		 cmp	 esi, eax
  00083	0f 84 fd 00 00
	00		 je	 $LN308@SaveCsTota
$LN36@SaveCsTota:

; 4952 : 	{
; 4953 : 		if(lpMsgSend->iCount > 150)

  00089	81 bd 7c f5 ff
	ff 96 00 00 00	 cmp	 DWORD PTR _cBUFFER$[ebp+8], 150 ; 00000096H
  00093	0f 8f ed 00 00
	00		 jg	 $LN308@SaveCsTota

; 4954 : 			break;
; 4955 : 
; 4956 : 		basic_string<char,char_traits<char> > strGuildName = it->first;

  00099	6a ff		 push	 -1
  0009b	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0009e	53		 push	 ebx
  0009f	50		 push	 eax
  000a0	8d 8d 58 f5 ff
	ff		 lea	 ecx, DWORD PTR _strGuildName$189249[ebp]
  000a6	c7 85 6c f5 ff
	ff 0f 00 00 00	 mov	 DWORD PTR _strGuildName$189249[ebp+20], 15 ; 0000000fH
  000b0	89 9d 68 f5 ff
	ff		 mov	 DWORD PTR _strGuildName$189249[ebp+16], ebx
  000b6	88 9d 58 f5 ff
	ff		 mov	 BYTE PTR _strGuildName$189249[ebp], bl
  000bc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 4957 : 
; 4958 : 		memcpy(lpMsgSendBody[lpMsgSend->iCount].szGuildName,&strGuildName[0],8);

  000c1	8b 8d 58 f5 ff
	ff		 mov	 ecx, DWORD PTR _strGuildName$189249[ebp]
  000c7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000cc	39 95 6c f5 ff
	ff		 cmp	 DWORD PTR _strGuildName$189249[ebp+20], edx
  000d2	73 06		 jae	 SHORT $LN119@SaveCsTota
  000d4	8d 8d 58 f5 ff
	ff		 lea	 ecx, DWORD PTR _strGuildName$189249[ebp]
$LN119@SaveCsTota:
  000da	8b 85 7c f5 ff
	ff		 mov	 eax, DWORD PTR _cBUFFER$[ebp+8]
  000e0	8b 39		 mov	 edi, DWORD PTR [ecx]
  000e2	03 c0		 add	 eax, eax
  000e4	89 bc c5 80 f5
	ff ff		 mov	 DWORD PTR _cBUFFER$[ebp+eax*8+12], edi
  000eb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000ee	89 8c c5 84 f5
	ff ff		 mov	 DWORD PTR _cBUFFER$[ebp+eax*8+16], ecx

; 4959 : 		lpMsgSendBody[lpMsgSend->iCount].iCsGuildID = it->second.m_iCsGuildID;

  000f5	8b 85 7c f5 ff
	ff		 mov	 eax, DWORD PTR _cBUFFER$[ebp+8]
  000fb	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000fe	03 c0		 add	 eax, eax
  00100	89 8c c5 88 f5
	ff ff		 mov	 DWORD PTR _cBUFFER$[ebp+eax*8+20], ecx

; 4960 : 		lpMsgSendBody[lpMsgSend->iCount].iGuildInvolved = it->second.m_bGuildInvolved;

  00107	8b 85 7c f5 ff
	ff		 mov	 eax, DWORD PTR _cBUFFER$[ebp+8]
  0010d	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00110	03 c0		 add	 eax, eax
  00112	89 8c c5 8c f5
	ff ff		 mov	 DWORD PTR _cBUFFER$[ebp+eax*8+24], ecx

; 4961 : 
; 4962 : 		lpMsgSend->iCount++;

  00119	ff 85 7c f5 ff
	ff		 inc	 DWORD PTR _cBUFFER$[ebp+8]

; 4963 : 	}

  0011f	39 95 6c f5 ff
	ff		 cmp	 DWORD PTR _strGuildName$189249[ebp+20], edx
  00125	72 0f		 jb	 SHORT $LN146@SaveCsTota
  00127	8b 95 58 f5 ff
	ff		 mov	 edx, DWORD PTR _strGuildName$189249[ebp]
  0012d	52		 push	 edx
  0012e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00133	83 c4 04	 add	 esp, 4
$LN146@SaveCsTota:

; 4950 : 
; 4951 : 	for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsTotalGuildInfo.begin();it != m_mapCsTotalGuildInfo.end(); it++)

  00136	38 5e 3d	 cmp	 BYTE PTR [esi+61], bl
  00139	75 39		 jne	 SHORT $LN311@SaveCsTota
  0013b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0013e	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  00141	75 18		 jne	 SHORT $LN304@SaveCsTota
  00143	8b f0		 mov	 esi, eax
  00145	8b 06		 mov	 eax, DWORD PTR [esi]
  00147	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  0014a	75 28		 jne	 SHORT $LN311@SaveCsTota
  0014c	8d 64 24 00	 npad	 4
$LL51@SaveCsTota:
  00150	8b f0		 mov	 esi, eax
  00152	8b 06		 mov	 eax, DWORD PTR [esi]
  00154	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  00157	74 f7		 je	 SHORT $LL51@SaveCsTota
  00159	eb 19		 jmp	 SHORT $LN311@SaveCsTota
$LN304@SaveCsTota:
  0015b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0015e	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  00161	75 0f		 jne	 SHORT $LN34@SaveCsTota
$LL35@SaveCsTota:
  00163	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00166	75 0a		 jne	 SHORT $LN34@SaveCsTota
  00168	8b f0		 mov	 esi, eax
  0016a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016d	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  00170	74 f1		 je	 SHORT $LL35@SaveCsTota
$LN34@SaveCsTota:
  00172	8b f0		 mov	 esi, eax
$LN311@SaveCsTota:
  00174	8b bd 38 f5 ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  0017a	3b b7 80 01 00
	00		 cmp	 esi, DWORD PTR [edi+384]
  00180	0f 85 03 ff ff
	ff		 jne	 $LN36@SaveCsTota
$LN308@SaveCsTota:

; 4964 : 
; 4965 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  00186	8b b5 34 f5 ff
	ff		 mov	 esi, DWORD PTR tv1035[ebp]
  0018c	56		 push	 esi
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4966 : 
; 4967 : 	lpMsgSend->h.set((PBYTE)lpMsgSend,0x87,sizeof(CSP_REQ_CSSAVETOTALGUILDINFO) + sizeof(CSP_CSSAVETOTALGUILDINFO) * lpMsgSend->iCount);

  00193	8b 85 7c f5 ff
	ff		 mov	 eax, DWORD PTR _cBUFFER$[ebp+8]
  00199	c1 e0 04	 shl	 eax, 4
  0019c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0019f	8b c8		 mov	 ecx, eax
  001a1	c1 e9 08	 shr	 ecx, 8

; 4968 : 	cDBSMng.Send((char *)lpMsgSend,sizeof(CSP_REQ_CSSAVETOTALGUILDINFO) + sizeof(CSP_CSSAVETOTALGUILDINFO) * lpMsgSend->iCount);

  001a4	50		 push	 eax
  001a5	8d 95 74 f5 ff
	ff		 lea	 edx, DWORD PTR _cBUFFER$[ebp]
  001ab	88 8d 75 f5 ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+1], cl
  001b1	52		 push	 edx
  001b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  001b7	c6 85 74 f5 ff
	ff c2		 mov	 BYTE PTR _cBUFFER$[ebp], 194 ; 000000c2H
  001be	88 85 76 f5 ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+2], al
  001c4	c6 85 77 f5 ff
	ff 87		 mov	 BYTE PTR _cBUFFER$[ebp+3], 135 ; 00000087H
  001cb	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 4969 : 
; 4970 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  001d0	56		 push	 esi
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4971 : 
; 4972 : 	_CS_TOTAL_GUILD_DATA_MAP::iterator it2 = m_mapCsTotalGuildInfo.begin();

  001d7	8b 87 80 01 00
	00		 mov	 eax, DWORD PTR [edi+384]
  001dd	8b 38		 mov	 edi, DWORD PTR [eax]

; 4973 : 
; 4974 : 	for(int iSize = m_mapCsTotalGuildInfo.size();it2 != m_mapCsTotalGuildInfo.end(); it2++)

  001df	3b f8		 cmp	 edi, eax
  001e1	0f 84 f1 00 00
	00		 je	 $LN1@SaveCsTota
$LL184@SaveCsTota:

; 4975 : 	{
; 4976 : 		basic_string<char,char_traits<char> > strGuildName = it2->first;

  001e7	6a ff		 push	 -1
  001e9	53		 push	 ebx
  001ea	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  001ed	56		 push	 esi
  001ee	8d 8d 3c f5 ff
	ff		 lea	 ecx, DWORD PTR _strGuildName$189271[ebp]
  001f4	c7 85 50 f5 ff
	ff 0f 00 00 00	 mov	 DWORD PTR _strGuildName$189271[ebp+20], 15 ; 0000000fH
  001fe	89 9d 4c f5 ff
	ff		 mov	 DWORD PTR _strGuildName$189271[ebp+16], ebx
  00204	88 9d 3c f5 ff
	ff		 mov	 BYTE PTR _strGuildName$189271[ebp], bl
  0020a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 4977 : 
; 4978 : 		_CS_TOTAL_GUILD_DATA stTEMP = it2->second;

  0020f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00212	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00215	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00218	89 85 64 f5 ff
	ff		 mov	 DWORD PTR _stTEMP$189272[ebp+4], eax
  0021e	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00221	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00224	c7 85 60 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTEMP$189272[ebp], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0022e	89 85 68 f5 ff
	ff		 mov	 DWORD PTR _stTEMP$189272[ebp+8], eax
  00234	89 8d 6c f5 ff
	ff		 mov	 DWORD PTR _stTEMP$189272[ebp+12], ecx
  0023a	89 95 70 f5 ff
	ff		 mov	 DWORD PTR _stTEMP$189272[ebp+16], edx

; 4979 : 
; 4980 : 		LogAddTD("[CastleSiege] Siege Guild List Save - GNAME:%s, CSGUID:%d, INVOLVED:%d",
; 4981 : 			&strGuildName[0], stTEMP.m_iCsGuildID, stTEMP.m_bGuildInvolved);

  00240	8b 95 3c f5 ff
	ff		 mov	 edx, DWORD PTR _strGuildName$189271[ebp]
  00246	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  0024b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0024f	39 b5 50 f5 ff
	ff		 cmp	 DWORD PTR _strGuildName$189271[ebp+20], esi
  00255	73 06		 jae	 SHORT $LN277@SaveCsTota
  00257	8d 95 3c f5 ff
	ff		 lea	 edx, DWORD PTR _strGuildName$189271[ebp]
$LN277@SaveCsTota:
  0025d	51		 push	 ecx
  0025e	50		 push	 eax
  0025f	52		 push	 edx
  00260	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@MJEMODHO@?$FLCastleSiege?$FN?5Siege?5Guild?5List?5S@
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0026b	83 c4 10	 add	 esp, 16			; 00000010H

; 4982 : 	}

  0026e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00275	39 b5 50 f5 ff
	ff		 cmp	 DWORD PTR _strGuildName$189271[ebp+20], esi
  0027b	72 0f		 jb	 SHORT $LN290@SaveCsTota
  0027d	8b 85 3c f5 ff
	ff		 mov	 eax, DWORD PTR _strGuildName$189271[ebp]
  00283	50		 push	 eax
  00284	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00289	83 c4 04	 add	 esp, 4
$LN290@SaveCsTota:

; 4973 : 
; 4974 : 	for(int iSize = m_mapCsTotalGuildInfo.size();it2 != m_mapCsTotalGuildInfo.end(); it2++)

  0028c	38 5f 3d	 cmp	 BYTE PTR [edi+61], bl
  0028f	75 35		 jne	 SHORT $LN314@SaveCsTota
  00291	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00294	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  00297	75 14		 jne	 SHORT $LN307@SaveCsTota
  00299	8b f8		 mov	 edi, eax
  0029b	8b 07		 mov	 eax, DWORD PTR [edi]
  0029d	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  002a0	75 24		 jne	 SHORT $LN314@SaveCsTota
$LL199@SaveCsTota:
  002a2	8b f8		 mov	 edi, eax
  002a4	8b 07		 mov	 eax, DWORD PTR [edi]
  002a6	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  002a9	74 f7		 je	 SHORT $LL199@SaveCsTota
  002ab	eb 19		 jmp	 SHORT $LN314@SaveCsTota
$LN307@SaveCsTota:
  002ad	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  002b0	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  002b3	75 0f		 jne	 SHORT $LN182@SaveCsTota
$LL183@SaveCsTota:
  002b5	3b 78 08	 cmp	 edi, DWORD PTR [eax+8]
  002b8	75 0a		 jne	 SHORT $LN182@SaveCsTota
  002ba	8b f8		 mov	 edi, eax
  002bc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002bf	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  002c2	74 f1		 je	 SHORT $LL183@SaveCsTota
$LN182@SaveCsTota:
  002c4	8b f8		 mov	 edi, eax
$LN314@SaveCsTota:
  002c6	8b 8d 38 f5 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002cc	3b b9 80 01 00
	00		 cmp	 edi, DWORD PTR [ecx+384]
  002d2	0f 85 0f ff ff
	ff		 jne	 $LL184@SaveCsTota
$LN1@SaveCsTota:

; 4983 : 
; 4984 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  002d8	8b 95 34 f5 ff
	ff		 mov	 edx, DWORD PTR tv1035[ebp]
  002de	52		 push	 edx
  002df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN9@SaveCsTota:

; 4985 : 
; 4986 : }

  002e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ef	59		 pop	 ecx
  002f0	5f		 pop	 edi
  002f1	5e		 pop	 esi
  002f2	5b		 pop	 ebx
  002f3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f6	33 cd		 xor	 ecx, ebp
  002f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002fd	8b e5		 mov	 esp, ebp
  002ff	5d		 pop	 ebp
  00300	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ$1:
  00000	8d 8d 3c f5 ff
	ff		 lea	 ecx, DWORD PTR _strGuildName$189271[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ$2:
  0000b	8d 8d 60 f5 ff
	ff		 lea	 ecx, DWORD PTR _stTEMP$189272[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1_CS_TOTAL_GUILD_DATA@@UAE@XZ ; _CS_TOTAL_GUILD_DATA::~_CS_TOTAL_GUILD_DATA
__ehhandler$?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a 30 f5 ff
	ff		 mov	 ecx, DWORD PTR [edx-2768]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::SaveCsTotalGuildInfo
PUBLIC	?AddMiniMapDataReqUser@CCastleSiege@@QAEXH@Z	; CCastleSiege::AddMiniMapDataReqUser
; Function compile flags: /Ogtp
;	COMDAT ?AddMiniMapDataReqUser@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?AddMiniMapDataReqUser@CCastleSiege@@QAEXH@Z PROC	; CCastleSiege::AddMiniMapDataReqUser, COMDAT
; _this$ = ecx

; 5389 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 5390 : 	EnterCriticalSection(&m_critCsMiniMap);

  00007	8d be bc 01 00
	00		 lea	 edi, DWORD PTR [esi+444]
  0000d	57		 push	 edi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5391 : 
; 5392 : 	if(find(m_vtMiniMapReqUser.begin(),m_vtMiniMapReqUser.end(),iIndex) == m_vtMiniMapReqUser.end())

  00014	8b 96 d8 01 00
	00		 mov	 edx, DWORD PTR [esi+472]
  0001a	8b 86 d4 01 00
	00		 mov	 eax, DWORD PTR [esi+468]
  00020	8d 8e d4 01 00
	00		 lea	 ecx, DWORD PTR [esi+468]
  00026	3b c2		 cmp	 eax, edx
  00028	74 15		 je	 SHORT $LN56@AddMiniMap
  0002a	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  0002d	8d 49 00	 npad	 3
$LL41@AddMiniMap:
  00030	39 30		 cmp	 DWORD PTR [eax], esi
  00032	74 07		 je	 SHORT $LN53@AddMiniMap
  00034	83 c0 04	 add	 eax, 4
  00037	3b c2		 cmp	 eax, edx
  00039	75 f5		 jne	 SHORT $LL41@AddMiniMap
$LN53@AddMiniMap:
  0003b	3b c2		 cmp	 eax, edx
  0003d	75 09		 jne	 SHORT $LN1@AddMiniMap
$LN56@AddMiniMap:

; 5393 : 	{
; 5394 : 		m_vtMiniMapReqUser.push_back(iIndex);

  0003f	8d 45 08	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
$LN1@AddMiniMap:

; 5395 : 	}
; 5396 : 
; 5397 : 	LeaveCriticalSection(&m_critCsMiniMap);

  00048	57		 push	 edi
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 5398 : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?AddMiniMapDataReqUser@CCastleSiege@@QAEXH@Z ENDP	; CCastleSiege::AddMiniMapDataReqUser
_TEXT	ENDS
PUBLIC	?erase@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@0@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
__First$ = -8						; size = 4
_this$ = -4						; size = 4
__Cat$219852 = 8					; size = 1
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00009	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  0000c	56		 push	 esi
  0000d	8b f1		 mov	 esi, ecx
  0000f	8b c8		 mov	 ecx, eax
  00011	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00014	89 4d f8	 mov	 DWORD PTR __First$[ebp], ecx
  00017	3b c2		 cmp	 eax, edx
  00019	74 47		 je	 SHORT $LN51@erase@4

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0001b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001e	53		 push	 ebx
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR __Cat$219852[ebp]
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	51		 push	 ecx
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ??$_Move@PAU_CS_SCHEDULE_DATA@@PAU1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  0002c	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0002f	8b d8		 mov	 ebx, eax
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	8b f3		 mov	 esi, ebx
  00036	3b df		 cmp	 ebx, edi
  00038	74 1d		 je	 SHORT $LN36@erase@4
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL52@erase@4:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 c0 0c	 add	 eax, 12			; 0000000cH
  00046	56		 push	 esi
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
  0004d	83 c6 1c	 add	 esi, 28			; 0000001cH
  00050	83 c4 08	 add	 esp, 8
  00053	3b f7		 cmp	 esi, edi
  00055	75 e9		 jne	 SHORT $LL52@erase@4
$LN36@erase@4:

; 1211 : 			this->_Mylast = _Ptr;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __First$[ebp]
  0005d	5f		 pop	 edi
  0005e	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00061	5b		 pop	 ebx
$LN51@erase@4:
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	89 08		 mov	 DWORD PTR [eax], ecx
  00067	5e		 pop	 esi

; 1214 : 		}

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXXZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1302 : 		if (this->_Myfirst != 0)

  00004	8b 33		 mov	 esi, DWORD PTR [ebx]
  00006	85 f6		 test	 esi, esi
  00008	74 28		 je	 SHORT $LN17@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000a	57		 push	 edi
  0000b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 14		 je	 SHORT $LN12@Tidy@3
$LL14@Tidy@3:
  00012	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00015	56		 push	 esi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
  0001c	83 c6 1c	 add	 esi, 28			; 0000001cH
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f7		 cmp	 esi, edi
  00024	75 ec		 jne	 SHORT $LL14@Tidy@3
$LN12@Tidy@3:

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	8b 03		 mov	 eax, DWORD PTR [ebx]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	5f		 pop	 edi
$LN17@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi
  00035	89 03		 mov	 DWORD PTR [ebx], eax

; 1310 : 		this->_Mylast = 0;

  00037	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1311 : 		this->_Myend = 0;

  0003a	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0003d	5b		 pop	 ebx

; 1312 : 		}

  0003e	c3		 ret	 0
?_Tidy@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@0@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
__First$ = -8						; size = 4
_this$ = -4						; size = 4
__Cat$220053 = 8					; size = 1
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00009	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  0000c	56		 push	 esi
  0000d	8b f1		 mov	 esi, ecx
  0000f	8b c8		 mov	 ecx, eax
  00011	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00014	89 4d f8	 mov	 DWORD PTR __First$[ebp], ecx
  00017	3b c2		 cmp	 eax, edx
  00019	74 47		 je	 SHORT $LN51@erase@5

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0001b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001e	53		 push	 ebx
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR __Cat$220053[ebp]
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	51		 push	 ecx
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ??$_Move@PAU_CS_NPC_DATA@@PAU1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<_CS_NPC_DATA *,_CS_NPC_DATA *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  0002c	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0002f	8b d8		 mov	 ebx, eax
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	8b f3		 mov	 esi, ebx
  00036	3b df		 cmp	 ebx, edi
  00038	74 1d		 je	 SHORT $LN36@erase@5
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL52@erase@5:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 c0 0c	 add	 eax, 12			; 0000000cH
  00046	56		 push	 esi
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
  0004d	83 c6 74	 add	 esi, 116		; 00000074H
  00050	83 c4 08	 add	 esp, 8
  00053	3b f7		 cmp	 esi, edi
  00055	75 e9		 jne	 SHORT $LL52@erase@5
$LN36@erase@5:

; 1211 : 			this->_Mylast = _Ptr;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __First$[ebp]
  0005d	5f		 pop	 edi
  0005e	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00061	5b		 pop	 ebx
$LN51@erase@5:
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	89 08		 mov	 DWORD PTR [eax], ecx
  00067	5e		 pop	 esi

; 1214 : 		}

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXXZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1302 : 		if (this->_Myfirst != 0)

  00004	8b 33		 mov	 esi, DWORD PTR [ebx]
  00006	85 f6		 test	 esi, esi
  00008	74 28		 je	 SHORT $LN17@Tidy@4

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000a	57		 push	 edi
  0000b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 14		 je	 SHORT $LN12@Tidy@4
$LL14@Tidy@4:
  00012	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00015	56		 push	 esi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
  0001c	83 c6 74	 add	 esi, 116		; 00000074H
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f7		 cmp	 esi, edi
  00024	75 ec		 jne	 SHORT $LL14@Tidy@4
$LN12@Tidy@4:

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	8b 03		 mov	 eax, DWORD PTR [ebx]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	5f		 pop	 edi
$LN17@Tidy@4:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi
  00035	89 03		 mov	 DWORD PTR [ebx], eax

; 1310 : 		this->_Mylast = 0;

  00037	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1311 : 		this->_Myend = 0;

  0003a	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0003d	5b		 pop	 ebx

; 1312 : 		}

  0003e	c3		 ret	 0
?_Tidy@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1610 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1611 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]

; 1612 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00009	80 bf fd 07 00
	00 00		 cmp	 BYTE PTR [edi+2045], 0
  00010	8b d9		 mov	 ebx, ecx
  00012	8b f7		 mov	 esi, edi
  00014	75 2e		 jne	 SHORT $LN1@Erase@2
$LL3@Erase@2:

; 1613 : 			{	// free subtrees, then node
; 1614 : 			_Erase(this->_Right(_Pnode));

  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00019	50		 push	 eax
  0001a	8b cb		 mov	 ecx, ebx
  0001c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Erase

; 1615 : 			_Pnode = this->_Left(_Pnode);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]

; 1616 : 			_Dest_val(this->_Alval,
; 1617 : 				_STD addressof(this->_Myval(_Rootnode)));

  00023	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00026	51		 push	 ecx
  00027	8d 43 0d	 lea	 eax, DWORD PTR [ebx+13]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA> >

; 1618 : 
; 1619 : 			this->_Alnod.deallocate(_Rootnode, 1);

  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	80 be fd 07 00
	00 00		 cmp	 BYTE PTR [esi+2045], 0
  00040	8b fe		 mov	 edi, esi
  00042	74 d2		 je	 SHORT $LL3@Erase@2
$LN1@Erase@2:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx

; 1620 : 			}
; 1621 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T220206 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1865 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1866 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T220206[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase

; 1867 : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXXZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Tidy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1302 : 		if (this->_Myfirst != 0)

  00004	8b 33		 mov	 esi, DWORD PTR [ebx]
  00006	85 f6		 test	 esi, esi
  00008	74 28		 je	 SHORT $LN17@Tidy@5

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000a	57		 push	 edi
  0000b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 14		 je	 SHORT $LN12@Tidy@5
$LL14@Tidy@5:
  00012	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00015	56		 push	 esi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
  0001c	83 c6 40	 add	 esi, 64			; 00000040H
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f7		 cmp	 esi, edi
  00024	75 ec		 jne	 SHORT $LL14@Tidy@5
$LN12@Tidy@5:

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	8b 03		 mov	 eax, DWORD PTR [ebx]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	5f		 pop	 edi
$LN17@Tidy@5:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi
  00035	89 03		 mov	 DWORD PTR [ebx], eax

; 1310 : 		this->_Mylast = 0;

  00037	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1311 : 		this->_Myend = 0;

  0003a	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0003d	5b		 pop	 ebx

; 1312 : 		}

  0003e	c3		 ret	 0
?_Tidy@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$191808 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$220397 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00036	76 0a		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00042	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00045	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00047	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0004c	f7 e9		 imul	 ecx
  0004e	03 d1		 add	 edx, ecx
  00050	c1 fa 04	 sar	 edx, 4
  00053	8b c2		 mov	 eax, edx
  00055	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00058	03 c2		 add	 eax, edx
  0005a	3b c3		 cmp	 eax, ebx
  0005c	0f 83 8e 00 00
	00		 jae	 $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00062	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00065	53		 push	 ebx
  00066	8b cf		 mov	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_CS_SCHEDULE_DATA@@@std@@QAEPAU_CS_SCHEDULE_DATA@@I@Z ; std::allocator<_CS_SCHEDULE_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0006d	8b 5d 08	 mov	 ebx, DWORD PTR __Cat$220397[ebp]
  00070	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00073	8b 16		 mov	 edx, DWORD PTR [esi]
  00075	53		 push	 ebx
  00076	6a 00		 push	 0
  00078	57		 push	 edi
  00079	50		 push	 eax
  0007a	51		 push	 ecx
  0007b	52		 push	 edx
  0007c	89 45 ec	 mov	 DWORD PTR __Ptr$191808[ebp], eax
  0007f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00086	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_CS_SCHEDULE_DATA@@PAU1@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U1@@std@@YAPAU_CS_SCHEDULE_DATA@@PAU1@00AAV?$allocator@U_CS_SCHEDULE_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_SCHEDULE_DATA *,_CS_SCHEDULE_DATA *,std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  0008b	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0008d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00090	2b cb		 sub	 ecx, ebx
  00092	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00097	f7 e9		 imul	 ecx
  00099	03 d1		 add	 edx, ecx
  0009b	c1 fa 04	 sar	 edx, 4
  0009e	8b fa		 mov	 edi, edx
  000a0	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  000a3	83 c4 18	 add	 esp, 24			; 00000018H
  000a6	03 fa		 add	 edi, edx
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000af	85 db		 test	 ebx, ebx
  000b1	74 17		 je	 SHORT $LN35@reserve@2

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000b3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b6	50		 push	 eax
  000b7	53		 push	 ebx
  000b8	8b ce		 mov	 ecx, esi
  000ba	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXPAU_CS_SCHEDULE_DATA@@0@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000bf	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c7	83 c4 04	 add	 esp, 4
$LN35@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  000ca	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000cd	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  000d4	2b d0		 sub	 edx, eax
  000d6	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$191808[ebp]
  000d9	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 770  : 			this->_Mylast = _Ptr + _Size;

  000dc	8d 14 fd 00 00
	00 00		 lea	 edx, DWORD PTR [edi*8]
  000e3	2b d7		 sub	 edx, edi
  000e5	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  000e8	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  000eb	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 771  : 			this->_Myfirst = _Ptr;

  000ee	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  000f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 04 00	 ret	 4
__catch$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  00104	8b 55 ec	 mov	 edx, DWORD PTR __Ptr$191808[ebp]
  00107	52		 push	 edx
  00108	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010d	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  00110	6a 00		 push	 0
  00112	6a 00		 push	 0
  00114	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve@2:
$LN41@reserve@2:
  00119	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::reserve
PUBLIC	?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$191849 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$220481 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00030	81 fb 2c f7 34
	02		 cmp	 ebx, 37025580		; 0234f72cH
  00036	76 0a		 jbe	 SHORT $LN5@reserve@3

; 748  : 			_Xlen();	// result too long

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve@3:
$LN5@reserve@3:

; 749  : 		else if (capacity() < _Count)

  00042	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00045	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00047	b8 09 cb 3d 8d	 mov	 eax, -1925330167	; 8d3dcb09H
  0004c	f7 e9		 imul	 ecx
  0004e	03 d1		 add	 edx, ecx
  00050	c1 fa 06	 sar	 edx, 6
  00053	8b c2		 mov	 eax, edx
  00055	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00058	03 c2		 add	 eax, edx
  0005a	3b c3		 cmp	 eax, ebx
  0005c	0f 83 80 00 00
	00		 jae	 $LN3@reserve@3

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00062	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00065	53		 push	 ebx
  00066	8b cf		 mov	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_CS_NPC_DATA@@@std@@QAEPAU_CS_NPC_DATA@@I@Z ; std::allocator<_CS_NPC_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0006d	8b 5d 08	 mov	 ebx, DWORD PTR __Cat$220481[ebp]
  00070	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00073	8b 16		 mov	 edx, DWORD PTR [esi]
  00075	53		 push	 ebx
  00076	6a 00		 push	 0
  00078	57		 push	 edi
  00079	50		 push	 eax
  0007a	51		 push	 ecx
  0007b	52		 push	 edx
  0007c	89 45 ec	 mov	 DWORD PTR __Ptr$191849[ebp], eax
  0007f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00086	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_CS_NPC_DATA@@PAU1@V?$allocator@U_CS_NPC_DATA@@@std@@U1@@std@@YAPAU_CS_NPC_DATA@@PAU1@00AAV?$allocator@U_CS_NPC_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_NPC_DATA *,_CS_NPC_DATA *,std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  0008b	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0008d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00090	2b cb		 sub	 ecx, ebx
  00092	b8 09 cb 3d 8d	 mov	 eax, -1925330167	; 8d3dcb09H
  00097	f7 e9		 imul	 ecx
  00099	03 d1		 add	 edx, ecx
  0009b	c1 fa 06	 sar	 edx, 6
  0009e	8b fa		 mov	 edi, edx
  000a0	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  000a3	83 c4 18	 add	 esp, 24			; 00000018H
  000a6	03 fa		 add	 edi, edx
  000a8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000af	85 db		 test	 ebx, ebx
  000b1	74 17		 je	 SHORT $LN35@reserve@3

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  000b3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b6	50		 push	 eax
  000b7	53		 push	 ebx
  000b8	8b ce		 mov	 ecx, esi
  000ba	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXPAU_CS_NPC_DATA@@0@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  000bf	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c7	83 c4 04	 add	 esp, 4
$LN35@reserve@3:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  000ca	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 770  : 			this->_Mylast = _Ptr + _Size;

  000cd	6b ff 74	 imul	 edi, 116		; 00000074H
  000d0	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr$191849[ebp]
  000d3	6b c0 74	 imul	 eax, 116		; 00000074H
  000d6	03 c1		 add	 eax, ecx
  000d8	03 f9		 add	 edi, ecx
  000da	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000dd	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000e0	89 0e		 mov	 DWORD PTR [esi], ecx
$LN3@reserve@3:

; 772  : 			}
; 773  : 		}

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000f6	8b 55 ec	 mov	 edx, DWORD PTR __Ptr$191849[ebp]
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ff	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  00102	6a 00		 push	 0
  00104	6a 00		 push	 0
  00106	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve@3:
$LN41@reserve@3:
  0010b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::reserve
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv797 = -12						; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase, COMDAT
; _this$ = ecx

; 1195 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1198 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1199 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1200 : 		++_Where;	// save successor iterator for return
; 1201 : 		_Orphan_ptr(*this, _Erasednode);
; 1202 : 
; 1203 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1204 : 		if (this->_Isnil(_Where._Mynode()))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	80 bb fd 07 00
	00 00		 cmp	 BYTE PTR [ebx+2045], 0
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00016	74 0a		 je	 SHORT $LN40@erase@6

; 1205 : 			_Xout_of_range("invalid map/set<T> iterator");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  0001d	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN297@erase@6:
$LN40@erase@6:

; 1206 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1207 : 		++_Where;	// save successor iterator for return

  00022	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00025	89 5d f8	 mov	 DWORD PTR __Erasednode$[ebp], ebx
  00028	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator++

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1211 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1212 : 		_Nodeptr _Pnode = _Erasednode;
; 1213 : 
; 1214 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0002d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0002f	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  00036	74 05		 je	 SHORT $LN39@erase@6

; 1215 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00038	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 1216 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  0003b	eb 1a		 jmp	 SHORT $LN291@erase@6
$LN39@erase@6:
  0003d	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00040	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00047	74 04		 je	 SHORT $LN37@erase@6

; 1217 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00049	8b f9		 mov	 edi, ecx

; 1218 : 		else

  0004b	eb 0a		 jmp	 SHORT $LN291@erase@6
$LN37@erase@6:

; 1219 : 			{	// two subtrees, must lift successor node to replace erased
; 1220 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  0004d	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 1221 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00050	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 1222 : 			}
; 1223 : 
; 1224 : 		if (_Pnode == _Erasednode)

  00053	3b c3		 cmp	 eax, ebx
  00055	75 7f		 jne	 SHORT $LN35@erase@6
$LN291@erase@6:

; 1225 : 			{	// at most one subtree, relink it
; 1226 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1227 : 			if (!this->_Isnil(_Fixnode))

  00057	80 bf fd 07 00
	00 00		 cmp	 BYTE PTR [edi+2045], 0
  0005e	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00061	75 03		 jne	 SHORT $LN34@erase@6

; 1228 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  00063	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase@6:

; 1229 : 
; 1230 : 			if (_Root() == _Erasednode)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0006c	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0006f	75 05		 jne	 SHORT $LN33@erase@6

; 1231 : 				_Root() = _Fixnode;	// link down from root

  00071	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1232 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00074	eb 0b		 jmp	 SHORT $LN30@erase@6
$LN33@erase@6:
  00076	39 1e		 cmp	 DWORD PTR [esi], ebx
  00078	75 04		 jne	 SHORT $LN31@erase@6

; 1233 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  0007a	89 3e		 mov	 DWORD PTR [esi], edi

; 1234 : 			else

  0007c	eb 03		 jmp	 SHORT $LN30@erase@6
$LN31@erase@6:

; 1235 : 				this->_Right(_Fixnodeparent) =
; 1236 : 					_Fixnode;	// link down to right

  0007e	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase@6:

; 1237 : 
; 1238 : 			if (_Lmost() == _Erasednode)

  00081	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00084	39 18		 cmp	 DWORD PTR [eax], ebx
  00086	75 1e		 jne	 SHORT $LN29@erase@6

; 1239 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1240 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1241 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  00088	80 bf fd 07 00
	00 00		 cmp	 BYTE PTR [edi+2045], 0
  0008f	74 04		 je	 SHORT $LN43@erase@6
  00091	8b c6		 mov	 eax, esi
  00093	eb 0c		 jmp	 SHORT $LN44@erase@6
$LN43@erase@6:
  00095	57		 push	 edi
  00096	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Min
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	83 c4 04	 add	 esp, 4
$LN44@erase@6:
  000a1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a4	89 02		 mov	 DWORD PTR [edx], eax
$LN29@erase@6:

; 1242 : 
; 1243 : 			if (_Rmost() == _Erasednode)

  000a6	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000a9	89 4d f4	 mov	 DWORD PTR tv797[ebp], ecx
  000ac	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  000af	0f 85 8a 00 00
	00		 jne	 $LN165@erase@6

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000b5	80 bf fd 07 00
	00 00		 cmp	 BYTE PTR [edi+2045], 0
  000bc	74 07		 je	 SHORT $LN45@erase@6
  000be	8b c6		 mov	 eax, esi
  000c0	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000c3	eb 7a		 jmp	 SHORT $LN165@erase@6
$LN45@erase@6:

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000c5	57		 push	 edi
  000c6	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Max
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR tv797[ebp]
  000ce	83 c4 04	 add	 esp, 4
  000d1	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000d4	eb 69		 jmp	 SHORT $LN165@erase@6
$LN35@erase@6:

; 1249 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1250 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1251 : 				_Pnode;	// link left up

  000d6	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1252 : 			this->_Left(_Pnode) =
; 1253 : 				this->_Left(_Erasednode);	// link successor down

  000d9	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000db	89 08		 mov	 DWORD PTR [eax], ecx

; 1254 : 
; 1255 : 			if (_Pnode == this->_Right(_Erasednode))

  000dd	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  000e0	75 04		 jne	 SHORT $LN26@erase@6

; 1256 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000e2	8b f0		 mov	 esi, eax

; 1257 : 			else

  000e4	eb 1d		 jmp	 SHORT $LN25@erase@6
$LN26@erase@6:

; 1258 : 				{	// successor further down, link in place of erased
; 1259 : 				_Fixnodeparent =
; 1260 : 					this->_Parent(_Pnode);	// parent is successor's
; 1261 : 				if (!this->_Isnil(_Fixnode))

  000e6	80 bf fd 07 00
	00 00		 cmp	 BYTE PTR [edi+2045], 0
  000ed	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000f0	75 03		 jne	 SHORT $LN24@erase@6

; 1262 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000f2	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase@6:

; 1263 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000f5	89 3e		 mov	 DWORD PTR [esi], edi

; 1264 : 				this->_Right(_Pnode) =
; 1265 : 					this->_Right(_Erasednode);	// link next down

  000f7	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000fa	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1266 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1267 : 					_Pnode;	// right up

  000fd	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00100	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN25@erase@6:

; 1268 : 				}
; 1269 : 
; 1270 : 			if (_Root() == _Erasednode)

  00103	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00109	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  0010c	75 05		 jne	 SHORT $LN23@erase@6

; 1271 : 				_Root() = _Pnode;	// link down from root

  0010e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1272 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  00111	eb 0e		 jmp	 SHORT $LN20@erase@6
$LN23@erase@6:
  00113	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00116	39 19		 cmp	 DWORD PTR [ecx], ebx
  00118	75 04		 jne	 SHORT $LN21@erase@6

; 1273 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1274 : 					_Pnode;	// link down to left

  0011a	89 01		 mov	 DWORD PTR [ecx], eax

; 1275 : 			else

  0011c	eb 03		 jmp	 SHORT $LN20@erase@6
$LN21@erase@6:

; 1276 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1277 : 					_Pnode;	// link down to right

  0011e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase@6:

; 1278 : 
; 1279 : 			this->_Parent(_Pnode) =
; 1280 : 				this->_Parent(_Erasednode);	// link successor up

  00121	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00124	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1281 : 			_STD swap(this->_Color(_Pnode),
; 1282 : 				this->_Color(_Erasednode));	// recolor it

  00127	8a 93 fc 07 00
	00		 mov	 dl, BYTE PTR [ebx+2044]
  0012d	8a 88 fc 07 00
	00		 mov	 cl, BYTE PTR [eax+2044]
  00133	88 90 fc 07 00
	00		 mov	 BYTE PTR [eax+2044], dl
  00139	88 8b fc 07 00
	00		 mov	 BYTE PTR [ebx+2044], cl
$LN165@erase@6:

; 1283 : 			}
; 1284 : 
; 1285 : 		if (this->_Color(_Erasednode) == this->_Black)

  0013f	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00142	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	b3 01		 mov	 bl, 1
  00147	38 98 fc 07 00
	00		 cmp	 BYTE PTR [eax+2044], bl
  0014d	0f 85 61 01 00
	00		 jne	 $LN19@erase@6
  00153	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00156	3b 7a 04	 cmp	 edi, DWORD PTR [edx+4]
  00159	0f 84 4f 01 00
	00		 je	 $LN16@erase@6
  0015f	90		 npad	 1
$LL18@erase@6:
  00160	38 9f fc 07 00
	00		 cmp	 BYTE PTR [edi+2044], bl
  00166	0f 85 42 01 00
	00		 jne	 $LN16@erase@6

; 1290 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  0016c	8b 06		 mov	 eax, DWORD PTR [esi]
  0016e	3b f8		 cmp	 edi, eax
  00170	0f 85 97 00 00
	00		 jne	 $LN15@erase@6

; 1291 : 					{	// fixup left subtree
; 1292 : 					_Pnode = this->_Right(_Fixnodeparent);

  00176	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1293 : 					if (this->_Color(_Pnode) == this->_Red)

  00179	80 b8 fc 07 00
	00 00		 cmp	 BYTE PTR [eax+2044], 0
  00180	75 19		 jne	 SHORT $LN14@erase@6

; 1294 : 						{	// rotate red up from right subtree
; 1295 : 						this->_Color(_Pnode) = this->_Black;

  00182	88 98 fc 07 00
	00		 mov	 BYTE PTR [eax+2044], bl

; 1296 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1297 : 						_Lrotate(_Fixnodeparent);

  00188	56		 push	 esi
  00189	c6 86 fc 07 00
	00 00		 mov	 BYTE PTR [esi+2044], 0
  00190	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lrotate

; 1298 : 						_Pnode = this->_Right(_Fixnodeparent);

  00195	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00198	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN14@erase@6:

; 1299 : 						}
; 1300 : 
; 1301 : 					if (this->_Isnil(_Pnode))

  0019b	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0

; 1302 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1303 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

  001a2	0f 85 ab 00 00
	00		 jne	 $LN294@erase@6

; 1304 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  001a8	8b 10		 mov	 edx, DWORD PTR [eax]
  001aa	38 9a fc 07 00
	00		 cmp	 BYTE PTR [edx+2044], bl
  001b0	75 0f		 jne	 SHORT $LN11@erase@6
  001b2	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001b5	38 9a fc 07 00
	00		 cmp	 BYTE PTR [edx+2044], bl
  001bb	0f 84 8b 00 00
	00		 je	 $LN295@erase@6
$LN11@erase@6:

; 1305 : 						{	// redden right subtree with black children
; 1306 : 						this->_Color(_Pnode) = this->_Red;
; 1307 : 						_Fixnode = _Fixnodeparent;
; 1308 : 						}
; 1309 : 					else
; 1310 : 						{	// must rearrange right subtree
; 1311 : 						if (this->_Color(this->_Right(_Pnode))
; 1312 : 							== this->_Black)

  001c1	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001c4	38 9a fc 07 00
	00		 cmp	 BYTE PTR [edx+2044], bl
  001ca	75 1b		 jne	 SHORT $LN9@erase@6

; 1313 : 							{	// rotate red up from left sub-subtree
; 1314 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  001cc	8b 10		 mov	 edx, DWORD PTR [eax]
  001ce	88 9a fc 07 00
	00		 mov	 BYTE PTR [edx+2044], bl

; 1315 : 							this->_Color(_Pnode) = this->_Red;
; 1316 : 							_Rrotate(_Pnode);

  001d4	50		 push	 eax
  001d5	c6 80 fc 07 00
	00 00		 mov	 BYTE PTR [eax+2044], 0
  001dc	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Rrotate

; 1317 : 							_Pnode = this->_Right(_Fixnodeparent);

  001e1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN9@erase@6:

; 1318 : 							}
; 1319 : 
; 1320 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  001e7	8a 96 fc 07 00
	00		 mov	 dl, BYTE PTR [esi+2044]
  001ed	88 90 fc 07 00
	00		 mov	 BYTE PTR [eax+2044], dl

; 1321 : 						this->_Color(_Fixnodeparent) = this->_Black;

  001f3	88 9e fc 07 00
	00		 mov	 BYTE PTR [esi+2044], bl

; 1322 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  001f9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1323 : 						_Lrotate(_Fixnodeparent);

  001fc	56		 push	 esi
  001fd	88 98 fc 07 00
	00		 mov	 BYTE PTR [eax+2044], bl
  00203	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lrotate

; 1324 : 						break;	// tree now recolored/rebalanced

  00208	e9 9e 00 00 00	 jmp	 $LN296@erase@6
$LN15@erase@6:

; 1325 : 						}
; 1326 : 					}
; 1327 : 				else
; 1328 : 					{	// fixup right subtree
; 1329 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1330 : 					if (this->_Color(_Pnode) == this->_Red)

  0020d	80 b8 fc 07 00
	00 00		 cmp	 BYTE PTR [eax+2044], 0
  00214	75 18		 jne	 SHORT $LN7@erase@6

; 1331 : 						{	// rotate red up from left subtree
; 1332 : 						this->_Color(_Pnode) = this->_Black;

  00216	88 98 fc 07 00
	00		 mov	 BYTE PTR [eax+2044], bl

; 1333 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1334 : 						_Rrotate(_Fixnodeparent);

  0021c	56		 push	 esi
  0021d	c6 86 fc 07 00
	00 00		 mov	 BYTE PTR [esi+2044], 0
  00224	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Rrotate

; 1335 : 						_Pnode = this->_Left(_Fixnodeparent);

  00229	8b 06		 mov	 eax, DWORD PTR [esi]
  0022b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN7@erase@6:

; 1336 : 						}
; 1337 : 					if (this->_Isnil(_Pnode))

  0022e	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0

; 1338 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1339 : 					else if (this->_Color(this->_Right(_Pnode)) ==

  00235	75 1c		 jne	 SHORT $LN294@erase@6

; 1340 : 						this->_Black
; 1341 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  00237	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0023a	38 9a fc 07 00
	00		 cmp	 BYTE PTR [edx+2044], bl
  00240	75 24		 jne	 SHORT $LN4@erase@6
  00242	8b 10		 mov	 edx, DWORD PTR [eax]
  00244	38 9a fc 07 00
	00		 cmp	 BYTE PTR [edx+2044], bl
  0024a	75 1a		 jne	 SHORT $LN4@erase@6
$LN295@erase@6:

; 1342 : 						{	// redden left subtree with black children
; 1343 : 						this->_Color(_Pnode) = this->_Red;

  0024c	c6 80 fc 07 00
	00 00		 mov	 BYTE PTR [eax+2044], 0
$LN294@erase@6:

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00253	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1344 : 						_Fixnode = _Fixnodeparent;

  00256	8b fe		 mov	 edi, esi
  00258	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0025b	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  0025e	0f 85 fc fe ff
	ff		 jne	 $LL18@erase@6

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00264	eb 48		 jmp	 SHORT $LN16@erase@6
$LN4@erase@6:

; 1345 : 						}
; 1346 : 					else
; 1347 : 						{	// must rearrange left subtree
; 1348 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  00266	8b 10		 mov	 edx, DWORD PTR [eax]
  00268	38 9a fc 07 00
	00		 cmp	 BYTE PTR [edx+2044], bl
  0026e	75 1b		 jne	 SHORT $LN2@erase@6

; 1349 : 							{	// rotate red up from right sub-subtree
; 1350 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  00270	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00273	88 9a fc 07 00
	00		 mov	 BYTE PTR [edx+2044], bl

; 1351 : 							this->_Color(_Pnode) = this->_Red;
; 1352 : 							_Lrotate(_Pnode);

  00279	50		 push	 eax
  0027a	c6 80 fc 07 00
	00 00		 mov	 BYTE PTR [eax+2044], 0
  00281	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Lrotate

; 1353 : 							_Pnode = this->_Left(_Fixnodeparent);

  00286	8b 06		 mov	 eax, DWORD PTR [esi]
  00288	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN2@erase@6:

; 1354 : 							}
; 1355 : 
; 1356 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  0028b	8a 96 fc 07 00
	00		 mov	 dl, BYTE PTR [esi+2044]
  00291	88 90 fc 07 00
	00		 mov	 BYTE PTR [eax+2044], dl

; 1357 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00297	88 9e fc 07 00
	00		 mov	 BYTE PTR [esi+2044], bl

; 1358 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  0029d	8b 00		 mov	 eax, DWORD PTR [eax]

; 1359 : 						_Rrotate(_Fixnodeparent);

  0029f	56		 push	 esi
  002a0	88 98 fc 07 00
	00		 mov	 BYTE PTR [eax+2044], bl
  002a6	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Rrotate
$LN296@erase@6:
  002ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN16@erase@6:

; 1360 : 						break;	// tree now recolored/rebalanced
; 1361 : 						}
; 1362 : 					}
; 1363 : 
; 1364 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  002ae	88 9f fc 07 00
	00		 mov	 BYTE PTR [edi+2044], bl
$LN19@erase@6:

; 1365 : 			}
; 1366 : 
; 1367 : 		_Dest_val(this->_Alval,
; 1368 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node

  002b4	8b 55 f8	 mov	 edx, DWORD PTR __Erasednode$[ebp]
  002b7	83 c2 0c	 add	 edx, 12			; 0000000cH
  002ba	52		 push	 edx
  002bb	83 c1 0d	 add	 ecx, 13			; 0000000dH
  002be	51		 push	 ecx
  002bf	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA> >

; 1369 : 
; 1370 : 		this->_Alnod.deallocate(_Erasednode, 1);

  002c4	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  002c7	50		 push	 eax
  002c8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1371 : 
; 1372 : 		if (0 < this->_Mysize)

  002cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d0	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  002d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d6	5f		 pop	 edi
  002d7	5e		 pop	 esi
  002d8	5b		 pop	 ebx
  002d9	85 c0		 test	 eax, eax
  002db	74 04		 je	 SHORT $LN1@erase@6

; 1373 : 			--this->_Mysize;

  002dd	48		 dec	 eax
  002de	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@erase@6:

; 1374 : 
; 1375 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

  002e1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  002e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  002e7	89 08		 mov	 DWORD PTR [eax], ecx

; 1376 : 		}

  002e9	8b e5		 mov	 esp, ebp
  002eb	5d		 pop	 ebp
  002ec	c2 08 00	 ret	 8
$LN293@erase@6:
?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 928  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 929  : 		_DEBUG_POINTER(_Ptr);
; 930  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	57		 push	 edi
  0000a	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000d	8d 49 00	 npad	 3
$LL5@assign@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 931  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,_CS_TOTAL_GUILD_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,_CS_TOTAL_GUILD_DATA &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	56		 push	 esi
  00007	6a ff		 push	 -1
  00009	8b f1		 mov	 esi, ecx
  0000b	6a 00		 push	 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001b	50		 push	 eax
  0001c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00024	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00027	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0002e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00031	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00034	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00037	89 56 24	 mov	 DWORD PTR [esi+36], edx
  0003a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003d	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  00040	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00043	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 248  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,_CS_TOTAL_GUILD_DATA &>
_TEXT	ENDS
PUBLIC	??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,_CS_TOTAL_GUILD_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,_CS_TOTAL_GUILD_DATA &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	56		 push	 esi
  00007	6a ff		 push	 -1
  00009	8b f1		 mov	 esi, ecx
  0000b	6a 00		 push	 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001b	50		 push	 eax
  0001c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00024	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00027	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0002e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00031	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00034	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00037	89 56 24	 mov	 DWORD PTR [esi+36], edx
  0003a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003d	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  00040	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00043	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 248  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAU_CS_TOTAL_GUILD_DATA@@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,_CS_TOTAL_GUILD_DATA &>
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 762  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  : 		return (assign(_Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	6a ff		 push	 -1
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 764  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?_Linsert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Linsert
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Linsert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@_N@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Node$ = 12						; size = 4
$T221262 = 16						; size = 4
$T221260 = 16						; size = 4
__Where$194924 = 16					; size = 4
__Leftish$ = 16						; size = 1
?_Linsert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@_N@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Linsert, COMDAT
; _this$ = ecx

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 945  : 		const value_type& _Val = this->_Myval(_Node);

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx

; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();

  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00012	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00019	8b f1		 mov	 esi, ecx
  0001b	b1 01		 mov	 cl, 1
  0001d	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl
  00020	75 30		 jne	 SHORT $LN11@Linsert@2
  00022	8b 5a 0c	 mov	 ebx, DWORD PTR [edx+12]
$LL12@Linsert@2:

; 951  : 			{	// look for leaf to insert before (_Addleft) or after
; 952  : 			_Wherenode = _Trynode;
; 953  : 			if (_Leftish)

  00025	80 7d 10 00	 cmp	 BYTE PTR __Leftish$[ebp], 0
  00029	8b f0		 mov	 esi, eax
  0002b	74 08		 je	 SHORT $LN10@Linsert@2

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  0002d	39 58 0c	 cmp	 DWORD PTR [eax+12], ebx
  00030	0f 9d c1	 setge	 cl

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  00033	eb 06		 jmp	 SHORT $LN145@Linsert@2
$LN10@Linsert@2:

; 958  : 				_Addleft = _DEBUG_LT_PRED(this->comp,

  00035	3b 58 0c	 cmp	 ebx, DWORD PTR [eax+12]
  00038	0f 9c c1	 setl	 cl
$LN145@Linsert@2:
  0003b	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl

; 959  : 					this->_Kfn(_Val),
; 960  : 					this->_Key(_Trynode));	// favor right end
; 961  : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 962  : 				: this->_Right(_Trynode);

  0003e	84 c9		 test	 cl, cl
  00040	74 04		 je	 SHORT $LN15@Linsert@2
  00042	8b 00		 mov	 eax, DWORD PTR [eax]
  00044	eb 03		 jmp	 SHORT $LN16@Linsert@2
$LN15@Linsert@2:
  00046	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN16@Linsert@2:

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00049	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00050	74 d3		 je	 SHORT $LL12@Linsert@2
$LN11@Linsert@2:

; 963  : 			}
; 964  : 
; 965  : 		if (this->_Multi)
; 966  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));
; 967  : 		else
; 968  : 			{	// insert only if unique
; 969  : 			iterator _Where = iterator(_Wherenode, this);

  00052	8b de		 mov	 ebx, esi
  00054	89 5d 10	 mov	 DWORD PTR __Where$194924[ebp], ebx

; 970  : 			if (!_Addleft)

  00057	84 c9		 test	 cl, cl
  00059	74 35		 je	 SHORT $LN99@Linsert@2

; 971  : 				;	// need to test if insert after is okay
; 972  : 			else if (_Where == begin())

  0005b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 973  : 				return (_Pairib(_Insert(true, _Wherenode, _Node), true));

  0005e	8d 4d 10	 lea	 ecx, DWORD PTR $T221260[ebp]
  00061	3b 30		 cmp	 esi, DWORD PTR [eax]
  00063	75 20		 jne	 SHORT $LN4@Linsert@2
  00065	52		 push	 edx
  00066	56		 push	 esi
  00067	6a 01		 push	 1
  00069	51		 push	 ecx
  0006a	8b cf		 mov	 ecx, edi
  0006c	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Insert
  00071	8b 10		 mov	 edx, DWORD PTR [eax]
  00073	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	89 10		 mov	 DWORD PTR [eax], edx
  0007a	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0007e	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Linsert@2:

; 974  : 			else
; 975  : 				--_Where;	// need to test if insert before is okay

  00085	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >,std::_Iterator_base0>::operator--
  0008a	8b 5d 10	 mov	 ebx, DWORD PTR __Where$194924[ebp]
  0008d	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
$LN99@Linsert@2:

; 976  : 
; 977  : 			if (_DEBUG_LT_PRED(this->comp,

  00090	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00093	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  00096	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00099	7d 25		 jge	 SHORT $LN2@Linsert@2

; 978  : 				this->_Key(_Where._Mynode()),
; 979  : 				this->_Kfn(_Val)))
; 980  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  0009b	52		 push	 edx
  0009c	8b 55 fc	 mov	 edx, DWORD PTR __Addleft$[ebp]
  0009f	56		 push	 esi
  000a0	52		 push	 edx
  000a1	8d 45 10	 lea	 eax, DWORD PTR $T221262[ebp]
  000a4	50		 push	 eax
  000a5	8b cf		 mov	 ecx, edi
  000a7	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Insert
  000ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ae	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	89 08		 mov	 DWORD PTR [eax], ecx
  000b5	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  000b9	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Linsert@2:

; 981  : 			else
; 982  : 				{	// duplicate, don't insert
; 983  : 				_Dest_val(this->_Alval,
; 984  : 					_STD addressof(this->_Myval(_Node)));

  000c0	50		 push	 eax
  000c1	83 c7 0d	 add	 edi, 13			; 0000000dH
  000c4	57		 push	 edi
  000c5	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA> >

; 985  : 
; 986  : 				this->_Alnod.deallocate(_Node, 1);

  000ca	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  000cd	52		 push	 edx
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  000d3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	89 18		 mov	 DWORD PTR [eax], ebx
  000dd	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000e1	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 0c 00	 ret	 12			; 0000000cH
?_Linsert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@_N@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Linsert
_TEXT	ENDS
PUBLIC	??$_Sort@PAU_CS_SCHEDULE_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0HP6AEAAU1@1@Z@Z ; std::_Sort<_CS_SCHEDULE_DATA *,int,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAU_CS_SCHEDULE_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0HP6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__Mid$195455 = -8					; size = 8
__First$ = 8						; size = 4
tv225 = 12						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Sort@PAU_CS_SCHEDULE_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0HP6AEAAU1@1@Z@Z PROC ; std::_Sort<_CS_SCHEDULE_DATA *,int,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 3771 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000f	8b cf		 mov	 ecx, edi
  00011	2b cb		 sub	 ecx, ebx
  00013	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00018	f7 e9		 imul	 ecx
  0001a	03 d1		 add	 edx, ecx
  0001c	c1 fa 04	 sar	 edx, 4
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
  00026	83 f8 20	 cmp	 eax, 32			; 00000020H
  00029	0f 8e b2 00 00
	00		 jle	 $LN34@Sort
  0002f	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL7@Sort:
  00032	85 f6		 test	 esi, esi
  00034	0f 8e c3 00 00
	00		 jle	 $LN6@Sort

; 3774 : 		{	// divide and conquer by quicksort
; 3775 : 		_STD pair<_RanIt, _RanIt> _Mid =
; 3776 : 			_Unguarded_partition(_First, _Last, _Pred);

  0003a	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0003d	50		 push	 eax
  0003e	57		 push	 edi
  0003f	8d 4d f8	 lea	 ecx, DWORD PTR __Mid$195455[ebp]
  00042	53		 push	 ebx
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YA?AU?$pair@PAU_CS_SCHEDULE_DATA@@PAU1@@0@PAU_CS_SCHEDULE_DATA@@0P6AEAAU2@1@Z@Z ; std::_Unguarded_partition<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>

; 3777 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

  00049	8b c6		 mov	 eax, esi
  0004b	99		 cdq
  0004c	2b c2		 sub	 eax, edx
  0004e	d1 f8		 sar	 eax, 1
  00050	8b f0		 mov	 esi, eax
  00052	99		 cdq
  00053	2b c2		 sub	 eax, edx
  00055	d1 f8		 sar	 eax, 1
  00057	03 f0		 add	 esi, eax

; 3778 : 
; 3779 : 		if (_Mid.first - _First < _Last - _Mid.second)

  00059	8b cf		 mov	 ecx, edi
  0005b	2b 4d fc	 sub	 ecx, DWORD PTR __Mid$195455[ebp+4]
  0005e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00063	f7 e9		 imul	 ecx
  00065	03 d1		 add	 edx, ecx
  00067	8b 4d f8	 mov	 ecx, DWORD PTR __Mid$195455[ebp]
  0006a	c1 fa 04	 sar	 edx, 4
  0006d	8b c2		 mov	 eax, edx
  0006f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00072	03 c2		 add	 eax, edx
  00074	89 45 0c	 mov	 DWORD PTR tv225[ebp], eax
  00077	2b cb		 sub	 ecx, ebx
  00079	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0007e	f7 e9		 imul	 ecx
  00080	03 d1		 add	 edx, ecx

; 3780 : 			{	// loop on second half
; 3781 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  00082	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00085	c1 fa 04	 sar	 edx, 4
  00088	8b c2		 mov	 eax, edx
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00090	03 c2		 add	 eax, edx
  00092	51		 push	 ecx
  00093	56		 push	 esi
  00094	3b 45 0c	 cmp	 eax, DWORD PTR tv225[ebp]
  00097	7d 15		 jge	 SHORT $LN5@Sort
  00099	8b 55 f8	 mov	 edx, DWORD PTR __Mid$195455[ebp]
  0009c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0009f	52		 push	 edx
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??$_Sort@PAU_CS_SCHEDULE_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0HP6AEAAU1@1@Z@Z ; std::_Sort<_CS_SCHEDULE_DATA *,int,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>

; 3782 : 			_First = _Mid.second;

  000a6	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$195455[ebp+4]
  000a9	89 5d 08	 mov	 DWORD PTR __First$[ebp], ebx

; 3783 : 			}
; 3784 : 		else

  000ac	eb 10		 jmp	 SHORT $LN35@Sort
$LN5@Sort:

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  000ae	8b 55 fc	 mov	 edx, DWORD PTR __Mid$195455[ebp+4]
  000b1	57		 push	 edi
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 ??$_Sort@PAU_CS_SCHEDULE_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0HP6AEAAU1@1@Z@Z ; std::_Sort<_CS_SCHEDULE_DATA *,int,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>

; 3787 : 			_Last = _Mid.first;

  000b8	8b 7d f8	 mov	 edi, DWORD PTR __Mid$195455[ebp]
  000bb	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
$LN35@Sort:

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  000be	8b cf		 mov	 ecx, edi
  000c0	2b cb		 sub	 ecx, ebx
  000c2	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000c7	f7 e9		 imul	 ecx
  000c9	03 d1		 add	 edx, ecx
  000cb	c1 fa 04	 sar	 edx, 4
  000ce	8b c2		 mov	 eax, edx
  000d0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d3	03 c2		 add	 eax, edx

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  000d5	83 c4 10	 add	 esp, 16			; 00000010H
  000d8	83 f8 20	 cmp	 eax, 32			; 00000020H
  000db	0f 8f 51 ff ff
	ff		 jg	 $LL7@Sort
$LN34@Sort:

; 3795 : 		}
; 3796 : 	else if (1 < _Count)

  000e1	83 f8 01	 cmp	 eax, 1
  000e4	7e 10		 jle	 SHORT $LN27@Sort

; 3797 : 		_Insertion_sort(_First, _Last, _Pred);	// small

  000e6	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  000e9	6a 00		 push	 0
  000eb	50		 push	 eax
  000ec	57		 push	 edi
  000ed	53		 push	 ebx
  000ee	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Insertion_sort1<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &),_CS_SCHEDULE_DATA>
  000f3	83 c4 10	 add	 esp, 16			; 00000010H
$LN27@Sort:
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx

; 3798 : 	}

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN6@Sort:

; 3788 : 			}
; 3789 : 		}
; 3790 : 
; 3791 : 	if (_ISORT_MAX < _Count)

  000fd	83 f8 20	 cmp	 eax, 32			; 00000020H
  00100	7e df		 jle	 SHORT $LN34@Sort

; 3792 : 		{	// heap sort if too many divisions
; 3793 : 		_STD make_heap(_First, _Last, _Pred);

  00102	8b cf		 mov	 ecx, edi
  00104	2b cb		 sub	 ecx, ebx
  00106	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0010b	f7 e9		 imul	 ecx
  0010d	03 d1		 add	 edx, ecx
  0010f	c1 fa 04	 sar	 edx, 4
  00112	8b c2		 mov	 eax, edx
  00114	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00117	03 c2		 add	 eax, edx
  00119	83 f8 01	 cmp	 eax, 1
  0011c	7e 12		 jle	 SHORT $LN33@Sort
  0011e	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00121	6a 00		 push	 0
  00123	6a 00		 push	 0
  00125	51		 push	 ecx
  00126	57		 push	 edi
  00127	53		 push	 ebx
  00128	e8 00 00 00 00	 call	 ??$_Make_heap@PAU_CS_SCHEDULE_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@ZPAH0@Z ; std::_Make_heap<_CS_SCHEDULE_DATA *,int,_CS_SCHEDULE_DATA,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  0012d	83 c4 14	 add	 esp, 20			; 00000014H
$LN33@Sort:

; 3794 : 		_STD sort_heap(_First, _Last, _Pred);

  00130	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  00133	52		 push	 edx
  00134	57		 push	 edi
  00135	53		 push	 ebx
  00136	e8 00 00 00 00	 call	 ??$_Sort_heap@PAU_CS_SCHEDULE_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0P6AEAAU1@1@Z@Z ; std::_Sort_heap<_CS_SCHEDULE_DATA *,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  0013b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx

; 3798 : 	}

  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
??$_Sort@PAU_CS_SCHEDULE_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0HP6AEAAU1@1@Z@Z ENDP ; std::_Sort<_CS_SCHEDULE_DATA *,int,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z ; std::allocator<_CS_REG_GUILD_DATA>::construct<_CS_REG_GUILD_DATA &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z$0
__ehfuncinfo$??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z
_TEXT	SEGMENT
$T221626 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z PROC ; std::allocator<_CS_REG_GUILD_DATA>::construct<_CS_REG_GUILD_DATA &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T221626[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 09		 je	 SHORT $LN3@construct@12
  00034	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z
$LN3@construct@12:

; 209  : 		}

  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T221626[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAU_CS_REG_GUILD_DATA@@@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@AAU2@@Z ENDP ; std::allocator<_CS_REG_GUILD_DATA>::construct<_CS_REG_GUILD_DATA &>
PUBLIC	??$_Destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YAXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ; std::_Destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YAXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YAXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z PROC ; std::_Destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 63   : 	_Ptr->~_Ty();

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0000b	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  00012	72 0b		 jb	 SHORT $LN22@Destroy@4
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
$LN22@Destroy@4:
  0001f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002d	c6 06 00	 mov	 BYTE PTR [esi], 0
  00030	5e		 pop	 esi

; 64   : 	}

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@YAXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ENDP ; std::_Destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z ; std::_Construct<_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z
_TEXT	SEGMENT
$T221821 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z PROC ; std::_Construct<_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00029	89 4d f0	 mov	 DWORD PTR $T221821[ebp], ecx
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	85 c9		 test	 ecx, ecx
  00035	74 09		 je	 SHORT $LN3@Construct@4
  00037	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z
$LN3@Construct@4:

; 49   : 	}

  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004a	59		 pop	 ecx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T221821[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@U_CS_REG_GUILD_DATA@@ABU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@ABU1@@Z ENDP ; std::_Construct<_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA const &>
PUBLIC	??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
$T221857 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T221857[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 09		 je	 SHORT $LN7@Cons_val@11
  00034	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z
$LN7@Cons_val@11:

; 281  : 	}

  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z$0:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T221857[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA>
PUBLIC	??4_CS_REG_GUILD_DATA@@QAEAAU0@ABU0@@Z		; _CS_REG_GUILD_DATA::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4_CS_REG_GUILD_DATA@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4_CS_REG_GUILD_DATA@@QAEAAU0@ABU0@@Z PROC		; _CS_REG_GUILD_DATA::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	6a ff		 push	 -1
  0000f	6a 00		 push	 0
  00011	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00014	51		 push	 ecx
  00015	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00018	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  00023	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00026	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00029	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0002c	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  0002f	89 4e 30	 mov	 DWORD PTR [esi+48], ecx
  00032	8b 57 34	 mov	 edx, DWORD PTR [edi+52]
  00035	89 56 34	 mov	 DWORD PTR [esi+52], edx
  00038	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  0003b	89 46 38	 mov	 DWORD PTR [esi+56], eax
  0003e	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  00041	5f		 pop	 edi
  00042	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx
  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??4_CS_REG_GUILD_DATA@@QAEAAU0@ABU0@@Z ENDP		; _CS_REG_GUILD_DATA::operator=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z$0
__ehfuncinfo$??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	ENDS
;	COMDAT ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z
_TEXT	SEGMENT
__Tmp$ = -80						; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z PROC ; std::swap<_CS_REG_GUILD_DATA>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]

; 102  : 	_Ty _Tmp = _Move(_Left);

  0002e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Right$[ebp]
  00034	6a ff		 push	 -1
  00036	6a 00		 push	 0
  00038	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  0003b	53		 push	 ebx
  0003c	8d 4d bc	 lea	 ecx, DWORD PTR __Tmp$[ebp+12]
  0003f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR __Tmp$[ebp], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  00046	89 45 b8	 mov	 DWORD PTR __Tmp$[ebp+8], eax
  00049	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR __Tmp$[ebp+32], 15 ; 0000000fH
  00050	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Tmp$[ebp+28], 0
  00057	c6 45 bc 00	 mov	 BYTE PTR __Tmp$[ebp+12], 0
  0005b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00060	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00063	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00066	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00069	89 4d d8	 mov	 DWORD PTR __Tmp$[ebp+40], ecx
  0006c	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0006f	89 55 dc	 mov	 DWORD PTR __Tmp$[ebp+44], edx
  00072	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00075	89 45 e0	 mov	 DWORD PTR __Tmp$[ebp+48], eax
  00078	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0007b	89 4d e4	 mov	 DWORD PTR __Tmp$[ebp+52], ecx
  0007e	89 55 e8	 mov	 DWORD PTR __Tmp$[ebp+56], edx
  00081	89 45 ec	 mov	 DWORD PTR __Tmp$[ebp+60], eax

; 103  : 	_Left = _Move(_Right);

  00084	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00087	6a ff		 push	 -1
  00089	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  0008c	6a 00		 push	 0
  0008e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00091	50		 push	 eax
  00092	8b cb		 mov	 ecx, ebx
  00094	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000a0	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  000a3	89 56 28	 mov	 DWORD PTR [esi+40], edx
  000a6	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000a9	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  000ac	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  000af	89 4e 30	 mov	 DWORD PTR [esi+48], ecx
  000b2	8b 57 34	 mov	 edx, DWORD PTR [edi+52]
  000b5	89 56 34	 mov	 DWORD PTR [esi+52], edx
  000b8	8b 47 38	 mov	 eax, DWORD PTR [edi+56]

; 104  : 	_Right = _Move(_Tmp);

  000bb	8b 55 b8	 mov	 edx, DWORD PTR __Tmp$[ebp+8]
  000be	89 46 38	 mov	 DWORD PTR [esi+56], eax
  000c1	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  000c4	6a ff		 push	 -1
  000c6	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx
  000c9	6a 00		 push	 0
  000cb	8d 45 bc	 lea	 eax, DWORD PTR __Tmp$[ebp+12]
  000ce	50		 push	 eax
  000cf	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  000d2	89 57 08	 mov	 DWORD PTR [edi+8], edx
  000d5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 105  : 	}

  000da	83 7d d0 10	 cmp	 DWORD PTR __Tmp$[ebp+32], 16 ; 00000010H
  000de	8b 4d d8	 mov	 ecx, DWORD PTR __Tmp$[ebp+40]
  000e1	8b 55 dc	 mov	 edx, DWORD PTR __Tmp$[ebp+44]
  000e4	8b 45 e0	 mov	 eax, DWORD PTR __Tmp$[ebp+48]
  000e7	89 4f 28	 mov	 DWORD PTR [edi+40], ecx
  000ea	8b 4d e4	 mov	 ecx, DWORD PTR __Tmp$[ebp+52]
  000ed	89 57 2c	 mov	 DWORD PTR [edi+44], edx
  000f0	8b 55 e8	 mov	 edx, DWORD PTR __Tmp$[ebp+56]
  000f3	89 47 30	 mov	 DWORD PTR [edi+48], eax
  000f6	8b 45 ec	 mov	 eax, DWORD PTR __Tmp$[ebp+60]
  000f9	89 4f 34	 mov	 DWORD PTR [edi+52], ecx
  000fc	89 57 38	 mov	 DWORD PTR [edi+56], edx
  000ff	89 47 3c	 mov	 DWORD PTR [edi+60], eax
  00102	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR __Tmp$[ebp], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  00109	72 0c		 jb	 SHORT $LN63@swap
  0010b	8b 4d bc	 mov	 ecx, DWORD PTR __Tmp$[ebp+12]
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00114	83 c4 04	 add	 esp, 4
$LN63@swap:
  00117	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00121	59		 pop	 ecx
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00128	33 cd		 xor	 ecx, ebp
  0012a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_CS_REG_GUILD_DATA@@UAE@XZ ; _CS_REG_GUILD_DATA::~_CS_REG_GUILD_DATA
__ehhandler$??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ENDP ; std::swap<_CS_REG_GUILD_DATA>
PUBLIC	??$_Push_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Push_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Push_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z PROC ; std::_Push_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 2455 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2456 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00006	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  00009	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0000c	99		 cdq
  0000d	2b c2		 sub	 eax, edx
  0000f	8b d8		 mov	 ebx, eax
  00011	d1 fb		 sar	 ebx, 1

; 2457 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2458 : 		_Idx = (_Hole - 1) / 2)

  00013	39 7d 10	 cmp	 DWORD PTR __Top$[ebp], edi
  00016	7d 68		 jge	 SHORT $LN24@Push_heap@2
$LL3@Push_heap@2:
  00018	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  0001b	8b f3		 mov	 esi, ebx
  0001d	c1 e6 06	 shl	 esi, 6
  00020	03 75 08	 add	 esi, DWORD PTR __First$[ebp]
  00023	52		 push	 edx
  00024	56		 push	 esi
  00025	ff 55 18	 call	 DWORD PTR __Pred$[ebp]
  00028	83 c4 08	 add	 esp, 8
  0002b	84 c0		 test	 al, al
  0002d	74 51		 je	 SHORT $LN24@Push_heap@2

; 2459 : 		{	// move _Hole up to parent
; 2460 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0002f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00032	c1 e7 06	 shl	 edi, 6
  00035	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  00038	6a ff		 push	 -1
  0003a	6a 00		 push	 0
  0003c	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  0003f	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  00042	52		 push	 edx
  00043	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0004e	89 47 28	 mov	 DWORD PTR [edi+40], eax
  00051	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00054	89 4f 2c	 mov	 DWORD PTR [edi+44], ecx
  00057	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0005a	89 57 30	 mov	 DWORD PTR [edi+48], edx
  0005d	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00060	89 47 34	 mov	 DWORD PTR [edi+52], eax
  00063	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00066	89 4f 38	 mov	 DWORD PTR [edi+56], ecx
  00069	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  0006c	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0006f	89 57 3c	 mov	 DWORD PTR [edi+60], edx
  00072	99		 cdq
  00073	2b c2		 sub	 eax, edx

; 2461 : 		_Hole = _Idx;

  00075	8b fb		 mov	 edi, ebx
  00077	d1 f8		 sar	 eax, 1
  00079	8b d8		 mov	 ebx, eax
  0007b	39 7d 10	 cmp	 DWORD PTR __Top$[ebp], edi
  0007e	7c 98		 jl	 SHORT $LL3@Push_heap@2
$LN24@Push_heap@2:

; 2462 : 		}
; 2463 : 
; 2464 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  00080	8b 75 14	 mov	 esi, DWORD PTR __Val$[ebp]
  00083	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00086	c1 e7 06	 shl	 edi, 6
  00089	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  0008c	6a ff		 push	 -1
  0008e	6a 00		 push	 0
  00090	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00093	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  00096	52		 push	 edx
  00097	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0009a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0009f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  000a2	89 47 28	 mov	 DWORD PTR [edi+40], eax
  000a5	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  000a8	89 4f 2c	 mov	 DWORD PTR [edi+44], ecx
  000ab	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  000ae	89 57 30	 mov	 DWORD PTR [edi+48], edx
  000b1	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  000b4	89 47 34	 mov	 DWORD PTR [edi+52], eax
  000b7	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000ba	89 4f 38	 mov	 DWORD PTR [edi+56], ecx
  000bd	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  000c0	89 57 3c	 mov	 DWORD PTR [edi+60], edx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx

; 2465 : 	}

  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
??$_Push_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ENDP ; std::_Push_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>, COMDAT

; 2617 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2618 : 	while (_First != _Last)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	3b d8		 cmp	 ebx, eax
  0000c	74 53		 je	 SHORT $LN15@Move_backw@2
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00013	8d 70 0c	 lea	 esi, DWORD PTR [eax+12]
$LL2@Move_backw@2:

; 2619 : 		*--_Dest = _STD move(*--_Last);

  00016	8b 46 bc	 mov	 eax, DWORD PTR [esi-68]
  00019	6a ff		 push	 -1
  0001b	83 ee 40	 sub	 esi, 64			; 00000040H
  0001e	83 ef 40	 sub	 edi, 64			; 00000040H
  00021	6a 00		 push	 0
  00023	56		 push	 esi
  00024	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00027	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0002a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002f	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00032	89 4f 28	 mov	 DWORD PTR [edi+40], ecx
  00035	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00038	89 57 2c	 mov	 DWORD PTR [edi+44], edx
  0003b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003e	89 47 30	 mov	 DWORD PTR [edi+48], eax
  00041	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00044	89 4f 34	 mov	 DWORD PTR [edi+52], ecx
  00047	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0004a	89 57 38	 mov	 DWORD PTR [edi+56], edx
  0004d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00050	8d 4e f4	 lea	 ecx, DWORD PTR [esi-12]
  00053	89 47 3c	 mov	 DWORD PTR [edi+60], eax
  00056	3b cb		 cmp	 ecx, ebx
  00058	75 bc		 jne	 SHORT $LL2@Move_backw@2

; 2620 : 	return (_Dest);

  0005a	8b c7		 mov	 eax, edi
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx

; 2621 : 	}

  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN15@Move_backw@2:

; 2620 : 	return (_Dest);

  00061	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00064	5b		 pop	 ebx

; 2621 : 	}

  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
??$_Move_backward@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 767  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 768  : 		return (assign(_Ptr));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	57		 push	 edi
  0000a	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000d	8d 49 00	 npad	 3
$LL7@operator@11:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@11
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 769  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??1?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::~vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::~vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 705  : 		_Tidy();

  00004	8b 33		 mov	 esi, DWORD PTR [ebx]
  00006	85 f6		 test	 esi, esi
  00008	74 28		 je	 SHORT $LN19@vector@3
  0000a	57		 push	 edi
  0000b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 14		 je	 SHORT $LN14@vector@3
$LL16@vector@3:
  00012	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00015	56		 push	 esi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
  0001c	83 c6 1c	 add	 esi, 28			; 0000001cH
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f7		 cmp	 esi, edi
  00024	75 ec		 jne	 SHORT $LL16@vector@3
$LN14@vector@3:
  00026	8b 03		 mov	 eax, DWORD PTR [ebx]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	5f		 pop	 edi
$LN19@vector@3:
  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi
  00035	89 03		 mov	 DWORD PTR [ebx], eax
  00037	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0003a	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0003d	5b		 pop	 ebx

; 706  : 		}

  0003e	c3		 ret	 0
??1?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::~vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXXZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T222324 = -4						; size = 4
?clear@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T222324[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@0@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::erase

; 1219 : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?clear@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::~vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::~vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 705  : 		_Tidy();

  00004	8b 33		 mov	 esi, DWORD PTR [ebx]
  00006	85 f6		 test	 esi, esi
  00008	74 28		 je	 SHORT $LN19@vector@4
  0000a	57		 push	 edi
  0000b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 14		 je	 SHORT $LN14@vector@4
$LL16@vector@4:
  00012	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00015	56		 push	 esi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
  0001c	83 c6 74	 add	 esi, 116		; 00000074H
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f7		 cmp	 esi, edi
  00024	75 ec		 jne	 SHORT $LL16@vector@4
$LN14@vector@4:
  00026	8b 03		 mov	 eax, DWORD PTR [ebx]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	5f		 pop	 edi
$LN19@vector@4:
  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi
  00035	89 03		 mov	 DWORD PTR [ebx], eax
  00037	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0003a	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0003d	5b		 pop	 ebx

; 706  : 		}

  0003e	c3		 ret	 0
??1?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::~vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXXZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T222458 = -4						; size = 4
?clear@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T222458[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@0@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::erase

; 1219 : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?clear@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::clear, COMDAT
; _this$ = ecx

; 1410 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		this->_Orphan_ptr(*this, 0);
; 1413 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1414 : 
; 1415 : 		_Erase(_Root());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Erase

; 1416 : 		_Root() = this->_Myhead;

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1417 : 		_Lmost() = this->_Myhead;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	89 00		 mov	 DWORD PTR [eax], eax

; 1418 : 		_Rmost() = this->_Myhead;

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1419 : 		this->_Mysize = 0;

  00022	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00029	5e		 pop	 esi

; 1420 : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::clear
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T222645 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 790  : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 791  : 		_Tidy();

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T222645[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase

; 792  : 		}

  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
__ehhandler$??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
PUBLIC	??1?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::~vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::~vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 705  : 		_Tidy();

  00004	8b 33		 mov	 esi, DWORD PTR [ebx]
  00006	85 f6		 test	 esi, esi
  00008	74 28		 je	 SHORT $LN19@vector@5
  0000a	57		 push	 edi
  0000b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 14		 je	 SHORT $LN14@vector@5
$LL16@vector@5:
  00012	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00015	56		 push	 esi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
  0001c	83 c6 40	 add	 esi, 64			; 00000040H
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f7		 cmp	 esi, edi
  00024	75 ec		 jne	 SHORT $LL16@vector@5
$LN14@vector@5:
  00026	8b 03		 mov	 eax, DWORD PTR [ebx]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	5f		 pop	 edi
$LN19@vector@5:
  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi
  00035	89 03		 mov	 DWORD PTR [ebx], eax
  00037	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0003a	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0003d	5b		 pop	 ebx

; 706  : 		}

  0003e	c3		 ret	 0
??1?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::~vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1291 : 		size_type _Size = size();

  00004	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00006	56		 push	 esi
  00007	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000a	2b f3		 sub	 esi, ebx
  0000c	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00011	f7 ee		 imul	 esi

; 1292 : 		if (max_size() - _Count < _Size)

  00013	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00016	03 d6		 add	 edx, esi
  00018	c1 fa 04	 sar	 edx, 4
  0001b	8b f2		 mov	 esi, edx
  0001d	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00020	03 f2		 add	 esi, edx
  00022	ba 49 92 24 09	 mov	 edx, 153391689		; 09249249H
  00027	2b d0		 sub	 edx, eax
  00029	57		 push	 edi
  0002a	3b d6		 cmp	 edx, esi
  0002c	73 0a		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00033	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00038	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0003b	03 f0		 add	 esi, eax
  0003d	2b fb		 sub	 edi, ebx
  0003f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00044	f7 ef		 imul	 edi
  00046	03 d7		 add	 edx, edi
  00048	c1 fa 04	 sar	 edx, 4
  0004b	8b c2		 mov	 eax, edx
  0004d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00050	03 c2		 add	 eax, edx
  00052	3b f0		 cmp	 esi, eax
  00054	76 21		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00056	8b d0		 mov	 edx, eax
  00058	d1 ea		 shr	 edx, 1
  0005a	bf 49 92 24 09	 mov	 edi, 153391689		; 09249249H
  0005f	2b fa		 sub	 edi, edx
  00061	3b f8		 cmp	 edi, eax
  00063	73 04		 jae	 SHORT $LN23@Reserve@2
  00065	33 c0		 xor	 eax, eax
  00067	eb 02		 jmp	 SHORT $LN24@Reserve@2
$LN23@Reserve@2:
  00069	03 c2		 add	 eax, edx
$LN24@Reserve@2:
  0006b	3b c6		 cmp	 eax, esi
  0006d	73 02		 jae	 SHORT $LN20@Reserve@2
  0006f	8b c6		 mov	 eax, esi
$LN20@Reserve@2:
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXI@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::reserve
$LN1@Reserve@2:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 1298 : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN33@Reserve@2:
?_Reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1291 : 		size_type _Size = size();

  00004	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00006	56		 push	 esi
  00007	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000a	2b f3		 sub	 esi, ebx
  0000c	b8 09 cb 3d 8d	 mov	 eax, -1925330167	; 8d3dcb09H
  00011	f7 ee		 imul	 esi

; 1292 : 		if (max_size() - _Count < _Size)

  00013	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00016	03 d6		 add	 edx, esi
  00018	c1 fa 06	 sar	 edx, 6
  0001b	8b f2		 mov	 esi, edx
  0001d	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00020	03 f2		 add	 esi, edx
  00022	ba 2c f7 34 02	 mov	 edx, 37025580		; 0234f72cH
  00027	2b d0		 sub	 edx, eax
  00029	57		 push	 edi
  0002a	3b d6		 cmp	 edx, esi
  0002c	73 0a		 jae	 SHORT $LN4@Reserve@3

; 1293 : 			_Xlen();

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00033	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve@3:
$LN4@Reserve@3:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00038	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0003b	03 f0		 add	 esi, eax
  0003d	2b fb		 sub	 edi, ebx
  0003f	b8 09 cb 3d 8d	 mov	 eax, -1925330167	; 8d3dcb09H
  00044	f7 ef		 imul	 edi
  00046	03 d7		 add	 edx, edi
  00048	c1 fa 06	 sar	 edx, 6
  0004b	8b c2		 mov	 eax, edx
  0004d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00050	03 c2		 add	 eax, edx
  00052	3b f0		 cmp	 esi, eax
  00054	76 21		 jbe	 SHORT $LN1@Reserve@3

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00056	8b d0		 mov	 edx, eax
  00058	d1 ea		 shr	 edx, 1
  0005a	bf 2c f7 34 02	 mov	 edi, 37025580		; 0234f72cH
  0005f	2b fa		 sub	 edi, edx
  00061	3b f8		 cmp	 edi, eax
  00063	73 04		 jae	 SHORT $LN23@Reserve@3
  00065	33 c0		 xor	 eax, eax
  00067	eb 02		 jmp	 SHORT $LN24@Reserve@3
$LN23@Reserve@3:
  00069	03 c2		 add	 eax, edx
$LN24@Reserve@3:
  0006b	3b c6		 cmp	 eax, esi
  0006d	73 02		 jae	 SHORT $LN20@Reserve@3
  0006f	8b c6		 mov	 eax, esi
$LN20@Reserve@3:
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXI@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::reserve
$LN1@Reserve@3:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 1298 : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN33@Reserve@3:
?_Reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T222901 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase, COMDAT
; _this$ = ecx

; 1379 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1380 : 		if (_First == begin() && _Last == end())

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00012	75 38		 jne	 SHORT $LN115@erase@7
  00014	3b d0		 cmp	 edx, eax
  00016	75 34		 jne	 SHORT $LN115@erase@7

; 1381 : 			{	// erase all
; 1382 : 			clear();

  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Erase
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 00		 mov	 DWORD PTR [eax], eax
  0002e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00031	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1383 : 			return (begin());

  00034	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	89 10		 mov	 DWORD PTR [eax], edx
  00045	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
$LN115@erase@7:

; 1384 : 			}
; 1385 : 		else
; 1386 : 			{	// partial erase, one at a time
; 1387 : 			while (_First != _Last)

  0004c	3b ca		 cmp	 ecx, edx
  0004e	74 6f		 je	 SHORT $LN1@erase@7
$LL2@erase@7:

; 1388 : 				erase(_First++);

  00050	80 b9 fd 07 00
	00 00		 cmp	 BYTE PTR [ecx+2045], 0
  00057	8b d1		 mov	 edx, ecx
  00059	75 50		 jne	 SHORT $LN77@erase@7
  0005b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0005e	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00065	75 1f		 jne	 SHORT $LN117@erase@7
  00067	8b c8		 mov	 ecx, eax
  00069	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006b	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00072	75 0d		 jne	 SHORT $LN91@erase@7
$LL92@erase@7:
  00074	8b c8		 mov	 ecx, eax
  00076	8b 01		 mov	 eax, DWORD PTR [ecx]
  00078	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  0007f	74 f3		 je	 SHORT $LL92@erase@7
$LN91@erase@7:
  00081	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  00084	eb 25		 jmp	 SHORT $LN77@erase@7
$LN117@erase@7:
  00086	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00089	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00090	75 16		 jne	 SHORT $LN75@erase@7
$LL76@erase@7:
  00092	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00095	75 11		 jne	 SHORT $LN75@erase@7
  00097	8b c8		 mov	 ecx, eax
  00099	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  0009c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009f	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  000a6	74 ea		 je	 SHORT $LL76@erase@7
$LN75@erase@7:
  000a8	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
$LN77@erase@7:
  000ab	52		 push	 edx
  000ac	8d 45 fc	 lea	 eax, DWORD PTR $T222901[ebp]
  000af	50		 push	 eax
  000b0	8b ce		 mov	 ecx, esi
  000b2	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  000ba	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  000bd	75 91		 jne	 SHORT $LL2@erase@7
$LN1@erase@7:

; 1389 : 			return (iterator(_First._Ptr, this));

  000bf	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000c2	89 08		 mov	 DWORD PTR [eax], ecx
  000c4	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b c2		 mov	 eax, edx
  0000b	57		 push	 edi
  0000c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00013	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001a	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL31@basic_stri@2:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL31@basic_stri@2
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 595  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 714  : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 60		 je	 SHORT $LN63@assign@4

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()
; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 718  : 			*this = _Right;
; 719  : 		else
; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  0000e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00012	72 0b		 jb	 SHORT $LN33@assign@4
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
$LN33@assign@4:
  0001f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00030	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00034	73 11		 jae	 SHORT $LN2@assign@4

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  00036	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00039	41		 inc	 ecx
  0003a	51		 push	 ecx
  0003b	57		 push	 edi
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _memmove
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  00045	eb 0a		 jmp	 SHORT $LN1@assign@4
$LN2@assign@4:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  00047	8b 17		 mov	 edx, DWORD PTR [edi]
  00049	89 16		 mov	 DWORD PTR [esi], edx

; 728  : 				_Right._Bx._Ptr = 0;

  0004b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LN1@assign@4:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  00051	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00054	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 731  : 			this->_Myres = _Right._Myres;

  00057	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0005a	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 732  : 
; 733  : 			_Right._Tidy();

  0005d	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00064	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0006b	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN63@assign@4:

; 734  : 			}
; 735  : 		return (*this);

  0006e	5f		 pop	 edi
  0006f	8b c6		 mov	 eax, esi
  00071	5e		 pop	 esi

; 736  : 		}

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@P6AEAAU_CS_SCHEDULE_DATA@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@0@0P6AEAAU_CS_SCHEDULE_DATA@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@P6AEAAU_CS_SCHEDULE_DATA@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@0@0P6AEAAU_CS_SCHEDULE_DATA@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@P6AEAAU_CS_SCHEDULE_DATA@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@0@0P6AEAAU_CS_SCHEDULE_DATA@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>, COMDAT

; 3803 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3804 : 	_DEBUG_RANGE(_First, _Last);
; 3805 : 	_DEBUG_POINTER(_Pred);
; 3806 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Pred$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000e	50		 push	 eax
  0000f	8b ce		 mov	 ecx, esi
  00011	2b cf		 sub	 ecx, edi
  00013	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00018	f7 e9		 imul	 ecx
  0001a	03 d1		 add	 edx, ecx
  0001c	c1 fa 04	 sar	 edx, 4
  0001f	8b ca		 mov	 ecx, edx
  00021	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00024	03 ca		 add	 ecx, edx
  00026	51		 push	 ecx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 ??$_Sort@PAU_CS_SCHEDULE_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0HP6AEAAU1@1@Z@Z ; std::_Sort<_CS_SCHEDULE_DATA *,int,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 3807 : 	}

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@std@@P6AEAAU_CS_SCHEDULE_DATA@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@0@0P6AEAAU_CS_SCHEDULE_DATA@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> > >,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>
_TEXT	ENDS
PUBLIC	??$insert@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::insert<std::pair<int,_CS_MINIMAP_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??$insert@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::insert<std::pair<int,_CS_MINIMAP_DATA> >, COMDAT
; _this$ = ecx

; 753  : 		_Pairib insert(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 754  : 		{	// try to insert node with value _Val, favoring right side
; 755  : 		return (_Linsert(this->_Buynode(_STD forward<_Valty>(_Val)),
; 756  : 			false));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Buynode<std::pair<int,_CS_MINIMAP_DATA> >
  00012	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00015	50		 push	 eax
  00016	57		 push	 edi
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Linsert
  0001e	8b c7		 mov	 eax, edi
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 757  : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??$insert@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::insert<std::pair<int,_CS_MINIMAP_DATA> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z
_TEXT	SEGMENT
$T223557 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T223557[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 09		 je	 SHORT $LN7@Cons_val@12
  00034	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z
$LN7@Cons_val@12:

; 281  : 	}

  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z$0:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T223557[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA &>
PUBLIC	?destroy@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@Z ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@Z PROC ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 213  : 		_Destroy(_Ptr);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0000b	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  00012	72 0b		 jb	 SHORT $LN24@destroy
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
$LN24@destroy:
  0001f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002d	c6 06 00	 mov	 BYTE PTR [esi], 0
  00030	5e		 pop	 esi

; 214  : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?destroy@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@Z ENDP ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z ; std::allocator<_CS_REG_GUILD_DATA>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z$0
__ehfuncinfo$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z
_TEXT	SEGMENT
$T223798 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$223806 = 8					; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z PROC ; std::allocator<_CS_REG_GUILD_DATA>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 197  : 		_Construct(_Ptr, _Val);

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d 08	 mov	 DWORD PTR __Vptr$223806[ebp], ecx
  00029	89 4d f0	 mov	 DWORD PTR $T223798[ebp], ecx
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	85 c9		 test	 ecx, ecx
  00035	74 09		 je	 SHORT $LN5@construct@13
  00037	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z
$LN5@construct@13:

; 198  : 		}

  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004a	59		 pop	 ecx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$223806[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T223798[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEXPAU_CS_REG_GUILD_DATA@@ABU3@@Z ENDP ; std::allocator<_CS_REG_GUILD_DATA>::construct
PUBLIC	??$?0AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@Z ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><char (&)[16],_CS_TOTAL_GUILD_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@Z PROC ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><char (&)[16],_CS_TOTAL_GUILD_DATA &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Val1$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b c2		 mov	 eax, edx
  0000b	57		 push	 edi
  0000c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00013	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001a	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL41@allocator:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL41@allocator
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00035	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0003c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003f	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00042	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00045	89 56 24	 mov	 DWORD PTR [esi+36], edx
  00048	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0004b	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  0004e	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00051	5f		 pop	 edi
  00052	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 164  : 		}

  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
??$?0AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@Z ENDP ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><char (&)[16],_CS_TOTAL_GUILD_DATA &>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *,std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *,std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0002b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0002e	8b 5d 14	 mov	 ebx, DWORD PTR __Al$[ebp]
  00031	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00034	89 7d ec	 mov	 DWORD PTR __Next$[ebp], edi
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003e	8b ff		 npad	 2
$LL6@Uninit_mov@3:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00043	74 3d		 je	 SHORT $LN4@Uninit_mov@3

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00045	56		 push	 esi
  00046	57		 push	 edi
  00047	53		 push	 ebx
  00048	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@U3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@$$QAU2@@Z ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA>
  0004d	83 c7 40	 add	 edi, 64			; 00000040H
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	89 7d 10	 mov	 DWORD PTR __Dest$[ebp], edi
  00056	83 c6 40	 add	 esi, 64			; 00000040H
  00059	eb e5		 jmp	 SHORT $LL6@Uninit_mov@3
__catch$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  0005b	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0005e	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00061	3b f7		 cmp	 esi, edi
  00063	74 14		 je	 SHORT $LN1@Uninit_mov@3
  00065	8b 5d 14	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL3@Uninit_mov@3:

; 434  : 		_Dest_val(_Al, _Next);

  00068	56		 push	 esi
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
  0006f	83 c6 40	 add	 esi, 64			; 00000040H
  00072	83 c4 08	 add	 esp, 8
  00075	3b f7		 cmp	 esi, edi
  00077	75 ef		 jne	 SHORT $LL3@Uninit_mov@3
$LN1@Uninit_mov@3:

; 435  : 	_RERAISE;

  00079	6a 00		 push	 0
  0007b	6a 00		 push	 0
  0007d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN20@Uninit_mov@3:
$LN4@Uninit_mov@3:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00082	8b c7		 mov	 eax, edi

; 438  : 	}

  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN19@Uninit_mov@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *,std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
PUBLIC	??$iter_swap@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0@Z ; std::iter_swap<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$iter_swap@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0@Z PROC ; std::iter_swap<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>, COMDAT

; 2133 : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2135 : 	}

  00003	5d		 pop	 ebp

; 2134 : 	swap(*_Left, *_Right);

  00004	e9 00 00 00 00	 jmp	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
??$iter_swap@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0@Z ENDP ; std::iter_swap<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00P6AEAAU1@1@Z@Z ; std::_Med3<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Med3@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00P6AEAAU1@1@Z@Z PROC ; std::_Med3<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 3683 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 3684 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00004	8b 5d 14	 mov	 ebx, DWORD PTR __Pred$[ebp]
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000f	57		 push	 edi
  00010	56		 push	 esi
  00011	ff d3		 call	 ebx
  00013	83 c4 08	 add	 esp, 8
  00016	84 c0		 test	 al, al
  00018	74 0a		 je	 SHORT $LN6@Med3@2

; 3685 : 		_STD iter_swap(_Mid, _First);

  0001a	57		 push	 edi
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  00021	83 c4 08	 add	 esp, 8
$LN6@Med3@2:

; 3686 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00024	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00027	56		 push	 esi
  00028	50		 push	 eax
  00029	ff d3		 call	 ebx
  0002b	83 c4 08	 add	 esp, 8
  0002e	84 c0		 test	 al, al
  00030	74 0d		 je	 SHORT $LN8@Med3@2

; 3687 : 		_STD iter_swap(_Last, _Mid);

  00032	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00035	56		 push	 esi
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  0003c	83 c4 08	 add	 esp, 8
$LN8@Med3@2:

; 3688 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0003f	57		 push	 edi
  00040	56		 push	 esi
  00041	ff d3		 call	 ebx
  00043	83 c4 08	 add	 esp, 8
  00046	84 c0		 test	 al, al
  00048	74 0a		 je	 SHORT $LN10@Med3@2

; 3689 : 		_STD iter_swap(_Mid, _First);

  0004a	57		 push	 edi
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  00051	83 c4 08	 add	 esp, 8
$LN10@Med3@2:
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx

; 3690 : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
??$_Med3@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00P6AEAAU1@1@Z@Z ENDP ; std::_Med3<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Adjust_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Adjust_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Adjust_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z PROC ; std::_Adjust_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 2565 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2566 : 	_Diff _Top = _Hole;
; 2567 : 	_Diff _Idx = 2 * _Hole + 2;
; 2568 : 
; 2569 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00003	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  0000c	8d 5c 3f 02	 lea	 ebx, DWORD PTR [edi+edi+2]
  00010	89 7d 0c	 mov	 DWORD PTR __Top$[ebp], edi
  00013	3b d8		 cmp	 ebx, eax
  00015	7d 72		 jge	 SHORT $LN29@Adjust_hea@2
$LL5@Adjust_hea@2:

; 2570 : 		{	// move _Hole down to larger child
; 2571 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00017	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0001a	8b c3		 mov	 eax, ebx
  0001c	c1 e0 06	 shl	 eax, 6
  0001f	03 c6		 add	 eax, esi
  00021	8d 48 c0	 lea	 ecx, DWORD PTR [eax-64]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	ff 55 18	 call	 DWORD PTR __Pred$[ebp]
  00029	83 c4 08	 add	 esp, 8
  0002c	84 c0		 test	 al, al
  0002e	74 01		 je	 SHORT $LN2@Adjust_hea@2

; 2572 : 			--_Idx;

  00030	4b		 dec	 ebx
$LN2@Adjust_hea@2:

; 2573 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00031	8b d3		 mov	 edx, ebx
  00033	c1 e2 06	 shl	 edx, 6
  00036	8b 4c 16 08	 mov	 ecx, DWORD PTR [esi+edx+8]
  0003a	03 f2		 add	 esi, edx
  0003c	c1 e7 06	 shl	 edi, 6
  0003f	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  00042	6a ff		 push	 -1
  00044	6a 00		 push	 0
  00046	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00049	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  0004c	52		 push	 edx
  0004d	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00050	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00055	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00058	89 47 28	 mov	 DWORD PTR [edi+40], eax
  0005b	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0005e	89 4f 2c	 mov	 DWORD PTR [edi+44], ecx
  00061	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00064	89 57 30	 mov	 DWORD PTR [edi+48], edx
  00067	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0006a	89 47 34	 mov	 DWORD PTR [edi+52], eax
  0006d	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00070	89 4f 38	 mov	 DWORD PTR [edi+56], ecx
  00073	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  00076	89 57 3c	 mov	 DWORD PTR [edi+60], edx

; 2574 : 		_Hole = _Idx;

  00079	8b fb		 mov	 edi, ebx
  0007b	8d 5c 1b 02	 lea	 ebx, DWORD PTR [ebx+ebx+2]
  0007f	3b 5d 10	 cmp	 ebx, DWORD PTR __Bottom$[ebp]
  00082	7c 93		 jl	 SHORT $LL5@Adjust_hea@2

; 2575 : 		}
; 2576 : 
; 2577 : 	if (_Idx == _Bottom)

  00084	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00087	3b d8		 cmp	 ebx, eax
$LN29@Adjust_hea@2:
  00089	75 51		 jne	 SHORT $LN28@Adjust_hea@2

; 2578 : 		{	// only child at bottom, move _Hole down to it
; 2579 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  0008b	8b c8		 mov	 ecx, eax
  0008d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00090	c1 e1 06	 shl	 ecx, 6
  00093	8b 54 01 c8	 mov	 edx, DWORD PTR [ecx+eax-56]
  00097	8d 74 01 c0	 lea	 esi, DWORD PTR [ecx+eax-64]
  0009b	6a ff		 push	 -1
  0009d	c1 e7 06	 shl	 edi, 6
  000a0	8d 1c 07	 lea	 ebx, DWORD PTR [edi+eax]
  000a3	6a 00		 push	 0
  000a5	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000a8	50		 push	 eax
  000a9	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000ac	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  000af	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000b4	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]

; 2580 : 		_Hole = _Bottom - 1;

  000b7	8b 7d 10	 mov	 edi, DWORD PTR __Bottom$[ebp]
  000ba	89 4b 28	 mov	 DWORD PTR [ebx+40], ecx
  000bd	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000c0	89 53 2c	 mov	 DWORD PTR [ebx+44], edx
  000c3	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000c6	89 43 30	 mov	 DWORD PTR [ebx+48], eax
  000c9	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  000cc	89 4b 34	 mov	 DWORD PTR [ebx+52], ecx
  000cf	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000d2	89 53 38	 mov	 DWORD PTR [ebx+56], edx
  000d5	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  000d8	89 43 3c	 mov	 DWORD PTR [ebx+60], eax
  000db	4f		 dec	 edi
$LN28@Adjust_hea@2:

; 2581 : 		}
; 2582 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  000dc	8b 55 18	 mov	 edx, DWORD PTR __Pred$[ebp]
  000df	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  000e2	8b 4d 0c	 mov	 ecx, DWORD PTR __Top$[ebp]
  000e5	52		 push	 edx
  000e6	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  000e9	50		 push	 eax
  000ea	51		 push	 ecx
  000eb	57		 push	 edi
  000ec	52		 push	 edx
  000ed	e8 00 00 00 00	 call	 ??$_Push_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Push_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  000f2	83 c4 14	 add	 esp, 20			; 00000014H
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx

; 2583 : 	}

  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
??$_Adjust_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ENDP ; std::_Adjust_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Move_backward@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00@Z ; std::_Move_backward<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$224022 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00@Z PROC ; std::_Move_backward<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>, COMDAT

; 2638 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2639 : 	return (_Move_backward(_First, _Last,
; 2640 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$224022[ebp]
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move_backward@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 2641 : 	}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Move_backward@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00@Z ENDP ; std::_Move_backward<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00$$QAU1@P6AEAAU1@2@ZPAH@Z ; std::_Pop_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00$$QAU1@P6AEAAU1@2@ZPAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
___formal$ = 28						; size = 4
??$_Pop_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00$$QAU1@P6AEAAU1@2@ZPAH@Z PROC ; std::_Pop_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 2591 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2592 : 	*_Dest = _Move(*_First);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	6a ff		 push	 -1
  00010	6a 00		 push	 0
  00012	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00015	51		 push	 ecx
  00016	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00019	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00021	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00024	89 57 28	 mov	 DWORD PTR [edi+40], edx
  00027	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0002a	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  0002d	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00030	89 4f 30	 mov	 DWORD PTR [edi+48], ecx
  00033	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  00036	89 57 34	 mov	 DWORD PTR [edi+52], edx
  00039	8b 46 38	 mov	 eax, DWORD PTR [esi+56]

; 2593 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
; 2594 : 		_Move(_Val), _Pred);

  0003c	8b 55 18	 mov	 edx, DWORD PTR __Pred$[ebp]
  0003f	89 47 38	 mov	 DWORD PTR [edi+56], eax
  00042	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00045	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  00048	89 4f 3c	 mov	 DWORD PTR [edi+60], ecx
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0004e	52		 push	 edx
  0004f	50		 push	 eax
  00050	2b ce		 sub	 ecx, esi
  00052	c1 f9 06	 sar	 ecx, 6
  00055	51		 push	 ecx
  00056	6a 00		 push	 0
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Adjust_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  0005e	83 c4 14	 add	 esp, 20			; 00000014H
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 2595 : 	}

  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
??$_Pop_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00$$QAU1@P6AEAAU1@2@ZPAH@Z ENDP ; std::_Pop_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	?Clear@_CS_REG_GUILD_DATA@@QAEXXZ		; _CS_REG_GUILD_DATA::Clear
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
;	COMDAT ?Clear@_CS_REG_GUILD_DATA@@QAEXXZ
_TEXT	SEGMENT
?Clear@_CS_REG_GUILD_DATA@@QAEXXZ PROC			; _CS_REG_GUILD_DATA::Clear, COMDAT
; _this$ = ecx

; 177  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi

; 178  : 		m_bIN_USE = 0;

  00002	33 ff		 xor	 edi, edi
  00004	8b f1		 mov	 esi, ecx

; 179  : 		m_strGuildName = "";

  00006	57		 push	 edi
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0000c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0000f	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00012	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 180  : 		m_iRegMarkCount = 0;

  00017	89 7e 28	 mov	 DWORD PTR [esi+40], edi

; 181  : 		m_iGuildMemberCount = 0;

  0001a	89 7e 2c	 mov	 DWORD PTR [esi+44], edi

; 182  : 		m_iGuildMasterLevel = 0;

  0001d	89 7e 30	 mov	 DWORD PTR [esi+48], edi

; 183  : 		m_iSeqNum = 0;

  00020	89 7e 34	 mov	 DWORD PTR [esi+52], edi

; 184  : 		m_i64TotolScore = 0;

  00023	89 7e 38	 mov	 DWORD PTR [esi+56], edi
  00026	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi

; 185  : 	};

  0002b	c3		 ret	 0
?Clear@_CS_REG_GUILD_DATA@@QAEXXZ ENDP			; _CS_REG_GUILD_DATA::Clear
_TEXT	ENDS
PUBLIC	?Clear@CCastleSiege@@QAEXXZ			; CCastleSiege::Clear
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
;	COMDAT ?Clear@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
$T224209 = -4						; size = 4
$T224129 = -4						; size = 4
?Clear@CCastleSiege@@QAEXXZ PROC			; CCastleSiege::Clear, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 104  : 	m_bCastleSiegeEnable = 1;
; 105  : 	m_bFileDataLoadOK = 0;
; 106  : 	m_bDbDataLoadOK = 0;
; 107  : 	m_bDoRun = 0;
; 108  : 	m_iMapSvrGroup = -1;
; 109  : 	m_iCastleSiegeCycle = 14;
; 110  : 	m_iCastleSiegeState = -1;
; 111  : 	m_bFixCastleCycleStartDate = 0;
; 112  : 	m_i64CastleMoney = 0;
; 113  : 
; 114  : 	memset(&m_tmFixCastleCycleStartDate,0x00,sizeof(m_tmFixCastleCycleStartDate));

  00004	33 c0		 xor	 eax, eax
  00006	53		 push	 ebx
  00007	33 db		 xor	 ebx, ebx
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 46 08 01 00
	00 00		 mov	 DWORD PTR [esi+8], 1
  00013	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00016	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00019	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0001c	c7 46 24 0e 00
	00 00		 mov	 DWORD PTR [esi+36], 14	; 0000000eH
  00023	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  00026	89 9e e8 00 00
	00		 mov	 DWORD PTR [esi+232], ebx
  0002c	89 9e ec 00 00
	00		 mov	 DWORD PTR [esi+236], ebx
  00032	57		 push	 edi
  00033	83 cf ff	 or	 edi, -1
  00036	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00039	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  0003c	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0003f	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00042	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00045	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 115  : 
; 116  : 	m_iFixCastleSpecificState = 0;

  00048	89 5e 50	 mov	 DWORD PTR [esi+80], ebx

; 117  : 	m_bFixCastleStateStartDate = 0;

  0004b	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 118  : 
; 119  : 	memset(&m_tmFixCastleStateStartDate,0x00,sizeof(m_tmFixCastleStateStartDate));

  0004e	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00051	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00054	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00057	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 120  : 
; 121  : 	m_iCastleDataLoadState = 0;

  0005a	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx

; 122  : 	m_dwDbDataLoadTickCount = 0;

  0005d	89 5e 20	 mov	 DWORD PTR [esi+32], ebx

; 123  : 	m_iCS_REMAIN_MSEC = -1;

  00060	89 7e 68	 mov	 DWORD PTR [esi+104], edi

; 124  : 
; 125  : 	memset(&m_tmStateStartDate,0x00,sizeof(m_tmStateStartDate));

  00063	89 46 70	 mov	 DWORD PTR [esi+112], eax
  00066	89 46 74	 mov	 DWORD PTR [esi+116], eax
  00069	89 46 78	 mov	 DWORD PTR [esi+120], eax
  0006c	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 126  : 	memset(&m_tmLeftCastleSiegeDate,0x00,sizeof(m_tmLeftCastleSiegeDate));

  0006f	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  00075	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  0007b	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  00081	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 127  : 
; 128  : 	m_bCsBasicGuildInfoLoadOK = 0;

  00087	89 9e a4 01 00
	00		 mov	 DWORD PTR [esi+420], ebx

; 129  : 	m_bCsTotalGuildInfoLoadOK = 0;

  0008d	89 9e a8 01 00
	00		 mov	 DWORD PTR [esi+424], ebx

; 130  : 	m_btIsSiegeGuildList = 0;

  00093	88 9e d4 00 00
	00		 mov	 BYTE PTR [esi+212], bl

; 131  : 	m_btIsCastleOccupied = 0;

  00099	88 9e d6 00 00
	00		 mov	 BYTE PTR [esi+214], bl

; 132  : 
; 133  : 	memset(m_szCastleOwnerGuild,0x00,sizeof(m_szCastleOwnerGuild));

  0009f	89 86 d7 00 00
	00		 mov	 DWORD PTR [esi+215], eax
  000a5	89 86 db 00 00
	00		 mov	 DWORD PTR [esi+219], eax
  000ab	89 86 df 00 00
	00		 mov	 DWORD PTR [esi+223], eax
  000b1	89 86 e3 00 00
	00		 mov	 DWORD PTR [esi+227], eax

; 134  : 
; 135  : 	m_bEnterHuntZone = 0;

  000b7	89 9e fc 00 00
	00		 mov	 DWORD PTR [esi+252], ebx

; 136  : 	m_dwNPC_DBSAVE_TICK_COUNT = GetTickCount();

  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000c3	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 137  : 	m_dwCALC_LEFTSIEGE_TICK_COUNT = 0;
; 138  : 	m_dwEVENT_MSG_TICK_COUNT = 0;
; 139  : 	m_dwCHECK_GATE_ALIVE_COUNT = 0;
; 140  : 	m_dwCS_LEFTTIME_TICK_COUNT = 0;
; 141  : 	m_dwCS_STARTTIME_TICK_COUNT = 0;
; 142  : 	m_dwCS_JOINSIDE_REFRESH_TICK_COUNT = 0;
; 143  : 	m_dwCS_JOINSIDE_REFRESH_TOTAL_COUNT = 0;
; 144  : 	m_dwCS_MINIMAP_SEND_TICK_COUNT = 0;
; 145  : 	m_bCastleTowerAccessable = 0;
; 146  : 	m_bRegCrownAvailable = 0;
; 147  : 	m_iCastleCrownAccessUser = -1;

  000c9	89 be f0 01 00
	00		 mov	 DWORD PTR [esi+496], edi

; 148  : 	m_btCastleCrownAccessUserX = 0;
; 149  : 	m_btCastleCrownAccessUserY = 0;
; 150  : 	m_iCastleSwitchAccessUser1 = -1;

  000cf	89 be f8 01 00
	00		 mov	 DWORD PTR [esi+504], edi

; 151  : 	m_iCastleSwitchAccessUser2 = -1;

  000d5	89 be fc 01 00
	00		 mov	 DWORD PTR [esi+508], edi

; 152  : 	m_dwCrownAccessTime = 0;
; 153  : 
; 154  : 	memset(m_szMiddleWinnerGuild,0x00,sizeof(m_szMiddleWinnerGuild));

  000db	33 c0		 xor	 eax, eax
  000dd	89 9e 94 00 00
	00		 mov	 DWORD PTR [esi+148], ebx
  000e3	89 9e 98 00 00
	00		 mov	 DWORD PTR [esi+152], ebx
  000e9	89 9e 9c 00 00
	00		 mov	 DWORD PTR [esi+156], ebx
  000ef	89 9e ac 00 00
	00		 mov	 DWORD PTR [esi+172], ebx
  000f5	89 9e b0 00 00
	00		 mov	 DWORD PTR [esi+176], ebx
  000fb	89 9e a0 00 00
	00		 mov	 DWORD PTR [esi+160], ebx
  00101	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00107	89 9e a8 00 00
	00		 mov	 DWORD PTR [esi+168], ebx
  0010d	89 9e e4 01 00
	00		 mov	 DWORD PTR [esi+484], ebx
  00113	89 9e e8 01 00
	00		 mov	 DWORD PTR [esi+488], ebx
  00119	66 89 9e f4 01
	00 00		 mov	 WORD PTR [esi+500], bx
  00120	89 9e 00 02 00
	00		 mov	 DWORD PTR [esi+512], ebx
  00126	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax
  0012c	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax

; 155  : 
; 156  : 	EnterCriticalSection(&m_critScheduleData);

  00132	8d be 10 01 00
	00		 lea	 edi, DWORD PTR [esi+272]
  00138	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax
  0013e	57		 push	 edi
  0013f	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 157  : 	m_vtScheduleData.clear();

  0014b	8b 86 04 01 00
	00		 mov	 eax, DWORD PTR [esi+260]
  00151	8b 96 00 01 00
	00		 mov	 edx, DWORD PTR [esi+256]
  00157	8d 8e 00 01 00
	00		 lea	 ecx, DWORD PTR [esi+256]
  0015d	50		 push	 eax
  0015e	52		 push	 edx
  0015f	8d 45 fc	 lea	 eax, DWORD PTR $T224129[ebp]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?erase@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@@2@0@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::erase

; 158  : 	LeaveCriticalSection(&m_critScheduleData);

  00168	57		 push	 edi
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 159  : 
; 160  : 	EnterCriticalSection(&m_critNpcData);

  0016f	8d be 38 01 00
	00		 lea	 edi, DWORD PTR [esi+312]
  00175	57		 push	 edi
  00176	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 161  : 	m_vtNpcData.clear();

  0017c	8b 86 2c 01 00
	00		 mov	 eax, DWORD PTR [esi+300]
  00182	8b 96 28 01 00
	00		 mov	 edx, DWORD PTR [esi+296]
  00188	8d 8e 28 01 00
	00		 lea	 ecx, DWORD PTR [esi+296]
  0018e	50		 push	 eax
  0018f	52		 push	 edx
  00190	8d 55 fc	 lea	 edx, DWORD PTR $T224209[ebp]
  00193	52		 push	 edx
  00194	e8 00 00 00 00	 call	 ?erase@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@@2@0@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::erase

; 162  : 	LeaveCriticalSection(&m_critNpcData);

  00199	57		 push	 edi
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 163  : 
; 164  : 	m_bDbNpcCreated = 0;
; 165  : 
; 166  : 	ResetAllUserCsJoinSide();

  001a0	8b ce		 mov	 ecx, esi
  001a2	89 9e 50 01 00
	00		 mov	 DWORD PTR [esi+336], ebx
  001a8	e8 00 00 00 00	 call	 ?ResetAllUserCsJoinSide@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetAllUserCsJoinSide
  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	5b		 pop	 ebx

; 167  : }

  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
?Clear@CCastleSiege@@QAEXXZ ENDP			; CCastleSiege::Clear
_TEXT	ENDS
PUBLIC	?Ready@CCastleSiege@@QAEHH@Z			; CCastleSiege::Ready
; Function compile flags: /Ogtp
;	COMDAT ?Ready@CCastleSiege@@QAEHH@Z
_TEXT	SEGMENT
_iMapSvrGroup$ = 8					; size = 4
?Ready@CCastleSiege@@QAEHH@Z PROC			; CCastleSiege::Ready, COMDAT
; _this$ = ecx

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 171  : 	if(iMapSvrGroup < 0)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _iMapSvrGroup$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	79 08		 jns	 SHORT $LN1@Ready

; 172  : 		return false;

  0000e	5f		 pop	 edi
  0000f	33 c0		 xor	 eax, eax
  00011	5e		 pop	 esi

; 178  : return true;
; 179  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN1@Ready:

; 173  : 	Clear();

  00016	e8 00 00 00 00	 call	 ?Clear@CCastleSiege@@QAEXXZ ; CCastleSiege::Clear

; 174  : 	ClearAllNPC();

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?ClearAllNPC@CCastleSiege@@QAEXXZ ; CCastleSiege::ClearAllNPC

; 175  : 
; 176  : 	m_iMapSvrGroup = iMapSvrGroup;

  00022	89 7e 18	 mov	 DWORD PTR [esi+24], edi

; 177  : 	m_iCastleDataLoadState = 1;

  00025	b8 01 00 00 00	 mov	 eax, 1
  0002a	5f		 pop	 edi
  0002b	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002e	5e		 pop	 esi

; 178  : return true;
; 179  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?Ready@CCastleSiege@@QAEHH@Z ENDP			; CCastleSiege::Ready
_TEXT	ENDS
PUBLIC	??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::~map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ$1
__ehfuncinfo$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T224395 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ PROC ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::~map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T224395[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
__ehhandler$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::~map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ	; CCastleSiege::SetAllUserCsJoinSide
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ$0
__ehfuncinfo$?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
tv644 = -84						; size = 4
$T224797 = -80						; size = 4
__Where$224869 = -76					; size = 4
_this$GSCopy$ = -72					; size = 4
tv771 = -68						; size = 4
_iUSER$186060 = -64					; size = 4
$T186228 = -60						; size = 28
_szGuildName$186065 = -32				; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::SetAllUserCsJoinSide, COMDAT
; _this$ = ecx

; 2350 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx

; 2351 : 	if(m_bCsTotalGuildInfoLoadOK == FALSE)

  0002d	33 f6		 xor	 esi, esi

; 2364 : 
; 2365 : 		map<basic_string<char,char_traits<char> >,_CS_TOTAL_GUILD_DATA,less<basic_string<char,char_traits<char> > > >::iterator it = m_mapCsTotalGuildInfo.find(szGuildName);

  0002f	89 5d b8	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00032	39 b3 a8 01 00
	00		 cmp	 DWORD PTR [ebx+424], esi
  00038	0f 84 a1 01 00
	00		 je	 $LN7@SetAllUser

; 2352 : 		return;
; 2353 : 
; 2354 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  0003e	8d 83 8c 01 00
	00		 lea	 eax, DWORD PTR [ebx+396]
  00044	50		 push	 eax
  00045	89 45 ac	 mov	 DWORD PTR tv644[ebp], eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  0004e	bf 00 dd 49 06	 mov	 edi, 105504000		; 0649dd00H

; 2355 : 
; 2356 : 	for(int iUSER = OBJ_STARTUSERINDEX; iUSER < OBJMAX; iUSER++)

  00053	c7 45 c0 04 29
	00 00		 mov	 DWORD PTR _iUSER$186060[ebp], 10500 ; 00002904H
  0005a	89 7d bc	 mov	 DWORD PTR tv771[ebp], edi
$LN5@SetAllUser:

; 2357 : 	{
; 2358 : 		if(gObjIsConnected(iUSER) == FALSE)

  0005d	8b 45 c0	 mov	 eax, DWORD PTR _iUSER$186060[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00066	83 c4 04	 add	 esp, 4
  00069	85 c0		 test	 eax, eax
  0006b	0f 84 4c 01 00
	00		 je	 $LN4@SetAllUser

; 2359 : 			continue;
; 2360 : 
; 2361 : 		char szGuildName[16] = {0};

  00071	33 c0		 xor	 eax, eax
  00073	89 45 e1	 mov	 DWORD PTR _szGuildName$186065[ebp+1], eax
  00076	89 45 e5	 mov	 DWORD PTR _szGuildName$186065[ebp+5], eax
  00079	89 45 e9	 mov	 DWORD PTR _szGuildName$186065[ebp+9], eax
  0007c	66 89 45 ed	 mov	 WORD PTR _szGuildName$186065[ebp+13], ax
  00080	88 45 ef	 mov	 BYTE PTR _szGuildName$186065[ebp+15], al

; 2362 : 
; 2363 : 		memcpy(szGuildName,gObj[iUSER].GuildName,8);

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00088	c6 45 e0 00	 mov	 BYTE PTR _szGuildName$186065[ebp], 0
  0008c	8b 8c 07 1c 06
	00 00		 mov	 ecx, DWORD PTR [edi+eax+1564]
  00093	89 4d e0	 mov	 DWORD PTR _szGuildName$186065[ebp], ecx
  00096	8b 94 07 20 06
	00 00		 mov	 edx, DWORD PTR [edi+eax+1568]

; 2364 : 
; 2365 : 		map<basic_string<char,char_traits<char> >,_CS_TOTAL_GUILD_DATA,less<basic_string<char,char_traits<char> > > >::iterator it = m_mapCsTotalGuildInfo.find(szGuildName);

  0009d	8d 45 e0	 lea	 eax, DWORD PTR _szGuildName$186065[ebp]
  000a0	89 55 e4	 mov	 DWORD PTR _szGuildName$186065[ebp+4], edx
  000a3	c7 45 d8 0f 00
	00 00		 mov	 DWORD PTR $T186228[ebp+20], 15 ; 0000000fH
  000aa	89 75 d4	 mov	 DWORD PTR $T186228[ebp+16], esi
  000ad	c6 45 c4 00	 mov	 BYTE PTR $T186228[ebp], 0
  000b1	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL173@SetAllUser:
  000b4	8a 10		 mov	 dl, BYTE PTR [eax]
  000b6	40		 inc	 eax
  000b7	84 d2		 test	 dl, dl
  000b9	75 f9		 jne	 SHORT $LL173@SetAllUser
  000bb	2b c1		 sub	 eax, ecx
  000bd	50		 push	 eax
  000be	8d 45 e0	 lea	 eax, DWORD PTR _szGuildName$186065[ebp]
  000c1	50		 push	 eax
  000c2	8d 4d c4	 lea	 ecx, DWORD PTR $T186228[ebp]
  000c5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000ca	8d 4d c4	 lea	 ecx, DWORD PTR $T186228[ebp]
  000cd	51		 push	 ecx
  000ce	8d 8b 7c 01 00
	00		 lea	 ecx, DWORD PTR [ebx+380]
  000d4	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  000d7	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lbound
  000dc	8b b3 80 01 00
	00		 mov	 esi, DWORD PTR [ebx+384]
  000e2	89 45 b4	 mov	 DWORD PTR __Where$224869[ebp], eax
  000e5	3b c6		 cmp	 eax, esi
  000e7	74 58		 je	 SHORT $LN42@SetAllUser
  000e9	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  000ec	83 c0 0c	 add	 eax, 12			; 0000000cH
  000ef	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  000f3	72 02		 jb	 SHORT $LN84@SetAllUser
  000f5	8b 00		 mov	 eax, DWORD PTR [eax]
$LN84@SetAllUser:
  000f7	8b 5d d4	 mov	 ebx, DWORD PTR $T186228[ebp+16]
  000fa	8b d3		 mov	 edx, ebx
  000fc	3b df		 cmp	 ebx, edi
  000fe	72 02		 jb	 SHORT $LN91@SetAllUser
  00100	8b d7		 mov	 edx, edi
$LN91@SetAllUser:
  00102	83 7d d8 10	 cmp	 DWORD PTR $T186228[ebp+20], 16 ; 00000010H
  00106	8b 4d c4	 mov	 ecx, DWORD PTR $T186228[ebp]
  00109	73 03		 jae	 SHORT $LN102@SetAllUser
  0010b	8d 4d c4	 lea	 ecx, DWORD PTR $T186228[ebp]
$LN102@SetAllUser:
  0010e	52		 push	 edx
  0010f	50		 push	 eax
  00110	51		 push	 ecx
  00111	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00116	83 c4 0c	 add	 esp, 12			; 0000000cH
  00119	85 c0		 test	 eax, eax
  0011b	75 12		 jne	 SHORT $LN178@SetAllUser
  0011d	3b df		 cmp	 ebx, edi
  0011f	73 05		 jae	 SHORT $LN92@SetAllUser
  00121	83 c8 ff	 or	 eax, -1
  00124	eb 07		 jmp	 SHORT $LN93@SetAllUser
$LN92@SetAllUser:
  00126	33 c0		 xor	 eax, eax
  00128	3b df		 cmp	 ebx, edi
  0012a	0f 95 c0	 setne	 al
$LN93@SetAllUser:
  0012d	85 c0		 test	 eax, eax
$LN178@SetAllUser:
  0012f	8b 5d b8	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  00132	8b 7d bc	 mov	 edi, DWORD PTR tv771[ebp]
  00135	0f 98 c0	 sets	 al
  00138	84 c0		 test	 al, al
  0013a	75 05		 jne	 SHORT $LN42@SetAllUser
  0013c	8d 45 b4	 lea	 eax, DWORD PTR __Where$224869[ebp]
  0013f	eb 06		 jmp	 SHORT $LN43@SetAllUser
$LN42@SetAllUser:
  00141	89 75 b0	 mov	 DWORD PTR $T224797[ebp], esi
  00144	8d 45 b0	 lea	 eax, DWORD PTR $T224797[ebp]
$LN43@SetAllUser:
  00147	83 7d d8 10	 cmp	 DWORD PTR $T186228[ebp+20], 16 ; 00000010H
  0014b	8b 30		 mov	 esi, DWORD PTR [eax]
  0014d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00154	72 0c		 jb	 SHORT $LN128@SetAllUser
  00156	8b 55 c4	 mov	 edx, DWORD PTR $T186228[ebp]
  00159	52		 push	 edx
  0015a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0015f	83 c4 04	 add	 esp, 4
$LN128@SetAllUser:
  00162	c7 45 d8 0f 00
	00 00		 mov	 DWORD PTR $T186228[ebp+20], 15 ; 0000000fH
  00169	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T186228[ebp+16], 0
  00170	c6 45 c4 00	 mov	 BYTE PTR $T186228[ebp], 0

; 2366 : 
; 2367 : 		if(it != m_mapCsTotalGuildInfo.end())

  00174	3b b3 80 01 00
	00		 cmp	 esi, DWORD PTR [ebx+384]
  0017a	74 23		 je	 SHORT $LN1@SetAllUser

; 2368 : 		{
; 2369 : 			gObj[iUSER].m_btCsJoinSide = it->second.m_iCsGuildID;

  0017c	8a 46 30	 mov	 al, BYTE PTR [esi+48]
  0017f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00185	88 84 0f 5a 20
	00 00		 mov	 BYTE PTR [edi+ecx+8282], al

; 2370 : 			gObj[iUSER].m_bCsGuildInvolved = !(!it->second.m_bGuildInvolved);

  0018c	83 7e 34 00	 cmp	 DWORD PTR [esi+52], 0
  00190	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00195	0f 95 c2	 setne	 dl
  00198	88 94 07 5b 20
	00 00		 mov	 BYTE PTR [edi+eax+8283], dl
$LN1@SetAllUser:

; 2371 : 		}
; 2372 : 
; 2373 : 		NotifySelfCsJoinSide(iUSER);

  0019f	8b 4d c0	 mov	 ecx, DWORD PTR _iUSER$186060[ebp]
  001a2	51		 push	 ecx
  001a3	8b cb		 mov	 ecx, ebx
  001a5	e8 00 00 00 00	 call	 ?NotifySelfCsJoinSide@CCastleSiege@@QAEXH@Z ; CCastleSiege::NotifySelfCsJoinSide

; 2374 : 		gObj[iUSER].m_iAccumulatedCrownAccessTime = 0;

  001aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b0	c7 84 17 74 20
	00 00 00 00 00
	00		 mov	 DWORD PTR [edi+edx+8308], 0
  001bb	33 f6		 xor	 esi, esi
$LN4@SetAllUser:

; 2355 : 
; 2356 : 	for(int iUSER = OBJ_STARTUSERINDEX; iUSER < OBJMAX; iUSER++)

  001bd	ff 45 c0	 inc	 DWORD PTR _iUSER$186060[ebp]
  001c0	81 c7 40 27 00
	00		 add	 edi, 10048		; 00002740H
  001c6	89 7d bc	 mov	 DWORD PTR tv771[ebp], edi
  001c9	81 ff 00 2f e3
	06		 cmp	 edi, 115552000		; 06e32f00H
  001cf	0f 8c 88 fe ff
	ff		 jl	 $LN5@SetAllUser

; 2375 : 	}
; 2376 : 
; 2377 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  001d5	8b 45 ac	 mov	 eax, DWORD PTR tv644[ebp]
  001d8	50		 push	 eax
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN7@SetAllUser:

; 2378 : }

  001df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e9	59		 pop	 ecx
  001ea	5f		 pop	 edi
  001eb	5e		 pop	 esi
  001ec	5b		 pop	 ebx
  001ed	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f0	33 cd		 xor	 ecx, ebp
  001f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR $T186228[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::SetAllUserCsJoinSide
PUBLIC	??_C@_0DL@MJLELOFK@?$FLCastleSiege?$FN?5Castle?5Winner?5Guil@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z	; CCastleSiege::ChangeWinnerGuild
;	COMDAT ??_C@_0DL@MJLELOFK@?$FLCastleSiege?$FN?5Castle?5Winner?5Guil@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	SEGMENT
??_C@_0DL@MJLELOFK@?$FLCastleSiege?$FN?5Castle?5Winner?5Guil@ DB '[Castle'
	DB	'Siege] Castle Winner Guild Change From ''%s'' To ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z$0
__ehfuncinfo$?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
tv1056 = -116						; size = 4
__Where$226025 = -112					; size = 4
$T225953 = -108						; size = 4
_this$GSCopy$ = -104					; size = 4
tv1297 = -100						; size = 4
_iUSER$187587 = -96					; size = 4
$T187594 = -92						; size = 28
_szGuildTo$ = -64					; size = 16
_szGuildFrom$ = -48					; size = 16
_szGuildName$187592 = -32				; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iCsJoinSide$ = 8					; size = 4
?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::ChangeWinnerGuild, COMDAT
; _this$ = ecx

; 3450 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3451 : 	char szGuildTo[16] = {0};

  0002b	33 c0		 xor	 eax, eax
  0002d	8b d9		 mov	 ebx, ecx
  0002f	89 45 c1	 mov	 DWORD PTR _szGuildTo$[ebp+1], eax
  00032	89 45 c5	 mov	 DWORD PTR _szGuildTo$[ebp+5], eax
  00035	89 45 c9	 mov	 DWORD PTR _szGuildTo$[ebp+9], eax
  00038	66 89 45 cd	 mov	 WORD PTR _szGuildTo$[ebp+13], ax
  0003c	88 45 cf	 mov	 BYTE PTR _szGuildTo$[ebp+15], al

; 3452 : 	char szGuildFrom[16] = {0};

  0003f	88 45 d0	 mov	 BYTE PTR _szGuildFrom$[ebp], al
  00042	89 45 d1	 mov	 DWORD PTR _szGuildFrom$[ebp+1], eax
  00045	89 45 d5	 mov	 DWORD PTR _szGuildFrom$[ebp+5], eax
  00048	89 45 d9	 mov	 DWORD PTR _szGuildFrom$[ebp+9], eax
  0004b	66 89 45 dd	 mov	 WORD PTR _szGuildFrom$[ebp+13], ax
  0004f	88 45 df	 mov	 BYTE PTR _szGuildFrom$[ebp+15], al

; 3453 : 
; 3454 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  00052	8d 83 8c 01 00
	00		 lea	 eax, DWORD PTR [ebx+396]
  00058	50		 push	 eax
  00059	89 5d 98	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  0005c	c6 45 c0 00	 mov	 BYTE PTR _szGuildTo$[ebp], 0
  00060	33 f6		 xor	 esi, esi
  00062	89 45 8c	 mov	 DWORD PTR tv1056[ebp], eax
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 3455 : 
; 3456 : 	for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsTotalGuildInfo.begin();it != m_mapCsTotalGuildInfo.end(); it++)

  0006b	8b 8b 80 01 00
	00		 mov	 ecx, DWORD PTR [ebx+384]
  00071	8b 01		 mov	 eax, DWORD PTR [ecx]
  00073	3b c1		 cmp	 eax, ecx
  00075	0f 84 a3 00 00
	00		 je	 $LN11@ChangeWinn
  0007b	8b 55 08	 mov	 edx, DWORD PTR _iCsJoinSide$[ebp]
  0007e	8b ff		 npad	 2
$LL39@ChangeWinn:

; 3457 : 	{
; 3458 : 		if(it->second.m_iCsGuildID == iCsJoinSide)

  00080	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00083	3b ca		 cmp	 ecx, edx
  00085	75 25		 jne	 SHORT $LN10@ChangeWinn

; 3459 : 		{
; 3460 : 			it->second.m_iCsGuildID = 1;

  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 3461 : 
; 3462 : 			if(it->second.m_bGuildInvolved == TRUE)

  0008f	39 48 34	 cmp	 DWORD PTR [eax+52], ecx
  00092	75 3b		 jne	 SHORT $LN12@ChangeWinn

; 3463 : 			{
; 3464 : 				memcpy(szGuildTo,&it->first[0],8);

  00094	83 78 20 10	 cmp	 DWORD PTR [eax+32], 16	; 00000010H
  00098	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0009b	72 02		 jb	 SHORT $LN119@ChangeWinn
  0009d	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN119@ChangeWinn:
  0009f	8b 39		 mov	 edi, DWORD PTR [ecx]
  000a1	89 7d c0	 mov	 DWORD PTR _szGuildTo$[ebp], edi
  000a4	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000a7	89 4d c4	 mov	 DWORD PTR _szGuildTo$[ebp+4], ecx

; 3465 : 			}
; 3466 : 		}
; 3467 : 		else if(it->second.m_iCsGuildID == 1)

  000aa	eb 23		 jmp	 SHORT $LN12@ChangeWinn
$LN10@ChangeWinn:
  000ac	83 f9 01	 cmp	 ecx, 1
  000af	75 1e		 jne	 SHORT $LN12@ChangeWinn

; 3468 : 		{
; 3469 : 			it->second.m_iCsGuildID = iCsJoinSide;

  000b1	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 3470 : 
; 3471 : 			if(it->second.m_bGuildInvolved == TRUE)

  000b4	39 48 34	 cmp	 DWORD PTR [eax+52], ecx
  000b7	75 16		 jne	 SHORT $LN12@ChangeWinn

; 3472 : 			{
; 3473 : 				memcpy(szGuildFrom,&it->first[0],8);

  000b9	83 78 20 10	 cmp	 DWORD PTR [eax+32], 16	; 00000010H
  000bd	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000c0	72 02		 jb	 SHORT $LN157@ChangeWinn
  000c2	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN157@ChangeWinn:
  000c4	8b 39		 mov	 edi, DWORD PTR [ecx]
  000c6	89 7d d0	 mov	 DWORD PTR _szGuildFrom$[ebp], edi
  000c9	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000cc	89 4d d4	 mov	 DWORD PTR _szGuildFrom$[ebp+4], ecx
$LN12@ChangeWinn:

; 3455 : 
; 3456 : 	for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsTotalGuildInfo.begin();it != m_mapCsTotalGuildInfo.end(); it++)

  000cf	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  000d3	75 3d		 jne	 SHORT $LN326@ChangeWinn
  000d5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000d8	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  000dc	75 16		 jne	 SHORT $LN321@ChangeWinn
  000de	8b c1		 mov	 eax, ecx
  000e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e2	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  000e6	75 2a		 jne	 SHORT $LN326@ChangeWinn
$LL54@ChangeWinn:
  000e8	8b c1		 mov	 eax, ecx
  000ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ec	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  000f0	74 f6		 je	 SHORT $LL54@ChangeWinn
  000f2	eb 1e		 jmp	 SHORT $LN326@ChangeWinn
$LN321@ChangeWinn:
  000f4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f7	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  000fb	75 13		 jne	 SHORT $LN37@ChangeWinn
  000fd	8d 49 00	 npad	 3
$LL38@ChangeWinn:
  00100	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN37@ChangeWinn
  00105	8b c1		 mov	 eax, ecx
  00107	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0010a	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  0010e	74 f0		 je	 SHORT $LL38@ChangeWinn
$LN37@ChangeWinn:
  00110	8b c1		 mov	 eax, ecx
$LN326@ChangeWinn:
  00112	3b 83 80 01 00
	00		 cmp	 eax, DWORD PTR [ebx+384]
  00118	0f 85 62 ff ff
	ff		 jne	 $LL39@ChangeWinn
$LN11@ChangeWinn:

; 3474 : 			}
; 3475 : 		}
; 3476 : 	}
; 3477 : 
; 3478 : 	for(int iUSER = OBJ_STARTUSERINDEX; iUSER < OBJMAX;iUSER++)

  0011e	bf 00 dd 49 06	 mov	 edi, 105504000		; 0649dd00H
  00123	c7 45 a0 04 29
	00 00		 mov	 DWORD PTR _iUSER$187587[ebp], 10500 ; 00002904H
  0012a	89 7d 9c	 mov	 DWORD PTR tv1297[ebp], edi
  0012d	eb 03		 jmp	 SHORT $LN5@ChangeWinn
  0012f	90		 npad	 1
$LL332@ChangeWinn:
  00130	33 f6		 xor	 esi, esi
$LN5@ChangeWinn:

; 3479 : 	{
; 3480 : 		if(gObjIsConnected(iUSER) == FALSE)

  00132	8b 55 a0	 mov	 edx, DWORD PTR _iUSER$187587[ebp]
  00135	52		 push	 edx
  00136	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0013b	83 c4 04	 add	 esp, 4
  0013e	85 c0		 test	 eax, eax
  00140	0f 84 46 01 00
	00		 je	 $LN4@ChangeWinn

; 3481 : 			continue;
; 3482 : 
; 3483 : 		char szGuildName[16] = {0};

  00146	33 c0		 xor	 eax, eax
  00148	89 45 e1	 mov	 DWORD PTR _szGuildName$187592[ebp+1], eax
  0014b	89 45 e5	 mov	 DWORD PTR _szGuildName$187592[ebp+5], eax
  0014e	89 45 e9	 mov	 DWORD PTR _szGuildName$187592[ebp+9], eax
  00151	66 89 45 ed	 mov	 WORD PTR _szGuildName$187592[ebp+13], ax
  00155	88 45 ef	 mov	 BYTE PTR _szGuildName$187592[ebp+15], al

; 3484 : 
; 3485 : 		memcpy(szGuildName,gObj[iUSER].GuildName,8);

  00158	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015d	c6 45 e0 00	 mov	 BYTE PTR _szGuildName$187592[ebp], 0
  00161	8b 8c 07 1c 06
	00 00		 mov	 ecx, DWORD PTR [edi+eax+1564]
  00168	89 4d e0	 mov	 DWORD PTR _szGuildName$187592[ebp], ecx
  0016b	8b 94 07 20 06
	00 00		 mov	 edx, DWORD PTR [edi+eax+1568]

; 3486 : 
; 3487 : 		_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsTotalGuildInfo.find(szGuildName);

  00172	8d 45 e0	 lea	 eax, DWORD PTR _szGuildName$187592[ebp]
  00175	89 55 e4	 mov	 DWORD PTR _szGuildName$187592[ebp+4], edx
  00178	c7 45 b8 0f 00
	00 00		 mov	 DWORD PTR $T187594[ebp+20], 15 ; 0000000fH
  0017f	89 75 b4	 mov	 DWORD PTR $T187594[ebp+16], esi
  00182	c6 45 a4 00	 mov	 BYTE PTR $T187594[ebp], 0
  00186	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00189	8d a4 24 00 00
	00 00		 npad	 7
$LL328@ChangeWinn:
  00190	8a 10		 mov	 dl, BYTE PTR [eax]
  00192	40		 inc	 eax
  00193	84 d2		 test	 dl, dl
  00195	75 f9		 jne	 SHORT $LL328@ChangeWinn
  00197	2b c1		 sub	 eax, ecx
  00199	50		 push	 eax
  0019a	8d 45 e0	 lea	 eax, DWORD PTR _szGuildName$187592[ebp]
  0019d	50		 push	 eax
  0019e	8d 4d a4	 lea	 ecx, DWORD PTR $T187594[ebp]
  001a1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  001a6	8d 4d a4	 lea	 ecx, DWORD PTR $T187594[ebp]
  001a9	51		 push	 ecx
  001aa	8d 8b 7c 01 00
	00		 lea	 ecx, DWORD PTR [ebx+380]
  001b0	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  001b3	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lbound
  001b8	8b b3 80 01 00
	00		 mov	 esi, DWORD PTR [ebx+384]
  001be	89 45 90	 mov	 DWORD PTR __Where$226025[ebp], eax
  001c1	3b c6		 cmp	 eax, esi
  001c3	74 58		 je	 SHORT $LN191@ChangeWinn
  001c5	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  001c8	83 c0 0c	 add	 eax, 12			; 0000000cH
  001cb	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  001cf	72 02		 jb	 SHORT $LN233@ChangeWinn
  001d1	8b 00		 mov	 eax, DWORD PTR [eax]
$LN233@ChangeWinn:
  001d3	8b 5d b4	 mov	 ebx, DWORD PTR $T187594[ebp+16]
  001d6	8b d3		 mov	 edx, ebx
  001d8	3b df		 cmp	 ebx, edi
  001da	72 02		 jb	 SHORT $LN240@ChangeWinn
  001dc	8b d7		 mov	 edx, edi
$LN240@ChangeWinn:
  001de	83 7d b8 10	 cmp	 DWORD PTR $T187594[ebp+20], 16 ; 00000010H
  001e2	8b 4d a4	 mov	 ecx, DWORD PTR $T187594[ebp]
  001e5	73 03		 jae	 SHORT $LN251@ChangeWinn
  001e7	8d 4d a4	 lea	 ecx, DWORD PTR $T187594[ebp]
$LN251@ChangeWinn:
  001ea	52		 push	 edx
  001eb	50		 push	 eax
  001ec	51		 push	 ecx
  001ed	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  001f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f5	85 c0		 test	 eax, eax
  001f7	75 12		 jne	 SHORT $LN334@ChangeWinn
  001f9	3b df		 cmp	 ebx, edi
  001fb	73 05		 jae	 SHORT $LN241@ChangeWinn
  001fd	83 c8 ff	 or	 eax, -1
  00200	eb 07		 jmp	 SHORT $LN242@ChangeWinn
$LN241@ChangeWinn:
  00202	33 c0		 xor	 eax, eax
  00204	3b df		 cmp	 ebx, edi
  00206	0f 95 c0	 setne	 al
$LN242@ChangeWinn:
  00209	85 c0		 test	 eax, eax
$LN334@ChangeWinn:
  0020b	8b 5d 98	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  0020e	8b 7d 9c	 mov	 edi, DWORD PTR tv1297[ebp]
  00211	0f 98 c0	 sets	 al
  00214	84 c0		 test	 al, al
  00216	75 05		 jne	 SHORT $LN191@ChangeWinn
  00218	8d 45 90	 lea	 eax, DWORD PTR __Where$226025[ebp]
  0021b	eb 06		 jmp	 SHORT $LN192@ChangeWinn
$LN191@ChangeWinn:
  0021d	89 75 94	 mov	 DWORD PTR $T225953[ebp], esi
  00220	8d 45 94	 lea	 eax, DWORD PTR $T225953[ebp]
$LN192@ChangeWinn:
  00223	83 7d b8 10	 cmp	 DWORD PTR $T187594[ebp+20], 16 ; 00000010H
  00227	8b 30		 mov	 esi, DWORD PTR [eax]
  00229	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00230	72 0c		 jb	 SHORT $LN277@ChangeWinn
  00232	8b 55 a4	 mov	 edx, DWORD PTR $T187594[ebp]
  00235	52		 push	 edx
  00236	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0023b	83 c4 04	 add	 esp, 4
$LN277@ChangeWinn:
  0023e	c7 45 b8 0f 00
	00 00		 mov	 DWORD PTR $T187594[ebp+20], 15 ; 0000000fH
  00245	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T187594[ebp+16], 0
  0024c	c6 45 a4 00	 mov	 BYTE PTR $T187594[ebp], 0

; 3488 : 
; 3489 : 		if(it != m_mapCsTotalGuildInfo.end())

  00250	3b b3 80 01 00
	00		 cmp	 esi, DWORD PTR [ebx+384]
  00256	74 34		 je	 SHORT $LN4@ChangeWinn

; 3490 : 		{
; 3491 : 			gObj[iUSER].m_btCsJoinSide = it->second.m_iCsGuildID;

  00258	8a 46 30	 mov	 al, BYTE PTR [esi+48]
  0025b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00261	88 84 0f 5a 20
	00 00		 mov	 BYTE PTR [edi+ecx+8282], al

; 3492 : 			gObj[iUSER].m_bCsGuildInvolved = !(!it->second.m_bGuildInvolved);

  00268	83 7e 34 00	 cmp	 DWORD PTR [esi+52], 0
  0026c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00271	0f 95 c2	 setne	 dl
  00274	88 94 07 5b 20
	00 00		 mov	 BYTE PTR [edi+eax+8283], dl

; 3493 : 			gObj[iUSER].m_iAccumulatedCrownAccessTime = 0;

  0027b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00281	c7 84 0f 74 20
	00 00 00 00 00
	00		 mov	 DWORD PTR [edi+ecx+8308], 0
$LN4@ChangeWinn:

; 3474 : 			}
; 3475 : 		}
; 3476 : 	}
; 3477 : 
; 3478 : 	for(int iUSER = OBJ_STARTUSERINDEX; iUSER < OBJMAX;iUSER++)

  0028c	ff 45 a0	 inc	 DWORD PTR _iUSER$187587[ebp]
  0028f	81 c7 40 27 00
	00		 add	 edi, 10048		; 00002740H
  00295	89 7d 9c	 mov	 DWORD PTR tv1297[ebp], edi
  00298	81 ff 00 2f e3
	06		 cmp	 edi, 115552000		; 06e32f00H
  0029e	0f 8c 8c fe ff
	ff		 jl	 $LL332@ChangeWinn

; 3494 : 		}
; 3495 : 	}
; 3496 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  002a4	8b 55 8c	 mov	 edx, DWORD PTR tv1056[ebp]
  002a7	52		 push	 edx
  002a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 3497 : 	LogAddTD("[CastleSiege] Castle Winner Guild Change From '%s' To '%s'",szGuildFrom,szGuildTo);

  002ae	8d 45 c0	 lea	 eax, DWORD PTR _szGuildTo$[ebp]
  002b1	50		 push	 eax
  002b2	8d 4d d0	 lea	 ecx, DWORD PTR _szGuildFrom$[ebp]
  002b5	51		 push	 ecx
  002b6	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@MJLELOFK@?$FLCastleSiege?$FN?5Castle?5Winner?5Guil@
  002bb	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3498 : }

  002c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ce	59		 pop	 ecx
  002cf	5f		 pop	 edi
  002d0	5e		 pop	 esi
  002d1	5b		 pop	 ebx
  002d2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d5	33 cd		 xor	 ecx, ebp
  002d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002dc	8b e5		 mov	 esp, ebp
  002de	5d		 pop	 ebp
  002df	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z$0:
  00000	8d 4d a4	 lea	 ecx, DWORD PTR $T187594[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::ChangeWinnerGuild
PUBLIC	_bCsGuildInvolved$GSCopy$
PUBLIC	_btCsJoinSide$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z	; CCastleSiege::GetCsJoinSide
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z$0
__ehfuncinfo$?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z
_TEXT	SEGMENT
_btCsJoinSide$GSCopy$ = -60				; size = 4
_it$ = -56						; size = 4
tv272 = -52						; size = 4
_bCsGuildInvolved$GSCopy$ = -48				; size = 4
$T189345 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpszGuildName$ = 8					; size = 4
_btCsJoinSide$ = 12					; size = 4
_bCsGuildInvolved$ = 16					; size = 4
?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z PROC		; CCastleSiege::GetCsJoinSide, COMDAT
; _this$ = ecx

; 5046 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _btCsJoinSide$[ebp]
  0002e	8b 7d 08	 mov	 edi, DWORD PTR _lpszGuildName$[ebp]
  00031	8b f1		 mov	 esi, ecx
  00033	8b 4d 10	 mov	 ecx, DWORD PTR _bCsGuildInvolved$[ebp]

; 5047 : 	*btCsJoinSide = 0;

  00036	c6 00 00	 mov	 BYTE PTR [eax], 0

; 5073 : 	}
; 5074 : 
; 5075 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  00039	89 45 c4	 mov	 DWORD PTR _btCsJoinSide$GSCopy$[ebp], eax
  0003c	89 4d d0	 mov	 DWORD PTR _bCsGuildInvolved$GSCopy$[ebp], ecx
  0003f	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00042	85 ff		 test	 edi, edi
  00044	0f 84 8a 00 00
	00		 je	 $LN3@GetCsJoinS

; 5048 : 	*bCsGuildInvolved = 0;
; 5049 : 
; 5050 : 	if(lpszGuildName == NULL)
; 5051 : 		return false;
; 5052 : 
; 5053 : 	if(m_bDoRun == FALSE)

  0004a	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0

; 5054 : 		return false;

  0004e	0f 84 80 00 00
	00		 je	 $LN3@GetCsJoinS

; 5055 : 
; 5056 : 	if(m_iCastleSiegeState < CASTLESIEGE_STATE_NOTIFY || m_iCastleSiegeState > CASTLESIEGE_STATE_STARTSIEGE)

  00054	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00057	83 f8 05	 cmp	 eax, 5
  0005a	7c 78		 jl	 SHORT $LN3@GetCsJoinS
  0005c	83 f8 07	 cmp	 eax, 7
  0005f	7f 73		 jg	 SHORT $LN3@GetCsJoinS

; 5058 : 
; 5059 : 	if(m_bCsTotalGuildInfoLoadOK == FALSE)

  00061	83 be a8 01 00
	00 00		 cmp	 DWORD PTR [esi+424], 0

; 5060 : 		return false;

  00068	74 6a		 je	 SHORT $LN3@GetCsJoinS

; 5061 : 
; 5062 : 	int bRETVAL = FALSE;
; 5063 : 
; 5064 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  0006a	8d 86 8c 01 00
	00		 lea	 eax, DWORD PTR [esi+396]
  00070	50		 push	 eax
  00071	33 db		 xor	 ebx, ebx
  00073	89 45 cc	 mov	 DWORD PTR tv272[ebp], eax
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5065 : 
; 5066 : 	_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsTotalGuildInfo.find(lpszGuildName);

  0007c	57		 push	 edi
  0007d	8d 4d d4	 lea	 ecx, DWORD PTR $T189345[ebp]
  00080	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00085	8d 45 d4	 lea	 eax, DWORD PTR $T189345[ebp]
  00088	50		 push	 eax
  00089	8d 4d c8	 lea	 ecx, DWORD PTR _it$[ebp]
  0008c	51		 push	 ecx
  0008d	8d 8e 7c 01 00
	00		 lea	 ecx, DWORD PTR [esi+380]
  00093	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00096	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::find
  0009b	8d 4d d4	 lea	 ecx, DWORD PTR $T189345[ebp]
  0009e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5067 : 
; 5068 : 	if(it != m_mapCsTotalGuildInfo.end())

  000a3	8b 45 c8	 mov	 eax, DWORD PTR _it$[ebp]
  000a6	3b 86 80 01 00
	00		 cmp	 eax, DWORD PTR [esi+384]
  000ac	74 18		 je	 SHORT $LN1@GetCsJoinS

; 5069 : 	{
; 5070 : 		*btCsJoinSide = it->second.m_iCsGuildID;

  000ae	8a 50 30	 mov	 dl, BYTE PTR [eax+48]
  000b1	8b 4d c4	 mov	 ecx, DWORD PTR _btCsJoinSide$GSCopy$[ebp]
  000b4	88 11		 mov	 BYTE PTR [ecx], dl

; 5071 : 		*bCsGuildInvolved = !(!it->second.m_bGuildInvolved);

  000b6	39 58 34	 cmp	 DWORD PTR [eax+52], ebx
  000b9	8b 45 d0	 mov	 eax, DWORD PTR _bCsGuildInvolved$GSCopy$[ebp]
  000bc	0f 95 c2	 setne	 dl
  000bf	88 10		 mov	 BYTE PTR [eax], dl

; 5072 : 		bRETVAL = TRUE;

  000c1	bb 01 00 00 00	 mov	 ebx, 1
$LN1@GetCsJoinS:

; 5073 : 	}
; 5074 : 
; 5075 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  000c6	8b 4d cc	 mov	 ecx, DWORD PTR tv272[ebp]
  000c9	51		 push	 ecx
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 5076 : 
; 5077 : return bRETVAL;

  000d0	8b c3		 mov	 eax, ebx
  000d2	eb 02		 jmp	 SHORT $LN7@GetCsJoinS
$LN3@GetCsJoinS:

; 5057 : 		return false;

  000d4	33 c0		 xor	 eax, eax
$LN7@GetCsJoinS:

; 5078 : }

  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e0	59		 pop	 ecx
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e7	33 cd		 xor	 ecx, ebp
  000e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T189345[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z ENDP		; CCastleSiege::GetCsJoinSide
PUBLIC	?push_back@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXABU_CS_SCHEDULE_DATA@@@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::push_back
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXABU_CS_SCHEDULE_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXABU_CS_SCHEDULE_DATA@@@Z PROC ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 52		 jae	 SHORT $LN4@push_back@2
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 4c		 ja	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0001e	f7 ef		 imul	 edi
  00020	03 d7		 add	 edx, edi
  00022	c1 fa 04	 sar	 edx, 4
  00025	8b fa		 mov	 edi, edx
  00027	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0002a	03 fa		 add	 edi, edx

; 980  : 			if (this->_Mylast == this->_Myend)

  0002c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002f	75 09		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  00031	6a 01		 push	 1
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0003a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003c	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00043	2b c7		 sub	 eax, edi
  00045	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	52		 push	 edx
  0004c	50		 push	 eax
  0004d	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00059	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN4@push_back@2:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00063	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00066	75 09		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  00068	6a 01		 push	 1
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00071	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00074	57		 push	 edi
  00075	52		 push	 edx
  00076	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA,_CS_SCHEDULE_DATA const &>
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00082	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?push_back@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXABU_CS_SCHEDULE_DATA@@@Z ENDP ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXABU_CS_NPC_DATA@@@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXABU_CS_NPC_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXABU_CS_NPC_DATA@@@Z PROC ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 49		 jae	 SHORT $LN4@push_back@3
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 43		 ja	 SHORT $LN4@push_back@3

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f8		 sub	 edi, eax
  00019	b8 09 cb 3d 8d	 mov	 eax, -1925330167	; 8d3dcb09H
  0001e	f7 ef		 imul	 edi
  00020	03 d7		 add	 edx, edi
  00022	c1 fa 06	 sar	 edx, 6
  00025	8b fa		 mov	 edi, edx
  00027	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0002a	03 fa		 add	 edi, edx

; 980  : 			if (this->_Mylast == this->_Myend)

  0002c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002f	75 09		 jne	 SHORT $LN3@push_back@3

; 981  : 				_Reserve(1);

  00031	6a 01		 push	 1
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Reserve
$LN3@push_back@3:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0003a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003d	6b ff 74	 imul	 edi, 116		; 00000074H
  00040	03 3e		 add	 edi, DWORD PTR [esi]
  00042	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00045	57		 push	 edi
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00050	83 46 04 74	 add	 DWORD PTR [esi+4], 116	; 00000074H
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
$LN4@push_back@3:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0005a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0005d	75 09		 jne	 SHORT $LN1@push_back@3

; 991  : 				_Reserve(1);

  0005f	6a 01		 push	 1
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::_Reserve
$LN1@push_back@3:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00068	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0006b	57		 push	 edi
  0006c	52		 push	 edx
  0006d	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA,_CS_NPC_DATA const &>
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00079	83 46 04 74	 add	 DWORD PTR [esi+4], 116	; 00000074H
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?push_back@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXABU_CS_NPC_DATA@@@Z ENDP ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::push_back
_TEXT	ENDS
PUBLIC	??0?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T226518 = -16						; size = 12
$T226418 = -4						; size = 4
??0?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ PROC ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >, COMDAT
; _this$ = ecx

; 106  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 18		 push	 24			; 00000018H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 26		 je	 SHORT $LN25@map
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 14	 mov	 BYTE PTR [ecx+20], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 15	 mov	 BYTE PTR [edx+21], al

; 107  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0

; 106  : 		{	// construct empty map from defaults

$LN25@map:
  00044	8d 45 fc	 lea	 eax, DWORD PTR $T226418[ebp]
  00047	50		 push	 eax
  00048	8d 4d f0	 lea	 ecx, DWORD PTR $T226518[ebp]
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T226418[ebp], 0
  00052	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005c	8d 4d f0	 lea	 ecx, DWORD PTR $T226518[ebp]
  0005f	51		 push	 ecx
  00060	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T226518[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00067	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@map:
$LN48@map:
  0006c	cc		 int	 3
??0?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tidy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T226549 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1865 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1866 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T226549[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase

; 1867 : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 702  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 703  : 		_Tidy();
; 704  : 		assign(_STD forward<_Myt>(_Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00017	50		 push	 eax
  00018	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 705  : 		}

  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$?0AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><char (&)[16],_CS_TOTAL_GUILD_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><char (&)[16],_CS_TOTAL_GUILD_DATA &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Val1$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b c2		 mov	 eax, edx
  0000b	57		 push	 edi
  0000c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00013	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001a	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL48@allocator@2:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL48@allocator@2
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00035	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0003c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003f	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00042	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00045	89 56 24	 mov	 DWORD PTR [esi+36], edx
  00048	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0004b	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  0004e	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00051	5f		 pop	 edi
  00052	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 248  : 		}

  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
??$?0AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><char (&)[16],_CS_TOTAL_GUILD_DATA &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA const &>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z
_TEXT	SEGMENT
$T226908 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Vptr$226916 = 12					; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00026	89 4d 0c	 mov	 DWORD PTR __Vptr$226916[ebp], ecx
  00029	89 4d f0	 mov	 DWORD PTR $T226908[ebp], ecx
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	85 c9		 test	 ecx, ecx
  00035	74 09		 je	 SHORT $LN9@Cons_val@13
  00037	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??0_CS_REG_GUILD_DATA@@QAE@ABU0@@Z
$LN9@Cons_val@13:

; 281  : 	}

  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004a	59		 pop	 ecx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z$0:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Vptr$226916[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T226908[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA const &>
PUBLIC	??$_Dest_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 287  : 	_Alval.destroy(_Pdest);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Pdest$[ebp]
  00007	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0000b	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  00012	72 0b		 jb	 SHORT $LN26@Dest_val
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
$LN26@Dest_val:
  0001f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002d	c6 06 00	 mov	 BYTE PTR [esi], 0
  00030	5e		 pop	 esi

; 288  : 	}

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Dest_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Insert
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@1@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1631 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1632 : 		if (max_size() - 1 <= this->_Mysize)

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	3d 54 55 55 05	 cmp	 eax, 89478484		; 05555554H
  0000e	72 23		 jb	 SHORT $LN17@Insert@3

; 1633 : 			{	// tree would get too big, fail
; 1634 : 			_Dest_val(this->_Alval,
; 1635 : 				_STD addressof(this->_Myval(_Newnode)));

  00010	8b 75 14	 mov	 esi, DWORD PTR __Newnode$[ebp]
  00013	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00016	50		 push	 eax
  00017	83 c1 0d	 add	 ecx, 13			; 0000000dH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >

; 1636 : 
; 1637 : 			this->_Alnod.deallocate(_Newnode, 1);

  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1638 : 
; 1639 : 			_Xlength_error("map/set<T> too long");

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0002e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN377@Insert@3:
$LN17@Insert@3:

; 1640 : 			}
; 1641 : 		++this->_Mysize;
; 1642 : 		_Newnode->_Parent = _Wherenode;

  00033	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00036	40		 inc	 eax
  00037	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0003a	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0003d	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1643 : 
; 1644 : 		if (_Wherenode == this->_Myhead)

  00040	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00043	32 db		 xor	 bl, bl
  00045	3b c2		 cmp	 eax, edx
  00047	75 10		 jne	 SHORT $LN16@Insert@3

; 1645 : 			{	// first node in tree, just set head values
; 1646 : 			_Root() = _Newnode;

  00049	89 7a 04	 mov	 DWORD PTR [edx+4], edi

; 1647 : 			_Lmost() = _Newnode;

  0004c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004f	89 3a		 mov	 DWORD PTR [edx], edi

; 1648 : 			_Rmost() = _Newnode;

  00051	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00054	89 78 08	 mov	 DWORD PTR [eax+8], edi
  00057	eb 20		 jmp	 SHORT $LN11@Insert@3
$LN16@Insert@3:

; 1649 : 			}
; 1650 : 		else if (_Addleft)

  00059	38 5d 0c	 cmp	 BYTE PTR __Addleft$[ebp], bl
  0005c	74 0d		 je	 SHORT $LN14@Insert@3

; 1651 : 			{	// add to left of _Wherenode
; 1652 : 			this->_Left(_Wherenode) = _Newnode;

  0005e	89 38		 mov	 DWORD PTR [eax], edi

; 1653 : 			if (_Wherenode == _Lmost())

  00060	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00063	3b 02		 cmp	 eax, DWORD PTR [edx]
  00065	75 12		 jne	 SHORT $LN11@Insert@3

; 1654 : 				_Lmost() = _Newnode;

  00067	89 3a		 mov	 DWORD PTR [edx], edi

; 1655 : 			}
; 1656 : 		else

  00069	eb 0e		 jmp	 SHORT $LN11@Insert@3
$LN14@Insert@3:

; 1657 : 			{	// add to right of _Wherenode
; 1658 : 			this->_Right(_Wherenode) = _Newnode;

  0006b	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 1659 : 			if (_Wherenode == _Rmost())

  0006e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00071	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00074	75 03		 jne	 SHORT $LN11@Insert@3

; 1660 : 				_Rmost() = _Newnode;

  00076	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN11@Insert@3:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	8b c7		 mov	 eax, edi
  0007e	38 5a 3c	 cmp	 BYTE PTR [edx+60], bl
  00081	0f 85 8f 01 00
	00		 jne	 $LN9@Insert@3
$LL10@Insert@3:

; 1665 : 			if (this->_Parent(_Pnode)
; 1666 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  00087	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0008d	3b 16		 cmp	 edx, DWORD PTR [esi]
  0008f	0f 85 c1 00 00
	00		 jne	 $LN8@Insert@3

; 1667 : 				{	// fixup red-red in left subtree
; 1668 : 				_Wherenode =
; 1669 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  00095	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 1670 : 				if (this->_Color(_Wherenode) == this->_Red)

  00098	38 5e 3c	 cmp	 BYTE PTR [esi+60], bl
  0009b	75 1c		 jne	 SHORT $LN7@Insert@3

; 1671 : 					{	// parent has two red children, blacken both
; 1672 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  0009d	c6 42 3c 01	 mov	 BYTE PTR [edx+60], 1

; 1673 : 					this->_Color(_Wherenode) = this->_Black;

  000a1	c6 46 3c 01	 mov	 BYTE PTR [esi+60], 1

; 1674 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1675 : 						= this->_Red;

  000a5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a8	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000ab	88 5a 3c	 mov	 BYTE PTR [edx+60], bl

; 1676 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000ae	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1677 : 					}
; 1678 : 				else

  000b4	e9 51 01 00 00	 jmp	 $LN316@Insert@3
$LN7@Insert@3:

; 1679 : 					{	// parent has red and black children
; 1680 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  000b9	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000bc	75 3a		 jne	 SHORT $LN111@Insert@3

; 1681 : 						{	// rotate right child to left
; 1682 : 						_Pnode = this->_Parent(_Pnode);

  000be	8b c2		 mov	 eax, edx

; 1683 : 						_Lrotate(_Pnode);

  000c0	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000c3	8b 32		 mov	 esi, DWORD PTR [edx]
  000c5	89 70 08	 mov	 DWORD PTR [eax+8], esi
  000c8	8b 32		 mov	 esi, DWORD PTR [edx]
  000ca	38 5e 3d	 cmp	 BYTE PTR [esi+61], bl
  000cd	75 03		 jne	 SHORT $LN110@Insert@3
  000cf	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN110@Insert@3:
  000d2	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d5	89 72 04	 mov	 DWORD PTR [edx+4], esi
  000d8	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000db	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000de	75 05		 jne	 SHORT $LN109@Insert@3
  000e0	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000e3	eb 0e		 jmp	 SHORT $LN106@Insert@3
$LN109@Insert@3:
  000e5	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000e8	3b 06		 cmp	 eax, DWORD PTR [esi]
  000ea	75 04		 jne	 SHORT $LN107@Insert@3
  000ec	89 16		 mov	 DWORD PTR [esi], edx
  000ee	eb 03		 jmp	 SHORT $LN106@Insert@3
$LN107@Insert@3:
  000f0	89 56 08	 mov	 DWORD PTR [esi+8], edx
$LN106@Insert@3:
  000f3	89 02		 mov	 DWORD PTR [edx], eax
  000f5	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN111@Insert@3:

; 1684 : 						}
; 1685 : 					this->_Color(this->_Parent(_Pnode)) =
; 1686 : 						this->_Black;	// propagate red up

  000f8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000fb	c6 42 3c 01	 mov	 BYTE PTR [edx+60], 1

; 1687 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1688 : 						this->_Red;

  000ff	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00102	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00105	88 5a 3c	 mov	 BYTE PTR [edx+60], bl

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  00108	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0010b	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0010e	8b 32		 mov	 esi, DWORD PTR [edx]
  00110	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00113	89 3a		 mov	 DWORD PTR [edx], edi
  00115	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00118	38 5f 3d	 cmp	 BYTE PTR [edi+61], bl
  0011b	75 03		 jne	 SHORT $LN173@Insert@3
  0011d	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN173@Insert@3:
  00120	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  00123	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00126	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00129	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  0012c	75 0b		 jne	 SHORT $LN172@Insert@3
  0012e	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00131	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00134	e9 cb 00 00 00	 jmp	 $LN376@Insert@3

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN172@Insert@3:
  00139	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  0013c	3b 57 08	 cmp	 edx, DWORD PTR [edi+8]
  0013f	75 0b		 jne	 SHORT $LN170@Insert@3
  00141	89 77 08	 mov	 DWORD PTR [edi+8], esi
  00144	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00147	e9 b8 00 00 00	 jmp	 $LN376@Insert@3

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN170@Insert@3:
  0014c	89 37		 mov	 DWORD PTR [edi], esi
  0014e	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00151	e9 ae 00 00 00	 jmp	 $LN376@Insert@3
$LN8@Insert@3:

; 1693 : 				{	// fixup red-red in right subtree
; 1694 : 				_Wherenode =
; 1695 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

  00156	8b 36		 mov	 esi, DWORD PTR [esi]

; 1696 : 				if (this->_Color(_Wherenode) == this->_Red)

  00158	38 5e 3c	 cmp	 BYTE PTR [esi+60], bl
  0015b	75 1c		 jne	 SHORT $LN3@Insert@3

; 1697 : 					{	// parent has two red children, blacken both
; 1698 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  0015d	c6 42 3c 01	 mov	 BYTE PTR [edx+60], 1

; 1699 : 					this->_Color(_Wherenode) = this->_Black;

  00161	c6 46 3c 01	 mov	 BYTE PTR [esi+60], 1

; 1700 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1701 : 						this->_Red;

  00165	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00168	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0016b	88 5a 3c	 mov	 BYTE PTR [edx+60], bl

; 1702 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  0016e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00171	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1703 : 					}
; 1704 : 				else

  00174	e9 91 00 00 00	 jmp	 $LN316@Insert@3
$LN3@Insert@3:

; 1705 : 					{	// parent has red and black children
; 1706 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00179	3b 02		 cmp	 eax, DWORD PTR [edx]
  0017b	75 3c		 jne	 SHORT $LN253@Insert@3

; 1707 : 						{	// rotate left child to right
; 1708 : 						_Pnode = this->_Parent(_Pnode);

  0017d	8b c2		 mov	 eax, edx

; 1709 : 						_Rrotate(_Pnode);

  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00184	89 30		 mov	 DWORD PTR [eax], esi
  00186	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00189	38 5e 3d	 cmp	 BYTE PTR [esi+61], bl
  0018c	75 03		 jne	 SHORT $LN252@Insert@3
  0018e	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN252@Insert@3:
  00191	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00194	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00197	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0019a	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0019d	75 05		 jne	 SHORT $LN251@Insert@3
  0019f	89 56 04	 mov	 DWORD PTR [esi+4], edx
  001a2	eb 0f		 jmp	 SHORT $LN248@Insert@3
$LN251@Insert@3:
  001a4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  001a7	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  001aa	75 05		 jne	 SHORT $LN249@Insert@3
  001ac	89 56 08	 mov	 DWORD PTR [esi+8], edx
  001af	eb 02		 jmp	 SHORT $LN248@Insert@3
$LN249@Insert@3:
  001b1	89 16		 mov	 DWORD PTR [esi], edx
$LN248@Insert@3:
  001b3	89 42 08	 mov	 DWORD PTR [edx+8], eax
  001b6	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN253@Insert@3:

; 1710 : 						}
; 1711 : 					this->_Color(this->_Parent(_Pnode)) =
; 1712 : 						this->_Black;	// propagate red up

  001b9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001bc	c6 42 3c 01	 mov	 BYTE PTR [edx+60], 1

; 1713 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1714 : 						this->_Red;

  001c0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001c3	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001c6	88 5a 3c	 mov	 BYTE PTR [edx+60], bl

; 1715 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  001c9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001cc	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001cf	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  001d2	8b 3e		 mov	 edi, DWORD PTR [esi]
  001d4	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  001d7	8b 3e		 mov	 edi, DWORD PTR [esi]
  001d9	38 5f 3d	 cmp	 BYTE PTR [edi+61], bl
  001dc	75 03		 jne	 SHORT $LN315@Insert@3
  001de	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN315@Insert@3:
  001e1	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001e4	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  001e7	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  001ea	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  001ed	75 05		 jne	 SHORT $LN314@Insert@3
  001ef	89 77 04	 mov	 DWORD PTR [edi+4], esi
  001f2	eb 0e		 jmp	 SHORT $LN311@Insert@3
$LN314@Insert@3:
  001f4	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001f7	3b 17		 cmp	 edx, DWORD PTR [edi]
  001f9	75 04		 jne	 SHORT $LN312@Insert@3
  001fb	89 37		 mov	 DWORD PTR [edi], esi
  001fd	eb 03		 jmp	 SHORT $LN311@Insert@3
$LN312@Insert@3:
  001ff	89 77 08	 mov	 DWORD PTR [edi+8], esi
$LN311@Insert@3:
  00202	89 16		 mov	 DWORD PTR [esi], edx
$LN376@Insert@3:
  00204	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00207	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN316@Insert@3:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  0020a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0020d	38 5a 3c	 cmp	 BYTE PTR [edx+60], bl
  00210	0f 84 71 fe ff
	ff		 je	 $LL10@Insert@3
$LN9@Insert@3:

; 1716 : 					}
; 1717 : 				}
; 1718 : 
; 1719 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  00216	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00219	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1720 : 		return (iterator(_Newnode, this));

  0021c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0021f	89 38		 mov	 DWORD PTR [eax], edi
  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	c6 41 3c 01	 mov	 BYTE PTR [ecx+60], 1
  00227	5b		 pop	 ebx

; 1721 : 		}

  00228	5d		 pop	 ebp
  00229	c2 10 00	 ret	 16			; 00000010H
$LN375@Insert@3:
?_Insert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@1@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Insert
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@@Z ; std::_Uninitialized_move<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *,std::allocator<_CS_REG_GUILD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@@Z
_TEXT	SEGMENT
__Cat$227942 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@@Z PROC ; std::_Uninitialized_move<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *,std::allocator<_CS_REG_GUILD_DATA> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 45 fc	 mov	 eax, DWORD PTR __Cat$227942[ebp]
  00007	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0000d	50		 push	 eax
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *,std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@@Z ENDP ; std::_Uninitialized_move<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *,std::allocator<_CS_REG_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Median@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00P6AEAAU1@1@Z@Z ; std::_Median<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Median@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
tv293 = -12						; size = 4
tv295 = -8						; size = 4
tv296 = -4						; size = 4
$T228016 = 8						; size = 4
$T227994 = 8						; size = 4
$T227971 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Median@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00P6AEAAU1@1@Z@Z PROC ; std::_Median<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 3695 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3696 : 	if (40 < _Last - _First)

  00003	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000e	2b c6		 sub	 eax, esi
  00010	c1 f8 06	 sar	 eax, 6
  00013	57		 push	 edi

; 3697 : 		{	// median of nine
; 3698 : 		size_t _Step = (_Last - _First + 1) / 8;
; 3699 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  00014	56		 push	 esi
  00015	83 f8 28	 cmp	 eax, 40			; 00000028H
  00018	0f 8e 6b 01 00
	00		 jle	 $LN2@Median@2
  0001e	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  00021	40		 inc	 eax
  00022	99		 cdq
  00023	83 e2 07	 and	 edx, 7
  00026	03 c2		 add	 eax, edx
  00028	c1 f8 03	 sar	 eax, 3
  0002b	8b c8		 mov	 ecx, eax
  0002d	c1 e1 07	 shl	 ecx, 7
  00030	c1 e0 06	 shl	 eax, 6
  00033	8d 1c 30	 lea	 ebx, DWORD PTR [eax+esi]
  00036	89 4d f4	 mov	 DWORD PTR tv293[ebp], ecx
  00039	03 ce		 add	 ecx, esi
  0003b	53		 push	 ebx
  0003c	89 4d 08	 mov	 DWORD PTR $T227971[ebp], ecx
  0003f	89 45 f8	 mov	 DWORD PTR tv295[ebp], eax
  00042	89 5d fc	 mov	 DWORD PTR tv296[ebp], ebx
  00045	ff d7		 call	 edi
  00047	83 c4 08	 add	 esp, 8
  0004a	84 c0		 test	 al, al
  0004c	74 0a		 je	 SHORT $LN10@Median@2
  0004e	56		 push	 esi
  0004f	53		 push	 ebx
  00050	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  00055	83 c4 08	 add	 esp, 8
$LN10@Median@2:
  00058	8b 45 08	 mov	 eax, DWORD PTR $T227971[ebp]
  0005b	53		 push	 ebx
  0005c	50		 push	 eax
  0005d	ff d7		 call	 edi
  0005f	83 c4 08	 add	 esp, 8
  00062	84 c0		 test	 al, al
  00064	74 0d		 je	 SHORT $LN12@Median@2
  00066	8b 4d 08	 mov	 ecx, DWORD PTR $T227971[ebp]
  00069	53		 push	 ebx
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  00070	83 c4 08	 add	 esp, 8
$LN12@Median@2:
  00073	56		 push	 esi
  00074	53		 push	 ebx
  00075	ff d7		 call	 edi
  00077	83 c4 08	 add	 esp, 8
  0007a	84 c0		 test	 al, al
  0007c	74 0a		 je	 SHORT $LN14@Median@2
  0007e	56		 push	 esi
  0007f	53		 push	 ebx
  00080	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  00085	83 c4 08	 add	 esp, 8
$LN14@Median@2:

; 3700 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00088	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  0008b	8b 45 f8	 mov	 eax, DWORD PTR tv295[ebp]
  0008e	8b de		 mov	 ebx, esi
  00090	2b d8		 sub	 ebx, eax
  00092	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  00095	53		 push	 ebx
  00096	56		 push	 esi
  00097	89 55 08	 mov	 DWORD PTR $T227994[ebp], edx
  0009a	ff d7		 call	 edi
  0009c	83 c4 08	 add	 esp, 8
  0009f	84 c0		 test	 al, al
  000a1	74 0a		 je	 SHORT $LN21@Median@2
  000a3	53		 push	 ebx
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  000aa	83 c4 08	 add	 esp, 8
$LN21@Median@2:
  000ad	8b 45 08	 mov	 eax, DWORD PTR $T227994[ebp]
  000b0	56		 push	 esi
  000b1	50		 push	 eax
  000b2	ff d7		 call	 edi
  000b4	83 c4 08	 add	 esp, 8
  000b7	84 c0		 test	 al, al
  000b9	74 0d		 je	 SHORT $LN23@Median@2
  000bb	8b 4d 08	 mov	 ecx, DWORD PTR $T227994[ebp]
  000be	56		 push	 esi
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  000c5	83 c4 08	 add	 esp, 8
$LN23@Median@2:
  000c8	53		 push	 ebx
  000c9	56		 push	 esi
  000ca	ff d7		 call	 edi
  000cc	83 c4 08	 add	 esp, 8
  000cf	84 c0		 test	 al, al
  000d1	74 0a		 je	 SHORT $LN25@Median@2
  000d3	53		 push	 ebx
  000d4	56		 push	 esi
  000d5	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  000da	83 c4 08	 add	 esp, 8
$LN25@Median@2:

; 3701 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  000dd	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  000e0	2b 45 f4	 sub	 eax, DWORD PTR tv293[ebp]
  000e3	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  000e6	2b 5d f8	 sub	 ebx, DWORD PTR tv295[ebp]
  000e9	50		 push	 eax
  000ea	53		 push	 ebx
  000eb	89 45 08	 mov	 DWORD PTR $T228016[ebp], eax
  000ee	ff d7		 call	 edi
  000f0	83 c4 08	 add	 esp, 8
  000f3	84 c0		 test	 al, al
  000f5	74 0d		 je	 SHORT $LN32@Median@2
  000f7	8b 55 08	 mov	 edx, DWORD PTR $T228016[ebp]
  000fa	52		 push	 edx
  000fb	53		 push	 ebx
  000fc	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  00101	83 c4 08	 add	 esp, 8
$LN32@Median@2:
  00104	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00107	53		 push	 ebx
  00108	50		 push	 eax
  00109	ff d7		 call	 edi
  0010b	83 c4 08	 add	 esp, 8
  0010e	84 c0		 test	 al, al
  00110	74 0d		 je	 SHORT $LN34@Median@2
  00112	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00115	53		 push	 ebx
  00116	51		 push	 ecx
  00117	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  0011c	83 c4 08	 add	 esp, 8
$LN34@Median@2:
  0011f	8b 55 08	 mov	 edx, DWORD PTR $T228016[ebp]
  00122	52		 push	 edx
  00123	53		 push	 ebx
  00124	ff d7		 call	 edi
  00126	83 c4 08	 add	 esp, 8
  00129	84 c0		 test	 al, al
  0012b	74 0d		 je	 SHORT $LN36@Median@2
  0012d	8b 45 08	 mov	 eax, DWORD PTR $T228016[ebp]
  00130	50		 push	 eax
  00131	53		 push	 ebx
  00132	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  00137	83 c4 08	 add	 esp, 8
$LN36@Median@2:

; 3702 : 		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

  0013a	8b 4d fc	 mov	 ecx, DWORD PTR tv296[ebp]
  0013d	51		 push	 ecx
  0013e	56		 push	 esi
  0013f	ff d7		 call	 edi
  00141	83 c4 08	 add	 esp, 8
  00144	84 c0		 test	 al, al
  00146	74 0d		 je	 SHORT $LN43@Median@2
  00148	8b 55 fc	 mov	 edx, DWORD PTR tv296[ebp]
  0014b	52		 push	 edx
  0014c	56		 push	 esi
  0014d	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  00152	83 c4 08	 add	 esp, 8
$LN43@Median@2:
  00155	56		 push	 esi
  00156	53		 push	 ebx
  00157	ff d7		 call	 edi
  00159	83 c4 08	 add	 esp, 8
  0015c	84 c0		 test	 al, al
  0015e	74 0a		 je	 SHORT $LN45@Median@2
  00160	56		 push	 esi
  00161	53		 push	 ebx
  00162	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  00167	83 c4 08	 add	 esp, 8
$LN45@Median@2:
  0016a	8b 5d fc	 mov	 ebx, DWORD PTR tv296[ebp]
  0016d	53		 push	 ebx
  0016e	56		 push	 esi
  0016f	ff d7		 call	 edi
  00171	83 c4 08	 add	 esp, 8
  00174	84 c0		 test	 al, al
  00176	74 5b		 je	 SHORT $LN58@Median@2
  00178	53		 push	 ebx
  00179	56		 push	 esi

; 3703 : 		}
; 3704 : 	else
; 3705 : 		_Med3(_First, _Mid, _Last, _Pred);

  0017a	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  0017f	83 c4 08	 add	 esp, 8
  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	5b		 pop	 ebx

; 3706 : 	}

  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
$LN2@Median@2:

; 3703 : 		}
; 3704 : 	else
; 3705 : 		_Med3(_First, _Mid, _Last, _Pred);

  00189	8b 7d 0c	 mov	 edi, DWORD PTR __Mid$[ebp]
  0018c	8b 5d 14	 mov	 ebx, DWORD PTR __Pred$[ebp]
  0018f	57		 push	 edi
  00190	ff d3		 call	 ebx
  00192	83 c4 08	 add	 esp, 8
  00195	84 c0		 test	 al, al
  00197	74 0a		 je	 SHORT $LN54@Median@2
  00199	56		 push	 esi
  0019a	57		 push	 edi
  0019b	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  001a0	83 c4 08	 add	 esp, 8
$LN54@Median@2:
  001a3	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  001a6	57		 push	 edi
  001a7	50		 push	 eax
  001a8	ff d3		 call	 ebx
  001aa	83 c4 08	 add	 esp, 8
  001ad	84 c0		 test	 al, al
  001af	74 0d		 je	 SHORT $LN56@Median@2
  001b1	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  001b4	57		 push	 edi
  001b5	51		 push	 ecx
  001b6	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  001bb	83 c4 08	 add	 esp, 8
$LN56@Median@2:
  001be	56		 push	 esi
  001bf	57		 push	 edi
  001c0	ff d3		 call	 ebx
  001c2	83 c4 08	 add	 esp, 8
  001c5	84 c0		 test	 al, al
  001c7	74 0a		 je	 SHORT $LN58@Median@2
  001c9	56		 push	 esi
  001ca	57		 push	 edi
  001cb	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  001d0	83 c4 08	 add	 esp, 8
$LN58@Median@2:
  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi
  001d5	5b		 pop	 ebx

; 3706 : 	}

  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c3		 ret	 0
??$_Median@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00P6AEAAU1@1@Z@Z ENDP ; std::_Median<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	__Pred$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z ; std::_Make_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z$0
__ehfuncinfo$??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z
_TEXT	SEGMENT
__Pred$GSCopy$ = -88					; size = 4
__Bottom$ = -84						; size = 4
__Val$196845 = -80					; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z PROC ; std::_Make_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 2658 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00031	8b 4d 10	 mov	 ecx, DWORD PTR __Pred$[ebp]

; 2659 : 	_Diff _Bottom = _Last - _First;

  00034	2b c3		 sub	 eax, ebx
  00036	c1 f8 06	 sar	 eax, 6
  00039	89 45 ac	 mov	 DWORD PTR __Bottom$[ebp], eax

; 2660 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	8b f8		 mov	 edi, eax
  00041	d1 ff		 sar	 edi, 1
  00043	89 4d a8	 mov	 DWORD PTR __Pred$GSCopy$[ebp], ecx
  00046	85 ff		 test	 edi, edi
  00048	0f 8e a2 00 00
	00		 jle	 $LN1@Make_heap@2

; 2661 : 		{	// reheap top half, bottom to top
; 2662 : 		--_Hole;

  0004e	8b d7		 mov	 edx, edi
  00050	c1 e2 06	 shl	 edx, 6
  00053	8d 74 1a 0c	 lea	 esi, DWORD PTR [edx+ebx+12]
$LN2@Make_heap@2:

; 2663 : 		_Ty _Val = _Move(*(_First + _Hole));

  00057	8b 46 bc	 mov	 eax, DWORD PTR [esi-68]
  0005a	6a ff		 push	 -1
  0005c	83 ee 40	 sub	 esi, 64			; 00000040H
  0005f	6a 00		 push	 0
  00061	56		 push	 esi
  00062	8d 4d bc	 lea	 ecx, DWORD PTR __Val$196845[ebp+12]
  00065	4f		 dec	 edi
  00066	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR __Val$196845[ebp], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  0006d	89 45 b8	 mov	 DWORD PTR __Val$196845[ebp+8], eax
  00070	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR __Val$196845[ebp+32], 15 ; 0000000fH
  00077	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Val$196845[ebp+28], 0
  0007e	c6 45 bc 00	 mov	 BYTE PTR __Val$196845[ebp+12], 0
  00082	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00087	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0008a	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0008d	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00090	89 4d d8	 mov	 DWORD PTR __Val$196845[ebp+40], ecx
  00093	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00096	89 55 dc	 mov	 DWORD PTR __Val$196845[ebp+44], edx
  00099	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0009c	89 45 e0	 mov	 DWORD PTR __Val$196845[ebp+48], eax
  0009f	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000a2	89 4d e4	 mov	 DWORD PTR __Val$196845[ebp+52], ecx
  000a5	89 55 e8	 mov	 DWORD PTR __Val$196845[ebp+56], edx
  000a8	89 45 ec	 mov	 DWORD PTR __Val$196845[ebp+60], eax

; 2664 : 		_Adjust_heap(_First, _Hole, _Bottom,
; 2665 : 			_Move(_Val), _Pred);

  000ab	8b 4d a8	 mov	 ecx, DWORD PTR __Pred$GSCopy$[ebp]
  000ae	8b 45 ac	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000b1	51		 push	 ecx
  000b2	8d 55 b0	 lea	 edx, DWORD PTR __Val$196845[ebp]
  000b5	52		 push	 edx
  000b6	50		 push	 eax
  000b7	57		 push	 edi
  000b8	53		 push	 ebx
  000b9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000c0	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Adjust_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  000c5	83 c4 14	 add	 esp, 20			; 00000014H

; 2666 : 		}

  000c8	83 7d d0 10	 cmp	 DWORD PTR __Val$196845[ebp+32], 16 ; 00000010H
  000cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d3	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR __Val$196845[ebp], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  000da	72 0c		 jb	 SHORT $LN51@Make_heap@2
  000dc	8b 4d bc	 mov	 ecx, DWORD PTR __Val$196845[ebp+12]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e5	83 c4 04	 add	 esp, 4
$LN51@Make_heap@2:

; 2660 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  000e8	85 ff		 test	 edi, edi
  000ea	0f 8f 67 ff ff
	ff		 jg	 $LN2@Make_heap@2
$LN1@Make_heap@2:

; 2667 : 	}

  000f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00101	33 cd		 xor	 ecx, ebp
  00103	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR __Val$196845[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_CS_REG_GUILD_DATA@@UAE@XZ ; _CS_REG_GUILD_DATA::~_CS_REG_GUILD_DATA
__ehhandler$??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z ENDP ; std::_Make_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
PUBLIC	__First$GSCopy$
PUBLIC	__Pred$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Insertion_sort1<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &),_CS_REG_GUILD_DATA>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z$0
__ehfuncinfo$??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z
_TEXT	SEGMENT
__Cat$228462 = -88					; size = 1
__First$GSCopy$ = -88					; size = 4
__Pred$GSCopy$ = -84					; size = 4
__Val$196889 = -80					; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z PROC ; std::_Insertion_sort1<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &),_CS_REG_GUILD_DATA>, COMDAT

; 3650 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3651 : 	if (_First != _Last)
; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  0002b	8b 45 10	 mov	 eax, DWORD PTR __Pred$[ebp]
  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	89 45 ac	 mov	 DWORD PTR __Pred$GSCopy$[ebp], eax
  00034	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00037	89 7d a8	 mov	 DWORD PTR __First$GSCopy$[ebp], edi
  0003a	3b f8		 cmp	 edi, eax
  0003c	0f 84 95 01 00
	00		 je	 $LN6@Insertion_@2
  00042	8d 5f 40	 lea	 ebx, DWORD PTR [edi+64]
  00045	3b d8		 cmp	 ebx, eax
  00047	0f 84 8a 01 00
	00		 je	 $LN6@Insertion_@2
  0004d	8d 49 00	 npad	 3
$LL7@Insertion_@2:

; 3653 : 			{	// order next element
; 3654 : 			_BidIt _Next1 = _Next;
; 3655 : 			_Ty _Val = _Move(*_Next);

  00050	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00053	6a ff		 push	 -1
  00055	6a 00		 push	 0
  00057	8d 53 0c	 lea	 edx, DWORD PTR [ebx+12]
  0005a	89 4d b8	 mov	 DWORD PTR __Val$196889[ebp+8], ecx
  0005d	52		 push	 edx
  0005e	8d 4d bc	 lea	 ecx, DWORD PTR __Val$196889[ebp+12]
  00061	8b f3		 mov	 esi, ebx
  00063	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR __Val$196889[ebp], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  0006a	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR __Val$196889[ebp+32], 15 ; 0000000fH
  00071	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Val$196889[ebp+28], 0
  00078	c6 45 bc 00	 mov	 BYTE PTR __Val$196889[ebp+12], 0
  0007c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00081	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00084	8b 4b 2c	 mov	 ecx, DWORD PTR [ebx+44]
  00087	8b 53 30	 mov	 edx, DWORD PTR [ebx+48]
  0008a	89 45 d8	 mov	 DWORD PTR __Val$196889[ebp+40], eax
  0008d	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  00090	89 4d dc	 mov	 DWORD PTR __Val$196889[ebp+44], ecx
  00093	8b 4b 38	 mov	 ecx, DWORD PTR [ebx+56]
  00096	89 55 e0	 mov	 DWORD PTR __Val$196889[ebp+48], edx
  00099	8b 53 3c	 mov	 edx, DWORD PTR [ebx+60]
  0009c	89 45 e4	 mov	 DWORD PTR __Val$196889[ebp+52], eax
  0009f	89 4d e8	 mov	 DWORD PTR __Val$196889[ebp+56], ecx
  000a2	89 55 ec	 mov	 DWORD PTR __Val$196889[ebp+60], edx

; 3656 : 
; 3657 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  000a5	8d 45 b0	 lea	 eax, DWORD PTR __Val$196889[ebp]
  000a8	57		 push	 edi
  000a9	50		 push	 eax
  000aa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b1	ff 55 ac	 call	 DWORD PTR __Pred$GSCopy$[ebp]
  000b4	83 c4 08	 add	 esp, 8
  000b7	84 c0		 test	 al, al
  000b9	74 51		 je	 SHORT $LN5@Insertion_@2

; 3658 : 				{	// found new earliest element, move to front
; 3659 : 				_Move_backward(_First, _Next, ++_Next1);

  000bb	8b 4d a8	 mov	 ecx, DWORD PTR __Cat$228462[ebp]
  000be	51		 push	 ecx
  000bf	8d 53 40	 lea	 edx, DWORD PTR [ebx+64]
  000c2	52		 push	 edx
  000c3	53		 push	 ebx
  000c4	57		 push	 edi
  000c5	e8 00 00 00 00	 call	 ??$_Move_backward@PAU_CS_REG_GUILD_DATA@@PAU1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *>

; 3660 : 				*_First = _Move(_Val);

  000ca	8b 45 b8	 mov	 eax, DWORD PTR __Val$196889[ebp+8]
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
  000d0	6a ff		 push	 -1
  000d2	6a 00		 push	 0
  000d4	8d 4d bc	 lea	 ecx, DWORD PTR __Val$196889[ebp+12]
  000d7	51		 push	 ecx
  000d8	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  000db	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000de	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000e3	8b 55 d8	 mov	 edx, DWORD PTR __Val$196889[ebp+40]
  000e6	8b 45 dc	 mov	 eax, DWORD PTR __Val$196889[ebp+44]
  000e9	8b 4d e0	 mov	 ecx, DWORD PTR __Val$196889[ebp+48]
  000ec	89 57 28	 mov	 DWORD PTR [edi+40], edx
  000ef	8b 55 e4	 mov	 edx, DWORD PTR __Val$196889[ebp+52]
  000f2	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  000f5	8b 45 e8	 mov	 eax, DWORD PTR __Val$196889[ebp+56]
  000f8	89 4f 30	 mov	 DWORD PTR [edi+48], ecx
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR __Val$196889[ebp+60]
  000fe	89 57 34	 mov	 DWORD PTR [edi+52], edx
  00101	89 47 38	 mov	 DWORD PTR [edi+56], eax
  00104	89 4f 3c	 mov	 DWORD PTR [edi+60], ecx

; 3661 : 				}
; 3662 : 			else

  00107	e9 9f 00 00 00	 jmp	 $LN65@Insertion_@2
$LN5@Insertion_@2:

; 3651 : 	if (_First != _Last)
; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  0010c	8d 7b c0	 lea	 edi, DWORD PTR [ebx-64]

; 3663 : 				{	// look for insertion point after first
; 3664 : 				for (_BidIt _First1 = _Next1;
; 3665 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3666 : 					_Next1 = _First1)

  0010f	8d 55 b0	 lea	 edx, DWORD PTR __Val$196889[ebp]
  00112	57		 push	 edi
  00113	52		 push	 edx
  00114	ff 55 ac	 call	 DWORD PTR __Pred$GSCopy$[ebp]
  00117	83 c4 08	 add	 esp, 8
  0011a	84 c0		 test	 al, al
  0011c	74 50		 je	 SHORT $LN1@Insertion_@2
  0011e	8b ff		 npad	 2
$LL3@Insertion_@2:

; 3667 : 					*_Next1 = _Move(*_First1);	// move hole down

  00120	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00123	6a ff		 push	 -1
  00125	6a 00		 push	 0
  00127	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0012a	51		 push	 ecx
  0012b	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0012e	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00131	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00136	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  00139	89 56 28	 mov	 DWORD PTR [esi+40], edx
  0013c	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0013f	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00142	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  00145	89 4e 30	 mov	 DWORD PTR [esi+48], ecx
  00148	8b 57 34	 mov	 edx, DWORD PTR [edi+52]
  0014b	89 56 34	 mov	 DWORD PTR [esi+52], edx
  0014e	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00151	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00154	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  00157	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx
  0015a	8b f7		 mov	 esi, edi
  0015c	83 ef 40	 sub	 edi, 64			; 00000040H
  0015f	8d 55 b0	 lea	 edx, DWORD PTR __Val$196889[ebp]
  00162	57		 push	 edi
  00163	52		 push	 edx
  00164	ff 55 ac	 call	 DWORD PTR __Pred$GSCopy$[ebp]
  00167	83 c4 08	 add	 esp, 8
  0016a	84 c0		 test	 al, al
  0016c	75 b2		 jne	 SHORT $LL3@Insertion_@2
$LN1@Insertion_@2:

; 3668 : 				*_Next1 = _Move(_Val);	// insert element in hole

  0016e	8b 45 b8	 mov	 eax, DWORD PTR __Val$196889[ebp+8]
  00171	6a ff		 push	 -1
  00173	6a 00		 push	 0
  00175	8d 4d bc	 lea	 ecx, DWORD PTR __Val$196889[ebp+12]
  00178	51		 push	 ecx
  00179	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0017c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0017f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00184	8b 55 d8	 mov	 edx, DWORD PTR __Val$196889[ebp+40]
  00187	8b 45 dc	 mov	 eax, DWORD PTR __Val$196889[ebp+44]
  0018a	8b 4d e0	 mov	 ecx, DWORD PTR __Val$196889[ebp+48]
  0018d	8b 7d a8	 mov	 edi, DWORD PTR __First$GSCopy$[ebp]
  00190	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00193	8b 55 e4	 mov	 edx, DWORD PTR __Val$196889[ebp+52]
  00196	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00199	8b 45 e8	 mov	 eax, DWORD PTR __Val$196889[ebp+56]
  0019c	89 4e 30	 mov	 DWORD PTR [esi+48], ecx
  0019f	8b 4d ec	 mov	 ecx, DWORD PTR __Val$196889[ebp+60]
  001a2	89 56 34	 mov	 DWORD PTR [esi+52], edx
  001a5	89 46 38	 mov	 DWORD PTR [esi+56], eax
  001a8	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx
$LN65@Insertion_@2:

; 3669 : 				}
; 3670 : 			}

  001ab	83 7d d0 10	 cmp	 DWORD PTR __Val$196889[ebp+32], 16 ; 00000010H
  001af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b6	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR __Val$196889[ebp], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  001bd	72 0c		 jb	 SHORT $LN83@Insertion_@2
  001bf	8b 55 bc	 mov	 edx, DWORD PTR __Val$196889[ebp+12]
  001c2	52		 push	 edx
  001c3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c8	83 c4 04	 add	 esp, 4
$LN83@Insertion_@2:

; 3651 : 	if (_First != _Last)
; 3652 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  001cb	83 c3 40	 add	 ebx, 64			; 00000040H
  001ce	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  001d1	0f 85 79 fe ff
	ff		 jne	 $LL7@Insertion_@2
$LN6@Insertion_@2:

; 3671 : 	}

  001d7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001da	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e1	59		 pop	 ecx
  001e2	5f		 pop	 edi
  001e3	5e		 pop	 esi
  001e4	5b		 pop	 ebx
  001e5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e8	33 cd		 xor	 ecx, ebp
  001ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR __Val$196889[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_CS_REG_GUILD_DATA@@UAE@XZ ; _CS_REG_GUILD_DATA::~_CS_REG_GUILD_DATA
__ehhandler$??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z ENDP ; std::_Insertion_sort1<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &),_CS_REG_GUILD_DATA>
PUBLIC	__Pred$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Pop_heap_0<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z$0
__ehfuncinfo$??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z
_TEXT	SEGMENT
__Pred$GSCopy$ = -84					; size = 4
__Val$ = -80						; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z PROC ; std::_Pop_heap_0<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 2601 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]

; 2602 : 	_Ty _Val = _Move(*(_Last - 1));

  0002e	8b 4e c8	 mov	 ecx, DWORD PTR [esi-56]
  00031	8b 45 10	 mov	 eax, DWORD PTR __Pred$[ebp]
  00034	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00037	6a ff		 push	 -1
  00039	6a 00		 push	 0
  0003b	89 4d b8	 mov	 DWORD PTR __Val$[ebp+8], ecx
  0003e	8d 5e cc	 lea	 ebx, DWORD PTR [esi-52]
  00041	53		 push	 ebx
  00042	8d 4d bc	 lea	 ecx, DWORD PTR __Val$[ebp+12]
  00045	89 45 ac	 mov	 DWORD PTR __Pred$GSCopy$[ebp], eax
  00048	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR __Val$[ebp], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  0004f	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR __Val$[ebp+32], 15 ; 0000000fH
  00056	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Val$[ebp+28], 0
  0005d	c6 45 bc 00	 mov	 BYTE PTR __Val$[ebp+12], 0
  00061	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00066	8b 56 e8	 mov	 edx, DWORD PTR [esi-24]
  00069	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
  0006c	8b 4e f0	 mov	 ecx, DWORD PTR [esi-16]
  0006f	89 55 d8	 mov	 DWORD PTR __Val$[ebp+40], edx
  00072	8b 56 f4	 mov	 edx, DWORD PTR [esi-12]
  00075	89 45 dc	 mov	 DWORD PTR __Val$[ebp+44], eax
  00078	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  0007b	89 4d e0	 mov	 DWORD PTR __Val$[ebp+48], ecx
  0007e	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00081	89 55 e4	 mov	 DWORD PTR __Val$[ebp+52], edx
  00084	89 45 e8	 mov	 DWORD PTR __Val$[ebp+56], eax
  00087	89 4d ec	 mov	 DWORD PTR __Val$[ebp+60], ecx

; 2603 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2604 : 		_Move(_Val), _Pred, _Dist_type(_First));

  0008a	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0008d	6a ff		 push	 -1
  0008f	6a 00		 push	 0
  00091	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00094	50		 push	 eax
  00095	8b cb		 mov	 ecx, ebx
  00097	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009e	89 56 c8	 mov	 DWORD PTR [esi-56], edx
  000a1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000a6	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  000a9	89 4e e8	 mov	 DWORD PTR [esi-24], ecx
  000ac	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  000af	89 56 ec	 mov	 DWORD PTR [esi-20], edx
  000b2	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000b5	89 46 f0	 mov	 DWORD PTR [esi-16], eax
  000b8	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  000bb	89 4e f4	 mov	 DWORD PTR [esi-12], ecx
  000be	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
  000c1	8b 4d ac	 mov	 ecx, DWORD PTR __Pred$GSCopy$[ebp]
  000c4	89 56 f8	 mov	 DWORD PTR [esi-8], edx
  000c7	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  000ca	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  000cd	51		 push	 ecx
  000ce	2b f7		 sub	 esi, edi
  000d0	8d 55 b0	 lea	 edx, DWORD PTR __Val$[ebp]
  000d3	52		 push	 edx
  000d4	83 ee 40	 sub	 esi, 64			; 00000040H
  000d7	c1 fe 06	 sar	 esi, 6
  000da	56		 push	 esi
  000db	6a 00		 push	 0
  000dd	57		 push	 edi
  000de	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@HH$$QAU1@P6AEAAU1@2@Z@Z ; std::_Adjust_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  000e3	83 c4 14	 add	 esp, 20			; 00000014H

; 2605 : 	}

  000e6	83 7d d0 10	 cmp	 DWORD PTR __Val$[ebp+32], 16 ; 00000010H
  000ea	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR __Val$[ebp], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  000f1	72 0c		 jb	 SHORT $LN63@Pop_heap_0
  000f3	8b 45 bc	 mov	 eax, DWORD PTR __Val$[ebp+12]
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000fc	83 c4 04	 add	 esp, 4
$LN63@Pop_heap_0:
  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00110	33 cd		 xor	 ecx, ebp
  00112	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR __Val$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_CS_REG_GUILD_DATA@@UAE@XZ ; _CS_REG_GUILD_DATA::~_CS_REG_GUILD_DATA
__ehhandler$??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z ENDP ; std::_Pop_heap_0<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
PUBLIC	??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAU_CS_TOTAL_GUILD_DATA@@@Z ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAU_CS_TOTAL_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAU_CS_TOTAL_GUILD_DATA@@@Z PROC ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00017	50		 push	 eax
  00018	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00023	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00030	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00033	89 56 24	 mov	 DWORD PTR [esi+36], edx
  00036	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00039	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  0003c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0003f	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 164  : 		}

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$_Pair_base@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAU_CS_TOTAL_GUILD_DATA@@@Z ENDP ; std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>
_TEXT	ENDS
PUBLIC	??0_CS_REG_GUILD_DATA@@QAE@XZ			; _CS_REG_GUILD_DATA::_CS_REG_GUILD_DATA
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0_CS_REG_GUILD_DATA@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_CS_REG_GUILD_DATA@@QAE@XZ$0
__ehfuncinfo$??0_CS_REG_GUILD_DATA@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_CS_REG_GUILD_DATA@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	ENDS
;	COMDAT ??0_CS_REG_GUILD_DATA@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0_CS_REG_GUILD_DATA@@QAE@XZ PROC			; _CS_REG_GUILD_DATA::_CS_REG_GUILD_DATA, COMDAT
; _this$ = ecx

; 166  : 	_CS_REG_GUILD_DATA()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_CS_REG_GUILD_DATA@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  00033	33 db		 xor	 ebx, ebx
  00035	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  0003c	89 59 10	 mov	 DWORD PTR [ecx+16], ebx
  0003f	88 19		 mov	 BYTE PTR [ecx], bl

; 167  : 	{
; 168  : 		Clear();

  00041	53		 push	 ebx
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00047	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0004d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00052	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00055	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00058	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0005b	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  0005e	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  00061	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx

; 169  : 	};

  00064	8b c6		 mov	 eax, esi
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_CS_REG_GUILD_DATA@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_CS_REG_GUILD_DATA@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_CS_REG_GUILD_DATA@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_CS_REG_GUILD_DATA@@QAE@XZ ENDP			; _CS_REG_GUILD_DATA::_CS_REG_GUILD_DATA
PUBLIC	??_C@_0DA@GPPHEKGF@?$FLCastleSiege?$FN?5file?5load?5error?5?9?5@ ; `string'
PUBLIC	??_C@_0EM@OAPODDDJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EB@LPIBNLKP@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EB@BJPGNABL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EE@GGOHKPB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EH@EJKAJKHN@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EH@KEGDECC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0ED@GBNKLFMD@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EE@KFKCLICN@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EC@HADLEKAG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0DP@MLFJONJF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EF@IHJKNGKK@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0FN@EDNKEGKL@NUM?3?$CFd?0?5IDX?3?$CFd?0?5DBSAVE?3?$CFs?0?5SIDE?3@ ; `string'
PUBLIC	??_C@_02NFLNFON@NO?$AA@				; `string'
PUBLIC	??_C@_03IPHJCBHH@YES?$AA@			; `string'
PUBLIC	??_C@_0CI@BMKPKBCC@STT?3?$CFd?0?5DAY?3?$CFd?0?5HOUR?3?$CFd?0?5MIN?3?$CFd?0@ ; `string'
PUBLIC	??_C@_0FB@HOOHBME@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_0EC@MGMKEFNG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CN@EHOKDKME@?$FLCastleSiege?$FN?5file?5load?5error?5?9?5@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0FP@FALLJKGC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LoadData@CCastleSiege@@QAEHPAD@Z		; CCastleSiege::LoadData
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_0DA@GPPHEKGF@?$FLCastleSiege?$FN?5file?5load?5error?5?9?5@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0DA@GPPHEKGF@?$FLCastleSiege?$FN?5file?5load?5error?5?9?5@ DB '[Cas'
	DB	'tleSiege] file load error - File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@OAPODDDJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EM@OAPODDDJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Same Npc Key Exist : NUM:%d'
	DB	'-IDX:%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@LPIBNLKP@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EB@LPIBNLKP@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Data Fail (iNPC_SY < 0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@BJPGNABL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EB@BJPGNABL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Data Fail (iNPC_SX < 0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GGOHKPB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EE@GGOHKPB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[CastleS'
	DB	'iege] CCastleSiege::LoadData() - Data Fail (iNPC_MAXHP < 0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@EJKAJKHN@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EH@EJKAJKHN@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Data Fail (iNPC_RG_LEVEL < '
	DB	'0)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@KEGDECC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EH@KEGDECC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[CastleS'
	DB	'iege] CCastleSiege::LoadData() - Data Fail (iNPC_DF_LEVEL < 0'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@GBNKLFMD@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0ED@GBNKLFMD@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Data Fail (iNPC_SIDE < 0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@KFKCLICN@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EE@KFKCLICN@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Data Fail (iNPC_INDEX < 0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@HADLEKAG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EC@HADLEKAG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Data Fail (iNPC_NUM < 0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@MLFJONJF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0DP@MLFJONJF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Same State Exist : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@IHJKNGKK@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EF@IHJKNGKK@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - iCastleSiegeCycle <= 0 : %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@EDNKEGKL@NUM?3?$CFd?0?5IDX?3?$CFd?0?5DBSAVE?3?$CFs?0?5SIDE?3@
CONST	SEGMENT
??_C@_0FN@EDNKEGKL@NUM?3?$CFd?0?5IDX?3?$CFd?0?5DBSAVE?3?$CFs?0?5SIDE?3@ DB 'N'
	DB	'UM:%d, IDX:%d, DBSAVE:%s, SIDE:%d, DFLEVEL:%d, RGLEVEL:%d, MX'
	DB	'HP:%d, (%d,%d)-(%d,%d), DIR:%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NFLNFON@NO?$AA@
CONST	SEGMENT
??_C@_02NFLNFON@NO?$AA@ DB 'NO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IPHJCBHH@YES?$AA@
CONST	SEGMENT
??_C@_03IPHJCBHH@YES?$AA@ DB 'YES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BMKPKBCC@STT?3?$CFd?0?5DAY?3?$CFd?0?5HOUR?3?$CFd?0?5MIN?3?$CFd?0@
CONST	SEGMENT
??_C@_0CI@BMKPKBCC@STT?3?$CFd?0?5DAY?3?$CFd?0?5HOUR?3?$CFd?0?5MIN?3?$CFd?0@ DB 'S'
	DB	'TT:%d, DAY:%d, HOUR:%d, MIN:%d, GAP:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@HOOHBME@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0FB@HOOHBME@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[CastleS'
	DB	'iege] CCastleSiege::LoadData() - Date Order is wrong (sort fa'
	DB	'il) : %d-%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@MGMKEFNG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0EC@MGMKEFNG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - Date Order is wrong : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EHOKDKME@?$FLCastleSiege?$FN?5file?5load?5error?5?9?5@
CONST	SEGMENT
??_C@_0CN@EHOKDKME@?$FLCastleSiege?$FN?5file?5load?5error?5?9?5@ DB '[Cas'
	DB	'tleSiege] file load error - fopen() : %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FP@FALLJKGC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
CONST	SEGMENT
??_C@_0FP@FALLJKGC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@ DB '[Castle'
	DB	'Siege] CCastleSiege::LoadData() - m_iCastleDataLoadState != C'
	DB	'ASTLESIEGE_DATALOAD_1 (%d)', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadData@CCastleSiege@@QAEHPAD@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?LoadData@CCastleSiege@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadData@CCastleSiege@@QAEHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$9
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$11
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?LoadData@CCastleSiege@@QAEHPAD@Z
_TEXT	SEGMENT
$T229192 = -612						; size = 8
_pScheduleDataInsert$184379 = -604			; size = 28
_stTEMP$185350 = -576					; size = 116
_pNpcDataInsert$185075 = -576				; size = 116
_pScheduleData$184362 = -460				; size = 28
$T229189 = -432						; size = 8
_iNPC_DX$184391 = -424					; size = 4
_it$184581 = -420					; size = 4
_uNpcKey$184431 = -416					; size = 4
_iNPC_DBSAVE$184385 = -412				; size = 4
_iNPC_DY$184392 = -408					; size = 4
tv2240 = -404						; size = 4
_iNPC_SX$184389 = -400					; size = 4
_iCountDfValue_Statue$ = -396				; size = 4
_iNPC_SY$184390 = -392					; size = 4
_iCountDfValue_Gate$ = -388				; size = 4
_iCountDfUpgrade_Gate$ = -384				; size = 4
_iCountHpUpgrade_Statue$ = -380				; size = 4
_iCountHpUpgrade_Gate$ = -376				; size = 4
_iCountRgUpgrade_Statue$ = -372				; size = 4
tv3065 = -368						; size = 4
tv3047 = -364						; size = 4
$T230452 = -360						; size = 4
$T229463 = -360						; size = 4
_iNPC_DIR$184393 = -360					; size = 4
tv3053 = -356						; size = 4
_iCountDfUpgrade_Statue$ = -352				; size = 4
tv3071 = -348						; size = 4
tv3059 = -344						; size = 4
_mpNpcDataCheck$ = -340					; size = 16
_vtNpcData$ = -324					; size = 16
_iNPC_SIDE$184384 = -308				; size = 4
_iSTATE$184199 = -308					; size = 4
_vtScheduleData$ = -304					; size = 16
_iNPC_INDEX$184383 = -288				; size = 4
_iSTART_MIN$184202 = -288				; size = 4
_iNPC_NUM$184382 = -284					; size = 4
_iSTART_HOUR$184201 = -284				; size = 4
_type$ = -280						; size = 4
_this$GSCopy$ = -276					; size = 4
_szTEMP$185351 = -272					; size = 256
_szTEMP$185337 = -272					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpszFileName$ = 8					; size = 4
?LoadData@CCastleSiege@@QAEHPAD@Z PROC			; CCastleSiege::LoadData, COMDAT
; _this$ = ecx

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@CCastleSiege@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 58 02 00
	00		 sub	 esp, 600		; 00000258H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  00031	8b f9		 mov	 edi, ecx

; 420  : 								}
; 421  : 							}
; 422  : 							else
; 423  : 							{
; 424  : 								int iSTATE1_TIME = pScheduleData.m_iADD_DAY * 24 * 60 + pScheduleData.m_iADD_HOUR * 60 + pScheduleData.m_iADD_MIN;

  00033	89 bd ec fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00039	85 f6		 test	 esi, esi
  0003b	0f 84 95 10 00
	00		 je	 $LN85@LoadData

; 301  : using namespace std;
; 302  : 	if(lpszFileName == NULL || strcmp(lpszFileName,"")==NULL)

  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00046	8b c6		 mov	 eax, esi
$LL586@LoadData:
  00048	8a 10		 mov	 dl, BYTE PTR [eax]
  0004a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0004c	75 1a		 jne	 SHORT $LN587@LoadData
  0004e	84 d2		 test	 dl, dl
  00050	74 12		 je	 SHORT $LN588@LoadData
  00052	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00055	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00058	75 0e		 jne	 SHORT $LN587@LoadData
  0005a	83 c0 02	 add	 eax, 2
  0005d	83 c1 02	 add	 ecx, 2
  00060	84 d2		 test	 dl, dl
  00062	75 e4		 jne	 SHORT $LL586@LoadData
$LN588@LoadData:
  00064	33 c0		 xor	 eax, eax
  00066	eb 05		 jmp	 SHORT $LN589@LoadData
$LN587@LoadData:
  00068	1b c0		 sbb	 eax, eax
  0006a	83 d8 ff	 sbb	 eax, -1
$LN589@LoadData:
  0006d	85 c0		 test	 eax, eax
  0006f	0f 84 61 10 00
	00		 je	 $LN85@LoadData

; 306  : 	}
; 307  : 
; 308  : 	if(m_iCastleDataLoadState != 1)

  00075	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00078	83 f8 01	 cmp	 eax, 1
  0007b	74 16		 je	 SHORT $LN84@LoadData

; 309  : 	{
; 310  : 		LogAddC(2,"[CastleSiege] CCastleSiege::LoadData() - m_iCastleDataLoadState != CASTLESIEGE_DATALOAD_1 (%d)",
; 311  : 			m_iCastleDataLoadState);

  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0FP@FALLJKGC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  00083	6a 02		 push	 2
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 312  : 		return false;

  0008e	e9 50 10 00 00	 jmp	 $LN638@LoadData
$LN84@LoadData:

; 313  : 	}
; 314  : 
; 315  : 	SMDFile = fopen(lpszFileName,"r");

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00098	56		 push	 esi
  00099	e8 00 00 00 00	 call	 _fopen
  0009e	83 c4 08	 add	 esp, 8
  000a1	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 316  : 
; 317  : 	if(SMDFile == NULL)

  000a6	85 c0		 test	 eax, eax
  000a8	75 13		 jne	 SHORT $LN83@LoadData

; 318  : 	{
; 319  : 		MsgBox("[CastleSiege] file load error - fopen() : %s",
; 320  : 			lpszFileName);

  000aa	56		 push	 esi
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@EHOKDKME@?$FLCastleSiege?$FN?5file?5load?5error?5?9?5@
  000b0	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000b5	83 c4 08	 add	 esp, 8

; 321  : 		return false;

  000b8	e9 26 10 00 00	 jmp	 $LN638@LoadData
$LN83@LoadData:

; 322  : 	}
; 323  : 
; 324  : 	int type = -1;
; 325  : 	enum SMDToken Token;
; 326  : 
; 327  : 	vector<_CS_SCHEDULE_DATA> vtScheduleData;

  000bd	33 f6		 xor	 esi, esi
  000bf	89 b5 d0 fe ff
	ff		 mov	 DWORD PTR _vtScheduleData$[ebp], esi
  000c5	89 b5 d4 fe ff
	ff		 mov	 DWORD PTR _vtScheduleData$[ebp+4], esi
  000cb	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR _vtScheduleData$[ebp+8], esi
  000d1	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi

; 328  : 	vector<_CS_NPC_DATA> vtNpcData;

  000d4	89 b5 bc fe ff
	ff		 mov	 DWORD PTR _vtNpcData$[ebp], esi
  000da	89 b5 c0 fe ff
	ff		 mov	 DWORD PTR _vtNpcData$[ebp+4], esi
  000e0	89 b5 c4 fe ff
	ff		 mov	 DWORD PTR _vtNpcData$[ebp+8], esi

; 329  : 	map<unsigned int,int> mpNpcDataCheck;

  000e6	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  000ec	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f0	e8 00 00 00 00	 call	 ??0?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >

; 330  : 
; 331  : 	int iCountDfUpgrade_Gate = 0;
; 332  : 	int iCountDfUpgrade_Statue = 0;
; 333  : 	int iCountHpUpgrade_Gate = 0;
; 334  : 	int iCountHpUpgrade_Statue = 0;
; 335  : 	int iCountRgUpgrade_Statue = 0;
; 336  : 	int iCountDfValue_Gate = 0;

  000f5	33 c0		 xor	 eax, eax
  000f7	33 db		 xor	 ebx, ebx
  000f9	33 ff		 xor	 edi, edi
  000fb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ff	89 b5 80 fe ff
	ff		 mov	 DWORD PTR _iCountDfUpgrade_Gate$[ebp], esi
  00105	89 b5 a0 fe ff
	ff		 mov	 DWORD PTR _iCountDfUpgrade_Statue$[ebp], esi
  0010b	89 9d 88 fe ff
	ff		 mov	 DWORD PTR _iCountHpUpgrade_Gate$[ebp], ebx
  00111	89 bd 84 fe ff
	ff		 mov	 DWORD PTR _iCountHpUpgrade_Statue$[ebp], edi
  00117	89 b5 8c fe ff
	ff		 mov	 DWORD PTR _iCountRgUpgrade_Statue$[ebp], esi
  0011d	89 85 7c fe ff
	ff		 mov	 DWORD PTR _iCountDfValue_Gate$[ebp], eax

; 337  : 	int iCountDfValue_Statue = 0;

  00123	89 85 74 fe ff
	ff		 mov	 DWORD PTR _iCountDfValue_Statue$[ebp], eax

; 338  : 
; 339  : 	while( true )
; 340  : 	{
; 341  : 		Token = GetToken();

  00129	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 342  : 
; 343  : 		if(Token == END)

  0012e	83 f8 02	 cmp	 eax, 2
  00131	0f 84 0f 0a 00
	00		 je	 $LN577@LoadData
  00137	eb 19		 jmp	 SHORT $LN82@LoadData
  00139	8d a4 24 00 00
	00 00		 npad	 7
$LL633@LoadData:
  00140	8b bd 84 fe ff
	ff		 mov	 edi, DWORD PTR _iCountHpUpgrade_Statue$[ebp]
  00146	8b 9d 88 fe ff
	ff		 mov	 ebx, DWORD PTR _iCountHpUpgrade_Gate$[ebp]
  0014c	8b b5 8c fe ff
	ff		 mov	 esi, DWORD PTR _iCountRgUpgrade_Statue$[ebp]
$LN82@LoadData:

; 344  : 		{
; 345  : 			break;
; 346  : 		}
; 347  : 
; 348  : 		type = (int)TokenNumber;

  00152	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00158	e8 00 00 00 00	 call	 __ftol2_sse
  0015d	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _type$[ebp], eax
  00163	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00166	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR ?g_iNpcUpRgLevel_CSTATUE@@3PAY02HA[eax*4+4]
  0016d	8d 14 7f	 lea	 edx, DWORD PTR [edi+edi*2]
  00170	8d 04 95 04 00
	00 00		 lea	 eax, DWORD PTR ?g_iNpcUpMaxHP_CSTATUE@@3PAY02HA[edx*4+4]
  00177	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv3053[ebp], eax
  0017d	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _iCountDfUpgrade_Statue$[ebp]
  00183	89 8d 94 fe ff
	ff		 mov	 DWORD PTR tv3047[ebp], ecx
  00189	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  0018c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0018f	8d 14 8d 04 00
	00 00		 lea	 edx, DWORD PTR ?g_iNpcUpMaxHP_CGATE@@3PAY02HA[ecx*4+4]
  00196	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR ?g_iNpcUpDfLevel_CSTATUE@@3PAY02HA[eax*4+4]
  0019d	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _iCountDfUpgrade_Gate$[ebp]
  001a3	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv3059[ebp], edx
  001a9	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  001ac	8d 04 95 04 00
	00 00		 lea	 eax, DWORD PTR ?g_iNpcUpDfLevel_CGATE@@3PAY02HA[edx*4+4]
  001b3	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv3071[ebp], eax
$LN640@LoadData:
  001b9	89 8d 90 fe ff
	ff		 mov	 DWORD PTR tv3065[ebp], ecx
$LN639@LoadData:
  001bf	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _type$[ebp]
$LL79@LoadData:

; 349  : 
; 350  : 		while ( true )
; 351  : 		{
; 352  : 			if(type == 0)

  001c5	85 f6		 test	 esi, esi
  001c7	75 5a		 jne	 SHORT $LN77@LoadData

; 353  : 			{
; 354  : 				Token = GetToken();

  001c9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 355  : 				if(strcmp("end",TokenString)==NULL)

  001ce	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  001d3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL590@LoadData:
  001d8	8a 10		 mov	 dl, BYTE PTR [eax]
  001da	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001dc	75 1a		 jne	 SHORT $LN591@LoadData
  001de	84 d2		 test	 dl, dl
  001e0	74 12		 je	 SHORT $LN592@LoadData
  001e2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001e5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001e8	75 0e		 jne	 SHORT $LN591@LoadData
  001ea	83 c0 02	 add	 eax, 2
  001ed	83 c1 02	 add	 ecx, 2
  001f0	84 d2		 test	 dl, dl
  001f2	75 e4		 jne	 SHORT $LL590@LoadData
$LN592@LoadData:
  001f4	33 c0		 xor	 eax, eax
  001f6	eb 05		 jmp	 SHORT $LN593@LoadData
$LN591@LoadData:
  001f8	1b c0		 sbb	 eax, eax
  001fa	83 d8 ff	 sbb	 eax, -1
$LN593@LoadData:
  001fd	85 c0		 test	 eax, eax
  001ff	0f 84 33 09 00
	00		 je	 $LN550@LoadData

; 356  : 				{
; 357  : 					break;
; 358  : 				}
; 359  : 
; 360  : 				int iCastleSiegeCycle = (int)TokenNumber;

  00205	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0020b	e8 00 00 00 00	 call	 __ftol2_sse

; 361  : 
; 362  : 				if(iCastleSiegeCycle <= 0)

  00210	85 c0		 test	 eax, eax
  00212	0f 8e 02 0d 00
	00		 jle	 $LN551@LoadData

; 367  : 				}
; 368  : 				else
; 369  : 				{
; 370  : 					m_iCastleSiegeCycle = iCastleSiegeCycle;

  00218	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0021e	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 371  : 				}

  00221	eb a2		 jmp	 SHORT $LL79@LoadData
$LN77@LoadData:

; 372  : 			}
; 373  : 			else if(type == 1)

  00223	83 fe 01	 cmp	 esi, 1
  00226	0f 85 ec 01 00
	00		 jne	 $LN72@LoadData

; 374  : 			{
; 375  : 				int iSTATE = -1;
; 376  : 				int iSTART_DAY = -1;
; 377  : 				int iSTART_HOUR = -1;
; 378  : 				int iSTART_MIN = -1;
; 379  : 
; 380  : 				Token = GetToken();

  0022c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 381  : 				if(strcmp("end",TokenString)==NULL)

  00231	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00236	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0023b	eb 03 8d 49 00	 npad	 5
$LL594@LoadData:
  00240	8a 10		 mov	 dl, BYTE PTR [eax]
  00242	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00244	75 1a		 jne	 SHORT $LN595@LoadData
  00246	84 d2		 test	 dl, dl
  00248	74 12		 je	 SHORT $LN596@LoadData
  0024a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0024d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00250	75 0e		 jne	 SHORT $LN595@LoadData
  00252	83 c0 02	 add	 eax, 2
  00255	83 c1 02	 add	 ecx, 2
  00258	84 d2		 test	 dl, dl
  0025a	75 e4		 jne	 SHORT $LL594@LoadData
$LN596@LoadData:
  0025c	33 c0		 xor	 eax, eax
  0025e	eb 05		 jmp	 SHORT $LN597@LoadData
$LN595@LoadData:
  00260	1b c0		 sbb	 eax, eax
  00262	83 d8 ff	 sbb	 eax, -1
$LN597@LoadData:
  00265	85 c0		 test	 eax, eax
  00267	0f 84 cb 08 00
	00		 je	 $LN550@LoadData

; 382  : 				{
; 383  : 					break;
; 384  : 				}
; 385  : 
; 386  : 				iSTATE = (int)TokenNumber;

  0026d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00273	e8 00 00 00 00	 call	 __ftol2_sse
  00278	8b d8		 mov	 ebx, eax
  0027a	89 9d cc fe ff
	ff		 mov	 DWORD PTR _iSTATE$184199[ebp], ebx

; 387  : 				Token = GetToken();

  00280	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 388  : 				iSTART_DAY = (int)TokenNumber;

  00285	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0028b	e8 00 00 00 00	 call	 __ftol2_sse
  00290	8b f0		 mov	 esi, eax

; 389  : 				Token = GetToken();

  00292	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 390  : 				iSTART_HOUR = (int)TokenNumber;

  00297	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029d	e8 00 00 00 00	 call	 __ftol2_sse
  002a2	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _iSTART_HOUR$184201[ebp], eax

; 391  : 				Token = GetToken();

  002a8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 392  : 				iSTART_MIN = (int)TokenNumber;

  002ad	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b3	e8 00 00 00 00	 call	 __ftol2_sse

; 393  : 
; 394  : 				if(!vtScheduleData.empty())

  002b8	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _vtScheduleData$[ebp+4]
  002be	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _iSTART_MIN$184202[ebp], eax
  002c4	39 95 d0 fe ff
	ff		 cmp	 DWORD PTR _vtScheduleData$[ebp], edx
  002ca	0f 84 e7 00 00
	00		 je	 $LN67@LoadData

; 395  : 				{
; 396  : 					vector<_CS_SCHEDULE_DATA>::iterator it;
; 397  : 					for( it = vtScheduleData.begin(); it != vtScheduleData.end(); it++)

  002d0	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _vtScheduleData$[ebp]
  002d6	83 c1 08	 add	 ecx, 8
$LN169@LoadData:

; 398  : 					{
; 399  : 						_CS_SCHEDULE_DATA pScheduleData = _CS_SCHEDULE_DATA(*it);

  002d9	8b 11		 mov	 edx, DWORD PTR [ecx]
  002db	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
  002de	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  002e1	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  002e4	89 95 3c fe ff
	ff		 mov	 DWORD PTR _pScheduleData$184362[ebp+8], edx
  002ea	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002ed	89 9d 48 fe ff
	ff		 mov	 DWORD PTR _pScheduleData$184362[ebp+20], ebx
  002f3	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
  002f6	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pScheduleData$184362[ebp], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  00300	89 85 38 fe ff
	ff		 mov	 DWORD PTR _pScheduleData$184362[ebp+4], eax
  00306	89 95 40 fe ff
	ff		 mov	 DWORD PTR _pScheduleData$184362[ebp+12], edx
  0030c	89 bd 44 fe ff
	ff		 mov	 DWORD PTR _pScheduleData$184362[ebp+16], edi
  00312	89 9d 4c fe ff
	ff		 mov	 DWORD PTR _pScheduleData$184362[ebp+24], ebx

; 400  : 
; 401  : 						if(pScheduleData.m_bIN_USE != 0)
; 402  : 						{
; 403  : 							if(pScheduleData.m_iSTATE == iSTATE)

  00318	8b 9d cc fe ff
	ff		 mov	 ebx, DWORD PTR _iSTATE$184199[ebp]
  0031e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00322	85 c0		 test	 eax, eax
  00324	74 7f		 je	 SHORT $LN61@LoadData
  00326	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _pScheduleData$184362[ebp+8]
  0032c	3b c3		 cmp	 eax, ebx
  0032e	0f 84 4c 0c 00
	00		 je	 $LN547@LoadData

; 408  : 							}
; 409  : 							
; 410  : 							if(pScheduleData.m_iSTATE > iSTATE)
; 411  : 							{
; 412  : 								int iSTATE1_TIME = pScheduleData.m_iADD_DAY * 24 * 60 + pScheduleData.m_iADD_HOUR * 60 + pScheduleData.m_iADD_MIN;

  00334	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00337	8d 14 c7	 lea	 edx, DWORD PTR [edi+eax*8]
  0033a	8b c2		 mov	 eax, edx
  0033c	7e 39		 jle	 SHORT $LN64@LoadData
  0033e	c1 e0 04	 shl	 eax, 4
  00341	2b c2		 sub	 eax, edx
  00343	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _pScheduleData$184362[ebp+20]
  00349	8d 3c 82	 lea	 edi, DWORD PTR [edx+eax*4]

; 413  : 								int iSTATE2_TIME = iSTART_DAY * 24 * 60 + iSTART_HOUR * 60 + iSTART_MIN;

  0034c	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _iSTART_HOUR$184201[ebp]
  00352	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00355	8d 14 c2	 lea	 edx, DWORD PTR [edx+eax*8]
  00358	8b c2		 mov	 eax, edx
  0035a	c1 e0 04	 shl	 eax, 4
  0035d	2b c2		 sub	 eax, edx
  0035f	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _iSTART_MIN$184202[ebp]
  00365	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]

; 414  : 	
; 415  : 								if(iSTATE1_TIME <= iSTATE2_TIME)

  00368	3b fa		 cmp	 edi, edx
  0036a	7f 39		 jg	 SHORT $LN61@LoadData
$LN548@LoadData:

; 416  : 								{
; 417  : 									LogAddC(2,"[CastleSiege] CCastleSiege::LoadData() - Date Order is wrong : %d",
; 418  : 										iSTATE2_TIME);

  0036c	52		 push	 edx
  0036d	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@MGMKEFNG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@

; 419  : 									return false;

  00372	e9 0f 0c 00 00	 jmp	 $LN642@LoadData
$LN64@LoadData:

; 420  : 								}
; 421  : 							}
; 422  : 							else
; 423  : 							{
; 424  : 								int iSTATE1_TIME = pScheduleData.m_iADD_DAY * 24 * 60 + pScheduleData.m_iADD_HOUR * 60 + pScheduleData.m_iADD_MIN;

  00377	c1 e0 04	 shl	 eax, 4
  0037a	2b c2		 sub	 eax, edx
  0037c	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _pScheduleData$184362[ebp+20]
  00382	8d 3c 82	 lea	 edi, DWORD PTR [edx+eax*4]

; 425  : 								int iSTATE2_TIME = iSTART_DAY * 24 * 60 + iSTART_HOUR * 60 + iSTART_MIN;

  00385	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _iSTART_HOUR$184201[ebp]
  0038b	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0038e	8d 14 c2	 lea	 edx, DWORD PTR [edx+eax*8]
  00391	8b c2		 mov	 eax, edx
  00393	c1 e0 04	 shl	 eax, 4
  00396	2b c2		 sub	 eax, edx
  00398	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _iSTART_MIN$184202[ebp]
  0039e	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]

; 426  : 								if(iSTATE1_TIME >= iSTATE2_TIME)

  003a1	3b fa		 cmp	 edi, edx
  003a3	7d c7		 jge	 SHORT $LN548@LoadData
$LN61@LoadData:

; 395  : 				{
; 396  : 					vector<_CS_SCHEDULE_DATA>::iterator it;
; 397  : 					for( it = vtScheduleData.begin(); it != vtScheduleData.end(); it++)

  003a5	83 c1 1c	 add	 ecx, 28			; 0000001cH
  003a8	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  003ab	3b 85 d4 fe ff
	ff		 cmp	 eax, DWORD PTR _vtScheduleData$[ebp+4]
  003b1	0f 85 22 ff ff
	ff		 jne	 $LN169@LoadData
$LN67@LoadData:

; 427  : 								{
; 428  : 									LogAddC(2,"[CastleSiege] CCastleSiege::LoadData() - Date Order is wrong : %d",
; 429  : 										iSTATE2_TIME);
; 430  : 									return false;
; 431  : 								}
; 432  : 							}
; 433  : 						}
; 434  : 					}
; 435  : 				}
; 436  : 
; 437  : 				_CS_SCHEDULE_DATA pScheduleDataInsert;

  003b7	c7 85 a4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _pScheduleDataInsert$184379[ebp], OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  003c1	c7 85 bc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _pScheduleDataInsert$184379[ebp+24], 0

; 438  : 
; 439  : 				pScheduleDataInsert.m_bIN_USE = 1;
; 440  : 				pScheduleDataInsert.m_iSTATE = iSTATE;
; 441  : 				pScheduleDataInsert.m_iADD_DAY = iSTART_DAY;
; 442  : 				pScheduleDataInsert.m_iADD_HOUR = iSTART_HOUR;

  003cb	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _iSTART_HOUR$184201[ebp]

; 443  : 				pScheduleDataInsert.m_iADD_MIN = iSTART_MIN;

  003d1	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _iSTART_MIN$184202[ebp]

; 444  : 
; 445  : 				vtScheduleData.push_back(pScheduleDataInsert);

  003d7	8d 85 a4 fd ff
	ff		 lea	 eax, DWORD PTR _pScheduleDataInsert$184379[ebp]
  003dd	89 8d b4 fd ff
	ff		 mov	 DWORD PTR _pScheduleDataInsert$184379[ebp+16], ecx
  003e3	50		 push	 eax
  003e4	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _vtScheduleData$[ebp]
  003ea	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  003ee	c7 85 a8 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _pScheduleDataInsert$184379[ebp+4], 1
  003f8	89 9d ac fd ff
	ff		 mov	 DWORD PTR _pScheduleDataInsert$184379[ebp+8], ebx
  003fe	89 b5 b0 fd ff
	ff		 mov	 DWORD PTR _pScheduleDataInsert$184379[ebp+12], esi
  00404	89 95 b8 fd ff
	ff		 mov	 DWORD PTR _pScheduleDataInsert$184379[ebp+20], edx
  0040a	e8 00 00 00 00	 call	 ?push_back@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXABU_CS_SCHEDULE_DATA@@@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::push_back

; 446  : 			}

  0040f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00413	e9 a7 fd ff ff	 jmp	 $LN639@LoadData
$LN72@LoadData:

; 447  : 			else if(type == 2)

  00418	83 fe 02	 cmp	 esi, 2
  0041b	0f 85 00 03 00
	00		 jne	 $LN59@LoadData

; 448  : 			{
; 449  : 				int iNPC_NUM = -1;
; 450  : 				int iNPC_INDEX = -1;
; 451  : 				int iNPC_SIDE = 0;
; 452  : 				int iNPC_DBSAVE = 0;
; 453  : 				int iNPC_DF_LEVEL = 0;
; 454  : 				int iNPC_RG_LEVEL = 0;
; 455  : 				int iNPC_MAXHP = 0;
; 456  : 				int iNPC_SX = -1;
; 457  : 				int iNPC_SY = -1;
; 458  : 				int iNPC_DX = -1;
; 459  : 				int iNPC_DY = -1;
; 460  : 				int iNPC_DIR = -1;
; 461  : 
; 462  : 				Token = GetToken();

  00421	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 463  : 				if(strcmp("end",TokenString)==NULL)

  00426	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0042b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL598@LoadData:
  00430	8a 10		 mov	 dl, BYTE PTR [eax]
  00432	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00434	75 1a		 jne	 SHORT $LN599@LoadData
  00436	84 d2		 test	 dl, dl
  00438	74 12		 je	 SHORT $LN600@LoadData
  0043a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0043d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00440	75 0e		 jne	 SHORT $LN599@LoadData
  00442	83 c0 02	 add	 eax, 2
  00445	83 c1 02	 add	 ecx, 2
  00448	84 d2		 test	 dl, dl
  0044a	75 e4		 jne	 SHORT $LL598@LoadData
$LN600@LoadData:
  0044c	33 c0		 xor	 eax, eax
  0044e	eb 05		 jmp	 SHORT $LN601@LoadData
$LN599@LoadData:
  00450	1b c0		 sbb	 eax, eax
  00452	83 d8 ff	 sbb	 eax, -1
$LN601@LoadData:
  00455	85 c0		 test	 eax, eax
  00457	0f 84 db 06 00
	00		 je	 $LN550@LoadData

; 464  : 				{
; 465  : 					break;
; 466  : 				}
; 467  : 
; 468  : 				iNPC_NUM = (int)TokenNumber;

  0045d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00463	e8 00 00 00 00	 call	 __ftol2_sse
  00468	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _iNPC_NUM$184382[ebp], eax

; 469  : 				Token = GetToken();

  0046e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 470  : 				iNPC_INDEX = (int)TokenNumber;

  00473	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00479	e8 00 00 00 00	 call	 __ftol2_sse
  0047e	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _iNPC_INDEX$184383[ebp], eax

; 471  : 				Token = GetToken();

  00484	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 472  : 				iNPC_DBSAVE = (int)TokenNumber;

  00489	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0048f	e8 00 00 00 00	 call	 __ftol2_sse
  00494	89 85 64 fe ff
	ff		 mov	 DWORD PTR _iNPC_DBSAVE$184385[ebp], eax

; 473  : 				Token = GetToken();

  0049a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 474  : 				iNPC_SIDE = (int)TokenNumber;

  0049f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004a5	e8 00 00 00 00	 call	 __ftol2_sse
  004aa	89 85 cc fe ff
	ff		 mov	 DWORD PTR _iNPC_SIDE$184384[ebp], eax

; 475  : 				Token = GetToken();

  004b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 476  : 				iNPC_DF_LEVEL = (int)TokenNumber;

  004b5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004bb	e8 00 00 00 00	 call	 __ftol2_sse
  004c0	8b f8		 mov	 edi, eax

; 477  : 				Token = GetToken();

  004c2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 478  : 				iNPC_RG_LEVEL = (int)TokenNumber;

  004c7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004cd	e8 00 00 00 00	 call	 __ftol2_sse
  004d2	8b d8		 mov	 ebx, eax

; 479  : 				Token = GetToken();

  004d4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 480  : 				iNPC_MAXHP = (int)TokenNumber;

  004d9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004df	e8 00 00 00 00	 call	 __ftol2_sse
  004e4	8b f0		 mov	 esi, eax

; 481  : 				Token = GetToken();

  004e6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 482  : 				iNPC_SX = (int)TokenNumber;

  004eb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004f1	e8 00 00 00 00	 call	 __ftol2_sse
  004f6	89 85 70 fe ff
	ff		 mov	 DWORD PTR _iNPC_SX$184389[ebp], eax

; 483  : 				Token = GetToken();

  004fc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 484  : 				iNPC_SY = (int)TokenNumber;

  00501	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00507	e8 00 00 00 00	 call	 __ftol2_sse
  0050c	89 85 78 fe ff
	ff		 mov	 DWORD PTR _iNPC_SY$184390[ebp], eax

; 485  : 				Token = GetToken();

  00512	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 486  : 				iNPC_DX = (int)TokenNumber;

  00517	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0051d	e8 00 00 00 00	 call	 __ftol2_sse
  00522	89 85 58 fe ff
	ff		 mov	 DWORD PTR _iNPC_DX$184391[ebp], eax

; 487  : 				Token = GetToken();

  00528	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 488  : 				iNPC_DY = (int)TokenNumber;

  0052d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00533	e8 00 00 00 00	 call	 __ftol2_sse
  00538	89 85 68 fe ff
	ff		 mov	 DWORD PTR _iNPC_DY$184392[ebp], eax

; 489  : 				Token = GetToken();

  0053e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 490  : 				iNPC_DIR = (int)TokenNumber;

  00543	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00549	e8 00 00 00 00	 call	 __ftol2_sse

; 491  : 
; 492  : 
; 493  : 				if(iNPC_NUM < 0)

  0054e	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _iNPC_NUM$184382[ebp], 0
  00555	89 85 98 fe ff
	ff		 mov	 DWORD PTR _iNPC_DIR$184393[ebp], eax
  0055b	0f 8c 41 0a 00
	00		 jl	 $LN554@LoadData

; 496  : 					return false;
; 497  : 				}
; 498  : 
; 499  : 				if(iNPC_INDEX < 0)

  00561	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _iNPC_INDEX$184383[ebp], 0
  00568	0f 8c 52 0a 00
	00		 jl	 $LN555@LoadData

; 502  : 					return false;
; 503  : 				}
; 504  : 
; 505  : 				if(iNPC_SIDE < 0)

  0056e	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _iNPC_SIDE$184384[ebp], 0
  00575	0f 8c 66 0a 00
	00		 jl	 $LN556@LoadData

; 508  : 					return false;
; 509  : 				}
; 510  : 
; 511  : 				if(iNPC_DF_LEVEL < 0)

  0057b	85 ff		 test	 edi, edi
  0057d	0f 88 7f 0a 00
	00		 js	 $LN557@LoadData

; 514  : 					return false;
; 515  : 				}
; 516  : 
; 517  : 				if(iNPC_RG_LEVEL < 0)

  00583	85 db		 test	 ebx, ebx
  00585	0f 88 98 0a 00
	00		 js	 $LN558@LoadData

; 520  : 					return false;
; 521  : 				}
; 522  : 
; 523  : 				if(iNPC_MAXHP < 0)

  0058b	85 f6		 test	 esi, esi
  0058d	0f 88 b1 0a 00
	00		 js	 $LN559@LoadData

; 526  : 					return false;
; 527  : 				}
; 528  : 
; 529  : 				if(iNPC_SX < 0)

  00593	83 bd 70 fe ff
	ff 00		 cmp	 DWORD PTR _iNPC_SX$184389[ebp], 0
  0059a	0f 8c c5 0a 00
	00		 jl	 $LN560@LoadData

; 532  : 					return false;
; 533  : 				}
; 534  : 
; 535  : 				if(iNPC_SY < 0)

  005a0	83 bd 78 fe ff
	ff 00		 cmp	 DWORD PTR _iNPC_SY$184390[ebp], 0
  005a7	0f 8c d9 0a 00
	00		 jl	 $LN561@LoadData

; 538  : 					return false;
; 539  : 				}
; 540  : 
; 541  : 				unsigned int uNpcKey = MACRO2(iNPC_INDEX) | (MACRO2(iNPC_NUM) << 16);

  005ad	0f b7 8d e0 fe
	ff ff		 movzx	 ecx, WORD PTR _iNPC_INDEX$184383[ebp]
  005b4	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _iNPC_NUM$184382[ebp]
  005ba	c1 e0 10	 shl	 eax, 16			; 00000010H
  005bd	0b c1		 or	 eax, ecx

; 542  : 
; 543  : 				map<unsigned int,int>::iterator it = mpNpcDataCheck.find(uNpcKey);

  005bf	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR _uNpcKey$184431[ebp]
  005c5	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv2240[ebp], eax
  005cb	89 85 60 fe ff
	ff		 mov	 DWORD PTR _uNpcKey$184431[ebp], eax
  005d1	52		 push	 edx
  005d2	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _it$184581[ebp]
  005d8	50		 push	 eax
  005d9	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  005df	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::find

; 544  : 
; 545  : 				if(it != mpNpcDataCheck.end())

  005e4	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _it$184581[ebp]
  005ea	3b 8d b0 fe ff
	ff		 cmp	 ecx, DWORD PTR _mpNpcDataCheck$[ebp+4]
  005f0	0f 85 b1 0a 00
	00		 jne	 $LN562@LoadData

; 548  : 					return false;
; 549  : 				}
; 550  : 
; 551  : 				mpNpcDataCheck.insert(pair <unsigned int, int > ( ( MACRO2(iNPC_INDEX) | (MACRO2(iNPC_NUM) << 16) ), 0));

  005f6	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR tv2240[ebp]
  005fc	6a 00		 push	 0
  005fe	8d 85 50 fe ff
	ff		 lea	 eax, DWORD PTR $T229189[ebp]
  00604	50		 push	 eax
  00605	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  0060b	89 95 50 fe ff
	ff		 mov	 DWORD PTR $T229189[ebp], edx
  00611	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T229189[ebp+4], 0
  0061b	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@IH@std@@@?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@1@$$QAU?$pair@IH@1@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode<std::pair<unsigned int,int> >
  00620	50		 push	 eax
  00621	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T229192[ebp]
  00627	51		 push	 ecx
  00628	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  0062e	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Linsert

; 552  : 
; 553  : 				_CS_NPC_DATA pNpcDataInsert;

  00633	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _pNpcDataInsert$185075[ebp]
  00639	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@XZ	; _CS_NPC_DATA::_CS_NPC_DATA

; 554  : 
; 555  : 				pNpcDataInsert.m_bIN_USE = 1;
; 556  : 				pNpcDataInsert.m_iNPC_NUM = iNPC_NUM;
; 557  : 				pNpcDataInsert.m_iNPC_INDEX = iNPC_INDEX;

  0063e	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _iNPC_INDEX$184383[ebp]
  00644	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _iNPC_NUM$184382[ebp]

; 558  : 				pNpcDataInsert.m_iNPC_SIDE = iNPC_SIDE;

  0064a	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _iNPC_SIDE$184384[ebp]
  00650	89 85 cc fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+12], eax

; 559  : 				pNpcDataInsert.m_bNPC_DBSAVE = iNPC_DBSAVE;
; 560  : 
; 561  : 				pNpcDataInsert.m_iNPC_BASE_DF_LEVEL = iNPC_DF_LEVEL;
; 562  : 				pNpcDataInsert.m_iNPC_DF_LEVEL = pNpcDataInsert.m_iNPC_BASE_DF_LEVEL;
; 563  : 
; 564  : 				pNpcDataInsert.m_iNPC_BASE_RG_LEVEL = iNPC_RG_LEVEL;
; 565  : 				pNpcDataInsert.m_iNPC_RG_LEVEL = pNpcDataInsert.m_iNPC_BASE_RG_LEVEL;
; 566  : 
; 567  : 				pNpcDataInsert.m_iNPC_BASE_MAXHP = iNPC_MAXHP;
; 568  : 				pNpcDataInsert.m_iNPC_MAXHP = pNpcDataInsert.m_iNPC_BASE_MAXHP;
; 569  : 
; 570  : 				pNpcDataInsert.m_iNPC_BASE_HP = iNPC_MAXHP;
; 571  : 				pNpcDataInsert.m_iNPC_HP = pNpcDataInsert.m_iNPC_BASE_HP;
; 572  : 
; 573  : 				pNpcDataInsert.m_iNPC_BASE_SX = iNPC_SX;

  00656	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _iNPC_SX$184389[ebp]
  0065c	89 85 10 fe ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+80], eax

; 574  : 				pNpcDataInsert.m_iNPC_SX = pNpcDataInsert.m_iNPC_BASE_SX;

  00662	89 85 ec fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+44], eax

; 575  : 
; 576  : 				pNpcDataInsert.m_iNPC_BASE_SY = iNPC_SY;

  00668	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _iNPC_SY$184390[ebp]
  0066e	89 85 14 fe ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+84], eax

; 577  : 				pNpcDataInsert.m_iNPC_SY = pNpcDataInsert.m_iNPC_BASE_SY;

  00674	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+48], eax

; 578  : 
; 579  : 				pNpcDataInsert.m_iNPC_BASE_DX = iNPC_DX;

  0067a	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _iNPC_DX$184391[ebp]
  00680	89 85 18 fe ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+88], eax

; 580  : 				pNpcDataInsert.m_iNPC_DX = pNpcDataInsert.m_iNPC_BASE_DX;

  00686	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+52], eax

; 581  : 
; 582  : 				pNpcDataInsert.m_iNPC_BASE_DY = iNPC_DY;

  0068c	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _iNPC_DY$184392[ebp]
  00692	89 85 1c fe ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+92], eax

; 583  : 				pNpcDataInsert.m_iNPC_DY = pNpcDataInsert.m_iNPC_BASE_DY;

  00698	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+56], eax

; 584  : 
; 585  : 				pNpcDataInsert.m_iNPC_BASE_DIR = iNPC_DIR;

  0069e	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _iNPC_DIR$184393[ebp]
  006a4	89 85 20 fe ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+96], eax

; 586  : 				pNpcDataInsert.m_iNPC_DIR = pNpcDataInsert.m_iNPC_BASE_DIR;

  006aa	89 85 fc fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+60], eax
  006b0	89 95 c8 fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+8], edx
  006b6	8b 95 64 fe ff
	ff		 mov	 edx, DWORD PTR _iNPC_DBSAVE$184385[ebp]

; 587  : 
; 588  : 				vtNpcData.push_back(pNpcDataInsert);

  006bc	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _pNpcDataInsert$185075[ebp]
  006c2	89 8d d4 fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+20], ecx
  006c8	50		 push	 eax
  006c9	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vtNpcData$[ebp]
  006cf	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  006d3	c7 85 c4 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+4], 1
  006dd	89 95 d0 fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+16], edx
  006e3	89 bd 00 fe ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+64], edi
  006e9	89 bd dc fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+28], edi
  006ef	89 9d 04 fe ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+68], ebx
  006f5	89 9d e0 fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+32], ebx
  006fb	89 b5 08 fe ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+72], esi
  00701	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+36], esi
  00707	89 b5 0c fe ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+76], esi
  0070d	89 b5 e8 fd ff
	ff		 mov	 DWORD PTR _pNpcDataInsert$185075[ebp+40], esi
  00713	e8 00 00 00 00	 call	 ?push_back@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXABU_CS_NPC_DATA@@@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::push_back

; 589  : 			}

  00718	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0071c	e9 9e fa ff ff	 jmp	 $LN639@LoadData
$LN59@LoadData:

; 590  : 			else if(type == 3)

  00721	83 fe 03	 cmp	 esi, 3
  00724	0f 85 a4 00 00
	00		 jne	 $LN47@LoadData

; 591  : 			{
; 592  : 				int iLEVEL = 0;
; 593  : 				int iGEMCOUNT = 0;
; 594  : 				int iZEN = 0;
; 595  : 
; 596  : 				Token = GetToken();

  0072a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 597  : 				if(strcmp("end",TokenString)==NULL)

  0072f	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00734	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00739	8d a4 24 00 00
	00 00		 npad	 7
$LL602@LoadData:
  00740	8a 10		 mov	 dl, BYTE PTR [eax]
  00742	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00744	75 1a		 jne	 SHORT $LN603@LoadData
  00746	84 d2		 test	 dl, dl
  00748	74 12		 je	 SHORT $LN604@LoadData
  0074a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0074d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00750	75 0e		 jne	 SHORT $LN603@LoadData
  00752	83 c0 02	 add	 eax, 2
  00755	83 c1 02	 add	 ecx, 2
  00758	84 d2		 test	 dl, dl
  0075a	75 e4		 jne	 SHORT $LL602@LoadData
$LN604@LoadData:
  0075c	33 c0		 xor	 eax, eax
  0075e	eb 05		 jmp	 SHORT $LN605@LoadData
$LN603@LoadData:
  00760	1b c0		 sbb	 eax, eax
  00762	83 d8 ff	 sbb	 eax, -1
$LN605@LoadData:
  00765	85 c0		 test	 eax, eax
  00767	0f 84 cb 03 00
	00		 je	 $LN550@LoadData

; 598  : 				{
; 599  : 					break;
; 600  : 				}
; 601  : 
; 602  : 				iLEVEL = (int)TokenNumber;

  0076d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00773	e8 00 00 00 00	 call	 __ftol2_sse
  00778	8b f0		 mov	 esi, eax

; 603  : 				Token = GetToken();

  0077a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 604  : 				iGEMCOUNT = (int)TokenNumber;

  0077f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00785	e8 00 00 00 00	 call	 __ftol2_sse
  0078a	8b f8		 mov	 edi, eax

; 605  : 				Token = GetToken();

  0078c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 606  : 				iZEN = (int)TokenNumber;

  00791	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00797	e8 00 00 00 00	 call	 __ftol2_sse

; 607  : 
; 608  : 				if(iCountDfUpgrade_Gate >= CS_MAX_UPGRADE)

  0079c	81 bd a4 fe ff
	ff 28 00 00 00	 cmp	 DWORD PTR tv3071[ebp], OFFSET ?g_iNpcUpDfLevel_CGATE@@3PAY02HA+40
  007a6	0f 8d 8c 03 00
	00		 jge	 $LN550@LoadData

; 609  : 					break;
; 610  : 
; 611  : 				g_iNpcUpDfLevel_CGATE[iCountDfUpgrade_Gate][0] = iLEVEL;

  007ac	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv3071[ebp]

; 612  : 				g_iNpcUpDfLevel_CGATE[iCountDfUpgrade_Gate][1] = iGEMCOUNT;
; 613  : 				g_iNpcUpDfLevel_CGATE[iCountDfUpgrade_Gate][2] = iZEN;
; 614  : 
; 615  : 				iCountDfUpgrade_Gate++;

  007b2	ff 85 80 fe ff
	ff		 inc	 DWORD PTR _iCountDfUpgrade_Gate$[ebp]
  007b8	89 71 fc	 mov	 DWORD PTR [ecx-4], esi
  007bb	89 39		 mov	 DWORD PTR [ecx], edi
  007bd	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  007c0	83 c1 0c	 add	 ecx, 12			; 0000000cH
  007c3	89 8d a4 fe ff
	ff		 mov	 DWORD PTR tv3071[ebp], ecx
  007c9	e9 f1 f9 ff ff	 jmp	 $LN639@LoadData
$LN47@LoadData:

; 616  : 			}
; 617  : 			else if(type == 4)

  007ce	83 fe 04	 cmp	 esi, 4
  007d1	0f 85 97 00 00
	00		 jne	 $LN43@LoadData

; 618  : 			{
; 619  : 				int iLEVEL = 0;
; 620  : 				int iGEMCOUNT = 0;
; 621  : 				int iZEN = 0;
; 622  : 
; 623  : 				Token = GetToken();

  007d7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 624  : 				if(strcmp("end",TokenString)==NULL)

  007dc	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  007e1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL606@LoadData:
  007e6	8a 10		 mov	 dl, BYTE PTR [eax]
  007e8	3a 11		 cmp	 dl, BYTE PTR [ecx]
  007ea	75 1a		 jne	 SHORT $LN607@LoadData
  007ec	84 d2		 test	 dl, dl
  007ee	74 12		 je	 SHORT $LN608@LoadData
  007f0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  007f3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  007f6	75 0e		 jne	 SHORT $LN607@LoadData
  007f8	83 c0 02	 add	 eax, 2
  007fb	83 c1 02	 add	 ecx, 2
  007fe	84 d2		 test	 dl, dl
  00800	75 e4		 jne	 SHORT $LL606@LoadData
$LN608@LoadData:
  00802	33 c0		 xor	 eax, eax
  00804	eb 05		 jmp	 SHORT $LN609@LoadData
$LN607@LoadData:
  00806	1b c0		 sbb	 eax, eax
  00808	83 d8 ff	 sbb	 eax, -1
$LN609@LoadData:
  0080b	85 c0		 test	 eax, eax
  0080d	0f 84 25 03 00
	00		 je	 $LN550@LoadData

; 625  : 				{
; 626  : 					break;
; 627  : 				}
; 628  : 
; 629  : 				iLEVEL = (int)TokenNumber;

  00813	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00819	e8 00 00 00 00	 call	 __ftol2_sse
  0081e	8b f0		 mov	 esi, eax

; 630  : 				Token = GetToken();

  00820	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 631  : 				iGEMCOUNT = (int)TokenNumber;

  00825	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0082b	e8 00 00 00 00	 call	 __ftol2_sse
  00830	8b f8		 mov	 edi, eax

; 632  : 				Token = GetToken();

  00832	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 633  : 				iZEN = (int)TokenNumber;

  00837	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0083d	e8 00 00 00 00	 call	 __ftol2_sse

; 634  : 
; 635  : 				if(iCountDfUpgrade_Statue >= CS_MAX_UPGRADE)

  00842	81 bd 90 fe ff
	ff 28 00 00 00	 cmp	 DWORD PTR tv3065[ebp], OFFSET ?g_iNpcUpDfLevel_CSTATUE@@3PAY02HA+40
  0084c	0f 8d e6 02 00
	00		 jge	 $LN550@LoadData

; 636  : 					break;
; 637  : 
; 638  : 				g_iNpcUpDfLevel_CSTATUE[iCountDfUpgrade_Statue][0] = iLEVEL;

  00852	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR tv3065[ebp]

; 639  : 				g_iNpcUpDfLevel_CSTATUE[iCountDfUpgrade_Statue][1] = iGEMCOUNT;
; 640  : 				g_iNpcUpDfLevel_CSTATUE[iCountDfUpgrade_Statue][2] = iZEN;
; 641  : 
; 642  : 				iCountDfUpgrade_Statue++;

  00858	ff 85 a0 fe ff
	ff		 inc	 DWORD PTR _iCountDfUpgrade_Statue$[ebp]
  0085e	89 71 fc	 mov	 DWORD PTR [ecx-4], esi
  00861	89 39		 mov	 DWORD PTR [ecx], edi
  00863	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00866	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00869	e9 4b f9 ff ff	 jmp	 $LN640@LoadData
$LN43@LoadData:

; 643  : 			}
; 644  : 			else if(type == 5)

  0086e	83 fe 05	 cmp	 esi, 5
  00871	0f 85 9d 00 00
	00		 jne	 $LN39@LoadData

; 645  : 			{
; 646  : 				int iHP = 0;
; 647  : 				int iGEMCOUNT = 0;
; 648  : 				int iZEN = 0;
; 649  : 
; 650  : 				Token = GetToken();

  00877	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 651  : 				if(strcmp("end",TokenString)==NULL)

  0087c	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00881	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL610@LoadData:
  00886	8a 10		 mov	 dl, BYTE PTR [eax]
  00888	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0088a	75 1a		 jne	 SHORT $LN611@LoadData
  0088c	84 d2		 test	 dl, dl
  0088e	74 12		 je	 SHORT $LN612@LoadData
  00890	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00893	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00896	75 0e		 jne	 SHORT $LN611@LoadData
  00898	83 c0 02	 add	 eax, 2
  0089b	83 c1 02	 add	 ecx, 2
  0089e	84 d2		 test	 dl, dl
  008a0	75 e4		 jne	 SHORT $LL610@LoadData
$LN612@LoadData:
  008a2	33 c0		 xor	 eax, eax
  008a4	eb 05		 jmp	 SHORT $LN613@LoadData
$LN611@LoadData:
  008a6	1b c0		 sbb	 eax, eax
  008a8	83 d8 ff	 sbb	 eax, -1
$LN613@LoadData:
  008ab	85 c0		 test	 eax, eax
  008ad	0f 84 85 02 00
	00		 je	 $LN550@LoadData

; 652  : 				{
; 653  : 					break;
; 654  : 				}
; 655  : 
; 656  : 				iHP = (int)TokenNumber;

  008b3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008b9	e8 00 00 00 00	 call	 __ftol2_sse
  008be	8b f0		 mov	 esi, eax

; 657  : 				Token = GetToken();

  008c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 658  : 				iGEMCOUNT = (int)TokenNumber;

  008c5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008cb	e8 00 00 00 00	 call	 __ftol2_sse
  008d0	8b f8		 mov	 edi, eax

; 659  : 				Token = GetToken();

  008d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 660  : 				iZEN = (int)TokenNumber;

  008d7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  008dd	e8 00 00 00 00	 call	 __ftol2_sse

; 661  : 
; 662  : 				if(iCountHpUpgrade_Gate >= CS_MAX_UPGRADE)

  008e2	81 bd a8 fe ff
	ff 28 00 00 00	 cmp	 DWORD PTR tv3059[ebp], OFFSET ?g_iNpcUpMaxHP_CGATE@@3PAY02HA+40
  008ec	0f 8d 46 02 00
	00		 jge	 $LN550@LoadData

; 663  : 					break;
; 664  : 
; 665  : 				g_iNpcUpMaxHP_CGATE[iCountHpUpgrade_Gate][0] = iHP;

  008f2	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv3059[ebp]

; 666  : 				g_iNpcUpMaxHP_CGATE[iCountHpUpgrade_Gate][1] = iGEMCOUNT;
; 667  : 				g_iNpcUpMaxHP_CGATE[iCountHpUpgrade_Gate][2] = iZEN;
; 668  : 
; 669  : 				iCountHpUpgrade_Gate++;

  008f8	ff 85 88 fe ff
	ff		 inc	 DWORD PTR _iCountHpUpgrade_Gate$[ebp]
  008fe	89 71 fc	 mov	 DWORD PTR [ecx-4], esi
  00901	89 39		 mov	 DWORD PTR [ecx], edi
  00903	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00906	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00909	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv3059[ebp], ecx
  0090f	e9 ab f8 ff ff	 jmp	 $LN639@LoadData
$LN39@LoadData:

; 670  : 			}
; 671  : 			else if(type == 6)

  00914	83 fe 06	 cmp	 esi, 6
  00917	0f 85 a1 00 00
	00		 jne	 $LN35@LoadData

; 672  : 			{
; 673  : 				int iHP = 0;
; 674  : 				int iGEMCOUNT = 0;
; 675  : 				int iZEN = 0;
; 676  : 
; 677  : 				Token = GetToken();

  0091d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 678  : 				if(strcmp("end",TokenString)==NULL)

  00922	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00927	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0092c	8d 64 24 00	 npad	 4
$LL614@LoadData:
  00930	8a 10		 mov	 dl, BYTE PTR [eax]
  00932	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00934	75 1a		 jne	 SHORT $LN615@LoadData
  00936	84 d2		 test	 dl, dl
  00938	74 12		 je	 SHORT $LN616@LoadData
  0093a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0093d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00940	75 0e		 jne	 SHORT $LN615@LoadData
  00942	83 c0 02	 add	 eax, 2
  00945	83 c1 02	 add	 ecx, 2
  00948	84 d2		 test	 dl, dl
  0094a	75 e4		 jne	 SHORT $LL614@LoadData
$LN616@LoadData:
  0094c	33 c0		 xor	 eax, eax
  0094e	eb 05		 jmp	 SHORT $LN617@LoadData
$LN615@LoadData:
  00950	1b c0		 sbb	 eax, eax
  00952	83 d8 ff	 sbb	 eax, -1
$LN617@LoadData:
  00955	85 c0		 test	 eax, eax
  00957	0f 84 db 01 00
	00		 je	 $LN550@LoadData

; 679  : 				{
; 680  : 					break;
; 681  : 				}
; 682  : 
; 683  : 				iHP = (int)TokenNumber;

  0095d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00963	e8 00 00 00 00	 call	 __ftol2_sse
  00968	8b f0		 mov	 esi, eax

; 684  : 				Token = GetToken();

  0096a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 685  : 				iGEMCOUNT = (int)TokenNumber;

  0096f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00975	e8 00 00 00 00	 call	 __ftol2_sse
  0097a	8b f8		 mov	 edi, eax

; 686  : 				Token = GetToken();

  0097c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 687  : 				iZEN = (int)TokenNumber;

  00981	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00987	e8 00 00 00 00	 call	 __ftol2_sse

; 688  : 
; 689  : 				if(iCountHpUpgrade_Statue >= CS_MAX_UPGRADE)

  0098c	81 bd 9c fe ff
	ff 28 00 00 00	 cmp	 DWORD PTR tv3053[ebp], OFFSET ?g_iNpcUpMaxHP_CSTATUE@@3PAY02HA+40
  00996	0f 8d 9c 01 00
	00		 jge	 $LN550@LoadData

; 690  : 					break;
; 691  : 
; 692  : 				g_iNpcUpMaxHP_CSTATUE[iCountHpUpgrade_Statue][0] = iHP;

  0099c	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv3053[ebp]

; 693  : 				g_iNpcUpMaxHP_CSTATUE[iCountHpUpgrade_Statue][1] = iGEMCOUNT;
; 694  : 				g_iNpcUpMaxHP_CSTATUE[iCountHpUpgrade_Statue][2] = iZEN;
; 695  : 
; 696  : 				iCountHpUpgrade_Statue++;

  009a2	ff 85 84 fe ff
	ff		 inc	 DWORD PTR _iCountHpUpgrade_Statue$[ebp]
  009a8	89 71 fc	 mov	 DWORD PTR [ecx-4], esi
  009ab	89 39		 mov	 DWORD PTR [ecx], edi
  009ad	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  009b0	83 c1 0c	 add	 ecx, 12			; 0000000cH
  009b3	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv3053[ebp], ecx
  009b9	e9 01 f8 ff ff	 jmp	 $LN639@LoadData
$LN35@LoadData:

; 697  : 			}
; 698  : 			else if(type == 7)

  009be	83 fe 07	 cmp	 esi, 7
  009c1	0f 85 9d 00 00
	00		 jne	 $LN31@LoadData

; 699  : 			{
; 700  : 				int iLEVEL = 0;
; 701  : 				int iGEMCOUNT = 0;
; 702  : 				int iZEN = 0;
; 703  : 
; 704  : 				Token = GetToken();

  009c7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 705  : 				if(strcmp("end",TokenString)==NULL)

  009cc	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  009d1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL618@LoadData:
  009d6	8a 10		 mov	 dl, BYTE PTR [eax]
  009d8	3a 11		 cmp	 dl, BYTE PTR [ecx]
  009da	75 1a		 jne	 SHORT $LN619@LoadData
  009dc	84 d2		 test	 dl, dl
  009de	74 12		 je	 SHORT $LN620@LoadData
  009e0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  009e3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  009e6	75 0e		 jne	 SHORT $LN619@LoadData
  009e8	83 c0 02	 add	 eax, 2
  009eb	83 c1 02	 add	 ecx, 2
  009ee	84 d2		 test	 dl, dl
  009f0	75 e4		 jne	 SHORT $LL618@LoadData
$LN620@LoadData:
  009f2	33 c0		 xor	 eax, eax
  009f4	eb 05		 jmp	 SHORT $LN621@LoadData
$LN619@LoadData:
  009f6	1b c0		 sbb	 eax, eax
  009f8	83 d8 ff	 sbb	 eax, -1
$LN621@LoadData:
  009fb	85 c0		 test	 eax, eax
  009fd	0f 84 35 01 00
	00		 je	 $LN550@LoadData

; 706  : 				{
; 707  : 					break;
; 708  : 				}
; 709  : 
; 710  : 				iLEVEL = (int)TokenNumber;

  00a03	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a09	e8 00 00 00 00	 call	 __ftol2_sse
  00a0e	8b f0		 mov	 esi, eax

; 711  : 				Token = GetToken();

  00a10	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 712  : 				iGEMCOUNT = (int)TokenNumber;

  00a15	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a1b	e8 00 00 00 00	 call	 __ftol2_sse
  00a20	8b f8		 mov	 edi, eax

; 713  : 				Token = GetToken();

  00a22	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 714  : 				iZEN = (int)TokenNumber;

  00a27	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00a2d	e8 00 00 00 00	 call	 __ftol2_sse

; 715  : 
; 716  : 				if(iCountRgUpgrade_Statue >= CS_MAX_UPGRADE)

  00a32	81 bd 94 fe ff
	ff 28 00 00 00	 cmp	 DWORD PTR tv3047[ebp], OFFSET ?g_iNpcUpRgLevel_CSTATUE@@3PAY02HA+40
  00a3c	0f 8d f6 00 00
	00		 jge	 $LN550@LoadData

; 717  : 					break;
; 718  : 
; 719  : 				g_iNpcUpRgLevel_CSTATUE[iCountRgUpgrade_Statue][0] = iLEVEL;

  00a42	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR tv3047[ebp]

; 720  : 				g_iNpcUpRgLevel_CSTATUE[iCountRgUpgrade_Statue][1] = iGEMCOUNT;
; 721  : 				g_iNpcUpRgLevel_CSTATUE[iCountRgUpgrade_Statue][2] = iZEN;
; 722  : 
; 723  : 				iCountRgUpgrade_Statue++;

  00a48	ff 85 8c fe ff
	ff		 inc	 DWORD PTR _iCountRgUpgrade_Statue$[ebp]
  00a4e	89 71 fc	 mov	 DWORD PTR [ecx-4], esi
  00a51	89 39		 mov	 DWORD PTR [ecx], edi
  00a53	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00a56	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00a59	89 8d 94 fe ff
	ff		 mov	 DWORD PTR tv3047[ebp], ecx
  00a5f	e9 5b f7 ff ff	 jmp	 $LN639@LoadData
$LN31@LoadData:

; 724  : 			}
; 725  : 			else if(type == 8)

  00a64	83 fe 08	 cmp	 esi, 8
  00a67	75 65		 jne	 SHORT $LN27@LoadData

; 726  : 			{
; 727  : 				int iDFVALUE = 0;
; 728  : 
; 729  : 				Token = GetToken();

  00a69	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 730  : 				if(strcmp("end",TokenString)==NULL)

  00a6e	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00a73	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL622@LoadData:
  00a78	8a 10		 mov	 dl, BYTE PTR [eax]
  00a7a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00a7c	75 1a		 jne	 SHORT $LN623@LoadData
  00a7e	84 d2		 test	 dl, dl
  00a80	74 12		 je	 SHORT $LN624@LoadData
  00a82	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00a85	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00a88	75 0e		 jne	 SHORT $LN623@LoadData
  00a8a	83 c0 02	 add	 eax, 2
  00a8d	83 c1 02	 add	 ecx, 2
  00a90	84 d2		 test	 dl, dl
  00a92	75 e4		 jne	 SHORT $LL622@LoadData
$LN624@LoadData:
  00a94	33 c0		 xor	 eax, eax
  00a96	eb 05		 jmp	 SHORT $LN625@LoadData
$LN623@LoadData:
  00a98	1b c0		 sbb	 eax, eax
  00a9a	83 d8 ff	 sbb	 eax, -1
$LN625@LoadData:
  00a9d	85 c0		 test	 eax, eax
  00a9f	0f 84 93 00 00
	00		 je	 $LN550@LoadData

; 731  : 				{
; 732  : 					break;
; 733  : 				}
; 734  : 
; 735  : 				iDFVALUE = (int)TokenNumber;

  00aa5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00aab	e8 00 00 00 00	 call	 __ftol2_sse

; 736  : 
; 737  : 				if(iCountDfValue_Gate >= CS_MAX_UPGRADE + 1)

  00ab0	8b 8d 7c fe ff
	ff		 mov	 ecx, DWORD PTR _iCountDfValue_Gate$[ebp]
  00ab6	83 f9 04	 cmp	 ecx, 4
  00ab9	7d 7d		 jge	 SHORT $LN550@LoadData

; 738  : 					break;
; 739  : 
; 740  : 				g_iNpcDefense_CGATE[iCountDfValue_Gate] = iDFVALUE;

  00abb	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?g_iNpcDefense_CGATE@@3PAHA[ecx*4], eax

; 741  : 
; 742  : 				iCountDfValue_Gate++;

  00ac2	41		 inc	 ecx
  00ac3	89 8d 7c fe ff
	ff		 mov	 DWORD PTR _iCountDfValue_Gate$[ebp], ecx
  00ac9	e9 f7 f6 ff ff	 jmp	 $LL79@LoadData
$LN27@LoadData:

; 743  : 			}
; 744  : 			else if(type == 9)

  00ace	83 fe 09	 cmp	 esi, 9
  00ad1	0f 85 ee f6 ff
	ff		 jne	 $LL79@LoadData

; 745  : 			{
; 746  : 				int iDFVALUE = 0;
; 747  : 
; 748  : 				Token = GetToken();

  00ad7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 749  : 				if(strcmp("end",TokenString)==NULL)

  00adc	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00ae1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL626@LoadData:
  00ae6	8a 10		 mov	 dl, BYTE PTR [eax]
  00ae8	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00aea	75 1a		 jne	 SHORT $LN627@LoadData
  00aec	84 d2		 test	 dl, dl
  00aee	74 12		 je	 SHORT $LN628@LoadData
  00af0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00af3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00af6	75 0e		 jne	 SHORT $LN627@LoadData
  00af8	83 c0 02	 add	 eax, 2
  00afb	83 c1 02	 add	 ecx, 2
  00afe	84 d2		 test	 dl, dl
  00b00	75 e4		 jne	 SHORT $LL626@LoadData
$LN628@LoadData:
  00b02	33 c0		 xor	 eax, eax
  00b04	eb 05		 jmp	 SHORT $LN629@LoadData
$LN627@LoadData:
  00b06	1b c0		 sbb	 eax, eax
  00b08	83 d8 ff	 sbb	 eax, -1
$LN629@LoadData:
  00b0b	85 c0		 test	 eax, eax
  00b0d	74 29		 je	 SHORT $LN550@LoadData

; 750  : 				{
; 751  : 					break;
; 752  : 				}
; 753  : 
; 754  : 				iDFVALUE = (int)TokenNumber;

  00b0f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00b15	e8 00 00 00 00	 call	 __ftol2_sse

; 755  : 
; 756  : 				if(iCountDfValue_Statue >= CS_MAX_UPGRADE + 1)

  00b1a	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR _iCountDfValue_Statue$[ebp]
  00b20	83 f9 04	 cmp	 ecx, 4
  00b23	7d 13		 jge	 SHORT $LN550@LoadData

; 757  : 					break;
; 758  : 
; 759  : 				g_iNpcDefense_CSTATUE[iCountDfValue_Statue] = iDFVALUE;

  00b25	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?g_iNpcDefense_CSTATUE@@3PAHA[ecx*4], eax

; 760  : 
; 761  : 				iCountDfValue_Statue++;

  00b2c	41		 inc	 ecx
  00b2d	89 8d 74 fe ff
	ff		 mov	 DWORD PTR _iCountDfValue_Statue$[ebp], ecx

; 762  : 			}
; 763  : 		}

  00b33	e9 8d f6 ff ff	 jmp	 $LL79@LoadData
$LN550@LoadData:

; 338  : 
; 339  : 	while( true )
; 340  : 	{
; 341  : 		Token = GetToken();

  00b38	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 342  : 
; 343  : 		if(Token == END)

  00b3d	83 f8 02	 cmp	 eax, 2
  00b40	0f 85 fa f5 ff
	ff		 jne	 $LL633@LoadData
$LN577@LoadData:

; 764  : 	}
; 765  : 
; 766  : 	fclose(SMDFile);

  00b46	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00b4c	51		 push	 ecx
  00b4d	e8 00 00 00 00	 call	 _fclose

; 767  : 
; 768  : 	EnterCriticalSection(&m_critScheduleData);

  00b52	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00b58	83 c4 04	 add	 esp, 4
  00b5b	05 10 01 00 00	 add	 eax, 272		; 00000110H
  00b60	50		 push	 eax
  00b61	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 769  : 
; 770  : 	if(!vtScheduleData.empty())

  00b67	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _vtScheduleData$[ebp]

; 771  : 	{
; 772  : 		vector<_CS_SCHEDULE_DATA>::iterator it;
; 773  : 		for( it = vtScheduleData.begin(); it != vtScheduleData.end(); it++)

  00b6d	8b 9d ec fe ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  00b73	3b 95 d4 fe ff
	ff		 cmp	 edx, DWORD PTR _vtScheduleData$[ebp+4]
  00b79	74 1c		 je	 SHORT $LN17@LoadData
  00b7b	8b f2		 mov	 esi, edx
  00b7d	8d 49 00	 npad	 3
$LL258@LoadData:

; 774  : 		{
; 775  : 			m_vtScheduleData.push_back(*it);

  00b80	56		 push	 esi
  00b81	8d 8b 00 01 00
	00		 lea	 ecx, DWORD PTR [ebx+256]
  00b87	e8 00 00 00 00	 call	 ?push_back@?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAEXABU_CS_SCHEDULE_DATA@@@Z ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::push_back
  00b8c	83 c6 1c	 add	 esi, 28			; 0000001cH
  00b8f	3b b5 d4 fe ff
	ff		 cmp	 esi, DWORD PTR _vtScheduleData$[ebp+4]
  00b95	75 e9		 jne	 SHORT $LL258@LoadData
$LN17@LoadData:

; 776  : 		}
; 777  : 	}
; 778  : 
; 779  : 	sort(m_vtScheduleData.begin(),m_vtScheduleData.end(),ScheduleStateCompFunc);

  00b97	8b b3 04 01 00
	00		 mov	 esi, DWORD PTR [ebx+260]
  00b9d	8b bb 00 01 00
	00		 mov	 edi, DWORD PTR [ebx+256]
  00ba3	8b ce		 mov	 ecx, esi
  00ba5	2b cf		 sub	 ecx, edi
  00ba7	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00bac	f7 e9		 imul	 ecx
  00bae	03 d1		 add	 edx, ecx
  00bb0	c1 fa 04	 sar	 edx, 4
  00bb3	8b c2		 mov	 eax, edx
  00bb5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00bb8	68 00 00 00 00	 push	 OFFSET ?ScheduleStateCompFunc@CCastleSiege@@SAEAAU_CS_SCHEDULE_DATA@@0@Z ; CCastleSiege::ScheduleStateCompFunc
  00bbd	03 c2		 add	 eax, edx
  00bbf	50		 push	 eax
  00bc0	56		 push	 esi
  00bc1	57		 push	 edi
  00bc2	e8 00 00 00 00	 call	 ??$_Sort@PAU_CS_SCHEDULE_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_SCHEDULE_DATA@@0HP6AEAAU1@1@Z@Z ; std::_Sort<_CS_SCHEDULE_DATA *,int,unsigned char (__cdecl*)(_CS_SCHEDULE_DATA &,_CS_SCHEDULE_DATA &)>

; 780  : 
; 781  : 	if(!m_vtScheduleData.empty())

  00bc7	8b 8b 00 01 00
	00		 mov	 ecx, DWORD PTR [ebx+256]
  00bcd	8b 83 04 01 00
	00		 mov	 eax, DWORD PTR [ebx+260]
  00bd3	83 c4 10	 add	 esp, 16			; 00000010H
  00bd6	3b c8		 cmp	 ecx, eax
  00bd8	0f 84 e5 00 00
	00		 je	 $LN13@LoadData

; 782  : 	{
; 783  : 		for(DWORD iIDX = 0; iIDX < m_vtScheduleData.size(); iIDX++)

  00bde	2b c1		 sub	 eax, ecx
  00be0	8b c8		 mov	 ecx, eax
  00be2	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00be7	f7 e9		 imul	 ecx
  00be9	03 d1		 add	 edx, ecx
  00beb	c1 fa 04	 sar	 edx, 4
  00bee	8b c2		 mov	 eax, edx
  00bf0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00bf3	33 f6		 xor	 esi, esi
  00bf5	03 c2		 add	 eax, edx
  00bf7	0f 84 c6 00 00
	00		 je	 $LN13@LoadData
  00bfd	33 ff		 xor	 edi, edi
  00bff	90		 npad	 1
$LL15@LoadData:

; 784  : 		{
; 785  : 			if(iIDX+1 < m_vtScheduleData.size())
; 786  : 			{
; 787  : 				int iIDX_SEC1 = m_vtScheduleData[iIDX].m_iADD_DAY * 24 * 60 * 60 + m_vtScheduleData[iIDX].m_iADD_HOUR * 60 * 60 + m_vtScheduleData[iIDX].m_iADD_MIN * 60;

  00c00	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00c06	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  00c09	3b d8		 cmp	 ebx, eax
  00c0b	73 76		 jae	 SHORT $LN12@LoadData
  00c0d	8b 89 00 01 00
	00		 mov	 ecx, DWORD PTR [ecx+256]
  00c13	8b 44 39 0c	 mov	 eax, DWORD PTR [ecx+edi+12]
  00c17	8b 54 39 10	 mov	 edx, DWORD PTR [ecx+edi+16]

; 788  : 				int iIDX_SEC2 = m_vtScheduleData[iIDX+1].m_iADD_DAY * 24 * 60 * 60 + m_vtScheduleData[iIDX+1].m_iADD_HOUR * 60 * 60 + m_vtScheduleData[iIDX+1].m_iADD_MIN * 60;

  00c1b	8b 74 39 2c	 mov	 esi, DWORD PTR [ecx+edi+44]
  00c1f	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00c22	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  00c25	03 cf		 add	 ecx, edi
  00c27	8b d0		 mov	 edx, eax
  00c29	c1 e2 04	 shl	 edx, 4
  00c2c	2b d0		 sub	 edx, eax
  00c2e	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00c31	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00c34	8b d0		 mov	 edx, eax
  00c36	c1 e2 04	 shl	 edx, 4
  00c39	2b d0		 sub	 edx, eax
  00c3b	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00c3e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00c41	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]
  00c44	8b f0		 mov	 esi, eax
  00c46	c1 e6 04	 shl	 esi, 4
  00c49	2b f0		 sub	 esi, eax
  00c4b	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00c4e	8d 34 b0	 lea	 esi, DWORD PTR [eax+esi*4]
  00c51	8b c6		 mov	 eax, esi
  00c53	c1 e0 04	 shl	 eax, 4
  00c56	2b c6		 sub	 eax, esi
  00c58	03 d2		 add	 edx, edx
  00c5a	03 c0		 add	 eax, eax
  00c5c	03 d2		 add	 edx, edx
  00c5e	03 c0		 add	 eax, eax

; 789  : 
; 790  : 				int iIDX_RESULT = iIDX_SEC2 - iIDX_SEC1;

  00c60	2b c2		 sub	 eax, edx

; 791  : 
; 792  : 				if(iIDX_RESULT < 0)

  00c62	79 1a		 jns	 SHORT $LN11@LoadData

; 793  : 				{
; 794  : 					LogAddC(2,"[CastleSiege] CCastleSiege::LoadData() - Date Order is wrong (sort fail) : %d-%d",
; 795  : 						m_vtScheduleData[iIDX].m_iSTATE, m_vtScheduleData[iIDX+1].m_iSTATE);

  00c64	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00c67	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00c6a	52		 push	 edx
  00c6b	50		 push	 eax
  00c6c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@HOOHBME@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  00c71	6a 02		 push	 2
  00c73	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00c79	83 c4 10	 add	 esp, 16			; 00000010H

; 796  : 				}
; 797  : 				else

  00c7c	eb 13		 jmp	 SHORT $LN14@LoadData
$LN11@LoadData:

; 798  : 				{
; 799  : 					m_vtScheduleData[iIDX].m_iGAP_SEC = iIDX_RESULT;

  00c7e	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 800  : 				}
; 801  : 			}
; 802  : 			else

  00c81	eb 0e		 jmp	 SHORT $LN14@LoadData
$LN12@LoadData:

; 803  : 			{
; 804  : 				m_vtScheduleData[iIDX].m_iGAP_SEC = 0;

  00c83	8b 91 00 01 00
	00		 mov	 edx, DWORD PTR [ecx+256]
  00c89	c7 44 3a 18 00
	00 00 00	 mov	 DWORD PTR [edx+edi+24], 0
$LN14@LoadData:

; 782  : 	{
; 783  : 		for(DWORD iIDX = 0; iIDX < m_vtScheduleData.size(); iIDX++)

  00c91	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00c97	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  00c9d	2b 88 00 01 00
	00		 sub	 ecx, DWORD PTR [eax+256]
  00ca3	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00ca8	f7 e9		 imul	 ecx
  00caa	03 d1		 add	 edx, ecx
  00cac	c1 fa 04	 sar	 edx, 4
  00caf	8b c2		 mov	 eax, edx
  00cb1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00cb4	8b f3		 mov	 esi, ebx
  00cb6	03 c2		 add	 eax, edx
  00cb8	83 c7 1c	 add	 edi, 28			; 0000001cH
  00cbb	3b f0		 cmp	 esi, eax
  00cbd	0f 82 3d ff ff
	ff		 jb	 $LL15@LoadData
$LN13@LoadData:

; 805  : 			}
; 806  : 		}
; 807  : 	}
; 808  : 
; 809  : 	LeaveCriticalSection(&m_critScheduleData);

  00cc3	8b bd ec fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00cc9	8d 87 10 01 00
	00		 lea	 eax, DWORD PTR [edi+272]
  00ccf	50		 push	 eax
  00cd0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 810  : 
; 811  : 	EnterCriticalSection(&m_critNpcData);

  00cd6	81 c7 38 01 00
	00		 add	 edi, 312		; 00000138H
  00cdc	57		 push	 edi
  00cdd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 812  : 
; 813  : 	if(!vtNpcData.empty())

  00ce3	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _vtNpcData$[ebp+4]
  00ce9	39 85 bc fe ff
	ff		 cmp	 DWORD PTR _vtNpcData$[ebp], eax
  00cef	74 26		 je	 SHORT $LN5@LoadData

; 814  : 	{
; 815  : 		vector<_CS_NPC_DATA>::iterator it;
; 816  : 		for( it = vtNpcData.begin();it != vtNpcData.end(); it++)

  00cf1	8b b5 bc fe ff
	ff		 mov	 esi, DWORD PTR _vtNpcData$[ebp]
  00cf7	8b 9d ec fe ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  00cfd	8d 49 00	 npad	 3
$LL357@LoadData:

; 817  : 		{
; 818  : 			m_vtNpcData.push_back(*it);

  00d00	56		 push	 esi
  00d01	8d 8b 28 01 00
	00		 lea	 ecx, DWORD PTR [ebx+296]
  00d07	e8 00 00 00 00	 call	 ?push_back@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXABU_CS_NPC_DATA@@@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::push_back
  00d0c	83 c6 74	 add	 esi, 116		; 00000074H
  00d0f	3b b5 c0 fe ff
	ff		 cmp	 esi, DWORD PTR _vtNpcData$[ebp+4]
  00d15	75 e9		 jne	 SHORT $LL357@LoadData
$LN5@LoadData:

; 819  : 		}
; 820  : 	}
; 821  : 
; 822  : 	LeaveCriticalSection(&m_critNpcData);

  00d17	57		 push	 edi
  00d18	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 823  : 
; 824  : 	vector<_CS_SCHEDULE_DATA>::iterator it1 = m_vtScheduleData.begin();

  00d1e	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00d24	8b b0 00 01 00
	00		 mov	 esi, DWORD PTR [eax+256]

; 825  : 
; 826  : 	while(it1 != m_vtScheduleData.end())

  00d2a	8b 80 04 01 00
	00		 mov	 eax, DWORD PTR [eax+260]
  00d30	3b f0		 cmp	 esi, eax
  00d32	74 54		 je	 SHORT $LN3@LoadData
$LL4@LoadData:

; 827  : 	{
; 828  : 		_CS_SCHEDULE_DATA stTEMP = *it1;

  00d34	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00d37	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]

; 829  : 		char szTEMP[0x100] = {0};

  00d3a	68 ff 00 00 00	 push	 255			; 000000ffH
  00d3f	8d 8d f1 fe ff
	ff		 lea	 ecx, DWORD PTR _szTEMP$185337[ebp+1]
  00d45	6a 00		 push	 0
  00d47	51		 push	 ecx
  00d48	c6 85 f0 fe ff
	ff 00		 mov	 BYTE PTR _szTEMP$185337[ebp], 0
  00d4f	e8 00 00 00 00	 call	 _memset

; 830  : 
; 831  : 		wsprintf(szTEMP,"STT:%d, DAY:%d, HOUR:%d, MIN:%d, GAP:%d",
; 832  : 			stTEMP.m_iSTATE,stTEMP.m_iADD_DAY,stTEMP.m_iADD_HOUR,stTEMP.m_iADD_MIN,stTEMP.m_iGAP_SEC);

  00d54	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00d57	50		 push	 eax
  00d58	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00d5b	50		 push	 eax
  00d5c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00d5f	50		 push	 eax
  00d60	53		 push	 ebx
  00d61	57		 push	 edi
  00d62	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _szTEMP$185337[ebp]
  00d68	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BMKPKBCC@STT?3?$CFd?0?5DAY?3?$CFd?0?5HOUR?3?$CFd?0?5MIN?3?$CFd?0@
  00d6d	52		 push	 edx
  00d6e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00d74	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]

; 833  : 
; 834  : //		OutputDebugString(szTEMP);
; 835  : 		it1++;

  00d7a	83 c6 1c	 add	 esi, 28			; 0000001cH
  00d7d	83 c4 28	 add	 esp, 40			; 00000028H
  00d80	3b b0 04 01 00
	00		 cmp	 esi, DWORD PTR [eax+260]
  00d86	75 ac		 jne	 SHORT $LL4@LoadData
$LN3@LoadData:

; 836  : 	}
; 837  : 
; 838  : 	vector<_CS_NPC_DATA>::iterator it2 = m_vtNpcData.begin();

  00d88	8b bd ec fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00d8e	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]

; 839  : 
; 840  : 	while(it2 != m_vtNpcData.end())

  00d94	3b b7 2c 01 00
	00		 cmp	 esi, DWORD PTR [edi+300]
  00d9a	0f 84 ba 00 00
	00		 je	 $LN1@LoadData
  00da0	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__wsprintfA
  00da6	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL2@LoadData:

; 841  : 	{
; 842  : 
; 843  : 		_CS_NPC_DATA stTEMP = *it2;

  00db0	56		 push	 esi
  00db1	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _stTEMP$185350[ebp]
  00db7	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 844  : 		char szTEMP[0x100] = {0};

  00dbc	68 ff 00 00 00	 push	 255			; 000000ffH
  00dc1	8d 8d f1 fe ff
	ff		 lea	 ecx, DWORD PTR _szTEMP$185351[ebp+1]
  00dc7	6a 00		 push	 0
  00dc9	51		 push	 ecx
  00dca	c6 85 f0 fe ff
	ff 00		 mov	 BYTE PTR _szTEMP$185351[ebp], 0
  00dd1	e8 00 00 00 00	 call	 _memset
  00dd6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 845  : 
; 846  : 		wsprintf(szTEMP,"NUM:%d, IDX:%d, DBSAVE:%s, SIDE:%d, DFLEVEL:%d, RGLEVEL:%d, MXHP:%d, (%d,%d)-(%d,%d), DIR:%d",
; 847  : 			stTEMP.m_iNPC_NUM,stTEMP.m_iNPC_INDEX,(stTEMP.m_bNPC_DBSAVE != 0) ? "YES" : "NO",stTEMP.m_iNPC_SIDE,stTEMP.m_iNPC_DF_LEVEL,
; 848  : 			stTEMP.m_iNPC_RG_LEVEL,stTEMP.m_iNPC_MAXHP,stTEMP.m_iNPC_SX,stTEMP.m_iNPC_SY,stTEMP.m_iNPC_DX,stTEMP.m_iNPC_DY,stTEMP.m_iNPC_DIR);

  00dd9	83 bd d0 fd ff
	ff 00		 cmp	 DWORD PTR _stTEMP$185350[ebp+16], 0
  00de0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03IPHJCBHH@YES?$AA@
  00de5	75 05		 jne	 SHORT $LN90@LoadData
  00de7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02NFLNFON@NO?$AA@
$LN90@LoadData:
  00dec	8b 95 fc fd ff
	ff		 mov	 edx, DWORD PTR _stTEMP$185350[ebp+60]
  00df2	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _stTEMP$185350[ebp+56]
  00df8	52		 push	 edx
  00df9	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _stTEMP$185350[ebp+52]
  00dff	51		 push	 ecx
  00e00	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _stTEMP$185350[ebp+48]
  00e06	52		 push	 edx
  00e07	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _stTEMP$185350[ebp+44]
  00e0d	51		 push	 ecx
  00e0e	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR _stTEMP$185350[ebp+36]
  00e14	52		 push	 edx
  00e15	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR _stTEMP$185350[ebp+32]
  00e1b	51		 push	 ecx
  00e1c	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _stTEMP$185350[ebp+28]
  00e22	52		 push	 edx
  00e23	8b 95 d4 fd ff
	ff		 mov	 edx, DWORD PTR _stTEMP$185350[ebp+20]
  00e29	51		 push	 ecx
  00e2a	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR _stTEMP$185350[ebp+8]
  00e30	52		 push	 edx
  00e31	50		 push	 eax
  00e32	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _stTEMP$185350[ebp+12]
  00e38	50		 push	 eax
  00e39	51		 push	 ecx
  00e3a	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _szTEMP$185351[ebp]
  00e40	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@EDNKEGKL@NUM?3?$CFd?0?5IDX?3?$CFd?0?5DBSAVE?3?$CFs?0?5SIDE?3@
  00e45	52		 push	 edx
  00e46	ff d3		 call	 ebx

; 849  : //		OutputDebugString(szTEMP);
; 850  : 		it2++;

  00e48	83 c6 74	 add	 esi, 116		; 00000074H
  00e4b	83 c4 38	 add	 esp, 56			; 00000038H
  00e4e	3b b7 2c 01 00
	00		 cmp	 esi, DWORD PTR [edi+300]
  00e54	0f 85 56 ff ff
	ff		 jne	 $LL2@LoadData
$LN1@LoadData:

; 851  : 	}
; 852  : 
; 853  : 	m_bFileDataLoadOK = 1;

  00e5a	c7 47 0c 01 00
	00 00		 mov	 DWORD PTR [edi+12], 1

; 854  : return true;

  00e61	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _mpNpcDataCheck$[ebp+4]
  00e67	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e69	50		 push	 eax
  00e6a	51		 push	 ecx
  00e6b	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR $T230452[ebp]
  00e71	50		 push	 eax
  00e72	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  00e78	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00e7c	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
  00e81	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _mpNpcDataCheck$[ebp+4]
  00e87	51		 push	 ecx
  00e88	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00e8d	8b bd bc fe ff
	ff		 mov	 edi, DWORD PTR _vtNpcData$[ebp]
  00e93	83 c4 04	 add	 esp, 4
  00e96	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00e9a	85 ff		 test	 edi, edi
  00e9c	74 32		 je	 SHORT $LN510@LoadData
  00e9e	8b 9d c0 fe ff
	ff		 mov	 ebx, DWORD PTR _vtNpcData$[ebp+4]
  00ea4	8b f7		 mov	 esi, edi
  00ea6	3b fb		 cmp	 edi, ebx
  00ea8	74 1d		 je	 SHORT $LN505@LoadData
  00eaa	8d 9b 00 00 00
	00		 npad	 6
$LL507@LoadData:
  00eb0	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _vtNpcData$[ebp+12]
  00eb6	56		 push	 esi
  00eb7	52		 push	 edx
  00eb8	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
  00ebd	83 c6 74	 add	 esi, 116		; 00000074H
  00ec0	83 c4 08	 add	 esp, 8
  00ec3	3b f3		 cmp	 esi, ebx
  00ec5	75 e9		 jne	 SHORT $LL507@LoadData
$LN505@LoadData:
  00ec7	57		 push	 edi
  00ec8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00ecd	83 c4 04	 add	 esp, 4
$LN510@LoadData:
  00ed0	8b 9d d0 fe ff
	ff		 mov	 ebx, DWORD PTR _vtScheduleData$[ebp]
  00ed6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00edd	85 db		 test	 ebx, ebx
  00edf	74 2f		 je	 SHORT $LN532@LoadData
  00ee1	8b bd d4 fe ff
	ff		 mov	 edi, DWORD PTR _vtScheduleData$[ebp+4]
  00ee7	8b f3		 mov	 esi, ebx
  00ee9	3b df		 cmp	 ebx, edi
  00eeb	74 1a		 je	 SHORT $LN527@LoadData
  00eed	8d 49 00	 npad	 3
$LL529@LoadData:
  00ef0	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _vtScheduleData$[ebp+12]
  00ef6	56		 push	 esi
  00ef7	50		 push	 eax
  00ef8	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
  00efd	83 c6 1c	 add	 esi, 28			; 0000001cH
  00f00	83 c4 08	 add	 esp, 8
  00f03	3b f7		 cmp	 esi, edi
  00f05	75 e9		 jne	 SHORT $LL529@LoadData
$LN527@LoadData:
  00f07	53		 push	 ebx
  00f08	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00f0d	83 c4 04	 add	 esp, 4
$LN532@LoadData:
  00f10	b8 01 00 00 00	 mov	 eax, 1
  00f15	e9 cb 01 00 00	 jmp	 $LN87@LoadData
$LN551@LoadData:

; 363  : 				{
; 364  : 					LogAddC(2,"[CastleSiege] CCastleSiege::LoadData() - iCastleSiegeCycle <= 0 : %d",
; 365  : 						iCastleSiegeCycle);

  00f1a	50		 push	 eax
  00f1b	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@IHJKNGKK@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  00f20	6a 02		 push	 2
  00f22	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00f28	83 c4 0c	 add	 esp, 12			; 0000000cH

; 366  : 					return false;

  00f2b	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _mpNpcDataCheck$[ebp+4]
  00f31	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f33	50		 push	 eax
  00f34	51		 push	 ecx
  00f35	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T229463[ebp]
  00f3b	51		 push	 ecx
  00f3c	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  00f42	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00f46	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
  00f4b	8b 95 b0 fe ff
	ff		 mov	 edx, DWORD PTR _mpNpcDataCheck$[ebp+4]
  00f51	52		 push	 edx
  00f52	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00f57	83 c4 04	 add	 esp, 4
$LN641@LoadData:
  00f5a	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vtNpcData$[ebp]
  00f60	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00f64	e8 00 00 00 00	 call	 ??1?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::~vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
  00f69	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _vtScheduleData$[ebp]
  00f6f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00f76	e8 00 00 00 00	 call	 ??1?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::~vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
  00f7b	e9 63 01 00 00	 jmp	 $LN638@LoadData
$LN547@LoadData:

; 404  : 							{
; 405  : 								LogAddC(2,"[CastleSiege] CCastleSiege::LoadData() - Same State Exist : %d",
; 406  : 									iSTATE);

  00f80	53		 push	 ebx
  00f81	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@MLFJONJF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
$LN642@LoadData:
  00f86	6a 02		 push	 2
  00f88	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00f8e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 407  : 								return false;

  00f91	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  00f97	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00f9b	e8 00 00 00 00	 call	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  00fa0	eb b8		 jmp	 SHORT $LN641@LoadData
$LN554@LoadData:

; 494  : 				{
; 495  : 					MsgBox("[CastleSiege] CCastleSiege::LoadData() - Data Fail (iNPC_NUM < 0)");

  00fa2	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@HADLEKAG@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  00fa7	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00fac	83 c4 04	 add	 esp, 4
  00faf	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  00fb5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00fb9	e8 00 00 00 00	 call	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  00fbe	eb 9a		 jmp	 SHORT $LN641@LoadData
$LN555@LoadData:

; 500  : 				{
; 501  : 					MsgBox("[CastleSiege] CCastleSiege::LoadData() - Data Fail (iNPC_INDEX < 0)");

  00fc0	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@KFKCLICN@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  00fc5	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00fca	83 c4 04	 add	 esp, 4
  00fcd	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  00fd3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00fd7	e8 00 00 00 00	 call	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  00fdc	e9 79 ff ff ff	 jmp	 $LN641@LoadData
$LN556@LoadData:

; 506  : 				{
; 507  : 					MsgBox("[CastleSiege] CCastleSiege::LoadData() - Data Fail (iNPC_SIDE < 0)");

  00fe1	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@GBNKLFMD@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  00fe6	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00feb	83 c4 04	 add	 esp, 4
  00fee	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  00ff4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00ff8	e8 00 00 00 00	 call	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  00ffd	e9 58 ff ff ff	 jmp	 $LN641@LoadData
$LN557@LoadData:

; 512  : 				{
; 513  : 					MsgBox("[CastleSiege] CCastleSiege::LoadData() - Data Fail (iNPC_DF_LEVEL < 0)");

  01002	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@KEGDECC@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  01007	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0100c	83 c4 04	 add	 esp, 4
  0100f	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  01015	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01019	e8 00 00 00 00	 call	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  0101e	e9 37 ff ff ff	 jmp	 $LN641@LoadData
$LN558@LoadData:

; 518  : 				{
; 519  : 					MsgBox("[CastleSiege] CCastleSiege::LoadData() - Data Fail (iNPC_RG_LEVEL < 0)");

  01023	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@EJKAJKHN@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  01028	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0102d	83 c4 04	 add	 esp, 4
  01030	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  01036	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0103a	e8 00 00 00 00	 call	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  0103f	e9 16 ff ff ff	 jmp	 $LN641@LoadData
$LN559@LoadData:

; 524  : 				{
; 525  : 					MsgBox("[CastleSiege] CCastleSiege::LoadData() - Data Fail (iNPC_MAXHP < 0)");

  01044	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@GGOHKPB@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  01049	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0104e	83 c4 04	 add	 esp, 4
  01051	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  01057	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0105b	e8 00 00 00 00	 call	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  01060	e9 f5 fe ff ff	 jmp	 $LN641@LoadData
$LN560@LoadData:

; 530  : 				{
; 531  : 					MsgBox("[CastleSiege] CCastleSiege::LoadData() - Data Fail (iNPC_SX < 0)");

  01065	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@BJPGNABL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  0106a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0106f	83 c4 04	 add	 esp, 4
  01072	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  01078	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0107c	e8 00 00 00 00	 call	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  01081	e9 d4 fe ff ff	 jmp	 $LN641@LoadData
$LN561@LoadData:

; 536  : 				{
; 537  : 					MsgBox("[CastleSiege] CCastleSiege::LoadData() - Data Fail (iNPC_SY < 0)");

  01086	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@LPIBNLKP@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  0108b	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  01090	83 c4 04	 add	 esp, 4
  01093	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  01099	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0109d	e8 00 00 00 00	 call	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  010a2	e9 b3 fe ff ff	 jmp	 $LN641@LoadData
$LN562@LoadData:

; 546  : 				{
; 547  : 					MsgBox("[CastleSiege] CCastleSiege::LoadData() - Same Npc Key Exist : NUM:%d-IDX:%d",iNPC_NUM,iNPC_INDEX);

  010a7	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _iNPC_INDEX$184383[ebp]
  010ad	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _iNPC_NUM$184382[ebp]
  010b3	50		 push	 eax
  010b4	51		 push	 ecx
  010b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OAPODDDJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Load@
  010ba	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  010bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  010c2	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  010c8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  010cc	e8 00 00 00 00	 call	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
  010d1	e9 84 fe ff ff	 jmp	 $LN641@LoadData
$LN85@LoadData:

; 303  : 	{
; 304  : 		MsgBox("[CastleSiege] file load error - File Name Error");

  010d6	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GPPHEKGF@?$FLCastleSiege?$FN?5file?5load?5error?5?9?5@
  010db	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  010e0	83 c4 04	 add	 esp, 4
$LN638@LoadData:

; 305  : 		return false;

  010e3	33 c0		 xor	 eax, eax
$LN87@LoadData:

; 855  : }

  010e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  010e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  010ef	59		 pop	 ecx
  010f0	5f		 pop	 edi
  010f1	5e		 pop	 esi
  010f2	5b		 pop	 ebx
  010f3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  010f6	33 cd		 xor	 ecx, ebp
  010f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  010fd	8b e5		 mov	 esp, ebp
  010ff	5d		 pop	 ebp
  01100	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$0:
  00000	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _vtScheduleData$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::~vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$1:
  0000b	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _vtNpcData$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::~vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$2:
  00016	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$3:
  00021	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR _pScheduleData$184362[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1_CS_SCHEDULE_DATA@@UAE@XZ ; _CS_SCHEDULE_DATA::~_CS_SCHEDULE_DATA
__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$4:
  0002c	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR _pScheduleDataInsert$184379[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1_CS_SCHEDULE_DATA@@UAE@XZ ; _CS_SCHEDULE_DATA::~_CS_SCHEDULE_DATA
__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$5:
  00037	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _pNpcDataInsert$185075[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$11:
  00042	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
__unwindfunclet$?LoadData@CCastleSiege@@QAEHPAD@Z$9:
  0004d	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mpNpcDataCheck$[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
__ehhandler$?LoadData@CCastleSiege@@QAEHPAD@Z:
  00058	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005f	8b 8a 98 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-616]
  00065	33 c8		 xor	 ecx, eax
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006f	33 c8		 xor	 ecx, eax
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@CCastleSiege@@QAEHPAD@Z
  0007b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@CCastleSiege@@QAEHPAD@Z ENDP			; CCastleSiege::LoadData
PUBLIC	??_C@_0FF@IKKNGKIJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ ; `string'
PUBLIC	??_C@_0EB@PKIFNIAM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ ; `string'
PUBLIC	?SetState_STARTSIEGE@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetState_STARTSIEGE
;	COMDAT ??_C@_0FF@IKKNGKIJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
CONST	SEGMENT
??_C@_0FF@IKKNGKIJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ DB '[Castle'
	DB	'Siege] CCastleSiege::SetState_STARTSIEGE() - CheckAttackGuild'
	DB	'Exist() == FALSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@PKIFNIAM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
CONST	SEGMENT
??_C@_0EB@PKIFNIAM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ DB '[Castle'
	DB	'Siege] CCastleSiege::SetState_STARTSIEGE() - iGAP_SEC < 0', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_STARTSIEGE@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bSetRemainMsec$ = 8					; size = 4
?SetState_STARTSIEGE@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_STARTSIEGE, COMDAT
; _this$ = ecx

; 1738 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1739 : 	if(bSetRemainMsec != FALSE)

  00005	33 db		 xor	 ebx, ebx
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx
  0000a	39 5d 08	 cmp	 DWORD PTR _bSetRemainMsec$[ebp], ebx
  0000d	74 26		 je	 SHORT $LN5@SetState_S

; 1740 : 	{
; 1741 : 		int iGAP_SEC = GetStateGapSec(CASTLESIEGE_STATE_STARTSIEGE);

  0000f	6a 07		 push	 7
  00011	e8 00 00 00 00	 call	 ?GetStateGapSec@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetStateGapSec
  00016	8b f8		 mov	 edi, eax

; 1742 : 
; 1743 : 		if(iGAP_SEC < 0)

  00018	3b fb		 cmp	 edi, ebx
  0001a	7d 10		 jge	 SHORT $LN4@SetState_S

; 1744 : 		{
; 1745 : 			m_bDoRun = 0;
; 1746 : 			MsgBox("[CastleSiege] CCastleSiege::SetState_STARTSIEGE() - iGAP_SEC < 0");

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@PKIFNIAM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
  00021	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00024	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00029	83 c4 04	 add	 esp, 4
$LN4@SetState_S:

; 1747 : 		}
; 1748 : 
; 1749 : 		m_iCS_REMAIN_MSEC = iGAP_SEC * 1000;

  0002c	69 ff e8 03 00
	00		 imul	 edi, 1000		; 000003e8H
  00032	89 7e 68	 mov	 DWORD PTR [esi+104], edi
$LN5@SetState_S:

; 1750 : 	}
; 1751 : 
; 1752 : 	m_bCastleTowerAccessable = FALSE;
; 1753 : 	m_bRegCrownAvailable = FALSE;
; 1754 : 	m_iCastleCrownAccessUser = -1;
; 1755 : 	m_btCastleCrownAccessUserX = 0;
; 1756 : 	m_btCastleCrownAccessUserY = 0;
; 1757 : 	m_iCastleSwitchAccessUser1 = -1;
; 1758 : 	m_iCastleSwitchAccessUser2 = -1;
; 1759 : 	m_dwCrownAccessTime = 0;
; 1760 : 	m_dwCHECK_GATE_ALIVE_COUNT = 0;
; 1761 : 	m_dwCS_STARTTIME_TICK_COUNT = 0;
; 1762 : 	m_dwCS_LEFTTIME_TICK_COUNT = GetTickCount();

  00035	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0003b	83 c8 ff	 or	 eax, -1
  0003e	89 9e e4 01 00
	00		 mov	 DWORD PTR [esi+484], ebx
  00044	89 9e e8 01 00
	00		 mov	 DWORD PTR [esi+488], ebx
  0004a	89 86 f0 01 00
	00		 mov	 DWORD PTR [esi+496], eax
  00050	66 89 9e f4 01
	00 00		 mov	 WORD PTR [esi+500], bx
  00057	89 86 f8 01 00
	00		 mov	 DWORD PTR [esi+504], eax
  0005d	89 86 fc 01 00
	00		 mov	 DWORD PTR [esi+508], eax
  00063	89 9e 00 02 00
	00		 mov	 DWORD PTR [esi+512], ebx
  00069	89 9e 9c 00 00
	00		 mov	 DWORD PTR [esi+156], ebx
  0006f	89 9e b0 00 00
	00		 mov	 DWORD PTR [esi+176], ebx
  00075	ff d7		 call	 edi
  00077	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax

; 1763 : 	m_dwCS_JOINSIDE_REFRESH_TICK_COUNT = GetTickCount();

  0007d	ff d7		 call	 edi
  0007f	89 86 a0 00 00
	00		 mov	 DWORD PTR [esi+160], eax

; 1764 : 	m_dwCS_JOINSIDE_REFRESH_TOTAL_COUNT = 0;

  00085	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx

; 1765 : 	m_dwCS_MINIMAP_SEND_TICK_COUNT = GetTickCount();

  0008b	ff d7		 call	 edi
  0008d	89 86 a8 00 00
	00		 mov	 DWORD PTR [esi+168], eax

; 1766 : 
; 1767 : 	memset(m_szMiddleWinnerGuild,0x00,sizeof(m_szMiddleWinnerGuild));

  00093	33 c0		 xor	 eax, eax
  00095	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax
  0009b	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
  000a1	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax

; 1768 : 
; 1769 : 	if(CheckAttackGuildExist() == FALSE)

  000a7	8b ce		 mov	 ecx, esi
  000a9	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
  000af	e8 00 00 00 00	 call	 ?CheckAttackGuildExist@CCastleSiege@@QAEHXZ ; CCastleSiege::CheckAttackGuildExist

; 1770 : 	{
; 1771 : 		CheckCastleSiegeResult();

  000b4	8b ce		 mov	 ecx, esi
  000b6	85 c0		 test	 eax, eax
  000b8	75 27		 jne	 SHORT $LN3@SetState_S
  000ba	e8 00 00 00 00	 call	 ?CheckCastleSiegeResult@CCastleSiege@@QAEHXZ ; CCastleSiege::CheckCastleSiegeResult

; 1772 : 		SetState(CASTLESIEGE_STATE_ENDSIEGE,TRUE);

  000bf	6a 01		 push	 1
  000c1	6a 08		 push	 8
  000c3	8b ce		 mov	 ecx, esi
  000c5	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState

; 1773 : 		LogAddC(2,"[CastleSiege] CCastleSiege::SetState_STARTSIEGE() - CheckAttackGuildExist() == FALSE");

  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@IKKNGKIJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
  000cf	6a 02		 push	 2
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000d7	83 c4 08	 add	 esp, 8
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx

; 1793 : 	}
; 1794 : }

  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
$LN3@SetState_S:

; 1774 : 	}
; 1775 : 	else
; 1776 : 	{
; 1777 : 		StoreDbNpc();

  000e1	e8 00 00 00 00	 call	 ?StoreDbNpc@CCastleSiege@@QAEXXZ ; CCastleSiege::StoreDbNpc

; 1778 : 		ClearNonDbNPC();

  000e6	8b ce		 mov	 ecx, esi
  000e8	e8 00 00 00 00	 call	 ?ClearNonDbNPC@CCastleSiege@@QAEXXZ ; CCastleSiege::ClearNonDbNPC

; 1779 : 		CheckReviveNonDbNPC();

  000ed	8b ce		 mov	 ecx, esi
  000ef	e8 00 00 00 00	 call	 ?CheckReviveNonDbNPC@CCastleSiege@@QAEXXZ ; CCastleSiege::CheckReviveNonDbNPC

; 1780 : 
; 1781 : 		if(CheckGuardianStatueExist() == FALSE)

  000f4	8b ce		 mov	 ecx, esi
  000f6	e8 00 00 00 00	 call	 ?CheckGuardianStatueExist@CCastleSiege@@QAEHXZ ; CCastleSiege::CheckGuardianStatueExist
  000fb	85 c0		 test	 eax, eax
  000fd	75 10		 jne	 SHORT $LN1@SetState_S

; 1782 : 		{
; 1783 : 			ClearCastleTowerBarrier();

  000ff	8b ce		 mov	 ecx, esi
  00101	e8 00 00 00 00	 call	 ?ClearCastleTowerBarrier@CCastleSiege@@QAEXXZ ; CCastleSiege::ClearCastleTowerBarrier

; 1784 : 			SetCastleTowerAccessable(TRUE);

  00106	6a 01		 push	 1
  00108	8b ce		 mov	 ecx, esi
  0010a	e8 00 00 00 00	 call	 ?SetCastleTowerAccessable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetCastleTowerAccessable
$LN1@SetState_S:

; 1785 : 		}
; 1786 : 
; 1787 : 		AdjustDbNpcLevel();

  0010f	8b ce		 mov	 ecx, esi
  00111	e8 00 00 00 00	 call	 ?AdjustDbNpcLevel@CCastleSiege@@QAEXXZ ; CCastleSiege::AdjustDbNpcLevel

; 1788 : 		SetAllCastleGateState(FALSE);

  00116	53		 push	 ebx
  00117	8b ce		 mov	 ecx, esi
  00119	e8 00 00 00 00	 call	 ?SetAllCastleGateState@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetAllCastleGateState

; 1789 : 		SetAllUserCsJoinSide();

  0011e	8b ce		 mov	 ecx, esi
  00120	e8 00 00 00 00	 call	 ?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ ; CCastleSiege::SetAllUserCsJoinSide

; 1790 : 		SavePcRoomUserList();
; 1791 : 		ReSpawnEnemyUser(TRUE);

  00125	6a 01		 push	 1
  00127	8b ce		 mov	 ecx, esi
  00129	e8 00 00 00 00	 call	 ?ReSpawnEnemyUser@CCastleSiege@@QAEXH@Z ; CCastleSiege::ReSpawnEnemyUser

; 1792 : 		NotifyAllUserCsStartState(1);

  0012e	6a 01		 push	 1
  00130	8b ce		 mov	 ecx, esi
  00132	e8 00 00 00 00	 call	 ?NotifyAllUserCsStartState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyAllUserCsStartState
  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx

; 1793 : 	}
; 1794 : }

  0013a	5d		 pop	 ebp
  0013b	c2 04 00	 ret	 4
?SetState_STARTSIEGE@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_STARTSIEGE
_TEXT	ENDS
PUBLIC	?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z ; CCastleSiege::SetCastleNpcData
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
xdata$x	SEGMENT
__unwindtable$?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z$1
__ehfuncinfo$?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z
_TEXT	SEGMENT
_pNpcData2$186546 = -136				; size = 116
_$S8$186542 = -136					; size = 116
tv493 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bExist$186535 = 8					; size = 4
_lpMsg$ = 8						; size = 4
tv361 = 12						; size = 4
_iCOUNT$ = 12						; size = 4
?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z PROC ; CCastleSiege::SetCastleNpcData, COMDAT
; _this$ = ecx

; 2639 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 2640 : 	if(m_iCastleDataLoadState != 3)

  0002d	83 7f 1c 03	 cmp	 DWORD PTR [edi+28], 3
  00031	74 26		 je	 SHORT $LN10@SetCastleN@2

; 2641 : 	{
; 2642 : 		LogAddC(2,"[CastleSiege] CCastleSiege::SetCastleInitData() - m_iCastleDataLoadState != CASTLESIEGE_DATALOAD_3");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0GD@ICLIBPMM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@
  00038	6a 02		 push	 2
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00040	83 c4 08	 add	 esp, 8
$LN168@SetCastleN@2:

; 2643 : 		return false;

  00043	33 c0		 xor	 eax, eax

; 2735 : }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
$LN10@SetCastleN@2:

; 2644 : 	}
; 2645 : 
; 2646 : 	if(lpMsg == NULL)

  00059	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]
  0005c	85 f6		 test	 esi, esi

; 2647 : 		return false;

  0005e	74 e3		 je	 SHORT $LN168@SetCastleN@2

; 2648 : 
; 2649 : 	if(iCOUNT < 0)

  00060	8b 45 0c	 mov	 eax, DWORD PTR _iCOUNT$[ebp]
  00063	85 c0		 test	 eax, eax

; 2650 : 		return false;

  00065	78 dc		 js	 SHORT $LN168@SetCastleN@2

; 2651 : 
; 2652 : 	vector<_CS_NPC_DATA>::iterator it;
; 2653 : 
; 2654 : 	for(int iNPC_COUNT = 0; iNPC_COUNT < iCOUNT; iNPC_COUNT++)

  00067	0f 8e 6e 01 00
	00		 jle	 $LN5@SetCastleN@2
  0006d	8d 9f 38 01 00
	00		 lea	 ebx, DWORD PTR [edi+312]
  00073	83 c6 08	 add	 esi, 8
  00076	89 45 0c	 mov	 DWORD PTR tv361[ebp], eax
  00079	eb 08		 jmp	 SHORT $LN7@SetCastleN@2
  0007b	eb 03 8d 49 00	 npad	 5
$LL164@SetCastleN@2:
  00080	8b 7d f0	 mov	 edi, DWORD PTR _this$[ebp]
$LN7@SetCastleN@2:

; 2655 : 	{
; 2656 : 		EnterCriticalSection(&m_critNpcData);

  00083	53		 push	 ebx
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 2657 : 
; 2658 : 		it = m_vtNpcData.begin();
; 2659 : 
; 2660 : 		int bExist = FALSE;
; 2661 : 
; 2662 : 		while(it != m_vtNpcData.end())

  0008a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 80 2c 01 00
	00		 mov	 eax, DWORD PTR [eax+300]
  00093	8b bf 28 01 00
	00		 mov	 edi, DWORD PTR [edi+296]
  00099	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _bExist$186535[ebp], 0
  000a0	89 45 ec	 mov	 DWORD PTR tv493[ebp], eax
  000a3	3b f8		 cmp	 edi, eax
  000a5	74 72		 je	 SHORT $LN3@SetCastleN@2
  000a7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL4@SetCastleN@2:

; 2663 : 		{
; 2664 : 			_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  000b0	57		 push	 edi
  000b1	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _$S8$186542[ebp]
  000b7	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 2665 : 
; 2666 : 			if(pNpcData.m_iNPC_NUM == lpMsg[iNPC_COUNT].iNpcNumber && pNpcData.m_iNPC_INDEX == lpMsg[iNPC_COUNT].iNpcIndex)

  000bc	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  000bf	39 45 80	 cmp	 DWORD PTR _$S8$186542[ebp+8], eax
  000c2	75 08		 jne	 SHORT $LN2@SetCastleN@2
  000c4	8b 4d 84	 mov	 ecx, DWORD PTR _$S8$186542[ebp+12]
  000c7	3b 4e fc	 cmp	 ecx, DWORD PTR [esi-4]
  000ca	74 0a		 je	 SHORT $LN161@SetCastleN@2
$LN2@SetCastleN@2:

; 2680 : 				break;
; 2681 : 			}
; 2682 : 
; 2683 : 			it++;

  000cc	83 c7 74	 add	 edi, 116		; 00000074H
  000cf	3b 7d ec	 cmp	 edi, DWORD PTR tv493[ebp]
  000d2	75 dc		 jne	 SHORT $LL4@SetCastleN@2

; 2665 : 
; 2666 : 			if(pNpcData.m_iNPC_NUM == lpMsg[iNPC_COUNT].iNpcNumber && pNpcData.m_iNPC_INDEX == lpMsg[iNPC_COUNT].iNpcIndex)

  000d4	eb 43		 jmp	 SHORT $LN3@SetCastleN@2
$LN161@SetCastleN@2:

; 2667 : 			{
; 2668 : 				it->m_iNPC_LIVE = TRUE;

  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	89 47 68	 mov	 DWORD PTR [edi+104], eax

; 2669 : 				it->m_iNPC_DF_LEVEL = lpMsg[iNPC_COUNT].iNpcDfLevel;

  000de	8b 16		 mov	 edx, DWORD PTR [esi]
  000e0	89 57 1c	 mov	 DWORD PTR [edi+28], edx

; 2670 : 				it->m_iNPC_RG_LEVEL = lpMsg[iNPC_COUNT].iNpcRgLevel;

  000e3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000e6	89 4f 20	 mov	 DWORD PTR [edi+32], ecx

; 2671 : 				it->m_iNPC_MAXHP = lpMsg[iNPC_COUNT].iNpcMaxHp;

  000e9	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  000ec	89 57 24	 mov	 DWORD PTR [edi+36], edx

; 2672 : 				it->m_iNPC_HP = lpMsg[iNPC_COUNT].iNpcHp;

  000ef	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000f2	89 4f 28	 mov	 DWORD PTR [edi+40], ecx

; 2673 : 				it->m_iNPC_SX = lpMsg[iNPC_COUNT].btNpcX;

  000f5	0f b6 56 10	 movzx	 edx, BYTE PTR [esi+16]
  000f9	89 57 2c	 mov	 DWORD PTR [edi+44], edx

; 2674 : 				it->m_iNPC_SY = lpMsg[iNPC_COUNT].btNpcY;

  000fc	0f b6 4e 11	 movzx	 ecx, BYTE PTR [esi+17]
  00100	89 4f 30	 mov	 DWORD PTR [edi+48], ecx

; 2675 : 				it->m_iNPC_DX = -1;

  00103	83 c9 ff	 or	 ecx, -1
  00106	89 4f 34	 mov	 DWORD PTR [edi+52], ecx

; 2676 : 				it->m_iNPC_DY = -1;

  00109	89 4f 38	 mov	 DWORD PTR [edi+56], ecx

; 2677 : 				it->m_iNPC_DIR = lpMsg[iNPC_COUNT].btNpcDIR;

  0010c	0f b6 56 12	 movzx	 edx, BYTE PTR [esi+18]
  00110	89 57 3c	 mov	 DWORD PTR [edi+60], edx

; 2678 : 				it->m_iNPC_SIDE = 1;

  00113	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 2679 : 				bExist = TRUE;

  00116	89 45 08	 mov	 DWORD PTR _bExist$186535[ebp], eax
$LN3@SetCastleN@2:

; 2684 : 		}
; 2685 : 
; 2686 : 		LeaveCriticalSection(&m_critNpcData);

  00119	53		 push	 ebx
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 2687 : 
; 2688 : 		if(bExist == FALSE)

  00120	83 7d 08 00	 cmp	 DWORD PTR _bExist$186535[ebp], 0
  00124	0f 85 a5 00 00
	00		 jne	 $LN6@SetCastleN@2

; 2689 : 		{
; 2690 : 			_CS_NPC_DATA pNpcData2;

  0012a	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _pNpcData2$186546[ebp]
  00130	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@XZ	; _CS_NPC_DATA::_CS_NPC_DATA

; 2691 : 
; 2692 : 			pNpcData2.m_bIN_USE = TRUE;
; 2693 : 
; 2694 : 			pNpcData2.m_iNPC_NUM = lpMsg[iNPC_COUNT].iNpcNumber;

  00135	8b 4e f8	 mov	 ecx, DWORD PTR [esi-8]

; 2695 : 			pNpcData2.m_iNPC_INDEX = lpMsg[iNPC_COUNT].iNpcIndex;

  00138	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0013b	b8 01 00 00 00	 mov	 eax, 1
  00140	89 85 7c ff ff
	ff		 mov	 DWORD PTR _pNpcData2$186546[ebp+4], eax

; 2696 : 
; 2697 : 			pNpcData2.m_iNPC_LIVE = TRUE;

  00146	89 45 e0	 mov	 DWORD PTR _pNpcData2$186546[ebp+104], eax

; 2698 : 			pNpcData2.m_iNPC_SIDE = 1;

  00149	89 45 8c	 mov	 DWORD PTR _pNpcData2$186546[ebp+20], eax

; 2699 : 
; 2700 : 			pNpcData2.m_iNPC_BASE_DF_LEVEL = lpMsg[iNPC_COUNT].iNpcDfLevel;

  0014c	8b 06		 mov	 eax, DWORD PTR [esi]
  0014e	89 45 b8	 mov	 DWORD PTR _pNpcData2$186546[ebp+64], eax

; 2701 : 			pNpcData2.m_iNPC_DF_LEVEL = pNpcData2.m_iNPC_BASE_DF_LEVEL;

  00151	89 45 94	 mov	 DWORD PTR _pNpcData2$186546[ebp+28], eax

; 2702 : 
; 2703 : 			pNpcData2.m_iNPC_BASE_RG_LEVEL = lpMsg[iNPC_COUNT].iNpcRgLevel;

  00154	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00157	89 45 bc	 mov	 DWORD PTR _pNpcData2$186546[ebp+68], eax

; 2704 : 			pNpcData2.m_iNPC_RG_LEVEL = pNpcData2.m_iNPC_BASE_RG_LEVEL;

  0015a	89 45 98	 mov	 DWORD PTR _pNpcData2$186546[ebp+32], eax

; 2705 : 
; 2706 : 
; 2707 : 			pNpcData2.m_iNPC_BASE_MAXHP = lpMsg[iNPC_COUNT].iNpcMaxHp;

  0015d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00160	89 45 c0	 mov	 DWORD PTR _pNpcData2$186546[ebp+72], eax

; 2708 : 			pNpcData2.m_iNPC_MAXHP = pNpcData2.m_iNPC_BASE_MAXHP;

  00163	89 45 9c	 mov	 DWORD PTR _pNpcData2$186546[ebp+36], eax

; 2709 : 
; 2710 : 			pNpcData2.m_iNPC_BASE_HP = lpMsg[iNPC_COUNT].iNpcHp;

  00166	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00169	89 45 c4	 mov	 DWORD PTR _pNpcData2$186546[ebp+76], eax

; 2711 : 			pNpcData2.m_iNPC_HP = pNpcData2.m_iNPC_BASE_HP;

  0016c	89 45 a0	 mov	 DWORD PTR _pNpcData2$186546[ebp+40], eax

; 2712 : 
; 2713 : 			pNpcData2.m_iNPC_BASE_SX = lpMsg[iNPC_COUNT].btNpcX;

  0016f	0f b6 46 10	 movzx	 eax, BYTE PTR [esi+16]
  00173	89 45 c8	 mov	 DWORD PTR _pNpcData2$186546[ebp+80], eax

; 2714 : 			pNpcData2.m_iNPC_SX = pNpcData2.m_iNPC_BASE_SX;

  00176	89 45 a4	 mov	 DWORD PTR _pNpcData2$186546[ebp+44], eax

; 2715 : 
; 2716 : 			pNpcData2.m_iNPC_BASE_SY = lpMsg[iNPC_COUNT].btNpcY;

  00179	0f b6 46 11	 movzx	 eax, BYTE PTR [esi+17]
  0017d	89 45 cc	 mov	 DWORD PTR _pNpcData2$186546[ebp+84], eax

; 2717 : 			pNpcData2.m_iNPC_SY = pNpcData2.m_iNPC_BASE_SY;

  00180	89 45 a8	 mov	 DWORD PTR _pNpcData2$186546[ebp+48], eax

; 2718 : 
; 2719 : 			pNpcData2.m_iNPC_BASE_DX = -1;
; 2720 : 			pNpcData2.m_iNPC_DX = pNpcData2.m_iNPC_BASE_DX;
; 2721 : 
; 2722 : 			pNpcData2.m_iNPC_BASE_DY = -1;
; 2723 : 			pNpcData2.m_iNPC_DY = pNpcData2.m_iNPC_BASE_DY;
; 2724 : 
; 2725 : 			pNpcData2.m_iNPC_BASE_DIR = lpMsg[iNPC_COUNT].btNpcDIR;

  00183	0f b6 46 12	 movzx	 eax, BYTE PTR [esi+18]
  00187	83 cf ff	 or	 edi, -1

; 2726 : 			pNpcData2.m_iNPC_DIR = pNpcData2.m_iNPC_BASE_DIR;
; 2727 : 
; 2728 : 			EnterCriticalSection(&m_critNpcData);

  0018a	53		 push	 ebx
  0018b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00192	89 4d 80	 mov	 DWORD PTR _pNpcData2$186546[ebp+8], ecx
  00195	89 55 84	 mov	 DWORD PTR _pNpcData2$186546[ebp+12], edx
  00198	89 7d d0	 mov	 DWORD PTR _pNpcData2$186546[ebp+88], edi
  0019b	89 7d ac	 mov	 DWORD PTR _pNpcData2$186546[ebp+52], edi
  0019e	89 7d d4	 mov	 DWORD PTR _pNpcData2$186546[ebp+92], edi
  001a1	89 7d b0	 mov	 DWORD PTR _pNpcData2$186546[ebp+56], edi
  001a4	89 45 d8	 mov	 DWORD PTR _pNpcData2$186546[ebp+96], eax
  001a7	89 45 b4	 mov	 DWORD PTR _pNpcData2$186546[ebp+60], eax
  001aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 2729 : 			m_vtNpcData.push_back(pNpcData2);

  001b0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001b3	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _pNpcData2$186546[ebp]
  001b9	50		 push	 eax
  001ba	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  001c0	e8 00 00 00 00	 call	 ?push_back@?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAEXABU_CS_NPC_DATA@@@Z ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::push_back

; 2730 : 			LeaveCriticalSection(&m_critNpcData);

  001c5	53		 push	 ebx
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 2731 : 		}

  001cc	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
$LN6@SetCastleN@2:

; 2651 : 
; 2652 : 	vector<_CS_NPC_DATA>::iterator it;
; 2653 : 
; 2654 : 	for(int iNPC_COUNT = 0; iNPC_COUNT < iCOUNT; iNPC_COUNT++)

  001cf	83 c6 1c	 add	 esi, 28			; 0000001cH
  001d2	ff 4d 0c	 dec	 DWORD PTR tv361[ebp]
  001d5	0f 85 a5 fe ff
	ff		 jne	 $LL164@SetCastleN@2
$LN5@SetCastleN@2:

; 2732 : 	}
; 2733 : 
; 2734 : 	return true;

  001db	b8 01 00 00 00	 mov	 eax, 1

; 2735 : }

  001e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ea	59		 pop	 ecx
  001eb	5f		 pop	 edi
  001ec	5e		 pop	 esi
  001ed	5b		 pop	 ebx
  001ee	8b e5		 mov	 esp, ebp
  001f0	5d		 pop	 ebp
  001f1	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z$1:
  00000	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _pNpcData2$186546[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__ehhandler$?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetCastleNpcData@CCastleSiege@@QAEHPAUCSP_CSINITDATA@@H@Z ENDP ; CCastleSiege::SetCastleNpcData
PUBLIC	??_C@_0DI@HPNOGGCK@?$FLCastleSiege?$FN?5Castle?5Winner?5Has?5@ ; `string'
PUBLIC	?CheckMiddleWinnerGuild@CCastleSiege@@QAEHXZ	; CCastleSiege::CheckMiddleWinnerGuild
EXTRN	?GCAnsCsLeftTimeAlarm@@YAXEE@Z:PROC		; GCAnsCsLeftTimeAlarm
EXTRN	?GCAnsCsAccessCrownState@@YAXHE@Z:PROC		; GCAnsCsAccessCrownState
;	COMDAT ??_C@_0DI@HPNOGGCK@?$FLCastleSiege?$FN?5Castle?5Winner?5Has?5@
CONST	SEGMENT
??_C@_0DI@HPNOGGCK@?$FLCastleSiege?$FN?5Castle?5Winner?5Has?5@ DB '[Castl'
	DB	'eSiege] Castle Winner Has been Changed (GUILD:%s)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckMiddleWinnerGuild@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
tv305 = -4						; size = 4
?CheckMiddleWinnerGuild@CCastleSiege@@QAEHXZ PROC	; CCastleSiege::CheckMiddleWinnerGuild, COMDAT
; _this$ = ecx

; 3040 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 3041 : 	if(m_dwCrownAccessTime == FALSE)

  00007	83 be 00 02 00
	00 00		 cmp	 DWORD PTR [esi+512], 0
  0000e	75 07		 jne	 SHORT $LN6@CheckMiddl
$LN4@CheckMiddl:

; 3042 : 		return false;

  00010	33 c0		 xor	 eax, eax
  00012	5e		 pop	 esi

; 3083 : 	}
; 3084 : return false;
; 3085 : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
$LN6@CheckMiddl:

; 3043 : 
; 3044 : 	if(gObjIsConnected(m_iCastleCrownAccessUser) == FALSE 
; 3045 : 		|| gObjIsConnected(m_iCastleSwitchAccessUser1) == FALSE
; 3046 : 		|| gObjIsConnected(m_iCastleSwitchAccessUser2) == FALSE)

  00017	8b 86 f0 01 00
	00		 mov	 eax, DWORD PTR [esi+496]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00023	83 c4 04	 add	 esp, 4
  00026	85 c0		 test	 eax, eax
  00028	74 e6		 je	 SHORT $LN4@CheckMiddl
  0002a	8b 8e f8 01 00
	00		 mov	 ecx, DWORD PTR [esi+504]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00036	83 c4 04	 add	 esp, 4
  00039	85 c0		 test	 eax, eax
  0003b	74 d3		 je	 SHORT $LN4@CheckMiddl
  0003d	8b 96 fc 01 00
	00		 mov	 edx, DWORD PTR [esi+508]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00049	83 c4 04	 add	 esp, 4
  0004c	85 c0		 test	 eax, eax
  0004e	74 c0		 je	 SHORT $LN4@CheckMiddl

; 3047 : 		return false;
; 3048 : 
; 3049 : 	if(strcmp(gObj[m_iCastleCrownAccessUser].GuildName,"") == 0
; 3050 : 		|| strcmp(gObj[m_iCastleSwitchAccessUser1].GuildName,"") == 0
; 3051 : 		|| strcmp(gObj[m_iCastleSwitchAccessUser2].GuildName,"") == 0)

  00050	8b 86 f0 01 00
	00		 mov	 eax, DWORD PTR [esi+496]
  00056	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  0005c	57		 push	 edi
  0005d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00063	03 c7		 add	 eax, edi
  00065	89 45 fc	 mov	 DWORD PTR tv305[ebp], eax
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0006d	05 1c 06 00 00	 add	 eax, 1564		; 0000061cH
$LL9@CheckMiddl:
  00072	8a 10		 mov	 dl, BYTE PTR [eax]
  00074	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00076	75 1a		 jne	 SHORT $LN10@CheckMiddl
  00078	84 d2		 test	 dl, dl
  0007a	74 12		 je	 SHORT $LN11@CheckMiddl
  0007c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00082	75 0e		 jne	 SHORT $LN10@CheckMiddl
  00084	83 c0 02	 add	 eax, 2
  00087	83 c1 02	 add	 ecx, 2
  0008a	84 d2		 test	 dl, dl
  0008c	75 e4		 jne	 SHORT $LL9@CheckMiddl
$LN11@CheckMiddl:
  0008e	33 c0		 xor	 eax, eax
  00090	eb 05		 jmp	 SHORT $LN12@CheckMiddl
$LN10@CheckMiddl:
  00092	1b c0		 sbb	 eax, eax
  00094	83 d8 ff	 sbb	 eax, -1
$LN12@CheckMiddl:
  00097	53		 push	 ebx
  00098	85 c0		 test	 eax, eax
  0009a	0f 84 61 02 00
	00		 je	 $LN2@CheckMiddl
  000a0	8b 9e f8 01 00
	00		 mov	 ebx, DWORD PTR [esi+504]
  000a6	69 db 40 27 00
	00		 imul	 ebx, 10048		; 00002740H
  000ac	03 df		 add	 ebx, edi
  000ae	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000b3	8d 83 1c 06 00
	00		 lea	 eax, DWORD PTR [ebx+1564]
  000b9	8d a4 24 00 00
	00 00		 npad	 7
$LL13@CheckMiddl:
  000c0	8a 10		 mov	 dl, BYTE PTR [eax]
  000c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000c4	75 1a		 jne	 SHORT $LN14@CheckMiddl
  000c6	84 d2		 test	 dl, dl
  000c8	74 12		 je	 SHORT $LN15@CheckMiddl
  000ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000d0	75 0e		 jne	 SHORT $LN14@CheckMiddl
  000d2	83 c0 02	 add	 eax, 2
  000d5	83 c1 02	 add	 ecx, 2
  000d8	84 d2		 test	 dl, dl
  000da	75 e4		 jne	 SHORT $LL13@CheckMiddl
$LN15@CheckMiddl:
  000dc	33 c0		 xor	 eax, eax
  000de	eb 05		 jmp	 SHORT $LN16@CheckMiddl
$LN14@CheckMiddl:
  000e0	1b c0		 sbb	 eax, eax
  000e2	83 d8 ff	 sbb	 eax, -1
$LN16@CheckMiddl:
  000e5	85 c0		 test	 eax, eax
  000e7	0f 84 14 02 00
	00		 je	 $LN2@CheckMiddl
  000ed	8b 96 fc 01 00
	00		 mov	 edx, DWORD PTR [esi+508]
  000f3	69 d2 40 27 00
	00		 imul	 edx, 10048		; 00002740H
  000f9	03 fa		 add	 edi, edx
  000fb	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00100	8d 87 1c 06 00
	00		 lea	 eax, DWORD PTR [edi+1564]
$LL17@CheckMiddl:
  00106	8a 10		 mov	 dl, BYTE PTR [eax]
  00108	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0010a	75 1a		 jne	 SHORT $LN18@CheckMiddl
  0010c	84 d2		 test	 dl, dl
  0010e	74 12		 je	 SHORT $LN19@CheckMiddl
  00110	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00113	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00116	75 0e		 jne	 SHORT $LN18@CheckMiddl
  00118	83 c0 02	 add	 eax, 2
  0011b	83 c1 02	 add	 ecx, 2
  0011e	84 d2		 test	 dl, dl
  00120	75 e4		 jne	 SHORT $LL17@CheckMiddl
$LN19@CheckMiddl:
  00122	33 c0		 xor	 eax, eax
  00124	eb 05		 jmp	 SHORT $LN20@CheckMiddl
$LN18@CheckMiddl:
  00126	1b c0		 sbb	 eax, eax
  00128	83 d8 ff	 sbb	 eax, -1
$LN20@CheckMiddl:
  0012b	85 c0		 test	 eax, eax
  0012d	0f 84 ce 01 00
	00		 je	 $LN2@CheckMiddl

; 3053 : 
; 3054 : 	if(gObj[m_iCastleCrownAccessUser].m_btCsJoinSide >= 2
; 3055 : 		&& gObj[m_iCastleSwitchAccessUser1].m_btCsJoinSide >= 2
; 3056 : 		&& gObj[m_iCastleSwitchAccessUser2].m_btCsJoinSide >= 2
; 3057 : 		&& gObj[m_iCastleCrownAccessUser].m_bCsGuildInvolved == TRUE
; 3058 : 		&& gObj[m_iCastleCrownAccessUser].m_btCsJoinSide == gObj[m_iCastleSwitchAccessUser1].m_btCsJoinSide
; 3059 : 		&& gObj[m_iCastleCrownAccessUser].m_btCsJoinSide == gObj[m_iCastleSwitchAccessUser2].m_btCsJoinSide
; 3060 : 		&& (GetTickCount() - m_dwCrownAccessTime) + gObj[m_iCastleCrownAccessUser].m_iAccumulatedCrownAccessTime >= 30000)

  00133	8b 45 fc	 mov	 eax, DWORD PTR tv305[ebp]
  00136	8a 88 5a 20 00
	00		 mov	 cl, BYTE PTR [eax+8282]
  0013c	80 f9 02	 cmp	 cl, 2
  0013f	0f 82 bc 01 00
	00		 jb	 $LN2@CheckMiddl
  00145	8a 93 5a 20 00
	00		 mov	 dl, BYTE PTR [ebx+8282]
  0014b	80 fa 02	 cmp	 dl, 2
  0014e	0f 82 ad 01 00
	00		 jb	 $LN2@CheckMiddl
  00154	8a 87 5a 20 00
	00		 mov	 al, BYTE PTR [edi+8282]
  0015a	3c 02		 cmp	 al, 2
  0015c	0f 82 9f 01 00
	00		 jb	 $LN2@CheckMiddl
  00162	8b 7d fc	 mov	 edi, DWORD PTR tv305[ebp]
  00165	80 bf 5b 20 00
	00 01		 cmp	 BYTE PTR [edi+8283], 1
  0016c	0f 85 8f 01 00
	00		 jne	 $LN2@CheckMiddl
  00172	3a ca		 cmp	 cl, dl
  00174	0f 85 87 01 00
	00		 jne	 $LN2@CheckMiddl
  0017a	3a c8		 cmp	 cl, al
  0017c	0f 85 7f 01 00
	00		 jne	 $LN2@CheckMiddl
  00182	8b be f0 01 00
	00		 mov	 edi, DWORD PTR [esi+496]
  00188	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  0018e	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  00194	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019a	ff d3		 call	 ebx
  0019c	8b 8f 74 20 00
	00		 mov	 ecx, DWORD PTR [edi+8308]
  001a2	2b 8e 00 02 00
	00		 sub	 ecx, DWORD PTR [esi+512]
  001a8	03 c1		 add	 eax, ecx
  001aa	3d 30 75 00 00	 cmp	 eax, 30000		; 00007530H
  001af	0f 82 4c 01 00
	00		 jb	 $LN2@CheckMiddl

; 3061 : 	{
; 3062 : 		LogAddTD("[CastleSiege] Castle Winner Has been Changed (GUILD:%s)",
; 3063 : 			gObj[m_iCastleCrownAccessUser].GuildName);

  001b5	81 c7 1c 06 00
	00		 add	 edi, 1564		; 0000061cH
  001bb	57		 push	 edi
  001bc	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HPNOGGCK@?$FLCastleSiege?$FN?5Castle?5Winner?5Has?5@
  001c1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3064 : 
; 3065 : 		GCAnsCsAccessCrownState(m_iCastleCrownAccessUser,1);

  001c7	8b 96 f0 01 00
	00		 mov	 edx, DWORD PTR [esi+496]
  001cd	6a 01		 push	 1
  001cf	52		 push	 edx
  001d0	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  001d5	83 c4 10	 add	 esp, 16			; 00000010H

; 3066 : 		NotifyCrownState(2);

  001d8	6a 02		 push	 2
  001da	8b ce		 mov	 ecx, esi
  001dc	e8 00 00 00 00	 call	 ?NotifyCrownState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyCrownState

; 3067 : 		memset(m_szMiddleWinnerGuild,0x00,sizeof(m_szMiddleWinnerGuild));

  001e1	33 c0		 xor	 eax, eax
  001e3	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax
  001e9	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
  001ef	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax
  001f5	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax

; 3068 : 		memcpy(m_szMiddleWinnerGuild,gObj[m_iCastleCrownAccessUser].GuildName,8);

  001fb	8b 86 f0 01 00
	00		 mov	 eax, DWORD PTR [esi+496]
  00201	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00207	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  0020d	8b 94 08 1c 06
	00 00		 mov	 edx, DWORD PTR [eax+ecx+1564]
  00214	89 96 04 02 00
	00		 mov	 DWORD PTR [esi+516], edx
  0021a	8b 84 08 20 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1568]

; 3069 : 		ClearNonDbNPC_MidWin();

  00221	8b ce		 mov	 ecx, esi
  00223	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
  00229	e8 00 00 00 00	 call	 ?ClearNonDbNPC_MidWin@CCastleSiege@@QAEXXZ ; CCastleSiege::ClearNonDbNPC_MidWin

; 3070 : 		ChangeWinnerGuild(gObj[m_iCastleCrownAccessUser].m_btCsJoinSide);

  0022e	8b 8e f0 01 00
	00		 mov	 ecx, DWORD PTR [esi+496]
  00234	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0023a	69 c9 40 27 00
	00		 imul	 ecx, 10048		; 00002740H
  00240	0f b6 84 11 5a
	20 00 00	 movzx	 eax, BYTE PTR [ecx+edx+8282]
  00248	50		 push	 eax
  00249	8b ce		 mov	 ecx, esi
  0024b	e8 00 00 00 00	 call	 ?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z ; CCastleSiege::ChangeWinnerGuild

; 3071 : 		NotifyAllUserCsProgState(1,gObj[m_iCastleCrownAccessUser].GuildName);

  00250	8b 8e f0 01 00
	00		 mov	 ecx, DWORD PTR [esi+496]
  00256	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0025c	69 c9 40 27 00
	00		 imul	 ecx, 10048		; 00002740H
  00262	8d 84 11 1c 06
	00 00		 lea	 eax, DWORD PTR [ecx+edx+1564]
  00269	50		 push	 eax
  0026a	6a 01		 push	 1
  0026c	8b ce		 mov	 ecx, esi
  0026e	e8 00 00 00 00	 call	 ?NotifyAllUserCsProgState@CCastleSiege@@QAEXEPAD@Z ; CCastleSiege::NotifyAllUserCsProgState

; 3072 : 		ResetCrownAccessTickCount();

  00273	8b ce		 mov	 ecx, esi
  00275	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount

; 3073 : 		ResetCrownUserIndex();

  0027a	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 3074 : 		SetCrownAccessUserX(NULL);

  0027f	6a 00		 push	 0
  00281	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 3075 : 		SetCrownAccessUserY(NULL);

  00286	6a 00		 push	 0
  00288	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 3076 : 		ResetCrownSwitchUserIndex(217);

  0028d	68 d9 00 00 00	 push	 217			; 000000d9H
  00292	e8 00 00 00 00	 call	 ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex

; 3077 : 		ResetCrownSwitchUserIndex(218);

  00297	68 da 00 00 00	 push	 218			; 000000daH
  0029c	e8 00 00 00 00	 call	 ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex

; 3078 : 		m_bRegCrownAvailable = FALSE;
; 3079 : 		ReSpawnEnemyUser(0);

  002a1	6a 00		 push	 0
  002a3	c7 86 e8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+488], 0
  002ad	e8 00 00 00 00	 call	 ?ReSpawnEnemyUser@CCastleSiege@@QAEXH@Z ; CCastleSiege::ReSpawnEnemyUser

; 3080 : 		GCAnsCsLeftTimeAlarm((m_iCS_REMAIN_MSEC / 1000) / 3600,(((m_iCS_REMAIN_MSEC) / 1000) %3600) /60);

  002b2	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  002b7	f7 6e 68	 imul	 DWORD PTR [esi+104]
  002ba	c1 fa 06	 sar	 edx, 6
  002bd	8b c2		 mov	 eax, edx
  002bf	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002c2	03 c2		 add	 eax, edx
  002c4	99		 cdq
  002c5	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  002ca	f7 f9		 idiv	 ecx
  002cc	8b f8		 mov	 edi, eax
  002ce	8b ca		 mov	 ecx, edx
  002d0	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  002d5	f7 e9		 imul	 ecx
  002d7	03 d1		 add	 edx, ecx
  002d9	c1 fa 05	 sar	 edx, 5
  002dc	8b c2		 mov	 eax, edx
  002de	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002e1	03 c2		 add	 eax, edx
  002e3	50		 push	 eax
  002e4	57		 push	 edi
  002e5	e8 00 00 00 00	 call	 ?GCAnsCsLeftTimeAlarm@@YAXEE@Z ; GCAnsCsLeftTimeAlarm
  002ea	83 c4 08	 add	 esp, 8

; 3081 : 		m_dwCS_LEFTTIME_TICK_COUNT = GetTickCount();

  002ed	ff d3		 call	 ebx
  002ef	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax

; 3082 : 		return true;

  002f5	b8 01 00 00 00	 mov	 eax, 1
  002fa	5b		 pop	 ebx
  002fb	5f		 pop	 edi
  002fc	5e		 pop	 esi

; 3083 : 	}
; 3084 : return false;
; 3085 : }

  002fd	8b e5		 mov	 esp, ebp
  002ff	5d		 pop	 ebp
  00300	c3		 ret	 0
$LN2@CheckMiddl:
  00301	5b		 pop	 ebx
  00302	5f		 pop	 edi

; 3052 : 		return false;

  00303	33 c0		 xor	 eax, eax
  00305	5e		 pop	 esi

; 3083 : 	}
; 3084 : return false;
; 3085 : }

  00306	8b e5		 mov	 esp, ebp
  00308	5d		 pop	 ebp
  00309	c3		 ret	 0
?CheckMiddleWinnerGuild@CCastleSiege@@QAEHXZ ENDP	; CCastleSiege::CheckMiddleWinnerGuild
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T231286 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >, COMDAT
; _this$ = ecx

; 790  : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 791  : 		_Tidy();

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T231286[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase

; 792  : 		}

  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
__ehhandler$??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase
; Function compile flags: /Ogtp
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1610 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1611 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]

; 1612 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00009	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  0000d	8b d9		 mov	 ebx, ecx
  0000f	8b f7		 mov	 esi, edi
  00011	75 2b		 jne	 SHORT $LN1@Erase@3
$LL3@Erase@3:

; 1613 : 			{	// free subtrees, then node
; 1614 : 			_Erase(this->_Right(_Pnode));

  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	50		 push	 eax
  00017	8b cb		 mov	 ecx, ebx
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase

; 1615 : 			_Pnode = this->_Left(_Pnode);

  0001e	8b 36		 mov	 esi, DWORD PTR [esi]

; 1616 : 			_Dest_val(this->_Alval,
; 1617 : 				_STD addressof(this->_Myval(_Rootnode)));

  00020	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00023	51		 push	 ecx
  00024	8d 43 0d	 lea	 eax, DWORD PTR [ebx+13]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >

; 1618 : 
; 1619 : 			this->_Alnod.deallocate(_Rootnode, 1);

  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	80 7e 3d 00	 cmp	 BYTE PTR [esi+61], 0
  0003a	8b fe		 mov	 edi, esi
  0003c	74 d5		 je	 SHORT $LL3@Erase@3
$LN1@Erase@3:
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx

; 1620 : 			}
; 1621 : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv797 = -12						; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase, COMDAT
; _this$ = ecx

; 1195 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1198 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1199 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1200 : 		++_Where;	// save successor iterator for return
; 1201 : 		_Orphan_ptr(*this, _Erasednode);
; 1202 : 
; 1203 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1204 : 		if (this->_Isnil(_Where._Mynode()))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	80 7b 3d 00	 cmp	 BYTE PTR [ebx+61], 0
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00013	74 0a		 je	 SHORT $LN40@erase@8

; 1205 : 			_Xout_of_range("invalid map/set<T> iterator");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN297@erase@8:
$LN40@erase@8:

; 1206 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1207 : 		++_Where;	// save successor iterator for return

  0001f	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00022	89 5d f8	 mov	 DWORD PTR __Erasednode$[ebp], ebx
  00025	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator++

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1211 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1212 : 		_Nodeptr _Pnode = _Erasednode;
; 1213 : 
; 1214 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0002a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0002c	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  00030	74 05		 je	 SHORT $LN39@erase@8

; 1215 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00032	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 1216 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00035	eb 17		 jmp	 SHORT $LN291@erase@8
$LN39@erase@8:
  00037	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0003a	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  0003e	74 04		 je	 SHORT $LN37@erase@8

; 1217 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00040	8b f9		 mov	 edi, ecx

; 1218 : 		else

  00042	eb 0a		 jmp	 SHORT $LN291@erase@8
$LN37@erase@8:

; 1219 : 			{	// two subtrees, must lift successor node to replace erased
; 1220 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  00044	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 1221 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00047	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 1222 : 			}
; 1223 : 
; 1224 : 		if (_Pnode == _Erasednode)

  0004a	3b c3		 cmp	 eax, ebx
  0004c	75 72		 jne	 SHORT $LN35@erase@8
$LN291@erase@8:

; 1225 : 			{	// at most one subtree, relink it
; 1226 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1227 : 			if (!this->_Isnil(_Fixnode))

  0004e	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  00052	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00055	75 03		 jne	 SHORT $LN34@erase@8

; 1228 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  00057	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase@8:

; 1229 : 
; 1230 : 			if (_Root() == _Erasednode)

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00060	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00063	75 05		 jne	 SHORT $LN33@erase@8

; 1231 : 				_Root() = _Fixnode;	// link down from root

  00065	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1232 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00068	eb 0b		 jmp	 SHORT $LN30@erase@8
$LN33@erase@8:
  0006a	39 1e		 cmp	 DWORD PTR [esi], ebx
  0006c	75 04		 jne	 SHORT $LN31@erase@8

; 1233 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  0006e	89 3e		 mov	 DWORD PTR [esi], edi

; 1234 : 			else

  00070	eb 03		 jmp	 SHORT $LN30@erase@8
$LN31@erase@8:

; 1235 : 				this->_Right(_Fixnodeparent) =
; 1236 : 					_Fixnode;	// link down to right

  00072	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase@8:

; 1237 : 
; 1238 : 			if (_Lmost() == _Erasednode)

  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	39 18		 cmp	 DWORD PTR [eax], ebx
  0007a	75 1b		 jne	 SHORT $LN29@erase@8

; 1239 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1240 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1241 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  0007c	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  00080	74 04		 je	 SHORT $LN43@erase@8
  00082	8b c6		 mov	 eax, esi
  00084	eb 0c		 jmp	 SHORT $LN44@erase@8
$LN43@erase@8:
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Min
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	83 c4 04	 add	 esp, 4
$LN44@erase@8:
  00092	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00095	89 02		 mov	 DWORD PTR [edx], eax
$LN29@erase@8:

; 1242 : 
; 1243 : 			if (_Rmost() == _Erasednode)

  00097	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009a	89 4d f4	 mov	 DWORD PTR tv797[ebp], ecx
  0009d	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  000a0	75 78		 jne	 SHORT $LN165@erase@8

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000a2	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  000a6	74 07		 je	 SHORT $LN45@erase@8
  000a8	8b c6		 mov	 eax, esi
  000aa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000ad	eb 6b		 jmp	 SHORT $LN165@erase@8
$LN45@erase@8:

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000af	57		 push	 edi
  000b0	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Max
  000b5	8b 4d f4	 mov	 ecx, DWORD PTR tv797[ebp]
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000be	eb 5a		 jmp	 SHORT $LN165@erase@8
$LN35@erase@8:

; 1249 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1250 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1251 : 				_Pnode;	// link left up

  000c0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1252 : 			this->_Left(_Pnode) =
; 1253 : 				this->_Left(_Erasednode);	// link successor down

  000c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c5	89 08		 mov	 DWORD PTR [eax], ecx

; 1254 : 
; 1255 : 			if (_Pnode == this->_Right(_Erasednode))

  000c7	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  000ca	75 04		 jne	 SHORT $LN26@erase@8

; 1256 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000cc	8b f0		 mov	 esi, eax

; 1257 : 			else

  000ce	eb 1a		 jmp	 SHORT $LN25@erase@8
$LN26@erase@8:

; 1258 : 				{	// successor further down, link in place of erased
; 1259 : 				_Fixnodeparent =
; 1260 : 					this->_Parent(_Pnode);	// parent is successor's
; 1261 : 				if (!this->_Isnil(_Fixnode))

  000d0	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  000d4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d7	75 03		 jne	 SHORT $LN24@erase@8

; 1262 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000d9	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase@8:

; 1263 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000dc	89 3e		 mov	 DWORD PTR [esi], edi

; 1264 : 				this->_Right(_Pnode) =
; 1265 : 					this->_Right(_Erasednode);	// link next down

  000de	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000e1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1266 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1267 : 					_Pnode;	// right up

  000e4	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000e7	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN25@erase@8:

; 1268 : 				}
; 1269 : 
; 1270 : 			if (_Root() == _Erasednode)

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f0	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  000f3	75 05		 jne	 SHORT $LN23@erase@8

; 1271 : 				_Root() = _Pnode;	// link down from root

  000f5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1272 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000f8	eb 0e		 jmp	 SHORT $LN20@erase@8
$LN23@erase@8:
  000fa	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000fd	39 19		 cmp	 DWORD PTR [ecx], ebx
  000ff	75 04		 jne	 SHORT $LN21@erase@8

; 1273 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1274 : 					_Pnode;	// link down to left

  00101	89 01		 mov	 DWORD PTR [ecx], eax

; 1275 : 			else

  00103	eb 03		 jmp	 SHORT $LN20@erase@8
$LN21@erase@8:

; 1276 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1277 : 					_Pnode;	// link down to right

  00105	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase@8:

; 1278 : 
; 1279 : 			this->_Parent(_Pnode) =
; 1280 : 				this->_Parent(_Erasednode);	// link successor up

  00108	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0010b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1281 : 			_STD swap(this->_Color(_Pnode),
; 1282 : 				this->_Color(_Erasednode));	// recolor it

  0010e	8a 53 3c	 mov	 dl, BYTE PTR [ebx+60]
  00111	8a 48 3c	 mov	 cl, BYTE PTR [eax+60]
  00114	88 50 3c	 mov	 BYTE PTR [eax+60], dl
  00117	88 4b 3c	 mov	 BYTE PTR [ebx+60], cl
$LN165@erase@8:

; 1283 : 			}
; 1284 : 
; 1285 : 		if (this->_Color(_Erasednode) == this->_Black)

  0011a	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	b3 01		 mov	 bl, 1
  00122	38 58 3c	 cmp	 BYTE PTR [eax+60], bl
  00125	0f 85 fa 00 00
	00		 jne	 $LN19@erase@8
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	3b 7a 04	 cmp	 edi, DWORD PTR [edx+4]
  00131	0f 84 eb 00 00
	00		 je	 $LN16@erase@8
$LL18@erase@8:
  00137	38 5f 3c	 cmp	 BYTE PTR [edi+60], bl
  0013a	0f 85 e2 00 00
	00		 jne	 $LN16@erase@8

; 1290 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	3b f8		 cmp	 edi, eax
  00144	75 65		 jne	 SHORT $LN15@erase@8

; 1291 : 					{	// fixup left subtree
; 1292 : 					_Pnode = this->_Right(_Fixnodeparent);

  00146	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1293 : 					if (this->_Color(_Pnode) == this->_Red)

  00149	80 78 3c 00	 cmp	 BYTE PTR [eax+60], 0
  0014d	75 13		 jne	 SHORT $LN14@erase@8

; 1294 : 						{	// rotate red up from right subtree
; 1295 : 						this->_Color(_Pnode) = this->_Black;

  0014f	88 58 3c	 mov	 BYTE PTR [eax+60], bl

; 1296 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1297 : 						_Lrotate(_Fixnodeparent);

  00152	56		 push	 esi
  00153	c6 46 3c 00	 mov	 BYTE PTR [esi+60], 0
  00157	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lrotate

; 1298 : 						_Pnode = this->_Right(_Fixnodeparent);

  0015c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN14@erase@8:

; 1299 : 						}
; 1300 : 
; 1301 : 					if (this->_Isnil(_Pnode))

  00162	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0

; 1302 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1303 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

  00166	75 74		 jne	 SHORT $LN294@erase@8

; 1304 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00168	8b 10		 mov	 edx, DWORD PTR [eax]
  0016a	38 5a 3c	 cmp	 BYTE PTR [edx+60], bl
  0016d	75 08		 jne	 SHORT $LN11@erase@8
  0016f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00172	38 5a 3c	 cmp	 BYTE PTR [edx+60], bl
  00175	74 61		 je	 SHORT $LN295@erase@8
$LN11@erase@8:

; 1305 : 						{	// redden right subtree with black children
; 1306 : 						this->_Color(_Pnode) = this->_Red;
; 1307 : 						_Fixnode = _Fixnodeparent;
; 1308 : 						}
; 1309 : 					else
; 1310 : 						{	// must rearrange right subtree
; 1311 : 						if (this->_Color(this->_Right(_Pnode))
; 1312 : 							== this->_Black)

  00177	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0017a	38 5a 3c	 cmp	 BYTE PTR [edx+60], bl
  0017d	75 15		 jne	 SHORT $LN9@erase@8

; 1313 : 							{	// rotate red up from left sub-subtree
; 1314 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	88 5a 3c	 mov	 BYTE PTR [edx+60], bl

; 1315 : 							this->_Color(_Pnode) = this->_Red;
; 1316 : 							_Rrotate(_Pnode);

  00184	50		 push	 eax
  00185	c6 40 3c 00	 mov	 BYTE PTR [eax+60], 0
  00189	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Rrotate

; 1317 : 							_Pnode = this->_Right(_Fixnodeparent);

  0018e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00191	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN9@erase@8:

; 1318 : 							}
; 1319 : 
; 1320 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00194	8a 56 3c	 mov	 dl, BYTE PTR [esi+60]
  00197	88 50 3c	 mov	 BYTE PTR [eax+60], dl

; 1321 : 						this->_Color(_Fixnodeparent) = this->_Black;

  0019a	88 5e 3c	 mov	 BYTE PTR [esi+60], bl

; 1322 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  0019d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1323 : 						_Lrotate(_Fixnodeparent);

  001a0	56		 push	 esi
  001a1	88 58 3c	 mov	 BYTE PTR [eax+60], bl
  001a4	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lrotate

; 1324 : 						break;	// tree now recolored/rebalanced

  001a9	eb 74		 jmp	 SHORT $LN296@erase@8
$LN15@erase@8:

; 1325 : 						}
; 1326 : 					}
; 1327 : 				else
; 1328 : 					{	// fixup right subtree
; 1329 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1330 : 					if (this->_Color(_Pnode) == this->_Red)

  001ab	80 78 3c 00	 cmp	 BYTE PTR [eax+60], 0
  001af	75 12		 jne	 SHORT $LN7@erase@8

; 1331 : 						{	// rotate red up from left subtree
; 1332 : 						this->_Color(_Pnode) = this->_Black;

  001b1	88 58 3c	 mov	 BYTE PTR [eax+60], bl

; 1333 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1334 : 						_Rrotate(_Fixnodeparent);

  001b4	56		 push	 esi
  001b5	c6 46 3c 00	 mov	 BYTE PTR [esi+60], 0
  001b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Rrotate

; 1335 : 						_Pnode = this->_Left(_Fixnodeparent);

  001be	8b 06		 mov	 eax, DWORD PTR [esi]
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN7@erase@8:

; 1336 : 						}
; 1337 : 					if (this->_Isnil(_Pnode))

  001c3	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0

; 1338 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1339 : 					else if (this->_Color(this->_Right(_Pnode)) ==

  001c7	75 13		 jne	 SHORT $LN294@erase@8

; 1340 : 						this->_Black
; 1341 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001c9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001cc	38 5a 3c	 cmp	 BYTE PTR [edx+60], bl
  001cf	75 1e		 jne	 SHORT $LN4@erase@8
  001d1	8b 10		 mov	 edx, DWORD PTR [eax]
  001d3	38 5a 3c	 cmp	 BYTE PTR [edx+60], bl
  001d6	75 17		 jne	 SHORT $LN4@erase@8
$LN295@erase@8:

; 1342 : 						{	// redden left subtree with black children
; 1343 : 						this->_Color(_Pnode) = this->_Red;

  001d8	c6 40 3c 00	 mov	 BYTE PTR [eax+60], 0
$LN294@erase@8:

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001dc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1344 : 						_Fixnode = _Fixnodeparent;

  001df	8b fe		 mov	 edi, esi
  001e1	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001e4	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001e7	0f 85 4a ff ff
	ff		 jne	 $LL18@erase@8

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001ed	eb 33		 jmp	 SHORT $LN16@erase@8
$LN4@erase@8:

; 1345 : 						}
; 1346 : 					else
; 1347 : 						{	// must rearrange left subtree
; 1348 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  001ef	8b 10		 mov	 edx, DWORD PTR [eax]
  001f1	38 5a 3c	 cmp	 BYTE PTR [edx+60], bl
  001f4	75 15		 jne	 SHORT $LN2@erase@8

; 1349 : 							{	// rotate red up from right sub-subtree
; 1350 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f9	88 5a 3c	 mov	 BYTE PTR [edx+60], bl

; 1351 : 							this->_Color(_Pnode) = this->_Red;
; 1352 : 							_Lrotate(_Pnode);

  001fc	50		 push	 eax
  001fd	c6 40 3c 00	 mov	 BYTE PTR [eax+60], 0
  00201	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lrotate

; 1353 : 							_Pnode = this->_Left(_Fixnodeparent);

  00206	8b 06		 mov	 eax, DWORD PTR [esi]
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN2@erase@8:

; 1354 : 							}
; 1355 : 
; 1356 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  0020b	8a 56 3c	 mov	 dl, BYTE PTR [esi+60]
  0020e	88 50 3c	 mov	 BYTE PTR [eax+60], dl

; 1357 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00211	88 5e 3c	 mov	 BYTE PTR [esi+60], bl

; 1358 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  00214	8b 00		 mov	 eax, DWORD PTR [eax]

; 1359 : 						_Rrotate(_Fixnodeparent);

  00216	56		 push	 esi
  00217	88 58 3c	 mov	 BYTE PTR [eax+60], bl
  0021a	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Rrotate
$LN296@erase@8:
  0021f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN16@erase@8:

; 1360 : 						break;	// tree now recolored/rebalanced
; 1361 : 						}
; 1362 : 					}
; 1363 : 
; 1364 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  00222	88 5f 3c	 mov	 BYTE PTR [edi+60], bl
$LN19@erase@8:

; 1365 : 			}
; 1366 : 
; 1367 : 		_Dest_val(this->_Alval,
; 1368 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node

  00225	8b 55 f8	 mov	 edx, DWORD PTR __Erasednode$[ebp]
  00228	83 c2 0c	 add	 edx, 12			; 0000000cH
  0022b	52		 push	 edx
  0022c	83 c1 0d	 add	 ecx, 13			; 0000000dH
  0022f	51		 push	 ecx
  00230	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >

; 1369 : 
; 1370 : 		this->_Alnod.deallocate(_Erasednode, 1);

  00235	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1371 : 
; 1372 : 		if (0 < this->_Mysize)

  0023e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00241	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00244	83 c4 0c	 add	 esp, 12			; 0000000cH
  00247	5f		 pop	 edi
  00248	5e		 pop	 esi
  00249	5b		 pop	 ebx
  0024a	85 c0		 test	 eax, eax
  0024c	74 04		 je	 SHORT $LN1@erase@8

; 1373 : 			--this->_Mysize;

  0024e	48		 dec	 eax
  0024f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@erase@8:

; 1374 : 
; 1375 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

  00252	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00255	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00258	89 08		 mov	 DWORD PTR [eax], ecx

; 1376 : 		}

  0025a	8b e5		 mov	 esp, ebp
  0025c	5d		 pop	 ebp
  0025d	c2 08 00	 ret	 8
$LN293@erase@8:
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase
_TEXT	ENDS
PUBLIC	??$_Umove@PAU_CS_REG_GUILD_DATA@@@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEPAU_CS_REG_GUILD_DATA@@PAU2@00@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Umove<_CS_REG_GUILD_DATA *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAU_CS_REG_GUILD_DATA@@@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEPAU_CS_REG_GUILD_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$231786 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAU_CS_REG_GUILD_DATA@@@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEPAU_CS_REG_GUILD_DATA@@PAU2@00@Z PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Umove<_CS_REG_GUILD_DATA *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Cat$231786[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000d	6a 00		 push	 0
  0000f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00012	51		 push	 ecx
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *,std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1326 : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAU_CS_REG_GUILD_DATA@@@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEPAU_CS_REG_GUILD_DATA@@PAU2@00@Z ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Umove<_CS_REG_GUILD_DATA *>
_TEXT	ENDS
PUBLIC	?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Linsert
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z
_TEXT	SEGMENT
__Wherenode$ = -20					; size = 4
tv626 = -16						; size = 4
tv623 = -12						; size = 4
_this$ = -8						; size = 4
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Node$ = 12						; size = 4
$T231798 = 16						; size = 4
__Where$194874 = 16					; size = 4
__Leftish$ = 16						; size = 1
?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Linsert, COMDAT
; _this$ = ecx

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 945  : 		const value_type& _Val = this->_Myval(_Node);
; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();

  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  0000c	53		 push	 ebx
  0000d	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00010	80 7b 3d 00	 cmp	 BYTE PTR [ebx+61], 0
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f8		 mov	 edi, eax
  00018	b0 01		 mov	 al, 1
  0001a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001d	88 45 fc	 mov	 BYTE PTR __Addleft$[ebp], al
  00020	0f 85 e7 00 00
	00		 jne	 $LN11@Linsert@3

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  00026	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  00029	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0002c	89 4d f4	 mov	 DWORD PTR tv623[ebp], ecx
  0002f	89 45 f0	 mov	 DWORD PTR tv626[ebp], eax
  00032	eb 03		 jmp	 SHORT $LN12@Linsert@3
$LL218@Linsert@3:

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00034	8b 4d f4	 mov	 ecx, DWORD PTR tv623[ebp]
$LN12@Linsert@3:

; 951  : 			{	// look for leaf to insert before (_Addleft) or after
; 952  : 			_Wherenode = _Trynode;
; 953  : 			if (_Leftish)

  00037	80 7d 10 00	 cmp	 BYTE PTR __Leftish$[ebp], 0
  0003b	89 5d ec	 mov	 DWORD PTR __Wherenode$[ebp], ebx

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  0003e	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00041	74 55		 je	 SHORT $LN10@Linsert@3
  00043	83 7d f0 10	 cmp	 DWORD PTR tv626[ebp], 16 ; 00000010H
  00047	72 05		 jb	 SHORT $LN43@Linsert@3
  00049	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  0004c	eb 03		 jmp	 SHORT $LN44@Linsert@3
$LN43@Linsert@3:
  0004e	83 c2 0c	 add	 edx, 12			; 0000000cH
$LN44@Linsert@3:
  00051	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  00054	8b ce		 mov	 ecx, esi
  00056	3b ce		 cmp	 ecx, esi
  00058	73 00		 jae	 SHORT $LN45@Linsert@3
$LN45@Linsert@3:
  0005a	8b 7d f4	 mov	 edi, DWORD PTR tv623[ebp]
  0005d	8b ce		 mov	 ecx, esi
  0005f	3b f7		 cmp	 esi, edi
  00061	72 02		 jb	 SHORT $LN50@Linsert@3
  00063	8b cf		 mov	 ecx, edi
$LN50@Linsert@3:
  00065	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00069	72 02		 jb	 SHORT $LN60@Linsert@3
  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN60@Linsert@3:
  0006d	51		 push	 ecx
  0006e	52		 push	 edx
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
  00078	85 c0		 test	 eax, eax
  0007a	75 17		 jne	 SHORT $LN219@Linsert@3
  0007c	3b f7		 cmp	 esi, edi
  0007e	73 0a		 jae	 SHORT $LN51@Linsert@3
  00080	83 c8 ff	 or	 eax, -1
  00083	85 c0		 test	 eax, eax
  00085	0f 99 c0	 setns	 al

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  00088	eb 62		 jmp	 SHORT $LN220@Linsert@3

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

$LN51@Linsert@3:
  0008a	33 c0		 xor	 eax, eax
  0008c	3b f7		 cmp	 esi, edi
  0008e	0f 95 c0	 setne	 al
  00091	85 c0		 test	 eax, eax
$LN219@Linsert@3:
  00093	0f 99 c0	 setns	 al

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  00096	eb 54		 jmp	 SHORT $LN220@Linsert@3
$LN10@Linsert@3:

; 958  : 				_Addleft = _DEBUG_LT_PRED(this->comp,

  00098	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0009c	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
  0009f	72 02		 jb	 SHORT $LN84@Linsert@3
  000a1	8b 00		 mov	 eax, DWORD PTR [eax]
$LN84@Linsert@3:
  000a3	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  000a6	8b 72 1c	 mov	 esi, DWORD PTR [edx+28]
  000a9	3b ce		 cmp	 ecx, esi
  000ab	73 02		 jae	 SHORT $LN86@Linsert@3
  000ad	8b f1		 mov	 esi, ecx
$LN86@Linsert@3:
  000af	8b d6		 mov	 edx, esi
  000b1	3b f7		 cmp	 esi, edi
  000b3	72 02		 jb	 SHORT $LN91@Linsert@3
  000b5	8b d7		 mov	 edx, edi
$LN91@Linsert@3:
  000b7	83 7d f0 10	 cmp	 DWORD PTR tv626[ebp], 16 ; 00000010H
  000bb	8b 4d 0c	 mov	 ecx, DWORD PTR __Node$[ebp]
  000be	72 05		 jb	 SHORT $LN101@Linsert@3
  000c0	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  000c3	eb 03		 jmp	 SHORT $LN102@Linsert@3
$LN101@Linsert@3:
  000c5	83 c1 0c	 add	 ecx, 12			; 0000000cH
$LN102@Linsert@3:
  000c8	52		 push	 edx
  000c9	50		 push	 eax
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d3	85 c0		 test	 eax, eax
  000d5	75 12		 jne	 SHORT $LN221@Linsert@3
  000d7	3b f7		 cmp	 esi, edi
  000d9	73 05		 jae	 SHORT $LN92@Linsert@3
  000db	83 c8 ff	 or	 eax, -1
  000de	eb 07		 jmp	 SHORT $LN93@Linsert@3
$LN92@Linsert@3:
  000e0	33 c0		 xor	 eax, eax
  000e2	3b f7		 cmp	 esi, edi
  000e4	0f 95 c0	 setne	 al
$LN93@Linsert@3:
  000e7	85 c0		 test	 eax, eax
$LN221@Linsert@3:
  000e9	0f 98 c0	 sets	 al
$LN220@Linsert@3:
  000ec	88 45 fc	 mov	 BYTE PTR __Addleft$[ebp], al

; 959  : 					this->_Kfn(_Val),
; 960  : 					this->_Key(_Trynode));	// favor right end
; 961  : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 962  : 				: this->_Right(_Trynode);

  000ef	84 c0		 test	 al, al
  000f1	74 04		 je	 SHORT $LN15@Linsert@3
  000f3	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  000f5	eb 03		 jmp	 SHORT $LN16@Linsert@3
$LN15@Linsert@3:
  000f7	8b 5b 08	 mov	 ebx, DWORD PTR [ebx+8]
$LN16@Linsert@3:

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  000fa	80 7b 3d 00	 cmp	 BYTE PTR [ebx+61], 0
  000fe	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  00101	0f 84 2d ff ff
	ff		 je	 $LL218@Linsert@3
  00107	8b 7d ec	 mov	 edi, DWORD PTR __Wherenode$[ebp]
  0010a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
$LN11@Linsert@3:

; 963  : 			}
; 964  : 
; 965  : 		if (this->_Multi)
; 966  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));
; 967  : 		else
; 968  : 			{	// insert only if unique
; 969  : 			iterator _Where = iterator(_Wherenode, this);

  0010d	8b f7		 mov	 esi, edi
  0010f	89 75 10	 mov	 DWORD PTR __Where$194874[ebp], esi

; 970  : 			if (!_Addleft)

  00112	84 c0		 test	 al, al
  00114	74 36		 je	 SHORT $LN160@Linsert@3

; 971  : 				;	// need to test if insert after is okay
; 972  : 			else if (_Where == begin())

  00116	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00119	3b 38		 cmp	 edi, DWORD PTR [eax]
  0011b	75 21		 jne	 SHORT $LN4@Linsert@3

; 973  : 				return (_Pairib(_Insert(true, _Wherenode, _Node), true));

  0011d	52		 push	 edx
  0011e	57		 push	 edi
  0011f	6a 01		 push	 1
$LN223@Linsert@3:
  00121	8d 55 10	 lea	 edx, DWORD PTR $T231798[ebp]
  00124	52		 push	 edx
  00125	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Insert
  0012a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	89 08		 mov	 DWORD PTR [eax], ecx
  00133	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  00137	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Linsert@3:

; 974  : 			else
; 975  : 				--_Where;	// need to test if insert before is okay

  0013e	8d 4d 10	 lea	 ecx, DWORD PTR __Where$194874[ebp]
  00141	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >,std::_Iterator_base0>::operator--
  00146	8b 75 10	 mov	 esi, DWORD PTR __Where$194874[ebp]
  00149	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
$LN160@Linsert@3:

; 976  : 
; 977  : 			if (_DEBUG_LT_PRED(this->comp,

  0014c	83 7a 20 10	 cmp	 DWORD PTR [edx+32], 16	; 00000010H
  00150	8d 5a 0c	 lea	 ebx, DWORD PTR [edx+12]
  00153	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00156	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00159	72 04		 jb	 SHORT $LN182@Linsert@3
  0015b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0015d	eb 02		 jmp	 SHORT $LN183@Linsert@3
$LN182@Linsert@3:
  0015f	8b c3		 mov	 eax, ebx
$LN183@Linsert@3:
  00161	52		 push	 edx
  00162	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00165	50		 push	 eax
  00166	52		 push	 edx
  00167	6a 00		 push	 0
  00169	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0016e	85 c0		 test	 eax, eax
  00170	79 0e		 jns	 SHORT $LN2@Linsert@3

; 978  : 				this->_Key(_Where._Mynode()),
; 979  : 				this->_Kfn(_Val)))
; 980  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  00172	8b 45 0c	 mov	 eax, DWORD PTR __Node$[ebp]
  00175	8b 4d fc	 mov	 ecx, DWORD PTR __Addleft$[ebp]
  00178	50		 push	 eax
  00179	57		 push	 edi
  0017a	51		 push	 ecx
  0017b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	eb a1		 jmp	 SHORT $LN223@Linsert@3
$LN2@Linsert@3:

; 981  : 			else
; 982  : 				{	// duplicate, don't insert
; 983  : 				_Dest_val(this->_Alval,
; 984  : 					_STD addressof(this->_Myval(_Node)));

  00180	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00183	83 c2 0d	 add	 edx, 13			; 0000000dH
  00186	53		 push	 ebx
  00187	52		 push	 edx
  00188	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >

; 985  : 
; 986  : 				this->_Alnod.deallocate(_Node, 1);

  0018d	8b 45 0c	 mov	 eax, DWORD PTR __Node$[ebp]
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  00196	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019c	5f		 pop	 edi
  0019d	89 30		 mov	 DWORD PTR [eax], esi
  0019f	5e		 pop	 esi
  001a0	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  001a4	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c2 0c 00	 ret	 12			; 0000000cH
?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Linsert
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YA?AU?$pair@PAU_CS_REG_GUILD_DATA@@PAU1@@0@PAU_CS_REG_GUILD_DATA@@0P6AEAAU2@1@Z@Z ; std::_Unguarded_partition<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YA?AU?$pair@PAU_CS_REG_GUILD_DATA@@PAU1@@0@PAU_CS_REG_GUILD_DATA@@0P6AEAAU2@1@Z@Z
_TEXT	SEGMENT
__Plast$ = -8						; size = 4
__Glast$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Unguarded_partition@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YA?AU?$pair@PAU_CS_REG_GUILD_DATA@@PAU1@@0@PAU_CS_REG_GUILD_DATA@@0P6AEAAU2@1@Z@Z PROC ; std::_Unguarded_partition<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 3712 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3713 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  0000f	8b c1		 mov	 eax, ecx
  00011	2b c7		 sub	 eax, edi
  00013	c1 f8 06	 sar	 eax, 6
  00016	99		 cdq
  00017	2b c2		 sub	 eax, edx
  00019	8b f0		 mov	 esi, eax

; 3714 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  0001b	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0001e	d1 fe		 sar	 esi, 1
  00020	50		 push	 eax
  00021	83 c1 c0	 add	 ecx, -64		; ffffffc0H
  00024	c1 e6 06	 shl	 esi, 6
  00027	51		 push	 ecx
  00028	03 f7		 add	 esi, edi
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 ??$_Median@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@00P6AEAAU1@1@Z@Z ; std::_Median<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 3715 : 	_RanIt _Pfirst = _Mid;
; 3716 : 	_RanIt _Plast = _Pfirst + 1;

  00034	8d 5e 40	 lea	 ebx, DWORD PTR [esi+64]
  00037	89 5d f8	 mov	 DWORD PTR __Plast$[ebp], ebx

; 3717 : 
; 3718 : 	while (_First < _Pfirst
; 3719 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3720 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  0003a	3b fe		 cmp	 edi, esi
  0003c	73 24		 jae	 SHORT $LN72@Unguarded_@2
  0003e	8b ff		 npad	 2
$LL27@Unguarded_@2:
  00040	8d 7e c0	 lea	 edi, DWORD PTR [esi-64]
  00043	56		 push	 esi
  00044	57		 push	 edi
  00045	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00048	83 c4 08	 add	 esp, 8
  0004b	84 c0		 test	 al, al
  0004d	75 13		 jne	 SHORT $LN72@Unguarded_@2
  0004f	57		 push	 edi
  00050	56		 push	 esi
  00051	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00054	83 c4 08	 add	 esp, 8
  00057	84 c0		 test	 al, al
  00059	75 07		 jne	 SHORT $LN72@Unguarded_@2

; 3721 : 		--_Pfirst;

  0005b	8b f7		 mov	 esi, edi
  0005d	39 75 0c	 cmp	 DWORD PTR __First$[ebp], esi
  00060	72 de		 jb	 SHORT $LL27@Unguarded_@2
$LN72@Unguarded_@2:

; 3722 : 	while (_Plast < _Last
; 3723 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3724 : 		&& !_Pred(*_Pfirst, *_Plast))

  00062	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00065	73 24		 jae	 SHORT $LN24@Unguarded_@2
$LL25@Unguarded_@2:
  00067	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  0006a	56		 push	 esi
  0006b	53		 push	 ebx
  0006c	ff d7		 call	 edi
  0006e	83 c4 08	 add	 esp, 8
  00071	84 c0		 test	 al, al
  00073	75 13		 jne	 SHORT $LN74@Unguarded_@2
  00075	53		 push	 ebx
  00076	56		 push	 esi
  00077	ff d7		 call	 edi
  00079	83 c4 08	 add	 esp, 8
  0007c	84 c0		 test	 al, al
  0007e	75 08		 jne	 SHORT $LN74@Unguarded_@2

; 3725 : 		++_Plast;

  00080	83 c3 40	 add	 ebx, 64			; 00000040H
  00083	3b 5d 10	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00086	72 df		 jb	 SHORT $LL25@Unguarded_@2
$LN74@Unguarded_@2:
  00088	89 5d f8	 mov	 DWORD PTR __Plast$[ebp], ebx
$LN24@Unguarded_@2:

; 3726 : 
; 3727 : 	_RanIt _Gfirst = _Plast;
; 3728 : 	_RanIt _Glast = _Pfirst;

  0008b	8b c6		 mov	 eax, esi
  0008d	8b fb		 mov	 edi, ebx
  0008f	89 45 fc	 mov	 DWORD PTR __Glast$[ebp], eax
$LL23@Unguarded_@2:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00092	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00095	73 35		 jae	 SHORT $LN62@Unguarded_@2
$LL21@Unguarded_@2:

; 3733 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  00097	57		 push	 edi
  00098	56		 push	 esi
  00099	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0009c	83 c4 08	 add	 esp, 8
  0009f	84 c0		 test	 al, al
  000a1	75 1b		 jne	 SHORT $LN20@Unguarded_@2

; 3734 : 				;
; 3735 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  000a3	56		 push	 esi
  000a4	57		 push	 edi
  000a5	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000a8	83 c4 08	 add	 esp, 8
  000ab	84 c0		 test	 al, al
  000ad	75 17		 jne	 SHORT $LN76@Unguarded_@2

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

  000af	8b c3		 mov	 eax, ebx
  000b1	57		 push	 edi
  000b2	50		 push	 eax
  000b3	83 c3 40	 add	 ebx, 64			; 00000040H
  000b6	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  000bb	83 c4 08	 add	 esp, 8
$LN20@Unguarded_@2:

; 3729 : 
; 3730 : 	for (; ; )
; 3731 : 		{	// partition
; 3732 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000be	83 c7 40	 add	 edi, 64			; 00000040H
  000c1	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  000c4	72 d1		 jb	 SHORT $LL21@Unguarded_@2
$LN76@Unguarded_@2:
  000c6	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]

; 3736 : 				break;
; 3737 : 			else
; 3738 : 				_STD iter_swap(_Plast++, _Gfirst);

  000c9	89 5d f8	 mov	 DWORD PTR __Plast$[ebp], ebx
$LN62@Unguarded_@2:

; 3739 : 		for (; _First < _Glast; --_Glast)

  000cc	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  000cf	76 42		 jbe	 SHORT $LN77@Unguarded_@2
  000d1	8d 58 c0	 lea	 ebx, DWORD PTR [eax-64]
$LL14@Unguarded_@2:

; 3740 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  000d4	56		 push	 esi
  000d5	53		 push	 ebx
  000d6	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000d9	83 c4 08	 add	 esp, 8
  000dc	84 c0		 test	 al, al
  000de	75 19		 jne	 SHORT $LN13@Unguarded_@2

; 3741 : 				;
; 3742 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  000e0	53		 push	 ebx
  000e1	56		 push	 esi
  000e2	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000e5	83 c4 08	 add	 esp, 8
  000e8	84 c0		 test	 al, al
  000ea	75 1e		 jne	 SHORT $LN70@Unguarded_@2

; 3743 : 				break;
; 3744 : 			else
; 3745 : 				_STD iter_swap(--_Pfirst, _Glast - 1);

  000ec	83 ee 40	 sub	 esi, 64			; 00000040H
  000ef	53		 push	 ebx
  000f0	56		 push	 esi
  000f1	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  000f6	83 c4 08	 add	 esp, 8
$LN13@Unguarded_@2:

; 3739 : 		for (; _First < _Glast; --_Glast)

  000f9	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  000fc	83 e8 40	 sub	 eax, 64			; 00000040H
  000ff	83 eb 40	 sub	 ebx, 64			; 00000040H
  00102	89 45 fc	 mov	 DWORD PTR __Glast$[ebp], eax
  00105	39 45 0c	 cmp	 DWORD PTR __First$[ebp], eax
  00108	72 ca		 jb	 SHORT $LL14@Unguarded_@2
$LN70@Unguarded_@2:
  0010a	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  0010d	8b 5d f8	 mov	 ebx, DWORD PTR __Plast$[ebp]

; 3746 : 		if (_Glast == _First && _Gfirst == _Last)

  00110	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
$LN77@Unguarded_@2:
  00113	75 31		 jne	 SHORT $LN6@Unguarded_@2
  00115	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00118	74 75		 je	 SHORT $LN64@Unguarded_@2

; 3748 : 
; 3749 : 		if (_Glast == _First)
; 3750 : 			{	// no room at bottom, rotate pivot upward
; 3751 : 			if (_Plast != _Gfirst)

  0011a	3b df		 cmp	 ebx, edi
  0011c	74 0a		 je	 SHORT $LN46@Unguarded_@2

; 3752 : 				_STD iter_swap(_Pfirst, _Plast);

  0011e	53		 push	 ebx
  0011f	56		 push	 esi
  00120	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  00125	83 c4 08	 add	 esp, 8
$LN46@Unguarded_@2:

; 3753 : 			++_Plast;
; 3754 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  00128	57		 push	 edi
  00129	83 c3 40	 add	 ebx, 64			; 00000040H
  0012c	56		 push	 esi
  0012d	89 5d f8	 mov	 DWORD PTR __Plast$[ebp], ebx
  00130	83 c6 40	 add	 esi, 64			; 00000040H
  00133	83 c7 40	 add	 edi, 64			; 00000040H
  00136	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  0013b	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  0013e	83 c4 08	 add	 esp, 8
  00141	e9 4c ff ff ff	 jmp	 $LL23@Unguarded_@2
$LN6@Unguarded_@2:

; 3755 : 			}
; 3756 : 		else if (_Gfirst == _Last)
; 3757 : 			{	// no room at top, rotate pivot downward
; 3758 : 			if (--_Glast != --_Pfirst)

  00146	83 e8 40	 sub	 eax, 64			; 00000040H
  00149	89 45 fc	 mov	 DWORD PTR __Glast$[ebp], eax
  0014c	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  0014f	75 29		 jne	 SHORT $LN3@Unguarded_@2
  00151	83 ee 40	 sub	 esi, 64			; 00000040H
  00154	3b c6		 cmp	 eax, esi
  00156	74 0a		 je	 SHORT $LN50@Unguarded_@2

; 3759 : 				_STD iter_swap(_Glast, _Pfirst);

  00158	56		 push	 esi
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>
  0015f	83 c4 08	 add	 esp, 8
$LN50@Unguarded_@2:

; 3760 : 			_STD iter_swap(_Pfirst, --_Plast);

  00162	83 eb 40	 sub	 ebx, 64			; 00000040H
  00165	53		 push	 ebx
  00166	56		 push	 esi
  00167	89 5d f8	 mov	 DWORD PTR __Plast$[ebp], ebx
  0016a	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>

; 3761 : 			}
; 3762 : 		else

  0016f	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  00172	83 c4 08	 add	 esp, 8
  00175	e9 18 ff ff ff	 jmp	 $LL23@Unguarded_@2
$LN3@Unguarded_@2:

; 3763 : 			_STD iter_swap(_Gfirst++, --_Glast);

  0017a	50		 push	 eax
  0017b	57		 push	 edi
  0017c	e8 00 00 00 00	 call	 ??$swap@U_CS_REG_GUILD_DATA@@@std@@YAXAAU_CS_REG_GUILD_DATA@@0@Z ; std::swap<_CS_REG_GUILD_DATA>

; 3764 : 		}

  00181	8b 45 fc	 mov	 eax, DWORD PTR __Glast$[ebp]
  00184	83 c4 08	 add	 esp, 8
  00187	83 c7 40	 add	 edi, 64			; 00000040H
  0018a	e9 03 ff ff ff	 jmp	 $LL23@Unguarded_@2
$LN64@Unguarded_@2:

; 3747 : 			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  0018f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00192	5f		 pop	 edi
  00193	89 30		 mov	 DWORD PTR [eax], esi
  00195	5e		 pop	 esi
  00196	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00199	5b		 pop	 ebx

; 3765 : 	}

  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
??$_Unguarded_partition@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YA?AU?$pair@PAU_CS_REG_GUILD_DATA@@PAU1@@0@PAU_CS_REG_GUILD_DATA@@0P6AEAAU2@1@Z@Z ENDP ; std::_Unguarded_partition<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$make_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ; std::make_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
;	COMDAT ??$make_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$make_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z PROC ; std::make_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 2672 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2673 : 	_DEBUG_RANGE(_First, _Last);
; 2674 : 	_DEBUG_POINTER(_Pred);
; 2675 : 	if (1 < _Last - _First)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	8b d0		 mov	 edx, eax
  0000b	2b d1		 sub	 edx, ecx
  0000d	83 e2 c0	 and	 edx, -64		; ffffffc0H
  00010	83 fa 40	 cmp	 edx, 64			; 00000040H
  00013	7e 12		 jle	 SHORT $LN1@make_heap@2

; 2676 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2677 : 			_Dist_type(_First), _Val_type(_First));

  00015	8b 55 10	 mov	 edx, DWORD PTR __Pred$[ebp]
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	52		 push	 edx
  0001d	50		 push	 eax
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z ; std::_Make_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  00024	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@make_heap@2:

; 2678 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$make_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ENDP ; std::make_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ; std::_Insertion_sort<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Insertion_sort@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Insertion_sort@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z PROC ; std::_Insertion_sort<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 3676 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3677 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Pred$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000c	6a 00		 push	 0
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Insertion_sort1<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &),_CS_REG_GUILD_DATA>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 3678 : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Insertion_sort@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ENDP ; std::_Insertion_sort<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ; std::_Pop_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
;	COMDAT ??$_Pop_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z PROC ; std::_Pop_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 2610 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2611 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2612 : 		_Val_type(_First));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Pred$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000c	6a 00		 push	 0
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Pop_heap_0<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 2613 : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Pop_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ENDP ; std::_Pop_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>, COMDAT
; _this$ = ecx

; 255  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00011	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00018	57		 push	 edi
  00019	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00021	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  00028	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0002b	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0002e	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00031	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  00034	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  00037	89 56 28	 mov	 DWORD PTR [esi+40], edx
  0003a	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0003d	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00040	5f		 pop	 edi

; 256  : 		}

  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA><std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>
_TEXT	ENDS
PUBLIC	??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ ; std::map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >::~map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ$1
__ehfuncinfo$??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T232859 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >::~map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T232859[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase
  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
__ehhandler$??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >::~map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::clear, COMDAT
; _this$ = ecx

; 1410 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		this->_Orphan_ptr(*this, 0);
; 1413 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1414 : 
; 1415 : 		_Erase(_Root());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase

; 1416 : 		_Root() = this->_Myhead;

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1417 : 		_Lmost() = this->_Myhead;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	89 00		 mov	 DWORD PTR [eax], eax

; 1418 : 		_Rmost() = this->_Myhead;

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1419 : 		this->_Mysize = 0;

  00022	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00029	5e		 pop	 esi

; 1420 : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::clear
_TEXT	ENDS
PUBLIC	??0?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ ; std::map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >::map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T233085 = -16						; size = 12
$T232978 = -4						; size = 4
??0?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >::map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >, COMDAT
; _this$ = ecx

; 106  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	68 00 08 00 00	 push	 2048			; 00000800H
  0000e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	74 2c		 je	 SHORT $LN25@map@2
  00021	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00024	89 00		 mov	 DWORD PTR [eax], eax
  00026	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00029	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00032	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00035	b0 01		 mov	 al, 1
  00037	88 81 fc 07 00
	00		 mov	 BYTE PTR [ecx+2044], al
  0003d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00040	88 82 fd 07 00
	00		 mov	 BYTE PTR [edx+2045], al

; 107  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0

; 106  : 		{	// construct empty map from defaults

$LN25@map@2:
  0004d	8d 45 fc	 lea	 eax, DWORD PTR $T232978[ebp]
  00050	50		 push	 eax
  00051	8d 4d f0	 lea	 ecx, DWORD PTR $T233085[ebp]
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T232978[ebp], 0
  0005b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00060	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00065	8d 4d f0	 lea	 ecx, DWORD PTR $T233085[ebp]
  00068	51		 push	 ecx
  00069	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T233085[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@map@2:
$LN48@map@2:
  00075	cc		 int	 3
??0?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >::map<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> > >
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T233108 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase, COMDAT
; _this$ = ecx

; 1379 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1380 : 		if (_First == begin() && _Last == end())

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00012	75 38		 jne	 SHORT $LN115@erase@9
  00014	3b d0		 cmp	 edx, eax
  00016	75 34		 jne	 SHORT $LN115@erase@9

; 1381 : 			{	// erase all
; 1382 : 			clear();

  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	50		 push	 eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 00		 mov	 DWORD PTR [eax], eax
  0002e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00031	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1383 : 			return (begin());

  00034	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	89 10		 mov	 DWORD PTR [eax], edx
  00045	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
$LN115@erase@9:

; 1384 : 			}
; 1385 : 		else
; 1386 : 			{	// partial erase, one at a time
; 1387 : 			while (_First != _Last)

  0004c	3b ca		 cmp	 ecx, edx
  0004e	74 62		 je	 SHORT $LN1@erase@9
$LL2@erase@9:

; 1388 : 				erase(_First++);

  00050	80 79 3d 00	 cmp	 BYTE PTR [ecx+61], 0
  00054	8b d1		 mov	 edx, ecx
  00056	75 46		 jne	 SHORT $LN77@erase@9
  00058	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0005b	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  0005f	75 1e		 jne	 SHORT $LN117@erase@9
  00061	8b c8		 mov	 ecx, eax
  00063	8b 01		 mov	 eax, DWORD PTR [ecx]
  00065	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  00069	75 0f		 jne	 SHORT $LN91@erase@9
  0006b	eb 03 8d 49 00	 npad	 5
$LL92@erase@9:
  00070	8b c8		 mov	 ecx, eax
  00072	8b 01		 mov	 eax, DWORD PTR [ecx]
  00074	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  00078	74 f6		 je	 SHORT $LL92@erase@9
$LN91@erase@9:
  0007a	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  0007d	eb 1f		 jmp	 SHORT $LN77@erase@9
$LN117@erase@9:
  0007f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00082	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  00086	75 13		 jne	 SHORT $LN75@erase@9
$LL76@erase@9:
  00088	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0008b	75 0e		 jne	 SHORT $LN75@erase@9
  0008d	8b c8		 mov	 ecx, eax
  0008f	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  00092	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00095	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  00099	74 ed		 je	 SHORT $LL76@erase@9
$LN75@erase@9:
  0009b	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
$LN77@erase@9:
  0009e	52		 push	 edx
  0009f	8d 45 fc	 lea	 eax, DWORD PTR $T233108[ebp]
  000a2	50		 push	 eax
  000a3	8b ce		 mov	 ecx, esi
  000a5	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  000ad	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  000b0	75 9e		 jne	 SHORT $LL2@erase@9
$LN1@erase@9:

; 1389 : 			return (iterator(_First._Ptr, this));

  000b2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b5	89 08		 mov	 DWORD PTR [eax], ecx
  000b7	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase
_TEXT	ENDS
PUBLIC	?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$192144 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$233543 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	3d ff ff ff 03	 cmp	 eax, 67108863		; 03ffffffH
  00035	76 0a		 jbe	 SHORT $LN5@reserve@4

; 748  : 			_Xlen();	// result too long

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0003c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN42@reserve@4:
$LN5@reserve@4:

; 749  : 		else if (capacity() < _Count)

  00041	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00044	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00046	c1 f9 06	 sar	 ecx, 6
  00049	3b c8		 cmp	 ecx, eax
  0004b	73 6b		 jae	 SHORT $LN3@reserve@4

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0004d	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00050	50		 push	 eax
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_CS_REG_GUILD_DATA@@@std@@QAEPAU_CS_REG_GUILD_DATA@@I@Z ; std::allocator<_CS_REG_GUILD_DATA>::allocate

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00058	8b 55 08	 mov	 edx, DWORD PTR __Cat$233543[ebp]
  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b d8		 mov	 ebx, eax
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	89 5d ec	 mov	 DWORD PTR __Ptr$192144[ebp], ebx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_CS_REG_GUILD_DATA@@PAU1@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U1@@std@@YAPAU_CS_REG_GUILD_DATA@@PAU1@00AAV?$allocator@U_CS_REG_GUILD_DATA@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA *,std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00078	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0007b	8b 06		 mov	 eax, DWORD PTR [esi]
  0007d	8b f9		 mov	 edi, ecx
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	2b f8		 sub	 edi, eax
  00084	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0008b	85 c0		 test	 eax, eax
  0008d	74 14		 je	 SHORT $LN35@reserve@4

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  0008f	51		 push	 ecx
  00090	50		 push	 eax
  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXPAU_CS_REG_GUILD_DATA@@0@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00098	8b 06		 mov	 eax, DWORD PTR [esi]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a0	83 c4 04	 add	 esp, 4
$LN35@reserve@4:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  000a3	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000a6	c1 e0 06	 shl	 eax, 6
  000a9	03 c3		 add	 eax, ebx

; 770  : 			this->_Mylast = _Ptr + _Size;

  000ab	83 e7 c0	 and	 edi, -64		; ffffffc0H
  000ae	03 fb		 add	 edi, ebx
  000b0	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000b3	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve@4:

; 772  : 			}
; 773  : 		}

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
__catch$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000cc	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr$192144[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d5	83 c4 04	 add	 esp, 4

; 757  : 			_RERAISE;

  000d8	6a 00		 push	 0
  000da	6a 00		 push	 0
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@reserve@4:
$LN41@reserve@4:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::reserve
PUBLIC	??$_Sort_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ; std::_Sort_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Sort_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z PROC ; std::_Sort_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 2700 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2701 : 	for (; 1 < _Last - _First; --_Last)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000b	57		 push	 edi
  0000c	8b fe		 mov	 edi, esi
  0000e	2b fb		 sub	 edi, ebx
  00010	8b c7		 mov	 eax, edi
  00012	83 e0 c0	 and	 eax, -64		; ffffffc0H
  00015	83 f8 40	 cmp	 eax, 64			; 00000040H
  00018	7e 26		 jle	 SHORT $LN1@Sort_heap@2
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL3@Sort_heap@2:

; 2702 : 		_Pop_heap(_First, _Last, _Pred);

  00020	8b 4d 10	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00023	6a 00		 push	 0
  00025	51		 push	 ecx
  00026	56		 push	 esi
  00027	53		 push	 ebx
  00028	e8 00 00 00 00	 call	 ??$_Pop_heap_0@PAU_CS_REG_GUILD_DATA@@U1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Pop_heap_0<_CS_REG_GUILD_DATA *,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  0002d	83 ef 40	 sub	 edi, 64			; 00000040H
  00030	8b d7		 mov	 edx, edi
  00032	83 e2 c0	 and	 edx, -64		; ffffffc0H
  00035	83 c4 10	 add	 esp, 16			; 00000010H
  00038	83 ee 40	 sub	 esi, 64			; 00000040H
  0003b	83 fa 40	 cmp	 edx, 64			; 00000040H
  0003e	7f e0		 jg	 SHORT $LL3@Sort_heap@2
$LN1@Sort_heap@2:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 2703 : 	}

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Sort_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ENDP ; std::_Sort_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	SEGMENT
__unwindtable$??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z$0
__ehfuncinfo$??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
_TEXT	SEGMENT
$T233601 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z PROC ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00025	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00028	89 75 f0	 mov	 DWORD PTR $T233601[ebp], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00030	3b f0		 cmp	 esi, eax
  00032	74 36		 je	 SHORT $LN3@construct@14
  00034	8b 7d 0c	 mov	 edi, DWORD PTR __Val$[ebp]
  00037	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00041	57		 push	 edi
  00042	8b ce		 mov	 ecx, esi
  00044	88 06		 mov	 BYTE PTR [esi], al
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  00052	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00055	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00058	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  0005b	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  0005e	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  00061	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00064	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$LN3@construct@14:

; 209  : 		}

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T233601[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ENDP ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
PUBLIC	?CheckBuildCsGuildInfo@CCastleSiege@@QAEXXZ	; CCastleSiege::CheckBuildCsGuildInfo
EXTRN	?GS_GDReqCalcRegGuildList@@YAXH@Z:PROC		; GS_GDReqCalcRegGuildList
EXTRN	?GS_GDReqCsLoadTotalGuildInfo@@YAXH@Z:PROC	; GS_GDReqCsLoadTotalGuildInfo
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
;	COMDAT ?CheckBuildCsGuildInfo@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?CheckBuildCsGuildInfo@CCastleSiege@@QAEXXZ PROC	; CCastleSiege::CheckBuildCsGuildInfo, COMDAT
; _this$ = ecx

; 1893 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 1894 : 	m_bCsBasicGuildInfoLoadOK = 0;

  00005	33 c0		 xor	 eax, eax

; 1895 : 	m_bCsTotalGuildInfoLoadOK = 0;
; 1896 : 
; 1897 : 
; 1898 : 	EnterCriticalSection(&m_critCsBasicGuildInfo);

  00007	8d 9e 64 01 00
	00		 lea	 ebx, DWORD PTR [esi+356]
  0000d	53		 push	 ebx
  0000e	89 86 a4 01 00
	00		 mov	 DWORD PTR [esi+420], eax
  00014	89 86 a8 01 00
	00		 mov	 DWORD PTR [esi+424], eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1899 : 	m_mapCsBasicGuildInfo.clear();

  00020	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	8d 8e 54 01 00
	00		 lea	 ecx, DWORD PTR [esi+340]
  00030	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase
  00035	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  0003b	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0003e	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  00044	89 00		 mov	 DWORD PTR [eax], eax
  00046	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  0004c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1900 : 	LeaveCriticalSection(&m_critCsBasicGuildInfo);

  0004f	53		 push	 ebx
  00050	c7 86 5c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+348], 0
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 1901 : 
; 1902 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  00060	8d 9e 8c 01 00
	00		 lea	 ebx, DWORD PTR [esi+396]
  00066	53		 push	 ebx
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1903 : 	m_mapCsTotalGuildInfo.clear();

  0006d	8b 96 80 01 00
	00		 mov	 edx, DWORD PTR [esi+384]
  00073	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00076	50		 push	 eax
  00077	8d 8e 7c 01 00
	00		 lea	 ecx, DWORD PTR [esi+380]
  0007d	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase
  00082	8b 86 80 01 00
	00		 mov	 eax, DWORD PTR [esi+384]
  00088	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0008b	8b 86 80 01 00
	00		 mov	 eax, DWORD PTR [esi+384]
  00091	89 00		 mov	 DWORD PTR [eax], eax
  00093	8b 86 80 01 00
	00		 mov	 eax, DWORD PTR [esi+384]
  00099	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1904 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  0009c	53		 push	 ebx
  0009d	c7 86 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+388], 0
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 1905 : 
; 1906 : 	if(m_btIsSiegeGuildList == TRUE)

  000ad	80 be d4 00 00
	00 01		 cmp	 BYTE PTR [esi+212], 1
  000b4	75 10		 jne	 SHORT $LN2@CheckBuild

; 1907 : 	{
; 1908 : 		GS_GDReqCsLoadTotalGuildInfo(m_iMapSvrGroup);

  000b6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 ?GS_GDReqCsLoadTotalGuildInfo@@YAXH@Z ; GS_GDReqCsLoadTotalGuildInfo

; 1909 : 	}
; 1910 : 	else
; 1911 : 	{
; 1912 : 		GS_GDReqCalcRegGuildList(m_iMapSvrGroup);

  000bf	83 c4 04	 add	 esp, 4
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 1913 : 	}
; 1914 : }

  000c5	c3		 ret	 0
$LN2@CheckBuild:

; 1909 : 	}
; 1910 : 	else
; 1911 : 	{
; 1912 : 		GS_GDReqCalcRegGuildList(m_iMapSvrGroup);

  000c6	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 ?GS_GDReqCalcRegGuildList@@YAXH@Z ; GS_GDReqCalcRegGuildList
  000cf	83 c4 04	 add	 esp, 4
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx

; 1913 : 	}
; 1914 : }

  000d5	c3		 ret	 0
?CheckBuildCsGuildInfo@CCastleSiege@@QAEXXZ ENDP	; CCastleSiege::CheckBuildCsGuildInfo
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?OperateMiniMapWork@CCastleSiege@@QAEXXZ	; CCastleSiege::OperateMiniMapWork
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__ehfuncinfo$?OperateMiniMapWork@CCastleSiege@@QAEXXZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?OperateMiniMapWork@CCastleSiege@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OperateMiniMapWork@CCastleSiege@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$8
	DD	00H
	DD	FLAT:__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$10
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?OperateMiniMapWork@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_stMiniMapData$186760 = -7232				; size = 2028
_$S10$187359 = -5204					; size = 116
$T234159 = -5088					; size = 12
$T233951 = -5076					; size = 8
$T235739 = -5072					; size = 4
$T233945 = -5068					; size = 8
tv2284 = -5064						; size = 4
__Where$235734 = -5060					; size = 4
$T234786 = -5056					; size = 4
$T234006 = -5056					; size = 4
_mapMiniMapData$ = -5052				; size = 16
_this$GSCopy$ = -5036					; size = 4
_iIDX$187419 = -5032					; size = 4
_it$187349 = -5032					; size = 4
$T187417 = -5028					; size = 2032
$T186908 = -5028					; size = 2032
_cBUFFER1$ = -2996					; size = 2264
_cBUFFER2$ = -732					; size = 714
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?OperateMiniMapWork@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::OperateMiniMapWork, COMDAT
; _this$ = ecx

; 3165 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OperateMiniMapWork@CCastleSiege@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 34 1c 00 00	 mov	 eax, 7220		; 00001c34H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b f1		 mov	 esi, ecx

; 3166 : using namespace std;
; 3167 : 	if(m_bCsBasicGuildInfoLoadOK == FALSE)

  00034	33 ff		 xor	 edi, edi

; 3248 : 
; 3249 : 	for(map<int,_CS_MINIMAP_DATA >::iterator it2 = mapMiniMapData.begin();it2 != mapMiniMapData.end();it2++)

  00036	89 b5 54 ec ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0003c	39 be a4 01 00
	00		 cmp	 DWORD PTR [esi+420], edi
  00042	0f 84 40 02 00
	00		 je	 $LN727@OperateMin

; 3168 : 		return;
; 3169 : 
; 3170 : 	map<int,_CS_MINIMAP_DATA > mapMiniMapData;

  00048	68 00 08 00 00	 push	 2048			; 00000800H
  0004d	89 bd 4c ec ff
	ff		 mov	 DWORD PTR _mapMiniMapData$[ebp+8], edi
  00053	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00058	83 c4 04	 add	 esp, 4
  0005b	3b c7		 cmp	 eax, edi
  0005d	0f 84 37 08 00
	00		 je	 $LN68@OperateMin
  00063	89 85 48 ec ff
	ff		 mov	 DWORD PTR _mapMiniMapData$[ebp+4], eax
  00069	89 00		 mov	 DWORD PTR [eax], eax
  0006b	8b 85 48 ec ff
	ff		 mov	 eax, DWORD PTR _mapMiniMapData$[ebp+4]
  00071	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00074	8b 85 48 ec ff
	ff		 mov	 eax, DWORD PTR _mapMiniMapData$[ebp+4]
  0007a	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0007d	8b 85 48 ec ff
	ff		 mov	 eax, DWORD PTR _mapMiniMapData$[ebp+4]
  00083	c6 80 fc 07 00
	00 01		 mov	 BYTE PTR [eax+2044], 1
  0008a	8b 8d 48 ec ff
	ff		 mov	 ecx, DWORD PTR _mapMiniMapData$[ebp+4]
  00090	c6 81 fd 07 00
	00 01		 mov	 BYTE PTR [ecx+2045], 1

; 3171 : 
; 3172 : 	BYTE cBUFFER1[0x8D8] = {0};

  00097	68 d7 08 00 00	 push	 2263			; 000008d7H
  0009c	8d 95 4d f4 ff
	ff		 lea	 edx, DWORD PTR _cBUFFER1$[ebp+1]
  000a2	57		 push	 edi
  000a3	52		 push	 edx
  000a4	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  000a7	c6 85 4c f4 ff
	ff 00		 mov	 BYTE PTR _cBUFFER1$[ebp], 0
  000ae	e8 00 00 00 00	 call	 _memset

; 3173 : 	PMSG_ANS_SENDMINIMAPDATA * lpMsgSend1 = (PMSG_ANS_SENDMINIMAPDATA *)cBUFFER1;
; 3174 : 	PMSG_SENDMINIMAPDATA * lpMsgSendBody1 = (PMSG_SENDMINIMAPDATA *)&cBUFFER1[sizeof(PMSG_ANS_SENDMINIMAPDATA)];
; 3175 : 
; 3176 : 	BYTE cBUFFER2[0x2CA] = {0};

  000b3	68 c9 02 00 00	 push	 713			; 000002c9H
  000b8	8d 85 25 fd ff
	ff		 lea	 eax, DWORD PTR _cBUFFER2$[ebp+1]
  000be	57		 push	 edi
  000bf	50		 push	 eax
  000c0	c6 85 24 fd ff
	ff 00		 mov	 BYTE PTR _cBUFFER2$[ebp], 0
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 18	 add	 esp, 24			; 00000018H

; 3177 : 
; 3178 : 	PMSG_ANS_SENDNPCMINIMAPDATA * lpMsgSend2 = (PMSG_ANS_SENDNPCMINIMAPDATA *)cBUFFER2;
; 3179 : 	PMSG_SENDNPCMINIMAPDATA * lpMsgSendBody2 = (PMSG_SENDNPCMINIMAPDATA *)&cBUFFER2[sizeof(PMSG_ANS_SENDNPCMINIMAPDATA)];
; 3180 : 
; 3181 : 	EnterCriticalSection(&m_critCsBasicGuildInfo);

  000cf	8d 86 64 01 00
	00		 lea	 eax, DWORD PTR [esi+356]
  000d5	50		 push	 eax
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 3182 : 
; 3183 : 	for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsBasicGuildInfo.begin();it != m_mapCsBasicGuildInfo.end(); it++)

  000dc	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  000e2	8b 18		 mov	 ebx, DWORD PTR [eax]
  000e4	3b d8		 cmp	 ebx, eax
  000e6	0f 84 4e 01 00
	00		 je	 $LN33@OperateMin
  000ec	8d 64 24 00	 npad	 4
$LL113@OperateMin:

; 3184 : 	{
; 3185 : 		_CS_TOTAL_GUILD_DATA & stTotalGuildData = it->second;
; 3186 : 		_CS_MINIMAP_DATA stMiniMapData;

  000f0	33 c0		 xor	 eax, eax
  000f2	68 d0 07 00 00	 push	 2000			; 000007d0H
  000f7	50		 push	 eax
  000f8	8d 8d dc e3 ff
	ff		 lea	 ecx, DWORD PTR _stMiniMapData$186760[ebp+28]
  000fe	51		 push	 ecx
  000ff	c7 85 c0 e3 ff
	ff 00 00 00 00	 mov	 DWORD PTR _stMiniMapData$186760[ebp], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  00109	c7 85 c4 e3 ff
	ff ff ff ff ff	 mov	 DWORD PTR _stMiniMapData$186760[ebp+4], -1
  00113	89 85 c8 e3 ff
	ff		 mov	 DWORD PTR _stMiniMapData$186760[ebp+8], eax
  00119	89 85 cc e3 ff
	ff		 mov	 DWORD PTR _stMiniMapData$186760[ebp+12], eax
  0011f	89 85 d0 e3 ff
	ff		 mov	 DWORD PTR _stMiniMapData$186760[ebp+16], eax
  00125	89 85 d4 e3 ff
	ff		 mov	 DWORD PTR _stMiniMapData$186760[ebp+20], eax
  0012b	e8 00 00 00 00	 call	 _memset
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH
  00133	c7 85 d8 e3 ff
	ff 00 00 00 00	 mov	 DWORD PTR _stMiniMapData$186760[ebp+24], 0

; 3187 : 
; 3188 : 		memcpy(stMiniMapData.m_szGuildName,&it->first[0],8);

  0013d	83 7b 20 10	 cmp	 DWORD PTR [ebx+32], 16	; 00000010H
  00141	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00144	72 02		 jb	 SHORT $LN181@OperateMin
  00146	8b 00		 mov	 eax, DWORD PTR [eax]
$LN181@OperateMin:
  00148	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 3189 : 
; 3190 : 		mapMiniMapData.insert(pair<int,_CS_MINIMAP_DATA>(stTotalGuildData.m_iCsGuildID,stMiniMapData));

  0014d	8b 53 30	 mov	 edx, DWORD PTR [ebx+48]
  00150	89 8d c8 e3 ff
	ff		 mov	 DWORD PTR _stMiniMapData$186760[ebp+8], ecx
  00156	89 8d 68 ec ff
	ff		 mov	 DWORD PTR $T186908[ebp+12], ecx
  0015c	8b 8d d4 e3 ff
	ff		 mov	 ecx, DWORD PTR _stMiniMapData$186760[ebp+20]
  00162	89 85 cc e3 ff
	ff		 mov	 DWORD PTR _stMiniMapData$186760[ebp+12], eax
  00168	89 95 5c ec ff
	ff		 mov	 DWORD PTR $T186908[ebp], edx
  0016e	8b 95 c4 e3 ff
	ff		 mov	 edx, DWORD PTR _stMiniMapData$186760[ebp+4]
  00174	89 85 6c ec ff
	ff		 mov	 DWORD PTR $T186908[ebp+16], eax
  0017a	8b 85 d0 e3 ff
	ff		 mov	 eax, DWORD PTR _stMiniMapData$186760[ebp+16]
  00180	89 8d 74 ec ff
	ff		 mov	 DWORD PTR $T186908[ebp+24], ecx
  00186	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  0018b	8d b5 dc e3 ff
	ff		 lea	 esi, DWORD PTR _stMiniMapData$186760[ebp+28]
  00191	8d bd 7c ec ff
	ff		 lea	 edi, DWORD PTR $T186908[ebp+32]
  00197	c7 85 60 ec ff
	ff 00 00 00 00	 mov	 DWORD PTR $T186908[ebp+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  001a1	89 95 64 ec ff
	ff		 mov	 DWORD PTR $T186908[ebp+8], edx
  001a7	89 85 70 ec ff
	ff		 mov	 DWORD PTR $T186908[ebp+20], eax
  001ad	c7 85 78 ec ff
	ff 00 00 00 00	 mov	 DWORD PTR $T186908[ebp+28], 0
  001b7	f3 a5		 rep movsd
  001b9	6a 00		 push	 0
  001bb	8d 95 5c ec ff
	ff		 lea	 edx, DWORD PTR $T186908[ebp]
  001c1	52		 push	 edx
  001c2	8d 8d 44 ec ff
	ff		 lea	 ecx, DWORD PTR _mapMiniMapData$[ebp]
  001c8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001cc	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Buynode<std::pair<int,_CS_MINIMAP_DATA> >
  001d1	50		 push	 eax
  001d2	8d 85 34 ec ff
	ff		 lea	 eax, DWORD PTR $T233945[ebp]
  001d8	50		 push	 eax
  001d9	8d 8d 44 ec ff
	ff		 lea	 ecx, DWORD PTR _mapMiniMapData$[ebp]
  001df	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Linsert
  001e4	80 7b 3d 00	 cmp	 BYTE PTR [ebx+61], 0

; 3191 : 	}

  001e8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001ec	75 3a		 jne	 SHORT $LN745@OperateMin

; 3182 : 
; 3183 : 	for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsBasicGuildInfo.begin();it != m_mapCsBasicGuildInfo.end(); it++)

  001ee	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  001f1	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  001f5	75 16		 jne	 SHORT $LN731@OperateMin
  001f7	8b d8		 mov	 ebx, eax
  001f9	8b 03		 mov	 eax, DWORD PTR [ebx]
  001fb	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  001ff	75 27		 jne	 SHORT $LN745@OperateMin
$LL128@OperateMin:
  00201	8b d8		 mov	 ebx, eax
  00203	8b 03		 mov	 eax, DWORD PTR [ebx]
  00205	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  00209	74 f6		 je	 SHORT $LL128@OperateMin
  0020b	eb 1b		 jmp	 SHORT $LN745@OperateMin
$LN731@OperateMin:
  0020d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00210	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  00214	75 10		 jne	 SHORT $LN111@OperateMin
$LL112@OperateMin:
  00216	3b 58 08	 cmp	 ebx, DWORD PTR [eax+8]
  00219	75 0b		 jne	 SHORT $LN111@OperateMin
  0021b	8b d8		 mov	 ebx, eax
  0021d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00220	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  00224	74 f0		 je	 SHORT $LL112@OperateMin
$LN111@OperateMin:
  00226	8b d8		 mov	 ebx, eax
$LN745@OperateMin:
  00228	8b 8d 54 ec ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0022e	3b 99 58 01 00
	00		 cmp	 ebx, DWORD PTR [ecx+344]
  00234	0f 85 b6 fe ff
	ff		 jne	 $LL113@OperateMin
$LN33@OperateMin:

; 3192 : 
; 3193 : 	LeaveCriticalSection(&m_critCsBasicGuildInfo);

  0023a	8b b5 54 ec ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00240	8d 86 64 01 00
	00		 lea	 eax, DWORD PTR [esi+356]
  00246	50		 push	 eax
  00247	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 3194 : 
; 3195 : 	if(mapMiniMapData.empty())

  0024d	83 bd 4c ec ff
	ff 00		 cmp	 DWORD PTR _mapMiniMapData$[ebp+8], 0
  00254	75 4e		 jne	 SHORT $LN32@OperateMin

; 3196 : 		return;

  00256	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
$LN769@OperateMin:
  0025d	8b 85 48 ec ff
	ff		 mov	 eax, DWORD PTR _mapMiniMapData$[ebp+4]
  00263	8b 08		 mov	 ecx, DWORD PTR [eax]
  00265	50		 push	 eax
  00266	51		 push	 ecx
  00267	8d 95 40 ec ff
	ff		 lea	 edx, DWORD PTR $T234786[ebp]
  0026d	52		 push	 edx
  0026e	8d 8d 44 ec ff
	ff		 lea	 ecx, DWORD PTR _mapMiniMapData$[ebp]
  00274	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase
  00279	8b 85 48 ec ff
	ff		 mov	 eax, DWORD PTR _mapMiniMapData$[ebp+4]
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00285	83 c4 04	 add	 esp, 4

; 3307 : }

$LN727@OperateMin:
  00288	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0028b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00292	59		 pop	 ecx
  00293	5f		 pop	 edi
  00294	5e		 pop	 esi
  00295	5b		 pop	 ebx
  00296	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00299	33 cd		 xor	 ecx, ebp
  0029b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a0	8b e5		 mov	 esp, ebp
  002a2	5d		 pop	 ebp
  002a3	c3		 ret	 0
$LN32@OperateMin:

; 3197 : 
; 3198 : 	EnterCriticalSection(&m_critNpcData);

  002a4	8d 86 38 01 00
	00		 lea	 eax, DWORD PTR [esi+312]
  002aa	50		 push	 eax
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 3199 : 
; 3200 : 
; 3201 : 	lpMsgSend2->iCount = 0;
; 3202 : 
; 3203 : 	if(!m_vtNpcData.empty())

  002b1	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  002b7	c7 85 28 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _cBUFFER2$[ebp+4], 0
  002c1	3b 86 2c 01 00
	00		 cmp	 eax, DWORD PTR [esi+300]
  002c7	0f 84 33 01 00
	00		 je	 $LN742@OperateMin

; 3204 : 	{
; 3205 : 		vector<_CS_NPC_DATA>::iterator it;
; 3206 : 		for(it = m_vtNpcData.begin();it != m_vtNpcData.end();it++)

  002cd	89 85 58 ec ff
	ff		 mov	 DWORD PTR _it$187349[ebp], eax
  002d3	eb 11		 jmp	 SHORT $LN267@OperateMin
  002d5	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL765@OperateMin:
  002e0	8b 85 58 ec ff
	ff		 mov	 eax, DWORD PTR _it$187349[ebp]
$LN267@OperateMin:

; 3207 : 		{
; 3208 : 			if(lpMsgSend2->iCount >= 150)

  002e6	81 bd 28 fd ff
	ff 96 00 00 00	 cmp	 DWORD PTR _cBUFFER2$[ebp+4], 150 ; 00000096H
  002f0	0f 8d 0a 01 00
	00		 jge	 $LN742@OperateMin

; 3209 : 				break;
; 3210 : 
; 3211 : 			_CS_NPC_DATA & pNpcData = _CS_NPC_DATA(*it);

  002f6	50		 push	 eax
  002f7	8d 8d ac eb ff
	ff		 lea	 ecx, DWORD PTR _$S10$187359[ebp]
  002fd	e8 00 00 00 00	 call	 ??0_CS_NPC_DATA@@QAE@ABU0@@Z

; 3212 : 
; 3213 : 			if((pNpcData.m_iNPC_NUM == 277 || pNpcData.m_iNPC_NUM == 283)
; 3214 : 				&& pNpcData.m_iNPC_OBJINDEX != -1)

  00302	8b 9d b4 eb ff
	ff		 mov	 ebx, DWORD PTR _$S10$187359[ebp+8]
  00308	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0030c	81 fb 15 01 00
	00		 cmp	 ebx, 277		; 00000115H
  00312	74 0c		 je	 SHORT $LN25@OperateMin
  00314	81 fb 1b 01 00
	00		 cmp	 ebx, 283		; 0000011bH
  0031a	0f 85 c1 00 00
	00		 jne	 $LN24@OperateMin
$LN25@OperateMin:
  00320	8b bd c4 eb ff
	ff		 mov	 edi, DWORD PTR _$S10$187359[ebp+24]
  00326	83 ff ff	 cmp	 edi, -1
  00329	0f 84 b2 00 00
	00		 je	 $LN24@OperateMin

; 3215 : 			{
; 3216 : 				if(gObjIsConnected(pNpcData.m_iNPC_OBJINDEX) == FALSE
; 3217 : 					|| gObj[pNpcData.m_iNPC_OBJINDEX].m_iCsNpcExistVal != pNpcData.m_iCsNpcExistVal
; 3218 : 					|| (gObj[pNpcData.m_iNPC_OBJINDEX].Class != 277 && gObj[pNpcData.m_iNPC_OBJINDEX].Class != 283))

  0032f	57		 push	 edi
  00330	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00335	83 c4 04	 add	 esp, 4
  00338	85 c0		 test	 eax, eax
  0033a	74 39		 je	 SHORT $LN23@OperateMin
  0033c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00342	8b c7		 mov	 eax, edi
  00344	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  0034a	8b 8c 10 4c 20
	00 00		 mov	 ecx, DWORD PTR [eax+edx+8268]
  00351	3b 8d 1c ec ff
	ff		 cmp	 ecx, DWORD PTR _$S10$187359[ebp+112]
  00357	75 1c		 jne	 SHORT $LN23@OperateMin
  00359	0f b7 84 10 90
	00 00 00	 movzx	 eax, WORD PTR [eax+edx+144]
  00361	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  00366	66 3b c2	 cmp	 ax, dx
  00369	74 76		 je	 SHORT $LN24@OperateMin
  0036b	b9 1b 01 00 00	 mov	 ecx, 283		; 0000011bH
  00370	66 3b c1	 cmp	 ax, cx
  00373	74 6c		 je	 SHORT $LN24@OperateMin
$LN23@OperateMin:

; 3219 : 				{
; 3220 : 					BYTE btNpcType = 0;
; 3221 : 
; 3222 : 					switch(pNpcData.m_iNPC_NUM)

  00375	8b c3		 mov	 eax, ebx
  00377	2d 15 01 00 00	 sub	 eax, 277		; 00000115H
  0037c	74 09		 je	 SHORT $LN20@OperateMin
  0037e	83 e8 06	 sub	 eax, 6

; 3230 : 					default: continue;

  00381	75 5e		 jne	 SHORT $LN24@OperateMin

; 3226 : 						break;
; 3227 : 					case 283:
; 3228 : 						btNpcType = 1;

  00383	b1 01		 mov	 cl, 1

; 3229 : 						break;

  00385	eb 02		 jmp	 SHORT $LN21@OperateMin
$LN20@OperateMin:

; 3223 : 					{
; 3224 : 					case 277:
; 3225 : 						btNpcType = 0;

  00387	32 c9		 xor	 cl, cl
$LN21@OperateMin:

; 3231 : 					}
; 3232 : 
; 3233 : 					lpMsgSendBody2[lpMsgSend2->iCount].btNpcType = btNpcType;

  00389	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _cBUFFER2$[ebp+4]
  0038f	8d 94 05 2c fd
	ff ff		 lea	 edx, DWORD PTR _cBUFFER2$[ebp+eax+8]
  00396	88 0c 42	 mov	 BYTE PTR [edx+eax*2], cl

; 3234 : 					lpMsgSendBody2[lpMsgSend2->iCount].btX = gObj[pNpcData.m_iNPC_OBJINDEX].X;

  00399	8b 8d 28 fd ff
	ff		 mov	 ecx, DWORD PTR _cBUFFER2$[ebp+4]
  0039f	8b c7		 mov	 eax, edi
  003a1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003a7	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  003ad	8a 9c 38 20 01
	00 00		 mov	 bl, BYTE PTR [eax+edi+288]
  003b4	8d 94 0d 2d fd
	ff ff		 lea	 edx, DWORD PTR _cBUFFER2$[ebp+ecx+9]
  003bb	88 1c 4a	 mov	 BYTE PTR [edx+ecx*2], bl

; 3235 : 					lpMsgSendBody2[lpMsgSend2->iCount].btY = gObj[pNpcData.m_iNPC_OBJINDEX].Y;

  003be	8b 8d 28 fd ff
	ff		 mov	 ecx, DWORD PTR _cBUFFER2$[ebp+4]
  003c4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003ca	8a 84 38 21 01
	00 00		 mov	 al, BYTE PTR [eax+edi+289]
  003d1	8d 94 0d 2e fd
	ff ff		 lea	 edx, DWORD PTR _cBUFFER2$[ebp+ecx+10]
  003d8	88 04 4a	 mov	 BYTE PTR [edx+ecx*2], al

; 3236 : 					lpMsgSend2->iCount++;

  003db	ff 85 28 fd ff
	ff		 inc	 DWORD PTR _cBUFFER2$[ebp+4]
$LN24@OperateMin:

; 3204 : 	{
; 3205 : 		vector<_CS_NPC_DATA>::iterator it;
; 3206 : 		for(it = m_vtNpcData.begin();it != m_vtNpcData.end();it++)

  003e1	8b 85 58 ec ff
	ff		 mov	 eax, DWORD PTR _it$187349[ebp]
  003e7	83 c0 74	 add	 eax, 116		; 00000074H

; 3237 : 				}
; 3238 : 			}
; 3239 : 		}

  003ea	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  003ee	89 85 58 ec ff
	ff		 mov	 DWORD PTR _it$187349[ebp], eax
  003f4	3b 86 2c 01 00
	00		 cmp	 eax, DWORD PTR [esi+300]
  003fa	0f 85 e0 fe ff
	ff		 jne	 $LL765@OperateMin
$LN742@OperateMin:

; 3240 : 	}
; 3241 : 
; 3242 : 	lpMsgSend2->h.set(cBUFFER2,0xBB,sizeof(PMSG_ANS_SENDNPCMINIMAPDATA) + sizeof(PMSG_SENDNPCMINIMAPDATA) * lpMsgSend2->iCount);

  00400	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _cBUFFER2$[ebp+4]
  00406	8d 44 40 08	 lea	 eax, DWORD PTR [eax+eax*2+8]
  0040a	8b c8		 mov	 ecx, eax
  0040c	88 85 26 fd ff
	ff		 mov	 BYTE PTR _cBUFFER2$[ebp+2], al

; 3243 : 
; 3244 : 	LeaveCriticalSection(&m_critNpcData);

  00412	8d 86 38 01 00
	00		 lea	 eax, DWORD PTR [esi+312]
  00418	c1 e9 08	 shr	 ecx, 8
  0041b	50		 push	 eax
  0041c	c6 85 24 fd ff
	ff c2		 mov	 BYTE PTR _cBUFFER2$[ebp], 194 ; 000000c2H
  00423	88 8d 25 fd ff
	ff		 mov	 BYTE PTR _cBUFFER2$[ebp+1], cl
  00429	c6 85 27 fd ff
	ff bb		 mov	 BYTE PTR _cBUFFER2$[ebp+3], 187 ; 000000bbH
  00430	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 3245 : 
; 3246 : 	EnterCriticalSection(&m_critCsMiniMap);

  00436	8d 86 bc 01 00
	00		 lea	 eax, DWORD PTR [esi+444]
  0043c	50		 push	 eax
  0043d	89 85 38 ec ff
	ff		 mov	 DWORD PTR tv2284[ebp], eax
  00443	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 3247 : 	m_mapMiniMapData.clear();

  00449	8b 96 b0 01 00
	00		 mov	 edx, DWORD PTR [esi+432]
  0044f	8d 9e ac 01 00
	00		 lea	 ebx, DWORD PTR [esi+428]
  00455	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00458	80 be fd 07 00
	00 00		 cmp	 BYTE PTR [esi+2045], 0
  0045f	8b fe		 mov	 edi, esi
  00461	75 2e		 jne	 SHORT $LN302@OperateMin
$LL304@OperateMin:
  00463	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00466	50		 push	 eax
  00467	8b cb		 mov	 ecx, ebx
  00469	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Erase
  0046e	8b 3f		 mov	 edi, DWORD PTR [edi]
  00470	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00473	51		 push	 ecx
  00474	8d 43 0d	 lea	 eax, DWORD PTR [ebx+13]
  00477	50		 push	 eax
  00478	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@std@@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@0@PAU?$pair@$$CBHU_CS_MINIMAP_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,std::pair<int const ,_CS_MINIMAP_DATA> >
  0047d	56		 push	 esi
  0047e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00483	83 c4 0c	 add	 esp, 12			; 0000000cH
  00486	80 bf fd 07 00
	00 00		 cmp	 BYTE PTR [edi+2045], 0
  0048d	8b f7		 mov	 esi, edi
  0048f	74 d2		 je	 SHORT $LL304@OperateMin
$LN302@OperateMin:
  00491	8b 85 54 ec ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00497	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  0049d	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  004a0	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  004a6	89 09		 mov	 DWORD PTR [ecx], ecx
  004a8	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  004ae	89 49 08	 mov	 DWORD PTR [ecx+8], ecx
  004b1	c7 80 b4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+436], 0

; 3248 : 
; 3249 : 	for(map<int,_CS_MINIMAP_DATA >::iterator it2 = mapMiniMapData.begin();it2 != mapMiniMapData.end();it2++)

  004bb	8b 85 48 ec ff
	ff		 mov	 eax, DWORD PTR _mapMiniMapData$[ebp+4]
  004c1	8b 18		 mov	 ebx, DWORD PTR [eax]
  004c3	3b d8		 cmp	 ebx, eax
  004c5	0f 84 f6 00 00
	00		 je	 $LN15@OperateMin
  004cb	eb 03 8d 49 00	 npad	 5
$LL353@OperateMin:

; 3250 : 	{
; 3251 : 		m_mapMiniMapData.insert(pair<int,_CS_MINIMAP_DATA>(it2->first,it2->second));

  004d0	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  004d3	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  004d6	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  004d9	89 95 5c ec ff
	ff		 mov	 DWORD PTR $T187417[ebp], edx
  004df	8b 53 1c	 mov	 edx, DWORD PTR [ebx+28]
  004e2	89 8d 68 ec ff
	ff		 mov	 DWORD PTR $T187417[ebp+12], ecx
  004e8	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  004eb	89 85 64 ec ff
	ff		 mov	 DWORD PTR $T187417[ebp+8], eax
  004f1	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  004f4	89 95 6c ec ff
	ff		 mov	 DWORD PTR $T187417[ebp+16], edx
  004fa	8b 53 28	 mov	 edx, DWORD PTR [ebx+40]
  004fd	89 8d 74 ec ff
	ff		 mov	 DWORD PTR $T187417[ebp+24], ecx
  00503	8d 73 2c	 lea	 esi, DWORD PTR [ebx+44]
  00506	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  0050b	8d bd 7c ec ff
	ff		 lea	 edi, DWORD PTR $T187417[ebp+32]
  00511	c7 85 60 ec ff
	ff 00 00 00 00	 mov	 DWORD PTR $T187417[ebp+4], OFFSET ??_7_CS_MINIMAP_DATA@@6B@
  0051b	89 85 70 ec ff
	ff		 mov	 DWORD PTR $T187417[ebp+20], eax
  00521	89 95 78 ec ff
	ff		 mov	 DWORD PTR $T187417[ebp+28], edx
  00527	f3 a5		 rep movsd
  00529	8b b5 54 ec ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0052f	6a 00		 push	 0
  00531	8d 85 5c ec ff
	ff		 lea	 eax, DWORD PTR $T187417[ebp]
  00537	50		 push	 eax
  00538	8d 8e ac 01 00
	00		 lea	 ecx, DWORD PTR [esi+428]
  0053e	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00542	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_CS_MINIMAP_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_CS_MINIMAP_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Buynode<std::pair<int,_CS_MINIMAP_DATA> >
  00547	50		 push	 eax
  00548	8d 8d 2c ec ff
	ff		 lea	 ecx, DWORD PTR $T233951[ebp]
  0054e	51		 push	 ecx
  0054f	8d 8e ac 01 00
	00		 lea	 ecx, DWORD PTR [esi+428]
  00555	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::_Linsert
  0055a	80 bb fd 07 00
	00 00		 cmp	 BYTE PTR [ebx+2045], 0
  00561	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00565	75 4e		 jne	 SHORT $LN750@OperateMin

; 3248 : 
; 3249 : 	for(map<int,_CS_MINIMAP_DATA >::iterator it2 = mapMiniMapData.begin();it2 != mapMiniMapData.end();it2++)

  00567	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0056a	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00571	75 1c		 jne	 SHORT $LN736@OperateMin
  00573	8b d8		 mov	 ebx, eax
  00575	8b 03		 mov	 eax, DWORD PTR [ebx]
  00577	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  0057e	75 35		 jne	 SHORT $LN750@OperateMin
$LL368@OperateMin:
  00580	8b d8		 mov	 ebx, eax
  00582	8b 03		 mov	 eax, DWORD PTR [ebx]
  00584	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  0058b	74 f3		 je	 SHORT $LL368@OperateMin
  0058d	eb 26		 jmp	 SHORT $LN750@OperateMin
$LN736@OperateMin:
  0058f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00592	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00599	75 18		 jne	 SHORT $LN351@OperateMin
  0059b	eb 03 8d 49 00	 npad	 5
$LL352@OperateMin:
  005a0	3b 58 08	 cmp	 ebx, DWORD PTR [eax+8]
  005a3	75 0e		 jne	 SHORT $LN351@OperateMin
  005a5	8b d8		 mov	 ebx, eax
  005a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  005aa	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  005b1	74 ed		 je	 SHORT $LL352@OperateMin
$LN351@OperateMin:
  005b3	8b d8		 mov	 ebx, eax
$LN750@OperateMin:
  005b5	3b 9d 48 ec ff
	ff		 cmp	 ebx, DWORD PTR _mapMiniMapData$[ebp+4]
  005bb	0f 85 0f ff ff
	ff		 jne	 $LL353@OperateMin
$LN15@OperateMin:

; 3252 : 	}
; 3253 : 
; 3254 : 	for(int iIDX = OBJ_STARTUSERINDEX; iIDX < OBJMAX;iIDX++)

  005c1	c7 85 58 ec ff
	ff 04 29 00 00	 mov	 DWORD PTR _iIDX$187419[ebp], 10500 ; 00002904H
  005cb	bb 00 dd 49 06	 mov	 ebx, 105504000		; 0649dd00H
$LL14@OperateMin:

; 3255 : 	{
; 3256 : 		if(gObjIsConnected(iIDX) == FALSE)

  005d0	8b 95 58 ec ff
	ff		 mov	 edx, DWORD PTR _iIDX$187419[ebp]
  005d6	52		 push	 edx
  005d7	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  005dc	83 c4 04	 add	 esp, 4
  005df	85 c0		 test	 eax, eax
  005e1	0f 84 4b 01 00
	00		 je	 $LN13@OperateMin

; 3257 : 			continue;
; 3258 : 
; 3259 : 		if(gObj[iIDX].MapNumber != MAP_INDEX_CASTLESIEGE)

  005e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  005ec	80 bc 03 23 01
	00 00 1e	 cmp	 BYTE PTR [ebx+eax+291], 30 ; 0000001eH
  005f4	0f 85 38 01 00
	00		 jne	 $LN13@OperateMin

; 3260 : 			continue;
; 3261 : 
; 3262 : 		if(gObj[iIDX].m_btCsJoinSide == 0)

  005fa	8b c8		 mov	 ecx, eax
  005fc	8a 84 0b 5a 20
	00 00		 mov	 al, BYTE PTR [ebx+ecx+8282]
  00603	84 c0		 test	 al, al
  00605	0f 84 27 01 00
	00		 je	 $LN13@OperateMin

; 3263 : 			continue;
; 3264 : 
; 3265 : 		map<int,_CS_MINIMAP_DATA >::iterator it3 = m_mapMiniMapData.find(gObj[iIDX].m_btCsJoinSide);

  0060b	8b bd 54 ec ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  00611	8b 8f b0 01 00
	00		 mov	 ecx, DWORD PTR [edi+432]
  00617	0f b6 d0	 movzx	 edx, al
  0061a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0061d	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00624	75 17		 jne	 SHORT $LN445@OperateMin
$LL446@OperateMin:
  00626	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  00629	7d 05		 jge	 SHORT $LN444@OperateMin
  0062b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0062e	eb 04		 jmp	 SHORT $LN443@OperateMin
$LN444@OperateMin:
  00630	8b c8		 mov	 ecx, eax
  00632	8b 00		 mov	 eax, DWORD PTR [eax]
$LN443@OperateMin:
  00634	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  0063b	74 e9		 je	 SHORT $LL446@OperateMin
$LN445@OperateMin:
  0063d	8b 87 b0 01 00
	00		 mov	 eax, DWORD PTR [edi+432]
  00643	89 8d 3c ec ff
	ff		 mov	 DWORD PTR __Where$235734[ebp], ecx
  00649	3b c8		 cmp	 ecx, eax
  0064b	74 0d		 je	 SHORT $LN439@OperateMin
  0064d	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00650	7c 08		 jl	 SHORT $LN439@OperateMin
  00652	8d 85 3c ec ff
	ff		 lea	 eax, DWORD PTR __Where$235734[ebp]
  00658	eb 0c		 jmp	 SHORT $LN440@OperateMin
$LN439@OperateMin:
  0065a	89 85 30 ec ff
	ff		 mov	 DWORD PTR $T235739[ebp], eax
  00660	8d 85 30 ec ff
	ff		 lea	 eax, DWORD PTR $T235739[ebp]
$LN440@OperateMin:
  00666	8b 30		 mov	 esi, DWORD PTR [eax]

; 3266 : 
; 3267 : 		if(it3 != m_mapMiniMapData.end())

  00668	3b b7 b0 01 00
	00		 cmp	 esi, DWORD PTR [edi+432]
  0066e	0f 84 be 00 00
	00		 je	 $LN13@OperateMin

; 3268 : 		{
; 3269 : 			if(it3->second.m_iMiniMapPointCount >= 1000)

  00674	81 7e 28 e8 03
	00 00		 cmp	 DWORD PTR [esi+40], 1000 ; 000003e8H
  0067b	0f 8d b1 00 00
	00		 jge	 $LN13@OperateMin

; 3270 : 				continue;
; 3271 : 
; 3272 : 			if(gObj[iIDX].GuildStatus == 0x80
; 3273 : 				&& strcmp(gObj[iIDX].GuildName,"") != 0
; 3274 : 				&& strcmp(gObj[iIDX].GuildName,it3->second.m_szGuildName) == 0)

  00681	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00687	81 bc 13 28 06
	00 00 80 00 00
	00		 cmp	 DWORD PTR [ebx+edx+1576], 128 ; 00000080H
  00692	75 72		 jne	 SHORT $LN6@OperateMin
  00694	8b c2		 mov	 eax, edx
  00696	8d bc 03 1c 06
	00 00		 lea	 edi, DWORD PTR [ebx+eax+1564]
  0069d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  006a2	8b c7		 mov	 eax, edi
$LL756@OperateMin:
  006a4	8a 10		 mov	 dl, BYTE PTR [eax]
  006a6	3a 11		 cmp	 dl, BYTE PTR [ecx]
  006a8	75 1a		 jne	 SHORT $LN757@OperateMin
  006aa	84 d2		 test	 dl, dl
  006ac	74 12		 je	 SHORT $LN758@OperateMin
  006ae	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  006b1	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  006b4	75 0e		 jne	 SHORT $LN757@OperateMin
  006b6	83 c0 02	 add	 eax, 2
  006b9	83 c1 02	 add	 ecx, 2
  006bc	84 d2		 test	 dl, dl
  006be	75 e4		 jne	 SHORT $LL756@OperateMin
$LN758@OperateMin:
  006c0	33 c0		 xor	 eax, eax
  006c2	eb 05		 jmp	 SHORT $LN759@OperateMin
$LN757@OperateMin:
  006c4	1b c0		 sbb	 eax, eax
  006c6	83 d8 ff	 sbb	 eax, -1
$LN759@OperateMin:
  006c9	85 c0		 test	 eax, eax
  006cb	74 39		 je	 SHORT $LN6@OperateMin
  006cd	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  006d0	8b c7		 mov	 eax, edi
$LL760@OperateMin:
  006d2	8a 10		 mov	 dl, BYTE PTR [eax]
  006d4	3a 11		 cmp	 dl, BYTE PTR [ecx]
  006d6	75 1a		 jne	 SHORT $LN761@OperateMin
  006d8	84 d2		 test	 dl, dl
  006da	74 12		 je	 SHORT $LN762@OperateMin
  006dc	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  006df	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  006e2	75 0e		 jne	 SHORT $LN761@OperateMin
  006e4	83 c0 02	 add	 eax, 2
  006e7	83 c1 02	 add	 ecx, 2
  006ea	84 d2		 test	 dl, dl
  006ec	75 e4		 jne	 SHORT $LL760@OperateMin
$LN762@OperateMin:
  006ee	33 c0		 xor	 eax, eax
  006f0	eb 05		 jmp	 SHORT $LN763@OperateMin
$LN761@OperateMin:
  006f2	1b c0		 sbb	 eax, eax
  006f4	83 d8 ff	 sbb	 eax, -1
$LN763@OperateMin:
  006f7	85 c0		 test	 eax, eax
  006f9	75 0b		 jne	 SHORT $LN6@OperateMin

; 3275 : 			{
; 3276 : 				it3->second.m_iGuildMasterIndex = iIDX;

  006fb	8b 8d 58 ec ff
	ff		 mov	 ecx, DWORD PTR _iIDX$187419[ebp]
  00701	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 3277 : 				continue;

  00704	eb 2c		 jmp	 SHORT $LN13@OperateMin
$LN6@OperateMin:

; 3278 : 			}
; 3279 : 
; 3280 : 			it3->second.m_stMiniMapPoint[it3->second.m_iMiniMapPointCount].btX = gObj[iIDX].X;

  00706	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0070c	0f b6 8c 13 20
	01 00 00	 movzx	 ecx, BYTE PTR [ebx+edx+288]
  00714	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00717	88 4c 46 2c	 mov	 BYTE PTR [esi+eax*2+44], cl

; 3281 : 			it3->second.m_stMiniMapPoint[it3->second.m_iMiniMapPointCount].btY = gObj[iIDX].Y;

  0071b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00720	0f b6 8c 03 21
	01 00 00	 movzx	 ecx, BYTE PTR [ebx+eax+289]
  00728	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0072b	88 4c 56 2d	 mov	 BYTE PTR [esi+edx*2+45], cl

; 3282 : 			it3->second.m_iMiniMapPointCount++;

  0072f	ff 46 28	 inc	 DWORD PTR [esi+40]
$LN13@OperateMin:

; 3252 : 	}
; 3253 : 
; 3254 : 	for(int iIDX = OBJ_STARTUSERINDEX; iIDX < OBJMAX;iIDX++)

  00732	ff 85 58 ec ff
	ff		 inc	 DWORD PTR _iIDX$187419[ebp]
  00738	81 c3 40 27 00
	00		 add	 ebx, 10048		; 00002740H
  0073e	81 fb 00 2f e3
	06		 cmp	 ebx, 115552000		; 06e32f00H
  00744	0f 8c 86 fe ff
	ff		 jl	 $LL14@OperateMin

; 3283 : 		}
; 3284 : 	}
; 3285 : 
; 3286 : 	for(map<int,_CS_MINIMAP_DATA >::iterator it4 = m_mapMiniMapData.begin();it4 != m_mapMiniMapData.end();it4++)

  0074a	8b 95 54 ec ff
	ff		 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  00750	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  00756	8b 30		 mov	 esi, DWORD PTR [eax]
  00758	3b f0		 cmp	 esi, eax
  0075a	0f 84 21 01 00
	00		 je	 $LN3@OperateMin
  00760	b3 b6		 mov	 bl, 182			; 000000b6H
  00762	8b fa		 mov	 edi, edx
  00764	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL607@OperateMin:

; 3287 : 	{
; 3288 : 		lpMsgSend1->iCount = 0;

  00770	c7 85 50 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR _cBUFFER1$[ebp+4], 0

; 3289 : 
; 3290 : 		if(gObjIsConnected(it4->second.m_iGuildMasterIndex) == FALSE)

  0077a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0077d	50		 push	 eax
  0077e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00783	83 c4 04	 add	 esp, 4
  00786	85 c0		 test	 eax, eax
  00788	0f 84 86 00 00
	00		 je	 $LN4@OperateMin

; 3291 : 			continue;
; 3292 : 
; 3293 : 		lpMsgSend1->iCount = it4->second.m_iMiniMapPointCount;

  0078e	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00791	89 85 50 f4 ff
	ff		 mov	 DWORD PTR _cBUFFER1$[ebp+4], eax

; 3294 : 
; 3295 : 		if(lpMsgSend1->iCount > 1000)

  00797	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0079c	7e 0b		 jle	 SHORT $LN1@OperateMin

; 3296 : 			lpMsgSend1->iCount = 1000;

  0079e	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  007a3	89 85 50 f4 ff
	ff		 mov	 DWORD PTR _cBUFFER1$[ebp+4], eax
$LN1@OperateMin:

; 3297 : 
; 3298 : 		memcpy(lpMsgSendBody1,it4->second.m_stMiniMapPoint,sizeof(PMSG_SENDMINIMAPDATA) * lpMsgSend1->iCount);

  007a9	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  007ac	51		 push	 ecx
  007ad	8d 56 2c	 lea	 edx, DWORD PTR [esi+44]
  007b0	52		 push	 edx
  007b1	8d 85 54 f4 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER1$[ebp+8]
  007b7	50		 push	 eax
  007b8	e8 00 00 00 00	 call	 _memcpy

; 3299 : 
; 3300 : 		lpMsgSend1->h.set(cBUFFER1,0xB6,sizeof(PMSG_ANS_SENDMINIMAPDATA) + (sizeof(PMSG_SENDMINIMAPDATA) * lpMsgSend1->iCount));

  007bd	8b 85 50 f4 ff
	ff		 mov	 eax, DWORD PTR _cBUFFER1$[ebp+4]
  007c3	8d 44 00 08	 lea	 eax, DWORD PTR [eax+eax+8]
  007c7	8b c8		 mov	 ecx, eax

; 3301 : 
; 3302 : 		DataSend(it4->second.m_iGuildMasterIndex,cBUFFER1,sizeof(PMSG_ANS_SENDMINIMAPDATA) + (sizeof(PMSG_SENDMINIMAPDATA) * lpMsgSend1->iCount));

  007c9	50		 push	 eax
  007ca	c1 e9 08	 shr	 ecx, 8
  007cd	8d 95 4c f4 ff
	ff		 lea	 edx, DWORD PTR _cBUFFER1$[ebp]
  007d3	c6 85 4c f4 ff
	ff c2		 mov	 BYTE PTR _cBUFFER1$[ebp], 194 ; 000000c2H
  007da	88 8d 4d f4 ff
	ff		 mov	 BYTE PTR _cBUFFER1$[ebp+1], cl
  007e0	88 85 4e f4 ff
	ff		 mov	 BYTE PTR _cBUFFER1$[ebp+2], al
  007e6	88 9d 4f f4 ff
	ff		 mov	 BYTE PTR _cBUFFER1$[ebp+3], bl
  007ec	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  007ef	52		 push	 edx
  007f0	50		 push	 eax
  007f1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3303 : 		DataSend(it4->second.m_iGuildMasterIndex,cBUFFER2,sizeof(PMSG_ANS_SENDNPCMINIMAPDATA) + sizeof(PMSG_SENDNPCMINIMAPDATA) * lpMsgSend2->iCount);

  007f6	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _cBUFFER2$[ebp+4]
  007fc	8d 4c 40 08	 lea	 ecx, DWORD PTR [eax+eax*2+8]
  00800	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00803	51		 push	 ecx
  00804	8d 95 24 fd ff
	ff		 lea	 edx, DWORD PTR _cBUFFER2$[ebp]
  0080a	52		 push	 edx
  0080b	50		 push	 eax
  0080c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00811	83 c4 24	 add	 esp, 36			; 00000024H
$LN4@OperateMin:

; 3283 : 		}
; 3284 : 	}
; 3285 : 
; 3286 : 	for(map<int,_CS_MINIMAP_DATA >::iterator it4 = m_mapMiniMapData.begin();it4 != m_mapMiniMapData.end();it4++)

  00814	80 be fd 07 00
	00 00		 cmp	 BYTE PTR [esi+2045], 0
  0081b	75 58		 jne	 SHORT $LN754@OperateMin
  0081d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00820	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00827	75 26		 jne	 SHORT $LN741@OperateMin
  00829	8b f0		 mov	 esi, eax
  0082b	8b 06		 mov	 eax, DWORD PTR [esi]
  0082d	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00834	75 3f		 jne	 SHORT $LN754@OperateMin
  00836	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL622@OperateMin:
  00840	8b f0		 mov	 esi, eax
  00842	8b 06		 mov	 eax, DWORD PTR [esi]
  00844	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  0084b	74 f3		 je	 SHORT $LL622@OperateMin
  0084d	eb 26		 jmp	 SHORT $LN754@OperateMin
$LN741@OperateMin:
  0084f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00852	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00859	75 18		 jne	 SHORT $LN605@OperateMin
  0085b	eb 03 8d 49 00	 npad	 5
$LL606@OperateMin:
  00860	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00863	75 0e		 jne	 SHORT $LN605@OperateMin
  00865	8b f0		 mov	 esi, eax
  00867	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0086a	80 b8 fd 07 00
	00 00		 cmp	 BYTE PTR [eax+2045], 0
  00871	74 ed		 je	 SHORT $LL606@OperateMin
$LN605@OperateMin:
  00873	8b f0		 mov	 esi, eax
$LN754@OperateMin:
  00875	3b b7 b0 01 00
	00		 cmp	 esi, DWORD PTR [edi+432]
  0087b	0f 85 ef fe ff
	ff		 jne	 $LL607@OperateMin
$LN3@OperateMin:

; 3304 : 	}
; 3305 : 
; 3306 : 	LeaveCriticalSection(&m_critCsMiniMap);

  00881	8b 8d 38 ec ff
	ff		 mov	 ecx, DWORD PTR tv2284[ebp]
  00887	51		 push	 ecx
  00888	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 3307 : }

  0088e	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  00895	e9 c3 f9 ff ff	 jmp	 $LN769@OperateMin

; 3168 : 		return;
; 3169 : 
; 3170 : 	map<int,_CS_MINIMAP_DATA > mapMiniMapData;

$LN68@OperateMin:
  0089a	8d 8d 40 ec ff
	ff		 lea	 ecx, DWORD PTR $T234006[ebp]
  008a0	51		 push	 ecx
  008a1	8d 8d 20 ec ff
	ff		 lea	 ecx, DWORD PTR $T234159[ebp]
  008a7	89 bd 40 ec ff
	ff		 mov	 DWORD PTR $T234006[ebp], edi
  008ad	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  008b2	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  008b7	8d 95 20 ec ff
	ff		 lea	 edx, DWORD PTR $T234159[ebp]
  008bd	52		 push	 edx
  008be	c7 85 20 ec ff
	ff 00 00 00 00	 mov	 DWORD PTR $T234159[ebp], OFFSET ??_7bad_alloc@std@@6B@
  008c8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN770@OperateMin:
$LN768@OperateMin:
  008cd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$0:
  00000	8d 8d 44 ec ff
	ff		 lea	 ecx, DWORD PTR _mapMiniMapData$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ
__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$1:
  0000b	8d 8d c0 e3 ff
	ff		 lea	 ecx, DWORD PTR _stMiniMapData$186760[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1_CS_MINIMAP_DATA@@UAE@XZ ; _CS_MINIMAP_DATA::~_CS_MINIMAP_DATA
__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$2:
  00016	8d 8d 5c ec ff
	ff		 lea	 ecx, DWORD PTR $T186908[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@XZ
__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$8:
  00021	8d 8d 44 ec ff
	ff		 lea	 ecx, DWORD PTR _mapMiniMapData$[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$3:
  0002c	8d 8d ac eb ff
	ff		 lea	 ecx, DWORD PTR _$S10$187359[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1_CS_NPC_DATA@@UAE@XZ	; _CS_NPC_DATA::~_CS_NPC_DATA
__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$4:
  00037	8d 8d 5c ec ff
	ff		 lea	 ecx, DWORD PTR $T187417[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$pair@HU_CS_MINIMAP_DATA@@@std@@QAE@XZ
__unwindfunclet$?OperateMiniMapWork@CCastleSiege@@QAEXXZ$10:
  00042	8d 8d 44 ec ff
	ff		 lea	 ecx, DWORD PTR _mapMiniMapData$[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
__ehhandler$?OperateMiniMapWork@CCastleSiege@@QAEXXZ:
  0004d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00051	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00054	8b 8a bc e3 ff
	ff		 mov	 ecx, DWORD PTR [edx-7236]
  0005a	33 c8		 xor	 ecx, eax
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00064	33 c8		 xor	 ecx, eax
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OperateMiniMapWork@CCastleSiege@@QAEXXZ
  00070	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OperateMiniMapWork@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::OperateMiniMapWork
PUBLIC	?ResetCastleCycle@CCastleSiege@@QAEXXZ		; CCastleSiege::ResetCastleCycle
; Function compile flags: /Ogtp
;	COMDAT ?ResetCastleCycle@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ResetCastleCycle@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ResetCastleCycle, COMDAT
; _this$ = ecx

; 4709 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 4710 : 	m_bCsBasicGuildInfoLoadOK = FALSE;
; 4711 : 	m_bCsTotalGuildInfoLoadOK = FALSE;
; 4712 : 
; 4713 : 	EnterCriticalSection(&m_critCsBasicGuildInfo);

  00005	8d 86 64 01 00
	00		 lea	 eax, DWORD PTR [esi+356]
  0000b	33 db		 xor	 ebx, ebx
  0000d	50		 push	 eax
  0000e	89 9e a4 01 00
	00		 mov	 DWORD PTR [esi+420], ebx
  00014	89 9e a8 01 00
	00		 mov	 DWORD PTR [esi+424], ebx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4714 : 	m_mapCsBasicGuildInfo.clear();

  00020	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	8d 8e 54 01 00
	00		 lea	 ecx, DWORD PTR [esi+340]
  00030	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase
  00035	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  0003b	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0003e	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  00044	89 00		 mov	 DWORD PTR [eax], eax
  00046	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  0004c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 4715 : 	LeaveCriticalSection(&m_critCsBasicGuildInfo);

  0004f	8d 86 64 01 00
	00		 lea	 eax, DWORD PTR [esi+356]
  00055	50		 push	 eax
  00056	89 9e 5c 01 00
	00		 mov	 DWORD PTR [esi+348], ebx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4716 : 
; 4717 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  00062	8d 86 8c 01 00
	00		 lea	 eax, DWORD PTR [esi+396]
  00068	50		 push	 eax
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4718 : 	m_mapCsTotalGuildInfo.clear();

  0006f	8b 96 80 01 00
	00		 mov	 edx, DWORD PTR [esi+384]
  00075	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00078	50		 push	 eax
  00079	8d 8e 7c 01 00
	00		 lea	 ecx, DWORD PTR [esi+380]
  0007f	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase
  00084	8b 86 80 01 00
	00		 mov	 eax, DWORD PTR [esi+384]
  0008a	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0008d	8b 86 80 01 00
	00		 mov	 eax, DWORD PTR [esi+384]
  00093	89 00		 mov	 DWORD PTR [eax], eax
  00095	8b 86 80 01 00
	00		 mov	 eax, DWORD PTR [esi+384]
  0009b	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 4719 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  0009e	8d 86 8c 01 00
	00		 lea	 eax, DWORD PTR [esi+396]
  000a4	50		 push	 eax
  000a5	89 9e 84 01 00
	00		 mov	 DWORD PTR [esi+388], ebx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000b1	5f		 pop	 edi

; 4720 : 
; 4721 : 	m_bCastleTowerAccessable = FALSE;

  000b2	89 9e e4 01 00
	00		 mov	 DWORD PTR [esi+484], ebx

; 4722 : 	m_bRegCrownAvailable = FALSE;

  000b8	89 9e e8 01 00
	00		 mov	 DWORD PTR [esi+488], ebx

; 4723 : 	m_btIsSiegeGuildList = FALSE;

  000be	66 89 9e d4 00
	00 00		 mov	 WORD PTR [esi+212], bx
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx

; 4724 : 	 m_btIsSiegeEnded = FALSE;
; 4725 : }

  000c7	c3		 ret	 0
?ResetCastleCycle@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ResetCastleCycle
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tidy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T236761 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1865 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1866 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T236761[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase

; 1867 : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Reserve
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1291 : 		size_type _Size = size();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1292 : 		if (max_size() - _Count < _Size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	2b c6		 sub	 eax, esi
  0000f	bf ff ff ff 03	 mov	 edi, 67108863		; 03ffffffH
  00014	c1 f8 06	 sar	 eax, 6
  00017	2b fa		 sub	 edi, edx
  00019	3b f8		 cmp	 edi, eax
  0001b	73 0a		 jae	 SHORT $LN4@Reserve@4

; 1293 : 			_Xlen();

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN34@Reserve@4:
$LN4@Reserve@4:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	03 c2		 add	 eax, edx
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	2b d6		 sub	 edx, esi
  0002e	c1 fa 06	 sar	 edx, 6
  00031	3b c2		 cmp	 eax, edx
  00033	76 21		 jbe	 SHORT $LN1@Reserve@4

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	8b f2		 mov	 esi, edx
  00037	d1 ee		 shr	 esi, 1
  00039	bf ff ff ff 03	 mov	 edi, 67108863		; 03ffffffH
  0003e	2b fe		 sub	 edi, esi
  00040	3b fa		 cmp	 edi, edx
  00042	73 04		 jae	 SHORT $LN23@Reserve@4
  00044	33 d2		 xor	 edx, edx
  00046	eb 02		 jmp	 SHORT $LN24@Reserve@4
$LN23@Reserve@4:
  00048	03 d6		 add	 edx, esi
$LN24@Reserve@4:
  0004a	3b d0		 cmp	 edx, eax
  0004c	73 02		 jae	 SHORT $LN20@Reserve@4
  0004e	8b d0		 mov	 edx, eax
$LN20@Reserve@4:
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXI@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::reserve
$LN1@Reserve@4:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1298 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN33@Reserve@4:
?_Reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Reserve
_TEXT	ENDS
PUBLIC	??$sort_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ; std::sort_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$sort_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z PROC ; std::sort_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 2708 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2713 : 	}

  00003	5d		 pop	 ebp

; 2709 : 	_DEBUG_RANGE(_First, _Last);
; 2710 : 	_DEBUG_POINTER(_Pred);
; 2711 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2712 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00004	e9 00 00 00 00	 jmp	 ??$_Sort_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ; std::_Sort_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
??$sort_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ENDP ; std::sort_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ; std::_Cons_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z
_TEXT	SEGMENT
$T237157 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z PROC ; std::_Cons_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00025	8b 75 0c	 mov	 esi, DWORD PTR __Pdest$[ebp]
  00028	89 75 f0	 mov	 DWORD PTR $T237157[ebp], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00030	3b f0		 cmp	 esi, eax
  00032	74 36		 je	 SHORT $LN7@Cons_val@14
  00034	8b 7d 10	 mov	 edi, DWORD PTR __Src$[ebp]
  00037	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00041	57		 push	 edi
  00042	8b ce		 mov	 ecx, esi
  00044	88 06		 mov	 BYTE PTR [esi], al
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  00052	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00055	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00058	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  0005b	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  0005e	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  00061	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00064	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$LN7@Cons_val@14:

; 281  : 	}

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z$0:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T237157[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
PUBLIC	??_C@_0DN@GPOMMFJP@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ ; `string'
PUBLIC	?SetState_NOTIFY@CCastleSiege@@QAEXH@Z		; CCastleSiege::SetState_NOTIFY
;	COMDAT ??_C@_0DN@GPOMMFJP@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
CONST	SEGMENT
??_C@_0DN@GPOMMFJP@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ DB '[Castle'
	DB	'Siege] CCastleSiege::SetState_NOTIFY() - iGAP_SEC < 0', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_NOTIFY@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bSetRemainMsec$ = 8					; size = 4
?SetState_NOTIFY@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_NOTIFY, COMDAT
; _this$ = ecx

; 1702 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1703 : 	if(bSetRemainMsec != FALSE)

  00003	83 7d 08 00	 cmp	 DWORD PTR _bSetRemainMsec$[ebp], 0
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	74 2c		 je	 SHORT $LN2@SetState_N

; 1704 : 	{
; 1705 : 		int iGAP_SEC = GetStateGapSec(CASTLESIEGE_STATE_NOTIFY);

  0000c	56		 push	 esi
  0000d	6a 05		 push	 5
  0000f	e8 00 00 00 00	 call	 ?GetStateGapSec@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetStateGapSec
  00014	8b f0		 mov	 esi, eax

; 1706 : 
; 1707 : 		if(iGAP_SEC < 0)

  00016	85 f6		 test	 esi, esi
  00018	79 14		 jns	 SHORT $LN1@SetState_N

; 1708 : 		{
; 1709 : 			m_bDoRun = 0;
; 1710 : 			MsgBox("[CastleSiege] CCastleSiege::SetState_NOTIFY() - iGAP_SEC < 0");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@GPOMMFJP@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
  0001f	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00026	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002b	83 c4 04	 add	 esp, 4
$LN1@SetState_N:

; 1711 : 		}
; 1712 : 
; 1713 : 		m_iCS_REMAIN_MSEC = iGAP_SEC * 1000;

  0002e	69 f6 e8 03 00
	00		 imul	 esi, 1000		; 000003e8H
  00034	89 77 68	 mov	 DWORD PTR [edi+104], esi
  00037	5e		 pop	 esi
$LN2@SetState_N:

; 1714 : 	}
; 1715 : 
; 1716 : 	CheckBuildCsGuildInfo();

  00038	8b cf		 mov	 ecx, edi
  0003a	e8 00 00 00 00	 call	 ?CheckBuildCsGuildInfo@CCastleSiege@@QAEXXZ ; CCastleSiege::CheckBuildCsGuildInfo
  0003f	5f		 pop	 edi

; 1717 : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?SetState_NOTIFY@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_NOTIFY
_TEXT	ENDS
PUBLIC	??_C@_0EB@MCCKBJAL@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ ; `string'
PUBLIC	?SetState_READYSIEGE@CCastleSiege@@QAEXH@Z	; CCastleSiege::SetState_READYSIEGE
;	COMDAT ??_C@_0EB@MCCKBJAL@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
CONST	SEGMENT
??_C@_0EB@MCCKBJAL@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@ DB '[Castle'
	DB	'Siege] CCastleSiege::SetState_READYSIEGE() - iGAP_SEC < 0', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetState_READYSIEGE@CCastleSiege@@QAEXH@Z
_TEXT	SEGMENT
_bSetRemainMsec$ = 8					; size = 4
?SetState_READYSIEGE@CCastleSiege@@QAEXH@Z PROC		; CCastleSiege::SetState_READYSIEGE, COMDAT
; _this$ = ecx

; 1720 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1721 : 	if(bSetRemainMsec != FALSE)

  00003	83 7d 08 00	 cmp	 DWORD PTR _bSetRemainMsec$[ebp], 0
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	74 2c		 je	 SHORT $LN2@SetState_R@3

; 1722 : 	{
; 1723 : 		int iGAP_SEC = GetStateGapSec(CASTLESIEGE_STATE_READYSIEGE);

  0000c	56		 push	 esi
  0000d	6a 06		 push	 6
  0000f	e8 00 00 00 00	 call	 ?GetStateGapSec@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetStateGapSec
  00014	8b f0		 mov	 esi, eax

; 1724 : 
; 1725 : 		if(iGAP_SEC < 0)

  00016	85 f6		 test	 esi, esi
  00018	79 14		 jns	 SHORT $LN1@SetState_R@3

; 1726 : 		{
; 1727 : 			m_bDoRun = 0;
; 1728 : 			MsgBox("[CastleSiege] CCastleSiege::SetState_READYSIEGE() - iGAP_SEC < 0");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@MCCKBJAL@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetS@
  0001f	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00026	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002b	83 c4 04	 add	 esp, 4
$LN1@SetState_R@3:

; 1729 : 		}
; 1730 : 
; 1731 : 		m_iCS_REMAIN_MSEC = iGAP_SEC * 1000;

  0002e	69 f6 e8 03 00
	00		 imul	 esi, 1000		; 000003e8H
  00034	89 77 68	 mov	 DWORD PTR [edi+104], esi
  00037	5e		 pop	 esi
$LN2@SetState_R@3:

; 1732 : 	}
; 1733 : 
; 1734 : 	CheckBuildCsGuildInfo();

  00038	8b cf		 mov	 ecx, edi
  0003a	e8 00 00 00 00	 call	 ?CheckBuildCsGuildInfo@CCastleSiege@@QAEXXZ ; CCastleSiege::CheckBuildCsGuildInfo
  0003f	5f		 pop	 edi

; 1735 : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?SetState_READYSIEGE@CCastleSiege@@QAEXH@Z ENDP		; CCastleSiege::SetState_READYSIEGE
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::~_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T237320 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::~_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >, COMDAT
; _this$ = ecx

; 790  : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 791  : 		_Tidy();

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T237320[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase

; 792  : 		}

  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
__ehhandler$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::~_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
PUBLIC	?push_back@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXABU_CS_REG_GUILD_DATA@@@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::push_back
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXABU_CS_REG_GUILD_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXABU_CS_REG_GUILD_DATA@@@Z PROC ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 36		 jae	 SHORT $LN4@push_back@4
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 30		 ja	 SHORT $LN4@push_back@4

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx

; 980  : 			if (this->_Mylast == this->_Myend)

  00019	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001c	75 09		 jne	 SHORT $LN3@push_back@4

; 981  : 				_Reserve(1);

  0001e	6a 01		 push	 1
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Reserve
$LN3@push_back@4:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 e7 c0	 and	 edi, -64		; ffffffc0H
  0002d	03 3e		 add	 edi, DWORD PTR [esi]
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	57		 push	 edi
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@AAU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@AAU2@@Z ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA &>

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0003d	83 46 04 40	 add	 DWORD PTR [esi+4], 64	; 00000040H
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN4@push_back@4:

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else
; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00047	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004a	75 09		 jne	 SHORT $LN1@push_back@4

; 991  : 				_Reserve(1);

  0004c	6a 01		 push	 1
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::_Reserve
$LN1@push_back@4:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00055	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00058	57		 push	 edi
  00059	52		 push	 edx
  0005a	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@ABU3@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@ABU2@@Z ; std::_Cons_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA,_CS_REG_GUILD_DATA const &>
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  00066	83 46 04 40	 add	 DWORD PTR [esi+4], 64	; 00000040H
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?push_back@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXABU_CS_REG_GUILD_DATA@@@Z ENDP ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::push_back
_TEXT	ENDS
PUBLIC	??$_Sort@PAU_CS_REG_GUILD_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0HP6AEAAU1@1@Z@Z ; std::_Sort<_CS_REG_GUILD_DATA *,int,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAU_CS_REG_GUILD_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0HP6AEAAU1@1@Z@Z
_TEXT	SEGMENT
__Mid$195686 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Sort@PAU_CS_REG_GUILD_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0HP6AEAAU1@1@Z@Z PROC ; std::_Sort<_CS_REG_GUILD_DATA *,int,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 3771 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000f	8b c7		 mov	 eax, edi
  00011	2b c3		 sub	 eax, ebx
  00013	c1 f8 06	 sar	 eax, 6
  00016	83 f8 20	 cmp	 eax, 32			; 00000020H
  00019	7e 77		 jle	 SHORT $LN34@Sort@2
  0001b	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
  0001e	8b ff		 npad	 2
$LL7@Sort@2:
  00020	85 f6		 test	 esi, esi
  00022	0f 8e 86 00 00
	00		 jle	 $LN6@Sort@2

; 3774 : 		{	// divide and conquer by quicksort
; 3775 : 		_STD pair<_RanIt, _RanIt> _Mid =
; 3776 : 			_Unguarded_partition(_First, _Last, _Pred);

  00028	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0002b	50		 push	 eax
  0002c	57		 push	 edi
  0002d	8d 4d f8	 lea	 ecx, DWORD PTR __Mid$195686[ebp]
  00030	53		 push	 ebx
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YA?AU?$pair@PAU_CS_REG_GUILD_DATA@@PAU1@@0@PAU_CS_REG_GUILD_DATA@@0P6AEAAU2@1@Z@Z ; std::_Unguarded_partition<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>

; 3777 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3778 : 
; 3779 : 		if (_Mid.first - _First < _Last - _Mid.second)

  00037	8b 4d f8	 mov	 ecx, DWORD PTR __Mid$195686[ebp]
  0003a	8b c6		 mov	 eax, esi
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	8b f0		 mov	 esi, eax
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	03 f0		 add	 esi, eax
  0004a	8b 45 fc	 mov	 eax, DWORD PTR __Mid$195686[ebp+4]
  0004d	8b d7		 mov	 edx, edi
  0004f	2b d0		 sub	 edx, eax
  00051	2b cb		 sub	 ecx, ebx
  00053	83 e2 c0	 and	 edx, -64		; ffffffc0H
  00056	83 e1 c0	 and	 ecx, -64		; ffffffc0H
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	3b ca		 cmp	 ecx, edx
  0005e	7d 14		 jge	 SHORT $LN5@Sort@2

; 3780 : 			{	// loop on second half
; 3781 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  00060	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  00063	8b 45 f8	 mov	 eax, DWORD PTR __Mid$195686[ebp]
  00066	52		 push	 edx
  00067	56		 push	 esi
  00068	50		 push	 eax
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 ??$_Sort@PAU_CS_REG_GUILD_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0HP6AEAAU1@1@Z@Z ; std::_Sort<_CS_REG_GUILD_DATA *,int,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>

; 3782 : 			_First = _Mid.second;

  0006f	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$195686[ebp+4]

; 3783 : 			}
; 3784 : 		else

  00072	eb 0f		 jmp	 SHORT $LN35@Sort@2
$LN5@Sort@2:

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  00074	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00077	51		 push	 ecx
  00078	56		 push	 esi
  00079	57		 push	 edi
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Sort@PAU_CS_REG_GUILD_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0HP6AEAAU1@1@Z@Z ; std::_Sort<_CS_REG_GUILD_DATA *,int,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>

; 3787 : 			_Last = _Mid.first;

  00080	8b 7d f8	 mov	 edi, DWORD PTR __Mid$195686[ebp]
$LN35@Sort@2:

; 3772 : 	_Diff _Count;
; 3773 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00083	8b c7		 mov	 eax, edi
  00085	2b c3		 sub	 eax, ebx
  00087	c1 f8 06	 sar	 eax, 6

; 3785 : 			{	// loop on first half
; 3786 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00090	7f 8e		 jg	 SHORT $LL7@Sort@2
$LN34@Sort@2:

; 3795 : 		}
; 3796 : 	else if (1 < _Count)

  00092	83 f8 01	 cmp	 eax, 1
  00095	7e 10		 jle	 SHORT $LN27@Sort@2

; 3797 : 		_Insertion_sort(_First, _Last, _Pred);	// small

  00097	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  0009a	6a 00		 push	 0
  0009c	52		 push	 edx
  0009d	57		 push	 edi
  0009e	53		 push	 ebx
  0009f	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@ZU1@@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z0@Z ; std::_Insertion_sort1<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &),_CS_REG_GUILD_DATA>
  000a4	83 c4 10	 add	 esp, 16			; 00000010H
$LN27@Sort@2:
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx

; 3798 : 	}

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN6@Sort@2:

; 3788 : 			}
; 3789 : 		}
; 3790 : 
; 3791 : 	if (_ISORT_MAX < _Count)

  000ae	83 f8 20	 cmp	 eax, 32			; 00000020H
  000b1	7e df		 jle	 SHORT $LN34@Sort@2

; 3792 : 		{	// heap sort if too many divisions
; 3793 : 		_STD make_heap(_First, _Last, _Pred);

  000b3	8b d7		 mov	 edx, edi
  000b5	2b d3		 sub	 edx, ebx
  000b7	83 e2 c0	 and	 edx, -64		; ffffffc0H
  000ba	83 fa 40	 cmp	 edx, 64			; 00000040H
  000bd	7e 12		 jle	 SHORT $LN33@Sort@2
  000bf	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  000c2	6a 00		 push	 0
  000c4	6a 00		 push	 0
  000c6	50		 push	 eax
  000c7	57		 push	 edi
  000c8	53		 push	 ebx
  000c9	e8 00 00 00 00	 call	 ??$_Make_heap@PAU_CS_REG_GUILD_DATA@@HU1@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@ZPAH0@Z ; std::_Make_heap<_CS_REG_GUILD_DATA *,int,_CS_REG_GUILD_DATA,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  000ce	83 c4 14	 add	 esp, 20			; 00000014H
$LN33@Sort@2:

; 3794 : 		_STD sort_heap(_First, _Last, _Pred);

  000d1	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  000d4	51		 push	 ecx
  000d5	57		 push	 edi
  000d6	53		 push	 ebx
  000d7	e8 00 00 00 00	 call	 ??$_Sort_heap@PAU_CS_REG_GUILD_DATA@@P6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0P6AEAAU1@1@Z@Z ; std::_Sort_heap<_CS_REG_GUILD_DATA *,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx

; 3798 : 	}

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
??$_Sort@PAU_CS_REG_GUILD_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0HP6AEAAU1@1@Z@Z ENDP ; std::_Sort<_CS_REG_GUILD_DATA *,int,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z$0
__unwindtable$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z$2
__ehfuncinfo$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
_TEXT	SEGMENT
$T237502 = -32						; size = 12
__Ptr$237496 = -20					; size = 4
__$EHRec$ = -16						; size = 16
$T237449 = 8						; size = 4
__Val$ = 8						; size = 4
??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >, COMDAT
; _this$ = ecx

; 586  : 		_Nodeptr _Buynode(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

  0002d	6a 40		 push	 64			; 00000040H
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	8b f0		 mov	 esi, eax
  00036	33 c0		 xor	 eax, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	89 75 ec	 mov	 DWORD PTR __Ptr$237496[ebp], esi
  0003e	3b f0		 cmp	 esi, eax
  00040	74 57		 je	 SHORT $LN12@Buynode@6
  00042	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00045	89 0e		 mov	 DWORD PTR [esi], ecx
  00047	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0004a	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0004d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 589  : 
; 590  : 		_TRY_BEGIN
; 591  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Wherenode)),
; 592  : 			_STD forward<_Valty>(_Val));

  00050	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00053	66 89 46 3c	 mov	 WORD PTR [esi+60], ax
  00057	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax
  0005a	52		 push	 edx
  0005b	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005e	50		 push	 eax
  0005f	83 c7 0d	 add	 edi, 13			; 0000000dH
  00062	57		 push	 edi
  00063	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00066	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ; std::_Cons_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 596  : 		_CATCH_END
; 597  : 
; 598  : 		return (_Wherenode);

  0006e	8b c6		 mov	 eax, esi

; 599  : 		}

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
__catch$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z$0:

; 593  : 		_CATCH_ALL
; 594  : 		this->_Alnod.deallocate(_Wherenode, 1);

  00084	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr$237496[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008d	83 c4 04	 add	 esp, 4

; 595  : 		_RERAISE;

  00090	33 c0		 xor	 eax, eax
  00092	50		 push	 eax
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN45@Buynode@6:

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

$LN12@Buynode@6:
  00099	8d 55 08	 lea	 edx, DWORD PTR $T237449[ebp]
  0009c	52		 push	 edx
  0009d	8d 4d e0	 lea	 ecx, DWORD PTR $T237502[ebp]
  000a0	89 45 08	 mov	 DWORD PTR $T237449[ebp], eax
  000a3	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  000a8	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  000ad	8d 45 e0	 lea	 eax, DWORD PTR $T237502[ebp]
  000b0	50		 push	 eax
  000b1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T237502[ebp], OFFSET ??_7bad_alloc@std@@6B@
  000b8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN46@Buynode@6:
$LN44@Buynode@6:
  000bd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
PUBLIC	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ$1
__ehfuncinfo$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T237708 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T237708[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase
  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
__ehhandler$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >
PUBLIC	??_7CCastleSiege@@6B@				; CCastleSiege::`vftable'
PUBLIC	??1CCastleSiege@@UAE@XZ				; CCastleSiege::~CCastleSiege
PUBLIC	??_R4CCastleSiege@@6B@				; CCastleSiege::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCastleSiege@@@8			; CCastleSiege `RTTI Type Descriptor'
PUBLIC	??_R3CCastleSiege@@8				; CCastleSiege::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCastleSiege@@8				; CCastleSiege::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCastleSiege@@8			; CCastleSiege::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	??_ECCastleSiege@@UAEPAXI@Z:PROC		; CCastleSiege::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCastleSiege@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
rdata$r	SEGMENT
??_R1A@?0A@EA@CCastleSiege@@8 DD FLAT:??_R0?AVCCastleSiege@@@8 ; CCastleSiege::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCastleSiege@@8
rdata$r	ENDS
;	COMDAT ??_R2CCastleSiege@@8
rdata$r	SEGMENT
??_R2CCastleSiege@@8 DD FLAT:??_R1A@?0A@EA@CCastleSiege@@8 ; CCastleSiege::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCastleSiege@@8
rdata$r	SEGMENT
??_R3CCastleSiege@@8 DD 00H				; CCastleSiege::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCastleSiege@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCastleSiege@@@8
_DATA	SEGMENT
??_R0?AVCCastleSiege@@@8 DD FLAT:??_7type_info@@6B@	; CCastleSiege `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCastleSiege@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCastleSiege@@6B@
rdata$r	SEGMENT
??_R4CCastleSiege@@6B@ DD 00H				; CCastleSiege::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCastleSiege@@@8
	DD	FLAT:??_R3CCastleSiege@@8
rdata$r	ENDS
;	COMDAT ??_7CCastleSiege@@6B@
CONST	SEGMENT
??_7CCastleSiege@@6B@ DD FLAT:??_R4CCastleSiege@@6B@	; CCastleSiege::`vftable'
	DD	FLAT:??_ECCastleSiege@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CCastleSiege@@UAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1CCastleSiege@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CCastleSiege@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCastleSiege@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCastleSiege@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCastleSiege@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CCastleSiege@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CCastleSiege@@UAE@XZ$7
	DD	02H
	DD	FLAT:__unwindfunclet$??1CCastleSiege@@UAE@XZ$9
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCastleSiege@@UAE@XZ$11
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ??1CCastleSiege@@UAE@XZ
_TEXT	SEGMENT
$T237941 = -24						; size = 4
$T238396 = -24						; size = 4
$T238184 = -24						; size = 4
_this$ = -20						; size = 4
$T238539 = -16						; size = 4
$T238441 = -16						; size = 4
$T238366 = -16						; size = 4
$T238153 = -16						; size = 4
$T237972 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCastleSiege@@UAE@XZ PROC				; CCastleSiege::~CCastleSiege, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CCastleSiege@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCastleSiege@@6B@
  00033	33 db		 xor	 ebx, ebx
  00035	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 86   : 	DeleteCriticalSection(&m_critScheduleData);

  00038	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DeleteCriticalSection@4
  0003e	8d 86 10 01 00
	00		 lea	 eax, DWORD PTR [esi+272]
  00044	50		 push	 eax
  00045	ff d7		 call	 edi

; 87   : 	DeleteCriticalSection(&m_critNpcData);

  00047	8d 8e 38 01 00
	00		 lea	 ecx, DWORD PTR [esi+312]
  0004d	51		 push	 ecx
  0004e	ff d7		 call	 edi

; 88   : 	DeleteCriticalSection(&m_critCsTotalGuildInfo);

  00050	8d 96 8c 01 00
	00		 lea	 edx, DWORD PTR [esi+396]
  00056	52		 push	 edx
  00057	ff d7		 call	 edi

; 89   : 	DeleteCriticalSection(&m_critCsBasicGuildInfo);

  00059	8d 86 64 01 00
	00		 lea	 eax, DWORD PTR [esi+356]
  0005f	50		 push	 eax
  00060	ff d7		 call	 edi

; 90   : 	DeleteCriticalSection(&m_critCsMiniMap);

  00062	8d 8e bc 01 00
	00		 lea	 ecx, DWORD PTR [esi+444]
  00068	51		 push	 ecx
  00069	ff d7		 call	 edi

; 91   : }

  0006b	8b 86 d4 01 00
	00		 mov	 eax, DWORD PTR [esi+468]
  00071	3b c3		 cmp	 eax, ebx
  00073	74 09		 je	 SHORT $LN16@CCastleSie
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007b	83 c4 04	 add	 esp, 4
$LN16@CCastleSie:
  0007e	8d be ac 01 00
	00		 lea	 edi, DWORD PTR [esi+428]
  00084	89 9e d4 01 00
	00		 mov	 DWORD PTR [esi+468], ebx
  0008a	89 9e d8 01 00
	00		 mov	 DWORD PTR [esi+472], ebx
  00090	89 9e dc 01 00
	00		 mov	 DWORD PTR [esi+476], ebx
  00096	89 7d f0	 mov	 DWORD PTR $T237972[ebp], edi
  00099	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	50		 push	 eax
  0009f	51		 push	 ecx
  000a0	8d 55 e8	 lea	 edx, DWORD PTR $T237941[ebp]
  000a3	52		 push	 edx
  000a4	8b cf		 mov	 ecx, edi
  000a6	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000aa	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::erase
  000af	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  000b2	57		 push	 edi
  000b3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b8	8d be 7c 01 00
	00		 lea	 edi, DWORD PTR [esi+380]
  000be	83 c4 04	 add	 esp, 4
  000c1	89 7d e8	 mov	 DWORD PTR $T238184[ebp], edi
  000c4	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	50		 push	 eax
  000ca	51		 push	 ecx
  000cb	8d 45 f0	 lea	 eax, DWORD PTR $T238153[ebp]
  000ce	50		 push	 eax
  000cf	8b cf		 mov	 ecx, edi
  000d1	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000d5	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase
  000da	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  000dd	57		 push	 edi
  000de	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e3	8d be 54 01 00
	00		 lea	 edi, DWORD PTR [esi+340]
  000e9	83 c4 04	 add	 esp, 4
  000ec	89 7d e8	 mov	 DWORD PTR $T238396[ebp], edi
  000ef	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f4	50		 push	 eax
  000f5	51		 push	 ecx
  000f6	8d 4d f0	 lea	 ecx, DWORD PTR $T238366[ebp]
  000f9	51		 push	 ecx
  000fa	8b cf		 mov	 ecx, edi
  000fc	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00100	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::erase
  00105	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00108	57		 push	 edi
  00109	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010e	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  00114	83 c4 04	 add	 esp, 4
  00117	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  0011a	3b c3		 cmp	 eax, ebx
  0011c	74 39		 je	 SHORT $LN146@CCastleSie
  0011e	8b 8e 2c 01 00
	00		 mov	 ecx, DWORD PTR [esi+300]
  00124	8b f8		 mov	 edi, eax
  00126	89 4d f0	 mov	 DWORD PTR $T238441[ebp], ecx
  00129	3b f9		 cmp	 edi, ecx
  0012b	74 1b		 je	 SHORT $LN141@CCastleSie
  0012d	8d 49 00	 npad	 3
$LL143@CCastleSie:
  00130	8d 86 34 01 00
	00		 lea	 eax, DWORD PTR [esi+308]
  00136	57		 push	 edi
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_NPC_DATA@@@std@@U_CS_NPC_DATA@@@std@@YAXAAV?$allocator@U_CS_NPC_DATA@@@0@PAU_CS_NPC_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_NPC_DATA>,_CS_NPC_DATA>
  0013d	83 c7 74	 add	 edi, 116		; 00000074H
  00140	83 c4 08	 add	 esp, 8
  00143	3b 7d f0	 cmp	 edi, DWORD PTR $T238441[ebp]
  00146	75 e8		 jne	 SHORT $LL143@CCastleSie
$LN141@CCastleSie:
  00148	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00154	83 c4 04	 add	 esp, 4
$LN146@CCastleSie:
  00157	89 9e 28 01 00
	00		 mov	 DWORD PTR [esi+296], ebx
  0015d	89 9e 2c 01 00
	00		 mov	 DWORD PTR [esi+300], ebx
  00163	89 9e 30 01 00
	00		 mov	 DWORD PTR [esi+304], ebx
  00169	8b be 00 01 00
	00		 mov	 edi, DWORD PTR [esi+256]
  0016f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00176	3b fb		 cmp	 edi, ebx
  00178	74 34		 je	 SHORT $LN168@CCastleSie
  0017a	8b 86 04 01 00
	00		 mov	 eax, DWORD PTR [esi+260]
  00180	89 45 f0	 mov	 DWORD PTR $T238539[ebp], eax
  00183	3b f8		 cmp	 edi, eax
  00185	74 18		 je	 SHORT $LN163@CCastleSie
$LL165@CCastleSie:
  00187	8d 86 0c 01 00
	00		 lea	 eax, DWORD PTR [esi+268]
  0018d	57		 push	 edi
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@U_CS_SCHEDULE_DATA@@@std@@YAXAAV?$allocator@U_CS_SCHEDULE_DATA@@@0@PAU_CS_SCHEDULE_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_SCHEDULE_DATA>,_CS_SCHEDULE_DATA>
  00194	83 c7 1c	 add	 edi, 28			; 0000001cH
  00197	83 c4 08	 add	 esp, 8
  0019a	3b 7d f0	 cmp	 edi, DWORD PTR $T238539[ebp]
  0019d	75 e8		 jne	 SHORT $LL165@CCastleSie
$LN163@CCastleSie:
  0019f	8b 96 00 01 00
	00		 mov	 edx, DWORD PTR [esi+256]
  001a5	52		 push	 edx
  001a6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ab	83 c4 04	 add	 esp, 4
$LN168@CCastleSie:
  001ae	89 9e 00 01 00
	00		 mov	 DWORD PTR [esi+256], ebx
  001b4	89 9e 04 01 00
	00		 mov	 DWORD PTR [esi+260], ebx
  001ba	89 9e 08 01 00
	00		 mov	 DWORD PTR [esi+264], ebx
  001c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ca	59		 pop	 ecx
  001cb	5f		 pop	 edi
  001cc	5e		 pop	 esi
  001cd	5b		 pop	 ebx
  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCastleSiege@@UAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00009	e9 00 00 00 00	 jmp	 ??1?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::~vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
__unwindfunclet$??1CCastleSiege@@UAE@XZ$1:
  0000e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00017	e9 00 00 00 00	 jmp	 ??1?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::~vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
__unwindfunclet$??1CCastleSiege@@UAE@XZ$2:
  0001c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	81 c1 54 01 00
	00		 add	 ecx, 340		; 00000154H
  00025	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??1CCastleSiege@@UAE@XZ$3:
  0002a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	81 c1 7c 01 00
	00		 add	 ecx, 380		; 0000017cH
  00033	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??1CCastleSiege@@UAE@XZ$7:
  00038	8b 4d f0	 mov	 ecx, DWORD PTR $T237972[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_CS_MINIMAP_DATA,std::less<int>,std::allocator<std::pair<int const ,_CS_MINIMAP_DATA> >,0> >
__unwindfunclet$??1CCastleSiege@@UAE@XZ$9:
  00040	8b 4d e8	 mov	 ecx, DWORD PTR $T238184[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
__unwindfunclet$??1CCastleSiege@@UAE@XZ$11:
  00048	8b 4d e8	 mov	 ecx, DWORD PTR $T238396[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >
__ehhandler$??1CCastleSiege@@UAE@XZ:
  00050	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00054	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00057	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0005a	33 c8		 xor	 ecx, eax
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CCastleSiege@@UAE@XZ
  00066	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CCastleSiege@@UAE@XZ ENDP				; CCastleSiege::~CCastleSiege
; Function compile flags: /Ogtp
;	COMDAT ?SetState@CCastleSiege@@QAEXHH@Z
_TEXT	SEGMENT
_iCastleSiegeState$ = 8					; size = 4
_bSetRemainMsec$ = 12					; size = 4
?SetState@CCastleSiege@@QAEXHH@Z PROC			; CCastleSiege::SetState, COMDAT
; _this$ = ecx

; 1578 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1579 : 	if(iCastleSiegeState < CASTLESIEGE_STATE_NONE || iCastleSiegeState > CASTLESIEGE_STATE_ENDCYCLE)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iCastleSiegeState$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000c	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0000f	0f 87 cc 00 00
	00		 ja	 $LN15@SetState

; 1580 : 		return;
; 1581 : 
; 1582 : 	m_iCastleSiegeState = iCastleSiegeState;

  00015	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 1583 : 
; 1584 : 	switch(m_iCastleSiegeState)

  00018	40		 inc	 eax
  00019	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0001c	0f 87 87 00 00
	00		 ja	 $LN13@SetState
  00022	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN19@SetState[eax*4]
$LN11@SetState:

; 1585 : 	{
; 1586 : 	case CASTLESIEGE_STATE_NONE: SetState_NONE(bSetRemainMsec); break;
; 1587 : 	case CASTLESIEGE_STATE_IDLE_1: SetState_IDLE_1(bSetRemainMsec); break;

  00029	8b 55 0c	 mov	 edx, DWORD PTR _bSetRemainMsec$[ebp]
  0002c	52		 push	 edx
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?SetState_IDLE_1@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetState_IDLE_1
  00034	eb 73		 jmp	 SHORT $LN13@SetState
$LN10@SetState:

; 1588 : 	case CASTLESIEGE_STATE_REGSIEGE: SetState_REGSIEGE(bSetRemainMsec); break;

  00036	8b 45 0c	 mov	 eax, DWORD PTR _bSetRemainMsec$[ebp]
  00039	50		 push	 eax
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?SetState_REGSIEGE@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetState_REGSIEGE
  00041	eb 66		 jmp	 SHORT $LN13@SetState
$LN9@SetState:

; 1589 : 	case CASTLESIEGE_STATE_IDLE_2: SetState_IDLE_2(bSetRemainMsec); break;

  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _bSetRemainMsec$[ebp]
  00046	51		 push	 ecx
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?SetState_IDLE_2@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetState_IDLE_2
  0004e	eb 59		 jmp	 SHORT $LN13@SetState
$LN8@SetState:

; 1590 : 	case CASTLESIEGE_STATE_REGMARK: SetState_REGMARK(bSetRemainMsec); break;

  00050	8b 55 0c	 mov	 edx, DWORD PTR _bSetRemainMsec$[ebp]
  00053	52		 push	 edx
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?SetState_REGMARK@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetState_REGMARK
  0005b	eb 4c		 jmp	 SHORT $LN13@SetState
$LN7@SetState:

; 1591 : 	case CASTLESIEGE_STATE_IDLE_3: SetState_IDLE_3(bSetRemainMsec); break;

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _bSetRemainMsec$[ebp]
  00060	50		 push	 eax
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?SetState_IDLE_3@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetState_IDLE_3
  00068	eb 3f		 jmp	 SHORT $LN13@SetState
$LN6@SetState:

; 1592 : 	case CASTLESIEGE_STATE_NOTIFY: SetState_NOTIFY(bSetRemainMsec); break;

  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _bSetRemainMsec$[ebp]
  0006d	51		 push	 ecx
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?SetState_NOTIFY@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetState_NOTIFY
  00075	eb 32		 jmp	 SHORT $LN13@SetState
$LN5@SetState:

; 1593 : 	case CASTLESIEGE_STATE_READYSIEGE: SetState_READYSIEGE(bSetRemainMsec); break;

  00077	8b 55 0c	 mov	 edx, DWORD PTR _bSetRemainMsec$[ebp]
  0007a	52		 push	 edx
  0007b	8b ce		 mov	 ecx, esi
  0007d	e8 00 00 00 00	 call	 ?SetState_READYSIEGE@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetState_READYSIEGE
  00082	eb 25		 jmp	 SHORT $LN13@SetState
$LN4@SetState:

; 1594 : 	case CASTLESIEGE_STATE_STARTSIEGE: SetState_STARTSIEGE(bSetRemainMsec); break;

  00084	8b 45 0c	 mov	 eax, DWORD PTR _bSetRemainMsec$[ebp]
  00087	50		 push	 eax
  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ?SetState_STARTSIEGE@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetState_STARTSIEGE
  0008f	eb 18		 jmp	 SHORT $LN13@SetState
$LN3@SetState:

; 1595 : 	case CASTLESIEGE_STATE_ENDSIEGE: SetState_ENDSIEGE(bSetRemainMsec); break;

  00091	8b 4d 0c	 mov	 ecx, DWORD PTR _bSetRemainMsec$[ebp]
  00094	51		 push	 ecx
  00095	8b ce		 mov	 ecx, esi
  00097	e8 00 00 00 00	 call	 ?SetState_ENDSIEGE@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetState_ENDSIEGE
  0009c	eb 0b		 jmp	 SHORT $LN13@SetState
$LN2@SetState:

; 1596 : 	case CASTLESIEGE_STATE_ENDCYCLE: SetState_ENDCYCLE(bSetRemainMsec); break;

  0009e	8b 55 0c	 mov	 edx, DWORD PTR _bSetRemainMsec$[ebp]
  000a1	52		 push	 edx
  000a2	8b ce		 mov	 ecx, esi
  000a4	e8 00 00 00 00	 call	 ?SetState_ENDCYCLE@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetState_ENDCYCLE
$LN13@SetState:

; 1597 : 	}
; 1598 : 
; 1599 : 	if(m_bDbNpcCreated == FALSE)

  000a9	83 be 50 01 00
	00 00		 cmp	 DWORD PTR [esi+336], 0
  000b0	75 11		 jne	 SHORT $LN1@SetState

; 1600 : 	{
; 1601 : 		m_bDbNpcCreated = TRUE;
; 1602 : 		CreateDbNPC();

  000b2	8b ce		 mov	 ecx, esi
  000b4	c7 86 50 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+336], 1
  000be	e8 00 00 00 00	 call	 ?CreateDbNPC@CCastleSiege@@QAEXXZ ; CCastleSiege::CreateDbNPC
$LN1@SetState:

; 1603 : 	}
; 1604 : 
; 1605 : 	GetLocalTime(&m_tmStateStartDate);

  000c3	8d 46 70	 lea	 eax, DWORD PTR [esi+112]
  000c6	50		 push	 eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 1606 : 	m_dwEVENT_MSG_TICK_COUNT = 0;

  000cd	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0

; 1607 : 	m_dwCHECK_GATE_ALIVE_COUNT = 0;

  000d7	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
$LN15@SetState:
  000e1	5e		 pop	 esi

; 1608 : }

  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
  000e6	8b ff		 npad	 2
$LN19@SetState:
  000e8	00 00 00 00	 DD	 $LN13@SetState
  000ec	00 00 00 00	 DD	 $LN11@SetState
  000f0	00 00 00 00	 DD	 $LN10@SetState
  000f4	00 00 00 00	 DD	 $LN9@SetState
  000f8	00 00 00 00	 DD	 $LN8@SetState
  000fc	00 00 00 00	 DD	 $LN7@SetState
  00100	00 00 00 00	 DD	 $LN6@SetState
  00104	00 00 00 00	 DD	 $LN5@SetState
  00108	00 00 00 00	 DD	 $LN4@SetState
  0010c	00 00 00 00	 DD	 $LN3@SetState
  00110	00 00 00 00	 DD	 $LN2@SetState
?SetState@CCastleSiege@@QAEXHH@Z ENDP			; CCastleSiege::SetState
_TEXT	ENDS
PUBLIC	?ProcState_IDLE_1@CCastleSiege@@QAEXXZ		; CCastleSiege::ProcState_IDLE_1
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_IDLE_1@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ProcState_IDLE_1@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_IDLE_1, COMDAT
; _this$ = ecx

; 2743 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2744 : 	int iTICK_MSEC = GetTickCount() - m_iCS_TICK_COUNT;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 46 6c	 sub	 eax, DWORD PTR [esi+108]

; 2745 : 
; 2746 : 	if(iTICK_MSEC >= 1000)

  0000f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00014	7c 08		 jl	 SHORT $LN2@ProcState_

; 2747 : 	{
; 2748 : 		m_iCS_REMAIN_MSEC -= iTICK_MSEC;

  00016	29 46 68	 sub	 DWORD PTR [esi+104], eax

; 2749 : 		m_iCS_TICK_COUNT = GetTickCount();

  00019	ff d7		 call	 edi
  0001b	89 46 6c	 mov	 DWORD PTR [esi+108], eax
$LN2@ProcState_:

; 2750 : 
; 2751 : #if (__CUSTOM__ != 1)
; 2752 : 		LogAddC(3,"RUN ProcState_IDLE_1()	LEFT-MSEC:%d",m_iCS_REMAIN_MSEC);
; 2753 : #endif
; 2754 : 	}
; 2755 : 
; 2756 : 	if(m_iCS_REMAIN_MSEC <= 0)

  0001e	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00022	7f 0b		 jg	 SHORT $LN1@ProcState_

; 2757 : 	{
; 2758 : 		SetState(CASTLESIEGE_STATE_REGSIEGE,TRUE);

  00024	6a 01		 push	 1
  00026	6a 01		 push	 1
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState
$LN1@ProcState_:

; 2759 : 	}
; 2760 : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
?ProcState_IDLE_1@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_IDLE_1
_TEXT	ENDS
PUBLIC	?ProcState_REGSIEGE@CCastleSiege@@QAEXXZ	; CCastleSiege::ProcState_REGSIEGE
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_REGSIEGE@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ProcState_REGSIEGE@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_REGSIEGE, COMDAT
; _this$ = ecx

; 2763 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2764 : 	int iTICK_MSEC = GetTickCount() - m_iCS_TICK_COUNT;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 46 6c	 sub	 eax, DWORD PTR [esi+108]

; 2765 : 
; 2766 : 	if(iTICK_MSEC >= 1000)

  0000f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00014	7c 38		 jl	 SHORT $LN2@ProcState_@2

; 2767 : 	{
; 2768 : 		m_iCS_REMAIN_MSEC -= iTICK_MSEC;

  00016	29 46 68	 sub	 DWORD PTR [esi+104], eax

; 2769 : 		m_iCS_TICK_COUNT = GetTickCount();

  00019	ff d7		 call	 edi
  0001b	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 2770 : 
; 2771 : 		if(GetTickCount() - m_dwEVENT_MSG_TICK_COUNT > 1800000)

  0001e	ff d7		 call	 edi
  00020	2b 86 98 00 00
	00		 sub	 eax, DWORD PTR [esi+152]
  00026	3d 40 77 1b 00	 cmp	 eax, 1800000		; 001b7740H
  0002b	76 21		 jbe	 SHORT $LN2@ProcState_@2

; 2772 : 		{
; 2773 : 			SendAllUserAnyMsg(lMsg.Get(MSGGET(6, 78)),1);

  0002d	6a 01		 push	 1
  0002f	68 4e 06 00 00	 push	 1614			; 0000064eH
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00039	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z ; CCastleSiege::SendAllUserAnyMsg

; 2774 : 			m_dwEVENT_MSG_TICK_COUNT = GetTickCount();

  00046	ff d7		 call	 edi
  00048	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN2@ProcState_@2:

; 2775 : 		}
; 2776 : 
; 2777 : #if (__CUSTOM__ != 1)
; 2778 : 		LogAddC(3,"RUN ProcState_REGSIEGE()	LEFT-MSEC:%d",m_iCS_REMAIN_MSEC);
; 2779 : #endif
; 2780 : 	}
; 2781 : 
; 2782 : 	if(m_iCS_REMAIN_MSEC <= 0)

  0004e	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00052	7f 0b		 jg	 SHORT $LN1@ProcState_@2

; 2783 : 	{
; 2784 : 		SetState(CASTLESIEGE_STATE_IDLE_2,TRUE);

  00054	6a 01		 push	 1
  00056	6a 02		 push	 2
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState
$LN1@ProcState_@2:

; 2785 : 	}
; 2786 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	c3		 ret	 0
?ProcState_REGSIEGE@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_REGSIEGE
_TEXT	ENDS
PUBLIC	?ProcState_IDLE_2@CCastleSiege@@QAEXXZ		; CCastleSiege::ProcState_IDLE_2
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_IDLE_2@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ProcState_IDLE_2@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_IDLE_2, COMDAT
; _this$ = ecx

; 2789 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2790 : 	int iTICK_MSEC = GetTickCount() - m_iCS_TICK_COUNT;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 46 6c	 sub	 eax, DWORD PTR [esi+108]

; 2791 : 
; 2792 : 	if(iTICK_MSEC >= 1000)

  0000f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00014	7c 08		 jl	 SHORT $LN2@ProcState_@3

; 2793 : 	{
; 2794 : 		m_iCS_REMAIN_MSEC -= iTICK_MSEC;

  00016	29 46 68	 sub	 DWORD PTR [esi+104], eax

; 2795 : 		m_iCS_TICK_COUNT = GetTickCount();

  00019	ff d7		 call	 edi
  0001b	89 46 6c	 mov	 DWORD PTR [esi+108], eax
$LN2@ProcState_@3:

; 2796 : 
; 2797 : #if (__CUSTOM__ != 1)
; 2798 : 		LogAddC(3,"RUN ProcState_IDLE_2()	LEFT-MSEC:%d",m_iCS_REMAIN_MSEC);
; 2799 : #endif
; 2800 : 	}
; 2801 : 
; 2802 : 	if(m_iCS_REMAIN_MSEC <= 0)

  0001e	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00022	7f 0b		 jg	 SHORT $LN1@ProcState_@3

; 2803 : 	{
; 2804 : 		SetState(CASTLESIEGE_STATE_REGMARK,TRUE);

  00024	6a 01		 push	 1
  00026	6a 03		 push	 3
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState
$LN1@ProcState_@3:

; 2805 : 	}
; 2806 : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
?ProcState_IDLE_2@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_IDLE_2
_TEXT	ENDS
PUBLIC	?ProcState_REGMARK@CCastleSiege@@QAEXXZ		; CCastleSiege::ProcState_REGMARK
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_REGMARK@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ProcState_REGMARK@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_REGMARK, COMDAT
; _this$ = ecx

; 2809 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2810 : 	int iTICK_MSEC = GetTickCount() - m_iCS_TICK_COUNT;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 46 6c	 sub	 eax, DWORD PTR [esi+108]

; 2811 : 
; 2812 : 	if(iTICK_MSEC >= 1000)

  0000f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00014	7c 38		 jl	 SHORT $LN2@ProcState_@4

; 2813 : 	{
; 2814 : 		m_iCS_REMAIN_MSEC -= iTICK_MSEC;

  00016	29 46 68	 sub	 DWORD PTR [esi+104], eax

; 2815 : 		m_iCS_TICK_COUNT = GetTickCount();

  00019	ff d7		 call	 edi
  0001b	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 2816 : 
; 2817 : 		if(GetTickCount() - m_dwEVENT_MSG_TICK_COUNT > 1800000)

  0001e	ff d7		 call	 edi
  00020	2b 86 98 00 00
	00		 sub	 eax, DWORD PTR [esi+152]
  00026	3d 40 77 1b 00	 cmp	 eax, 1800000		; 001b7740H
  0002b	76 21		 jbe	 SHORT $LN2@ProcState_@4

; 2818 : 		{
; 2819 : 			SendAllUserAnyMsg(lMsg.Get(MSGGET(6, 79)),1);

  0002d	6a 01		 push	 1
  0002f	68 4f 06 00 00	 push	 1615			; 0000064fH
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00039	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z ; CCastleSiege::SendAllUserAnyMsg

; 2820 : 			m_dwEVENT_MSG_TICK_COUNT = GetTickCount();

  00046	ff d7		 call	 edi
  00048	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN2@ProcState_@4:

; 2821 : 		}
; 2822 : 
; 2823 : #if (__CUSTOM__ != 1)
; 2824 : 		LogAddC(3,"RUN ProcState_REGMARK()	LEFT-MSEC:%d",m_iCS_REMAIN_MSEC);
; 2825 : #endif
; 2826 : 	}
; 2827 : 
; 2828 : 	if(m_iCS_REMAIN_MSEC <= 0)

  0004e	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00052	7f 0b		 jg	 SHORT $LN1@ProcState_@4

; 2829 : 	{
; 2830 : 		SetState(CASTLESIEGE_STATE_IDLE_3,TRUE);

  00054	6a 01		 push	 1
  00056	6a 04		 push	 4
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState
$LN1@ProcState_@4:

; 2831 : 	}
; 2832 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	c3		 ret	 0
?ProcState_REGMARK@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_REGMARK
_TEXT	ENDS
PUBLIC	?ProcState_IDLE_3@CCastleSiege@@QAEXXZ		; CCastleSiege::ProcState_IDLE_3
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_IDLE_3@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ProcState_IDLE_3@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_IDLE_3, COMDAT
; _this$ = ecx

; 2835 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2836 : 	int iTICK_MSEC = GetTickCount() - m_iCS_TICK_COUNT;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 46 6c	 sub	 eax, DWORD PTR [esi+108]

; 2837 : 
; 2838 : 	if(iTICK_MSEC >= 1000)

  0000f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00014	7c 38		 jl	 SHORT $LN2@ProcState_@5

; 2839 : 	{
; 2840 : 		m_iCS_REMAIN_MSEC -= iTICK_MSEC;

  00016	29 46 68	 sub	 DWORD PTR [esi+104], eax

; 2841 : 		m_iCS_TICK_COUNT = GetTickCount();

  00019	ff d7		 call	 edi
  0001b	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 2842 : 
; 2843 : 		if(GetTickCount() - m_dwEVENT_MSG_TICK_COUNT > 7200000)

  0001e	ff d7		 call	 edi
  00020	2b 86 98 00 00
	00		 sub	 eax, DWORD PTR [esi+152]
  00026	3d 00 dd 6d 00	 cmp	 eax, 7200000		; 006ddd00H
  0002b	76 21		 jbe	 SHORT $LN2@ProcState_@5

; 2844 : 		{
; 2845 : 			SendAllUserAnyMsg(lMsg.Get(MSGGET(6, 80)),1);

  0002d	6a 01		 push	 1
  0002f	68 50 06 00 00	 push	 1616			; 00000650H
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00039	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z ; CCastleSiege::SendAllUserAnyMsg

; 2846 : 			m_dwEVENT_MSG_TICK_COUNT = GetTickCount();

  00046	ff d7		 call	 edi
  00048	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN2@ProcState_@5:

; 2847 : 		}
; 2848 : 
; 2849 : #if (__CUSTOM__ != 1)
; 2850 : 		LogAddC(3,"RUN ProcState_IDLE_3()	LEFT-MSEC:%d",m_iCS_REMAIN_MSEC);
; 2851 : #endif
; 2852 : 	}
; 2853 : 
; 2854 : 	if(m_iCS_REMAIN_MSEC <= 0)

  0004e	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00052	7f 0b		 jg	 SHORT $LN1@ProcState_@5

; 2855 : 	{
; 2856 : 		SetState(CASTLESIEGE_STATE_NOTIFY,TRUE);

  00054	6a 01		 push	 1
  00056	6a 05		 push	 5
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState
$LN1@ProcState_@5:

; 2857 : 	}
; 2858 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	c3		 ret	 0
?ProcState_IDLE_3@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_IDLE_3
_TEXT	ENDS
PUBLIC	?ProcState_NOTIFY@CCastleSiege@@QAEXXZ		; CCastleSiege::ProcState_NOTIFY
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_NOTIFY@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ProcState_NOTIFY@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_NOTIFY, COMDAT
; _this$ = ecx

; 2861 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2862 : 	int iTICK_MSEC = GetTickCount() - m_iCS_TICK_COUNT;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 46 6c	 sub	 eax, DWORD PTR [esi+108]

; 2863 : 
; 2864 : 	if(iTICK_MSEC >= 1000)

  0000f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00014	7c 38		 jl	 SHORT $LN2@ProcState_@6

; 2865 : 	{
; 2866 : 		m_iCS_REMAIN_MSEC -= iTICK_MSEC;

  00016	29 46 68	 sub	 DWORD PTR [esi+104], eax

; 2867 : 		m_iCS_TICK_COUNT = GetTickCount();

  00019	ff d7		 call	 edi
  0001b	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 2868 : 
; 2869 : 		if(GetTickCount() - m_dwEVENT_MSG_TICK_COUNT > 1800000)

  0001e	ff d7		 call	 edi
  00020	2b 86 98 00 00
	00		 sub	 eax, DWORD PTR [esi+152]
  00026	3d 40 77 1b 00	 cmp	 eax, 1800000		; 001b7740H
  0002b	76 21		 jbe	 SHORT $LN2@ProcState_@6

; 2870 : 		{
; 2871 : 			SendAllUserAnyMsg(lMsg.Get(MSGGET(6, 81)),1);

  0002d	6a 01		 push	 1
  0002f	68 51 06 00 00	 push	 1617			; 00000651H
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00039	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z ; CCastleSiege::SendAllUserAnyMsg

; 2872 : 			m_dwEVENT_MSG_TICK_COUNT = GetTickCount();

  00046	ff d7		 call	 edi
  00048	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN2@ProcState_@6:

; 2873 : 		}
; 2874 : 
; 2875 : #if (__CUSTOM__ != 1)
; 2876 : 		LogAddC(3,"RUN ProcState_NOTIFY()	LEFT-MSEC:%d",m_iCS_REMAIN_MSEC);
; 2877 : #endif
; 2878 : 	}
; 2879 : 
; 2880 : 	if(m_iCS_REMAIN_MSEC <= 0)

  0004e	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00052	7f 0b		 jg	 SHORT $LN1@ProcState_@6

; 2881 : 	{
; 2882 : 		SetState(CASTLESIEGE_STATE_READYSIEGE,TRUE);

  00054	6a 01		 push	 1
  00056	6a 06		 push	 6
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState
$LN1@ProcState_@6:

; 2883 : 	}
; 2884 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	c3		 ret	 0
?ProcState_NOTIFY@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_NOTIFY
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ProcState_READYSIEGE@CCastleSiege@@QAEXXZ	; CCastleSiege::ProcState_READYSIEGE
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_READYSIEGE@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
_szText$186598 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
?ProcState_READYSIEGE@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_READYSIEGE, COMDAT
; _this$ = ecx

; 2887 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi

; 2888 : 	int iTICK_MSEC = GetTickCount() - m_iCS_TICK_COUNT;

  00015	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0001b	8b f1		 mov	 esi, ecx
  0001d	ff d7		 call	 edi
  0001f	2b 46 6c	 sub	 eax, DWORD PTR [esi+108]

; 2889 : 
; 2890 : 	if(iTICK_MSEC >= 1000)

  00022	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00027	0f 8c ba 00 00
	00		 jl	 $LN2@ProcState_@7

; 2891 : 	{
; 2892 : 		m_iCS_REMAIN_MSEC -= iTICK_MSEC;

  0002d	29 46 68	 sub	 DWORD PTR [esi+104], eax

; 2893 : 		m_iCS_TICK_COUNT = GetTickCount();

  00030	ff d7		 call	 edi
  00032	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 2894 : 
; 2895 : 		if(GetTickCount() - m_dwEVENT_MSG_TICK_COUNT > 1800000)

  00035	ff d7		 call	 edi
  00037	2b 86 98 00 00
	00		 sub	 eax, DWORD PTR [esi+152]
  0003d	3d 40 77 1b 00	 cmp	 eax, 1800000		; 001b7740H
  00042	76 21		 jbe	 SHORT $LN4@ProcState_@7

; 2896 : 		{
; 2897 : 			SendAllUserAnyMsg(lMsg.Get(MSGGET(6, 82)),1);

  00044	6a 01		 push	 1
  00046	68 52 06 00 00	 push	 1618			; 00000652H
  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00050	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z ; CCastleSiege::SendAllUserAnyMsg

; 2898 : 			m_dwEVENT_MSG_TICK_COUNT = GetTickCount();

  0005d	ff d7		 call	 edi
  0005f	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN4@ProcState_@7:

; 2899 : 		}
; 2900 : 
; 2901 : 		if(m_iCS_REMAIN_MSEC <= 300000)

  00065	81 7e 68 e0 93
	04 00		 cmp	 DWORD PTR [esi+104], 300000 ; 000493e0H
  0006c	7f 79		 jg	 SHORT $LN2@ProcState_@7

; 2902 : 		{
; 2903 : 			if(GetTickCount() - m_dwCS_STARTTIME_TICK_COUNT > 60000)

  0006e	ff d7		 call	 edi
  00070	2b 86 b0 00 00
	00		 sub	 eax, DWORD PTR [esi+176]
  00076	3d 60 ea 00 00	 cmp	 eax, 60000		; 0000ea60H
  0007b	76 6a		 jbe	 SHORT $LN2@ProcState_@7

; 2904 : 			{
; 2905 : 				char szText[0x100] = {0};

  0007d	68 ff 00 00 00	 push	 255			; 000000ffH
  00082	8d 85 fd fe ff
	ff		 lea	 eax, DWORD PTR _szText$186598[ebp+1]
  00088	6a 00		 push	 0
  0008a	50		 push	 eax
  0008b	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _szText$186598[ebp], 0
  00092	e8 00 00 00 00	 call	 _memset

; 2906 : 
; 2907 : 				wsprintf(szText,lMsg.Get(MSGGET(6, 188)),m_iCS_REMAIN_MSEC / 60000 + 1);

  00097	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  0009c	f7 6e 68	 imul	 DWORD PTR [esi+104]
  0009f	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  000a2	8b ca		 mov	 ecx, edx
  000a4	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000aa	8d 54 0a 01	 lea	 edx, DWORD PTR [edx+ecx+1]
  000ae	52		 push	 edx
  000af	68 bc 06 00 00	 push	 1724			; 000006bcH
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000b9	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000be	50		 push	 eax
  000bf	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$186598[ebp]
  000c5	50		 push	 eax
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2908 : 				SendAllUserAnyMsg(szText,2);

  000cf	6a 02		 push	 2
  000d1	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szText$186598[ebp]
  000d7	51		 push	 ecx
  000d8	8b ce		 mov	 ecx, esi
  000da	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z ; CCastleSiege::SendAllUserAnyMsg

; 2909 : 
; 2910 : 				m_dwCS_STARTTIME_TICK_COUNT = GetTickCount();

  000df	ff d7		 call	 edi
  000e1	89 86 b0 00 00
	00		 mov	 DWORD PTR [esi+176], eax
$LN2@ProcState_@7:

; 2911 : 			}
; 2912 : 		}
; 2913 : 
; 2914 : #if (__CUSTOM__ != 1)
; 2915 : 		LogAddC(3,"RUN ProcState_READYSIEGE()	LEFT-MSEC:%d",m_iCS_REMAIN_MSEC);
; 2916 : #endif
; 2917 : 	}
; 2918 : 
; 2919 : 	if(m_iCS_REMAIN_MSEC <= 0)

  000e7	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  000eb	7f 0b		 jg	 SHORT $LN1@ProcState_@7

; 2920 : 	{
; 2921 : 		SetState(CASTLESIEGE_STATE_STARTSIEGE,TRUE);

  000ed	6a 01		 push	 1
  000ef	6a 07		 push	 7
  000f1	8b ce		 mov	 ecx, esi
  000f3	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState
$LN1@ProcState_@7:

; 2922 : 	}
; 2923 : }

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	5f		 pop	 edi
  000fc	33 cd		 xor	 ecx, ebp
  000fe	5e		 pop	 esi
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
?ProcState_READYSIEGE@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_READYSIEGE
_TEXT	ENDS
PUBLIC	?ProcState_STARTSIEGE@CCastleSiege@@QAEXXZ	; CCastleSiege::ProcState_STARTSIEGE
EXTRN	?GS_GDReqSiegeEndedChange@@YAXHH@Z:PROC		; GS_GDReqSiegeEndedChange
EXTRN	?GS_GDReqCastleOwnerChange@@YAXHHPAD@Z:PROC	; GS_GDReqCastleOwnerChange
EXTRN	?GS_GDReqResetCastleTaxInfo@@YAXH@Z:PROC	; GS_GDReqResetCastleTaxInfo
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_STARTSIEGE@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ProcState_STARTSIEGE@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_STARTSIEGE, COMDAT
; _this$ = ecx

; 2926 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 2927 : 	CheckMiddleWinnerGuild();

  00004	e8 00 00 00 00	 call	 ?CheckMiddleWinnerGuild@CCastleSiege@@QAEHXZ ; CCastleSiege::CheckMiddleWinnerGuild

; 2928 : 	int iTICK_MSEC = GetTickCount() - m_iCS_TICK_COUNT;

  00009	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0000f	ff d7		 call	 edi
  00011	2b 46 6c	 sub	 eax, DWORD PTR [esi+108]

; 2929 : 
; 2930 : 	if(iTICK_MSEC >= 1000)

  00014	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00019	0f 8c 2d 01 00
	00		 jl	 $LN12@ProcState_@8

; 2931 : 	{
; 2932 : 		m_iCS_REMAIN_MSEC -= iTICK_MSEC;

  0001f	29 46 68	 sub	 DWORD PTR [esi+104], eax

; 2933 : 		m_iCS_TICK_COUNT = GetTickCount();

  00022	ff d7		 call	 edi
  00024	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 2934 : 
; 2935 : 		if(GetTickCount() - m_dwCHECK_GATE_ALIVE_COUNT > 5000)

  00027	ff d7		 call	 edi
  00029	2b 86 9c 00 00
	00		 sub	 eax, DWORD PTR [esi+156]
  0002f	3d 88 13 00 00	 cmp	 eax, 5000		; 00001388H
  00034	76 0f		 jbe	 SHORT $LN8@ProcState_@8

; 2936 : 		{
; 2937 : 			CheckCsDbNpcAlive();

  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?CheckCsDbNpcAlive@CCastleSiege@@QAEXXZ ; CCastleSiege::CheckCsDbNpcAlive

; 2938 : 			m_dwCHECK_GATE_ALIVE_COUNT = GetTickCount();

  0003d	ff d7		 call	 edi
  0003f	89 86 9c 00 00
	00		 mov	 DWORD PTR [esi+156], eax
$LN8@ProcState_@8:

; 2939 : 		}
; 2940 : 
; 2941 : 		if(GetTickCount() - m_dwCS_LEFTTIME_TICK_COUNT > 180000 && m_iCS_REMAIN_MSEC > 180000)

  00045	53		 push	 ebx
  00046	ff d7		 call	 edi
  00048	2b 86 ac 00 00
	00		 sub	 eax, DWORD PTR [esi+172]
  0004e	3d 20 bf 02 00	 cmp	 eax, 180000		; 0002bf20H
  00053	76 4d		 jbe	 SHORT $LN7@ProcState_@8
  00055	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00058	81 f9 20 bf 02
	00		 cmp	 ecx, 180000		; 0002bf20H
  0005e	7e 42		 jle	 SHORT $LN7@ProcState_@8

; 2942 : 		{
; 2943 : 			GCAnsCsLeftTimeAlarm((m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60);

  00060	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00065	f7 e9		 imul	 ecx
  00067	c1 fa 06	 sar	 edx, 6
  0006a	8b c2		 mov	 eax, edx
  0006c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006f	03 c2		 add	 eax, edx
  00071	99		 cdq
  00072	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00077	f7 f9		 idiv	 ecx
  00079	8b d8		 mov	 ebx, eax
  0007b	8b ca		 mov	 ecx, edx
  0007d	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00082	f7 e9		 imul	 ecx
  00084	03 d1		 add	 edx, ecx
  00086	c1 fa 05	 sar	 edx, 5
  00089	8b c2		 mov	 eax, edx
  0008b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008e	03 c2		 add	 eax, edx
  00090	50		 push	 eax
  00091	53		 push	 ebx
  00092	e8 00 00 00 00	 call	 ?GCAnsCsLeftTimeAlarm@@YAXEE@Z ; GCAnsCsLeftTimeAlarm
  00097	83 c4 08	 add	 esp, 8

; 2944 : 			m_dwCS_LEFTTIME_TICK_COUNT = GetTickCount();

  0009a	ff d7		 call	 edi
  0009c	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax
$LN7@ProcState_@8:

; 2945 : 		}
; 2946 : 
; 2947 : 		if(m_iCS_REMAIN_MSEC <= 180000 && GetTickCount() - m_dwCS_LEFTTIME_TICK_COUNT > 60000)

  000a2	81 7e 68 20 bf
	02 00		 cmp	 DWORD PTR [esi+104], 180000 ; 0002bf20H
  000a9	7f 52		 jg	 SHORT $LN6@ProcState_@8
  000ab	ff d7		 call	 edi
  000ad	2b 86 ac 00 00
	00		 sub	 eax, DWORD PTR [esi+172]
  000b3	3d 60 ea 00 00	 cmp	 eax, 60000		; 0000ea60H
  000b8	76 43		 jbe	 SHORT $LN6@ProcState_@8

; 2948 : 		{
; 2949 : 			GCAnsCsLeftTimeAlarm((m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60);

  000ba	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  000bf	f7 6e 68	 imul	 DWORD PTR [esi+104]
  000c2	c1 fa 06	 sar	 edx, 6
  000c5	8b c2		 mov	 eax, edx
  000c7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ca	03 c2		 add	 eax, edx
  000cc	99		 cdq
  000cd	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  000d2	f7 f9		 idiv	 ecx
  000d4	8b d8		 mov	 ebx, eax
  000d6	8b ca		 mov	 ecx, edx
  000d8	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  000dd	f7 e9		 imul	 ecx
  000df	03 d1		 add	 edx, ecx
  000e1	c1 fa 05	 sar	 edx, 5
  000e4	8b c2		 mov	 eax, edx
  000e6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e9	03 c2		 add	 eax, edx
  000eb	50		 push	 eax
  000ec	53		 push	 ebx
  000ed	e8 00 00 00 00	 call	 ?GCAnsCsLeftTimeAlarm@@YAXEE@Z ; GCAnsCsLeftTimeAlarm
  000f2	83 c4 08	 add	 esp, 8

; 2950 : 			m_dwCS_LEFTTIME_TICK_COUNT = GetTickCount();

  000f5	ff d7		 call	 edi
  000f7	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax
$LN6@ProcState_@8:

; 2951 : 		}
; 2952 : 
; 2953 : 		/*if(m_dwCS_JOINSIDE_REFRESH_TOTAL_COUNT < 1 )//&& GetTickCount() - m_dwCS_JOINSIDE_REFRESH_TICK_COUNT > 10000)
; 2954 : 		{
; 2955 : 			SetAllUserCsJoinSide();
; 2956 : 			m_dwCS_JOINSIDE_REFRESH_TICK_COUNT = GetTickCount();
; 2957 : 			m_dwCS_JOINSIDE_REFRESH_TOTAL_COUNT++;
; 2958 : 		}*/
; 2959 : 
; 2960 : 		if(GetTickCount() - m_dwCS_MINIMAP_SEND_TICK_COUNT > 3000)

  000fd	ff d7		 call	 edi
  000ff	2b 86 a8 00 00
	00		 sub	 eax, DWORD PTR [esi+168]
  00105	5b		 pop	 ebx
  00106	3d b8 0b 00 00	 cmp	 eax, 3000		; 00000bb8H
  0010b	76 0f		 jbe	 SHORT $LN5@ProcState_@8

; 2961 : 		{
; 2962 : 			OperateMiniMapWork();

  0010d	8b ce		 mov	 ecx, esi
  0010f	e8 00 00 00 00	 call	 ?OperateMiniMapWork@CCastleSiege@@QAEXXZ ; CCastleSiege::OperateMiniMapWork

; 2963 : 			m_dwCS_MINIMAP_SEND_TICK_COUNT = GetTickCount();

  00114	ff d7		 call	 edi
  00116	89 86 a8 00 00
	00		 mov	 DWORD PTR [esi+168], eax
$LN5@ProcState_@8:

; 2964 : 		}
; 2965 : 
; 2966 : 		if(GetTickCount() - m_dwEVENT_MSG_TICK_COUNT > 1800000)

  0011c	ff d7		 call	 edi
  0011e	2b 86 98 00 00
	00		 sub	 eax, DWORD PTR [esi+152]
  00124	3d 40 77 1b 00	 cmp	 eax, 1800000		; 001b7740H
  00129	76 21		 jbe	 SHORT $LN12@ProcState_@8

; 2967 : 		{
; 2968 : 			SendAllUserAnyMsg(lMsg.Get(MSGGET(6, 83)),1);

  0012b	6a 01		 push	 1
  0012d	68 53 06 00 00	 push	 1619			; 00000653H
  00132	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00137	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0013c	50		 push	 eax
  0013d	8b ce		 mov	 ecx, esi
  0013f	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CCastleSiege@@QAEXPADH@Z ; CCastleSiege::SendAllUserAnyMsg

; 2969 : 			m_dwEVENT_MSG_TICK_COUNT = GetTickCount();

  00144	ff d7		 call	 edi
  00146	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN12@ProcState_@8:

; 2970 : 		}
; 2971 : 
; 2972 : #if (__CUSTOM__ != 1)
; 2973 : 		LogAddC(3,"RUN ProcState_STARTSIEGE()	LEFT-MSEC:%d",m_iCS_REMAIN_MSEC);
; 2974 : #endif
; 2975 : 	}
; 2976 : 
; 2977 : 	if(m_iCS_REMAIN_MSEC <= 0)

  0014c	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00150	7f 74		 jg	 SHORT $LN3@ProcState_@8

; 2978 : 	{
; 2979 : 		if(CheckCastleSiegeResult() == 1)

  00152	8b ce		 mov	 ecx, esi
  00154	e8 00 00 00 00	 call	 ?CheckCastleSiegeResult@CCastleSiege@@QAEHXZ ; CCastleSiege::CheckCastleSiegeResult
  00159	83 f8 01	 cmp	 eax, 1
  0015c	75 0c		 jne	 SHORT $LN2@ProcState_@8

; 2980 : 		{
; 2981 : 			GS_GDReqResetCastleTaxInfo(m_iMapSvrGroup);

  0015e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 ?GS_GDReqResetCastleTaxInfo@@YAXH@Z ; GS_GDReqResetCastleTaxInfo
  00167	83 c4 04	 add	 esp, 4
$LN2@ProcState_@8:

; 2982 : 		}
; 2983 : 
; 2984 : 		ReSpawnEnemyUser(0);

  0016a	6a 00		 push	 0
  0016c	8b ce		 mov	 ecx, esi
  0016e	e8 00 00 00 00	 call	 ?ReSpawnEnemyUser@CCastleSiege@@QAEXH@Z ; CCastleSiege::ReSpawnEnemyUser

; 2985 : 
; 2986 : 		if(m_btIsCastleOccupied == 1)

  00173	80 be d6 00 00
	00 01		 cmp	 BYTE PTR [esi+214], 1
  0017a	75 15		 jne	 SHORT $LN1@ProcState_@8

; 2987 : 		{
; 2988 : 			GS_GDReqCastleOwnerChange(m_iMapSvrGroup,m_btIsCastleOccupied,m_szCastleOwnerGuild);

  0017c	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0017f	8d 96 d7 00 00
	00		 lea	 edx, DWORD PTR [esi+215]
  00185	52		 push	 edx
  00186	6a 01		 push	 1
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?GS_GDReqCastleOwnerChange@@YAXHHPAD@Z ; GS_GDReqCastleOwnerChange
  0018e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ProcState_@8:

; 2989 : 		}
; 2990 : 
; 2991 : 		GS_GDReqSiegeEndedChange(m_iMapSvrGroup,TRUE);

  00191	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00194	6a 01		 push	 1
  00196	51		 push	 ecx
  00197	e8 00 00 00 00	 call	 ?GS_GDReqSiegeEndedChange@@YAXHH@Z ; GS_GDReqSiegeEndedChange
  0019c	83 c4 08	 add	 esp, 8

; 2992 : 		StoreDbNpc();

  0019f	8b ce		 mov	 ecx, esi
  001a1	e8 00 00 00 00	 call	 ?StoreDbNpc@CCastleSiege@@QAEXXZ ; CCastleSiege::StoreDbNpc

; 2993 : 		NotifyAllUserCsStartState(FALSE);

  001a6	6a 00		 push	 0
  001a8	8b ce		 mov	 ecx, esi
  001aa	e8 00 00 00 00	 call	 ?NotifyAllUserCsStartState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyAllUserCsStartState

; 2994 : 		GS_GDReqResetSiegeGuildInfo(m_iMapSvrGroup);

  001af	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  001b2	52		 push	 edx
  001b3	e8 00 00 00 00	 call	 ?GS_GDReqResetSiegeGuildInfo@@YAXH@Z ; GS_GDReqResetSiegeGuildInfo
  001b8	83 c4 04	 add	 esp, 4

; 2995 : 		SetState(CASTLESIEGE_STATE_ENDSIEGE,TRUE);

  001bb	6a 01		 push	 1
  001bd	6a 08		 push	 8
  001bf	8b ce		 mov	 ecx, esi
  001c1	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState
$LN3@ProcState_@8:

; 2996 : 	}
; 2997 : }

  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	c3		 ret	 0
?ProcState_STARTSIEGE@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_STARTSIEGE
_TEXT	ENDS
PUBLIC	?ProcState_ENDSIEGE@CCastleSiege@@QAEXXZ	; CCastleSiege::ProcState_ENDSIEGE
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_ENDSIEGE@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ProcState_ENDSIEGE@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_ENDSIEGE, COMDAT
; _this$ = ecx

; 3000 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 3001 : 	int iTICK_MSEC = GetTickCount() - m_iCS_TICK_COUNT;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 46 6c	 sub	 eax, DWORD PTR [esi+108]

; 3002 : 
; 3003 : 	if(iTICK_MSEC >= 1000)

  0000f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00014	7c 08		 jl	 SHORT $LN2@ProcState_@9

; 3004 : 	{
; 3005 : 		m_iCS_REMAIN_MSEC -= iTICK_MSEC;

  00016	29 46 68	 sub	 DWORD PTR [esi+104], eax

; 3006 : 		m_iCS_TICK_COUNT = GetTickCount();

  00019	ff d7		 call	 edi
  0001b	89 46 6c	 mov	 DWORD PTR [esi+108], eax
$LN2@ProcState_@9:

; 3007 : 
; 3008 : #if (__CUSTOM__ != 1)
; 3009 : 		LogAddC(3,"RUN ProcState_ENDSIEGE()	LEFT-MSEC:%d",m_iCS_REMAIN_MSEC);
; 3010 : #endif
; 3011 : 	}
; 3012 : 
; 3013 : 	if(m_iCS_REMAIN_MSEC <= 0)

  0001e	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00022	7f 0b		 jg	 SHORT $LN1@ProcState_@9

; 3014 : 	{
; 3015 : 		SetState(CASTLESIEGE_STATE_ENDCYCLE,TRUE);

  00024	6a 01		 push	 1
  00026	6a 09		 push	 9
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState
$LN1@ProcState_@9:

; 3016 : 	}
; 3017 : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
?ProcState_ENDSIEGE@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_ENDSIEGE
_TEXT	ENDS
PUBLIC	?ProcState_ENDCYCLE@CCastleSiege@@QAEXXZ	; CCastleSiege::ProcState_ENDCYCLE
; Function compile flags: /Ogtp
;	COMDAT ?ProcState_ENDCYCLE@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
?ProcState_ENDCYCLE@CCastleSiege@@QAEXXZ PROC		; CCastleSiege::ProcState_ENDCYCLE, COMDAT
; _this$ = ecx

; 3020 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 3021 : 	int iTICK_MSEC = GetTickCount() - m_iCS_TICK_COUNT;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00008	8b f1		 mov	 esi, ecx
  0000a	ff d7		 call	 edi
  0000c	2b 46 6c	 sub	 eax, DWORD PTR [esi+108]

; 3022 : 
; 3023 : 	if(iTICK_MSEC >= 1000)

  0000f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00014	7c 08		 jl	 SHORT $LN2@ProcState_@10

; 3024 : 	{
; 3025 : 		m_iCS_REMAIN_MSEC -= iTICK_MSEC;

  00016	29 46 68	 sub	 DWORD PTR [esi+104], eax

; 3026 : 		m_iCS_TICK_COUNT = GetTickCount();

  00019	ff d7		 call	 edi
  0001b	89 46 6c	 mov	 DWORD PTR [esi+108], eax
$LN2@ProcState_@10:

; 3027 : 
; 3028 : #if (__CUSTOM__ != 1)
; 3029 : 		LogAddC(3,"RUN ProcState_ENDCYCLE()	LEFT-MSEC:%d",m_iCS_REMAIN_MSEC);
; 3030 : #endif
; 3031 : 	}
; 3032 : 
; 3033 : 	if(m_iCS_REMAIN_MSEC <= 0)

  0001e	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00022	7f 0b		 jg	 SHORT $LN1@ProcState_@10

; 3034 : 	{
; 3035 : 		SetState(CASTLESIEGE_STATE_IDLE_1,TRUE);

  00024	6a 01		 push	 1
  00026	6a 00		 push	 0
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState
$LN1@ProcState_@10:

; 3036 : 	}
; 3037 : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
?ProcState_ENDCYCLE@CCastleSiege@@QAEXXZ ENDP		; CCastleSiege::ProcState_ENDCYCLE
_TEXT	ENDS
PUBLIC	??_C@_0DK@HLIGCMKH@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@ ; `string'
PUBLIC	??_C@_0DI@HNFOAOBC@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@ ; `string'
PUBLIC	??_C@_0DG@IIKMMCCH@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@ ; `string'
PUBLIC	??_C@_0DJ@ICKHIAOG@LEFT?5?3?5SEC?$CI?$CFd?$CJ?0?5SIEGE?9DAY?$CI?$CF04d?9?$CF@ ; `string'
PUBLIC	??_C@_0CG@IGIHABOA@RUN?5ProcState_ENDCYCLE?$CI?$CJ?7LEFT?9MS@ ; `string'
PUBLIC	??_C@_0CG@ENKOMAFE@RUN?5ProcState_ENDSIEGE?$CI?$CJ?7LEFT?9MS@ ; `string'
PUBLIC	??_C@_0CI@JNNHHNEL@RUN?5ProcState_STARTSIEGE?$CI?$CJ?7LEFT?9@ ; `string'
PUBLIC	??_C@_0CI@JJCEEJEK@RUN?5ProcState_READYSIEGE?$CI?$CJ?7LEFT?9@ ; `string'
PUBLIC	??_C@_0CE@FJEKECKL@RUN?5ProcState_NOTIFY?$CI?$CJ?7LEFT?9MSEC@ ; `string'
PUBLIC	??_C@_0CE@GIMCFGCM@RUN?5ProcState_IDLE_3?$CI?$CJ?7LEFT?9MSEC@ ; `string'
PUBLIC	??_C@_0CF@LKFGGNAG@RUN?5ProcState_REGMARK?$CI?$CJ?7LEFT?9MSE@ ; `string'
PUBLIC	??_C@_0CE@OPGEJNGP@RUN?5ProcState_IDLE_2?$CI?$CJ?7LEFT?9MSEC@ ; `string'
PUBLIC	??_C@_0CG@EMPJFPEF@RUN?5ProcState_REGSIEGE?$CI?$CJ?7LEFT?9MS@ ; `string'
PUBLIC	??_C@_0CE@LMPOMGOL@RUN?5ProcState_IDLE_1?$CI?$CJ?7LEFT?9MSEC@ ; `string'
PUBLIC	?Run@CCastleSiege@@QAEXXZ			; CCastleSiege::Run
;	COMDAT ??_C@_0DK@HLIGCMKH@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@
CONST	SEGMENT
??_C@_0DK@HLIGCMKH@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@ DB '[Cast'
	DB	'leSiege] LEFT-TIME : CASTLESIEGE_LEFTTIME_NOTRUNNING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HNFOAOBC@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@
CONST	SEGMENT
??_C@_0DI@HNFOAOBC@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@ DB '[Cast'
	DB	'leSiege] LEFT-TIME : CASTLESIEGE_LEFTTIME_ENDSIEGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@IIKMMCCH@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@
CONST	SEGMENT
??_C@_0DG@IIKMMCCH@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@ DB '[Cast'
	DB	'leSiege] LEFT-TIME : CASTLESIEGE_LEFTTIME_ONSIGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@ICKHIAOG@LEFT?5?3?5SEC?$CI?$CFd?$CJ?0?5SIEGE?9DAY?$CI?$CF04d?9?$CF@
CONST	SEGMENT
??_C@_0DJ@ICKHIAOG@LEFT?5?3?5SEC?$CI?$CFd?$CJ?0?5SIEGE?9DAY?$CI?$CF04d?9?$CF@ DB 'L'
	DB	'EFT : SEC(%d), SIEGE-DAY(%04d-%02d-%02d %02d:%02d:%02d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IGIHABOA@RUN?5ProcState_ENDCYCLE?$CI?$CJ?7LEFT?9MS@
CONST	SEGMENT
??_C@_0CG@IGIHABOA@RUN?5ProcState_ENDCYCLE?$CI?$CJ?7LEFT?9MS@ DB 'RUN Pro'
	DB	'cState_ENDCYCLE()', 09H, 'LEFT-MSEC:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ENKOMAFE@RUN?5ProcState_ENDSIEGE?$CI?$CJ?7LEFT?9MS@
CONST	SEGMENT
??_C@_0CG@ENKOMAFE@RUN?5ProcState_ENDSIEGE?$CI?$CJ?7LEFT?9MS@ DB 'RUN Pro'
	DB	'cState_ENDSIEGE()', 09H, 'LEFT-MSEC:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JNNHHNEL@RUN?5ProcState_STARTSIEGE?$CI?$CJ?7LEFT?9@
CONST	SEGMENT
??_C@_0CI@JNNHHNEL@RUN?5ProcState_STARTSIEGE?$CI?$CJ?7LEFT?9@ DB 'RUN Pro'
	DB	'cState_STARTSIEGE()', 09H, 'LEFT-MSEC:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JJCEEJEK@RUN?5ProcState_READYSIEGE?$CI?$CJ?7LEFT?9@
CONST	SEGMENT
??_C@_0CI@JJCEEJEK@RUN?5ProcState_READYSIEGE?$CI?$CJ?7LEFT?9@ DB 'RUN Pro'
	DB	'cState_READYSIEGE()', 09H, 'LEFT-MSEC:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FJEKECKL@RUN?5ProcState_NOTIFY?$CI?$CJ?7LEFT?9MSEC@
CONST	SEGMENT
??_C@_0CE@FJEKECKL@RUN?5ProcState_NOTIFY?$CI?$CJ?7LEFT?9MSEC@ DB 'RUN Pro'
	DB	'cState_NOTIFY()', 09H, 'LEFT-MSEC:%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GIMCFGCM@RUN?5ProcState_IDLE_3?$CI?$CJ?7LEFT?9MSEC@
CONST	SEGMENT
??_C@_0CE@GIMCFGCM@RUN?5ProcState_IDLE_3?$CI?$CJ?7LEFT?9MSEC@ DB 'RUN Pro'
	DB	'cState_IDLE_3()', 09H, 'LEFT-MSEC:%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LKFGGNAG@RUN?5ProcState_REGMARK?$CI?$CJ?7LEFT?9MSE@
CONST	SEGMENT
??_C@_0CF@LKFGGNAG@RUN?5ProcState_REGMARK?$CI?$CJ?7LEFT?9MSE@ DB 'RUN Pro'
	DB	'cState_REGMARK()', 09H, 'LEFT-MSEC:%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OPGEJNGP@RUN?5ProcState_IDLE_2?$CI?$CJ?7LEFT?9MSEC@
CONST	SEGMENT
??_C@_0CE@OPGEJNGP@RUN?5ProcState_IDLE_2?$CI?$CJ?7LEFT?9MSEC@ DB 'RUN Pro'
	DB	'cState_IDLE_2()', 09H, 'LEFT-MSEC:%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EMPJFPEF@RUN?5ProcState_REGSIEGE?$CI?$CJ?7LEFT?9MS@
CONST	SEGMENT
??_C@_0CG@EMPJFPEF@RUN?5ProcState_REGSIEGE?$CI?$CJ?7LEFT?9MS@ DB 'RUN Pro'
	DB	'cState_REGSIEGE()', 09H, 'LEFT-MSEC:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LMPOMGOL@RUN?5ProcState_IDLE_1?$CI?$CJ?7LEFT?9MSEC@
CONST	SEGMENT
??_C@_0CE@LMPOMGOL@RUN?5ProcState_IDLE_1?$CI?$CJ?7LEFT?9MSEC@ DB 'RUN Pro'
	DB	'cState_IDLE_1()', 09H, 'LEFT-MSEC:%d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Run@CCastleSiege@@QAEXXZ
_TEXT	SEGMENT
$T189818 = -32						; size = 16
_tmRetDate$189817 = -16					; size = 16
?Run@CCastleSiege@@QAEXXZ PROC				; CCastleSiege::Run, COMDAT
; _this$ = ecx

; 5742 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 5743 : 	if(m_bDoRun == FALSE)

  00009	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0000d	0f 84 fc 01 00
	00		 je	 $LN4@Run

; 5744 : 		return;
; 5745 : 
; 5746 : 	if(m_bCastleSiegeEnable == FALSE)

  00013	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00017	0f 84 f2 01 00
	00		 je	 $LN4@Run

; 5747 : 		return;
; 5748 : 
; 5749 : 	switch(m_iCastleSiegeState)

  0001d	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00020	40		 inc	 eax
  00021	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00024	77 4b		 ja	 SHORT $LN35@Run
  00026	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN44@Run[eax*4]
$LN33@Run:

; 5750 : 	{
; 5751 : 	case CASTLESIEGE_STATE_NONE:
; 5752 : 		ProcState_NONE();
; 5753 : 		break;
; 5754 : 	case CASTLESIEGE_STATE_IDLE_1:
; 5755 : 		ProcState_IDLE_1();

  0002d	e8 00 00 00 00	 call	 ?ProcState_IDLE_1@CCastleSiege@@QAEXXZ ; CCastleSiege::ProcState_IDLE_1

; 5756 : 		break;

  00032	eb 3d		 jmp	 SHORT $LN35@Run
$LN32@Run:

; 5757 : 	case CASTLESIEGE_STATE_REGSIEGE:
; 5758 : 		ProcState_REGSIEGE();

  00034	e8 00 00 00 00	 call	 ?ProcState_REGSIEGE@CCastleSiege@@QAEXXZ ; CCastleSiege::ProcState_REGSIEGE

; 5759 : 		break;

  00039	eb 36		 jmp	 SHORT $LN35@Run
$LN31@Run:

; 5760 : 	case CASTLESIEGE_STATE_IDLE_2:
; 5761 : 		ProcState_IDLE_2();

  0003b	e8 00 00 00 00	 call	 ?ProcState_IDLE_2@CCastleSiege@@QAEXXZ ; CCastleSiege::ProcState_IDLE_2

; 5762 : 		break;

  00040	eb 2f		 jmp	 SHORT $LN35@Run
$LN30@Run:

; 5763 : 	case CASTLESIEGE_STATE_REGMARK:
; 5764 : 		ProcState_REGMARK();

  00042	e8 00 00 00 00	 call	 ?ProcState_REGMARK@CCastleSiege@@QAEXXZ ; CCastleSiege::ProcState_REGMARK

; 5765 : 		break;

  00047	eb 28		 jmp	 SHORT $LN35@Run
$LN29@Run:

; 5766 : 	case CASTLESIEGE_STATE_IDLE_3:
; 5767 : 		ProcState_IDLE_3();

  00049	e8 00 00 00 00	 call	 ?ProcState_IDLE_3@CCastleSiege@@QAEXXZ ; CCastleSiege::ProcState_IDLE_3

; 5768 : 		break;

  0004e	eb 21		 jmp	 SHORT $LN35@Run
$LN28@Run:

; 5769 : 	case CASTLESIEGE_STATE_NOTIFY:
; 5770 : 		ProcState_NOTIFY();

  00050	e8 00 00 00 00	 call	 ?ProcState_NOTIFY@CCastleSiege@@QAEXXZ ; CCastleSiege::ProcState_NOTIFY

; 5771 : 		break;

  00055	eb 1a		 jmp	 SHORT $LN35@Run
$LN27@Run:

; 5772 : 	case CASTLESIEGE_STATE_READYSIEGE:
; 5773 : 		ProcState_READYSIEGE();

  00057	e8 00 00 00 00	 call	 ?ProcState_READYSIEGE@CCastleSiege@@QAEXXZ ; CCastleSiege::ProcState_READYSIEGE

; 5774 : 		break;

  0005c	eb 13		 jmp	 SHORT $LN35@Run
$LN26@Run:

; 5775 : 	case CASTLESIEGE_STATE_STARTSIEGE:
; 5776 : 		ProcState_STARTSIEGE();

  0005e	e8 00 00 00 00	 call	 ?ProcState_STARTSIEGE@CCastleSiege@@QAEXXZ ; CCastleSiege::ProcState_STARTSIEGE

; 5777 : 		break;

  00063	eb 0c		 jmp	 SHORT $LN35@Run
$LN25@Run:

; 5778 : 	case CASTLESIEGE_STATE_ENDSIEGE:
; 5779 : 		ProcState_ENDSIEGE();

  00065	e8 00 00 00 00	 call	 ?ProcState_ENDSIEGE@CCastleSiege@@QAEXXZ ; CCastleSiege::ProcState_ENDSIEGE

; 5780 : 		break;

  0006a	eb 05		 jmp	 SHORT $LN35@Run
$LN24@Run:

; 5781 : 	case CASTLESIEGE_STATE_ENDCYCLE:
; 5782 : 		ProcState_ENDCYCLE();

  0006c	e8 00 00 00 00	 call	 ?ProcState_ENDCYCLE@CCastleSiege@@QAEXXZ ; CCastleSiege::ProcState_ENDCYCLE
$LN35@Run:
  00071	57		 push	 edi

; 5783 : 		break;
; 5784 : 	}
; 5785 : 
; 5786 : 	if(GetTickCount() - m_dwNPC_DBSAVE_TICK_COUNT > 300000)

  00072	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00078	ff d7		 call	 edi
  0007a	2b 86 90 00 00
	00		 sub	 eax, DWORD PTR [esi+144]
  00080	3d e0 93 04 00	 cmp	 eax, 300000		; 000493e0H
  00085	76 15		 jbe	 SHORT $LN23@Run

; 5787 : 	{
; 5788 : 		if(m_iCastleSiegeState != CASTLESIEGE_STATE_STARTSIEGE)

  00087	83 7e 28 07	 cmp	 DWORD PTR [esi+40], 7
  0008b	74 07		 je	 SHORT $LN22@Run

; 5789 : 		{
; 5790 : 			StoreDbNpc();

  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 ?StoreDbNpc@CCastleSiege@@QAEXXZ ; CCastleSiege::StoreDbNpc
$LN22@Run:

; 5791 : 		}
; 5792 : 
; 5793 : 		m_dwNPC_DBSAVE_TICK_COUNT = GetTickCount();

  00094	ff d7		 call	 edi
  00096	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax
$LN23@Run:

; 5794 : 	}
; 5795 : 
; 5796 : 	if(GetTickCount() - m_dwCALC_LEFTSIEGE_TICK_COUNT > 10000)

  0009c	ff d7		 call	 edi
  0009e	2b 86 94 00 00
	00		 sub	 eax, DWORD PTR [esi+148]
  000a4	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  000a9	76 0f		 jbe	 SHORT $LN21@Run

; 5797 : 	{
; 5798 : 		m_dwCALC_LEFTSIEGE_TICK_COUNT = GetTickCount();

  000ab	ff d7		 call	 edi

; 5799 : 		CalcCastleLeftSiegeDate();

  000ad	8b ce		 mov	 ecx, esi
  000af	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax
  000b5	e8 00 00 00 00	 call	 ?CalcCastleLeftSiegeDate@CCastleSiege@@QAEHXZ ; CCastleSiege::CalcCastleLeftSiegeDate
$LN21@Run:

; 5800 : 	}
; 5801 : 
; 5802 : 	if(GetTickCount() - m_dwSIEGE_LOG_TICK > 60000)

  000ba	ff d7		 call	 edi
  000bc	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?m_dwSIEGE_LOG_TICK@@3KA ; m_dwSIEGE_LOG_TICK
  000c2	3d 60 ea 00 00	 cmp	 eax, 60000		; 0000ea60H
  000c7	0f 86 41 01 00
	00		 jbe	 $LN41@Run

; 5803 : 	{
; 5804 : 		m_dwSIEGE_LOG_TICK = GetTickCount();

  000cd	ff d7		 call	 edi

; 5805 : 
; 5806 : 		int iRET_SEC = CalcCastleLeftSiegeDate();

  000cf	8b ce		 mov	 ecx, esi
  000d1	a3 00 00 00 00	 mov	 DWORD PTR ?m_dwSIEGE_LOG_TICK@@3KA, eax ; m_dwSIEGE_LOG_TICK
  000d6	e8 00 00 00 00	 call	 ?CalcCastleLeftSiegeDate@CCastleSiege@@QAEHXZ ; CCastleSiege::CalcCastleLeftSiegeDate
  000db	8b f8		 mov	 edi, eax

; 5807 : 
; 5808 : 		if(iRET_SEC >= 0)

  000dd	85 ff		 test	 edi, edi
  000df	0f 88 de 00 00
	00		 js	 $LN19@Run

; 5809 : 		{
; 5810 : 			_SYSTEMTIME tmRetDate;
; 5811 : 			
; 5812 : 			tmRetDate = GetCastleLeftSiegeDate();

  000e5	53		 push	 ebx
  000e6	8d 45 e0	 lea	 eax, DWORD PTR $T189818[ebp]
  000e9	50		 push	 eax
  000ea	8b ce		 mov	 ecx, esi
  000ec	e8 00 00 00 00	 call	 ?GetCastleLeftSiegeDate@CCastleSiege@@QAE?AU_SYSTEMTIME@@XZ ; CCastleSiege::GetCastleLeftSiegeDate
  000f1	8b 18		 mov	 ebx, DWORD PTR [eax]
  000f3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000f9	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000fc	89 45 fc	 mov	 DWORD PTR _tmRetDate$189817[ebp+12], eax

; 5813 : 
; 5814 : #if (__CUSTOM__ ==1)
; 5815 : 			switch(m_iCastleSiegeState)

  000ff	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00102	89 5d f0	 mov	 DWORD PTR _tmRetDate$189817[ebp], ebx
  00105	89 4d f4	 mov	 DWORD PTR _tmRetDate$189817[ebp+4], ecx
  00108	89 55 f8	 mov	 DWORD PTR _tmRetDate$189817[ebp+8], edx
  0010b	83 f8 09	 cmp	 eax, 9
  0010e	77 7e		 ja	 SHORT $LN17@Run
  00110	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN45@Run[eax*4]
$LN16@Run:

; 5816 : 			{
; 5817 : 			case CASTLESIEGE_STATE_IDLE_1:
; 5818 : 				LogAddC(3,"RUN ProcState_IDLE_1()	LEFT-MSEC:%d", m_iCS_REMAIN_MSEC);

  00117	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0011a	51		 push	 ecx
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LMPOMGOL@RUN?5ProcState_IDLE_1?$CI?$CJ?7LEFT?9MSEC@

; 5819 : 				break;

  00120	eb 61		 jmp	 SHORT $LN42@Run
$LN15@Run:

; 5820 : 			case CASTLESIEGE_STATE_REGSIEGE:
; 5821 : 				LogAddC(3,"RUN ProcState_REGSIEGE()	LEFT-MSEC:%d", m_iCS_REMAIN_MSEC);

  00122	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
  00125	52		 push	 edx
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EMPJFPEF@RUN?5ProcState_REGSIEGE?$CI?$CJ?7LEFT?9MS@

; 5822 : 				break;

  0012b	eb 56		 jmp	 SHORT $LN42@Run
$LN14@Run:

; 5823 : 			case CASTLESIEGE_STATE_IDLE_2:
; 5824 : 				LogAddC(3,"RUN ProcState_IDLE_2()	LEFT-MSEC:%d", m_iCS_REMAIN_MSEC);

  0012d	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  00130	50		 push	 eax
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@OPGEJNGP@RUN?5ProcState_IDLE_2?$CI?$CJ?7LEFT?9MSEC@

; 5825 : 				break;

  00136	eb 4b		 jmp	 SHORT $LN42@Run
$LN13@Run:

; 5826 : 			case CASTLESIEGE_STATE_REGMARK:
; 5827 : 				LogAddC(3,"RUN ProcState_REGMARK()	LEFT-MSEC:%d", m_iCS_REMAIN_MSEC);

  00138	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0013b	51		 push	 ecx
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LKFGGNAG@RUN?5ProcState_REGMARK?$CI?$CJ?7LEFT?9MSE@

; 5828 : 				break;

  00141	eb 40		 jmp	 SHORT $LN42@Run
$LN12@Run:

; 5829 : 			case CASTLESIEGE_STATE_IDLE_3:
; 5830 : 				LogAddC(3,"RUN ProcState_IDLE_3()	LEFT-MSEC:%d", m_iCS_REMAIN_MSEC);

  00143	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
  00146	52		 push	 edx
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@GIMCFGCM@RUN?5ProcState_IDLE_3?$CI?$CJ?7LEFT?9MSEC@

; 5831 : 				break;

  0014c	eb 35		 jmp	 SHORT $LN42@Run
$LN11@Run:

; 5832 : 			case CASTLESIEGE_STATE_NOTIFY:
; 5833 : 				LogAddC(3,"RUN ProcState_NOTIFY()	LEFT-MSEC:%d", m_iCS_REMAIN_MSEC);

  0014e	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  00151	50		 push	 eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FJEKECKL@RUN?5ProcState_NOTIFY?$CI?$CJ?7LEFT?9MSEC@

; 5834 : 				break;

  00157	eb 2a		 jmp	 SHORT $LN42@Run
$LN10@Run:

; 5835 : 			case CASTLESIEGE_STATE_READYSIEGE:
; 5836 : 				LogAddC(3,"RUN ProcState_READYSIEGE()	LEFT-MSEC:%d", m_iCS_REMAIN_MSEC);

  00159	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0015c	51		 push	 ecx
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@JJCEEJEK@RUN?5ProcState_READYSIEGE?$CI?$CJ?7LEFT?9@

; 5837 : 				break;

  00162	eb 1f		 jmp	 SHORT $LN42@Run
$LN9@Run:

; 5838 : 			case CASTLESIEGE_STATE_STARTSIEGE:
; 5839 : 				LogAddC(3,"RUN ProcState_STARTSIEGE()	LEFT-MSEC:%d", m_iCS_REMAIN_MSEC);

  00164	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
  00167	52		 push	 edx
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@JNNHHNEL@RUN?5ProcState_STARTSIEGE?$CI?$CJ?7LEFT?9@

; 5840 : 				break;

  0016d	eb 14		 jmp	 SHORT $LN42@Run
$LN8@Run:

; 5841 : 			case CASTLESIEGE_STATE_ENDSIEGE:
; 5842 : 				LogAddC(3,"RUN ProcState_ENDSIEGE()	LEFT-MSEC:%d", m_iCS_REMAIN_MSEC);

  0016f	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  00172	50		 push	 eax
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@ENKOMAFE@RUN?5ProcState_ENDSIEGE?$CI?$CJ?7LEFT?9MS@

; 5843 : 				break;

  00178	eb 09		 jmp	 SHORT $LN42@Run
$LN7@Run:

; 5844 : 			case CASTLESIEGE_STATE_ENDCYCLE:
; 5845 : 				LogAddC(3,"RUN ProcState_ENDCYCLE()	LEFT-MSEC:%d", m_iCS_REMAIN_MSEC);

  0017a	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0017d	51		 push	 ecx
  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IGIHABOA@RUN?5ProcState_ENDCYCLE?$CI?$CJ?7LEFT?9MS@
$LN42@Run:
  00183	6a 03		 push	 3
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0018b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN17@Run:

; 5846 : 				break;
; 5847 : 			}
; 5848 : #endif
; 5849 : 
; 5850 : 			LogAddC(4,"LEFT : SEC(%d), SIEGE-DAY(%04d-%02d-%02d %02d:%02d:%02d)",
; 5851 : 				iRET_SEC, tmRetDate.wYear, tmRetDate.wMonth, tmRetDate.wDay, 
; 5852 : 				tmRetDate.wHour, tmRetDate.wMinute, tmRetDate.wSecond);

  0018e	0f b7 55 fc	 movzx	 edx, WORD PTR _tmRetDate$189817[ebp+12]
  00192	0f b7 45 fa	 movzx	 eax, WORD PTR _tmRetDate$189817[ebp+10]
  00196	0f b7 4d f8	 movzx	 ecx, WORD PTR _tmRetDate$189817[ebp+8]
  0019a	52		 push	 edx
  0019b	0f b7 55 f6	 movzx	 edx, WORD PTR _tmRetDate$189817[ebp+6]
  0019f	50		 push	 eax
  001a0	0f b7 45 f2	 movzx	 eax, WORD PTR _tmRetDate$189817[ebp+2]
  001a4	51		 push	 ecx
  001a5	52		 push	 edx
  001a6	50		 push	 eax
  001a7	0f b7 cb	 movzx	 ecx, bx
  001aa	51		 push	 ecx
  001ab	57		 push	 edi
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@ICKHIAOG@LEFT?5?3?5SEC?$CI?$CFd?$CJ?0?5SIEGE?9DAY?$CI?$CF04d?9?$CF@
  001b1	6a 04		 push	 4
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  001b9	83 c4 24	 add	 esp, 36			; 00000024H
  001bc	5b		 pop	 ebx
  001bd	5f		 pop	 edi
  001be	5e		 pop	 esi

; 5866 : 				break;
; 5867 : 			}
; 5868 : 		}
; 5869 : 	}
; 5870 : }

  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c3		 ret	 0
$LN19@Run:

; 5853 : 		}
; 5854 : 		else
; 5855 : 		{
; 5856 : 			switch(iRET_SEC)

  001c3	83 ff fd	 cmp	 edi, -3			; fffffffdH
  001c6	74 36		 je	 SHORT $LN1@Run
  001c8	83 ff fe	 cmp	 edi, -2			; fffffffeH
  001cb	74 1b		 je	 SHORT $LN2@Run
  001cd	83 ff ff	 cmp	 edi, -1
  001d0	75 3c		 jne	 SHORT $LN41@Run

; 5857 : 			{
; 5858 : 			case -1:
; 5859 : 				LogAddC(4,"[CastleSiege] LEFT-TIME : CASTLESIEGE_LEFTTIME_ONSIGE");

  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@IIKMMCCH@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@

; 5863 : 				break;
; 5864 : 			case -3:
; 5865 : 				LogAddC(4,"[CastleSiege] LEFT-TIME : CASTLESIEGE_LEFTTIME_NOTRUNNING");

  001d7	6a 04		 push	 4
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  001df	83 c4 08	 add	 esp, 8
  001e2	5f		 pop	 edi
  001e3	5e		 pop	 esi

; 5866 : 				break;
; 5867 : 			}
; 5868 : 		}
; 5869 : 	}
; 5870 : }

  001e4	8b e5		 mov	 esp, ebp
  001e6	5d		 pop	 ebp
  001e7	c3		 ret	 0
$LN2@Run:

; 5860 : 				break;
; 5861 : 			case -2:
; 5862 : 				LogAddC(4,"[CastleSiege] LEFT-TIME : CASTLESIEGE_LEFTTIME_ENDSIEGE");

  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HNFOAOBC@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@

; 5863 : 				break;
; 5864 : 			case -3:
; 5865 : 				LogAddC(4,"[CastleSiege] LEFT-TIME : CASTLESIEGE_LEFTTIME_NOTRUNNING");

  001ed	6a 04		 push	 4
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  001f5	83 c4 08	 add	 esp, 8
  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi

; 5866 : 				break;
; 5867 : 			}
; 5868 : 		}
; 5869 : 	}
; 5870 : }

  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c3		 ret	 0
$LN1@Run:

; 5863 : 				break;
; 5864 : 			case -3:
; 5865 : 				LogAddC(4,"[CastleSiege] LEFT-TIME : CASTLESIEGE_LEFTTIME_NOTRUNNING");

  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@HLIGCMKH@?$FLCastleSiege?$FN?5LEFT?9TIME?5?3?5CASTLE@
  00203	6a 04		 push	 4
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0020b	83 c4 08	 add	 esp, 8
$LN41@Run:
  0020e	5f		 pop	 edi
$LN4@Run:
  0020f	5e		 pop	 esi

; 5866 : 				break;
; 5867 : 			}
; 5868 : 		}
; 5869 : 	}
; 5870 : }

  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
$LN44@Run:
  00214	00 00 00 00	 DD	 $LN35@Run
  00218	00 00 00 00	 DD	 $LN33@Run
  0021c	00 00 00 00	 DD	 $LN32@Run
  00220	00 00 00 00	 DD	 $LN31@Run
  00224	00 00 00 00	 DD	 $LN30@Run
  00228	00 00 00 00	 DD	 $LN29@Run
  0022c	00 00 00 00	 DD	 $LN28@Run
  00230	00 00 00 00	 DD	 $LN27@Run
  00234	00 00 00 00	 DD	 $LN26@Run
  00238	00 00 00 00	 DD	 $LN25@Run
  0023c	00 00 00 00	 DD	 $LN24@Run
$LN45@Run:
  00240	00 00 00 00	 DD	 $LN16@Run
  00244	00 00 00 00	 DD	 $LN15@Run
  00248	00 00 00 00	 DD	 $LN14@Run
  0024c	00 00 00 00	 DD	 $LN13@Run
  00250	00 00 00 00	 DD	 $LN12@Run
  00254	00 00 00 00	 DD	 $LN11@Run
  00258	00 00 00 00	 DD	 $LN10@Run
  0025c	00 00 00 00	 DD	 $LN9@Run
  00260	00 00 00 00	 DD	 $LN8@Run
  00264	00 00 00 00	 DD	 $LN7@Run
?Run@CCastleSiege@@QAEXXZ ENDP				; CCastleSiege::Run
_TEXT	ENDS
PUBLIC	??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T238791 = -16						; size = 12
$T238692 = -4						; size = 4
??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >, COMDAT
; _this$ = ecx

; 106  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 40		 push	 64			; 00000040H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 26		 je	 SHORT $LN25@map@3
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 3c	 mov	 BYTE PTR [ecx+60], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 3d	 mov	 BYTE PTR [edx+61], al

; 107  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0

; 106  : 		{	// construct empty map from defaults

$LN25@map@3:
  00044	8d 45 fc	 lea	 eax, DWORD PTR $T238692[ebp]
  00047	50		 push	 eax
  00048	8d 4d f0	 lea	 ecx, DWORD PTR $T238791[ebp]
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T238692[ebp], 0
  00052	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005c	8d 4d f0	 lea	 ecx, DWORD PTR $T238791[ebp]
  0005f	51		 push	 ecx
  00060	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T238791[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00067	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@map@3:
$LN48@map@3:
  0006c	cc		 int	 3
??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> > >
_TEXT	ENDS
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@P6AEAAU_CS_REG_GUILD_DATA@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@0@0P6AEAAU_CS_REG_GUILD_DATA@@1@Z@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@P6AEAAU_CS_REG_GUILD_DATA@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@0@0P6AEAAU_CS_REG_GUILD_DATA@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@P6AEAAU_CS_REG_GUILD_DATA@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@0@0P6AEAAU_CS_REG_GUILD_DATA@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>, COMDAT

; 3803 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3804 : 	_DEBUG_RANGE(_First, _Last);
; 3805 : 	_DEBUG_POINTER(_Pred);
; 3806 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Pred$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000d	8b d0		 mov	 edx, eax
  0000f	2b d1		 sub	 edx, ecx
  00011	c1 fa 06	 sar	 edx, 6
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$_Sort@PAU_CS_REG_GUILD_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0HP6AEAAU1@1@Z@Z ; std::_Sort<_CS_REG_GUILD_DATA *,int,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  0001c	83 c4 10	 add	 esp, 16			; 00000010H

; 3807 : 	}

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@std@@P6AEAAU_CS_REG_GUILD_DATA@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@@0@0P6AEAAU_CS_REG_GUILD_DATA@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> > >,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
_TEXT	ENDS
PUBLIC	??$insert@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::insert<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??$insert@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::insert<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >, COMDAT
; _this$ = ecx

; 753  : 		_Pairib insert(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 754  : 		{	// try to insert node with value _Val, favoring right side
; 755  : 		return (_Linsert(this->_Buynode(_STD forward<_Valty>(_Val)),
; 756  : 			false));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
  00012	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00015	50		 push	 eax
  00016	57		 push	 edi
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Linsert
  0001e	8b c7		 mov	 eax, edi
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 757  : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??$insert@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::insert<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
_TEXT	ENDS
PUBLIC	??0CCastleSiege@@QAE@XZ				; CCastleSiege::CCastleSiege
EXTRN	__imp__InitializeCriticalSection@4:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__ehfuncinfo$??0CCastleSiege@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CCastleSiege@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CCastleSiege@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCastleSiege@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCastleSiege@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CCastleSiege@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CCastleSiege@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CCastleSiege@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CCastleSiege@@QAE@XZ$5
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ??0CCastleSiege@@QAE@XZ
_TEXT	SEGMENT
$T239328 = -48						; size = 12
$T239543 = -36						; size = 12
$T239111 = -36						; size = 12
_this$ = -24						; size = 4
$T239175 = -20						; size = 4
$T239389 = -16						; size = 4
$T238960 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCastleSiege@@QAE@XZ PROC				; CCastleSiege::CCastleSiege, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCastleSiege@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
  0002d	33 ff		 xor	 edi, edi
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCastleSiege@@6B@
  00035	89 be 00 01 00
	00		 mov	 DWORD PTR [esi+256], edi
  0003b	89 be 04 01 00
	00		 mov	 DWORD PTR [esi+260], edi
  00041	89 be 08 01 00
	00		 mov	 DWORD PTR [esi+264], edi
  00047	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0004a	89 be 28 01 00
	00		 mov	 DWORD PTR [esi+296], edi
  00050	89 be 2c 01 00
	00		 mov	 DWORD PTR [esi+300], edi
  00056	89 be 30 01 00
	00		 mov	 DWORD PTR [esi+304], edi
  0005c	b3 01		 mov	 bl, 1
  0005e	6a 40		 push	 64			; 00000040H
  00060	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00063	89 be 5c 01 00
	00		 mov	 DWORD PTR [esi+348], edi
  00069	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006e	83 c4 04	 add	 esp, 4
  00071	3b c7		 cmp	 eax, edi
  00073	0f 84 71 01 00
	00		 je	 $LN49@CCastleSie@2
  00079	89 86 58 01 00
	00		 mov	 DWORD PTR [esi+344], eax
  0007f	89 00		 mov	 DWORD PTR [eax], eax
  00081	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  00087	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0008a	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  00090	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00093	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  00099	88 58 3c	 mov	 BYTE PTR [eax+60], bl
  0009c	8b 8e 58 01 00
	00		 mov	 ecx, DWORD PTR [esi+344]
  000a2	88 59 3d	 mov	 BYTE PTR [ecx+61], bl
  000a5	6a 40		 push	 64			; 00000040H
  000a7	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ab	89 be 84 01 00
	00		 mov	 DWORD PTR [esi+388], edi
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b6	83 c4 04	 add	 esp, 4
  000b9	3b c7		 cmp	 eax, edi
  000bb	0f 84 05 01 00
	00		 je	 $LN96@CCastleSie@2
  000c1	89 86 80 01 00
	00		 mov	 DWORD PTR [esi+384], eax
  000c7	89 00		 mov	 DWORD PTR [eax], eax
  000c9	8b 86 80 01 00
	00		 mov	 eax, DWORD PTR [esi+384]
  000cf	89 40 04	 mov	 DWORD PTR [eax+4], eax
  000d2	8b 86 80 01 00
	00		 mov	 eax, DWORD PTR [esi+384]
  000d8	89 40 08	 mov	 DWORD PTR [eax+8], eax
  000db	8b 96 80 01 00
	00		 mov	 edx, DWORD PTR [esi+384]
  000e1	88 5a 3c	 mov	 BYTE PTR [edx+60], bl
  000e4	8b 86 80 01 00
	00		 mov	 eax, DWORD PTR [esi+384]
  000ea	88 58 3d	 mov	 BYTE PTR [eax+61], bl
  000ed	68 00 08 00 00	 push	 2048			; 00000800H
  000f2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000f6	89 be b4 01 00
	00		 mov	 DWORD PTR [esi+436], edi
  000fc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00101	83 c4 04	 add	 esp, 4
  00104	3b c7		 cmp	 eax, edi
  00106	0f 84 96 00 00
	00		 je	 $LN142@CCastleSie@2
  0010c	89 86 b0 01 00
	00		 mov	 DWORD PTR [esi+432], eax
  00112	89 00		 mov	 DWORD PTR [eax], eax
  00114	8b 86 b0 01 00
	00		 mov	 eax, DWORD PTR [esi+432]
  0011a	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0011d	8b 86 b0 01 00
	00		 mov	 eax, DWORD PTR [esi+432]
  00123	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00126	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  0012c	88 99 fc 07 00
	00		 mov	 BYTE PTR [ecx+2044], bl
  00132	8b 96 b0 01 00
	00		 mov	 edx, DWORD PTR [esi+432]
  00138	88 9a fd 07 00
	00		 mov	 BYTE PTR [edx+2045], bl
  0013e	89 be d4 01 00
	00		 mov	 DWORD PTR [esi+468], edi
  00144	89 be d8 01 00
	00		 mov	 DWORD PTR [esi+472], edi
  0014a	89 be dc 01 00
	00		 mov	 DWORD PTR [esi+476], edi

; 75   : 	InitializeCriticalSection(&m_critScheduleData);

  00150	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__InitializeCriticalSection@4
  00156	8d 86 10 01 00
	00		 lea	 eax, DWORD PTR [esi+272]
  0015c	50		 push	 eax
  0015d	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00161	ff d7		 call	 edi

; 76   : 	InitializeCriticalSection(&m_critNpcData);

  00163	8d 8e 38 01 00
	00		 lea	 ecx, DWORD PTR [esi+312]
  00169	51		 push	 ecx
  0016a	ff d7		 call	 edi

; 77   : 	InitializeCriticalSection(&m_critCsTotalGuildInfo);

  0016c	8d 96 8c 01 00
	00		 lea	 edx, DWORD PTR [esi+396]
  00172	52		 push	 edx
  00173	ff d7		 call	 edi

; 78   : 	InitializeCriticalSection(&m_critCsBasicGuildInfo);

  00175	8d 86 64 01 00
	00		 lea	 eax, DWORD PTR [esi+356]
  0017b	50		 push	 eax
  0017c	ff d7		 call	 edi

; 79   : 	InitializeCriticalSection(&m_critCsMiniMap);

  0017e	8d 8e bc 01 00
	00		 lea	 ecx, DWORD PTR [esi+444]
  00184	51		 push	 ecx
  00185	ff d7		 call	 edi

; 80   : 
; 81   : 	Clear();

  00187	8b ce		 mov	 ecx, esi
  00189	e8 00 00 00 00	 call	 ?Clear@CCastleSiege@@QAEXXZ ; CCastleSiege::Clear

; 82   : }

  0018e	8b c6		 mov	 eax, esi
  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c3		 ret	 0

; 74   : {

$LN142@CCastleSie@2:
  001a2	8d 55 f0	 lea	 edx, DWORD PTR $T239389[ebp]
  001a5	52		 push	 edx
  001a6	8d 4d dc	 lea	 ecx, DWORD PTR $T239543[ebp]
  001a9	89 7d f0	 mov	 DWORD PTR $T239389[ebp], edi
  001ac	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  001b1	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  001b6	8d 45 dc	 lea	 eax, DWORD PTR $T239543[ebp]
  001b9	50		 push	 eax
  001ba	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T239543[ebp], OFFSET ??_7bad_alloc@std@@6B@
  001c1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN177@CCastleSie@2:
$LN96@CCastleSie@2:
  001c6	8d 4d ec	 lea	 ecx, DWORD PTR $T239175[ebp]
  001c9	51		 push	 ecx
  001ca	8d 4d d0	 lea	 ecx, DWORD PTR $T239328[ebp]
  001cd	89 7d ec	 mov	 DWORD PTR $T239175[ebp], edi
  001d0	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  001d5	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  001da	8d 55 d0	 lea	 edx, DWORD PTR $T239328[ebp]
  001dd	52		 push	 edx
  001de	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T239328[ebp], OFFSET ??_7bad_alloc@std@@6B@
  001e5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN178@CCastleSie@2:
$LN49@CCastleSie@2:
  001ea	8d 45 f0	 lea	 eax, DWORD PTR $T238960[ebp]
  001ed	50		 push	 eax
  001ee	8d 4d dc	 lea	 ecx, DWORD PTR $T239111[ebp]
  001f1	89 7d f0	 mov	 DWORD PTR $T238960[ebp], edi
  001f4	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  001f9	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  001fe	8d 4d dc	 lea	 ecx, DWORD PTR $T239111[ebp]
  00201	51		 push	 ecx
  00202	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T239111[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00209	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@CCastleSie@2:
$LN176@CCastleSie@2:
  0020e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCastleSiege@@QAE@XZ$0:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00009	e9 00 00 00 00	 jmp	 ??1?$vector@U_CS_SCHEDULE_DATA@@V?$allocator@U_CS_SCHEDULE_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >::~vector<_CS_SCHEDULE_DATA,std::allocator<_CS_SCHEDULE_DATA> >
__unwindfunclet$??0CCastleSiege@@QAE@XZ$1:
  0000e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00017	e9 00 00 00 00	 jmp	 ??1?$vector@U_CS_NPC_DATA@@V?$allocator@U_CS_NPC_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >::~vector<_CS_NPC_DATA,std::allocator<_CS_NPC_DATA> >
__unwindfunclet$??0CCastleSiege@@QAE@XZ$2:
  0001c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	81 c1 54 01 00
	00		 add	 ecx, 340		; 00000154H
  00025	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CCastleSiege@@QAE@XZ$3:
  0002a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	81 c1 7c 01 00
	00		 add	 ecx, 380		; 0000017cH
  00033	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CCastleSiege@@QAE@XZ$4:
  00038	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	81 c1 ac 01 00
	00		 add	 ecx, 428		; 000001acH
  00041	e9 00 00 00 00	 jmp	 ??1?$map@HU_CS_MINIMAP_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_CS_MINIMAP_DATA@@@std@@@3@@std@@QAE@XZ
__unwindfunclet$??0CCastleSiege@@QAE@XZ$5:
  00046	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	81 c1 d4 01 00
	00		 add	 ecx, 468		; 000001d4H
  0004f	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$??0CCastleSiege@@QAE@XZ:
  00054	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00058	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005b	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0005e	33 c8		 xor	 ecx, eax
  00060	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00065	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCastleSiege@@QAE@XZ
  0006a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCastleSiege@@QAE@XZ ENDP				; CCastleSiege::CCastleSiege
; Function compile flags: /Ogtp
;	COMDAT ??_GCCastleSiege@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCastleSiege@@UAEPAXI@Z PROC			; CCastleSiege::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCastleSiege@@UAE@XZ	; CCastleSiege::~CCastleSiege
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@9
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@9:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCastleSiege@@UAEPAXI@Z ENDP			; CCastleSiege::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0HI@GJDPKHPL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@ ; `string'
PUBLIC	??_C@_0IJ@HMPGCLDM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@ ; `string'
PUBLIC	??_C@_0HD@ICGFELJL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@ ; `string'
PUBLIC	??_C@_0EF@MNHILAHH@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CheckSync@CCastleSiege@@QAEHXZ			; CCastleSiege::CheckSync
;	COMDAT ??_C@_0HI@GJDPKHPL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
CONST	SEGMENT
??_C@_0HI@GJDPKHPL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@ DB '[Castle'
	DB	'Siege] CCastleSiege::CheckSync() - bStateSetted == FALSE  STA'
	DB	'RT_DATE (%04d-%02d-%02d), END_DATE (%04d-%02d-%02d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IJ@HMPGCLDM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@
CONST	SEGMENT
??_C@_0IJ@HMPGCLDM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@ DB '[Castle'
	DB	'Siege] CCastleSiege::CheckSync() - FIXED STATE:%d NOT FOUND I'
	DB	'N SCHEDULE (P.S.> Check File ''MuCastleData.dat'', ''commonse'
	DB	'rver.cfg'')', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@ICGFELJL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@
CONST	SEGMENT
??_C@_0HD@ICGFELJL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@ DB '[Castle'
	DB	'Siege] CCastleSiege::CheckSync() - iEVENT_END_DATE_NUM (%04d-'
	DB	'%02d-%02d) <= iTODAY_DATE_NUM (%04d-%02d-%02d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@MNHILAHH@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@
CONST	SEGMENT
??_C@_0EF@MNHILAHH@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@ DB '[Castle'
	DB	'Siege] CCastleSiege::CheckSync() - m_bFileDataLoadOK == FALSE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckSync@CCastleSiege@@QAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckSync@CCastleSiege@@QAEHXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CheckSync@CCastleSiege@@QAEHXZ$1
__ehfuncinfo$?CheckSync@CCastleSiege@@QAEHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CheckSync@CCastleSiege@@QAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?CheckSync@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
_pScheData_FR$185556 = -188				; size = 28
tv971 = -160						; size = 4
_ttSTime$185578 = -156					; size = 4
_iCastleInitState$ = -152				; size = 4
_this$GSCopy$ = -148					; size = 4
_ttSTime$185542 = -148					; size = 4
_bStateSetted$185555 = -144				; size = 4
_iTODAY_DATE_NUM$ = -144				; size = 4
_it$185562 = -140					; size = 4
_bSpecificStateExist$185526 = -140			; size = 4
_tmETime$185580 = -136					; size = 36
_tmSchduleDate$185577 = -100				; size = 16
_tmETime$185544 = -84					; size = 36
_pScheData_RR$185557 = -76				; size = 28
_tmSchduleDate$185570 = -48				; size = 16
_tmToDay$ = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CheckSync@CCastleSiege@@QAEHXZ PROC			; CCastleSiege::CheckSync, COMDAT
; _this$ = ecx

; 1186 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckSync@CCastleSiege@@QAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f1		 mov	 esi, ecx

; 1187 : 	if(m_bFileDataLoadOK == FALSE)

  00030	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00034	89 b5 6c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0003a	75 17		 jne	 SHORT $LN21@CheckSync

; 1188 : 	{
; 1189 : 		LogAddC(2,"[CastleSiege] CCastleSiege::CheckSync() - m_bFileDataLoadOK == FALSE");

  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@MNHILAHH@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@
  00041	6a 02		 push	 2
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00049	83 c4 08	 add	 esp, 8

; 1190 : 		return false;

  0004c	33 c0		 xor	 eax, eax
  0004e	e9 a7 05 00 00	 jmp	 $LN22@CheckSync
$LN21@CheckSync:

; 1191 : 	}
; 1192 : 
; 1193 : 	m_iCS_TICK_COUNT = GetTickCount();

  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00059	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 1194 : 
; 1195 : 	 _SYSTEMTIME tmToDay;
; 1196 : 
; 1197 : 	 GetLocalTime(&tmToDay);

  0005c	8d 45 e0	 lea	 eax, DWORD PTR _tmToDay$[ebp]
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 1198 : 	 int iTODAY_DATE_NUM = MACRO2(( MACRO1(tmToDay.wDay) | MACRO1(tmToDay.wMonth) << 8 ) & 0xFFFF ) | MACRO2(tmToDay.wYear) << 16;

  00066	0f b7 4d e0	 movzx	 ecx, WORD PTR _tmToDay$[ebp]
  0006a	0f b6 45 e2	 movzx	 eax, BYTE PTR _tmToDay$[ebp+2]
  0006e	0f b6 55 e6	 movzx	 edx, BYTE PTR _tmToDay$[ebp+6]
  00072	c1 e1 08	 shl	 ecx, 8
  00075	0b c1		 or	 eax, ecx
  00077	c1 e0 08	 shl	 eax, 8
  0007a	0b c2		 or	 eax, edx

; 1199 : 	 int iCastleInitState = 0;
; 1200 : 
; 1201 : 	 if(m_bFixCastleCycleStartDate != 0)

  0007c	83 7e 3c 00	 cmp	 DWORD PTR [esi+60], 0
  00080	89 85 70 ff ff
	ff		 mov	 DWORD PTR _iTODAY_DATE_NUM$[ebp], eax
  00086	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _iCastleInitState$[ebp], 0
  00090	74 5c		 je	 SHORT $LN20@CheckSync

; 1202 : 	 {
; 1203 : 		 m_tmStartDate.wYear = m_tmFixCastleCycleStartDate.wYear;

  00092	66 8b 46 40	 mov	 ax, WORD PTR [esi+64]

; 1204 : 		 m_tmStartDate.wMonth = m_tmFixCastleCycleStartDate.wMonth;

  00096	66 8b 4e 42	 mov	 cx, WORD PTR [esi+66]

; 1205 : 		 m_tmStartDate.wDay = m_tmFixCastleCycleStartDate.wDay;

  0009a	66 8b 56 46	 mov	 dx, WORD PTR [esi+70]
  0009e	66 89 8e b6 00
	00 00		 mov	 WORD PTR [esi+182], cx
  000a5	66 89 86 b4 00
	00 00		 mov	 WORD PTR [esi+180], ax
  000ac	66 89 96 ba 00
	00 00		 mov	 WORD PTR [esi+186], dx

; 1206 : 
; 1207 : 		 m_tmEndDate = m_tmStartDate;

  000b3	8b 8e b4 00 00
	00		 mov	 ecx, DWORD PTR [esi+180]
  000b9	8b 96 b8 00 00
	00		 mov	 edx, DWORD PTR [esi+184]
  000bf	8d 86 c4 00 00
	00		 lea	 eax, DWORD PTR [esi+196]
  000c5	89 08		 mov	 DWORD PTR [eax], ecx
  000c7	8b 8e bc 00 00
	00		 mov	 ecx, DWORD PTR [esi+188]

; 1208 : 		 GetNextDay(&m_tmEndDate,m_iCastleSiegeCycle,0,0,0);

  000cd	6a 00		 push	 0
  000cf	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000d2	8b 96 c0 00 00
	00		 mov	 edx, DWORD PTR [esi+192]
  000d8	6a 00		 push	 0
  000da	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000dd	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  000e0	6a 00		 push	 0
  000e2	51		 push	 ecx
  000e3	50		 push	 eax
  000e4	8b ce		 mov	 ecx, esi
  000e6	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  000e9	e8 00 00 00 00	 call	 ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay
$LN20@CheckSync:

; 1209 : 	 }
; 1210 : 
; 1211 : 	 int iEVENT_END_DATE_NUM = MACRO2(( MACRO1(m_tmEndDate.wDay) | MACRO1(m_tmEndDate.wMonth) << 8 ) & 0xFFFF ) | MACRO2(m_tmEndDate.wYear) << 16;

  000ee	0f b7 8e c6 00
	00 00		 movzx	 ecx, WORD PTR [esi+198]
  000f5	0f b7 96 c4 00
	00 00		 movzx	 edx, WORD PTR [esi+196]
  000fc	0f b7 be ca 00
	00 00		 movzx	 edi, WORD PTR [esi+202]
  00103	8b c1		 mov	 eax, ecx
  00105	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0010a	8b da		 mov	 ebx, edx
  0010c	c1 e3 08	 shl	 ebx, 8
  0010f	0b c3		 or	 eax, ebx
  00111	8b df		 mov	 ebx, edi
  00113	c1 e0 08	 shl	 eax, 8
  00116	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  0011c	0b c3		 or	 eax, ebx

; 1212 : 
; 1213 : 	 if(iEVENT_END_DATE_NUM <= iTODAY_DATE_NUM)

  0011e	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _iTODAY_DATE_NUM$[ebp]
  00124	7f 30		 jg	 SHORT $LN19@CheckSync

; 1214 : 	 {
; 1215 : 		 m_bFixCastleCycleStartDate = 0;
; 1216 : 		 LogAddC(2,"[CastleSiege] CCastleSiege::CheckSync() - iEVENT_END_DATE_NUM (%04d-%02d-%02d) <= iTODAY_DATE_NUM (%04d-%02d-%02d)",
; 1217 : 			 m_tmEndDate.wYear,m_tmEndDate.wMonth,m_tmEndDate.wDay,tmToDay.wYear,tmToDay.wMonth,tmToDay.wDay);

  00126	0f b7 45 e6	 movzx	 eax, WORD PTR _tmToDay$[ebp+6]
  0012a	50		 push	 eax
  0012b	0f b7 45 e2	 movzx	 eax, WORD PTR _tmToDay$[ebp+2]
  0012f	50		 push	 eax
  00130	0f b7 45 e0	 movzx	 eax, WORD PTR _tmToDay$[ebp]
  00134	50		 push	 eax
  00135	57		 push	 edi
  00136	51		 push	 ecx
  00137	52		 push	 edx
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@ICGFELJL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@
  0013d	6a 02		 push	 2
  0013f	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0014c	83 c4 20	 add	 esp, 32			; 00000020H

; 1218 : 		 return false;

  0014f	33 c0		 xor	 eax, eax
  00151	e9 a4 04 00 00	 jmp	 $LN22@CheckSync
$LN19@CheckSync:

; 1219 : 	 }
; 1220 : 
; 1221 : 	 if(m_bFixCastleCycleStartDate != 0)

  00156	33 ff		 xor	 edi, edi
  00158	39 7e 3c	 cmp	 DWORD PTR [esi+60], edi
  0015b	74 3e		 je	 SHORT $LN18@CheckSync

; 1222 : 	 {
; 1223 : 		 GS_GDReqSiegeDateChange(m_iMapSvrGroup,-1,m_tmStartDate.wYear,(BYTE)m_tmStartDate.wMonth,(BYTE)m_tmStartDate.wDay,
; 1224 : 			 m_tmEndDate.wYear,(BYTE)m_tmEndDate.wMonth,(BYTE)m_tmEndDate.wDay);

  0015d	0f b6 8e ca 00
	00 00		 movzx	 ecx, BYTE PTR [esi+202]
  00164	0f b6 96 c6 00
	00 00		 movzx	 edx, BYTE PTR [esi+198]
  0016b	0f b7 86 c4 00
	00 00		 movzx	 eax, WORD PTR [esi+196]
  00172	51		 push	 ecx
  00173	0f b6 8e b6 00
	00 00		 movzx	 ecx, BYTE PTR [esi+182]
  0017a	52		 push	 edx
  0017b	0f b7 96 b4 00
	00 00		 movzx	 edx, WORD PTR [esi+180]
  00182	50		 push	 eax
  00183	0f b6 86 ba 00
	00 00		 movzx	 eax, BYTE PTR [esi+186]
  0018a	50		 push	 eax
  0018b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0018e	51		 push	 ecx
  0018f	52		 push	 edx
  00190	6a ff		 push	 -1
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 ?GS_GDReqSiegeDateChange@@YAXHHGEEGEE@Z ; GS_GDReqSiegeDateChange
  00198	83 c4 20	 add	 esp, 32			; 00000020H
$LN18@CheckSync:

; 1225 : 	 }
; 1226 : 
; 1227 : 	 if(m_bFixCastleStateStartDate != 0)

  0019b	39 7e 54	 cmp	 DWORD PTR [esi+84], edi
  0019e	0f 84 f9 00 00
	00		 je	 $LN12@CheckSync

; 1228 : 	 {
; 1229 : 		 int bSpecificStateExist = FALSE;
; 1230 : 
; 1231 : 		 EnterCriticalSection(&m_critScheduleData);

  001a4	8d 9e 10 01 00
	00		 lea	 ebx, DWORD PTR [esi+272]
  001aa	53		 push	 ebx
  001ab	89 bd 74 ff ff
	ff		 mov	 DWORD PTR _bSpecificStateExist$185526[ebp], edi
  001b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1232 : 
; 1233 : 		 vector<_CS_SCHEDULE_DATA>::iterator it = m_vtScheduleData.begin();

  001b7	8b 86 00 01 00
	00		 mov	 eax, DWORD PTR [esi+256]

; 1234 : 
; 1235 : 		 while(it != m_vtScheduleData.end())

  001bd	3b 86 04 01 00
	00		 cmp	 eax, DWORD PTR [esi+260]
  001c3	74 1f		 je	 SHORT $LN15@CheckSync
  001c5	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
$LL16@CheckSync:

; 1236 : 		 {
; 1237 : 			 _CS_SCHEDULE_DATA & pScheduleData = (_CS_SCHEDULE_DATA &)*it;
; 1238 : 
; 1239 : 			 if(pScheduleData.m_iSTATE == m_iFixCastleSpecificState)

  001c8	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  001cb	74 0d		 je	 SHORT $LN130@CheckSync

; 1242 : 				 break;
; 1243 : 			 }
; 1244 : 
; 1245 : 			 it++;

  001cd	83 c0 1c	 add	 eax, 28			; 0000001cH
  001d0	3b 86 04 01 00
	00		 cmp	 eax, DWORD PTR [esi+260]
  001d6	75 f0		 jne	 SHORT $LL16@CheckSync

; 1313 : 
; 1314 : 			__int64 i64ScheduleDateNum;
; 1315 : 			__int64 i64ToDayDateNum;
; 1316 : 
; 1317 : 			i64ScheduleDateNum = (MACRO2(tmSchduleDate.wMinute) | MACRO2(tmSchduleDate.wHour) << 16) | ((__int64)(MACRO2(( MACRO1(tmSchduleDate.wDay) | MACRO1(tmSchduleDate.wMonth) << 8 ) & 0xFFFF ) | MACRO2(tmSchduleDate.wYear) << 16) << 0x20);
; 1318 : 			i64ToDayDateNum = (MACRO2(tmToDay.wMinute) | MACRO2(tmToDay.wHour) << 16) | ((__int64)(MACRO2(( MACRO1(tmToDay.wDay) | MACRO1(tmToDay.wMonth) << 8 ) & 0xFFFF ) | MACRO2(tmToDay.wYear) << 16) << 0x20);
; 1319 : 
; 1320 : 			 if(i64ScheduleDateNum > i64ToDayDateNum)

  001d8	eb 0a		 jmp	 SHORT $LN15@CheckSync
$LN130@CheckSync:

; 1240 : 			 {
; 1241 : 				 bSpecificStateExist = TRUE;

  001da	c7 85 74 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _bSpecificStateExist$185526[ebp], 1
$LN15@CheckSync:

; 1246 : 		 }
; 1247 : 		 LeaveCriticalSection(&m_critScheduleData);

  001e4	53		 push	 ebx
  001e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 1248 : 
; 1249 : 		 if(bSpecificStateExist != FALSE)

  001eb	39 bd 74 ff ff
	ff		 cmp	 DWORD PTR _bSpecificStateExist$185526[ebp], edi
  001f1	0f 84 8f 00 00
	00		 je	 $LN13@CheckSync

; 1250 : 		 {
; 1251 : 			 long ttSTime;
; 1252 : 			 long ttETime;
; 1253 : 			 tm tmETime;
; 1254 : 			 double dResultSecond;
; 1255 : 			 memset(&tmETime,0x00,sizeof(tmETime));
; 1256 : 
; 1257 : 			 tmETime.tm_year = m_tmFixCastleStateStartDate.wYear - 1900;

  001f7	0f b7 4e 58	 movzx	 ecx, WORD PTR [esi+88]

; 1258 : 			 tmETime.tm_mon = m_tmFixCastleStateStartDate.wMonth - 1;

  001fb	0f b7 56 5a	 movzx	 edx, WORD PTR [esi+90]
  001ff	33 c0		 xor	 eax, eax
  00201	89 45 b0	 mov	 DWORD PTR _tmETime$185544[ebp+4], eax
  00204	89 45 b4	 mov	 DWORD PTR _tmETime$185544[ebp+8], eax
  00207	89 45 b8	 mov	 DWORD PTR _tmETime$185544[ebp+12], eax
  0020a	89 45 bc	 mov	 DWORD PTR _tmETime$185544[ebp+16], eax
  0020d	89 45 c0	 mov	 DWORD PTR _tmETime$185544[ebp+20], eax
  00210	89 45 ac	 mov	 DWORD PTR _tmETime$185544[ebp], eax
  00213	89 45 c4	 mov	 DWORD PTR _tmETime$185544[ebp+24], eax
  00216	89 45 c8	 mov	 DWORD PTR _tmETime$185544[ebp+28], eax
  00219	89 45 cc	 mov	 DWORD PTR _tmETime$185544[ebp+32], eax

; 1259 : 			 tmETime.tm_mday = m_tmFixCastleStateStartDate.wDay;

  0021c	0f b7 46 5e	 movzx	 eax, WORD PTR [esi+94]
  00220	81 e9 6c 07 00
	00		 sub	 ecx, 1900		; 0000076cH
  00226	4a		 dec	 edx
  00227	89 4d c0	 mov	 DWORD PTR _tmETime$185544[ebp+20], ecx

; 1260 : 			 tmETime.tm_hour = m_tmFixCastleStateStartDate.wHour;

  0022a	0f b7 4e 60	 movzx	 ecx, WORD PTR [esi+96]
  0022e	89 55 bc	 mov	 DWORD PTR _tmETime$185544[ebp+16], edx

; 1261 : 			 tmETime.tm_min = m_tmFixCastleStateStartDate.wMinute;

  00231	0f b7 56 62	 movzx	 edx, WORD PTR [esi+98]
  00235	89 45 b8	 mov	 DWORD PTR _tmETime$185544[ebp+12], eax

; 1262 : 
; 1263 : 			 time((time_t *)&ttSTime);

  00238	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _ttSTime$185542[ebp]
  0023e	50		 push	 eax
  0023f	89 4d b4	 mov	 DWORD PTR _tmETime$185544[ebp+8], ecx
  00242	89 55 b0	 mov	 DWORD PTR _tmETime$185544[ebp+4], edx
  00245	e8 00 00 00 00	 call	 __time64

; 1264 : 			 ttETime = (long)mktime(&tmETime);

  0024a	8d 4d ac	 lea	 ecx, DWORD PTR _tmETime$185544[ebp]
  0024d	51		 push	 ecx
  0024e	e8 00 00 00 00	 call	 __mktime64
  00253	8b c8		 mov	 ecx, eax

; 1265 : 
; 1266 : 			 dResultSecond = difftime(ttETime,ttSTime);

  00255	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ttSTime$185542[ebp]
  0025b	99		 cdq
  0025c	52		 push	 edx
  0025d	50		 push	 eax

; 1267 : 
; 1268 : 			 m_iCS_REMAIN_MSEC = (int)(dResultSecond * 1000.0);

  0025e	8b c1		 mov	 eax, ecx
  00260	99		 cdq
  00261	52		 push	 edx
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 __difftime64
  00268	83 c4 18	 add	 esp, 24			; 00000018H
  0026b	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@408f400000000000
  00271	e8 00 00 00 00	 call	 __ftol2_sse
  00276	89 46 68	 mov	 DWORD PTR [esi+104], eax

; 1269 : 			 m_iCastleSiegeState = m_iFixCastleSpecificState -1;

  00279	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  0027c	48		 dec	 eax
  0027d	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 1270 : 			 SetState(m_iCastleSiegeState,0);

  00280	57		 push	 edi

; 1271 : 			 return true;

  00281	e9 67 03 00 00	 jmp	 $LN140@CheckSync
$LN13@CheckSync:

; 1272 : 		 }
; 1273 : 		 else
; 1274 : 		 {
; 1275 : 			 LogAddC(2,"[CastleSiege] CCastleSiege::CheckSync() - FIXED STATE:%d NOT FOUND IN SCHEDULE (P.S.> Check File 'MuCastleData.dat', 'commonserver.cfg')",m_iFixCastleSpecificState);

  00286	8b 56 50	 mov	 edx, DWORD PTR [esi+80]
  00289	52		 push	 edx
  0028a	68 00 00 00 00	 push	 OFFSET ??_C@_0IJ@HMPGCLDM@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@
  0028f	6a 02		 push	 2
  00291	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00297	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1276 : 			 m_bFixCastleStateStartDate = 0;

  0029a	89 7e 54	 mov	 DWORD PTR [esi+84], edi
$LN12@CheckSync:

; 1277 : 		 }
; 1278 : 	 }
; 1279 : 
; 1280 : 	 if(m_btIsSiegeEnded)

  0029d	80 be d5 00 00
	00 00		 cmp	 BYTE PTR [esi+213], 0
  002a4	74 09		 je	 SHORT $LN11@CheckSync

; 1281 : 	 {
; 1282 : 		 SetState(CASTLESIEGE_STATE_ENDSIEGE,1);

  002a6	6a 01		 push	 1
  002a8	6a 08		 push	 8

; 1283 : 		 return true;

  002aa	e9 3f 03 00 00	 jmp	 $LN141@CheckSync
$LN11@CheckSync:

; 1284 : 	 }
; 1285 : 
; 1286 : 	 int iEVENT_START_DATE_NUM = MACRO2(( MACRO1(m_tmStartDate.wDay) | MACRO1(m_tmStartDate.wMonth) << 8 ) & 0xFFFF ) | MACRO2(m_tmStartDate.wYear) << 16;

  002af	0f b7 86 b6 00
	00 00		 movzx	 eax, WORD PTR [esi+182]
  002b6	0f b7 8e b4 00
	00 00		 movzx	 ecx, WORD PTR [esi+180]
  002bd	0f b7 96 ba 00
	00 00		 movzx	 edx, WORD PTR [esi+186]
  002c4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002c9	c1 e1 08	 shl	 ecx, 8
  002cc	0b c1		 or	 eax, ecx
  002ce	c1 e0 08	 shl	 eax, 8
  002d1	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  002d7	0b c2		 or	 eax, edx

; 1287 : 
; 1288 : 	 if(iEVENT_START_DATE_NUM > iTODAY_DATE_NUM)

  002d9	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _iTODAY_DATE_NUM$[ebp]
  002df	7e 08		 jle	 SHORT $LN10@CheckSync

; 1289 : 	 {
; 1290 : 		 SetState(CASTLESIEGE_STATE_IDLE_1,1);

  002e1	6a 01		 push	 1
  002e3	57		 push	 edi

; 1291 : 		 return true;

  002e4	e9 05 03 00 00	 jmp	 $LN141@CheckSync
$LN10@CheckSync:

; 1292 : 	 }
; 1293 : 	 else
; 1294 : 	 {
; 1295 : 		 int bStateSetted = 0;
; 1296 : 		_CS_SCHEDULE_DATA pScheData_FR;

  002e9	83 c9 ff	 or	 ecx, -1
  002ec	33 db		 xor	 ebx, ebx
  002ee	b8 00 00 00 00	 mov	 eax, OFFSET ??_7_CS_SCHEDULE_DATA@@6B@
  002f3	89 9d 70 ff ff
	ff		 mov	 DWORD PTR _bStateSetted$185555[ebp], ebx
  002f9	89 85 44 ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp], eax
  002ff	89 bd 48 ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+4], edi
  00305	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+8], ecx
  0030b	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+12], ecx
  00311	89 8d 54 ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+16], ecx
  00317	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+20], ecx
  0031d	89 bd 5c ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+24], edi
  00323	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi

; 1297 : 		_CS_SCHEDULE_DATA pScheData_RR;

  00326	89 45 b4	 mov	 DWORD PTR _pScheData_RR$185557[ebp], eax
  00329	89 7d b8	 mov	 DWORD PTR _pScheData_RR$185557[ebp+4], edi
  0032c	89 4d bc	 mov	 DWORD PTR _pScheData_RR$185557[ebp+8], ecx
  0032f	89 4d c0	 mov	 DWORD PTR _pScheData_RR$185557[ebp+12], ecx
  00332	89 4d c4	 mov	 DWORD PTR _pScheData_RR$185557[ebp+16], ecx
  00335	89 4d c8	 mov	 DWORD PTR _pScheData_RR$185557[ebp+20], ecx
  00338	89 7d cc	 mov	 DWORD PTR _pScheData_RR$185557[ebp+24], edi

; 1298 : 		vector<_CS_SCHEDULE_DATA>::iterator it;
; 1299 : 
; 1300 : 		 EnterCriticalSection(&m_critScheduleData);

  0033b	8d 86 10 01 00
	00		 lea	 eax, DWORD PTR [esi+272]
  00341	50		 push	 eax
  00342	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00346	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv971[ebp], eax
  0034c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1301 : 
; 1302 : 		 it = m_vtScheduleData.begin();

  00352	8b be 00 01 00
	00		 mov	 edi, DWORD PTR [esi+256]
  00358	89 bd 74 ff ff
	ff		 mov	 DWORD PTR _it$185562[ebp], edi

; 1303 : 
; 1304 : 		 while(it != m_vtScheduleData.end())

  0035e	3b be 04 01 00
	00		 cmp	 edi, DWORD PTR [esi+260]
  00364	0f 84 35 01 00
	00		 je	 $LN7@CheckSync
$LN8@CheckSync:

; 1305 : 		 {
; 1306 : 			_CS_SCHEDULE_DATA & pScheduleData = (_CS_SCHEDULE_DATA &)*it;
; 1307 : 			_SYSTEMTIME tmSchduleDate;
; 1308 : 
; 1309 : 			tmSchduleDate = m_tmStartDate;

  0036a	8b 8e b8 00 00
	00		 mov	 ecx, DWORD PTR [esi+184]
  00370	8b 96 bc 00 00
	00		 mov	 edx, DWORD PTR [esi+188]
  00376	8b 86 b4 00 00
	00		 mov	 eax, DWORD PTR [esi+180]

; 1310 : 			GetNextDay(&tmSchduleDate,pScheduleData.m_iADD_DAY,0,0,0);

  0037c	6a 00		 push	 0
  0037e	6a 00		 push	 0
  00380	89 4d d4	 mov	 DWORD PTR _tmSchduleDate$185570[ebp+4], ecx
  00383	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00386	6a 00		 push	 0
  00388	89 55 d8	 mov	 DWORD PTR _tmSchduleDate$185570[ebp+8], edx
  0038b	51		 push	 ecx
  0038c	89 45 d0	 mov	 DWORD PTR _tmSchduleDate$185570[ebp], eax
  0038f	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  00395	8d 55 d0	 lea	 edx, DWORD PTR _tmSchduleDate$185570[ebp]
  00398	52		 push	 edx
  00399	8b ce		 mov	 ecx, esi
  0039b	89 45 dc	 mov	 DWORD PTR _tmSchduleDate$185570[ebp+12], eax
  0039e	e8 00 00 00 00	 call	 ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay

; 1311 : 			tmSchduleDate.wHour = pScheduleData.m_iADD_HOUR;

  003a3	66 8b 47 10	 mov	 ax, WORD PTR [edi+16]

; 1312 : 			tmSchduleDate.wMinute = pScheduleData.m_iADD_MIN;

  003a7	66 8b 4f 14	 mov	 cx, WORD PTR [edi+20]

; 1313 : 
; 1314 : 			__int64 i64ScheduleDateNum;
; 1315 : 			__int64 i64ToDayDateNum;
; 1316 : 
; 1317 : 			i64ScheduleDateNum = (MACRO2(tmSchduleDate.wMinute) | MACRO2(tmSchduleDate.wHour) << 16) | ((__int64)(MACRO2(( MACRO1(tmSchduleDate.wDay) | MACRO1(tmSchduleDate.wMonth) << 8 ) & 0xFFFF ) | MACRO2(tmSchduleDate.wYear) << 16) << 0x20);
; 1318 : 			i64ToDayDateNum = (MACRO2(tmToDay.wMinute) | MACRO2(tmToDay.wHour) << 16) | ((__int64)(MACRO2(( MACRO1(tmToDay.wDay) | MACRO1(tmToDay.wMonth) << 8 ) & 0xFFFF ) | MACRO2(tmToDay.wYear) << 16) << 0x20);
; 1319 : 
; 1320 : 			 if(i64ScheduleDateNum > i64ToDayDateNum)

  003ab	0f b7 55 e0	 movzx	 edx, WORD PTR _tmToDay$[ebp]
  003af	66 89 45 d8	 mov	 WORD PTR _tmSchduleDate$185570[ebp+8], ax
  003b3	0f b6 45 e2	 movzx	 eax, BYTE PTR _tmToDay$[ebp+2]
  003b7	c1 e2 08	 shl	 edx, 8
  003ba	0b c2		 or	 eax, edx
  003bc	c1 e0 08	 shl	 eax, 8
  003bf	66 89 4d da	 mov	 WORD PTR _tmSchduleDate$185570[ebp+10], cx
  003c3	0f b6 4d e6	 movzx	 ecx, BYTE PTR _tmToDay$[ebp+6]
  003c7	0b c1		 or	 eax, ecx
  003c9	0f b7 4d d0	 movzx	 ecx, WORD PTR _tmSchduleDate$185570[ebp]
  003cd	99		 cdq
  003ce	0f b7 55 ea	 movzx	 edx, WORD PTR _tmToDay$[ebp+10]
  003d2	8b f0		 mov	 esi, eax
  003d4	0f b7 45 e8	 movzx	 eax, WORD PTR _tmToDay$[ebp+8]
  003d8	c1 e0 10	 shl	 eax, 16			; 00000010H
  003db	0b c2		 or	 eax, edx
  003dd	99		 cdq
  003de	33 db		 xor	 ebx, ebx
  003e0	0b d8		 or	 ebx, eax
  003e2	0f b6 45 d2	 movzx	 eax, BYTE PTR _tmSchduleDate$185570[ebp+2]
  003e6	0b f2		 or	 esi, edx
  003e8	0f b6 55 d6	 movzx	 edx, BYTE PTR _tmSchduleDate$185570[ebp+6]
  003ec	c1 e1 08	 shl	 ecx, 8
  003ef	0b c1		 or	 eax, ecx
  003f1	c1 e0 08	 shl	 eax, 8
  003f4	0b c2		 or	 eax, edx
  003f6	99		 cdq
  003f7	0f b7 55 da	 movzx	 edx, WORD PTR _tmSchduleDate$185570[ebp+10]
  003fb	8b c8		 mov	 ecx, eax
  003fd	0f b7 45 d8	 movzx	 eax, WORD PTR _tmSchduleDate$185570[ebp+8]
  00401	c1 e0 10	 shl	 eax, 16			; 00000010H
  00404	0b c2		 or	 eax, edx
  00406	99		 cdq
  00407	33 ff		 xor	 edi, edi
  00409	0b ca		 or	 ecx, edx
  0040b	0b f8		 or	 edi, eax
  0040d	3b ce		 cmp	 ecx, esi
  0040f	7f 6b		 jg	 SHORT $LN131@CheckSync
  00411	7c 04		 jl	 SHORT $LN134@CheckSync
  00413	3b fb		 cmp	 edi, ebx
  00415	77 65		 ja	 SHORT $LN131@CheckSync
$LN134@CheckSync:

; 1325 : 				 break;
; 1326 : 			 }
; 1327 : 
; 1328 : 			 iCastleInitState = pScheduleData.m_iSTATE;

  00417	8b bd 74 ff ff
	ff		 mov	 edi, DWORD PTR _it$185562[ebp]
  0041d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 1329 : 			 pScheData_FR = pScheduleData;

  00420	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00423	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00426	8b b5 6c ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0042c	89 85 68 ff ff
	ff		 mov	 DWORD PTR _iCastleInitState$[ebp], eax
  00432	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+4], ecx
  00438	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0043b	89 85 4c ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+8], eax
  00441	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00444	89 95 50 ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+12], edx
  0044a	8b 57 18	 mov	 edx, DWORD PTR [edi+24]

; 1330 : 
; 1331 : 			 it++;

  0044d	83 c7 1c	 add	 edi, 28			; 0000001cH
  00450	89 85 54 ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+16], eax
  00456	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+20], ecx
  0045c	89 95 5c ff ff
	ff		 mov	 DWORD PTR _pScheData_FR$185556[ebp+24], edx
  00462	89 bd 74 ff ff
	ff		 mov	 DWORD PTR _it$185562[ebp], edi
  00468	3b be 04 01 00
	00		 cmp	 edi, DWORD PTR [esi+260]
  0046e	0f 85 f6 fe ff
	ff		 jne	 $LN8@CheckSync

; 1313 : 
; 1314 : 			__int64 i64ScheduleDateNum;
; 1315 : 			__int64 i64ToDayDateNum;
; 1316 : 
; 1317 : 			i64ScheduleDateNum = (MACRO2(tmSchduleDate.wMinute) | MACRO2(tmSchduleDate.wHour) << 16) | ((__int64)(MACRO2(( MACRO1(tmSchduleDate.wDay) | MACRO1(tmSchduleDate.wMonth) << 8 ) & 0xFFFF ) | MACRO2(tmSchduleDate.wYear) << 16) << 0x20);
; 1318 : 			i64ToDayDateNum = (MACRO2(tmToDay.wMinute) | MACRO2(tmToDay.wHour) << 16) | ((__int64)(MACRO2(( MACRO1(tmToDay.wDay) | MACRO1(tmToDay.wMonth) << 8 ) & 0xFFFF ) | MACRO2(tmToDay.wYear) << 16) << 0x20);
; 1319 : 
; 1320 : 			 if(i64ScheduleDateNum > i64ToDayDateNum)

  00474	8b 9d 70 ff ff
	ff		 mov	 ebx, DWORD PTR _bStateSetted$185555[ebp]
  0047a	eb 23		 jmp	 SHORT $LN7@CheckSync
$LN131@CheckSync:

; 1321 : 			 {
; 1322 : 				 bStateSetted = 1;
; 1323 : 				 pScheData_RR = pScheduleData;

  0047c	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _it$185562[ebp]
  00482	50		 push	 eax
  00483	8d 4d b4	 lea	 ecx, DWORD PTR _pScheData_RR$185557[ebp]
  00486	bb 01 00 00 00	 mov	 ebx, 1
  0048b	e8 00 00 00 00	 call	 ??4_CS_SCHEDULE_DATA@@QAEAAU0@ABU0@@Z

; 1324 : 				 m_iCastleSiegeState = iCastleInitState;

  00490	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _iCastleInitState$[ebp]
  00496	8b b5 6c ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0049c	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
$LN7@CheckSync:

; 1332 : 		 }
; 1333 : 		 LeaveCriticalSection(&m_critScheduleData);

  0049f	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR tv971[ebp]
  004a5	52		 push	 edx
  004a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 1334 : 
; 1335 : 
; 1336 : 		 _SYSTEMTIME tmSchduleDate;
; 1337 : 	
; 1338 : 		long ttSTime;
; 1339 : 		long ttETime;
; 1340 : 		struct tm tmETime;
; 1341 : 		double dResultSecond;
; 1342 : 
; 1343 : 		if(bStateSetted == FALSE)

  004ac	85 db		 test	 ebx, ebx
  004ae	75 44		 jne	 SHORT $LN5@CheckSync

; 1344 : 		{
; 1345 : 			MsgBox("[CastleSiege] CCastleSiege::CheckSync() - bStateSetted == FALSE  START_DATE (%04d-%02d-%02d), END_DATE (%04d-%02d-%02d)",
; 1346 : 				m_tmStartDate.wYear,m_tmStartDate.wMonth,m_tmStartDate.wDay,m_tmEndDate.wYear,m_tmEndDate.wMonth,m_tmEndDate.wDay);

  004b0	0f b7 86 ca 00
	00 00		 movzx	 eax, WORD PTR [esi+202]
  004b7	0f b7 8e c6 00
	00 00		 movzx	 ecx, WORD PTR [esi+198]
  004be	0f b7 96 c4 00
	00 00		 movzx	 edx, WORD PTR [esi+196]
  004c5	50		 push	 eax
  004c6	0f b7 86 ba 00
	00 00		 movzx	 eax, WORD PTR [esi+186]
  004cd	51		 push	 ecx
  004ce	0f b7 8e b6 00
	00 00		 movzx	 ecx, WORD PTR [esi+182]
  004d5	52		 push	 edx
  004d6	0f b7 96 b4 00
	00 00		 movzx	 edx, WORD PTR [esi+180]
  004dd	50		 push	 eax
  004de	51		 push	 ecx
  004df	52		 push	 edx
  004e0	68 00 00 00 00	 push	 OFFSET ??_C@_0HI@GJDPKHPL@?$FLCastleSiege?$FN?5CCastleSiege?3?3Chec@
  004e5	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  004ea	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1347 : 			return false;

  004ed	33 c0		 xor	 eax, eax
  004ef	e9 06 01 00 00	 jmp	 $LN22@CheckSync
$LN5@CheckSync:

; 1348 : 		}
; 1349 : 
; 1350 : 		tmSchduleDate = m_tmStartDate;

  004f4	8b 8e b8 00 00
	00		 mov	 ecx, DWORD PTR [esi+184]
  004fa	8b 96 bc 00 00
	00		 mov	 edx, DWORD PTR [esi+188]
  00500	8b 86 b4 00 00
	00		 mov	 eax, DWORD PTR [esi+180]

; 1351 : 		GetNextDay(&tmSchduleDate,pScheData_RR.m_iADD_DAY,0,0,0);

  00506	6a 00		 push	 0
  00508	6a 00		 push	 0
  0050a	89 4d a0	 mov	 DWORD PTR _tmSchduleDate$185577[ebp+4], ecx
  0050d	8b 4d c0	 mov	 ecx, DWORD PTR _pScheData_RR$185557[ebp+12]
  00510	6a 00		 push	 0
  00512	89 55 a4	 mov	 DWORD PTR _tmSchduleDate$185577[ebp+8], edx
  00515	51		 push	 ecx
  00516	89 45 9c	 mov	 DWORD PTR _tmSchduleDate$185577[ebp], eax
  00519	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  0051f	8d 55 9c	 lea	 edx, DWORD PTR _tmSchduleDate$185577[ebp]
  00522	52		 push	 edx
  00523	8b ce		 mov	 ecx, esi
  00525	89 45 a8	 mov	 DWORD PTR _tmSchduleDate$185577[ebp+12], eax
  00528	e8 00 00 00 00	 call	 ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay

; 1352 : 		tmSchduleDate.wHour = pScheData_RR.m_iADD_HOUR;
; 1353 : 		tmSchduleDate.wMinute = pScheData_RR.m_iADD_MIN;
; 1354 : 
; 1355 : 		memset(&tmETime,0x00,sizeof(tmETime));

  0052d	33 c0		 xor	 eax, eax
  0052f	8b 55 c4	 mov	 edx, DWORD PTR _pScheData_RR$185557[ebp+16]
  00532	8b 4d c8	 mov	 ecx, DWORD PTR _pScheData_RR$185557[ebp+20]
  00535	89 85 7c ff ff
	ff		 mov	 DWORD PTR _tmETime$185580[ebp+4], eax
  0053b	89 45 80	 mov	 DWORD PTR _tmETime$185580[ebp+8], eax
  0053e	89 45 84	 mov	 DWORD PTR _tmETime$185580[ebp+12], eax
  00541	89 45 88	 mov	 DWORD PTR _tmETime$185580[ebp+16], eax
  00544	89 45 8c	 mov	 DWORD PTR _tmETime$185580[ebp+20], eax
  00547	89 85 78 ff ff
	ff		 mov	 DWORD PTR _tmETime$185580[ebp], eax
  0054d	89 45 90	 mov	 DWORD PTR _tmETime$185580[ebp+24], eax
  00550	89 45 94	 mov	 DWORD PTR _tmETime$185580[ebp+28], eax
  00553	89 45 98	 mov	 DWORD PTR _tmETime$185580[ebp+32], eax

; 1356 : 
; 1357 : 		tmETime.tm_year = tmSchduleDate.wYear - 1900;

  00556	0f b7 45 9c	 movzx	 eax, WORD PTR _tmSchduleDate$185577[ebp]
  0055a	2d 6c 07 00 00	 sub	 eax, 1900		; 0000076cH
  0055f	89 45 8c	 mov	 DWORD PTR _tmETime$185580[ebp+20], eax

; 1358 : 		tmETime.tm_mon = tmSchduleDate.wMonth - 1;

  00562	0f b7 45 9e	 movzx	 eax, WORD PTR _tmSchduleDate$185577[ebp+2]
  00566	48		 dec	 eax
  00567	89 45 88	 mov	 DWORD PTR _tmETime$185580[ebp+16], eax

; 1359 : 		tmETime.tm_mday = tmSchduleDate.wDay;

  0056a	0f b7 45 a2	 movzx	 eax, WORD PTR _tmSchduleDate$185577[ebp+6]
  0056e	66 89 55 a4	 mov	 WORD PTR _tmSchduleDate$185577[ebp+8], dx
  00572	89 45 84	 mov	 DWORD PTR _tmETime$185580[ebp+12], eax

; 1360 : 		tmETime.tm_hour = tmSchduleDate.wHour;
; 1361 : 		tmETime.tm_min = tmSchduleDate.wMinute;

  00575	0f b7 c1	 movzx	 eax, cx
  00578	66 89 4d a6	 mov	 WORD PTR _tmSchduleDate$185577[ebp+10], cx
  0057c	0f b7 d2	 movzx	 edx, dx

; 1362 : 
; 1363 : 		time((time_t*)&ttSTime);

  0057f	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _ttSTime$185578[ebp]
  00585	51		 push	 ecx
  00586	89 55 80	 mov	 DWORD PTR _tmETime$185580[ebp+8], edx
  00589	89 85 7c ff ff
	ff		 mov	 DWORD PTR _tmETime$185580[ebp+4], eax
  0058f	e8 00 00 00 00	 call	 __time64

; 1364 : 		ttETime = (long)mktime(&tmETime);

  00594	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _tmETime$185580[ebp]
  0059a	52		 push	 edx
  0059b	e8 00 00 00 00	 call	 __mktime64
  005a0	8b c8		 mov	 ecx, eax

; 1365 : 
; 1366 : 		dResultSecond = difftime(ttETime,ttSTime);
; 1367 : 		m_iCS_REMAIN_MSEC = (int)(dResultSecond * 1000.0);

  005a2	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _ttSTime$185578[ebp]
  005a8	99		 cdq
  005a9	52		 push	 edx
  005aa	50		 push	 eax
  005ab	8b c1		 mov	 eax, ecx
  005ad	99		 cdq
  005ae	52		 push	 edx
  005af	50		 push	 eax
  005b0	e8 00 00 00 00	 call	 _difftime
  005b5	83 c4 18	 add	 esp, 24			; 00000018H
  005b8	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@408f400000000000
  005be	e8 00 00 00 00	 call	 __ftol2_sse

; 1368 : 
; 1369 : 		if(m_iCastleSiegeState == CASTLESIEGE_STATE_STARTSIEGE)

  005c3	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  005c6	89 46 68	 mov	 DWORD PTR [esi+104], eax
  005c9	83 f9 07	 cmp	 ecx, 7

; 1370 : 		{
; 1371 : 			m_iCastleSiegeState = CASTLESIEGE_STATE_READYSIEGE;
; 1372 : 			m_iCS_REMAIN_MSEC = 900000;

  005cc	74 0c		 je	 SHORT $LN142@CheckSync

; 1373 : 		}
; 1374 : 		else if(m_iCastleSiegeState == CASTLESIEGE_STATE_READYSIEGE)

  005ce	83 f9 06	 cmp	 ecx, 6
  005d1	75 15		 jne	 SHORT $LN1@CheckSync

; 1375 : 		{
; 1376 : 			if(m_iCS_REMAIN_MSEC < 900000)

  005d3	3d a0 bb 0d 00	 cmp	 eax, 900000		; 000dbba0H
  005d8	7d 0e		 jge	 SHORT $LN1@CheckSync
$LN142@CheckSync:

; 1377 : 			{
; 1378 : 				m_iCastleSiegeState = CASTLESIEGE_STATE_READYSIEGE;
; 1379 : 				m_iCS_REMAIN_MSEC = 900000;

  005da	c7 46 68 a0 bb
	0d 00		 mov	 DWORD PTR [esi+104], 900000 ; 000dbba0H
  005e1	c7 46 28 06 00
	00 00		 mov	 DWORD PTR [esi+40], 6
$LN1@CheckSync:

; 1380 : 			}
; 1381 : 		}
; 1382 : 
; 1383 : 		SetState(m_iCastleSiegeState,0);

  005e8	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  005eb	6a 00		 push	 0
$LN140@CheckSync:
  005ed	50		 push	 eax
$LN141@CheckSync:
  005ee	8b ce		 mov	 ecx, esi
  005f0	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState

; 1384 : 	 }
; 1385 : 
; 1386 : return true;

  005f5	b8 01 00 00 00	 mov	 eax, 1
$LN22@CheckSync:

; 1387 : }

  005fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  005fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00604	59		 pop	 ecx
  00605	5f		 pop	 edi
  00606	5e		 pop	 esi
  00607	5b		 pop	 ebx
  00608	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0060b	33 cd		 xor	 ecx, ebp
  0060d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00612	8b e5		 mov	 esp, ebp
  00614	5d		 pop	 ebp
  00615	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckSync@CCastleSiege@@QAEHXZ$0:
  00000	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _pScheData_FR$185556[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1_CS_SCHEDULE_DATA@@UAE@XZ ; _CS_SCHEDULE_DATA::~_CS_SCHEDULE_DATA
__unwindfunclet$?CheckSync@CCastleSiege@@QAEHXZ$1:
  0000b	8d 4d b4	 lea	 ecx, DWORD PTR _pScheData_RR$185557[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1_CS_SCHEDULE_DATA@@UAE@XZ ; _CS_SCHEDULE_DATA::~_CS_SCHEDULE_DATA
__ehhandler$?CheckSync@CCastleSiege@@QAEHXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a 40 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-192]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckSync@CCastleSiege@@QAEHXZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckSync@CCastleSiege@@QAEHXZ ENDP			; CCastleSiege::CheckSync
PUBLIC	??_C@_0CJ@LNHAOIAL@?$FLCastleSiege?$FN?$FLREG?5Mark?5Count?$FN?5?9?5@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z ; CCastleSiege::SetCalcRegGuildList
;	COMDAT ??_C@_0CJ@LNHAOIAL@?$FLCastleSiege?$FN?$FLREG?5Mark?5Count?$FN?5?9?5@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_0CJ@LNHAOIAL@?$FLCastleSiege?$FN?$FLREG?5Mark?5Count?$FN?5?9?5@ DB '['
	DB	'CastleSiege][REG Mark Count] - [%s][%d]', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$6
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z
_TEXT	SEGMENT
_vtRegGuildScore$ = -2236				; size = 16
tv3072 = -2220						; size = 4
_iGCNT$ = -2216						; size = 4
_this$GSCopy$ = -2212					; size = 4
tv1995 = -2208						; size = 4
$T241244 = -2208					; size = 4
_iGUILD_COUNT$ = -2208					; size = 4
_strGuildName$189155 = -2204				; size = 28
_pTotalGuildData$189101 = -2196				; size = 20
_pTotalGuildData$188784 = -2196				; size = 20
_pRegGuildData$188639 = -2176				; size = 64
$T189146 = -2160					; size = 48
$T189116 = -2160					; size = 48
$T188939 = -2160					; size = 48
_cBUFFER$ = -2112					; size = 2080
_szGuildName$188640 = -32				; size = 16
$T239885 = -24						; size = 8
$T239882 = -24						; size = 8
$T239881 = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpMsg$ = 8						; size = 4
_iCOUNT$ = 12						; size = 4
?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z PROC ; CCastleSiege::SetCalcRegGuildList, COMDAT
; _this$ = ecx

; 4745 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b0 08 00
	00		 sub	 esp, 2224		; 000008b0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 55 08	 mov	 edx, DWORD PTR _lpMsg$[ebp]

; 4746 : 	if(lpMsg == NULL)

  00031	33 db		 xor	 ebx, ebx

; 4854 : 
; 4855 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  00033	89 8d 5c f7 ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00039	3b d3		 cmp	 edx, ebx
  0003b	0f 84 6a 07 00
	00		 je	 $LN634@SetCalcReg

; 4747 : 		return;
; 4748 : 
; 4749 : 	if(iCOUNT > 100)

  00041	8b 45 0c	 mov	 eax, DWORD PTR _iCOUNT$[ebp]
  00044	83 f8 64	 cmp	 eax, 100		; 00000064H
  00047	7e 05		 jle	 SHORT $LN15@SetCalcReg

; 4750 : 		iCOUNT = 100;

  00049	8d 43 64	 lea	 eax, DWORD PTR [ebx+100]

; 4751 : 
; 4752 : 	if(iCOUNT <= 0)

  0004c	eb 08		 jmp	 SHORT $LN655@SetCalcReg
$LN15@SetCalcReg:
  0004e	3b c3		 cmp	 eax, ebx
  00050	0f 8e 55 07 00
	00		 jle	 $LN634@SetCalcReg
$LN655@SetCalcReg:

; 4753 : 		return;
; 4754 : 
; 4755 : 	m_bCsBasicGuildInfoLoadOK = FALSE;

  00056	89 99 a4 01 00
	00		 mov	 DWORD PTR [ecx+420], ebx

; 4756 : 	m_bCsTotalGuildInfoLoadOK = FALSE;

  0005c	89 99 a8 01 00
	00		 mov	 DWORD PTR [ecx+424], ebx

; 4757 : 
; 4758 : 	vector<_CS_REG_GUILD_DATA> vtRegGuildScore;

  00062	89 9d 44 f7 ff
	ff		 mov	 DWORD PTR _vtRegGuildScore$[ebp], ebx
  00068	89 9d 48 f7 ff
	ff		 mov	 DWORD PTR _vtRegGuildScore$[ebp+4], ebx
  0006e	89 9d 4c f7 ff
	ff		 mov	 DWORD PTR _vtRegGuildScore$[ebp+8], ebx
  00074	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 4759 : 
; 4760 : 	int iGCNT;
; 4761 : 	for(iGCNT = 0; iGCNT < iCOUNT; iGCNT++)

  00077	3b c3		 cmp	 eax, ebx
  00079	0f 8e 2c 07 00
	00		 jle	 $LN634@SetCalcReg

; 4753 : 		return;
; 4754 : 
; 4755 : 	m_bCsBasicGuildInfoLoadOK = FALSE;

  0007f	8d 72 0c	 lea	 esi, DWORD PTR [edx+12]
  00082	89 85 60 f7 ff
	ff		 mov	 DWORD PTR tv1995[ebp], eax
  00088	bf 00 00 00 00	 mov	 edi, OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
$LN13@SetCalcReg:

; 4762 : 	{
; 4763 : 		_CS_REG_GUILD_DATA pRegGuildData;

  0008d	89 bd 80 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp], edi
  00093	c7 85 a0 f7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR _pRegGuildData$188639[ebp+32], 15 ; 0000000fH
  0009d	89 9d 9c f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+28], ebx
  000a3	88 9d 8c f7 ff
	ff		 mov	 BYTE PTR _pRegGuildData$188639[ebp+12], bl
  000a9	53		 push	 ebx
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000af	8d 8d 8c f7 ff
	ff		 lea	 ecx, DWORD PTR _pRegGuildData$188639[ebp+12]
  000b5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b9	89 9d 88 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+8], ebx
  000bf	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000c4	89 9d a8 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+40], ebx
  000ca	89 9d ac f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+44], ebx
  000d0	89 9d b0 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+48], ebx
  000d6	89 9d b4 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+52], ebx
  000dc	89 9d b8 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+56], ebx
  000e2	89 9d bc f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+60], ebx

; 4764 : 		char szGuildName[0x10] = {0};
; 4765 : 
; 4766 : 		memcpy(szGuildName,lpMsg[iGCNT].szGuildName,8);

  000e8	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  000eb	8b 4e f8	 mov	 ecx, DWORD PTR [esi-8]
  000ee	89 5d e1	 mov	 DWORD PTR _szGuildName$188640[ebp+1], ebx
  000f1	89 45 e0	 mov	 DWORD PTR _szGuildName$188640[ebp], eax

; 4767 : 
; 4768 : 		pRegGuildData.m_bIN_USE = TRUE;
; 4769 : 		pRegGuildData.m_strGuildName = szGuildName;

  000f4	8d 45 e0	 lea	 eax, DWORD PTR _szGuildName$188640[ebp]
  000f7	89 5d e5	 mov	 DWORD PTR _szGuildName$188640[ebp+5], ebx
  000fa	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000fe	89 5d e9	 mov	 DWORD PTR _szGuildName$188640[ebp+9], ebx
  00101	66 89 5d ed	 mov	 WORD PTR _szGuildName$188640[ebp+13], bx
  00105	88 5d ef	 mov	 BYTE PTR _szGuildName$188640[ebp+15], bl
  00108	89 4d e4	 mov	 DWORD PTR _szGuildName$188640[ebp+4], ecx
  0010b	c7 85 88 f7 ff
	ff 01 00 00 00	 mov	 DWORD PTR _pRegGuildData$188639[ebp+8], 1
  00115	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL657@SetCalcReg:
  00118	8a 08		 mov	 cl, BYTE PTR [eax]
  0011a	40		 inc	 eax
  0011b	3a cb		 cmp	 cl, bl
  0011d	75 f9		 jne	 SHORT $LL657@SetCalcReg
  0011f	2b c7		 sub	 eax, edi
  00121	50		 push	 eax
  00122	8d 55 e0	 lea	 edx, DWORD PTR _szGuildName$188640[ebp]
  00125	52		 push	 edx
  00126	8d 8d 8c f7 ff
	ff		 lea	 ecx, DWORD PTR _pRegGuildData$188639[ebp+12]
  0012c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 4770 : 		pRegGuildData.m_iRegMarkCount = lpMsg[iGCNT].iRegMarkCount;

  00131	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]

; 4771 : 		pRegGuildData.m_iGuildMasterLevel = lpMsg[iGCNT].iGuildMasterLevel;
; 4772 : 		pRegGuildData.m_iGuildMemberCount = lpMsg[iGCNT].iGuildMemberCount;

  00134	8b 16		 mov	 edx, DWORD PTR [esi]
  00136	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 4773 : 		pRegGuildData.m_iSeqNum = 0x100000 - lpMsg[iGCNT].iSeqNum;

  00139	bf 00 00 10 00	 mov	 edi, 1048576		; 00100000H
  0013e	2b 7e 08	 sub	 edi, DWORD PTR [esi+8]
  00141	89 85 b0 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+48], eax
  00147	89 95 ac f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+44], edx
  0014d	89 bd b4 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+52], edi

; 4774 : 
; 4775 : 		int iTotalScore =  (lpMsg[iGCNT].iRegMarkCount * 5 + lpMsg[iGCNT].iGuildMemberCount) + (lpMsg[iGCNT].iGuildMasterLevel / 4);

  00153	8d 3c 11	 lea	 edi, DWORD PTR [ecx+edx]
  00156	99		 cdq
  00157	83 e2 03	 and	 edx, 3
  0015a	03 c2		 add	 eax, edx
  0015c	89 8d a8 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+40], ecx

; 4776 : 
; 4777 : 		pRegGuildData.m_i64TotolScore = unsigned int(__int64(lpMsg[iGCNT].iSeqNum) & 0xFFFFFFFF) | __int64(unsigned int(__int64(iTotalScore) & 0xFFFFFFFF)) << 0x20;

  00162	33 d2		 xor	 edx, edx
  00164	0b 56 08	 or	 edx, DWORD PTR [esi+8]
  00167	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  0016a	c1 f8 02	 sar	 eax, 2
  0016d	03 c1		 add	 eax, ecx
  0016f	33 c9		 xor	 ecx, ecx
  00171	89 95 b8 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+56], edx
  00177	0b c1		 or	 eax, ecx

; 4778 : 
; 4779 : 		vtRegGuildScore.push_back(pRegGuildData);

  00179	8d 95 80 f7 ff
	ff		 lea	 edx, DWORD PTR _pRegGuildData$188639[ebp]
  0017f	52		 push	 edx
  00180	8d 8d 44 f7 ff
	ff		 lea	 ecx, DWORD PTR _vtRegGuildScore$[ebp]
  00186	89 85 bc f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp+60], eax
  0018c	e8 00 00 00 00	 call	 ?push_back@?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAEXABU_CS_REG_GUILD_DATA@@@Z ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::push_back

; 4780 : 
; 4781 : 		LogAddTD("[CastleSiege][REG Mark Count] - [%s][%d]",szGuildName,lpMsg[iGCNT].iRegMarkCount);

  00191	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00194	50		 push	 eax
  00195	8d 4d e0	 lea	 ecx, DWORD PTR _szGuildName$188640[ebp]
  00198	51		 push	 ecx
  00199	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LNHAOIAL@?$FLCastleSiege?$FN?$FLREG?5Mark?5Count?$FN?5?9?5@
  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4782 : 	}

  001a7	83 bd a0 f7 ff
	ff 10		 cmp	 DWORD PTR _pRegGuildData$188639[ebp+32], 16 ; 00000010H
  001ae	bf 00 00 00 00	 mov	 edi, OFFSET ??_7_CS_REG_GUILD_DATA@@6B@
  001b3	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  001b6	89 bd 80 f7 ff
	ff		 mov	 DWORD PTR _pRegGuildData$188639[ebp], edi
  001bc	72 0f		 jb	 SHORT $LN90@SetCalcReg
  001be	8b 95 8c f7 ff
	ff		 mov	 edx, DWORD PTR _pRegGuildData$188639[ebp+12]
  001c4	52		 push	 edx
  001c5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ca	83 c4 04	 add	 esp, 4
$LN90@SetCalcReg:

; 4759 : 
; 4760 : 	int iGCNT;
; 4761 : 	for(iGCNT = 0; iGCNT < iCOUNT; iGCNT++)

  001cd	83 c6 18	 add	 esi, 24			; 00000018H
  001d0	ff 8d 60 f7 ff
	ff		 dec	 DWORD PTR tv1995[ebp]
  001d6	0f 85 b1 fe ff
	ff		 jne	 $LN13@SetCalcReg

; 4783 : 
; 4784 : 	if(vtRegGuildScore.empty())

  001dc	8b 8d 48 f7 ff
	ff		 mov	 ecx, DWORD PTR _vtRegGuildScore$[ebp+4]
  001e2	8b 85 44 f7 ff
	ff		 mov	 eax, DWORD PTR _vtRegGuildScore$[ebp]
  001e8	3b c1		 cmp	 eax, ecx
  001ea	75 0e		 jne	 SHORT $LN10@SetCalcReg

; 4785 : 		return;

  001ec	3b c3		 cmp	 eax, ebx
  001ee	0f 84 b7 05 00
	00		 je	 $LN634@SetCalcReg
  001f4	50		 push	 eax
  001f5	e9 a9 05 00 00	 jmp	 $LN670@SetCalcReg
$LN10@SetCalcReg:

; 4786 : 
; 4787 : 	sort(vtRegGuildScore.begin(),vtRegGuildScore.end(),RegGuildScoreCompFunc);

  001fa	8b f9		 mov	 edi, ecx
  001fc	2b f8		 sub	 edi, eax
  001fe	68 00 00 00 00	 push	 OFFSET ?RegGuildScoreCompFunc@CCastleSiege@@SAEAAU_CS_REG_GUILD_DATA@@0@Z ; CCastleSiege::RegGuildScoreCompFunc
  00203	c1 ff 06	 sar	 edi, 6
  00206	57		 push	 edi
  00207	51		 push	 ecx
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ??$_Sort@PAU_CS_REG_GUILD_DATA@@HP6AEAAU1@0@Z@std@@YAXPAU_CS_REG_GUILD_DATA@@0HP6AEAAU1@1@Z@Z ; std::_Sort<_CS_REG_GUILD_DATA *,int,unsigned char (__cdecl*)(_CS_REG_GUILD_DATA &,_CS_REG_GUILD_DATA &)>
  0020e	83 c4 10	 add	 esp, 16			; 00000010H

; 4788 : 
; 4789 : 	int iGUILD_COUNT = vtRegGuildScore.size();

  00211	89 bd 60 f7 ff
	ff		 mov	 DWORD PTR _iGUILD_COUNT$[ebp], edi

; 4790 : 
; 4791 : 	if(iGUILD_COUNT > 3)

  00217	83 ff 03	 cmp	 edi, 3
  0021a	7e 0a		 jle	 SHORT $LN9@SetCalcReg

; 4792 : 	{
; 4793 : 		iGUILD_COUNT = 3;

  0021c	c7 85 60 f7 ff
	ff 03 00 00 00	 mov	 DWORD PTR _iGUILD_COUNT$[ebp], 3
$LN9@SetCalcReg:

; 4794 : 	}
; 4795 : 
; 4796 : 	EnterCriticalSection(&m_critCsBasicGuildInfo);

  00226	8b b5 5c f7 ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0022c	8d 86 64 01 00
	00		 lea	 eax, DWORD PTR [esi+356]
  00232	50		 push	 eax
  00233	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4797 : 
; 4798 : 	m_mapCsBasicGuildInfo.clear();

  00239	8b 86 58 01 00
	00		 mov	 eax, DWORD PTR [esi+344]
  0023f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00242	8d be 54 01 00
	00		 lea	 edi, DWORD PTR [esi+340]
  00248	51		 push	 ecx
  00249	8b cf		 mov	 ecx, edi
  0024b	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase
  00250	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00253	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00256	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00259	89 00		 mov	 DWORD PTR [eax], eax
  0025b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0025e	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00261	89 5f 08	 mov	 DWORD PTR [edi+8], ebx

; 4799 : 
; 4800 : 	for(iGCNT = 0; iGCNT < iGUILD_COUNT; iGCNT ++)

  00264	89 9d 58 f7 ff
	ff		 mov	 DWORD PTR _iGCNT$[ebp], ebx
  0026a	39 9d 60 f7 ff
	ff		 cmp	 DWORD PTR _iGUILD_COUNT$[ebp], ebx
  00270	0f 8e 2a 01 00
	00		 jle	 $LN6@SetCalcReg

; 4794 : 	}
; 4795 : 
; 4796 : 	EnterCriticalSection(&m_critCsBasicGuildInfo);

  00276	8b 8d 44 f7 ff
	ff		 mov	 ecx, DWORD PTR _vtRegGuildScore$[ebp]
  0027c	83 c1 28	 add	 ecx, 40			; 00000028H
  0027f	89 8d 54 f7 ff
	ff		 mov	 DWORD PTR tv3072[ebp], ecx
  00285	eb 0f		 jmp	 SHORT $LN8@SetCalcReg
  00287	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL665@SetCalcReg:
  00290	8b 8d 54 f7 ff
	ff		 mov	 ecx, DWORD PTR tv3072[ebp]
$LN8@SetCalcReg:

; 4801 : 	{
; 4802 : 		_CS_TOTAL_GUILD_DATA pTotalGuildData;

  00296	c7 85 6c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pTotalGuildData$188784[ebp], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@

; 4803 : 
; 4804 : 		pTotalGuildData.m_bIN_USE = TRUE;
; 4805 : 		pTotalGuildData.m_iCsGuildID = iGCNT + 2;

  002a0	8b 95 58 f7 ff
	ff		 mov	 edx, DWORD PTR _iGCNT$[ebp]
  002a6	b8 01 00 00 00	 mov	 eax, 1
  002ab	89 85 70 f7 ff
	ff		 mov	 DWORD PTR _pTotalGuildData$188784[ebp+4], eax

; 4806 : 		pTotalGuildData.m_bGuildInvolved =  TRUE;

  002b1	89 85 78 f7 ff
	ff		 mov	 DWORD PTR _pTotalGuildData$188784[ebp+12], eax

; 4807 : 		pTotalGuildData.m_iTotalScore = (vtRegGuildScore[iGCNT].m_iRegMarkCount * 5 + vtRegGuildScore[iGCNT].m_iGuildMemberCount) + (vtRegGuildScore[iGCNT].m_iGuildMasterLevel / 4);

  002b7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  002ba	83 c2 02	 add	 edx, 2
  002bd	89 95 74 f7 ff
	ff		 mov	 DWORD PTR _pTotalGuildData$188784[ebp+8], edx
  002c3	99		 cdq
  002c4	83 e2 03	 and	 edx, 3
  002c7	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  002ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  002cc	c1 fe 02	 sar	 esi, 2
  002cf	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  002d2	03 f0		 add	 esi, eax
  002d4	03 71 04	 add	 esi, DWORD PTR [ecx+4]

; 4808 : 
; 4809 : 		//
; 4810 : 
; 4811 : 		m_mapCsBasicGuildInfo.insert(pair<basic_string<char,char_traits<char> >,_CS_TOTAL_GUILD_DATA>(vtRegGuildScore[iGCNT].m_strGuildName,pTotalGuildData));

  002d7	6a ff		 push	 -1
  002d9	83 c1 e4	 add	 ecx, -28		; ffffffe4H
  002dc	53		 push	 ebx
  002dd	51		 push	 ecx
  002de	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR $T188939[ebp]
  002e4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002e8	89 b5 7c f7 ff
	ff		 mov	 DWORD PTR _pTotalGuildData$188784[ebp+16], esi
  002ee	c7 85 a4 f7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T188939[ebp+20], 15 ; 0000000fH
  002f8	89 9d a0 f7 ff
	ff		 mov	 DWORD PTR $T188939[ebp+16], ebx
  002fe	88 9d 90 f7 ff
	ff		 mov	 BYTE PTR $T188939[ebp], bl
  00304	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00309	8b 8d 74 f7 ff
	ff		 mov	 ecx, DWORD PTR _pTotalGuildData$188784[ebp+8]
  0030f	b8 01 00 00 00	 mov	 eax, 1
  00314	c7 85 ac f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T188939[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0031e	89 85 b0 f7 ff
	ff		 mov	 DWORD PTR $T188939[ebp+32], eax
  00324	89 8d b4 f7 ff
	ff		 mov	 DWORD PTR $T188939[ebp+36], ecx
  0032a	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR $T188939[ebp+40], eax
  00330	89 b5 bc f7 ff
	ff		 mov	 DWORD PTR $T188939[ebp+44], esi
  00336	53		 push	 ebx
  00337	8d 95 90 f7 ff
	ff		 lea	 edx, DWORD PTR $T188939[ebp]
  0033d	52		 push	 edx
  0033e	8b cf		 mov	 ecx, edi
  00340	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00344	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
  00349	50		 push	 eax
  0034a	8d 45 e8	 lea	 eax, DWORD PTR $T239881[ebp]
  0034d	50		 push	 eax
  0034e	8b cf		 mov	 ecx, edi
  00350	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Linsert
  00355	83 bd a4 f7 ff
	ff 10		 cmp	 DWORD PTR $T188939[ebp+20], 16 ; 00000010H
  0035c	c7 85 ac f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T188939[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  00366	72 0f		 jb	 SHORT $LN253@SetCalcReg
  00368	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR $T188939[ebp]
  0036e	51		 push	 ecx
  0036f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00374	83 c4 04	 add	 esp, 4
$LN253@SetCalcReg:

; 4799 : 
; 4800 : 	for(iGCNT = 0; iGCNT < iGUILD_COUNT; iGCNT ++)

  00377	8b 85 58 f7 ff
	ff		 mov	 eax, DWORD PTR _iGCNT$[ebp]
  0037d	83 85 54 f7 ff
	ff 40		 add	 DWORD PTR tv3072[ebp], 64 ; 00000040H
  00384	40		 inc	 eax

; 4812 : 	}

  00385	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00388	89 85 58 f7 ff
	ff		 mov	 DWORD PTR _iGCNT$[ebp], eax
  0038e	3b 85 60 f7 ff
	ff		 cmp	 eax, DWORD PTR _iGUILD_COUNT$[ebp]
  00394	0f 8c f6 fe ff
	ff		 jl	 $LL665@SetCalcReg

; 4799 : 
; 4800 : 	for(iGCNT = 0; iGCNT < iGUILD_COUNT; iGCNT ++)

  0039a	8b b5 5c f7 ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
$LN6@SetCalcReg:

; 4813 : 
; 4814 : 	if(m_btIsCastleOccupied == TRUE && strcmp(m_szCastleOwnerGuild,"") != NULL)

  003a0	80 be d6 00 00
	00 01		 cmp	 BYTE PTR [esi+214], 1
  003a7	0f 85 0a 01 00
	00		 jne	 $LN350@SetCalcReg
  003ad	8d 86 d7 00 00
	00		 lea	 eax, DWORD PTR [esi+215]
  003b3	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LL658@SetCalcReg:
  003b8	8a 10		 mov	 dl, BYTE PTR [eax]
  003ba	3a 11		 cmp	 dl, BYTE PTR [ecx]
  003bc	75 1a		 jne	 SHORT $LN659@SetCalcReg
  003be	3a d3		 cmp	 dl, bl
  003c0	74 12		 je	 SHORT $LN660@SetCalcReg
  003c2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  003c5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  003c8	75 0e		 jne	 SHORT $LN659@SetCalcReg
  003ca	83 c0 02	 add	 eax, 2
  003cd	83 c1 02	 add	 ecx, 2
  003d0	3a d3		 cmp	 dl, bl
  003d2	75 e4		 jne	 SHORT $LL658@SetCalcReg
$LN660@SetCalcReg:
  003d4	33 c0		 xor	 eax, eax
  003d6	eb 05		 jmp	 SHORT $LN661@SetCalcReg
$LN659@SetCalcReg:
  003d8	1b c0		 sbb	 eax, eax
  003da	83 d8 ff	 sbb	 eax, -1
$LN661@SetCalcReg:
  003dd	3b c3		 cmp	 eax, ebx
  003df	0f 84 d2 00 00
	00		 je	 $LN350@SetCalcReg

; 4815 : 	{
; 4816 : 		_CS_TOTAL_GUILD_DATA pTotalGuildData;

  003e5	c7 85 6c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pTotalGuildData$189101[ebp], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@

; 4817 : 
; 4818 : 		pTotalGuildData.m_bIN_USE = TRUE;

  003ef	b8 01 00 00 00	 mov	 eax, 1
  003f4	89 85 70 f7 ff
	ff		 mov	 DWORD PTR _pTotalGuildData$189101[ebp+4], eax

; 4819 : 		pTotalGuildData.m_iCsGuildID = 1;

  003fa	89 85 74 f7 ff
	ff		 mov	 DWORD PTR _pTotalGuildData$189101[ebp+8], eax

; 4820 : 		pTotalGuildData.m_bGuildInvolved = TRUE;

  00400	89 85 78 f7 ff
	ff		 mov	 DWORD PTR _pTotalGuildData$189101[ebp+12], eax

; 4821 : 		pTotalGuildData.m_iTotalScore = 0;
; 4822 : 
; 4823 : 		m_mapCsBasicGuildInfo.insert(pair<basic_string<char,char_traits<char> >,_CS_TOTAL_GUILD_DATA>(m_szCastleOwnerGuild,pTotalGuildData));

  00406	8d 86 d7 00 00
	00		 lea	 eax, DWORD PTR [esi+215]
  0040c	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00410	89 9d 7c f7 ff
	ff		 mov	 DWORD PTR _pTotalGuildData$189101[ebp+16], ebx
  00416	c7 85 a4 f7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T189116[ebp+20], 15 ; 0000000fH
  00420	89 9d a0 f7 ff
	ff		 mov	 DWORD PTR $T189116[ebp+16], ebx
  00426	88 9d 90 f7 ff
	ff		 mov	 BYTE PTR $T189116[ebp], bl
  0042c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0042f	90		 npad	 1
$LL662@SetCalcReg:
  00430	8a 10		 mov	 dl, BYTE PTR [eax]
  00432	40		 inc	 eax
  00433	3a d3		 cmp	 dl, bl
  00435	75 f9		 jne	 SHORT $LL662@SetCalcReg
  00437	2b c1		 sub	 eax, ecx
  00439	50		 push	 eax
  0043a	8d 86 d7 00 00
	00		 lea	 eax, DWORD PTR [esi+215]
  00440	50		 push	 eax
  00441	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR $T189116[ebp]
  00447	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0044c	b8 01 00 00 00	 mov	 eax, 1
  00451	c7 85 ac f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T189116[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0045b	89 85 b0 f7 ff
	ff		 mov	 DWORD PTR $T189116[ebp+32], eax
  00461	89 85 b4 f7 ff
	ff		 mov	 DWORD PTR $T189116[ebp+36], eax
  00467	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR $T189116[ebp+40], eax
  0046d	89 9d bc f7 ff
	ff		 mov	 DWORD PTR $T189116[ebp+44], ebx
  00473	53		 push	 ebx
  00474	8d 95 90 f7 ff
	ff		 lea	 edx, DWORD PTR $T189116[ebp]
  0047a	52		 push	 edx
  0047b	8b cf		 mov	 ecx, edi
  0047d	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00481	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
  00486	50		 push	 eax
  00487	8d 45 e8	 lea	 eax, DWORD PTR $T239882[ebp]
  0048a	50		 push	 eax
  0048b	8b cf		 mov	 ecx, edi
  0048d	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Linsert
  00492	83 bd a4 f7 ff
	ff 10		 cmp	 DWORD PTR $T189116[ebp+20], 16 ; 00000010H
  00499	c7 85 ac f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T189116[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  004a3	72 0f		 jb	 SHORT $LN338@SetCalcReg
  004a5	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR $T189116[ebp]
  004ab	51		 push	 ecx
  004ac	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004b1	83 c4 04	 add	 esp, 4
$LN338@SetCalcReg:

; 4824 : 	}

  004b4	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
$LN350@SetCalcReg:

; 4825 : 
; 4826 : 	LeaveCriticalSection(&m_critCsBasicGuildInfo);

  004b7	8d 86 64 01 00
	00		 lea	 eax, DWORD PTR [esi+356]
  004bd	50		 push	 eax
  004be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4827 : 
; 4828 : 	char cBUFFER[0x820];
; 4829 : 
; 4830 : 	CSP_REQ_CSGUILDUNIONINFO * lpMsgSend = (CSP_REQ_CSGUILDUNIONINFO *)cBUFFER;
; 4831 : 	CSP_CSGUILDUNIONINFO * lpMsgSendBody = (CSP_CSGUILDUNIONINFO *)&cBUFFER[sizeof(CSP_REQ_CSGUILDUNIONINFO)];
; 4832 : 
; 4833 : 	lpMsgSend->wMapSvrNum = m_iMapSvrGroup;

  004c4	66 8b 56 18	 mov	 dx, WORD PTR [esi+24]

; 4834 : 	lpMsgSend->iCount = 0;
; 4835 : 
; 4836 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  004c8	8d 86 8c 01 00
	00		 lea	 eax, DWORD PTR [esi+396]
  004ce	50		 push	 eax
  004cf	66 89 95 c4 f7
	ff ff		 mov	 WORD PTR _cBUFFER$[ebp+4], dx
  004d6	89 9d c8 f7 ff
	ff		 mov	 DWORD PTR _cBUFFER$[ebp+8], ebx
  004dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4837 : 
; 4838 : 	m_mapCsTotalGuildInfo.clear();

  004e2	8b 86 80 01 00
	00		 mov	 eax, DWORD PTR [esi+384]
  004e8	8d be 7c 01 00
	00		 lea	 edi, DWORD PTR [esi+380]
  004ee	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  004f1	89 b5 60 f7 ff
	ff		 mov	 DWORD PTR $T241244[ebp], esi
  004f7	38 5e 3d	 cmp	 BYTE PTR [esi+61], bl
  004fa	75 3e		 jne	 SHORT $LN358@SetCalcReg
  004fc	8d 64 24 00	 npad	 4
$LL360@SetCalcReg:
  00500	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00503	51		 push	 ecx
  00504	8b cf		 mov	 ecx, edi
  00506	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Erase
  0050b	8b 95 60 f7 ff
	ff		 mov	 edx, DWORD PTR $T241244[ebp]
  00511	8b 36		 mov	 esi, DWORD PTR [esi]
  00513	83 c2 0c	 add	 edx, 12			; 0000000cH
  00516	52		 push	 edx
  00517	8d 47 0d	 lea	 eax, DWORD PTR [edi+13]
  0051a	50		 push	 eax
  0051b	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@0@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >
  00520	8b 85 60 f7 ff
	ff		 mov	 eax, DWORD PTR $T241244[ebp]
  00526	50		 push	 eax
  00527	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0052c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0052f	89 b5 60 f7 ff
	ff		 mov	 DWORD PTR $T241244[ebp], esi
  00535	38 5e 3d	 cmp	 BYTE PTR [esi+61], bl
  00538	74 c6		 je	 SHORT $LL360@SetCalcReg
$LN358@SetCalcReg:
  0053a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 4839 : 
; 4840 : 	//for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = (_CS_TOTAL_GUILD_DATA_MAP::iterator)m_mapCsBasicGuildInfo.begin();it != m_mapCsBasicGuildInfo.end(); it++)
; 4841 : 	for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsBasicGuildInfo.begin();it != m_mapCsBasicGuildInfo.end(); it++)

  0053d	8b 8d 5c f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00543	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00546	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00549	89 00		 mov	 DWORD PTR [eax], eax
  0054b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0054e	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00551	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00554	8b 81 58 01 00
	00		 mov	 eax, DWORD PTR [ecx+344]
  0055a	8b 30		 mov	 esi, DWORD PTR [eax]
  0055c	3b f0		 cmp	 esi, eax
  0055e	0f 84 af 01 00
	00		 je	 $LN646@SetCalcReg
$LN409@SetCalcReg:

; 4842 : 	{
; 4843 : 		if(lpMsgSend->iCount > 150)

  00564	81 bd c8 f7 ff
	ff 96 00 00 00	 cmp	 DWORD PTR _cBUFFER$[ebp+8], 150 ; 00000096H
  0056e	0f 8f 9f 01 00
	00		 jg	 $LN646@SetCalcReg

; 4844 : 			break;
; 4845 : 
; 4846 : 		m_mapCsTotalGuildInfo.insert(pair<basic_string<char,char_traits<char> >,_CS_TOTAL_GUILD_DATA>(it->first,it->second));

  00574	6a ff		 push	 -1
  00576	53		 push	 ebx
  00577	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0057a	57		 push	 edi
  0057b	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR $T189146[ebp]
  00581	c7 85 a4 f7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T189146[ebp+20], 15 ; 0000000fH
  0058b	89 9d a0 f7 ff
	ff		 mov	 DWORD PTR $T189146[ebp+16], ebx
  00591	88 9d 90 f7 ff
	ff		 mov	 BYTE PTR $T189146[ebp], bl
  00597	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0059c	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
  0059f	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  005a2	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  005a5	89 95 b0 f7 ff
	ff		 mov	 DWORD PTR $T189146[ebp+32], edx
  005ab	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  005ae	c7 85 ac f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T189146[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  005b8	89 85 b4 f7 ff
	ff		 mov	 DWORD PTR $T189146[ebp+36], eax
  005be	89 8d b8 f7 ff
	ff		 mov	 DWORD PTR $T189146[ebp+40], ecx
  005c4	89 95 bc f7 ff
	ff		 mov	 DWORD PTR $T189146[ebp+44], edx
  005ca	8b 8d 5c f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  005d0	53		 push	 ebx
  005d1	8d 85 90 f7 ff
	ff		 lea	 eax, DWORD PTR $T189146[ebp]
  005d7	50		 push	 eax
  005d8	81 c1 7c 01 00
	00		 add	 ecx, 380		; 0000017cH
  005de	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  005e2	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
  005e7	50		 push	 eax
  005e8	8d 4d e8	 lea	 ecx, DWORD PTR $T239885[ebp]
  005eb	51		 push	 ecx
  005ec	8b 8d 5c f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  005f2	81 c1 7c 01 00
	00		 add	 ecx, 380		; 0000017cH
  005f8	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Linsert
  005fd	83 bd a4 f7 ff
	ff 10		 cmp	 DWORD PTR $T189146[ebp+20], 16 ; 00000010H
  00604	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00607	c7 85 ac f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T189146[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  00611	72 0f		 jb	 SHORT $LN532@SetCalcReg
  00613	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR $T189146[ebp]
  00619	52		 push	 edx
  0061a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0061f	83 c4 04	 add	 esp, 4
$LN532@SetCalcReg:

; 4847 : 
; 4848 : 		basic_string<char,char_traits<char> > strGuildName = it->first;

  00622	6a ff		 push	 -1
  00624	53		 push	 ebx
  00625	57		 push	 edi
  00626	8d 8d 64 f7 ff
	ff		 lea	 ecx, DWORD PTR _strGuildName$189155[ebp]
  0062c	c7 85 78 f7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR _strGuildName$189155[ebp+20], 15 ; 0000000fH
  00636	89 9d 74 f7 ff
	ff		 mov	 DWORD PTR _strGuildName$189155[ebp+16], ebx
  0063c	88 9d 64 f7 ff
	ff		 mov	 BYTE PTR _strGuildName$189155[ebp], bl
  00642	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 4849 : 
; 4850 : 		memcpy(lpMsgSendBody[lpMsgSend->iCount].szGuildName,&strGuildName[0],8);

  00647	8b 8d 64 f7 ff
	ff		 mov	 ecx, DWORD PTR _strGuildName$189155[ebp]
  0064d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00652	39 95 78 f7 ff
	ff		 cmp	 DWORD PTR _strGuildName$189155[ebp+20], edx
  00658	73 06		 jae	 SHORT $LN583@SetCalcReg
  0065a	8d 8d 64 f7 ff
	ff		 lea	 ecx, DWORD PTR _strGuildName$189155[ebp]
$LN583@SetCalcReg:
  00660	8b 85 c8 f7 ff
	ff		 mov	 eax, DWORD PTR _cBUFFER$[ebp+8]
  00666	8b 39		 mov	 edi, DWORD PTR [ecx]
  00668	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0066b	89 bc 85 cc f7
	ff ff		 mov	 DWORD PTR _cBUFFER$[ebp+eax*4+12], edi
  00672	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00675	89 8c 85 d0 f7
	ff ff		 mov	 DWORD PTR _cBUFFER$[ebp+eax*4+16], ecx

; 4851 : 		lpMsgSendBody[lpMsgSend->iCount].iCsGuildID = it->second.m_iCsGuildID;

  0067c	8b 85 c8 f7 ff
	ff		 mov	 eax, DWORD PTR _cBUFFER$[ebp+8]
  00682	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00685	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00688	89 8c 85 d4 f7
	ff ff		 mov	 DWORD PTR _cBUFFER$[ebp+eax*4+20], ecx

; 4852 : 		lpMsgSend->iCount++;

  0068f	ff 85 c8 f7 ff
	ff		 inc	 DWORD PTR _cBUFFER$[ebp+8]

; 4853 : 	}

  00695	39 95 78 f7 ff
	ff		 cmp	 DWORD PTR _strGuildName$189155[ebp+20], edx
  0069b	72 0f		 jb	 SHORT $LN602@SetCalcReg
  0069d	8b 95 64 f7 ff
	ff		 mov	 edx, DWORD PTR _strGuildName$189155[ebp]
  006a3	52		 push	 edx
  006a4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  006a9	83 c4 04	 add	 esp, 4
$LN602@SetCalcReg:
  006ac	c7 85 78 f7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR _strGuildName$189155[ebp+20], 15 ; 0000000fH
  006b6	89 9d 74 f7 ff
	ff		 mov	 DWORD PTR _strGuildName$189155[ebp+16], ebx
  006bc	88 9d 64 f7 ff
	ff		 mov	 BYTE PTR _strGuildName$189155[ebp], bl
  006c2	38 5e 3d	 cmp	 BYTE PTR [esi+61], bl
  006c5	75 3a		 jne	 SHORT $LN653@SetCalcReg

; 4839 : 
; 4840 : 	//for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = (_CS_TOTAL_GUILD_DATA_MAP::iterator)m_mapCsBasicGuildInfo.begin();it != m_mapCsBasicGuildInfo.end(); it++)
; 4841 : 	for(_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsBasicGuildInfo.begin();it != m_mapCsBasicGuildInfo.end(); it++)

  006c7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  006ca	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  006cd	75 14		 jne	 SHORT $LN644@SetCalcReg
  006cf	8b f0		 mov	 esi, eax
  006d1	8b 06		 mov	 eax, DWORD PTR [esi]
  006d3	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  006d6	75 29		 jne	 SHORT $LN653@SetCalcReg
$LL424@SetCalcReg:
  006d8	8b f0		 mov	 esi, eax
  006da	8b 06		 mov	 eax, DWORD PTR [esi]
  006dc	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  006df	74 f7		 je	 SHORT $LL424@SetCalcReg
  006e1	eb 1e		 jmp	 SHORT $LN653@SetCalcReg
$LN644@SetCalcReg:
  006e3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  006e6	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  006e9	75 14		 jne	 SHORT $LN407@SetCalcReg
  006eb	eb 03 8d 49 00	 npad	 5
$LL408@SetCalcReg:
  006f0	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  006f3	75 0a		 jne	 SHORT $LN407@SetCalcReg
  006f5	8b f0		 mov	 esi, eax
  006f7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  006fa	38 58 3d	 cmp	 BYTE PTR [eax+61], bl
  006fd	74 f1		 je	 SHORT $LL408@SetCalcReg
$LN407@SetCalcReg:
  006ff	8b f0		 mov	 esi, eax
$LN653@SetCalcReg:
  00701	8b 85 5c f7 ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00707	3b b0 58 01 00
	00		 cmp	 esi, DWORD PTR [eax+344]
  0070d	0f 85 51 fe ff
	ff		 jne	 $LN409@SetCalcReg
$LN646@SetCalcReg:

; 4854 : 
; 4855 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  00713	8b 85 5c f7 ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00719	05 8c 01 00 00	 add	 eax, 396		; 0000018cH
  0071e	50		 push	 eax
  0071f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4856 : 
; 4857 : 	m_bCsBasicGuildInfoLoadOK = TRUE;
; 4858 : 
; 4859 : 	lpMsgSend->h.set((PBYTE)lpMsgSend,0x86,sizeof(CSP_REQ_CSGUILDUNIONINFO) + sizeof(CSP_CSGUILDUNIONINFO) * lpMsgSend->iCount);

  00725	8b 85 c8 f7 ff
	ff		 mov	 eax, DWORD PTR _cBUFFER$[ebp+8]
  0072b	8b 8d 5c f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00731	8d 44 40 03	 lea	 eax, DWORD PTR [eax+eax*2+3]
  00735	03 c0		 add	 eax, eax
  00737	03 c0		 add	 eax, eax
  00739	8b d0		 mov	 edx, eax

; 4860 : 	cDBSMng.Send((char *)lpMsgSend,sizeof(CSP_REQ_CSGUILDUNIONINFO) + sizeof(CSP_CSGUILDUNIONINFO) * lpMsgSend->iCount);

  0073b	50		 push	 eax
  0073c	88 85 c2 f7 ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+2], al
  00742	8d 85 c0 f7 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  00748	c7 81 a4 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+420], 1
  00752	c1 ea 08	 shr	 edx, 8
  00755	50		 push	 eax
  00756	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0075b	c6 85 c0 f7 ff
	ff c2		 mov	 BYTE PTR _cBUFFER$[ebp], 194 ; 000000c2H
  00762	88 95 c1 f7 ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+1], dl
  00768	c6 85 c3 f7 ff
	ff 86		 mov	 BYTE PTR _cBUFFER$[ebp+3], 134 ; 00000086H
  0076f	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 4861 : }

  00774	8b bd 44 f7 ff
	ff		 mov	 edi, DWORD PTR _vtRegGuildScore$[ebp]
  0077a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00781	3b fb		 cmp	 edi, ebx
  00783	74 26		 je	 SHORT $LN634@SetCalcReg
  00785	8b f7		 mov	 esi, edi
$LL631@SetCalcReg:
  00787	8d 8d 50 f7 ff
	ff		 lea	 ecx, DWORD PTR _vtRegGuildScore$[ebp+12]
  0078d	56		 push	 esi
  0078e	51		 push	 ecx
  0078f	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@U_CS_REG_GUILD_DATA@@@std@@YAXAAV?$allocator@U_CS_REG_GUILD_DATA@@@0@PAU_CS_REG_GUILD_DATA@@@Z ; std::_Dest_val<std::allocator<_CS_REG_GUILD_DATA>,_CS_REG_GUILD_DATA>
  00794	83 c6 40	 add	 esi, 64			; 00000040H
  00797	83 c4 08	 add	 esp, 8
  0079a	3b b5 48 f7 ff
	ff		 cmp	 esi, DWORD PTR _vtRegGuildScore$[ebp+4]
  007a0	75 e5		 jne	 SHORT $LL631@SetCalcReg
  007a2	57		 push	 edi
$LN670@SetCalcReg:
  007a3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007a8	83 c4 04	 add	 esp, 4
$LN634@SetCalcReg:
  007ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  007ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  007b5	59		 pop	 ecx
  007b6	5f		 pop	 edi
  007b7	5e		 pop	 esi
  007b8	5b		 pop	 ebx
  007b9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007bc	33 cd		 xor	 ecx, ebp
  007be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007c3	8b e5		 mov	 esp, ebp
  007c5	5d		 pop	 ebp
  007c6	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$0:
  00000	8d 8d 44 f7 ff
	ff		 lea	 ecx, DWORD PTR _vtRegGuildScore$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@U_CS_REG_GUILD_DATA@@V?$allocator@U_CS_REG_GUILD_DATA@@@std@@@std@@QAE@XZ ; std::vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >::~vector<_CS_REG_GUILD_DATA,std::allocator<_CS_REG_GUILD_DATA> >
__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$8:
  0000b	8d 8d 8c f7 ff
	ff		 lea	 ecx, DWORD PTR _pRegGuildData$188639[ebp+12]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$1:
  00016	8d 8d 80 f7 ff
	ff		 lea	 ecx, DWORD PTR _pRegGuildData$188639[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1_CS_REG_GUILD_DATA@@UAE@XZ ; _CS_REG_GUILD_DATA::~_CS_REG_GUILD_DATA
__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$2:
  00021	8d 8d 6c f7 ff
	ff		 lea	 ecx, DWORD PTR _pTotalGuildData$188784[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1_CS_TOTAL_GUILD_DATA@@UAE@XZ ; _CS_TOTAL_GUILD_DATA::~_CS_TOTAL_GUILD_DATA
__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$3:
  0002c	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR $T188939[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ
__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$4:
  00037	8d 8d 6c f7 ff
	ff		 lea	 ecx, DWORD PTR _pTotalGuildData$189101[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1_CS_TOTAL_GUILD_DATA@@UAE@XZ ; _CS_TOTAL_GUILD_DATA::~_CS_TOTAL_GUILD_DATA
__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$5:
  00042	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR $T189116[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ
__unwindfunclet$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z$6:
  0004d	8d 8d 90 f7 ff
	ff		 lea	 ecx, DWORD PTR $T189146[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ
__ehhandler$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z:
  00058	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005f	8b 8a 40 f7 ff
	ff		 mov	 ecx, DWORD PTR [edx-2240]
  00065	33 c8		 xor	 ecx, eax
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006f	33 c8		 xor	 ecx, eax
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z
  0007b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetCalcRegGuildList@CCastleSiege@@QAEXPAUCSP_CALCREGGUILDLIST@@H@Z ENDP ; CCastleSiege::SetCalcRegGuildList
PUBLIC	??_C@_0EM@OCFPJAKF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Make@ ; `string'
PUBLIC	??_C@_0FO@IAALFNCJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Make@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z ; CCastleSiege::MakeCsTotalGuildInfo
;	COMDAT ??_C@_0EM@OCFPJAKF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Make@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.h
CONST	SEGMENT
??_C@_0EM@OCFPJAKF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Make@ DB '[Castle'
	DB	'Siege] CCastleSiege::MakeCsTotalGuildInfo() ERROR - iCOUNT <='
	DB	' 0 : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FO@IAALFNCJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Make@
CONST	SEGMENT
??_C@_0FO@IAALFNCJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Make@ DB '[Castle'
	DB	'Siege] CCastleSiege::MakeCsTotalGuildInfo() ERROR - m_bCsBasi'
	DB	'cGuildInfoLoadOK == FALSE', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z$2
__ehfuncinfo$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z
_TEXT	SEGMENT
$T242364 = -156						; size = 8
_pTotalGuildData$189191 = -148				; size = 20
__Where$242780 = -128					; size = 4
$T242785 = -124						; size = 4
tv653 = -120						; size = 4
_this$GSCopy$ = -116					; size = 4
tv902 = -112						; size = 4
$T189201 = -108						; size = 48
$T189187 = -60						; size = 28
_szGuildName$189185 = -32				; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpMsg$ = 8						; size = 4
_iCOUNT$ = 12						; size = 4
?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z PROC ; CCastleSiege::MakeCsTotalGuildInfo, COMDAT
; _this$ = ecx

; 4873 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 7d 08	 mov	 edi, DWORD PTR _lpMsg$[ebp]
  00031	8b d9		 mov	 ebx, ecx

; 4896 : 
; 4897 : 		_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsTotalGuildInfo.find(szGuildName);

  00033	89 5d 8c	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00036	85 ff		 test	 edi, edi
  00038	0f 84 14 02 00
	00		 je	 $LN8@MakeCsTota

; 4874 : 	if(lpMsg == NULL)
; 4875 : 		return;
; 4876 : 
; 4877 : 	if(m_bCsBasicGuildInfoLoadOK == FALSE)

  0003e	83 bb a4 01 00
	00 00		 cmp	 DWORD PTR [ebx+420], 0
  00045	75 15		 jne	 SHORT $LN6@MakeCsTota

; 4878 : 	{
; 4879 : 		LogAddC(2,"[CastleSiege] CCastleSiege::MakeCsTotalGuildInfo() ERROR - m_bCsBasicGuildInfoLoadOK == FALSE");

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@IAALFNCJ@?$FLCastleSiege?$FN?5CCastleSiege?3?3Make@
  0004c	6a 02		 push	 2
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00054	83 c4 08	 add	 esp, 8

; 4880 : 		return;

  00057	e9 f6 01 00 00	 jmp	 $LN8@MakeCsTota
$LN6@MakeCsTota:

; 4881 : 	}
; 4882 : 
; 4883 : 	if(iCOUNT <= 0)

  0005c	8b 75 0c	 mov	 esi, DWORD PTR _iCOUNT$[ebp]
  0005f	85 f6		 test	 esi, esi
  00061	7f 16		 jg	 SHORT $LN5@MakeCsTota

; 4884 : 	{
; 4885 : 		LogAddC(2,"[CastleSiege] CCastleSiege::MakeCsTotalGuildInfo() ERROR - iCOUNT <= 0 : %d",iCOUNT);

  00063	56		 push	 esi
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OCFPJAKF@?$FLCastleSiege?$FN?5CCastleSiege?3?3Make@
  00069	6a 02		 push	 2
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4886 : 		return;

  00074	e9 d9 01 00 00	 jmp	 $LN8@MakeCsTota
$LN5@MakeCsTota:

; 4887 : 	}
; 4888 : 
; 4889 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  00079	8d 83 8c 01 00
	00		 lea	 eax, DWORD PTR [ebx+396]
  0007f	50		 push	 eax
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 4890 : 
; 4891 : 	for(int iGCNT = 0; iGCNT < iCOUNT; iGCNT++)

  00086	85 f6		 test	 esi, esi
  00088	0f 8e 9f 01 00
	00		 jle	 $LN2@MakeCsTota

; 4887 : 	}
; 4888 : 
; 4889 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  0008e	89 7d 90	 mov	 DWORD PTR tv902[ebp], edi
  00091	89 75 88	 mov	 DWORD PTR tv653[ebp], esi
$LL4@MakeCsTota:

; 4892 : 	{
; 4893 : 		char szGuildName[0x10] = {0};
; 4894 : 
; 4895 : 		memcpy(szGuildName,lpMsg[iGCNT].szGuildName,8);

  00094	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00097	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00099	33 c0		 xor	 eax, eax
  0009b	89 45 e1	 mov	 DWORD PTR _szGuildName$189185[ebp+1], eax
  0009e	89 45 e5	 mov	 DWORD PTR _szGuildName$189185[ebp+5], eax
  000a1	89 45 e9	 mov	 DWORD PTR _szGuildName$189185[ebp+9], eax
  000a4	66 89 45 ed	 mov	 WORD PTR _szGuildName$189185[ebp+13], ax
  000a8	88 45 ef	 mov	 BYTE PTR _szGuildName$189185[ebp+15], al

; 4896 : 
; 4897 : 		_CS_TOTAL_GUILD_DATA_MAP::iterator it = m_mapCsTotalGuildInfo.find(szGuildName);

  000ab	89 45 d4	 mov	 DWORD PTR $T189187[ebp+16], eax
  000ae	88 45 c4	 mov	 BYTE PTR $T189187[ebp], al
  000b1	8d 45 e0	 lea	 eax, DWORD PTR _szGuildName$189185[ebp]
  000b4	89 55 e4	 mov	 DWORD PTR _szGuildName$189185[ebp+4], edx
  000b7	89 4d e0	 mov	 DWORD PTR _szGuildName$189185[ebp], ecx
  000ba	c7 45 d8 0f 00
	00 00		 mov	 DWORD PTR $T189187[ebp+20], 15 ; 0000000fH
  000c1	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL198@MakeCsTota:
  000c4	8a 08		 mov	 cl, BYTE PTR [eax]
  000c6	40		 inc	 eax
  000c7	84 c9		 test	 cl, cl
  000c9	75 f9		 jne	 SHORT $LL198@MakeCsTota
  000cb	2b c2		 sub	 eax, edx
  000cd	50		 push	 eax
  000ce	8d 45 e0	 lea	 eax, DWORD PTR _szGuildName$189185[ebp]
  000d1	50		 push	 eax
  000d2	8d 4d c4	 lea	 ecx, DWORD PTR $T189187[ebp]
  000d5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000da	8d 4d c4	 lea	 ecx, DWORD PTR $T189187[ebp]
  000dd	51		 push	 ecx
  000de	8d 8b 7c 01 00
	00		 lea	 ecx, DWORD PTR [ebx+380]
  000e4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000eb	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Lbound
  000f0	8b 9b 80 01 00
	00		 mov	 ebx, DWORD PTR [ebx+384]
  000f6	89 45 80	 mov	 DWORD PTR __Where$242780[ebp], eax
  000f9	3b c3		 cmp	 eax, ebx
  000fb	74 55		 je	 SHORT $LN45@MakeCsTota
  000fd	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]
  00100	83 c0 0c	 add	 eax, 12			; 0000000cH
  00103	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00107	72 02		 jb	 SHORT $LN87@MakeCsTota
  00109	8b 00		 mov	 eax, DWORD PTR [eax]
$LN87@MakeCsTota:
  0010b	8b 7d d4	 mov	 edi, DWORD PTR $T189187[ebp+16]
  0010e	8b d7		 mov	 edx, edi
  00110	3b fe		 cmp	 edi, esi
  00112	72 02		 jb	 SHORT $LN94@MakeCsTota
  00114	8b d6		 mov	 edx, esi
$LN94@MakeCsTota:
  00116	83 7d d8 10	 cmp	 DWORD PTR $T189187[ebp+20], 16 ; 00000010H
  0011a	8b 4d c4	 mov	 ecx, DWORD PTR $T189187[ebp]
  0011d	73 03		 jae	 SHORT $LN105@MakeCsTota
  0011f	8d 4d c4	 lea	 ecx, DWORD PTR $T189187[ebp]
$LN105@MakeCsTota:
  00122	52		 push	 edx
  00123	50		 push	 eax
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012d	85 c0		 test	 eax, eax
  0012f	75 12		 jne	 SHORT $LN204@MakeCsTota
  00131	3b fe		 cmp	 edi, esi
  00133	73 05		 jae	 SHORT $LN95@MakeCsTota
  00135	83 c8 ff	 or	 eax, -1
  00138	eb 07		 jmp	 SHORT $LN96@MakeCsTota
$LN95@MakeCsTota:
  0013a	33 c0		 xor	 eax, eax
  0013c	3b fe		 cmp	 edi, esi
  0013e	0f 95 c0	 setne	 al
$LN96@MakeCsTota:
  00141	85 c0		 test	 eax, eax
$LN204@MakeCsTota:
  00143	8b 7d 90	 mov	 edi, DWORD PTR tv902[ebp]
  00146	0f 98 c0	 sets	 al
  00149	84 c0		 test	 al, al
  0014b	75 05		 jne	 SHORT $LN45@MakeCsTota
  0014d	8d 45 80	 lea	 eax, DWORD PTR __Where$242780[ebp]
  00150	eb 06		 jmp	 SHORT $LN46@MakeCsTota
$LN45@MakeCsTota:
  00152	89 5d 84	 mov	 DWORD PTR $T242785[ebp], ebx
  00155	8d 45 84	 lea	 eax, DWORD PTR $T242785[ebp]
$LN46@MakeCsTota:
  00158	83 7d d8 10	 cmp	 DWORD PTR $T189187[ebp+20], 16 ; 00000010H
  0015c	8b 30		 mov	 esi, DWORD PTR [eax]
  0015e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00165	72 0c		 jb	 SHORT $LN131@MakeCsTota
  00167	8b 55 c4	 mov	 edx, DWORD PTR $T189187[ebp]
  0016a	52		 push	 edx
  0016b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00170	83 c4 04	 add	 esp, 4
$LN131@MakeCsTota:

; 4898 : 
; 4899 : 		if(it != m_mapCsTotalGuildInfo.end())

  00173	8b 5d 8c	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  00176	3b b3 80 01 00
	00		 cmp	 esi, DWORD PTR [ebx+384]
  0017c	0f 85 99 00 00
	00		 jne	 $LN3@MakeCsTota

; 4900 : 			continue;
; 4901 : 
; 4902 : 		_CS_TOTAL_GUILD_DATA pTotalGuildData;

  00182	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pTotalGuildData$189191[ebp], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0018c	b8 01 00 00 00	 mov	 eax, 1
  00191	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax

; 4903 : 
; 4904 : 		pTotalGuildData.m_bIN_USE = TRUE;

  00194	89 85 70 ff ff
	ff		 mov	 DWORD PTR _pTotalGuildData$189191[ebp+4], eax

; 4905 : 		pTotalGuildData.m_iCsGuildID = lpMsg[iGCNT].iCsGuildID;

  0019a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 4906 : 		pTotalGuildData.m_bGuildInvolved = FALSE;
; 4907 : 		pTotalGuildData.m_iTotalScore = 0;
; 4908 : 
; 4909 : 		m_mapCsTotalGuildInfo.insert(pair<basic_string<char,char_traits<char> >,_CS_TOTAL_GUILD_DATA>(szGuildName,pTotalGuildData));

  0019d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _pTotalGuildData$189191[ebp]
  001a3	51		 push	 ecx
  001a4	89 85 74 ff ff
	ff		 mov	 DWORD PTR _pTotalGuildData$189191[ebp+8], eax
  001aa	33 c0		 xor	 eax, eax
  001ac	8d 55 e0	 lea	 edx, DWORD PTR _szGuildName$189185[ebp]
  001af	52		 push	 edx
  001b0	8d 4d 94	 lea	 ecx, DWORD PTR $T189201[ebp]
  001b3	89 85 78 ff ff
	ff		 mov	 DWORD PTR _pTotalGuildData$189191[ebp+12], eax
  001b9	89 85 7c ff ff
	ff		 mov	 DWORD PTR _pTotalGuildData$189191[ebp+16], eax
  001bf	e8 00 00 00 00	 call	 ??$?0AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@AAY0BA@DAAU_CS_TOTAL_GUILD_DATA@@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA><char (&)[16],_CS_TOTAL_GUILD_DATA &>
  001c4	6a 00		 push	 0
  001c6	50		 push	 eax
  001c7	8d 8b 7c 01 00
	00		 lea	 ecx, DWORD PTR [ebx+380]
  001cd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001d1	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
  001d6	50		 push	 eax
  001d7	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T242364[ebp]
  001dd	50		 push	 eax
  001de	8d 8b 7c 01 00
	00		 lea	 ecx, DWORD PTR [ebx+380]
  001e4	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Linsert
  001e9	83 7d a8 10	 cmp	 DWORD PTR $T189201[ebp+20], 16 ; 00000010H
  001ed	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T189201[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  001f4	72 0c		 jb	 SHORT $LN181@MakeCsTota
  001f6	8b 4d 94	 mov	 ecx, DWORD PTR $T189201[ebp]
  001f9	51		 push	 ecx
  001fa	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ff	83 c4 04	 add	 esp, 4
$LN181@MakeCsTota:
  00202	c7 45 a8 0f 00
	00 00		 mov	 DWORD PTR $T189201[ebp+20], 15 ; 0000000fH
  00209	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T189201[ebp+16], 0
  00210	c6 45 94 00	 mov	 BYTE PTR $T189201[ebp], 0

; 4910 : 	}

  00214	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
$LN3@MakeCsTota:

; 4890 : 
; 4891 : 	for(int iGCNT = 0; iGCNT < iCOUNT; iGCNT++)

  0021b	8b 5d 8c	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  0021e	83 c7 0c	 add	 edi, 12			; 0000000cH
  00221	ff 4d 88	 dec	 DWORD PTR tv653[ebp]
  00224	89 7d 90	 mov	 DWORD PTR tv902[ebp], edi
  00227	0f 85 67 fe ff
	ff		 jne	 $LL4@MakeCsTota
$LN2@MakeCsTota:

; 4911 : 
; 4912 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  0022d	8d 83 8c 01 00
	00		 lea	 eax, DWORD PTR [ebx+396]
  00233	50		 push	 eax
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 4913 : 
; 4914 : 	m_bCsTotalGuildInfoLoadOK = TRUE;
; 4915 : 	SaveCsTotalGuildInfo();

  0023a	8b cb		 mov	 ecx, ebx
  0023c	c7 83 a8 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+424], 1
  00246	e8 00 00 00 00	 call	 ?SaveCsTotalGuildInfo@CCastleSiege@@QAEXXZ ; CCastleSiege::SaveCsTotalGuildInfo

; 4916 : 	SetAllUserCsJoinSide();

  0024b	8b cb		 mov	 ecx, ebx
  0024d	e8 00 00 00 00	 call	 ?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ ; CCastleSiege::SetAllUserCsJoinSide
$LN8@MakeCsTota:

; 4917 : }

  00252	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00255	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025c	59		 pop	 ecx
  0025d	5f		 pop	 edi
  0025e	5e		 pop	 esi
  0025f	5b		 pop	 ebx
  00260	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00263	33 cd		 xor	 ecx, ebp
  00265	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026a	8b e5		 mov	 esp, ebp
  0026c	5d		 pop	 ebp
  0026d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR $T189187[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z$1:
  00008	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _pTotalGuildData$189191[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1_CS_TOTAL_GUILD_DATA@@UAE@XZ ; _CS_TOTAL_GUILD_DATA::~_CS_TOTAL_GUILD_DATA
__unwindfunclet$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z$2:
  00013	8d 4d 94	 lea	 ecx, DWORD PTR $T189201[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ
__ehhandler$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MakeCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSGUILDUNIONINFO@@H@Z ENDP ; CCastleSiege::MakeCsTotalGuildInfo
PUBLIC	??_C@_0EH@PLGDODEK@?$FLCastleSiege?$FN?5Siege?5Guild?5List?5L@ ; `string'
PUBLIC	??_C@_0EL@FNGPICNM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z ; CCastleSiege::SetCsTotalGuildInfo
;	COMDAT ??_C@_0EH@PLGDODEK@?$FLCastleSiege?$FN?5Siege?5Guild?5List?5L@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0EH@PLGDODEK@?$FLCastleSiege?$FN?5Siege?5Guild?5List?5L@ DB '[Castl'
	DB	'eSiege] Siege Guild List Load - GNAME:%s, CSGUID:%d, INVOLVED'
	DB	':%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@FNGPICNM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@
CONST	SEGMENT
??_C@_0EL@FNGPICNM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@ DB '[Castle'
	DB	'Siege] CCastleSiege::SetCsTotalGuildInfo() ERROR - iCOUNT <= '
	DB	'0 : %d', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z$4
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\castlesiege.cpp
xdata$x	ENDS
;	COMDAT ?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z
_TEXT	SEGMENT
$T243129 = -136						; size = 8
$T243130 = -128						; size = 8
_stTEMP$189330 = -120					; size = 20
_pTotalGuildData$189290 = -120				; size = 20
tv1036 = -100						; size = 4
tv130 = -100						; size = 4
_this$GSCopy$ = -96					; size = 4
$T189312 = -92						; size = 48
$T189300 = -92						; size = 48
_strGuildName$189329 = -44				; size = 28
_szGuildName$189289 = -32				; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpMsg$ = 8						; size = 4
_iCOUNT$ = 12						; size = 4
?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z PROC ; CCastleSiege::SetCsTotalGuildInfo, COMDAT
; _this$ = ecx

; 4989 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 7d 08	 mov	 edi, DWORD PTR _lpMsg$[ebp]
  0002e	8b d9		 mov	 ebx, ecx

; 5018 : 			m_mapCsBasicGuildInfo.insert(pair<basic_string<char,char_traits<char> >,_CS_TOTAL_GUILD_DATA>(szGuildName,pTotalGuildData));

  00030	89 5d a0	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  00033	85 ff		 test	 edi, edi
  00035	0f 84 f2 02 00
	00		 je	 $LN10@SetCsTotal

; 4990 : 	if(lpMsg == NULL)
; 4991 : 		return;
; 4992 : 
; 4993 : 	if(iCOUNT <= 0)

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _iCOUNT$[ebp]
  0003e	85 c0		 test	 eax, eax
  00040	7f 16		 jg	 SHORT $LN337@SetCsTotal

; 4994 : 	{
; 4995 : 		LogAddC(2,"[CastleSiege] CCastleSiege::SetCsTotalGuildInfo() ERROR - iCOUNT <= 0 : %d", iCOUNT);

  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@FNGPICNM@?$FLCastleSiege?$FN?5CCastleSiege?3?3SetC@
  00048	6a 02		 push	 2
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4996 : 		return;

  00053	e9 d5 02 00 00	 jmp	 $LN10@SetCsTotal
$LN337@SetCsTotal:

; 4997 : 	}
; 4998 : 
; 4999 : 	for(int iGCNT = 0; iGCNT < iCOUNT; iGCNT++)

  00058	83 c7 0c	 add	 edi, 12			; 0000000cH
  0005b	89 45 9c	 mov	 DWORD PTR tv130[ebp], eax
$LN7@SetCsTotal:

; 5000 : 	{
; 5001 : 		char szGuildName[0x10] = {0};
; 5002 : 
; 5003 : 		memcpy(szGuildName,lpMsg[iGCNT].szGuildName,8);

  0005e	8b 4f f4	 mov	 ecx, DWORD PTR [edi-12]
  00061	8b 57 f8	 mov	 edx, DWORD PTR [edi-8]
  00064	33 c0		 xor	 eax, eax
  00066	89 45 e1	 mov	 DWORD PTR _szGuildName$189289[ebp+1], eax
  00069	89 45 e5	 mov	 DWORD PTR _szGuildName$189289[ebp+5], eax
  0006c	89 45 e9	 mov	 DWORD PTR _szGuildName$189289[ebp+9], eax
  0006f	66 89 45 ed	 mov	 WORD PTR _szGuildName$189289[ebp+13], ax
  00073	88 45 ef	 mov	 BYTE PTR _szGuildName$189289[ebp+15], al
  00076	89 4d e0	 mov	 DWORD PTR _szGuildName$189289[ebp], ecx
  00079	89 55 e4	 mov	 DWORD PTR _szGuildName$189289[ebp+4], edx

; 5004 : 		_CS_TOTAL_GUILD_DATA pTotalGuildData;

  0007c	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _pTotalGuildData$189290[ebp], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@

; 5005 : 		pTotalGuildData.m_bIN_USE = TRUE;
; 5006 : 		pTotalGuildData.m_iCsGuildID = lpMsg[iGCNT].iCsGuildID;

  00083	8b 77 fc	 mov	 esi, DWORD PTR [edi-4]

; 5007 : 		pTotalGuildData.m_bGuildInvolved = lpMsg[iGCNT].iGuildInvolved;

  00086	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00088	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax

; 5008 : 
; 5009 : 		EnterCriticalSection(&m_critCsTotalGuildInfo);

  0008b	8b 45 a0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0008e	05 8c 01 00 00	 add	 eax, 396		; 0000018cH
  00093	50		 push	 eax
  00094	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR _pTotalGuildData$189290[ebp+4], 1
  0009b	89 75 90	 mov	 DWORD PTR _pTotalGuildData$189290[ebp+8], esi
  0009e	89 5d 94	 mov	 DWORD PTR _pTotalGuildData$189290[ebp+12], ebx
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5010 : 
; 5011 : 		m_mapCsTotalGuildInfo.insert(pair<basic_string<char,char_traits<char> >,_CS_TOTAL_GUILD_DATA>(szGuildName,pTotalGuildData));

  000a7	8d 45 e0	 lea	 eax, DWORD PTR _szGuildName$189289[ebp]
  000aa	c7 45 b8 0f 00
	00 00		 mov	 DWORD PTR $T189300[ebp+20], 15 ; 0000000fH
  000b1	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T189300[ebp+16], 0
  000b8	c6 45 a4 00	 mov	 BYTE PTR $T189300[ebp], 0
  000bc	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  000bf	90		 npad	 1
$LL331@SetCsTotal:
  000c0	8a 10		 mov	 dl, BYTE PTR [eax]
  000c2	40		 inc	 eax
  000c3	84 d2		 test	 dl, dl
  000c5	75 f9		 jne	 SHORT $LL331@SetCsTotal
  000c7	2b c1		 sub	 eax, ecx
  000c9	50		 push	 eax
  000ca	8d 45 e0	 lea	 eax, DWORD PTR _szGuildName$189289[ebp]
  000cd	50		 push	 eax
  000ce	8d 4d a4	 lea	 ecx, DWORD PTR $T189300[ebp]
  000d1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000d6	8b 4d 98	 mov	 ecx, DWORD PTR _pTotalGuildData$189290[ebp+16]
  000d9	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T189300[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  000e0	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR $T189300[ebp+32], 1
  000e7	89 75 c8	 mov	 DWORD PTR $T189300[ebp+36], esi
  000ea	89 5d cc	 mov	 DWORD PTR $T189300[ebp+40], ebx
  000ed	89 4d d0	 mov	 DWORD PTR $T189300[ebp+44], ecx
  000f0	8b 4d a0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000f3	6a 00		 push	 0
  000f5	8d 55 a4	 lea	 edx, DWORD PTR $T189300[ebp]
  000f8	52		 push	 edx
  000f9	81 c1 7c 01 00
	00		 add	 ecx, 380		; 0000017cH
  000ff	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00103	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
  00108	8b 4d a0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0010b	50		 push	 eax
  0010c	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T243129[ebp]
  00112	50		 push	 eax
  00113	81 c1 7c 01 00
	00		 add	 ecx, 380		; 0000017cH
  00119	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Linsert
  0011e	83 7d b8 10	 cmp	 DWORD PTR $T189300[ebp+20], 16 ; 00000010H
  00122	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00126	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T189300[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0012d	72 0c		 jb	 SHORT $LN88@SetCsTotal
  0012f	8b 4d a4	 mov	 ecx, DWORD PTR $T189300[ebp]
  00132	51		 push	 ecx
  00133	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00138	83 c4 04	 add	 esp, 4
$LN88@SetCsTotal:

; 5012 : 
; 5013 : 		LeaveCriticalSection(&m_critCsTotalGuildInfo);

  0013b	8b 45 a0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0013e	05 8c 01 00 00	 add	 eax, 396		; 0000018cH
  00143	50		 push	 eax
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 5014 : 
; 5015 : 		if(lpMsg[iGCNT].iGuildInvolved == TRUE)

  0014a	83 3f 01	 cmp	 DWORD PTR [edi], 1
  0014d	0f 85 ab 00 00
	00		 jne	 $LN4@SetCsTotal

; 5016 : 		{
; 5017 : 			EnterCriticalSection(&m_critCsBasicGuildInfo);

  00153	8b 45 a0	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00156	05 64 01 00 00	 add	 eax, 356		; 00000164H
  0015b	50		 push	 eax
  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5018 : 			m_mapCsBasicGuildInfo.insert(pair<basic_string<char,char_traits<char> >,_CS_TOTAL_GUILD_DATA>(szGuildName,pTotalGuildData));

  00162	8d 45 e0	 lea	 eax, DWORD PTR _szGuildName$189289[ebp]
  00165	c7 45 b8 0f 00
	00 00		 mov	 DWORD PTR $T189312[ebp+20], 15 ; 0000000fH
  0016c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T189312[ebp+16], 0
  00173	c6 45 a4 00	 mov	 BYTE PTR $T189312[ebp], 0
  00177	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0017a	8d 9b 00 00 00
	00		 npad	 6
$LL332@SetCsTotal:
  00180	8a 10		 mov	 dl, BYTE PTR [eax]
  00182	40		 inc	 eax
  00183	84 d2		 test	 dl, dl
  00185	75 f9		 jne	 SHORT $LL332@SetCsTotal
  00187	2b c1		 sub	 eax, ecx
  00189	50		 push	 eax
  0018a	8d 55 e0	 lea	 edx, DWORD PTR _szGuildName$189289[ebp]
  0018d	52		 push	 edx
  0018e	8d 4d a4	 lea	 ecx, DWORD PTR $T189312[ebp]
  00191	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00196	8b 45 98	 mov	 eax, DWORD PTR _pTotalGuildData$189290[ebp+16]
  00199	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T189312[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  001a0	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR $T189312[ebp+32], 1
  001a7	89 75 c8	 mov	 DWORD PTR $T189312[ebp+36], esi
  001aa	89 5d cc	 mov	 DWORD PTR $T189312[ebp+40], ebx
  001ad	89 45 d0	 mov	 DWORD PTR $T189312[ebp+44], eax
  001b0	8b 5d a0	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  001b3	6a 00		 push	 0
  001b5	8d 4d a4	 lea	 ecx, DWORD PTR $T189312[ebp]
  001b8	51		 push	 ecx
  001b9	8d 8b 54 01 00
	00		 lea	 ecx, DWORD PTR [ebx+340]
  001bf	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001c3	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA> >
  001c8	50		 push	 eax
  001c9	8d 55 80	 lea	 edx, DWORD PTR $T243130[ebp]
  001cc	52		 push	 edx
  001cd	8d 8b 54 01 00
	00		 lea	 ecx, DWORD PTR [ebx+340]
  001d3	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@@2@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,_CS_TOTAL_GUILD_DATA,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,_CS_TOTAL_GUILD_DATA> >,0> >::_Linsert
  001d8	83 7d b8 10	 cmp	 DWORD PTR $T189312[ebp+20], 16 ; 00000010H
  001dc	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T189312[ebp+28], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  001e3	72 0c		 jb	 SHORT $LN167@SetCsTotal
  001e5	8b 45 a4	 mov	 eax, DWORD PTR $T189312[ebp]
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ee	83 c4 04	 add	 esp, 4
$LN167@SetCsTotal:

; 5019 : 			LeaveCriticalSection(&m_critCsBasicGuildInfo);

  001f1	8d 83 64 01 00
	00		 lea	 eax, DWORD PTR [ebx+356]
  001f7	50		 push	 eax
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN4@SetCsTotal:

; 4997 : 	}
; 4998 : 
; 4999 : 	for(int iGCNT = 0; iGCNT < iCOUNT; iGCNT++)

  001fe	83 c7 10	 add	 edi, 16			; 00000010H
  00201	ff 4d 9c	 dec	 DWORD PTR tv130[ebp]

; 5020 : 		}
; 5021 : 	}

  00204	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0020b	0f 85 4d fe ff
	ff		 jne	 $LN7@SetCsTotal

; 5022 : 
; 5023 : 	m_bCsBasicGuildInfoLoadOK = TRUE;

  00211	8b 5d a0	 mov	 ebx, DWORD PTR _this$GSCopy$[ebp]
  00214	b8 01 00 00 00	 mov	 eax, 1

; 5024 : 	m_bCsTotalGuildInfoLoadOK = TRUE;
; 5025 : 
; 5026 : 	SetAllUserCsJoinSide();

  00219	8b cb		 mov	 ecx, ebx
  0021b	89 83 a4 01 00
	00		 mov	 DWORD PTR [ebx+420], eax
  00221	89 83 a8 01 00
	00		 mov	 DWORD PTR [ebx+424], eax
  00227	e8 00 00 00 00	 call	 ?SetAllUserCsJoinSide@CCastleSiege@@QAEXXZ ; CCastleSiege::SetAllUserCsJoinSide

; 5027 : 
; 5028 : 	EnterCriticalSection(&m_critCsTotalGuildInfo);

  0022c	8d b3 8c 01 00
	00		 lea	 esi, DWORD PTR [ebx+396]
  00232	56		 push	 esi
  00233	89 75 9c	 mov	 DWORD PTR tv1036[ebp], esi
  00236	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 5029 : 
; 5030 : 	_CS_TOTAL_GUILD_DATA_MAP::iterator it2 = m_mapCsTotalGuildInfo.begin();

  0023c	8b 83 80 01 00
	00		 mov	 eax, DWORD PTR [ebx+384]
  00242	8b 38		 mov	 edi, DWORD PTR [eax]

; 5031 : 
; 5032 : 	for(int iSize = m_mapCsTotalGuildInfo.size();it2 != m_mapCsTotalGuildInfo.end(); it2++)

  00244	3b f8		 cmp	 edi, eax
  00246	0f 84 da 00 00
	00		 je	 $LN1@SetCsTotal
  0024c	8d 64 24 00	 npad	 4
$LL205@SetCsTotal:

; 5033 : 	{
; 5034 : 		basic_string<char,char_traits<char> > strGuildName = it2->first;

  00250	6a ff		 push	 -1
  00252	6a 00		 push	 0
  00254	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00257	56		 push	 esi
  00258	8d 4d d4	 lea	 ecx, DWORD PTR _strGuildName$189329[ebp]
  0025b	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _strGuildName$189329[ebp+20], 15 ; 0000000fH
  00262	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _strGuildName$189329[ebp+16], 0
  00269	c6 45 d4 00	 mov	 BYTE PTR _strGuildName$189329[ebp], 0
  0026d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 5035 : 
; 5036 : 		_CS_TOTAL_GUILD_DATA stTEMP = it2->second;

  00272	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00275	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00278	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0027b	89 4d 8c	 mov	 DWORD PTR _stTEMP$189330[ebp+4], ecx
  0027e	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00281	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00288	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _stTEMP$189330[ebp], OFFSET ??_7_CS_TOTAL_GUILD_DATA@@6B@
  0028f	89 45 90	 mov	 DWORD PTR _stTEMP$189330[ebp+8], eax
  00292	89 4d 94	 mov	 DWORD PTR _stTEMP$189330[ebp+12], ecx
  00295	89 55 98	 mov	 DWORD PTR _stTEMP$189330[ebp+16], edx

; 5037 : 
; 5038 : 		LogAddTD("[CastleSiege] Siege Guild List Load - GNAME:%s, CSGUID:%d, INVOLVED:%d",
; 5039 : 			&strGuildName[0], stTEMP.m_iCsGuildID, stTEMP.m_bGuildInvolved);

  00298	8b 55 d4	 mov	 edx, DWORD PTR _strGuildName$189329[ebp]
  0029b	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  002a0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002a4	39 75 e8	 cmp	 DWORD PTR _strGuildName$189329[ebp+20], esi
  002a7	73 03		 jae	 SHORT $LN298@SetCsTotal
  002a9	8d 55 d4	 lea	 edx, DWORD PTR _strGuildName$189329[ebp]
$LN298@SetCsTotal:
  002ac	51		 push	 ecx
  002ad	50		 push	 eax
  002ae	52		 push	 edx
  002af	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@PLGDODEK@?$FLCastleSiege?$FN?5Siege?5Guild?5List?5L@
  002b4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002ba	83 c4 10	 add	 esp, 16			; 00000010H

; 5040 : 	}

  002bd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002c4	39 75 e8	 cmp	 DWORD PTR _strGuildName$189329[ebp+20], esi
  002c7	72 0c		 jb	 SHORT $LN311@SetCsTotal
  002c9	8b 45 d4	 mov	 eax, DWORD PTR _strGuildName$189329[ebp]
  002cc	50		 push	 eax
  002cd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002d2	83 c4 04	 add	 esp, 4
$LN311@SetCsTotal:

; 5031 : 
; 5032 : 	for(int iSize = m_mapCsTotalGuildInfo.size();it2 != m_mapCsTotalGuildInfo.end(); it2++)

  002d5	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  002d9	75 3c		 jne	 SHORT $LN330@SetCsTotal
  002db	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  002de	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  002e2	75 18		 jne	 SHORT $LN326@SetCsTotal
  002e4	8b f8		 mov	 edi, eax
  002e6	8b 07		 mov	 eax, DWORD PTR [edi]
  002e8	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  002ec	75 29		 jne	 SHORT $LN330@SetCsTotal
  002ee	8b ff		 npad	 2
$LL220@SetCsTotal:
  002f0	8b f8		 mov	 edi, eax
  002f2	8b 07		 mov	 eax, DWORD PTR [edi]
  002f4	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  002f8	74 f6		 je	 SHORT $LL220@SetCsTotal
  002fa	eb 1b		 jmp	 SHORT $LN330@SetCsTotal
$LN326@SetCsTotal:
  002fc	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  002ff	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  00303	75 10		 jne	 SHORT $LN203@SetCsTotal
$LL204@SetCsTotal:
  00305	3b 78 08	 cmp	 edi, DWORD PTR [eax+8]
  00308	75 0b		 jne	 SHORT $LN203@SetCsTotal
  0030a	8b f8		 mov	 edi, eax
  0030c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0030f	80 78 3d 00	 cmp	 BYTE PTR [eax+61], 0
  00313	74 f0		 je	 SHORT $LL204@SetCsTotal
$LN203@SetCsTotal:
  00315	8b f8		 mov	 edi, eax
$LN330@SetCsTotal:
  00317	3b bb 80 01 00
	00		 cmp	 edi, DWORD PTR [ebx+384]
  0031d	0f 85 2d ff ff
	ff		 jne	 $LL205@SetCsTotal
  00323	8b 75 9c	 mov	 esi, DWORD PTR tv1036[ebp]
$LN1@SetCsTotal:

; 5041 : 
; 5042 : 	LeaveCriticalSection(&m_critCsTotalGuildInfo);

  00326	56		 push	 esi
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN10@SetCsTotal:

; 5043 : }

  0032d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00330	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00337	59		 pop	 ecx
  00338	5f		 pop	 edi
  00339	5e		 pop	 esi
  0033a	5b		 pop	 ebx
  0033b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033e	33 cd		 xor	 ecx, ebp
  00340	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00345	8b e5		 mov	 esp, ebp
  00347	5d		 pop	 ebp
  00348	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z$0:
  00000	8d 4d 88	 lea	 ecx, DWORD PTR _pTotalGuildData$189290[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_CS_TOTAL_GUILD_DATA@@UAE@XZ ; _CS_TOTAL_GUILD_DATA::~_CS_TOTAL_GUILD_DATA
__unwindfunclet$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z$1:
  00008	8d 4d a4	 lea	 ecx, DWORD PTR $T189300[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ
__unwindfunclet$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z$2:
  00010	8d 4d a4	 lea	 ecx, DWORD PTR $T189312[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U_CS_TOTAL_GUILD_DATA@@@std@@QAE@XZ
__unwindfunclet$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z$3:
  00018	8d 4d d4	 lea	 ecx, DWORD PTR _strGuildName$189329[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z$4:
  00020	8d 4d 88	 lea	 ecx, DWORD PTR _stTEMP$189330[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1_CS_TOTAL_GUILD_DATA@@UAE@XZ ; _CS_TOTAL_GUILD_DATA::~_CS_TOTAL_GUILD_DATA
__ehhandler$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z:
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetCsTotalGuildInfo@CCastleSiege@@QAEXPAUCSP_CSLOADTOTALGUILDINFO@@H@Z ENDP ; CCastleSiege::SetCsTotalGuildInfo
PUBLIC	??_C@_0DN@ONMLNNAO@?$FLCastleSiege?$FN?5Castle?5Winner?5Has?5@ ; `string'
PUBLIC	??_C@_0DK@LBPHFGGE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@ ; `string'
PUBLIC	?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z	; CCastleSiege::OperateGmCommand
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
;	COMDAT ??_C@_0DN@ONMLNNAO@?$FLCastleSiege?$FN?5Castle?5Winner?5Has?5@
CONST	SEGMENT
??_C@_0DN@ONMLNNAO@?$FLCastleSiege?$FN?5Castle?5Winner?5Has?5@ DB '[Castl'
	DB	'eSiege] Castle Winner Has been Changed - GM (GUILD:%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@LBPHFGGE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
CONST	SEGMENT
??_C@_0DK@LBPHFGGE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@ DB '[Castle'
	DB	'Siege] CCastleSiege::Init() - CheckSync() == FALSE', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_bGuildInvolved$189766 = 11				; size = 1
_iGmCommand$ = 12					; size = 4
_lpParam$ = 16						; size = 4
_btCsJoinSide$189765 = 19				; size = 1
?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z PROC	; CCastleSiege::OperateGmCommand, COMDAT
; _this$ = ecx

; 5454 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 5455 : 	if(gObjIsConnected(iIndex) == FALSE)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iIndex$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	0f 84 3c 06 00
	00		 je	 $LN1@OperateGmC

; 5456 : 		return;
; 5457 : 
; 5458 : 	switch(iGmCommand)

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _iGmCommand$[ebp]
  0001e	83 f8 08	 cmp	 eax, 8
  00021	0f 87 30 06 00
	00		 ja	 $LN1@OperateGmC
  00027	57		 push	 edi
  00028	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN60@OperateGmC[eax*4]
$LN38@OperateGmC:

; 5459 : 	{
; 5460 : 	case 0:
; 5461 : 		{
; 5462 : 			char * lpszCastleOwnerGuild = (char *)lpParam;
; 5463 : 
; 5464 : 			if(lpszCastleOwnerGuild == NULL)

  0002f	8b 55 10	 mov	 edx, DWORD PTR _lpParam$[ebp]
  00032	85 d2		 test	 edx, edx

; 5465 : 			{
; 5466 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,128)));
; 5467 : 				return;

  00034	0f 84 7e 00 00
	00		 je	 $LN59@OperateGmC

; 5468 : 			}
; 5469 : 
; 5470 : 			if(strcmp(lpszCastleOwnerGuild,"") != NULL)

  0003a	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0003f	8b c2		 mov	 eax, edx
$LL44@OperateGmC:
  00041	8a 08		 mov	 cl, BYTE PTR [eax]
  00043	3a 0f		 cmp	 cl, BYTE PTR [edi]
  00045	75 1a		 jne	 SHORT $LN45@OperateGmC
  00047	84 c9		 test	 cl, cl
  00049	74 12		 je	 SHORT $LN46@OperateGmC
  0004b	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0004e	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  00051	75 0e		 jne	 SHORT $LN45@OperateGmC
  00053	83 c0 02	 add	 eax, 2
  00056	83 c7 02	 add	 edi, 2
  00059	84 c9		 test	 cl, cl
  0005b	75 e4		 jne	 SHORT $LL44@OperateGmC
$LN46@OperateGmC:
  0005d	33 c0		 xor	 eax, eax
  0005f	eb 05		 jmp	 SHORT $LN47@OperateGmC
$LN45@OperateGmC:
  00061	1b c0		 sbb	 eax, eax
  00063	83 d8 ff	 sbb	 eax, -1
$LN47@OperateGmC:
  00066	85 c0		 test	 eax, eax
  00068	74 45		 je	 SHORT $LN36@OperateGmC

; 5471 : 			{
; 5472 : 				memset(m_szCastleOwnerGuild,0x00,sizeof(m_szCastleOwnerGuild));

  0006a	8d 86 d7 00 00
	00		 lea	 eax, DWORD PTR [esi+215]
  00070	33 c9		 xor	 ecx, ecx
  00072	89 08		 mov	 DWORD PTR [eax], ecx
  00074	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00077	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0007a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 5473 : 				memcpy(m_szCastleOwnerGuild,lpszCastleOwnerGuild,8);

  0007d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0007f	89 08		 mov	 DWORD PTR [eax], ecx
  00081	8b 52 04	 mov	 edx, DWORD PTR [edx+4]

; 5474 : 				m_btIsCastleOccupied = TRUE;
; 5475 : 
; 5476 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,129)),m_szCastleOwnerGuild);

  00084	50		 push	 eax
  00085	68 81 0c 00 00	 push	 3201			; 00000c81H
  0008a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0008f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00092	c6 86 d6 00 00
	00 01		 mov	 BYTE PTR [esi+214], 1
  00099	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0009e	50		 push	 eax
  0009f	53		 push	 ebx
  000a0	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  000ab	5d		 pop	 ebp
  000ac	c2 0c 00	 ret	 12			; 0000000cH
$LN36@OperateGmC:

; 5477 : 			}
; 5478 : 			else
; 5479 : 			{
; 5480 : 				strcpy(m_szCastleOwnerGuild,"");

  000af	66 c7 86 d6 00
	00 00 00 00	 mov	 WORD PTR [esi+214], 0
$LN59@OperateGmC:

; 5481 : 				m_btIsCastleOccupied = FALSE;
; 5482 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,128)));

  000b8	68 80 0c 00 00	 push	 3200			; 00000c80H

; 5483 : 			}
; 5484 : 		}
; 5485 : 		break;

  000bd	e9 80 05 00 00	 jmp	 $LN57@OperateGmC
$LN34@OperateGmC:

; 5486 : 	case 1:
; 5487 : 		{
; 5488 : 			GetLocalTime(&m_tmStartDate);

  000c2	8d be b4 00 00
	00		 lea	 edi, DWORD PTR [esi+180]
  000c8	57		 push	 edi
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 5489 : 			m_tmStartDate.wHour = 0;
; 5490 : 			m_tmStartDate.wMinute = 0;
; 5491 : 			m_tmStartDate.wSecond = 0;

  000cf	33 d2		 xor	 edx, edx
  000d1	33 c0		 xor	 eax, eax
  000d3	89 86 bc 00 00
	00		 mov	 DWORD PTR [esi+188], eax
  000d9	66 89 96 c0 00
	00 00		 mov	 WORD PTR [esi+192], dx

; 5492 : 
; 5493 : 			m_tmEndDate = m_tmStartDate;

  000e0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000e2	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000e5	8d 86 c4 00 00
	00		 lea	 eax, DWORD PTR [esi+196]
  000eb	89 08		 mov	 DWORD PTR [eax], ecx
  000ed	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000f0	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000f3	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]

; 5494 : 
; 5495 : 			GetNextDay(&m_tmEndDate,m_iCastleSiegeCycle,0,0,0);

  000f6	33 ff		 xor	 edi, edi
  000f8	57		 push	 edi
  000f9	57		 push	 edi
  000fa	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000fd	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00100	57		 push	 edi
  00101	51		 push	 ecx
  00102	50		 push	 eax
  00103	8b ce		 mov	 ecx, esi
  00105	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00108	e8 00 00 00 00	 call	 ?GetNextDay@CCastleSiege@@QAEXPAU_SYSTEMTIME@@HHHH@Z ; CCastleSiege::GetNextDay

; 5496 : 
; 5497 : 			m_bFixCastleCycleStartDate = FALSE;
; 5498 : 			m_btIsSiegeEnded = FALSE;
; 5499 : 
; 5500 : 			//CreateDbNPC_INS();
; 5501 : 			GS_GDReqResetRegSiegeInfo(m_iMapSvrGroup);

  0010d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00110	52		 push	 edx
  00111	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  00114	c6 86 d5 00 00
	00 00		 mov	 BYTE PTR [esi+213], 0
  0011b	e8 00 00 00 00	 call	 ?GS_GDReqResetRegSiegeInfo@@YAXH@Z ; GS_GDReqResetRegSiegeInfo
  00120	83 c4 04	 add	 esp, 4

; 5502 : 
; 5503 : 			if(CheckSync() == FALSE)

  00123	8b ce		 mov	 ecx, esi
  00125	e8 00 00 00 00	 call	 ?CheckSync@CCastleSiege@@QAEHXZ ; CCastleSiege::CheckSync
  0012a	85 c0		 test	 eax, eax
  0012c	75 1a		 jne	 SHORT $LN33@OperateGmC

; 5504 : 			{
; 5505 : 				LogAddC(2,"[CastleSiege] CCastleSiege::Init() - CheckSync() == FALSE");

  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@LBPHFGGE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
  00133	6a 02		 push	 2
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0013b	83 c4 08	 add	 esp, 8

; 5506 : 				//MsgBox("[CastleSiege] CCastleSiege::Init() - CheckSync() == FALSE");
; 5507 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,130)));

  0013e	68 82 0c 00 00	 push	 3202			; 00000c82H

; 5508 : 				return;

  00143	e9 fa 04 00 00	 jmp	 $LN57@OperateGmC
$LN33@OperateGmC:

; 5509 : 			}
; 5510 : 
; 5511 : 			m_bDoRun = TRUE;

  00148	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1

; 5512 : 			m_dwNPC_DBSAVE_TICK_COUNT = GetTickCount();

  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00155	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 5513 : 			m_dwCALC_LEFTSIEGE_TICK_COUNT = NULL;

  0015b	89 be 94 00 00
	00		 mov	 DWORD PTR [esi+148], edi

; 5514 : 			m_dwEVENT_MSG_TICK_COUNT = NULL;

  00161	89 be 98 00 00
	00		 mov	 DWORD PTR [esi+152], edi

; 5515 : 			m_dwCHECK_GATE_ALIVE_COUNT = NULL;

  00167	89 be 9c 00 00
	00		 mov	 DWORD PTR [esi+156], edi

; 5516 : 
; 5517 : 			MsgOutput(iIndex,lMsg.Get(MSGGET(12,131)));

  0016d	68 83 0c 00 00	 push	 3203			; 00000c83H

; 5518 : 		}
; 5519 : 		break;

  00172	e9 cb 04 00 00	 jmp	 $LN57@OperateGmC
$LN32@OperateGmC:

; 5520 : 	case 2:
; 5521 : 		{
; 5522 : 			SetState(CASTLESIEGE_STATE_REGMARK,TRUE);

  00177	6a 01		 push	 1
  00179	6a 03		 push	 3
  0017b	8b ce		 mov	 ecx, esi
  0017d	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState

; 5523 : 			MsgOutput(iIndex,lMsg.Get(MSGGET(12,132)));

  00182	68 84 0c 00 00	 push	 3204			; 00000c84H

; 5524 : 		}
; 5525 : 		break;

  00187	e9 b6 04 00 00	 jmp	 $LN57@OperateGmC
$LN31@OperateGmC:

; 5526 : 	case 3:
; 5527 : 		{
; 5528 : 			m_btIsSiegeGuildList = FALSE;
; 5529 : 			SetState(CASTLESIEGE_STATE_NOTIFY,TRUE);

  0018c	6a 01		 push	 1
  0018e	6a 05		 push	 5
  00190	8b ce		 mov	 ecx, esi
  00192	c6 86 d4 00 00
	00 00		 mov	 BYTE PTR [esi+212], 0
  00199	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState

; 5530 : 			MsgOutput(iIndex,lMsg.Get(MSGGET(12,133)));

  0019e	68 85 0c 00 00	 push	 3205			; 00000c85H

; 5531 : 		}
; 5532 : 		break;

  001a3	e9 9a 04 00 00	 jmp	 $LN57@OperateGmC
$LN30@OperateGmC:

; 5533 : 	case 4:
; 5534 : 		{
; 5535 : 			SetState(CASTLESIEGE_STATE_STARTSIEGE,TRUE);

  001a8	6a 01		 push	 1
  001aa	6a 07		 push	 7
  001ac	8b ce		 mov	 ecx, esi
  001ae	e8 00 00 00 00	 call	 ?SetState@CCastleSiege@@QAEXHH@Z ; CCastleSiege::SetState

; 5536 : 			MsgOutput(iIndex,lMsg.Get(MSGGET(12,134)));

  001b3	68 86 0c 00 00	 push	 3206			; 00000c86H

; 5537 : 		}
; 5538 : 		break;

  001b8	e9 85 04 00 00	 jmp	 $LN57@OperateGmC
$LN29@OperateGmC:

; 5539 : 	case 5:
; 5540 : 		{
; 5541 : 			if(m_iCastleSiegeState == CASTLESIEGE_STATE_STARTSIEGE)

  001bd	83 7e 28 07	 cmp	 DWORD PTR [esi+40], 7

; 5542 : 			{
; 5543 : 				m_iCS_REMAIN_MSEC = NULL;
; 5544 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,135)));

  001c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001c6	75 11		 jne	 SHORT $LN28@OperateGmC
  001c8	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  001cf	68 87 0c 00 00	 push	 3207			; 00000c87H

; 5545 : 			}
; 5546 : 			else

  001d4	e9 6e 04 00 00	 jmp	 $LN58@OperateGmC
$LN28@OperateGmC:

; 5547 : 			{
; 5548 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,136)));

  001d9	68 88 0c 00 00	 push	 3208			; 00000c88H

; 5549 : 			}
; 5550 : 		}
; 5551 : 		break;

  001de	e9 64 04 00 00	 jmp	 $LN58@OperateGmC
$LN26@OperateGmC:

; 5552 : 	case 6:
; 5553 : 		{
; 5554 : 			if(strcmp(m_szCastleOwnerGuild,"") == NULL)

  001e3	8d 96 d7 00 00
	00		 lea	 edx, DWORD PTR [esi+215]
  001e9	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  001ee	8b c2		 mov	 eax, edx
$LL48@OperateGmC:
  001f0	8a 08		 mov	 cl, BYTE PTR [eax]
  001f2	3a 0e		 cmp	 cl, BYTE PTR [esi]
  001f4	75 1a		 jne	 SHORT $LN49@OperateGmC
  001f6	84 c9		 test	 cl, cl
  001f8	74 12		 je	 SHORT $LN50@OperateGmC
  001fa	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001fd	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00200	75 0e		 jne	 SHORT $LN49@OperateGmC
  00202	83 c0 02	 add	 eax, 2
  00205	83 c6 02	 add	 esi, 2
  00208	84 c9		 test	 cl, cl
  0020a	75 e4		 jne	 SHORT $LL48@OperateGmC
$LN50@OperateGmC:
  0020c	33 c0		 xor	 eax, eax
  0020e	eb 05		 jmp	 SHORT $LN51@OperateGmC
$LN49@OperateGmC:
  00210	1b c0		 sbb	 eax, eax
  00212	83 d8 ff	 sbb	 eax, -1
$LN51@OperateGmC:

; 5555 : 			{
; 5556 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,137)));

  00215	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0021a	85 c0		 test	 eax, eax
  0021c	75 0a		 jne	 SHORT $LN25@OperateGmC
  0021e	68 89 0c 00 00	 push	 3209			; 00000c89H

; 5557 : 			}
; 5558 : 			else

  00223	e9 1f 04 00 00	 jmp	 $LN58@OperateGmC
$LN25@OperateGmC:

; 5559 : 			{
; 5560 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,138)),m_szCastleOwnerGuild);

  00228	52		 push	 edx
  00229	68 8a 0c 00 00	 push	 3210			; 00000c8aH
  0022e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00233	50		 push	 eax
  00234	53		 push	 ebx
  00235	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023d	5f		 pop	 edi
  0023e	5e		 pop	 esi
  0023f	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  00240	5d		 pop	 ebp
  00241	c2 0c 00	 ret	 12			; 0000000cH
$LN23@OperateGmC:

; 5561 : 			}
; 5562 : 		}
; 5563 : 		break;
; 5564 : 	case 7:
; 5565 : 		{
; 5566 : 			if(m_bDoRun == FALSE)

  00244	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0

; 5567 : 			{
; 5568 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,139)));
; 5569 : 				return;

  00248	74 10		 je	 SHORT $LN19@OperateGmC

; 5570 : 			}
; 5571 : 
; 5572 : 			switch(m_iCastleSiegeState)

  0024a	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0024d	40		 inc	 eax
  0024e	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00251	77 07		 ja	 SHORT $LN19@OperateGmC
  00253	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN61@OperateGmC[eax*4]
$LN19@OperateGmC:

; 5573 : 			{
; 5574 : 			case CASTLESIEGE_STATE_NONE:
; 5575 : 				{
; 5576 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,139)));

  0025a	68 8b 0c 00 00	 push	 3211			; 00000c8bH

; 5577 : 				}
; 5578 : 				break;

  0025f	e9 de 03 00 00	 jmp	 $LN57@OperateGmC
$LN18@OperateGmC:

; 5579 : 			case CASTLESIEGE_STATE_IDLE_1:
; 5580 : 				{
; 5581 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,140)));

  00264	68 8c 0c 00 00	 push	 3212			; 00000c8cH

; 5582 : 				}
; 5583 : 				break;

  00269	e9 d4 03 00 00	 jmp	 $LN57@OperateGmC
$LN17@OperateGmC:

; 5584 : 			case CASTLESIEGE_STATE_REGSIEGE:
; 5585 : 				{
; 5586 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,141)),
; 5587 : 						(m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60,((m_iCS_REMAIN_MSEC / 1000) % 3600) % 60);

  0026e	8b 76 68	 mov	 esi, DWORD PTR [esi+104]
  00271	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00276	f7 ee		 imul	 esi
  00278	c1 fa 06	 sar	 edx, 6
  0027b	8b c2		 mov	 eax, edx
  0027d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00280	03 c2		 add	 eax, edx
  00282	99		 cdq
  00283	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00288	f7 f9		 idiv	 ecx
  0028a	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH
  0028f	8b c8		 mov	 ecx, eax
  00291	8b c2		 mov	 eax, edx
  00293	99		 cdq
  00294	f7 fe		 idiv	 esi
  00296	52		 push	 edx
  00297	50		 push	 eax
  00298	51		 push	 ecx
  00299	68 8d 0c 00 00	 push	 3213			; 00000c8dH
  0029e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  002a3	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  002a8	50		 push	 eax
  002a9	53		 push	 ebx
  002aa	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  002af	83 c4 14	 add	 esp, 20			; 00000014H
  002b2	5f		 pop	 edi
  002b3	5e		 pop	 esi
  002b4	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  002b5	5d		 pop	 ebp
  002b6	c2 0c 00	 ret	 12			; 0000000cH
$LN16@OperateGmC:

; 5588 : 				}
; 5589 : 				break;
; 5590 : 			case CASTLESIEGE_STATE_IDLE_2:
; 5591 : 				{
; 5592 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,142)),
; 5593 : 						(m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60,((m_iCS_REMAIN_MSEC / 1000) % 3600) % 60);

  002b9	8b 76 68	 mov	 esi, DWORD PTR [esi+104]
  002bc	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  002c1	f7 ee		 imul	 esi
  002c3	c1 fa 06	 sar	 edx, 6
  002c6	8b c2		 mov	 eax, edx
  002c8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002cb	03 c2		 add	 eax, edx
  002cd	99		 cdq
  002ce	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  002d3	f7 f9		 idiv	 ecx
  002d5	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH
  002da	8b c8		 mov	 ecx, eax
  002dc	8b c2		 mov	 eax, edx
  002de	99		 cdq
  002df	f7 fe		 idiv	 esi
  002e1	52		 push	 edx
  002e2	50		 push	 eax
  002e3	51		 push	 ecx
  002e4	68 8e 0c 00 00	 push	 3214			; 00000c8eH
  002e9	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  002ee	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  002f3	50		 push	 eax
  002f4	53		 push	 ebx
  002f5	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  002fa	83 c4 14	 add	 esp, 20			; 00000014H
  002fd	5f		 pop	 edi
  002fe	5e		 pop	 esi
  002ff	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  00300	5d		 pop	 ebp
  00301	c2 0c 00	 ret	 12			; 0000000cH
$LN15@OperateGmC:

; 5594 : 				}
; 5595 : 				break;
; 5596 : 			case CASTLESIEGE_STATE_REGMARK:
; 5597 : 				{
; 5598 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,143)),
; 5599 : 						(m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60,((m_iCS_REMAIN_MSEC / 1000) % 3600) % 60);

  00304	8b 76 68	 mov	 esi, DWORD PTR [esi+104]
  00307	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0030c	f7 ee		 imul	 esi
  0030e	c1 fa 06	 sar	 edx, 6
  00311	8b c2		 mov	 eax, edx
  00313	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00316	03 c2		 add	 eax, edx
  00318	99		 cdq
  00319	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  0031e	f7 f9		 idiv	 ecx
  00320	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH
  00325	8b c8		 mov	 ecx, eax
  00327	8b c2		 mov	 eax, edx
  00329	99		 cdq
  0032a	f7 fe		 idiv	 esi
  0032c	52		 push	 edx
  0032d	50		 push	 eax
  0032e	51		 push	 ecx
  0032f	68 8f 0c 00 00	 push	 3215			; 00000c8fH
  00334	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00339	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0033e	50		 push	 eax
  0033f	53		 push	 ebx
  00340	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00345	83 c4 14	 add	 esp, 20			; 00000014H
  00348	5f		 pop	 edi
  00349	5e		 pop	 esi
  0034a	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  0034b	5d		 pop	 ebp
  0034c	c2 0c 00	 ret	 12			; 0000000cH
$LN14@OperateGmC:

; 5600 : 				}
; 5601 : 				break;
; 5602 : 			case CASTLESIEGE_STATE_IDLE_3:
; 5603 : 				{
; 5604 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,144)),
; 5605 : 						(m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60,((m_iCS_REMAIN_MSEC / 1000) % 3600) % 60);

  0034f	8b 76 68	 mov	 esi, DWORD PTR [esi+104]
  00352	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00357	f7 ee		 imul	 esi
  00359	c1 fa 06	 sar	 edx, 6
  0035c	8b c2		 mov	 eax, edx
  0035e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00361	03 c2		 add	 eax, edx
  00363	99		 cdq
  00364	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00369	f7 f9		 idiv	 ecx
  0036b	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH
  00370	8b c8		 mov	 ecx, eax
  00372	8b c2		 mov	 eax, edx
  00374	99		 cdq
  00375	f7 fe		 idiv	 esi
  00377	52		 push	 edx
  00378	50		 push	 eax
  00379	51		 push	 ecx
  0037a	68 90 0c 00 00	 push	 3216			; 00000c90H
  0037f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00384	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00389	50		 push	 eax
  0038a	53		 push	 ebx
  0038b	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00390	83 c4 14	 add	 esp, 20			; 00000014H
  00393	5f		 pop	 edi
  00394	5e		 pop	 esi
  00395	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  00396	5d		 pop	 ebp
  00397	c2 0c 00	 ret	 12			; 0000000cH
$LN13@OperateGmC:

; 5606 : 				}
; 5607 : 				break;
; 5608 : 			case CASTLESIEGE_STATE_NOTIFY:
; 5609 : 				{
; 5610 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,145)),
; 5611 : 						(m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60,((m_iCS_REMAIN_MSEC / 1000) % 3600) % 60);

  0039a	8b 76 68	 mov	 esi, DWORD PTR [esi+104]
  0039d	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  003a2	f7 ee		 imul	 esi
  003a4	c1 fa 06	 sar	 edx, 6
  003a7	8b c2		 mov	 eax, edx
  003a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003ac	03 c2		 add	 eax, edx
  003ae	99		 cdq
  003af	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  003b4	f7 f9		 idiv	 ecx
  003b6	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH
  003bb	8b c8		 mov	 ecx, eax
  003bd	8b c2		 mov	 eax, edx
  003bf	99		 cdq
  003c0	f7 fe		 idiv	 esi
  003c2	52		 push	 edx
  003c3	50		 push	 eax
  003c4	51		 push	 ecx
  003c5	68 91 0c 00 00	 push	 3217			; 00000c91H
  003ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  003cf	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  003d4	50		 push	 eax
  003d5	53		 push	 ebx
  003d6	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  003db	83 c4 14	 add	 esp, 20			; 00000014H
  003de	5f		 pop	 edi
  003df	5e		 pop	 esi
  003e0	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  003e1	5d		 pop	 ebp
  003e2	c2 0c 00	 ret	 12			; 0000000cH
$LN12@OperateGmC:

; 5612 : 				}
; 5613 : 				break;
; 5614 : 			case CASTLESIEGE_STATE_READYSIEGE:
; 5615 : 				{
; 5616 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,146)),
; 5617 : 								(m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60,((m_iCS_REMAIN_MSEC / 1000) % 3600) % 60);

  003e5	8b 76 68	 mov	 esi, DWORD PTR [esi+104]
  003e8	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  003ed	f7 ee		 imul	 esi
  003ef	c1 fa 06	 sar	 edx, 6
  003f2	8b c2		 mov	 eax, edx
  003f4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003f7	03 c2		 add	 eax, edx
  003f9	99		 cdq
  003fa	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  003ff	f7 f9		 idiv	 ecx
  00401	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH
  00406	8b c8		 mov	 ecx, eax
  00408	8b c2		 mov	 eax, edx
  0040a	99		 cdq
  0040b	f7 fe		 idiv	 esi
  0040d	52		 push	 edx
  0040e	50		 push	 eax
  0040f	51		 push	 ecx
  00410	68 92 0c 00 00	 push	 3218			; 00000c92H
  00415	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0041a	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0041f	50		 push	 eax
  00420	53		 push	 ebx
  00421	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00426	83 c4 14	 add	 esp, 20			; 00000014H
  00429	5f		 pop	 edi
  0042a	5e		 pop	 esi
  0042b	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  0042c	5d		 pop	 ebp
  0042d	c2 0c 00	 ret	 12			; 0000000cH
$LN11@OperateGmC:

; 5618 : 				}
; 5619 : 				break;
; 5620 : 			case CASTLESIEGE_STATE_STARTSIEGE:
; 5621 : 				{
; 5622 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,147)),
; 5623 : 								(m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60,((m_iCS_REMAIN_MSEC / 1000) % 3600) % 60);

  00430	8b 76 68	 mov	 esi, DWORD PTR [esi+104]
  00433	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00438	f7 ee		 imul	 esi
  0043a	c1 fa 06	 sar	 edx, 6
  0043d	8b c2		 mov	 eax, edx
  0043f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00442	03 c2		 add	 eax, edx
  00444	99		 cdq
  00445	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  0044a	f7 f9		 idiv	 ecx
  0044c	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH
  00451	8b c8		 mov	 ecx, eax
  00453	8b c2		 mov	 eax, edx
  00455	99		 cdq
  00456	f7 fe		 idiv	 esi
  00458	52		 push	 edx
  00459	50		 push	 eax
  0045a	51		 push	 ecx
  0045b	68 93 0c 00 00	 push	 3219			; 00000c93H
  00460	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00465	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0046a	50		 push	 eax
  0046b	53		 push	 ebx
  0046c	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00471	83 c4 14	 add	 esp, 20			; 00000014H
  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  00477	5d		 pop	 ebp
  00478	c2 0c 00	 ret	 12			; 0000000cH
$LN10@OperateGmC:

; 5624 : 				}
; 5625 : 				break;
; 5626 : 			case CASTLESIEGE_STATE_ENDSIEGE:
; 5627 : 				{
; 5628 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,148)),
; 5629 : 								(m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60,((m_iCS_REMAIN_MSEC / 1000) % 3600) % 60);

  0047b	8b 76 68	 mov	 esi, DWORD PTR [esi+104]
  0047e	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00483	f7 ee		 imul	 esi
  00485	c1 fa 06	 sar	 edx, 6
  00488	8b c2		 mov	 eax, edx
  0048a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0048d	03 c2		 add	 eax, edx
  0048f	99		 cdq
  00490	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00495	f7 f9		 idiv	 ecx
  00497	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH
  0049c	8b c8		 mov	 ecx, eax
  0049e	8b c2		 mov	 eax, edx
  004a0	99		 cdq
  004a1	f7 fe		 idiv	 esi
  004a3	52		 push	 edx
  004a4	50		 push	 eax
  004a5	51		 push	 ecx
  004a6	68 94 0c 00 00	 push	 3220			; 00000c94H
  004ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  004b0	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  004b5	50		 push	 eax
  004b6	53		 push	 ebx
  004b7	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  004bc	83 c4 14	 add	 esp, 20			; 00000014H
  004bf	5f		 pop	 edi
  004c0	5e		 pop	 esi
  004c1	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  004c2	5d		 pop	 ebp
  004c3	c2 0c 00	 ret	 12			; 0000000cH
$LN9@OperateGmC:

; 5630 : 				}
; 5631 : 				break;
; 5632 : 			case CASTLESIEGE_STATE_ENDCYCLE:
; 5633 : 				{
; 5634 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,149)));

  004c6	68 95 0c 00 00	 push	 3221			; 00000c95H

; 5635 : 				}
; 5636 : 				break;

  004cb	e9 72 01 00 00	 jmp	 $LN57@OperateGmC
$LN7@OperateGmC:

; 5637 : 			default:
; 5638 : 				{
; 5639 : 					MsgOutput(iIndex,lMsg.Get(MSGGET(12,139)));
; 5640 : 				}
; 5641 : 				break;
; 5642 : 			}
; 5643 : 		}
; 5644 : 		break;
; 5645 : 	case 8:
; 5646 : 		{
; 5647 : 			char * lpszAttackGuild = (char *)lpParam;
; 5648 : 
; 5649 : 			if(m_iCastleSiegeState != CASTLESIEGE_STATE_STARTSIEGE)

  004d0	83 7e 28 07	 cmp	 DWORD PTR [esi+40], 7

; 5650 : 			{
; 5651 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,150)));
; 5652 : 				return;

  004d4	0f 85 63 01 00
	00		 jne	 $LN3@OperateGmC

; 5653 : 			}
; 5654 : 
; 5655 : 			if(lpszAttackGuild == NULL)

  004da	8b 7d 10	 mov	 edi, DWORD PTR _lpParam$[ebp]
  004dd	85 ff		 test	 edi, edi

; 5656 : 			{
; 5657 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,150)));
; 5658 : 				return;

  004df	0f 84 58 01 00
	00		 je	 $LN3@OperateGmC

; 5659 : 			}
; 5660 : 
; 5661 : 			if(strcmp(lpszAttackGuild,"") == NULL)

  004e5	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  004ea	8b c7		 mov	 eax, edi
  004ec	8d 64 24 00	 npad	 4
$LL52@OperateGmC:
  004f0	8a 10		 mov	 dl, BYTE PTR [eax]
  004f2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  004f4	75 1a		 jne	 SHORT $LN53@OperateGmC
  004f6	84 d2		 test	 dl, dl
  004f8	74 12		 je	 SHORT $LN54@OperateGmC
  004fa	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  004fd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00500	75 0e		 jne	 SHORT $LN53@OperateGmC
  00502	83 c0 02	 add	 eax, 2
  00505	83 c1 02	 add	 ecx, 2
  00508	84 d2		 test	 dl, dl
  0050a	75 e4		 jne	 SHORT $LL52@OperateGmC
$LN54@OperateGmC:
  0050c	33 c0		 xor	 eax, eax
  0050e	eb 05		 jmp	 SHORT $LN55@OperateGmC
$LN53@OperateGmC:
  00510	1b c0		 sbb	 eax, eax
  00512	83 d8 ff	 sbb	 eax, -1
$LN55@OperateGmC:
  00515	85 c0		 test	 eax, eax

; 5662 : 			{
; 5663 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,150)));
; 5664 : 				return;

  00517	0f 84 20 01 00
	00		 je	 $LN3@OperateGmC

; 5665 : 			}
; 5666 : 
; 5667 : 			BYTE btCsJoinSide = NULL;
; 5668 : 			BYTE bGuildInvolved = NULL;
; 5669 : 
; 5670 : 			int bRETVAL = GetCsJoinSide(lpszAttackGuild,&btCsJoinSide,&bGuildInvolved);

  0051d	8d 55 0b	 lea	 edx, DWORD PTR _bGuildInvolved$189766[ebp]
  00520	52		 push	 edx
  00521	8d 45 13	 lea	 eax, DWORD PTR _btCsJoinSide$189765[ebp]
  00524	50		 push	 eax
  00525	57		 push	 edi
  00526	8b ce		 mov	 ecx, esi
  00528	c6 45 13 00	 mov	 BYTE PTR _btCsJoinSide$189765[ebp], 0
  0052c	c6 45 0b 00	 mov	 BYTE PTR _bGuildInvolved$189766[ebp], 0
  00530	e8 00 00 00 00	 call	 ?GetCsJoinSide@CCastleSiege@@QAEHPADPAE1@Z ; CCastleSiege::GetCsJoinSide

; 5671 : 
; 5672 : 			if(bRETVAL == TRUE)

  00535	83 f8 01	 cmp	 eax, 1
  00538	0f 85 ff 00 00
	00		 jne	 $LN3@OperateGmC

; 5673 : 			{
; 5674 : 				if(btCsJoinSide > 1 && bGuildInvolved == TRUE)

  0053e	38 45 13	 cmp	 BYTE PTR _btCsJoinSide$189765[ebp], al
  00541	0f 86 ef 00 00
	00		 jbe	 $LN2@OperateGmC
  00547	38 45 0b	 cmp	 BYTE PTR _bGuildInvolved$189766[ebp], al
  0054a	0f 85 e6 00 00
	00		 jne	 $LN2@OperateGmC

; 5675 : 				{
; 5676 : 					LogAddTD("[CastleSiege] Castle Winner Has been Changed - GM (GUILD:%s)", lpszAttackGuild);

  00550	57		 push	 edi
  00551	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@ONMLNNAO@?$FLCastleSiege?$FN?5Castle?5Winner?5Has?5@
  00556	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0055c	83 c4 08	 add	 esp, 8

; 5677 : 
; 5678 : 					NotifyCrownState(2);

  0055f	6a 02		 push	 2
  00561	8b ce		 mov	 ecx, esi
  00563	e8 00 00 00 00	 call	 ?NotifyCrownState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyCrownState

; 5679 : 
; 5680 : 					memset(m_szMiddleWinnerGuild,0x00,sizeof(m_szMiddleWinnerGuild));

  00568	33 c0		 xor	 eax, eax
  0056a	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax
  00570	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
  00576	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax
  0057c	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax

; 5681 : 					memcpy(m_szMiddleWinnerGuild,lpszAttackGuild,8);

  00582	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00584	89 8e 04 02 00
	00		 mov	 DWORD PTR [esi+516], ecx
  0058a	8b 57 04	 mov	 edx, DWORD PTR [edi+4]

; 5682 : 
; 5683 : 					ClearNonDbNPC_MidWin();

  0058d	8b ce		 mov	 ecx, esi
  0058f	89 96 08 02 00
	00		 mov	 DWORD PTR [esi+520], edx
  00595	e8 00 00 00 00	 call	 ?ClearNonDbNPC_MidWin@CCastleSiege@@QAEXXZ ; CCastleSiege::ClearNonDbNPC_MidWin

; 5684 : 					ChangeWinnerGuild(btCsJoinSide);

  0059a	0f b6 45 13	 movzx	 eax, BYTE PTR _btCsJoinSide$189765[ebp]
  0059e	50		 push	 eax
  0059f	8b ce		 mov	 ecx, esi
  005a1	e8 00 00 00 00	 call	 ?ChangeWinnerGuild@CCastleSiege@@QAEXH@Z ; CCastleSiege::ChangeWinnerGuild

; 5685 : 					NotifyAllUserCsProgState(1,lpszAttackGuild);

  005a6	57		 push	 edi
  005a7	6a 01		 push	 1
  005a9	8b ce		 mov	 ecx, esi
  005ab	e8 00 00 00 00	 call	 ?NotifyAllUserCsProgState@CCastleSiege@@QAEXEPAD@Z ; CCastleSiege::NotifyAllUserCsProgState

; 5686 : 					ResetCrownAccessTickCount();

  005b0	8b ce		 mov	 ecx, esi
  005b2	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount

; 5687 : 					ResetCrownUserIndex();

  005b7	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 5688 : 					SetCrownAccessUserX(0);

  005bc	6a 00		 push	 0
  005be	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 5689 : 					SetCrownAccessUserY(0);

  005c3	6a 00		 push	 0
  005c5	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 5690 : 					ResetCrownSwitchUserIndex(217);

  005ca	68 d9 00 00 00	 push	 217			; 000000d9H
  005cf	e8 00 00 00 00	 call	 ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex

; 5691 : 					ResetCrownSwitchUserIndex(218);

  005d4	68 da 00 00 00	 push	 218			; 000000daH
  005d9	e8 00 00 00 00	 call	 ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex

; 5692 : 
; 5693 : 					m_bRegCrownAvailable = FALSE;
; 5694 : 					ReSpawnEnemyUser(FALSE);

  005de	6a 00		 push	 0
  005e0	c7 86 e8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+488], 0
  005ea	e8 00 00 00 00	 call	 ?ReSpawnEnemyUser@CCastleSiege@@QAEXH@Z ; CCastleSiege::ReSpawnEnemyUser

; 5695 : 
; 5696 : 					GCAnsCsLeftTimeAlarm((m_iCS_REMAIN_MSEC / 1000) / 3600,((m_iCS_REMAIN_MSEC / 1000) % 3600) / 60);

  005ef	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  005f4	f7 6e 68	 imul	 DWORD PTR [esi+104]
  005f7	c1 fa 06	 sar	 edx, 6
  005fa	8b c2		 mov	 eax, edx
  005fc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  005ff	03 c2		 add	 eax, edx
  00601	99		 cdq
  00602	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00607	f7 f9		 idiv	 ecx
  00609	8b f8		 mov	 edi, eax
  0060b	8b ca		 mov	 ecx, edx
  0060d	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00612	f7 e9		 imul	 ecx
  00614	03 d1		 add	 edx, ecx
  00616	c1 fa 05	 sar	 edx, 5
  00619	8b c2		 mov	 eax, edx
  0061b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0061e	03 c2		 add	 eax, edx
  00620	50		 push	 eax
  00621	57		 push	 edi
  00622	e8 00 00 00 00	 call	 ?GCAnsCsLeftTimeAlarm@@YAXEE@Z ; GCAnsCsLeftTimeAlarm
  00627	83 c4 08	 add	 esp, 8

; 5697 : 					m_dwCS_LEFTTIME_TICK_COUNT =  GetTickCount();

  0062a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00630	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax
$LN2@OperateGmC:

; 5698 : 				}
; 5699 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,151)));

  00636	68 97 0c 00 00	 push	 3223			; 00000c97H

; 5700 : 			}
; 5701 : 			else

  0063b	eb 05		 jmp	 SHORT $LN57@OperateGmC
$LN3@OperateGmC:

; 5702 : 			{
; 5703 : 				MsgOutput(iIndex,lMsg.Get(MSGGET(12,150)));

  0063d	68 96 0c 00 00	 push	 3222			; 00000c96H
$LN57@OperateGmC:
  00642	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
$LN58@OperateGmC:
  00647	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0064c	50		 push	 eax
  0064d	53		 push	 ebx
  0064e	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00653	83 c4 08	 add	 esp, 8
$LN56@OperateGmC:
  00656	5f		 pop	 edi
$LN1@OperateGmC:
  00657	5e		 pop	 esi
  00658	5b		 pop	 ebx

; 5704 : 			}
; 5705 : 		}
; 5706 : 		break;
; 5707 : 	}
; 5708 : }

  00659	5d		 pop	 ebp
  0065a	c2 0c 00	 ret	 12			; 0000000cH
  0065d	8d 49 00	 npad	 3
$LN60@OperateGmC:
  00660	00 00 00 00	 DD	 $LN38@OperateGmC
  00664	00 00 00 00	 DD	 $LN34@OperateGmC
  00668	00 00 00 00	 DD	 $LN32@OperateGmC
  0066c	00 00 00 00	 DD	 $LN31@OperateGmC
  00670	00 00 00 00	 DD	 $LN30@OperateGmC
  00674	00 00 00 00	 DD	 $LN29@OperateGmC
  00678	00 00 00 00	 DD	 $LN26@OperateGmC
  0067c	00 00 00 00	 DD	 $LN23@OperateGmC
  00680	00 00 00 00	 DD	 $LN7@OperateGmC
$LN61@OperateGmC:
  00684	00 00 00 00	 DD	 $LN19@OperateGmC
  00688	00 00 00 00	 DD	 $LN18@OperateGmC
  0068c	00 00 00 00	 DD	 $LN17@OperateGmC
  00690	00 00 00 00	 DD	 $LN16@OperateGmC
  00694	00 00 00 00	 DD	 $LN15@OperateGmC
  00698	00 00 00 00	 DD	 $LN14@OperateGmC
  0069c	00 00 00 00	 DD	 $LN13@OperateGmC
  006a0	00 00 00 00	 DD	 $LN12@OperateGmC
  006a4	00 00 00 00	 DD	 $LN11@OperateGmC
  006a8	00 00 00 00	 DD	 $LN10@OperateGmC
  006ac	00 00 00 00	 DD	 $LN9@OperateGmC
?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z ENDP	; CCastleSiege::OperateGmCommand
_TEXT	ENDS
PUBLIC	??_C@_0EF@HPJALGON@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@ ; `string'
PUBLIC	??_C@_0CL@BFIIHIII@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@ ; `string'
PUBLIC	??_C@_0FL@DNHNFHAO@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@ ; `string'
PUBLIC	?Init@CCastleSiege@@QAEHXZ			; CCastleSiege::Init
;	COMDAT ??_C@_0EF@HPJALGON@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
CONST	SEGMENT
??_C@_0EF@HPJALGON@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@ DB '[Castle'
	DB	'Siege] CCastleSiege::Init() - Data Load Fail (FILE:%d, DB:%d)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BFIIHIII@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
CONST	SEGMENT
??_C@_0CL@BFIIHIII@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@ DB '[Castle'
	DB	'Siege] CCastleSiege::Init() - START', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@DNHNFHAO@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
CONST	SEGMENT
??_C@_0FL@DNHNFHAO@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@ DB '[Castle'
	DB	'Siege] CCastleSiege::Init() - m_iCastleDataLoadState != CASTL'
	DB	'ESIEGE_DATALOAD_4 (%d)', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Init@CCastleSiege@@QAEHXZ
_TEXT	SEGMENT
?Init@CCastleSiege@@QAEHXZ PROC				; CCastleSiege::Init, COMDAT
; _this$ = ecx

; 1055 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1056 : 
; 1057 : 	if(m_iCastleDataLoadState != CASTLESIEGE_DATALOAD_4)

  00003	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00006	83 f8 04	 cmp	 eax, 4
  00009	74 23		 je	 SHORT $LN4@Init

; 1058 : 	{
; 1059 : 		LogAddC(2, "[CastleSiege] CCastleSiege::Init() - m_iCastleDataLoadState != CASTLESIEGE_DATALOAD_4 (%d)",
; 1060 : 			m_iCastleDataLoadState);

  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@DNHNFHAO@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
  00011	6a 02		 push	 2
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1061 : 		MsgBox("[CastleSiege] CCastleSiege::Init() - m_iCastleDataLoadState != CASTLESIEGE_DATALOAD_4 (%d)",
; 1062 : 			m_iCastleDataLoadState);

  00019	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@DNHNFHAO@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
  00022	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00027	83 c4 14	 add	 esp, 20			; 00000014H

; 1063 : 		return false;

  0002a	33 c0		 xor	 eax, eax
  0002c	5e		 pop	 esi

; 1100 : }

  0002d	c3		 ret	 0
$LN4@Init:

; 1064 : 	}
; 1065 : 
; 1066 : 	if(m_bFileDataLoadOK == 0 || m_bDbDataLoadOK == 0)

  0002e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00031	57		 push	 edi
  00032	33 ff		 xor	 edi, edi
  00034	3b c7		 cmp	 eax, edi
  00036	0f 84 8c 00 00
	00		 je	 $LN2@Init
  0003c	39 7e 10	 cmp	 DWORD PTR [esi+16], edi
  0003f	0f 84 83 00 00
	00		 je	 $LN2@Init

; 1073 : 	}
; 1074 : 
; 1075 : 	LogAddTD("[CastleSiege] CCastleSiege::Init() - START");

  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@BFIIHIII@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00050	83 c4 04	 add	 esp, 4

; 1076 : 
; 1077 : 	m_iCastleDataLoadState = 0;
; 1078 : 
; 1079 : 	CreateAllCsGateLever();

  00053	8b ce		 mov	 ecx, esi
  00055	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00058	e8 00 00 00 00	 call	 ?CreateAllCsGateLever@CCastleSiege@@QAEXXZ ; CCastleSiege::CreateAllCsGateLever

; 1080 : 
; 1081 : 	if(CheckSync() == FALSE)

  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?CheckSync@CCastleSiege@@QAEHXZ ; CCastleSiege::CheckSync
  00064	85 c0		 test	 eax, eax
  00066	75 15		 jne	 SHORT $LN1@Init

; 1082 : 	{
; 1083 : 		LogAddC(2,"[CastleSiege] CCastleSiege::Init() - CheckSync() == FALSE");

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@LBPHFGGE@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
  0006d	6a 02		 push	 2
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00075	83 c4 08	 add	 esp, 8
  00078	5f		 pop	 edi
  00079	33 c0		 xor	 eax, eax
  0007b	5e		 pop	 esi

; 1100 : }

  0007c	c3		 ret	 0
$LN1@Init:

; 1084 : 		//MsgBox("[CastleSiege] CCastleSiege::Init() - CheckSync() == FALSE");
; 1085 : 		return false;
; 1086 : 	}
; 1087 : 
; 1088 : 	m_bDoRun = TRUE;

  0007d	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1

; 1089 : 
; 1090 : 	m_dwNPC_DBSAVE_TICK_COUNT = GetTickCount();

  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 1091 : 	m_dwCALC_LEFTSIEGE_TICK_COUNT = 0;

  0008a	89 be 94 00 00
	00		 mov	 DWORD PTR [esi+148], edi

; 1092 : 	m_dwEVENT_MSG_TICK_COUNT = 0;

  00090	89 be 98 00 00
	00		 mov	 DWORD PTR [esi+152], edi

; 1093 : 	m_dwCHECK_GATE_ALIVE_COUNT = 0;

  00096	89 be 9c 00 00
	00		 mov	 DWORD PTR [esi+156], edi

; 1094 : 	m_dwCS_STARTTIME_TICK_COUNT = 0;

  0009c	89 be b0 00 00
	00		 mov	 DWORD PTR [esi+176], edi

; 1095 : 	m_dwCS_LEFTTIME_TICK_COUNT = 0;

  000a2	89 be ac 00 00
	00		 mov	 DWORD PTR [esi+172], edi

; 1096 : 	m_dwCS_JOINSIDE_REFRESH_TICK_COUNT = 0;

  000a8	89 be a0 00 00
	00		 mov	 DWORD PTR [esi+160], edi

; 1097 : 	m_dwCS_JOINSIDE_REFRESH_TOTAL_COUNT = 0;

  000ae	89 be a4 00 00
	00		 mov	 DWORD PTR [esi+164], edi

; 1098 : 	m_dwCS_MINIMAP_SEND_TICK_COUNT = 0;

  000b4	89 be a8 00 00
	00		 mov	 DWORD PTR [esi+168], edi
  000ba	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax
  000c0	5f		 pop	 edi

; 1099 : 	return true;

  000c1	b8 01 00 00 00	 mov	 eax, 1
  000c6	5e		 pop	 esi

; 1100 : }

  000c7	c3		 ret	 0
$LN2@Init:

; 1067 : 	{
; 1068 : 		LogAddC(2,"[CastleSiege] CCastleSiege::Init() - Data Load Fail (FILE:%d, DB:%d)",
; 1069 : 			m_bFileDataLoadOK, m_bDbDataLoadOK);

  000c8	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000cb	51		 push	 ecx
  000cc	50		 push	 eax
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@HPJALGON@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
  000d2	6a 02		 push	 2
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1070 : 		MsgBox("[CastleSiege] CCastleSiege::Init() - Data Load Fail (FILE:%d, DB:%d)",
; 1071 : 			m_bFileDataLoadOK, m_bDbDataLoadOK);

  000da	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000dd	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000e0	52		 push	 edx
  000e1	50		 push	 eax
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@HPJALGON@?$FLCastleSiege?$FN?5CCastleSiege?3?3Init@
  000e7	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000ec	83 c4 1c	 add	 esp, 28			; 0000001cH
  000ef	5f		 pop	 edi

; 1072 : 		return false;

  000f0	33 c0		 xor	 eax, eax
  000f2	5e		 pop	 esi

; 1100 : }

  000f3	c3		 ret	 0
?Init@CCastleSiege@@QAEHXZ ENDP				; CCastleSiege::Init
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CastleSiege@@YAXXZ
text$yc	SEGMENT
??__Eg_CastleSiege@@YAXXZ PROC				; `dynamic initializer for 'g_CastleSiege'', COMDAT

; 21   : CCastleSiege g_CastleSiege;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00005	e8 00 00 00 00	 call	 ??0CCastleSiege@@QAE@XZ	; CCastleSiege::CCastleSiege
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CastleSiege@@YAXXZ ; `dynamic atexit destructor for 'g_CastleSiege''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CastleSiege@@YAXXZ ENDP				; `dynamic initializer for 'g_CastleSiege''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CastleSiege@@YAXXZ
text$yd	SEGMENT
??__Fg_CastleSiege@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CastleSiege'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00005	e9 00 00 00 00	 jmp	 ??1CCastleSiege@@UAE@XZ	; CCastleSiege::~CCastleSiege
??__Fg_CastleSiege@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CastleSiege''
text$yd	ENDS
PUBLIC	?g_CastleSiege@@3VCCastleSiege@@A		; g_CastleSiege
_BSS	SEGMENT
?g_CastleSiege@@3VCCastleSiege@@A DB 0218H DUP (?)	; g_CastleSiege
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CastleSiege$initializer$ DD FLAT:??__Eg_CastleSiege@@YAXXZ
CRT$XCU	ENDS
END
