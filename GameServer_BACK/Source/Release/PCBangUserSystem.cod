; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\PCBangUserSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7_PCBANG_TIME_CLASS@@6B@			; _PCBANG_TIME_CLASS::`vftable'
PUBLIC	??0_PCBANG_TIME_CLASS@@QAE@XZ			; _PCBANG_TIME_CLASS::_PCBANG_TIME_CLASS
PUBLIC	??_R4_PCBANG_TIME_CLASS@@6B@			; _PCBANG_TIME_CLASS::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_PCBANG_TIME_CLASS@@@8			; _PCBANG_TIME_CLASS `RTTI Type Descriptor'
PUBLIC	??_R3_PCBANG_TIME_CLASS@@8			; _PCBANG_TIME_CLASS::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_PCBANG_TIME_CLASS@@8			; _PCBANG_TIME_CLASS::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_PCBANG_TIME_CLASS@@8		; _PCBANG_TIME_CLASS::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E_PCBANG_TIME_CLASS@@UAEPAXI@Z:PROC		; _PCBANG_TIME_CLASS::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_PCBANG_TIME_CLASS@@8
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\pcbangusersystem.h
rdata$r	SEGMENT
??_R1A@?0A@EA@_PCBANG_TIME_CLASS@@8 DD FLAT:??_R0?AV_PCBANG_TIME_CLASS@@@8 ; _PCBANG_TIME_CLASS::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_PCBANG_TIME_CLASS@@8
rdata$r	ENDS
;	COMDAT ??_R2_PCBANG_TIME_CLASS@@8
rdata$r	SEGMENT
??_R2_PCBANG_TIME_CLASS@@8 DD FLAT:??_R1A@?0A@EA@_PCBANG_TIME_CLASS@@8 ; _PCBANG_TIME_CLASS::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_PCBANG_TIME_CLASS@@8
rdata$r	SEGMENT
??_R3_PCBANG_TIME_CLASS@@8 DD 00H			; _PCBANG_TIME_CLASS::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_PCBANG_TIME_CLASS@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_PCBANG_TIME_CLASS@@@8
_DATA	SEGMENT
??_R0?AV_PCBANG_TIME_CLASS@@@8 DD FLAT:??_7type_info@@6B@ ; _PCBANG_TIME_CLASS `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_PCBANG_TIME_CLASS@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_PCBANG_TIME_CLASS@@6B@
rdata$r	SEGMENT
??_R4_PCBANG_TIME_CLASS@@6B@ DD 00H			; _PCBANG_TIME_CLASS::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_PCBANG_TIME_CLASS@@@8
	DD	FLAT:??_R3_PCBANG_TIME_CLASS@@8
rdata$r	ENDS
;	COMDAT ??_7_PCBANG_TIME_CLASS@@6B@
CONST	SEGMENT
??_7_PCBANG_TIME_CLASS@@6B@ DD FLAT:??_R4_PCBANG_TIME_CLASS@@6B@ ; _PCBANG_TIME_CLASS::`vftable'
	DD	FLAT:??_E_PCBANG_TIME_CLASS@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0_PCBANG_TIME_CLASS@@QAE@XZ
_TEXT	SEGMENT
??0_PCBANG_TIME_CLASS@@QAE@XZ PROC			; _PCBANG_TIME_CLASS::_PCBANG_TIME_CLASS, COMDAT
; _this$ = ecx

; 7    : 	_PCBANG_TIME_CLASS() { };

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_PCBANG_TIME_CLASS@@6B@
  00008	c3		 ret	 0
??0_PCBANG_TIME_CLASS@@QAE@XZ ENDP			; _PCBANG_TIME_CLASS::_PCBANG_TIME_CLASS
_TEXT	ENDS
PUBLIC	??1_PCBANG_TIME_CLASS@@UAE@XZ			; _PCBANG_TIME_CLASS::~_PCBANG_TIME_CLASS
; Function compile flags: /Ogtp
;	COMDAT ??1_PCBANG_TIME_CLASS@@UAE@XZ
_TEXT	SEGMENT
??1_PCBANG_TIME_CLASS@@UAE@XZ PROC			; _PCBANG_TIME_CLASS::~_PCBANG_TIME_CLASS, COMDAT
; _this$ = ecx

; 8    : 	virtual ~_PCBANG_TIME_CLASS() {};

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_PCBANG_TIME_CLASS@@6B@
  00006	c3		 ret	 0
??1_PCBANG_TIME_CLASS@@UAE@XZ ENDP			; _PCBANG_TIME_CLASS::~_PCBANG_TIME_CLASS
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_G_PCBANG_TIME_CLASS@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_PCBANG_TIME_CLASS@@UAEPAXI@Z PROC			; _PCBANG_TIME_CLASS::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_PCBANG_TIME_CLASS@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G_PCBANG_TIME_CLASS@@UAEPAXI@Z ENDP			; _PCBANG_TIME_CLASS::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetSwitch@CPCBangPointUserSystem@@QAEXH@Z	; CPCBangPointUserSystem::SetSwitch
; Function compile flags: /Ogtp
;	COMDAT ?SetSwitch@CPCBangPointUserSystem@@QAEXH@Z
_TEXT	SEGMENT
_bEnable$ = 8						; size = 4
?SetSwitch@CPCBangPointUserSystem@@QAEXH@Z PROC		; CPCBangPointUserSystem::SetSwitch, COMDAT
; _this$ = ecx

; 25   : 	void SetSwitch(BOOL bEnable) { m_bSwitch = bEnable;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _bEnable$[ebp]
  00006	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetSwitch@CPCBangPointUserSystem@@QAEXH@Z ENDP		; CPCBangPointUserSystem::SetSwitch
_TEXT	ENDS
PUBLIC	?GetDayOfTheWeek@_PCBANG_TIME_CLASS@@QAEHHHH@Z	; _PCBANG_TIME_CLASS::GetDayOfTheWeek
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\pcbangusersystem.cpp
;	COMDAT ?GetDayOfTheWeek@_PCBANG_TIME_CLASS@@QAEHHHH@Z
_TEXT	SEGMENT
_iYear$ = 8						; size = 4
_iMonth$ = 12						; size = 4
_iDay$ = 16						; size = 4
?GetDayOfTheWeek@_PCBANG_TIME_CLASS@@QAEHHHH@Z PROC	; _PCBANG_TIME_CLASS::GetDayOfTheWeek, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 7    : 	if( iMonth < 3 )
; 8    : 	{
; 9    : 		iYear--;

  00004	8b 75 08	 mov	 esi, DWORD PTR _iYear$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _iMonth$[ebp]
  0000b	83 ff 03	 cmp	 edi, 3
  0000e	7d 04		 jge	 SHORT $LN1@GetDayOfTh
  00010	4e		 dec	 esi

; 10   : 		iMonth += 12;

  00011	83 c7 0c	 add	 edi, 12			; 0000000cH
$LN1@GetDayOfTh:

; 11   : 	}
; 12   : 
; 13   : 	int YEAR_HIGH = iYear / 100;
; 14   : 	int YEAR_LOW = iYear % 100;

  00014	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00019	f7 ee		 imul	 esi
  0001b	c1 fa 05	 sar	 edx, 5
  0001e	8b ca		 mov	 ecx, edx
  00020	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00023	03 ca		 add	 ecx, edx

; 15   : 
; 16   : 
; 17   : 	int DayOfTheWeek = -1 + ( ((YEAR_HIGH*21)/4) + ((YEAR_LOW*5)/4) + iDay  + ((iMonth+1)*26)/10 );

  00025	8b c1		 mov	 eax, ecx
  00027	6b c0 64	 imul	 eax, 100		; 00000064H
  0002a	2b f0		 sub	 esi, eax
  0002c	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  0002f	99		 cdq
  00030	83 e2 03	 and	 edx, 3
  00033	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  00036	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  00039	6b d2 1a	 imul	 edx, 26			; 0000001aH
  0003c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00041	f7 ea		 imul	 edx
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c1		 mov	 eax, ecx
  00048	6b c0 15	 imul	 eax, 21			; 00000015H
  0004b	8b fa		 mov	 edi, edx
  0004d	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00050	03 fa		 add	 edi, edx
  00052	03 7d 10	 add	 edi, DWORD PTR _iDay$[ebp]
  00055	99		 cdq
  00056	83 e2 03	 and	 edx, 3
  00059	03 c2		 add	 eax, edx
  0005b	c1 f8 02	 sar	 eax, 2
  0005e	c1 fe 02	 sar	 esi, 2
  00061	03 fe		 add	 edi, esi
  00063	8d 4c 38 ff	 lea	 ecx, DWORD PTR [eax+edi-1]

; 18   : 	DayOfTheWeek = DayOfTheWeek%7;

  00067	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0006c	f7 e9		 imul	 ecx
  0006e	03 d1		 add	 edx, ecx
  00070	c1 fa 02	 sar	 edx, 2
  00073	8b c2		 mov	 eax, edx
  00075	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00078	03 c2		 add	 eax, edx
  0007a	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  00081	2b d0		 sub	 edx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	5f		 pop	 edi
  00086	2b c2		 sub	 eax, edx
  00088	5e		 pop	 esi

; 19   : return DayOfTheWeek;
; 20   : }

  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
?GetDayOfTheWeek@_PCBANG_TIME_CLASS@@QAEHHHH@Z ENDP	; _PCBANG_TIME_CLASS::GetDayOfTheWeek
_TEXT	ENDS
PUBLIC	?GetEnable@_PCBANG_TIME_CLASS@@QAEEH@Z		; _PCBANG_TIME_CLASS::GetEnable
; Function compile flags: /Ogtp
;	COMDAT ?GetEnable@_PCBANG_TIME_CLASS@@QAEEH@Z
_TEXT	SEGMENT
_Level$ = 8						; size = 4
?GetEnable@_PCBANG_TIME_CLASS@@QAEEH@Z PROC		; _PCBANG_TIME_CLASS::GetEnable, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	BOOL bRet;
; 25   : 	if( Level%400 != 0 && ( (Level%4)!= 0 || (Level%100) == 0) )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _Level$[ebp]
  00006	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0000b	f7 e9		 imul	 ecx
  0000d	c1 fa 07	 sar	 edx, 7
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
  00017	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  0001d	8b d1		 mov	 edx, ecx
  0001f	2b d0		 sub	 edx, eax
  00021	74 2e		 je	 SHORT $LN3@GetEnable
  00023	8b c1		 mov	 eax, ecx
  00025	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0002a	79 05		 jns	 SHORT $LN6@GetEnable
  0002c	48		 dec	 eax
  0002d	83 c8 fc	 or	 eax, -4			; fffffffcH
  00030	40		 inc	 eax
$LN6@GetEnable:
  00031	75 18		 jne	 SHORT $LN2@GetEnable
  00033	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00038	f7 e9		 imul	 ecx
  0003a	c1 fa 05	 sar	 edx, 5
  0003d	8b c2		 mov	 eax, edx
  0003f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00042	03 c2		 add	 eax, edx
  00044	6b c0 64	 imul	 eax, 100		; 00000064H
  00047	2b c8		 sub	 ecx, eax
  00049	75 06		 jne	 SHORT $LN3@GetEnable
$LN2@GetEnable:

; 26   : 	{
; 27   : 		bRet = FALSE;

  0004b	33 c0		 xor	 eax, eax

; 32   : 	}
; 33   : return bRet;
; 34   : }

  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
$LN3@GetEnable:

; 28   : 	}
; 29   : 	else
; 30   : 	{
; 31   : 		bRet = TRUE;

  00051	b8 01 00 00 00	 mov	 eax, 1

; 32   : 	}
; 33   : return bRet;
; 34   : }

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?GetEnable@_PCBANG_TIME_CLASS@@QAEEH@Z ENDP		; _PCBANG_TIME_CLASS::GetEnable
_TEXT	ENDS
PUBLIC	?GetDayCount@_PCBANG_TIME_CLASS@@QAEHHH@Z	; _PCBANG_TIME_CLASS::GetDayCount
; Function compile flags: /Ogtp
;	COMDAT ?GetDayCount@_PCBANG_TIME_CLASS@@QAEHHH@Z
_TEXT	SEGMENT
_iYear$ = 8						; size = 4
_iMonth$ = 12						; size = 4
?GetDayCount@_PCBANG_TIME_CLASS@@QAEHHH@Z PROC		; _PCBANG_TIME_CLASS::GetDayCount, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	switch(iMonth)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iMonth$[ebp]
  00006	83 c0 fe	 add	 eax, -2			; fffffffeH
  00009	83 f8 09	 cmp	 eax, 9
  0000c	77 2e		 ja	 SHORT $LN1@GetDayCoun
  0000e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN8@GetDayCoun[eax]
  00015	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN9@GetDayCoun[eax*4]
$LN3@GetDayCoun:

; 39   : 	{
; 40   : 	case 2:
; 41   : 		return !(!GetEnable(iYear))+28;

  0001c	8b 55 08	 mov	 edx, DWORD PTR _iYear$[ebp]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ?GetEnable@_PCBANG_TIME_CLASS@@QAEEH@Z ; _PCBANG_TIME_CLASS::GetEnable
  00025	33 c9		 xor	 ecx, ecx
  00027	84 c0		 test	 al, al
  00029	0f 95 c1	 setne	 cl
  0002c	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]

; 54   : 	}
; 55   : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
$LN2@GetDayCoun:

; 42   : 	case 4:
; 43   : 	case 6:
; 44   : 	case 9:
; 45   : 	case 11:
; 46   : 		return 30;

  00033	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH

; 54   : 	}
; 55   : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN1@GetDayCoun:

; 47   : 	case 3:
; 48   : 	case 5:
; 49   : 	case 7:
; 50   : 	case 8:
; 51   : 	case 10:
; 52   : 	default:
; 53   : 		return 31;

  0003c	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH

; 54   : 	}
; 55   : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
  00045	8d 49 00	 npad	 3
$LN9@GetDayCoun:
  00048	00 00 00 00	 DD	 $LN3@GetDayCoun
  0004c	00 00 00 00	 DD	 $LN2@GetDayCoun
  00050	00 00 00 00	 DD	 $LN1@GetDayCoun
$LN8@GetDayCoun:
  00054	00		 DB	 0
  00055	02		 DB	 2
  00056	01		 DB	 1
  00057	02		 DB	 2
  00058	01		 DB	 1
  00059	02		 DB	 2
  0005a	02		 DB	 2
  0005b	01		 DB	 1
  0005c	02		 DB	 2
  0005d	01		 DB	 1
?GetDayCount@_PCBANG_TIME_CLASS@@QAEHHH@Z ENDP		; _PCBANG_TIME_CLASS::GetDayCount
_TEXT	ENDS
PUBLIC	?CalcChangeDate@_PCBANG_TIME_CLASS@@QAEXHAAH00@Z ; _PCBANG_TIME_CLASS::CalcChangeDate
; Function compile flags: /Ogtp
;	COMDAT ?CalcChangeDate@_PCBANG_TIME_CLASS@@QAEXHAAH00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iResetDayOfWeek$ = 8					; size = 4
_iYear$ = 12						; size = 4
_iMonth$ = 16						; size = 4
_iDay$ = 20						; size = 4
?CalcChangeDate@_PCBANG_TIME_CLASS@@QAEXHAAH00@Z PROC	; _PCBANG_TIME_CLASS::CalcChangeDate, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 59   : 	int iDayOfTheWeek = GetDayOfTheWeek(iYear,iMonth,iDay);

  00004	8b 45 14	 mov	 eax, DWORD PTR _iDay$[ebp]
  00007	8b 55 10	 mov	 edx, DWORD PTR _iMonth$[ebp]
  0000a	53		 push	 ebx
  0000b	8b 1a		 mov	 ebx, DWORD PTR [edx]
  0000d	56		 push	 esi
  0000e	8b 30		 mov	 esi, DWORD PTR [eax]
  00010	8b 45 0c	 mov	 eax, DWORD PTR _iYear$[ebp]
  00013	8b 10		 mov	 edx, DWORD PTR [eax]
  00015	57		 push	 edi
  00016	56		 push	 esi
  00017	53		 push	 ebx
  00018	52		 push	 edx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	e8 00 00 00 00	 call	 ?GetDayOfTheWeek@_PCBANG_TIME_CLASS@@QAEHHHH@Z ; _PCBANG_TIME_CLASS::GetDayOfTheWeek

; 60   : 	int iNewDayOfTheWeek = (iDayOfTheWeek+7-iResetDayOfWeek)%7;

  00021	b9 07 00 00 00	 mov	 ecx, 7
  00026	2b 4d 08	 sub	 ecx, DWORD PTR _iResetDayOfWeek$[ebp]
  00029	03 c1		 add	 eax, ecx
  0002b	99		 cdq
  0002c	b9 07 00 00 00	 mov	 ecx, 7
  00031	f7 f9		 idiv	 ecx
  00033	8b fa		 mov	 edi, edx

; 61   : 
; 62   : 	if( iDay > iNewDayOfTheWeek )

  00035	3b f7		 cmp	 esi, edi
  00037	7e 10		 jle	 SHORT $LN3@CalcChange

; 63   : 	{
; 64   : 		iDay-= iNewDayOfTheWeek;

  00039	8b 55 14	 mov	 edx, DWORD PTR _iDay$[ebp]
  0003c	2b f7		 sub	 esi, edi
  0003e	5f		 pop	 edi
  0003f	89 32		 mov	 DWORD PTR [edx], esi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 81   : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 10 00	 ret	 16			; 00000010H
$LN3@CalcChange:

; 65   : 		return;
; 66   : 	}
; 67   : 
; 68   : 	iNewDayOfTheWeek -= iDay;

  00049	2b fe		 sub	 edi, esi

; 69   : 
; 70   : 	if( iMonth == 1 )

  0004b	83 fb 01	 cmp	 ebx, 1
  0004e	75 10		 jne	 SHORT $LN2@CalcChange

; 71   : 	{
; 72   : 		iMonth = 12;

  00050	8b 45 10	 mov	 eax, DWORD PTR _iMonth$[ebp]
  00053	c7 00 0c 00 00
	00		 mov	 DWORD PTR [eax], 12	; 0000000cH

; 73   : 		iYear -= 1;

  00059	8b 45 0c	 mov	 eax, DWORD PTR _iYear$[ebp]
  0005c	ff 08		 dec	 DWORD PTR [eax]

; 74   : 	}
; 75   : 	else

  0005e	eb 09		 jmp	 SHORT $LN1@CalcChange
$LN2@CalcChange:

; 76   : 	{
; 77   : 		iMonth -= 1;

  00060	8b 4d 10	 mov	 ecx, DWORD PTR _iMonth$[ebp]
  00063	8b 45 0c	 mov	 eax, DWORD PTR _iYear$[ebp]
  00066	4b		 dec	 ebx
  00067	89 19		 mov	 DWORD PTR [ecx], ebx
$LN1@CalcChange:

; 78   : 	}
; 79   : 
; 80   : 	iDay = GetDayCount(iYear,iMonth)-iNewDayOfTheWeek;

  00069	8b 55 10	 mov	 edx, DWORD PTR _iMonth$[ebp]
  0006c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0006e	8b 10		 mov	 edx, DWORD PTR [eax]
  00070	51		 push	 ecx
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 ?GetDayCount@_PCBANG_TIME_CLASS@@QAEHHH@Z ; _PCBANG_TIME_CLASS::GetDayCount
  0007a	8b 4d 14	 mov	 ecx, DWORD PTR _iDay$[ebp]
  0007d	2b c7		 sub	 eax, edi
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	89 01		 mov	 DWORD PTR [ecx], eax
  00083	5b		 pop	 ebx

; 81   : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 10 00	 ret	 16			; 00000010H
?CalcChangeDate@_PCBANG_TIME_CLASS@@QAEXHAAH00@Z ENDP	; _PCBANG_TIME_CLASS::CalcChangeDate
_TEXT	ENDS
PUBLIC	?CompareDate@_PCBANG_TIME_CLASS@@QAEHHHHHHHHH@Z	; _PCBANG_TIME_CLASS::CompareDate
; Function compile flags: /Ogtp
;	COMDAT ?CompareDate@_PCBANG_TIME_CLASS@@QAEHHHHHHHHH@Z
_TEXT	SEGMENT
_Year1$ = 8						; size = 4
_Month1$ = 12						; size = 4
_Day1$ = 16						; size = 4
_Hour1$ = 20						; size = 4
_Year2$ = 24						; size = 4
_Month2$ = 28						; size = 4
_Day2$ = 32						; size = 4
_Hour2$ = 36						; size = 4
?CompareDate@_PCBANG_TIME_CLASS@@QAEHHHHHHHHH@Z PROC	; _PCBANG_TIME_CLASS::CompareDate, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 85   : 	if( Year1 == Year2 &&
; 86   : 		Month1 == Month2 &&
; 87   : 		Day1 == Day2 &&
; 88   : 		Hour1 == Hour2 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _Year1$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	3b 45 18	 cmp	 eax, DWORD PTR _Year2$[ebp]
  0000c	75 37		 jne	 SHORT $LN2@CompareDat
  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _Month1$[ebp]
  00011	8b 5d 1c	 mov	 ebx, DWORD PTR _Month2$[ebp]
  00014	3b fb		 cmp	 edi, ebx
  00016	75 2b		 jne	 SHORT $LN10@CompareDat
  00018	8b 45 10	 mov	 eax, DWORD PTR _Day1$[ebp]
  0001b	8b 4d 20	 mov	 ecx, DWORD PTR _Day2$[ebp]
  0001e	8b 55 24	 mov	 edx, DWORD PTR _Hour2$[ebp]
  00021	8b 75 14	 mov	 esi, DWORD PTR _Hour1$[ebp]
  00024	3b c1		 cmp	 eax, ecx
  00026	75 17		 jne	 SHORT $LN12@CompareDat
  00028	3b f2		 cmp	 esi, edx
  0002a	75 09		 jne	 SHORT $LN7@CompareDat

; 89   : 	{
; 90   : 		return false;

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	33 c0		 xor	 eax, eax
  00030	5b		 pop	 ebx

; 103  : 	}
; 104  : }

  00031	5d		 pop	 ebp
  00032	c2 20 00	 ret	 32			; 00000020H
$LN7@CompareDat:

; 91   : 	}
; 92   : 
; 93   : 	if( (Year1 == Year2 && Month1 == Month2 && Day1 == Day2 && Hour1 > Hour2) ||
; 94   : 		(Year1 == Year2 && Month1 == Month2 && Day1 > Day2) ||
; 95   : 		(Year1 == Year2 && Month1 > Month2) ||
; 96   : 		(Year1 > Year2) )

  00035	3b c1		 cmp	 eax, ecx
  00037	75 06		 jne	 SHORT $LN12@CompareDat
  00039	3b f2		 cmp	 esi, edx
  0003b	7f 10		 jg	 SHORT $LN5@CompareDat
  0003d	3b c1		 cmp	 eax, ecx
$LN12@CompareDat:
  0003f	7f 0c		 jg	 SHORT $LN5@CompareDat
  00041	3b fb		 cmp	 edi, ebx
$LN10@CompareDat:
  00043	7f 08		 jg	 SHORT $LN5@CompareDat
$LN2@CompareDat:
  00045	8b 4d 18	 mov	 ecx, DWORD PTR _Year2$[ebp]
  00048	39 4d 08	 cmp	 DWORD PTR _Year1$[ebp], ecx
  0004b	7e 0c		 jle	 SHORT $LN6@CompareDat
$LN5@CompareDat:
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 97   : 	{
; 98   : 		return true;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	5b		 pop	 ebx

; 103  : 	}
; 104  : }

  00055	5d		 pop	 ebp
  00056	c2 20 00	 ret	 32			; 00000020H
$LN6@CompareDat:
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 99   : 	}
; 100  : 	else
; 101  : 	{
; 102  : 		return -1;

  0005b	83 c8 ff	 or	 eax, -1
  0005e	5b		 pop	 ebx

; 103  : 	}
; 104  : }

  0005f	5d		 pop	 ebp
  00060	c2 20 00	 ret	 32			; 00000020H
?CompareDate@_PCBANG_TIME_CLASS@@QAEHHHHHHHHH@Z ENDP	; _PCBANG_TIME_CLASS::CompareDate
_TEXT	ENDS
PUBLIC	??_7CPCBangPointUserSystem@@6B@			; CPCBangPointUserSystem::`vftable'
PUBLIC	??0CPCBangPointUserSystem@@QAE@XZ		; CPCBangPointUserSystem::CPCBangPointUserSystem
PUBLIC	??_R4CPCBangPointUserSystem@@6B@		; CPCBangPointUserSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPCBangPointUserSystem@@@8		; CPCBangPointUserSystem `RTTI Type Descriptor'
PUBLIC	??_R3CPCBangPointUserSystem@@8			; CPCBangPointUserSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPCBangPointUserSystem@@8			; CPCBangPointUserSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPCBangPointUserSystem@@8		; CPCBangPointUserSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ECPCBangPointUserSystem@@UAEPAXI@Z:PROC	; CPCBangPointUserSystem::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CPCBangPointUserSystem@@8
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\pcbangusersystem.h
rdata$r	SEGMENT
??_R1A@?0A@EA@CPCBangPointUserSystem@@8 DD FLAT:??_R0?AVCPCBangPointUserSystem@@@8 ; CPCBangPointUserSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPCBangPointUserSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CPCBangPointUserSystem@@8
rdata$r	SEGMENT
??_R2CPCBangPointUserSystem@@8 DD FLAT:??_R1A@?0A@EA@CPCBangPointUserSystem@@8 ; CPCBangPointUserSystem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_PCBANG_TIME_CLASS@@8
rdata$r	ENDS
;	COMDAT ??_R3CPCBangPointUserSystem@@8
rdata$r	SEGMENT
??_R3CPCBangPointUserSystem@@8 DD 00H			; CPCBangPointUserSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPCBangPointUserSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPCBangPointUserSystem@@@8
_DATA	SEGMENT
??_R0?AVCPCBangPointUserSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CPCBangPointUserSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPCBangPointUserSystem@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPCBangPointUserSystem@@6B@
rdata$r	SEGMENT
??_R4CPCBangPointUserSystem@@6B@ DD 00H			; CPCBangPointUserSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPCBangPointUserSystem@@@8
	DD	FLAT:??_R3CPCBangPointUserSystem@@8
rdata$r	ENDS
;	COMDAT ??_7CPCBangPointUserSystem@@6B@
CONST	SEGMENT
??_7CPCBangPointUserSystem@@6B@ DD FLAT:??_R4CPCBangPointUserSystem@@6B@ ; CPCBangPointUserSystem::`vftable'
	DD	FLAT:??_ECPCBangPointUserSystem@@UAEPAXI@Z
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\pcbangusersystem.cpp
CONST	ENDS
;	COMDAT ??0CPCBangPointUserSystem@@QAE@XZ
_TEXT	SEGMENT
??0CPCBangPointUserSystem@@QAE@XZ PROC			; CPCBangPointUserSystem::CPCBangPointUserSystem, COMDAT
; _this$ = ecx

; 109  : {

  00000	8b c1		 mov	 eax, ecx
  00002	b9 01 00 00 00	 mov	 ecx, 1
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	33 c9		 xor	 ecx, ecx
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPCBangPointUserSystem@@6B@
  00015	c7 40 04 d0 07
	00 00		 mov	 DWORD PTR [eax+4], 2000	; 000007d0H
  0001c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0001f	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00022	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00025	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 110  : 
; 111  : }

  00028	c3		 ret	 0
??0CPCBangPointUserSystem@@QAE@XZ ENDP			; CPCBangPointUserSystem::CPCBangPointUserSystem
_TEXT	ENDS
PUBLIC	??1CPCBangPointUserSystem@@UAE@XZ		; CPCBangPointUserSystem::~CPCBangPointUserSystem
; Function compile flags: /Ogtp
;	COMDAT ??1CPCBangPointUserSystem@@UAE@XZ
_TEXT	SEGMENT
??1CPCBangPointUserSystem@@UAE@XZ PROC			; CPCBangPointUserSystem::~CPCBangPointUserSystem, COMDAT
; _this$ = ecx

; 115  : 
; 116  : }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_PCBANG_TIME_CLASS@@6B@
  00006	c3		 ret	 0
??1CPCBangPointUserSystem@@UAE@XZ ENDP			; CPCBangPointUserSystem::~CPCBangPointUserSystem
_TEXT	ENDS
PUBLIC	?Set@CPCBangPointUserSystem@@QAEXHHHHHHHH@Z	; CPCBangPointUserSystem::Set
; Function compile flags: /Ogtp
;	COMDAT ?Set@CPCBangPointUserSystem@@QAEXHHHHHHHH@Z
_TEXT	SEGMENT
_iYear$ = 8						; size = 4
_iMonth$ = 12						; size = 4
_iDay$ = 16						; size = 4
_iHour$ = 20						; size = 4
_iResetDayOfWeek$ = 24					; size = 4
_iResetHour$ = 28					; size = 4
_Function$ = 32						; size = 4
_aIndex$ = 36						; size = 4
?Set@CPCBangPointUserSystem@@QAEXHHHHHHHH@Z PROC	; CPCBangPointUserSystem::Set, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  : 	m_iYear = iYear;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iYear$[ebp]

; 122  : 	m_iMonth = iMonth;

  00006	8b 55 0c	 mov	 edx, DWORD PTR _iMonth$[ebp]
  00009	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 123  : 	m_iDay = iDay;

  0000c	8b 45 10	 mov	 eax, DWORD PTR _iDay$[ebp]
  0000f	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 124  : 	m_iHour = iHour;

  00012	8b 55 14	 mov	 edx, DWORD PTR _iHour$[ebp]
  00015	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 125  : 
; 126  : 	m_iResetDayOfWeek = iResetDayOfWeek;

  00018	8b 45 18	 mov	 eax, DWORD PTR _iResetDayOfWeek$[ebp]
  0001b	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 127  : 	m_iResetHour = iResetHour;

  0001e	8b 55 1c	 mov	 edx, DWORD PTR _iResetHour$[ebp]
  00021	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 128  : 
; 129  : 	pFunction = (void(*)(int))Function;

  00024	8b 45 20	 mov	 eax, DWORD PTR _Function$[ebp]
  00027	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 130  : 	m_iIndex = aIndex;

  0002a	8b 55 24	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0002d	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00030	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 131  : }

  00033	5d		 pop	 ebp
  00034	c2 20 00	 ret	 32			; 00000020H
?Set@CPCBangPointUserSystem@@QAEXHHHHHHHH@Z ENDP	; CPCBangPointUserSystem::Set
_TEXT	ENDS
PUBLIC	?SetSwitch0@CPCBangPointUserSystem@@QAEXXZ	; CPCBangPointUserSystem::SetSwitch0
; Function compile flags: /Ogtp
;	COMDAT ?SetSwitch0@CPCBangPointUserSystem@@QAEXXZ
_TEXT	SEGMENT
?SetSwitch0@CPCBangPointUserSystem@@QAEXXZ PROC		; CPCBangPointUserSystem::SetSwitch0, COMDAT
; _this$ = ecx

; 135  : 	SetSwitch(0);

  00000	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 136  : }

  00007	c3		 ret	 0
?SetSwitch0@CPCBangPointUserSystem@@QAEXXZ ENDP		; CPCBangPointUserSystem::SetSwitch0
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SetChange@CPCBangPointUserSystem@@QAEHXZ	; CPCBangPointUserSystem::SetChange
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SetChange@CPCBangPointUserSystem@@QAEHXZ
_TEXT	SEGMENT
tv215 = -40						; size = 4
tv219 = -36						; size = 4
_iMonth$ = -32						; size = 4
_iYear$ = -28						; size = 4
_iDay$ = -24						; size = 4
_pTime$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?SetChange@CPCBangPointUserSystem@@QAEHXZ PROC		; CPCBangPointUserSystem::SetChange, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 140  : 	int iYear;
; 141  : 	int iMonth;
; 142  : 	int iDay;
; 143  : 	int iHour;
; 144  : 
; 145  : 	if( m_bSwitch == 0 )

  00013	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00017	75 14		 jne	 SHORT $LN5@SetChange

; 146  : 	{
; 147  : 		return true;

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	5e		 pop	 esi

; 182  : 	}
; 183  : 	else
; 184  : 	{
; 185  : 		return 1;
; 186  : 	}
; 187  : 
; 188  : }

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00022	33 cd		 xor	 ecx, ebp
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN5@SetChange:
  0002d	53		 push	 ebx

; 148  : 	}
; 149  : 
; 150  : 	SYSTEMTIME pTime;
; 151  : 	GetLocalTime(&pTime);

  0002e	8d 45 ec	 lea	 eax, DWORD PTR _pTime$[ebp]
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 152  : 
; 153  : 	if( pSystime.wYear == pTime.wYear &&
; 154  : 		pSystime.wMonth == pTime.wMonth &&
; 155  : 		pSystime.wDay == pTime.wDay &&
; 156  : 		pSystime.wHour == pTime.wHour )

  00038	8b 45 ec	 mov	 eax, DWORD PTR _pTime$[ebp]
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR _pTime$[ebp+8]
  0003e	66 8b 55 f2	 mov	 dx, WORD PTR _pTime$[ebp+6]
  00042	66 8b 5d ee	 mov	 bx, WORD PTR _pTime$[ebp+2]
  00046	66 39 46 24	 cmp	 WORD PTR [esi+36], ax
  0004a	75 27		 jne	 SHORT $LN4@SetChange
  0004c	66 39 5e 26	 cmp	 WORD PTR [esi+38], bx
  00050	75 21		 jne	 SHORT $LN4@SetChange
  00052	66 39 56 2a	 cmp	 WORD PTR [esi+42], dx
  00056	75 1b		 jne	 SHORT $LN4@SetChange
  00058	66 39 4e 2c	 cmp	 WORD PTR [esi+44], cx
  0005c	75 15		 jne	 SHORT $LN4@SetChange

; 157  : 	{
; 158  : 		return true;

  0005e	5b		 pop	 ebx
  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	5e		 pop	 esi

; 182  : 	}
; 183  : 	else
; 184  : 	{
; 185  : 		return 1;
; 186  : 	}
; 187  : 
; 188  : }

  00065	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN4@SetChange:
  00073	57		 push	 edi

; 159  : 	}
; 160  : 
; 161  : 	pSystime = pTime;

  00074	8b 7d f0	 mov	 edi, DWORD PTR _pTime$[ebp+4]
  00077	89 46 24	 mov	 DWORD PTR [esi+36], eax
  0007a	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  0007d	8b 7d f8	 mov	 edi, DWORD PTR _pTime$[ebp+12]
  00080	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
  00083	89 7e 30	 mov	 DWORD PTR [esi+48], edi

; 162  : 
; 163  : 	iYear = pTime.wYear;

  00086	0f b7 f8	 movzx	 edi, ax

; 164  : 	iMonth = pTime.wMonth;
; 165  : 	iDay = pTime.wDay;
; 166  : 	iHour = m_iResetHour;
; 167  : 
; 168  : 	if( m_iResetHour > pTime.wHour )

  00089	0f b7 c9	 movzx	 ecx, cx
  0008c	0f b7 c2	 movzx	 eax, dx
  0008f	0f b7 db	 movzx	 ebx, bx
  00092	89 7d e4	 mov	 DWORD PTR _iYear$[ebp], edi
  00095	89 5d e0	 mov	 DWORD PTR _iMonth$[ebp], ebx
  00098	89 45 d8	 mov	 DWORD PTR tv215[ebp], eax
  0009b	89 45 e8	 mov	 DWORD PTR _iDay$[ebp], eax
  0009e	89 4d dc	 mov	 DWORD PTR tv219[ebp], ecx
  000a1	39 4e 18	 cmp	 DWORD PTR [esi+24], ecx
  000a4	7e 03		 jle	 SHORT $LN3@SetChange

; 169  : 	{
; 170  : 		iDay--;

  000a6	ff 4d e8	 dec	 DWORD PTR _iDay$[ebp]
$LN3@SetChange:

; 171  : 	}
; 172  : 
; 173  : 	this->CalcChangeDate(this->m_iResetDayOfWeek,iYear,iMonth,iDay);

  000a9	8d 4d e8	 lea	 ecx, DWORD PTR _iDay$[ebp]
  000ac	51		 push	 ecx
  000ad	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000b0	8d 55 e0	 lea	 edx, DWORD PTR _iMonth$[ebp]
  000b3	52		 push	 edx
  000b4	8d 45 e4	 lea	 eax, DWORD PTR _iYear$[ebp]
  000b7	50		 push	 eax
  000b8	51		 push	 ecx
  000b9	8b ce		 mov	 ecx, esi
  000bb	e8 00 00 00 00	 call	 ?CalcChangeDate@_PCBANG_TIME_CLASS@@QAEXHAAH00@Z ; _PCBANG_TIME_CLASS::CalcChangeDate

; 174  : 
; 175  : 	if( this->CompareDate(this->m_iYear,this->m_iMonth,this->m_iDay,this->m_iHour,iYear,iMonth,iDay,iHour) < 0 )

  000c0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000c3	8b 55 e8	 mov	 edx, DWORD PTR _iDay$[ebp]
  000c6	8b 4d e4	 mov	 ecx, DWORD PTR _iYear$[ebp]
  000c9	50		 push	 eax
  000ca	8b 45 e0	 mov	 eax, DWORD PTR _iMonth$[ebp]
  000cd	52		 push	 edx
  000ce	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000d1	50		 push	 eax
  000d2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000d5	51		 push	 ecx
  000d6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d9	52		 push	 edx
  000da	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000dd	50		 push	 eax
  000de	51		 push	 ecx
  000df	52		 push	 edx
  000e0	8b ce		 mov	 ecx, esi
  000e2	e8 00 00 00 00	 call	 ?CompareDate@_PCBANG_TIME_CLASS@@QAEHHHHHHHHH@Z ; _PCBANG_TIME_CLASS::CompareDate
  000e7	85 c0		 test	 eax, eax
  000e9	79 28		 jns	 SHORT $LN2@SetChange

; 176  : 	{
; 177  : 		m_iYear = pTime.wYear;
; 178  : 		m_iMonth = pTime.wMonth;
; 179  : 		m_iDay = pTime.wDay;

  000eb	8b 45 d8	 mov	 eax, DWORD PTR tv215[ebp]

; 180  : 		m_iHour = pTime.wHour;

  000ee	8b 4d dc	 mov	 ecx, DWORD PTR tv219[ebp]
  000f1	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  000f4	5f		 pop	 edi
  000f5	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000f8	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000fb	5b		 pop	 ebx
  000fc	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 181  : 		return 2;

  000ff	b8 02 00 00 00	 mov	 eax, 2
  00104	5e		 pop	 esi

; 182  : 	}
; 183  : 	else
; 184  : 	{
; 185  : 		return 1;
; 186  : 	}
; 187  : 
; 188  : }

  00105	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00108	33 cd		 xor	 ecx, ebp
  0010a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
$LN2@SetChange:
  00113	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00116	5f		 pop	 edi
  00117	5b		 pop	 ebx
  00118	33 cd		 xor	 ecx, ebp
  0011a	b8 01 00 00 00	 mov	 eax, 1
  0011f	5e		 pop	 esi
  00120	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
?SetChange@CPCBangPointUserSystem@@QAEHXZ ENDP		; CPCBangPointUserSystem::SetChange
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GCPCBangPointUserSystem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPCBangPointUserSystem@@UAEPAXI@Z PROC		; CPCBangPointUserSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPCBangPointUserSystem@@UAE@XZ ; CPCBangPointUserSystem::~CPCBangPointUserSystem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@2:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCPCBangPointUserSystem@@UAEPAXI@Z ENDP		; CPCBangPointUserSystem::`scalar deleting destructor'
_TEXT	ENDS
END
