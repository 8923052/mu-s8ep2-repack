; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\SProtocol.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB	; CryptoPP::FixedBlockSize<8>::BLOCKSIZE
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::IV_LENGTH
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::IV_LENGTH
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::IV_LENGTH
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<24,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<24,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<16,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<16,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<8,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<8,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB
CONST	SEGMENT
?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB DD 08H	; CryptoPP::FixedBlockSize<8>::BLOCKSIZE
CONST	ENDS
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1OBJECTSTRUCT@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0
__ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1OBJECTSTRUCT@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1OBJECTSTRUCT@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0003b	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00041	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??1OBJECTSTRUCT@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	?SetBill@BILL_CLASS@@QAEHHHPAD@Z		; BILL_CLASS::SetBill
EXTRN	_strcpy_s:PROC
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\user.h
;	COMDAT ?SetBill@BILL_CLASS@@QAEHHHPAD@Z
_TEXT	SEGMENT
_pay$ = 8						; size = 4
_end_time$ = 12						; size = 4
_end_days$ = 16						; size = 4
?SetBill@BILL_CLASS@@QAEHHHPAD@Z PROC			; BILL_CLASS::SetBill, COMDAT
; _this$ = ecx

; 1996 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1997 : 		BOOL bRet=0;

  00004	33 f6		 xor	 esi, esi

; 1998 : 
; 1999 : 		if ( this->PayCode == -1 )

  00006	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  00009	75 05		 jne	 SHORT $LN1@SetBill

; 2000 : 		{
; 2001 : 			bRet = 1;

  0000b	be 01 00 00 00	 mov	 esi, 1
$LN1@SetBill:

; 2002 : 		}
; 2003 : 
; 2004 : 		this->PayCode = pay;

  00010	8b 45 08	 mov	 eax, DWORD PTR _pay$[ebp]

; 2005 : 		this->EndTime = end_time;

  00013	8b 55 0c	 mov	 edx, DWORD PTR _end_time$[ebp]
  00016	89 01		 mov	 DWORD PTR [ecx], eax

; 2006 : 		strcpy_s(EndsDays, sizeof(EndsDays), end_days);

  00018	8b 45 10	 mov	 eax, DWORD PTR _end_days$[ebp]
  0001b	50		 push	 eax
  0001c	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0001f	83 c1 08	 add	 ecx, 8
  00022	6a 0d		 push	 13			; 0000000dH
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 _strcpy_s
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2007 : 		return bRet;

  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi

; 2008 : 	}	// line : 237

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?SetBill@BILL_CLASS@@QAEHHHPAD@Z ENDP			; BILL_CLASS::SetBill
_TEXT	ENDS
PUBLIC	?GetState@CDragonEvent@@QAEEXZ			; CDragonEvent::GetState
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\dragonevent.h
;	COMDAT ?GetState@CDragonEvent@@QAEEXZ
_TEXT	SEGMENT
?GetState@CDragonEvent@@QAEEXZ PROC			; CDragonEvent::GetState, COMDAT
; _this$ = ecx

; 20   : 	BYTE GetState(){return this->EventState;}	// Dagon event line 30.h

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]
  00003	c3		 ret	 0
?GetState@CDragonEvent@@QAEEXZ ENDP			; CDragonEvent::GetState
_TEXT	ENDS
PUBLIC	?_ARGB@@YAKEEEE@Z				; _ARGB
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\tnotice.h
;	COMDAT ?_ARGB@@YAKEEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_r$ = 12						; size = 1
_g$ = 16						; size = 1
_b$ = 20						; size = 1
?_ARGB@@YAKEEEE@Z PROC					; _ARGB, COMDAT

; 9    : __inline DWORD _ARGB(BYTE a, BYTE r, BYTE g, BYTE b){ return a*16777216 + b*65536 + g*256 + r;}; // in tnotice.h : line 8

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _a$[ebp]
  00007	0f b6 4d 14	 movzx	 ecx, BYTE PTR _b$[ebp]
  0000b	0f b6 55 10	 movzx	 edx, BYTE PTR _g$[ebp]
  0000f	c1 e0 08	 shl	 eax, 8
  00012	03 c1		 add	 eax, ecx
  00014	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _r$[ebp]
  00018	c1 e0 08	 shl	 eax, 8
  0001b	03 c2		 add	 eax, edx
  0001d	c1 e0 08	 shl	 eax, 8
  00020	03 c1		 add	 eax, ecx
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_ARGB@@YAKEEEE@Z ENDP					; _ARGB
_TEXT	ENDS
PUBLIC	?GetMapSvrGroup@CMapServerManager@@QAEHXZ	; CMapServerManager::GetMapSvrGroup
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\mapservermanager.h
;	COMDAT ?GetMapSvrGroup@CMapServerManager@@QAEHXZ
_TEXT	SEGMENT
?GetMapSvrGroup@CMapServerManager@@QAEHXZ PROC		; CMapServerManager::GetMapSvrGroup, COMDAT
; _this$ = ecx

; 55   : 		if ( this->m_lpThisMapSvrData != NULL )

  00000	8b 81 00 6b 01
	00		 mov	 eax, DWORD PTR [ecx+92928]
  00006	85 c0		 test	 eax, eax
  00008	74 05		 je	 SHORT $LN1@GetMapSvrG

; 56   : 		{
; 57   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  0000a	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]

; 60   : 	}

  0000e	c3		 ret	 0
$LN1@GetMapSvrG:

; 58   : 		}
; 59   : 		return -1;

  0000f	83 c8 ff	 or	 eax, -1

; 60   : 	}

  00012	c3		 ret	 0
?GetMapSvrGroup@CMapServerManager@@QAEHXZ ENDP		; CMapServerManager::GetMapSvrGroup
_TEXT	ENDS
PUBLIC	??_GCLogToFile@@QAEPAXI@Z			; CLogToFile::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??1CLogToFile@@QAE@XZ:PROC			; CLogToFile::~CLogToFile
; Function compile flags: /Ogtp
;	COMDAT ??_GCLogToFile@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLogToFile@@QAEPAXI@Z PROC				; CLogToFile::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLogToFile@@QAE@XZ	; CLogToFile::~CLogToFile
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCLogToFile@@QAEPAXI@Z ENDP				; CLogToFile::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJServerLogin@@YAXXZ				; GJServerLogin
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
EXTRN	?wsJServerCli@@3VwsJoinServerCli@@A:BYTE	; wsJServerCli
EXTRN	?gGameServerCode@@3FA:WORD			; gGameServerCode
EXTRN	?szServerName@@3PADA:BYTE			; szServerName
EXTRN	?GameServerPort@@3HA:DWORD			; GameServerPort
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\sprotocol.cpp
;	COMDAT ?GJServerLogin@@YAXXZ
_TEXT	SEGMENT
_pInfo$ = -64						; size = 58
__$ArrayPad$ = -4					; size = 4
?GJServerLogin@@YAXXZ PROC				; GJServerLogin, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 121  : 	SDHP_SERVERINFO pInfo;
; 122  : 
; 123  : 	pInfo.h.c = 0xC1;
; 124  : 	pInfo.h.size = sizeof(SDHP_SERVERINFO);
; 125  : 	pInfo.h.headcode = 0x00;
; 126  : 	pInfo.Port = GameServerPort;

  00010	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?GameServerPort@@3HA
  00016	66 89 45 c4	 mov	 WORD PTR _pInfo$[ebp+4], ax
  0001a	c7 45 c0 c1 3a
	00 01		 mov	 DWORD PTR _pInfo$[ebp], 16792257 ; 01003ac1H

; 127  : 	pInfo.Type = 1;
; 128  : 	strcpy(pInfo.ServerName , szServerName);

  00021	33 c0		 xor	 eax, eax
$LL3@GJServerLo:
  00023	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?szServerName@@3PADA[eax]
  00029	88 4c 05 c6	 mov	 BYTE PTR _pInfo$[ebp+eax+6], cl
  0002d	40		 inc	 eax
  0002e	84 c9		 test	 cl, cl
  00030	75 f1		 jne	 SHORT $LL3@GJServerLo

; 129  : 	pInfo.ServerCode = gGameServerCode;
; 130  : 
; 131  : 	wsJServerCli.DataSend((char*)&pInfo, pInfo.h.size);

  00032	0f b6 55 c1	 movzx	 edx, BYTE PTR _pInfo$[ebp+1]
  00036	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  0003d	52		 push	 edx
  0003e	8d 45 c0	 lea	 eax, DWORD PTR _pInfo$[ebp]
  00041	66 89 4d f8	 mov	 WORD PTR _pInfo$[ebp+56], cx
  00045	50		 push	 eax
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  0004b	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 132  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?GJServerLogin@@YAXXZ ENDP				; GJServerLogin
_TEXT	ENDS
PUBLIC	?JGServerLoginResult@@YAXPAUSDHP_RESULT@@@Z	; JGServerLoginResult
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	?JoinServerConnected@@3HA:DWORD			; JoinServerConnected
EXTRN	?gServerReady@@3HA:DWORD			; gServerReady
EXTRN	?ghWnd@@3PAUHWND__@@A:DWORD			; ghWnd
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
; Function compile flags: /Ogtp
;	COMDAT ?JGServerLoginResult@@YAXPAUSDHP_RESULT@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGServerLoginResult@@YAXPAUSDHP_RESULT@@@Z PROC	; JGServerLoginResult, COMDAT

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : 	if ( lpMsg->Result == false )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	80 78 03 00	 cmp	 BYTE PTR [eax+3], 0
  0000a	75 1b		 jne	 SHORT $LN1@JGServerLo

; 141  : 	{
; 142  : 		LogAdd(lMsg.Get(MSGGET(1, 210)));

  0000c	68 d2 01 00 00	 push	 466			; 000001d2H
  00011	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00016	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0001b	50		 push	 eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00022	83 c4 04	 add	 esp, 4

; 149  : 
; 150  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN1@JGServerLo:

; 143  : 		return;
; 144  : 	}
; 145  : 
; 146  : 	JoinServerConnected=TRUE;
; 147  : 	gServerReady++;
; 148  : 	SendMessage(ghWnd, WM_START_SERVER, 0, 0);

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	01 05 00 00 00
	00		 add	 DWORD PTR ?gServerReady@@3HA, eax ; gServerReady
  0003c	68 05 04 00 00	 push	 1029			; 00000405H
  00041	51		 push	 ecx
  00042	a3 00 00 00 00	 mov	 DWORD PTR ?JoinServerConnected@@3HA, eax ; JoinServerConnected
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 149  : 
; 150  : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?JGServerLoginResult@@YAXPAUSDHP_RESULT@@@Z ENDP	; JGServerLoginResult
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPUserClose@@YAXPAD@Z				; GJPUserClose
; Function compile flags: /Ogtp
;	COMDAT ?GJPUserClose@@YAXPAD@Z
_TEXT	SEGMENT
_pClose$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_szAccountID$ = 8					; size = 4
?GJPUserClose@@YAXPAD@Z PROC				; GJPUserClose, COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _szAccountID$[ebp]

; 156  : 	SDHP_USERCLOSE_ID pClose;
; 157  : 
; 158  : 	pClose.h.c =0xC1;
; 159  : 	pClose.h.size= sizeof(SDHP_USERCLOSE_ID);
; 160  : 	pClose.h.headcode = 0x05;
; 161  : 	memcpy(pClose.szId , szAccountID, 10);

  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	66 8b 40 08	 mov	 ax, WORD PTR [eax+8]
  0001c	89 4d e3	 mov	 DWORD PTR _pClose$[ebp+3], ecx

; 162  : 
; 163  : 	wsJServerCli.DataSend((char*)&pClose, pClose.h.size);

  0001f	6a 1c		 push	 28			; 0000001cH
  00021	8d 4d e0	 lea	 ecx, DWORD PTR _pClose$[ebp]
  00024	51		 push	 ecx
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  0002a	66 c7 45 e0 c1
	1c		 mov	 WORD PTR _pClose$[ebp], 7361 ; 00001cc1H
  00030	c6 45 e2 05	 mov	 BYTE PTR _pClose$[ebp+2], 5
  00034	89 55 e7	 mov	 DWORD PTR _pClose$[ebp+7], edx
  00037	66 89 45 eb	 mov	 WORD PTR _pClose$[ebp+11], ax
  0003b	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 164  : }

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?GJPUserClose@@YAXPAD@Z ENDP				; GJPUserClose
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPUserClose@@YAXPAUOBJECTSTRUCT@@@Z		; GJPUserClose
; Function compile flags: /Ogtp
;	COMDAT ?GJPUserClose@@YAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pClose$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GJPUserClose@@YAXPAUOBJECTSTRUCT@@@Z PROC		; GJPUserClose, COMDAT

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]

; 169  : 	SDHP_USERCLOSE_ID pClose;
; 170  : 
; 171  : 	pClose.h.c =0xC1;
; 172  : 	pClose.h.size= sizeof(SDHP_USERCLOSE_ID);
; 173  : 	pClose.h.headcode = 0x05;
; 174  : 	memcpy(pClose.szId , lpObj->AccountID, 10);

  00013	8b 48 52	 mov	 ecx, DWORD PTR [eax+82]
  00016	8b 50 56	 mov	 edx, DWORD PTR [eax+86]
  00019	89 4d e3	 mov	 DWORD PTR _pClose$[ebp+3], ecx
  0001c	66 8b 48 5a	 mov	 cx, WORD PTR [eax+90]
  00020	66 89 4d eb	 mov	 WORD PTR _pClose$[ebp+11], cx
  00024	89 55 e7	 mov	 DWORD PTR _pClose$[ebp+7], edx

; 175  : 	//memcpy(pClose.szName, lpObj->BackName, 10);
; 176  : 	pClose.Level = lpObj->Level;

  00027	66 8b 90 96 00
	00 00		 mov	 dx, WORD PTR [eax+150]

; 177  : 	pClose.DbClass = lpObj->DbClass;

  0002e	8a 80 92 00 00
	00		 mov	 al, BYTE PTR [eax+146]

; 178  : 
; 179  : 	wsJServerCli.DataSend((char*)&pClose, pClose.h.size);

  00034	6a 1c		 push	 28			; 0000001cH
  00036	8d 4d e0	 lea	 ecx, DWORD PTR _pClose$[ebp]
  00039	51		 push	 ecx
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  0003f	66 c7 45 e0 c1
	1c		 mov	 WORD PTR _pClose$[ebp], 7361 ; 00001cc1H
  00045	c6 45 e2 05	 mov	 BYTE PTR _pClose$[ebp+2], 5
  00049	66 89 55 f8	 mov	 WORD PTR _pClose$[ebp+24], dx
  0004d	88 45 fa	 mov	 BYTE PTR _pClose$[ebp+26], al
  00050	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 180  : }

  00055	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00058	33 cd		 xor	 ecx, ebp
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?GJPUserClose@@YAXPAUOBJECTSTRUCT@@@Z ENDP		; GJPUserClose
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPAccountFail@@YAXFPADHH@Z			; GJPAccountFail
; Function compile flags: /Ogtp
;	COMDAT ?GJPAccountFail@@YAXFPADHH@Z
_TEXT	SEGMENT
_pMsg$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_number$ = 8						; size = 2
_Id$ = 12						; size = 4
_DBNumber$ = 16						; size = 4
_UserNumber$ = 20					; size = 4
?GJPAccountFail@@YAXFPADHH@Z PROC			; GJPAccountFail, COMDAT

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 278  : 	SDHP_JOINFAIL pMsg;
; 279  : 
; 280  : 	memset(&pMsg, 0, sizeof(SDHP_JOINFAIL));
; 281  : 
; 282  : 	pMsg.h.c=0xC1;
; 283  : 	pMsg.h.headcode= 0x02;
; 284  : 	pMsg.h.size = sizeof (SDHP_JOINFAIL);
; 285  : 	pMsg.Number = number;
; 286  : 	pMsg.DBNumber = DBNumber;
; 287  : 	pMsg.UserNumber = UserNumber;

  00010	8b 55 14	 mov	 edx, DWORD PTR _UserNumber$[ebp]
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _DBNumber$[ebp]
  00016	33 c0		 xor	 eax, eax
  00018	89 45 e0	 mov	 DWORD PTR _pMsg$[ebp], eax
  0001b	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  0001e	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+20], eax
  00021	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+24], eax
  00024	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00027	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  0002a	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  0002d	66 8b 45 08	 mov	 ax, WORD PTR _number$[ebp]
  00031	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+20], edx
  00034	66 89 45 e4	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 288  : 
; 289  : 	strcpy(pMsg.Id , Id);

  00038	8b 45 0c	 mov	 eax, DWORD PTR _Id$[ebp]
  0003b	8d 55 e6	 lea	 edx, DWORD PTR _pMsg$[ebp+6]
  0003e	c6 45 e0 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00042	66 c7 45 e1 1c
	02		 mov	 WORD PTR _pMsg$[ebp+1], 540 ; 0000021cH
  00048	89 4d f8	 mov	 DWORD PTR _pMsg$[ebp+24], ecx
  0004b	2b d0		 sub	 edx, eax
  0004d	8d 49 00	 npad	 3
$LL3@GJPAccount:
  00050	8a 08		 mov	 cl, BYTE PTR [eax]
  00052	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00055	40		 inc	 eax
  00056	84 c9		 test	 cl, cl
  00058	75 f6		 jne	 SHORT $LL3@GJPAccount

; 290  : 
; 291  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  0005a	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0005e	50		 push	 eax
  0005f	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00062	51		 push	 ecx
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00068	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 292  : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?GJPAccountFail@@YAXFPADHH@Z ENDP			; GJPAccountFail
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPAccountBlock@@YAXFPADHHH@Z			; GJPAccountBlock
; Function compile flags: /Ogtp
;	COMDAT ?GJPAccountBlock@@YAXFPADHHH@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_number$ = 8						; size = 2
_Id$ = 12						; size = 4
_DBNumber$ = 16						; size = 4
_UserNumber$ = 20					; size = 4
_BlockCode$ = 24					; size = 4
?GJPAccountBlock@@YAXFPADHHH@Z PROC			; GJPAccountBlock, COMDAT

; 297  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 298  : 	SDHP_COMMAND_BLOCK pMsg;
; 299  : 
; 300  : 	memset(&pMsg, 0, sizeof(SDHP_COMMAND_BLOCK));
; 301  : 
; 302  : 	pMsg.h.c=0xC1;
; 303  : 	pMsg.h.headcode= 0x04;
; 304  : 	pMsg.h.size = sizeof (SDHP_COMMAND_BLOCK);
; 305  : 	pMsg.Number = number;
; 306  : 	pMsg.DBNumber = DBNumber;
; 307  : 	pMsg.UserNumber = UserNumber;

  00010	8b 55 14	 mov	 edx, DWORD PTR _UserNumber$[ebp]
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _DBNumber$[ebp]
  00016	33 c0		 xor	 eax, eax
  00018	89 45 dc	 mov	 DWORD PTR _pMsg$[ebp], eax
  0001b	89 45 e0	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  0001e	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+20], eax
  00021	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+24], eax
  00024	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+28], eax
  00027	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  0002a	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  0002d	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  00030	66 8b 45 08	 mov	 ax, WORD PTR _number$[ebp]
  00034	66 89 45 e0	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 308  : 	pMsg.BlockCode = BlockCode;

  00038	8a 45 18	 mov	 al, BYTE PTR _BlockCode$[ebp]
  0003b	89 55 f0	 mov	 DWORD PTR _pMsg$[ebp+20], edx
  0003e	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+28], al

; 309  : 
; 310  : 	strcpy(pMsg.Id , Id);

  00041	8b 45 0c	 mov	 eax, DWORD PTR _Id$[ebp]
  00044	8d 55 e2	 lea	 edx, DWORD PTR _pMsg$[ebp+6]
  00047	c6 45 dc c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  0004b	66 c7 45 dd 20
	04		 mov	 WORD PTR _pMsg$[ebp+1], 1056 ; 00000420H
  00051	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+24], ecx
  00054	2b d0		 sub	 edx, eax
$LL3@GJPAccount@2:
  00056	8a 08		 mov	 cl, BYTE PTR [eax]
  00058	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0005b	40		 inc	 eax
  0005c	84 c9		 test	 cl, cl
  0005e	75 f6		 jne	 SHORT $LL3@GJPAccount@2

; 311  : 
; 312  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  00060	0f b6 4d dd	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00064	51		 push	 ecx
  00065	8d 55 dc	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00068	52		 push	 edx
  00069	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  0006e	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 313  : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?GJPAccountBlock@@YAXFPADHHH@Z ENDP			; GJPAccountBlock
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPBillCeckRecv@@YAXPAUSDHP_BILLSEARCH_RESULT@@@Z ; GJPBillCeckRecv
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?m_ObjBill@@3PAVBILL_CLASS@@A:BYTE		; m_ObjBill
EXTRN	?gObjIsAccontConnect@@YAHHPAD@Z:PROC		; gObjIsAccontConnect
; Function compile flags: /Ogtp
;	COMDAT ?GJPBillCeckRecv@@YAXPAUSDHP_BILLSEARCH_RESULT@@@Z
_TEXT	SEGMENT
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?GJPBillCeckRecv@@YAXPAUSDHP_BILLSEARCH_RESULT@@@Z PROC	; GJPBillCeckRecv, COMDAT

; 318  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]

; 319  : 
; 320  : 	int aIndex = lpMsg->Number ;
; 321  : 	char szId[11];
; 322  : 
; 323  : 	szId[10] = 0;
; 324  : 
; 325  : 	memcpy(szId, lpMsg->Id, sizeof(lpMsg->Id));

  00014	8b 4e 07	 mov	 ecx, DWORD PTR [esi+7]
  00017	8b 46 03	 mov	 eax, DWORD PTR [esi+3]
  0001a	66 8b 56 0b	 mov	 dx, WORD PTR [esi+11]
  0001e	57		 push	 edi
  0001f	0f bf 7e 0e	 movsx	 edi, WORD PTR [esi+14]
  00023	89 4d f4	 mov	 DWORD PTR _szId$[ebp+4], ecx

; 326  : 
; 327  : 	//Previously causing null pointer as no default premium records
; 328  : 	//Check where necessary if Premium is altered to allow nulls
; 329  : 	if (gObjIsAccontConnect(aIndex, szId) == 0 || lpMsg->PayCode == NULL || lpMsg->EndTime == NULL || &lpMsg->EndDays == NULL || &lpMsg->EndDays[0] == NULL)

  00026	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  00029	89 45 f0	 mov	 DWORD PTR _szId$[ebp], eax
  0002c	8a 46 0d	 mov	 al, BYTE PTR [esi+13]
  0002f	51		 push	 ecx
  00030	57		 push	 edi
  00031	66 89 55 f8	 mov	 WORD PTR _szId$[ebp+8], dx
  00035	88 45 fa	 mov	 BYTE PTR _szId$[ebp+10], al
  00038	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	74 4d		 je	 SHORT $LN2@GJPBillCec
  00044	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00047	85 d2		 test	 edx, edx
  00049	74 46		 je	 SHORT $LN2@GJPBillCec
  0004b	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0004e	85 c9		 test	 ecx, ecx
  00050	74 3f		 je	 SHORT $LN2@GJPBillCec
  00052	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00055	85 c0		 test	 eax, eax
  00057	74 38		 je	 SHORT $LN2@GJPBillCec

; 330  : 		return ;
; 331  : 
; 332  : 
; 333  : 	if ( m_ObjBill[aIndex].SetBill( lpMsg->PayCode, lpMsg->EndTime, &lpMsg->EndDays[0] ) == TRUE )

  00059	50		 push	 eax
  0005a	51		 push	 ecx
  0005b	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  0005e	c1 e1 04	 shl	 ecx, 4
  00061	52		 push	 edx
  00062	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?m_ObjBill@@3PAVBILL_CLASS@@A ; m_ObjBill
  00068	e8 00 00 00 00	 call	 ?SetBill@BILL_CLASS@@QAEHHHPAD@Z ; BILL_CLASS::SetBill
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 1f		 jne	 SHORT $LN2@GJPBillCec

; 334  : 		gObjAddMsgSendDelay(&gObj[aIndex], 1000, aIndex, 100, 0);

  00072	6a 00		 push	 0
  00074	6a 64		 push	 100			; 00000064H
  00076	57		 push	 edi
  00077	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  0007d	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00083	68 e8 03 00 00	 push	 1000			; 000003e8H
  00088	57		 push	 edi
  00089	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  0008e	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@GJPBillCec:

; 335  : 	
; 336  : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	5f		 pop	 edi
  00095	33 cd		 xor	 ecx, ebp
  00097	5e		 pop	 esi
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?GJPBillCeckRecv@@YAXPAUSDHP_BILLSEARCH_RESULT@@@Z ENDP	; GJPBillCeckRecv
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPUserKillRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z	; GJPUserKillRecv
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
; Function compile flags: /Ogtp
;	COMDAT ?GJPUserKillRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z
_TEXT	SEGMENT
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?GJPUserKillRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z PROC	; GJPUserKillRecv, COMDAT

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 342  : 	char szId[11];
; 343  : 	int number;
; 344  : 	szId[10] = 0;
; 345  : 
; 346  : 	memcpy(szId, lpMsg->Id , sizeof(lpMsg->Id) );

  00013	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  00016	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  00019	56		 push	 esi

; 347  : 	number = lpMsg->Number;

  0001a	0f bf 70 0e	 movsx	 esi, WORD PTR [eax+14]
  0001e	89 55 f4	 mov	 DWORD PTR _szId$[ebp+4], edx

; 348  : 
; 349  : 	if (gObjIsAccontConnect(number, szId) == 0 )

  00021	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00024	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx
  00027	66 8b 48 0b	 mov	 cx, WORD PTR [eax+11]
  0002b	52		 push	 edx
  0002c	56		 push	 esi
  0002d	c6 45 fa 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  00031	66 89 4d f8	 mov	 WORD PTR _szId$[ebp+8], cx
  00035	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003a	83 c4 08	 add	 esp, 8
  0003d	85 c0		 test	 eax, eax
  0003f	74 21		 je	 SHORT $LN2@GJPUserKil

; 350  : 	{
; 351  : 		return;
; 352  : 	}
; 353  : 
; 354  : 	GCServerMsgStringSend(lMsg.Get( MSGGET(6, 66)), number, 0);

  00041	6a 00		 push	 0
  00043	56		 push	 esi
  00044	68 42 06 00 00	 push	 1602			; 00000642H
  00049	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0004e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 355  : 	//gObjUserKill(number);
; 356  : 	CloseClient(number);

  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@GJPUserKil:

; 357  : }

  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	33 cd		 xor	 ecx, ebp
  00067	5e		 pop	 esi
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?GJPUserKillRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z ENDP	; GJPUserKillRecv
_TEXT	ENDS
PUBLIC	?JGOtherJoin@@YAXPAUSDHP_OTHERJOINMSG@@@Z	; JGOtherJoin
; Function compile flags: /Ogtp
;	COMDAT ?JGOtherJoin@@YAXPAUSDHP_OTHERJOINMSG@@@Z
_TEXT	SEGMENT
_szId$ = -12						; size = 11
_lpMsg$ = 8						; size = 4
?JGOtherJoin@@YAXPAUSDHP_OTHERJOINMSG@@@Z PROC		; JGOtherJoin, COMDAT

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 363  : 	char szId[11];
; 364  : 	szId[10]=0;
; 365  : 	int n;
; 366  : 
; 367  : 	memcpy(szId, lpMsg->AccountID, sizeof(lpMsg->AccountID));

  00006	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00009	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  0000c	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  0000f	66 8b 40 0b	 mov	 ax, WORD PTR [eax+11]
  00013	56		 push	 esi
  00014	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001a	57		 push	 edi
  0001b	c6 45 fe 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  0001f	89 4d f4	 mov	 DWORD PTR _szId$[ebp], ecx
  00022	89 55 f8	 mov	 DWORD PTR _szId$[ebp+4], edx
  00025	66 89 45 fc	 mov	 WORD PTR _szId$[ebp+8], ax

; 368  : 
; 369  : 	for (n= OBJ_STARTUSERINDEX; n<OBJMAX;n++)

  00029	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  0002e	81 c6 52 dd 49
	06		 add	 esi, 105504082		; 0649dd52H
$LL7@JGOtherJoi:

; 370  : 	{
; 371  : 		if ( gObj[n].Connected >= PLAYER_LOGGED )

  00034	83 7e b2 02	 cmp	 DWORD PTR [esi-78], 2
  00038	7c 3f		 jl	 SHORT $LN6@JGOtherJoi

; 372  : 		{
; 373  : 			if ( gObj[n].AccountID[0] == szId[0] )

  0003a	8a 4d f4	 mov	 cl, BYTE PTR _szId$[ebp]
  0003d	38 0e		 cmp	 BYTE PTR [esi], cl
  0003f	75 38		 jne	 SHORT $LN6@JGOtherJoi

; 374  : 			{
; 375  : 				if ( gObj[n].AccountID[1] == szId[1] )

  00041	8a 55 f5	 mov	 dl, BYTE PTR _szId$[ebp+1]
  00044	38 56 01	 cmp	 BYTE PTR [esi+1], dl
  00047	75 30		 jne	 SHORT $LN6@JGOtherJoi

; 376  : 				{
; 377  : 					if ( strcmp(gObj[n].AccountID , szId) == 0 )

  00049	8d 4d f4	 lea	 ecx, DWORD PTR _szId$[ebp]
  0004c	8b c6		 mov	 eax, esi
  0004e	8b ff		 npad	 2
$LL13@JGOtherJoi:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN14@JGOtherJoi
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN15@JGOtherJoi
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN14@JGOtherJoi
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL13@JGOtherJoi
$LN15@JGOtherJoi:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN16@JGOtherJoi
$LN14@JGOtherJoi:
  00070	1b c0		 sbb	 eax, eax
  00072	83 d8 ff	 sbb	 eax, -1
$LN16@JGOtherJoi:
  00075	85 c0		 test	 eax, eax
  00077	74 15		 je	 SHORT $LN11@JGOtherJoi
$LN6@JGOtherJoi:

; 368  : 
; 369  : 	for (n= OBJ_STARTUSERINDEX; n<OBJMAX;n++)

  00079	47		 inc	 edi
  0007a	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00080	81 ff ec 2c 00
	00		 cmp	 edi, 11500		; 00002cecH
  00086	7c ac		 jl	 SHORT $LL7@JGOtherJoi
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi

; 380  : 						break;
; 381  : 					}
; 382  : 				}
; 383  : 			}
; 384  : 		}
; 385  : 	}
; 386  : }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
$LN11@JGOtherJoi:

; 378  : 					{
; 379  : 						GCServerMsgStringSend(lMsg.Get( MSGGET(4, 107)), n, 1 );

  0008e	6a 01		 push	 1
  00090	57		 push	 edi
  00091	68 6b 04 00 00	 push	 1131			; 0000046bH
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0009b	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi

; 380  : 						break;
; 381  : 					}
; 382  : 				}
; 383  : 			}
; 384  : 		}
; 385  : 	}
; 386  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?JGOtherJoin@@YAXPAUSDHP_OTHERJOINMSG@@@Z ENDP		; JGOtherJoin
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJPUserDisconnectRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z ; GJPUserDisconnectRecv
; Function compile flags: /Ogtp
;	COMDAT ?GJPUserDisconnectRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z
_TEXT	SEGMENT
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?GJPUserDisconnectRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z PROC ; GJPUserDisconnectRecv, COMDAT

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 391  : 	char szId[11];
; 392  : 	szId[10]=0;
; 393  : 	int number;
; 394  : 
; 395  : 	memcpy( szId, lpMsg->Id , sizeof( lpMsg->Id ) );

  00013	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  00016	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  00019	56		 push	 esi

; 396  : 	number = lpMsg->Number;

  0001a	0f bf 70 0e	 movsx	 esi, WORD PTR [eax+14]
  0001e	89 55 f4	 mov	 DWORD PTR _szId$[ebp+4], edx

; 397  : 
; 398  : 	if ( gObjIsAccontConnect(number, szId ) == 0 )

  00021	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00024	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx
  00027	66 8b 48 0b	 mov	 cx, WORD PTR [eax+11]
  0002b	52		 push	 edx
  0002c	56		 push	 esi
  0002d	c6 45 fa 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  00031	66 89 4d f8	 mov	 WORD PTR _szId$[ebp+8], cx
  00035	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  0003a	83 c4 08	 add	 esp, 8
  0003d	85 c0		 test	 eax, eax
  0003f	74 21		 je	 SHORT $LN2@GJPUserDis

; 399  : 	{
; 400  : 		return;
; 401  : 	}
; 402  : 
; 403  : 	GCServerMsgStringSend(lMsg.Get( MSGGET(6, 67) ), number, 0 );

  00041	6a 00		 push	 0
  00043	56		 push	 esi
  00044	68 43 06 00 00	 push	 1603			; 00000643H
  00049	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0004e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 404  : 	//gObjUserKill(number);
; 405  : 	CloseClient(number);

  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@GJPUserDis:

; 406  : }

  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	33 cd		 xor	 ecx, ebp
  00067	5e		 pop	 esi
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?GJPUserDisconnectRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z ENDP ; GJPUserDisconnectRecv
_TEXT	ENDS
PUBLIC	?JGPExitCodeRecv@@YAXPAUSDHP_EXITMSG@@@Z	; JGPExitCodeRecv
; Function compile flags: /Ogtp
;	COMDAT ?JGPExitCodeRecv@@YAXPAUSDHP_EXITMSG@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGPExitCodeRecv@@YAXPAUSDHP_EXITMSG@@@Z PROC		; JGPExitCodeRecv, COMDAT

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  : 	if ( lpMsg->ExitCode[0] == 70 && lpMsg->ExitCode[1] == 70 && lpMsg->ExitCode[2] == 88 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	b1 46		 mov	 cl, 70			; 00000046H
  00008	38 48 03	 cmp	 BYTE PTR [eax+3], cl
  0000b	75 23		 jne	 SHORT $LN1@JGPExitCod
  0000d	38 48 04	 cmp	 BYTE PTR [eax+4], cl
  00010	75 1e		 jne	 SHORT $LN1@JGPExitCod
  00012	80 78 05 58	 cmp	 BYTE PTR [eax+5], 88	; 00000058H
  00016	75 18		 jne	 SHORT $LN1@JGPExitCod

; 413  : 	{
; 414  : 		SendMessage( ghWnd, WM_COMMAND, IDM_3_MINUTE_CLOSE, 0 );

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  0001d	6a 00		 push	 0
  0001f	68 12 80 00 00	 push	 32786			; 00008012H
  00024	68 11 01 00 00	 push	 273			; 00000111H
  00029	50		 push	 eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN1@JGPExitCod:

; 415  : 	}
; 416  : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?JGPExitCodeRecv@@YAXPAUSDHP_EXITMSG@@@Z ENDP		; JGPExitCodeRecv
_TEXT	ENDS
PUBLIC	?JGPEventStart@@YAXPAUSDHP_EVENTSTART@@@Z	; JGPEventStart
EXTRN	?Start@CDragonEvent@@QAEXXZ:PROC		; CDragonEvent::Start
EXTRN	?End@CDragonEvent@@QAEXXZ:PROC			; CDragonEvent::End
EXTRN	?DragonEvent@@3PAVCDragonEvent@@A:DWORD		; DragonEvent
; Function compile flags: /Ogtp
;	COMDAT ?JGPEventStart@@YAXPAUSDHP_EVENTSTART@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGPEventStart@@YAXPAUSDHP_EVENTSTART@@@Z PROC		; JGPEventStart, COMDAT

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 423  : 	if ( lpMsg->Event == 1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	80 78 03 01	 cmp	 BYTE PTR [eax+3], 1
  0000a	75 18		 jne	 SHORT $LN1@JGPEventSt

; 424  : 	{
; 425  : 		if (DragonEvent->GetState() != 0 )

  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DragonEvent@@3PAVCDragonEvent@@A ; DragonEvent
  00012	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00016	74 06		 je	 SHORT $LN2@JGPEventSt

; 432  : 		}
; 433  : 	}
; 434  : }

  00018	5d		 pop	 ebp

; 426  : 		{
; 427  : 			DragonEvent->End();

  00019	e9 00 00 00 00	 jmp	 ?End@CDragonEvent@@QAEXXZ ; CDragonEvent::End
$LN2@JGPEventSt:

; 432  : 		}
; 433  : 	}
; 434  : }

  0001e	5d		 pop	 ebp

; 428  : 		}
; 429  : 		else
; 430  : 		{
; 431  : 			DragonEvent->Start();

  0001f	e9 00 00 00 00	 jmp	 ?Start@CDragonEvent@@QAEXXZ ; CDragonEvent::Start
$LN1@JGPEventSt:

; 432  : 		}
; 433  : 	}
; 434  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?JGPEventStart@@YAXPAUSDHP_EVENTSTART@@@Z ENDP		; JGPEventStart
_TEXT	ENDS
PUBLIC	?JGPEventControl@@YAXPAUSDHP_EVENTCONTROL@@@Z	; JGPEventControl
EXTRN	?gMedalEvent@@3HA:DWORD				; gMedalEvent
EXTRN	?gHeartOfLoveEvent@@3HA:DWORD			; gHeartOfLoveEvent
EXTRN	?gFireCrackerEvent@@3HA:DWORD			; gFireCrackerEvent
; Function compile flags: /Ogtp
;	COMDAT ?JGPEventControl@@YAXPAUSDHP_EVENTCONTROL@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGPEventControl@@YAXPAUSDHP_EVENTCONTROL@@@Z PROC	; JGPEventControl, COMDAT

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 441  : 	switch ( lpMsg->Event  )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0000a	83 f9 04	 cmp	 ecx, 4
  0000d	77 46		 ja	 SHORT $LN8@JGPEventCo
  0000f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN16@JGPEventCo[ecx*4]
$LN7@JGPEventCo:

; 442  : 	{
; 443  : #if( __4GAMERS__ == 0 )
; 444  : 		case DRAGON_EVENT:
; 445  : 			if ( lpMsg->Stat != 0 )

  00016	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0

; 446  : 			{
; 447  : 				if (DragonEvent->GetState() == 0 )

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DragonEvent@@3PAVCDragonEvent@@A ; DragonEvent
  00020	74 0c		 je	 SHORT $LN6@JGPEventCo
  00022	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00026	75 2d		 jne	 SHORT $LN8@JGPEventCo

; 469  : 			break;
; 470  : 	}
; 471  : }

  00028	5d		 pop	 ebp

; 448  : 				{
; 449  : 					DragonEvent->Start();

  00029	e9 00 00 00 00	 jmp	 ?Start@CDragonEvent@@QAEXXZ ; CDragonEvent::Start
$LN6@JGPEventCo:

; 469  : 			break;
; 470  : 	}
; 471  : }

  0002e	5d		 pop	 ebp

; 450  : 				}
; 451  : 			}
; 452  : 			else
; 453  : 			{
; 454  : 				DragonEvent->End();

  0002f	e9 00 00 00 00	 jmp	 ?End@CDragonEvent@@QAEXXZ ; CDragonEvent::End
$LN3@JGPEventCo:

; 455  : 			}
; 456  : 			break;
; 457  : #endif
; 458  : 
; 459  : 		case FIRECRACKER_EVENT:
; 460  : 			gFireCrackerEvent = lpMsg->Stat  ;

  00034	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00038	a3 00 00 00 00	 mov	 DWORD PTR ?gFireCrackerEvent@@3HA, eax ; gFireCrackerEvent

; 469  : 			break;
; 470  : 	}
; 471  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN2@JGPEventCo:

; 461  : 			break;
; 462  : 
; 463  : 		case HEARTOFLOVE_EVENT:
; 464  : 			gHeartOfLoveEvent = lpMsg->Stat  ;

  0003f	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00043	89 0d 00 00 00
	00		 mov	 DWORD PTR ?gHeartOfLoveEvent@@3HA, ecx ; gHeartOfLoveEvent

; 469  : 			break;
; 470  : 	}
; 471  : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN1@JGPEventCo:

; 465  : 			break;
; 466  : 
; 467  : 		case MEDAL_EVENT:
; 468  : 			gMedalEvent = lpMsg->Stat  ;

  0004b	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  0004f	89 15 00 00 00
	00		 mov	 DWORD PTR ?gMedalEvent@@3HA, edx ; gMedalEvent
$LN8@JGPEventCo:

; 469  : 			break;
; 470  : 	}
; 471  : }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
  00057	90		 npad	 1
$LN16@JGPEventCo:
  00058	00 00 00 00	 DD	 $LN7@JGPEventCo
  0005c	00 00 00 00	 DD	 $LN8@JGPEventCo
  00060	00 00 00 00	 DD	 $LN3@JGPEventCo
  00064	00 00 00 00	 DD	 $LN2@JGPEventCo
  00068	00 00 00 00	 DD	 $LN1@JGPEventCo
?JGPEventControl@@YAXPAUSDHP_EVENTCONTROL@@@Z ENDP	; JGPEventControl
_TEXT	ENDS
PUBLIC	?JGPOptionControl@@YAXPAUSDHP_OPTIONCONTROL@@@Z	; JGPOptionControl
EXTRN	?ReadGameEtcInfo@@YAXW4MU_ETC_TYPE@@@Z:PROC	; ReadGameEtcInfo
EXTRN	?ReadEventInfo@@YAXW4MU_EVENT_TYPE@@@Z:PROC	; ReadEventInfo
EXTRN	?Reload@ShopManager@@QAEXXZ:PROC		; ShopManager::Reload
EXTRN	?g_ShopManager@@3VShopManager@@A:BYTE		; g_ShopManager
EXTRN	?MonsterSetBaseReload@CMonsterSetBase@@QAEXH@Z:PROC ; CMonsterSetBase::MonsterSetBaseReload
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
EXTRN	?ReadCommonServerInfo@@YAXXZ:PROC		; ReadCommonServerInfo
; Function compile flags: /Ogtp
;	COMDAT ?JGPOptionControl@@YAXPAUSDHP_OPTIONCONTROL@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGPOptionControl@@YAXPAUSDHP_OPTIONCONTROL@@@Z PROC	; JGPOptionControl, COMDAT

; 476  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 477  : 	switch ( lpMsg->Option )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00006	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  0000a	83 f8 05	 cmp	 eax, 5
  0000d	77 4d		 ja	 SHORT $LN7@JGPOptionC
  0000f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@JGPOptionC[eax*4]
$LN6@JGPOptionC:

; 505  : 			break;
; 506  : 	}
; 507  : }

  00016	5d		 pop	 ebp

; 478  : 	{
; 479  : 		case OPTION_RELOAD:
; 480  : 			ReadCommonServerInfo();

  00017	e9 00 00 00 00	 jmp	 ?ReadCommonServerInfo@@YAXXZ ; ReadCommonServerInfo
$LN5@JGPOptionC:

; 481  : 			break;
; 482  : 
; 483  : 		case MONSTER_RELOAD:
; 484  : 			//GameMonsterAllCloseAndReLoad();
; 485  : 			gMSetBase.MonsterSetBaseReload(LOAD_ALLOBJ);

  0001c	6a ff		 push	 -1
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  00023	e8 00 00 00 00	 call	 ?MonsterSetBaseReload@CMonsterSetBase@@QAEXH@Z ; CMonsterSetBase::MonsterSetBaseReload

; 505  : 			break;
; 506  : 	}
; 507  : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN3@JGPOptionC:

; 486  : 			break;
; 487  : 
; 488  : 		case SHOP_RELOAD:
; 489  : 			g_ShopManager.Reload();
; 490  : 			break;
; 491  : 
; 492  : 		case ALLOPTION_RELOAD:
; 493  : 			ReadCommonServerInfo();

  0002a	e8 00 00 00 00	 call	 ?ReadCommonServerInfo@@YAXXZ ; ReadCommonServerInfo

; 494  : 			//GameMonsterAllCloseAndReLoad();
; 495  : 			gMSetBase.MonsterSetBaseReload(LOAD_ALLOBJ);

  0002f	6a ff		 push	 -1
  00031	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  00036	e8 00 00 00 00	 call	 ?MonsterSetBaseReload@CMonsterSetBase@@QAEXH@Z ; CMonsterSetBase::MonsterSetBaseReload
$LN4@JGPOptionC:

; 496  : 			g_ShopManager.Reload();

  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ShopManager@@3VShopManager@@A ; g_ShopManager

; 505  : 			break;
; 506  : 	}
; 507  : }

  00040	5d		 pop	 ebp

; 496  : 			g_ShopManager.Reload();

  00041	e9 00 00 00 00	 jmp	 ?Reload@ShopManager@@QAEXXZ ; ShopManager::Reload
$LN2@JGPOptionC:

; 497  : 			break;
; 498  : 
; 499  : 		case EVENTINFO_RELOAD:
; 500  : 			ReadEventInfo(MU_EVENT_ALL );

  00046	6a 00		 push	 0
  00048	e8 00 00 00 00	 call	 ?ReadEventInfo@@YAXW4MU_EVENT_TYPE@@@Z ; ReadEventInfo

; 501  : 			break;
; 502  : 
; 503  : 		case ETCINFO_RELOAD:
; 504  : 			ReadGameEtcInfo(MU_ETC_ALL );

  0004d	83 c4 04	 add	 esp, 4

; 505  : 			break;
; 506  : 	}
; 507  : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN1@JGPOptionC:

; 501  : 			break;
; 502  : 
; 503  : 		case ETCINFO_RELOAD:
; 504  : 			ReadGameEtcInfo(MU_ETC_ALL );

  00052	6a 00		 push	 0
  00054	e8 00 00 00 00	 call	 ?ReadGameEtcInfo@@YAXW4MU_ETC_TYPE@@@Z ; ReadGameEtcInfo
  00059	83 c4 04	 add	 esp, 4
$LN7@JGPOptionC:

; 505  : 			break;
; 506  : 	}
; 507  : }

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
  0005e	8b ff		 npad	 2
$LN14@JGPOptionC:
  00060	00 00 00 00	 DD	 $LN6@JGPOptionC
  00064	00 00 00 00	 DD	 $LN5@JGPOptionC
  00068	00 00 00 00	 DD	 $LN4@JGPOptionC
  0006c	00 00 00 00	 DD	 $LN3@JGPOptionC
  00070	00 00 00 00	 DD	 $LN2@JGPOptionC
  00074	00 00 00 00	 DD	 $LN1@JGPOptionC
?JGPOptionControl@@YAXPAUSDHP_OPTIONCONTROL@@@Z ENDP	; JGPOptionControl
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoveHeartEventSend@@YAXHPAD0@Z			; LoveHeartEventSend
; Function compile flags: /Ogtp
;	COMDAT ?LoveHeartEventSend@@YAXHPAD0@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 23
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_AcountId$ = 12						; size = 4
_Name$ = 16						; size = 4
?LoveHeartEventSend@@YAXHPAD0@Z PROC			; LoveHeartEventSend, COMDAT

; 512  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _AcountId$[ebp]

; 513  : 	SDHP_LOVEHEARTEVENT pMsg;
; 514  : 
; 515  : 	pMsg.h.c = 0xC1;
; 516  : 	pMsg.h.headcode = 0x30;
; 517  : 	pMsg.h.size = sizeof(SDHP_LOVEHEARTEVENT);
; 518  : 
; 519  : 	memcpy(pMsg.Account , AcountId, sizeof(pMsg.Account));

  00013	8b 10		 mov	 edx, DWORD PTR [eax]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _Name$[ebp]
  00018	89 55 e7	 mov	 DWORD PTR _pMsg$[ebp+3], edx
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	66 8b 40 08	 mov	 ax, WORD PTR [eax+8]
  00022	89 55 eb	 mov	 DWORD PTR _pMsg$[ebp+7], edx

; 520  : 	memcpy(pMsg.Name , Name, sizeof(pMsg.Name) );

  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	66 89 45 ef	 mov	 WORD PTR _pMsg$[ebp+11], ax
  0002b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002e	66 8b 49 08	 mov	 cx, WORD PTR [ecx+8]
  00032	89 55 f1	 mov	 DWORD PTR _pMsg$[ebp+13], edx

; 521  : 
; 522  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  00035	6a 17		 push	 23			; 00000017H
  00037	8d 55 e4	 lea	 edx, DWORD PTR _pMsg$[ebp]
  0003a	66 89 4d f9	 mov	 WORD PTR _pMsg$[ebp+21], cx
  0003e	52		 push	 edx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00044	c6 45 e4 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00048	66 c7 45 e5 17
	30		 mov	 WORD PTR _pMsg$[ebp+1], 12311 ; 00003017H
  0004e	89 45 f5	 mov	 DWORD PTR _pMsg$[ebp+17], eax
  00051	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 523  : }

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	33 cd		 xor	 ecx, ebp
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?LoveHeartEventSend@@YAXHPAD0@Z ENDP			; LoveHeartEventSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoveHeartEventRecv@@YAXPAUSDHP_LOVEHEARTEVENT_RESULT@@@Z ; LoveHeartEventRecv
EXTRN	?AllSendServerMsg@@YAXPAD@Z:PROC		; AllSendServerMsg
EXTRN	__imp__wsprintfA:PROC
; Function compile flags: /Ogtp
;	COMDAT ?LoveHeartEventRecv@@YAXPAUSDHP_LOVEHEARTEVENT_RESULT@@@Z
_TEXT	SEGMENT
_Msg$ = -272						; size = 256
_szName$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?LoveHeartEventRecv@@YAXPAUSDHP_LOVEHEARTEVENT_RESULT@@@Z PROC ; LoveHeartEventRecv, COMDAT

; 530  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 531  : 	char szName[11];
; 532  : 	int number;
; 533  : 	char Msg[256];
; 534  : 
; 535  : 	szName[10]=0;
; 536  : 
; 537  : 	memcpy(szName, lpMsg->Name, sizeof(lpMsg->Name));

  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001c	89 4d f0	 mov	 DWORD PTR _szName$[ebp], ecx
  0001f	66 8b 48 0c	 mov	 cx, WORD PTR [eax+12]
  00023	66 89 4d f8	 mov	 WORD PTR _szName$[ebp+8], cx

; 538  : 	number = lpMsg->Number;

  00027	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 539  : 
; 540  : 	switch ( lpMsg->Result )

  0002a	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  0002e	83 e8 00	 sub	 eax, 0
  00031	c6 45 fa 00	 mov	 BYTE PTR _szName$[ebp+10], 0
  00035	89 55 f4	 mov	 DWORD PTR _szName$[ebp+4], edx
  00038	74 46		 je	 SHORT $LN9@LoveHeartE
  0003a	48		 dec	 eax
  0003b	0f 85 1a 01 00
	00		 jne	 $LN6@LoveHeartE

; 559  : 									return;
; 560  : 								}
; 561  : 							}
; 562  : 						}
; 563  : 					}
; 564  : 					continue;
; 565  : 				} // For
; 566  : 			}
; 567  : 		break;
; 568  : 
; 569  : 		case 1: // Winner of the Love Pang Pang Event
; 570  : 			wsprintf(Msg, lMsg.Get( MSGGET ( 4, 82 ) ), szName, number);

  00041	51		 push	 ecx
  00042	8d 55 f0	 lea	 edx, DWORD PTR _szName$[ebp]
  00045	52		 push	 edx
  00046	68 52 04 00 00	 push	 1106			; 00000452H
  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00050	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00055	50		 push	 eax
  00056	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Msg$[ebp]
  0005c	50		 push	 eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 571  : 			AllSendServerMsg(Msg);

  00063	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _Msg$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  0006f	83 c4 14	 add	 esp, 20			; 00000014H

; 572  : 			break;
; 573  : 	}
; 574  : }

  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN9@LoveHeartE:
  00080	56		 push	 esi
  00081	57		 push	 edi

; 541  : 	{
; 542  : 		case 0: // Registered Hearts of Love PangPangEvent
; 543  : 			{
; 544  : 				wsprintf(Msg, lMsg.Get( MSGGET(4, 80)), number );

  00082	51		 push	 ecx
  00083	68 50 04 00 00	 push	 1104			; 00000450H
  00088	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0008d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00092	50		 push	 eax
  00093	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _Msg$[ebp]
  00099	52		 push	 edx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000a0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 545  : 
; 546  : 				for (int n = OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  000a9	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  000ae	81 c6 5d dd 49
	06		 add	 esi, 105504093		; 0649dd5dH
$LL8@LoveHeartE:

; 547  : 				{
; 548  : 					if ( gObj[n].Connected >= PLAYER_LOGGED )

  000b4	83 7e a7 02	 cmp	 DWORD PTR [esi-89], 2
  000b8	7c 3f		 jl	 SHORT $LN7@LoveHeartE

; 549  : 					{
; 550  : 						if (gObj[n].Name[0] == szName[0] )

  000ba	8a 45 f0	 mov	 al, BYTE PTR _szName$[ebp]
  000bd	38 06		 cmp	 BYTE PTR [esi], al
  000bf	75 38		 jne	 SHORT $LN7@LoveHeartE

; 551  : 						{
; 552  : 							if ( gObj[n].Name[1] == szName[1] )

  000c1	8a 4d f1	 mov	 cl, BYTE PTR _szName$[ebp+1]
  000c4	38 4e 01	 cmp	 BYTE PTR [esi+1], cl
  000c7	75 30		 jne	 SHORT $LN7@LoveHeartE

; 553  : 							{
; 554  : 								if ( strcmp( gObj[n].Name, szName ) == 0 )

  000c9	8d 4d f0	 lea	 ecx, DWORD PTR _szName$[ebp]
  000cc	8b c6		 mov	 eax, esi
  000ce	8b ff		 npad	 2
$LL17@LoveHeartE:
  000d0	8a 10		 mov	 dl, BYTE PTR [eax]
  000d2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000d4	75 1a		 jne	 SHORT $LN18@LoveHeartE
  000d6	84 d2		 test	 dl, dl
  000d8	74 12		 je	 SHORT $LN19@LoveHeartE
  000da	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000dd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000e0	75 0e		 jne	 SHORT $LN18@LoveHeartE
  000e2	83 c0 02	 add	 eax, 2
  000e5	83 c1 02	 add	 ecx, 2
  000e8	84 d2		 test	 dl, dl
  000ea	75 e4		 jne	 SHORT $LL17@LoveHeartE
$LN19@LoveHeartE:
  000ec	33 c0		 xor	 eax, eax
  000ee	eb 05		 jmp	 SHORT $LN20@LoveHeartE
$LN18@LoveHeartE:
  000f0	1b c0		 sbb	 eax, eax
  000f2	83 d8 ff	 sbb	 eax, -1
$LN20@LoveHeartE:
  000f5	85 c0		 test	 eax, eax
  000f7	74 1f		 je	 SHORT $LN15@LoveHeartE
$LN7@LoveHeartE:

; 545  : 
; 546  : 				for (int n = OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  000f9	47		 inc	 edi
  000fa	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00100	81 ff ec 2c 00
	00		 cmp	 edi, 11500		; 00002cecH
  00106	7c ac		 jl	 SHORT $LL8@LoveHeartE
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi

; 572  : 			break;
; 573  : 	}
; 574  : }

  0010a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010d	33 cd		 xor	 ecx, ebp
  0010f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
$LN15@LoveHeartE:

; 555  : 								{
; 556  : 									GCServerMsgStringSend(Msg, n, 1);

  00118	6a 01		 push	 1
  0011a	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _Msg$[ebp]
  00120	57		 push	 edi
  00121	52		 push	 edx
  00122	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00127	83 c4 0c	 add	 esp, 12			; 0000000cH

; 557  : 									wsprintf(Msg, lMsg.Get( MSGGET( 4, 81 ) ) );

  0012a	68 51 04 00 00	 push	 1105			; 00000451H
  0012f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00134	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00139	50		 push	 eax
  0013a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _Msg$[ebp]
  00140	50		 push	 eax
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 558  : 									GCServerMsgStringSend(Msg, n, 1);

  00147	6a 01		 push	 1
  00149	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _Msg$[ebp]
  0014f	57		 push	 edi
  00150	51		 push	 ecx
  00151	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00156	83 c4 14	 add	 esp, 20			; 00000014H
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
$LN6@LoveHeartE:

; 572  : 			break;
; 573  : 	}
; 574  : }

  0015b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015e	33 cd		 xor	 ecx, ebp
  00160	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
?LoveHeartEventRecv@@YAXPAUSDHP_LOVEHEARTEVENT_RESULT@@@Z ENDP ; LoveHeartEventRecv
_TEXT	ENDS
PUBLIC	?LoveHeartCreateSend@@YAXXZ			; LoveHeartCreateSend
; Function compile flags: /Ogtp
;	COMDAT ?LoveHeartCreateSend@@YAXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
?LoveHeartCreateSend@@YAXXZ PROC			; LoveHeartCreateSend, COMDAT

; 581  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 582  : 	SDHP_LOVEHEARTCREATE pMsg;
; 583  : 
; 584  : 	pMsg.h.c= 0xC1;
; 585  : 	pMsg.h.headcode = 0x31;
; 586  : 	pMsg.h.size=sizeof(SDHP_LOVEHEARTCREATE);
; 587  : 
; 588  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  00006	6a 06		 push	 6
  00008	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000b	50		 push	 eax
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00011	c6 45 f8 c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00015	66 c7 45 f9 06
	31		 mov	 WORD PTR _pMsg$[ebp+1], 12550 ; 00003106H
  0001b	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 589  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?LoveHeartCreateSend@@YAXXZ ENDP			; LoveHeartCreateSend
_TEXT	ENDS
PUBLIC	??_C@_0CG@EHIHJKDO@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3AL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?AllNoticeRecv@@YAXPAUSDHP_NOTICE@@@Z		; AllNoticeRecv
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
;	COMDAT ??_C@_0CG@EHIHJKDO@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3AL@
CONST	SEGMENT
??_C@_0CG@EHIHJKDO@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3AL@ DB '['
	DB	'Mu Manager][Notice Log][Type:ALL] %s', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?AllNoticeRecv@@YAXPAUSDHP_NOTICE@@@Z
_TEXT	SEGMENT
_szNotice$ = -108					; size = 101
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?AllNoticeRecv@@YAXPAUSDHP_NOTICE@@@Z PROC		; AllNoticeRecv, COMDAT

; 595  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]
  00014	57		 push	 edi

; 596  : 	char szNotice[101];
; 597  : 
; 598  : 	szNotice[100]=0;
; 599  : 
; 600  : 	memcpy(szNotice, lpMsg->Notice , sizeof(lpMsg->Notice)-1);
; 601  : 
; 602  : 	LogAddTD("[Mu Manager][Notice Log][Type:ALL] %s", szNotice);

  00015	8d 45 94	 lea	 eax, DWORD PTR _szNotice$[ebp]
  00018	50		 push	 eax
  00019	c6 45 f8 00	 mov	 BYTE PTR _szNotice$[ebp+100], 0
  0001d	83 c6 03	 add	 esi, 3
  00020	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00025	8d 7d 94	 lea	 edi, DWORD PTR _szNotice$[ebp]
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EHIHJKDO@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3AL@
  0002d	f3 a5		 rep movsd
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00035	83 c4 08	 add	 esp, 8

; 603  : 
; 604  : 	if ( strlen(szNotice) > 1 )

  00038	8d 45 94	 lea	 eax, DWORD PTR _szNotice$[ebp]
  0003b	5f		 pop	 edi
  0003c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0003f	5e		 pop	 esi
$LL4@AllNoticeR:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL4@AllNoticeR
  00047	2b c2		 sub	 eax, edx
  00049	83 f8 01	 cmp	 eax, 1
  0004c	76 0c		 jbe	 SHORT $LN1@AllNoticeR

; 605  : 	{
; 606  : 		AllSendServerMsg(szNotice);

  0004e	8d 4d 94	 lea	 ecx, DWORD PTR _szNotice$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  00057	83 c4 04	 add	 esp, 4
$LN1@AllNoticeR:

; 607  : 	}
; 608  : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?AllNoticeRecv@@YAXPAUSDHP_NOTICE@@@Z ENDP		; AllNoticeRecv
_TEXT	ENDS
PUBLIC	??_C@_0CM@EFINMDLC@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3US@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?UserNoticeRecv@@YAXPAUSDHP_USER_NOTICE@@@Z	; UserNoticeRecv
EXTRN	?SendNoticeToUser@TNotice@@SAXHPAX@Z:PROC	; TNotice::SendNoticeToUser
EXTRN	?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z:PROC	; TNotice::SetNoticeProperty
EXTRN	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z:PROC	; TNotice::MakeNoticeMsg
;	COMDAT ??_C@_0CM@EFINMDLC@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3US@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\tnotice.h
CONST	SEGMENT
??_C@_0CM@EFINMDLC@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3US@ DB '['
	DB	'Mu Manager][Notice Log][Type:USER] (%s) %s', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\sprotocol.cpp
CONST	ENDS
;	COMDAT ?UserNoticeRecv@@YAXPAUSDHP_USER_NOTICE@@@Z
_TEXT	SEGMENT
_pNotice$185097 = -392					; size = 272
_szNotice$ = -120					; size = 101
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?UserNoticeRecv@@YAXPAUSDHP_USER_NOTICE@@@Z PROC	; UserNoticeRecv, COMDAT

; 614  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 01 00
	00		 sub	 esp, 392		; 00000188H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]

; 615  : 	char szNotice[101];
; 616  : 	char szId[11];
; 617  : 
; 618  : 	szNotice[100]=0;
; 619  : 	szId[10]=0;
; 620  : 
; 621  : 	memcpy(szNotice, lpMsg->Notice , sizeof(lpMsg->Notice)-1);
; 622  : 	memcpy(szId, lpMsg->szId , sizeof(lpMsg->szId));

  00016	8b 50 07	 mov	 edx, DWORD PTR [eax+7]
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d 70 0d	 lea	 esi, DWORD PTR [eax+13]
  0001e	c6 45 ec 00	 mov	 BYTE PTR _szNotice$[ebp+100], 0
  00022	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00027	8d 7d 88	 lea	 edi, DWORD PTR _szNotice$[ebp]
  0002a	f3 a5		 rep movsd
  0002c	8b 48 03	 mov	 ecx, DWORD PTR [eax+3]
  0002f	66 8b 40 0b	 mov	 ax, WORD PTR [eax+11]
  00033	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx

; 623  : 
; 624  : 	LogAddTD("[Mu Manager][Notice Log][Type:USER] (%s) %s", szId, szNotice);

  00036	8d 4d 88	 lea	 ecx, DWORD PTR _szNotice$[ebp]
  00039	89 55 f4	 mov	 DWORD PTR _szId$[ebp+4], edx
  0003c	51		 push	 ecx
  0003d	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@EFINMDLC@?$FLMu?5Manager?$FN?$FLNotice?5Log?$FN?$FLType?3US@
  00046	c6 45 fa 00	 mov	 BYTE PTR _szId$[ebp+10], 0
  0004a	66 89 45 f8	 mov	 WORD PTR _szId$[ebp+8], ax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 625  : 
; 626  : 	if ( strlen(szNotice) > 1 )

  00054	8d 45 88	 lea	 eax, DWORD PTR _szNotice$[ebp]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0005d	8d 49 00	 npad	 3
$LL17@UserNotice:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	84 c9		 test	 cl, cl
  00065	75 f9		 jne	 SHORT $LL17@UserNotice
  00067	2b c2		 sub	 eax, edx
  00069	83 f8 01	 cmp	 eax, 1
  0006c	0f 86 d1 00 00
	00		 jbe	 $LN5@UserNotice

; 627  : 	{
; 628  : 		if ( strlen(szId) > 1 )

  00072	8d 45 f0	 lea	 eax, DWORD PTR _szId$[ebp]
  00075	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL18@UserNotice:
  00078	8a 08		 mov	 cl, BYTE PTR [eax]
  0007a	40		 inc	 eax
  0007b	84 c9		 test	 cl, cl
  0007d	75 f9		 jne	 SHORT $LL18@UserNotice
  0007f	2b c2		 sub	 eax, edx
  00081	83 f8 01	 cmp	 eax, 1
  00084	0f 86 b9 00 00
	00		 jbe	 $LN5@UserNotice

; 629  : 		{
; 630  : 			for ( int n = OBJ_STARTUSERINDEX;n<OBJMAX; n++)

  0008a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00090	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00095	81 c6 52 dd 49
	06		 add	 esi, 105504082		; 0649dd52H
  0009b	eb 03 8d 49 00	 npad	 5
$LL7@UserNotice:

; 631  : 			{
; 632  : 				if ( gObj[n].Connected >= PLAYER_LOGGED )

  000a0	83 7e b2 02	 cmp	 DWORD PTR [esi-78], 2
  000a4	7c 43		 jl	 SHORT $LN6@UserNotice

; 633  : 				{
; 634  : 					if ( gObj[n].AccountID[0] == szId[0] )

  000a6	8a 45 f0	 mov	 al, BYTE PTR _szId$[ebp]
  000a9	38 06		 cmp	 BYTE PTR [esi], al
  000ab	75 3c		 jne	 SHORT $LN6@UserNotice

; 635  : 					{
; 636  : 						if ( gObj[n].AccountID[1] == szId[1] )

  000ad	8a 4d f1	 mov	 cl, BYTE PTR _szId$[ebp+1]
  000b0	38 4e 01	 cmp	 BYTE PTR [esi+1], cl
  000b3	75 34		 jne	 SHORT $LN6@UserNotice

; 637  : 						{
; 638  : 							if ( strcmp( gObj[n].AccountID , szId) == 0 )

  000b5	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  000b8	8b c6		 mov	 eax, esi
  000ba	8d 9b 00 00 00
	00		 npad	 6
$LL19@UserNotice:
  000c0	8a 10		 mov	 dl, BYTE PTR [eax]
  000c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000c4	75 1a		 jne	 SHORT $LN20@UserNotice
  000c6	84 d2		 test	 dl, dl
  000c8	74 12		 je	 SHORT $LN21@UserNotice
  000ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000d0	75 0e		 jne	 SHORT $LN20@UserNotice
  000d2	83 c0 02	 add	 eax, 2
  000d5	83 c1 02	 add	 ecx, 2
  000d8	84 d2		 test	 dl, dl
  000da	75 e4		 jne	 SHORT $LL19@UserNotice
$LN21@UserNotice:
  000dc	33 c0		 xor	 eax, eax
  000de	eb 05		 jmp	 SHORT $LN22@UserNotice
$LN20@UserNotice:
  000e0	1b c0		 sbb	 eax, eax
  000e2	83 d8 ff	 sbb	 eax, -1
$LN22@UserNotice:
  000e5	85 c0		 test	 eax, eax
  000e7	74 1f		 je	 SHORT $LN15@UserNotice
$LN6@UserNotice:

; 629  : 		{
; 630  : 			for ( int n = OBJ_STARTUSERINDEX;n<OBJMAX; n++)

  000e9	47		 inc	 edi
  000ea	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  000f0	81 ff ec 2c 00
	00		 cmp	 edi, 11500		; 00002cecH
  000f6	7c a8		 jl	 SHORT $LL7@UserNotice
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi

; 644  : 								break;
; 645  : 							}
; 646  : 						}
; 647  : 					}
; 648  : 				}
; 649  : 			} // For
; 650  : 		}
; 651  : 	}
; 652  : }

  000fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
$LN15@UserNotice:

; 639  : 							{
; 640  : 								PMSG_NOTICE pNotice;
; 641  : 								TNotice::MakeNoticeMsg(&pNotice, 0, szNotice);

  00108	8d 55 88	 lea	 edx, DWORD PTR _szNotice$[ebp]
  0010b	52		 push	 edx
  0010c	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$185097[ebp]
  00112	6a 00		 push	 0
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg

; 642  : 								TNotice::SetNoticeProperty(&pNotice, 10,  _ARGB(255, 254, 81, 81), 1, 0, 20);

  0011a	6a 14		 push	 20			; 00000014H
  0011c	6a 00		 push	 0
  0011e	6a 01		 push	 1
  00120	68 fe 51 51 ff	 push	 -11447810		; ff5151feH
  00125	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$185097[ebp]
  0012b	6a 0a		 push	 10			; 0000000aH
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 ?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z ; TNotice::SetNoticeProperty

; 643  : 								TNotice::SendNoticeToUser(n, &pNotice);

  00133	8d 95 78 fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$185097[ebp]
  00139	52		 push	 edx
  0013a	57		 push	 edi
  0013b	e8 00 00 00 00	 call	 ?SendNoticeToUser@TNotice@@SAXHPAX@Z ; TNotice::SendNoticeToUser
  00140	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN5@UserNotice:

; 644  : 								break;
; 645  : 							}
; 646  : 						}
; 647  : 					}
; 648  : 				}
; 649  : 			} // For
; 650  : 		}
; 651  : 	}
; 652  : }

  00143	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	5f		 pop	 edi
  00147	33 cd		 xor	 ecx, ebp
  00149	5e		 pop	 esi
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
?UserNoticeRecv@@YAXPAUSDHP_USER_NOTICE@@@Z ENDP	; UserNoticeRecv
_TEXT	ENDS
PUBLIC	??_C@_0EA@LCONAODP@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GJReqMapSvrMove@@YAXHGGEE@Z			; GJReqMapSvrMove
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
;	COMDAT ??_C@_0EA@LCONAODP@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@
CONST	SEGMENT
??_C@_0EA@LCONAODP@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error GJ [0x7A] - User not Connected : %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GJReqMapSvrMove@@YAXHGGEE@Z
_TEXT	SEGMENT
_pMsg$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_iIndex$ = 8						; size = 4
_wDesMapSvrCode$ = 12					; size = 2
_wMapNumber$ = 16					; size = 2
_btX$ = 20						; size = 1
_btY$ = 24						; size = 1
?GJReqMapSvrMove@@YAXHGGEE@Z PROC			; GJReqMapSvrMove, COMDAT

; 658  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]

; 659  : 	PMSG_REQ_MAPSVRMOVE pMsg;
; 660  : 	
; 661  : 	if ( gObjIsConnected(iIndex) == PLAYER_EMPTY )

  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	75 20		 jne	 SHORT $LN2@GJReqMapSv

; 662  : 	{
; 663  : 		LogAddC(2, "[MapServerMng] Packet Error GJ [0x7A] - User not Connected : %d", iIndex);

  00021	56		 push	 esi
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@LCONAODP@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@
  00027	6a 02		 push	 2
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	5e		 pop	 esi

; 682  : 	}
; 683  : }

  00033	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00036	33 cd		 xor	 ecx, ebp
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN2@GJReqMapSv:

; 664  : 	}
; 665  : 	else
; 666  : 	{
; 667  : 		PHeadSetB((LPBYTE)&pMsg, 0x7A, sizeof(PMSG_REQ_MAPSVRMOVE));

  00041	6a 28		 push	 40			; 00000028H
  00043	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00046	6a 7a		 push	 122			; 0000007aH
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 668  : 		pMsg.iIndex = iIndex;
; 669  : 
; 670  : 		memcpy(pMsg.szAccountID , gObj[iIndex].AccountID, sizeof( pMsg.szAccountID)-1);

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00054	89 75 d8	 mov	 DWORD PTR _pMsg$[ebp+4], esi
  00057	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  0005d	8b 54 0e 52	 mov	 edx, DWORD PTR [esi+ecx+82]
  00061	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00064	89 55 dc	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  00067	8b 48 56	 mov	 ecx, DWORD PTR [eax+86]
  0006a	89 4d e0	 mov	 DWORD PTR _pMsg$[ebp+12], ecx
  0006d	0f b7 50 5a	 movzx	 edx, WORD PTR [eax+90]

; 671  : 		pMsg.szAccountID[10] = 0;

  00071	32 c9		 xor	 cl, cl
  00073	88 4d e6	 mov	 BYTE PTR _pMsg$[ebp+18], cl
  00076	66 89 55 e4	 mov	 WORD PTR _pMsg$[ebp+16], dx

; 672  : 		memcpy(pMsg.szCharName, gObj[iIndex].Name, sizeof( pMsg.szCharName)-1);

  0007a	8b 50 5d	 mov	 edx, DWORD PTR [eax+93]
  0007d	89 55 e7	 mov	 DWORD PTR _pMsg$[ebp+19], edx
  00080	8b 50 61	 mov	 edx, DWORD PTR [eax+97]
  00083	89 55 eb	 mov	 DWORD PTR _pMsg$[ebp+23], edx
  00086	0f b7 40 65	 movzx	 eax, WORD PTR [eax+101]

; 673  : 		pMsg.szCharName[10] = 0;
; 674  : 
; 675  : 		pMsg.wCurMapSvrCode = gGameServerCode;
; 676  : 		pMsg.wDstMapSvrCode = wDesMapSvrCode;

  0008a	66 8b 55 0c	 mov	 dx, WORD PTR _wDesMapSvrCode$[ebp]
  0008e	88 4d f1	 mov	 BYTE PTR _pMsg$[ebp+29], cl
  00091	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  00098	66 89 45 ef	 mov	 WORD PTR _pMsg$[ebp+27], ax

; 677  : 		pMsg.wMapNumber = wMapNumber;

  0009c	66 8b 45 10	 mov	 ax, WORD PTR _wMapNumber$[ebp]
  000a0	66 89 4d f2	 mov	 WORD PTR _pMsg$[ebp+30], cx

; 678  : 		pMsg.btX = btX;

  000a4	8a 4d 14	 mov	 cl, BYTE PTR _btX$[ebp]
  000a7	66 89 45 f6	 mov	 WORD PTR _pMsg$[ebp+34], ax

; 679  : 		pMsg.btY = btY;
; 680  : 
; 681  : 		wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  000ab	0f b6 45 d5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b2	88 4d f8	 mov	 BYTE PTR _pMsg$[ebp+36], cl
  000b5	50		 push	 eax
  000b6	8d 4d d4	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000b9	66 89 55 f4	 mov	 WORD PTR _pMsg$[ebp+32], dx
  000bd	8a 55 18	 mov	 dl, BYTE PTR _btY$[ebp]
  000c0	51		 push	 ecx
  000c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  000c6	88 55 f9	 mov	 BYTE PTR _pMsg$[ebp+37], dl
  000c9	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 682  : 	}
; 683  : }

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	33 cd		 xor	 ecx, ebp
  000d3	5e		 pop	 esi
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
?GJReqMapSvrMove@@YAXHGGEE@Z ENDP			; GJReqMapSvrMove
_TEXT	ENDS
PUBLIC	??_C@_0FC@JANLFHPE@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ ; `string'
PUBLIC	??_C@_0FE@PEPNAIIC@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ ; `string'
PUBLIC	??_C@_0EG@DBEOMGHG@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7A@ ; `string'
PUBLIC	??_C@_0EP@JGCJAADJ@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ ; `string'
PUBLIC	??_C@_0EA@OCCMNGHM@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?JGAnsMapSvrMove@@YAXPAUPMSG_ANS_MAPSVRMOVE@@@Z	; JGAnsMapSvrMove
EXTRN	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ:PROC	; TNotice::MakeNoticeMsgEx
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HHH@Z:PROC ; GJSetCharacterInfo
EXTRN	?GetSvrCodeData@CMapServerManager@@QAEHGPADPAG@Z:PROC ; CMapServerManager::GetSvrCodeData
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
EXTRN	?PHeadSubSetBE@@YAXPAEEEH@Z:PROC		; PHeadSubSetBE
;	COMDAT ??_C@_0FC@JANLFHPE@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\mapservermanager.h
CONST	SEGMENT
??_C@_0FC@JANLFHPE@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error JG [0x7A] - User Info Mismatch [%s]['
	DB	'%s]-[%s][%s] (%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@PEPNAIIC@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
CONST	SEGMENT
??_C@_0FE@PEPNAIIC@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error JG [0x7A] - Failed to Authorize User'
	DB	' [%s][%s] Result:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@DBEOMGHG@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7A@
CONST	SEGMENT
??_C@_0EG@DBEOMGHG@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7A@ DB '['
	DB	'MapServerMng] [%s][%s] JG [0x7A] - Move Map Request OK : MAPS'
	DB	'VR_D:%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@JGCJAADJ@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
CONST	SEGMENT
??_C@_0EP@JGCJAADJ@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error JG [0x7A] - Failed to find Map Info '
	DB	'[%s]-[%s] (%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@OCCMNGHM@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
CONST	SEGMENT
??_C@_0EA@OCCMNGHM@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error JG [0x7A] - User not Connected : %d', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\sprotocol.cpp
CONST	ENDS
;	COMDAT ?JGAnsMapSvrMove@@YAXPAUPMSG_ANS_MAPSVRMOVE@@@Z
_TEXT	SEGMENT
tv230 = -324						; size = 4
tv231 = -320						; size = 4
_pNotice$185145 = -316					; size = 272
_pMsg$185137 = -44					; size = 40
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?JGAnsMapSvrMove@@YAXPAUPMSG_ANS_MAPSVRMOVE@@@Z PROC	; JGAnsMapSvrMove, COMDAT

; 703  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _lpMsg$[ebp]

; 704  : 	if ( gObjIsConnected(lpMsg->iIndex ) == FALSE )

  00017	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	75 23		 jne	 SHORT $LN6@JGAnsMapSv

; 705  : 	{
; 706  : 		LogAddC(2, "[MapServerMng] Packet Error JG [0x7A] - User not Connected : %d", lpMsg->iIndex);

  00027	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0002a	51		 push	 ecx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@OCCMNGHM@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
  00030	6a 02		 push	 2
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	5f		 pop	 edi

; 757  : 	}
; 758  : }

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN6@JGAnsMapSv:
  0004a	53		 push	 ebx
  0004b	56		 push	 esi

; 707  : 		return;
; 708  : 	}
; 709  : 
; 710  : 	LPOBJ lpObj = &gObj[lpMsg->iIndex];

  0004c	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0004f	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  00055	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 711  : 
; 712  : 	if ( strcmp( lpObj->AccountID , lpMsg->szAccountID )  ||  strcmp( lpObj->Name, lpMsg->szCharName) )

  0005b	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  0005e	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00061	89 9d bc fe ff
	ff		 mov	 DWORD PTR tv230[ebp], ebx
  00067	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv231[ebp], eax
  0006d	8b cb		 mov	 ecx, ebx
  0006f	90		 npad	 1
$LL12@JGAnsMapSv:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 1a		 jne	 SHORT $LN13@JGAnsMapSv
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN14@JGAnsMapSv
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 0e		 jne	 SHORT $LN13@JGAnsMapSv
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL12@JGAnsMapSv
$LN14@JGAnsMapSv:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN15@JGAnsMapSv
$LN13@JGAnsMapSv:
  00090	1b c0		 sbb	 eax, eax
  00092	83 d8 ff	 sbb	 eax, -1
$LN15@JGAnsMapSv:
  00095	85 c0		 test	 eax, eax
  00097	0f 85 92 01 00
	00		 jne	 $LN4@JGAnsMapSv
  0009d	8d 5e 5d	 lea	 ebx, DWORD PTR [esi+93]
  000a0	8d 4f 13	 lea	 ecx, DWORD PTR [edi+19]
  000a3	8b c3		 mov	 eax, ebx
$LL16@JGAnsMapSv:
  000a5	8a 10		 mov	 dl, BYTE PTR [eax]
  000a7	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000a9	75 1a		 jne	 SHORT $LN17@JGAnsMapSv
  000ab	84 d2		 test	 dl, dl
  000ad	74 12		 je	 SHORT $LN18@JGAnsMapSv
  000af	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000b2	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000b5	75 0e		 jne	 SHORT $LN17@JGAnsMapSv
  000b7	83 c0 02	 add	 eax, 2
  000ba	83 c1 02	 add	 ecx, 2
  000bd	84 d2		 test	 dl, dl
  000bf	75 e4		 jne	 SHORT $LL16@JGAnsMapSv
$LN18@JGAnsMapSv:
  000c1	33 c0		 xor	 eax, eax
  000c3	eb 05		 jmp	 SHORT $LN19@JGAnsMapSv
$LN17@JGAnsMapSv:
  000c5	1b c0		 sbb	 eax, eax
  000c7	83 d8 ff	 sbb	 eax, -1
$LN19@JGAnsMapSv:
  000ca	85 c0		 test	 eax, eax
  000cc	0f 85 57 01 00
	00		 jne	 $LN20@JGAnsMapSv

; 715  : 		return;
; 716  : 	}
; 717  : 
; 718  : 	if ( lpMsg->iResult == 0	 )

  000d2	39 47 28	 cmp	 DWORD PTR [edi+40], eax
  000d5	0f 85 ec 00 00
	00		 jne	 $LN3@JGAnsMapSv

; 719  : 	{
; 720  : 		PMSG_ANS_MAPSERVERCHANGE pMsg;
; 721  : 
; 722  : 		PHeadSubSetBE((LPBYTE)&pMsg, 0xB1, 0x00, sizeof(pMsg));

  000db	6a 28		 push	 40			; 00000028H
  000dd	50		 push	 eax
  000de	8d 55 d4	 lea	 edx, DWORD PTR _pMsg$185137[ebp]
  000e1	68 b1 00 00 00	 push	 177			; 000000b1H
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 ?PHeadSubSetBE@@YAXPAEEEH@Z ; PHeadSubSetBE

; 723  : 		
; 724  : 		pMsg.wMapSvrCode = g_MapServerManager.GetMapSvrGroup();

  000ec	a1 00 6b 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+92928
  000f1	83 c4 10	 add	 esp, 16			; 00000010H
  000f4	85 c0		 test	 eax, eax
  000f6	74 06		 je	 SHORT $LN9@JGAnsMapSv
  000f8	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  000fc	eb 03		 jmp	 SHORT $LN10@JGAnsMapSv
$LN9@JGAnsMapSv:
  000fe	83 c8 ff	 or	 eax, -1
$LN10@JGAnsMapSv:

; 725  : 		pMsg.iJoinAuthCode1 = lpMsg->iJoinAuthCode1 ;
; 726  : 		pMsg.iJoinAuthCode2 = lpMsg->iJoinAuthCode2 ;

  00101	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]

; 727  : 		pMsg.iJoinAuthCode3 = lpMsg->iJoinAuthCode3;

  00104	8b 57 34	 mov	 edx, DWORD PTR [edi+52]
  00107	66 89 45 ea	 mov	 WORD PTR _pMsg$185137[ebp+22], ax
  0010b	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0010e	89 45 ec	 mov	 DWORD PTR _pMsg$185137[ebp+24], eax

; 728  : 		pMsg.iJoinAuthCode4 = lpMsg->iJoinAuthCode4 ;

  00111	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00114	89 4d f0	 mov	 DWORD PTR _pMsg$185137[ebp+28], ecx

; 729  : 	
; 730  : 		BOOL bRESULT = g_MapServerManager.GetSvrCodeData(lpMsg->wDstMapSvrCode, pMsg.szMapSvrIpAddress, &pMsg.wMapSvrPort);

  00117	8d 4d e8	 lea	 ecx, DWORD PTR _pMsg$185137[ebp+20]
  0011a	51		 push	 ecx
  0011b	89 55 f4	 mov	 DWORD PTR _pMsg$185137[ebp+32], edx
  0011e	89 45 f8	 mov	 DWORD PTR _pMsg$185137[ebp+36], eax
  00121	0f b7 47 20	 movzx	 eax, WORD PTR [edi+32]
  00125	8d 55 d8	 lea	 edx, DWORD PTR _pMsg$185137[ebp+4]
  00128	52		 push	 edx
  00129	50		 push	 eax
  0012a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  0012f	e8 00 00 00 00	 call	 ?GetSvrCodeData@CMapServerManager@@QAEHGPADPAG@Z ; CMapServerManager::GetSvrCodeData

; 731  : 
; 732  : 		if ( bRESULT == FALSE )

  00134	85 c0		 test	 eax, eax
  00136	75 2e		 jne	 SHORT $LN2@JGAnsMapSv

; 733  : 		{
; 734  : 			LogAddC(2, "[MapServerMng] Packet Error JG [0x7A] - Failed to find Map Info [%s]-[%s] (%d)",
; 735  : 				lpObj->AccountID, lpObj->Name, lpMsg->wDstMapSvrCode);

  00138	0f b7 4f 20	 movzx	 ecx, WORD PTR [edi+32]
  0013c	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR tv231[ebp]
  00142	51		 push	 ecx
  00143	53		 push	 ebx
  00144	52		 push	 edx
  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JGCJAADJ@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
  0014a	6a 02		 push	 2
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00152	83 c4 14	 add	 esp, 20			; 00000014H
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	5f		 pop	 edi

; 757  : 	}
; 758  : }

  00158	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015b	33 cd		 xor	 ecx, ebp
  0015d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c3		 ret	 0
$LN2@JGAnsMapSv:

; 736  : 			return;
; 737  : 		}
; 738  : 
; 739  : 		GJSetCharacterInfo(lpObj, lpObj->m_Index, TRUE);

  00166	8b 06		 mov	 eax, DWORD PTR [esi]
  00168	6a 01		 push	 1
  0016a	6a 01		 push	 1
  0016c	50		 push	 eax
  0016d	56		 push	 esi
  0016e	e8 00 00 00 00	 call	 ?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HHH@Z ; GJSetCharacterInfo
  00173	83 c4 10	 add	 esp, 16			; 00000010H

; 740  : 		lpObj->m_bMapSvrMoveQuit = TRUE;

  00176	c6 86 3c 20 00
	00 01		 mov	 BYTE PTR [esi+8252], 1

; 741  : 		lpObj->m_dwMapSvrQuitTick = GetTickCount();

  0017d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 742  : 
; 743  : 		DataSend(lpMsg->iIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00183	0f b6 4d d5	 movzx	 ecx, BYTE PTR _pMsg$185137[ebp+1]
  00187	51		 push	 ecx
  00188	8d 55 d4	 lea	 edx, DWORD PTR _pMsg$185137[ebp]
  0018b	89 86 40 20 00
	00		 mov	 DWORD PTR [esi+8256], eax
  00191	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00194	52		 push	 edx
  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 744  : 
; 745  : 		LogAddTD("[MapServerMng] [%s][%s] JG [0x7A] - Move Map Request OK : MAPSVR_D:%d",
; 746  : 			lpObj->AccountID, lpObj->Name, lpMsg->wDstMapSvrCode);

  0019b	0f b7 4f 20	 movzx	 ecx, WORD PTR [edi+32]
  0019f	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR tv231[ebp]
  001a5	51		 push	 ecx
  001a6	53		 push	 ebx
  001a7	52		 push	 edx
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@DBEOMGHG@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7A@
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001b3	83 c4 1c	 add	 esp, 28			; 0000001cH
  001b6	5e		 pop	 esi
  001b7	5b		 pop	 ebx
  001b8	5f		 pop	 edi

; 757  : 	}
; 758  : }

  001b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bc	33 cd		 xor	 ecx, ebp
  001be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c3		 ret	 0
$LN3@JGAnsMapSv:

; 747  : 	}
; 748  : 	else
; 749  : 	{
; 750  : 		PMSG_NOTICE pNotice;
; 751  : 
; 752  : 		TNotice::MakeNoticeMsgEx(&pNotice, 0, lMsg.Get(MSGGET(6, 77)));

  001c7	68 4d 06 00 00	 push	 1613			; 0000064dH
  001cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001d1	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001d6	50		 push	 eax
  001d7	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$185145[ebp]
  001dd	6a 00		 push	 0
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx

; 753  : 		DataSend(lpObj->m_Index, (LPBYTE)&pNotice, pNotice.h.size);

  001e5	0f b6 8d c5 fe
	ff ff		 movzx	 ecx, BYTE PTR _pNotice$185145[ebp+1]
  001ec	8b 06		 mov	 eax, DWORD PTR [esi]
  001ee	51		 push	 ecx
  001ef	8d 95 c4 fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$185145[ebp]
  001f5	52		 push	 edx
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 754  : 
; 755  : 		LogAddC(2, "[MapServerMng] Packet Error JG [0x7A] - Failed to Authorize User [%s][%s] Result:%d",
; 756  : 			lpObj->AccountID, lpObj->Name, lpMsg->iResult);

  001fc	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  001ff	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR tv231[ebp]
  00205	51		 push	 ecx
  00206	53		 push	 ebx
  00207	52		 push	 edx
  00208	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@PEPNAIIC@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
  0020d	6a 02		 push	 2
  0020f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00215	83 c4 2c	 add	 esp, 44			; 0000002cH
  00218	5e		 pop	 esi
  00219	5b		 pop	 ebx
  0021a	5f		 pop	 edi

; 757  : 	}
; 758  : }

  0021b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021e	33 cd		 xor	 ecx, ebp
  00220	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c3		 ret	 0
$LN20@JGAnsMapSv:

; 754  : 
; 755  : 		LogAddC(2, "[MapServerMng] Packet Error JG [0x7A] - Failed to Authorize User [%s][%s] Result:%d",
; 756  : 			lpObj->AccountID, lpObj->Name, lpMsg->iResult);

  00229	8b 9d bc fe ff
	ff		 mov	 ebx, DWORD PTR tv230[ebp]
$LN4@JGAnsMapSv:

; 713  : 	{
; 714  : 		LogAddC(2, "[MapServerMng] Packet Error JG [0x7A] - User Info Mismatch [%s][%s]-[%s][%s] (%d)", lpMsg->szAccountID, lpMsg->szCharName, lpObj->AccountID, lpObj->Name, lpObj->m_Index);

  0022f	8b 06		 mov	 eax, DWORD PTR [esi]
  00231	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv231[ebp]
  00237	50		 push	 eax
  00238	83 c6 5d	 add	 esi, 93			; 0000005dH
  0023b	56		 push	 esi
  0023c	51		 push	 ecx
  0023d	83 c7 13	 add	 edi, 19			; 00000013H
  00240	57		 push	 edi
  00241	53		 push	 ebx
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@JANLFHPE@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
  00247	6a 02		 push	 2
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 757  : 	}
; 758  : }

  0024f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00252	83 c4 1c	 add	 esp, 28			; 0000001cH
  00255	5e		 pop	 esi
  00256	5b		 pop	 ebx
  00257	33 cd		 xor	 ecx, ebp
  00259	5f		 pop	 edi
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c3		 ret	 0
?JGAnsMapSvrMove@@YAXPAUPMSG_ANS_MAPSVRMOVE@@@Z ENDP	; JGAnsMapSvrMove
_TEXT	ENDS
PUBLIC	??_C@_0EA@NPBAMLEI@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GJReqMapSvrAuth@@YAXHPAD0HHHH@Z		; GJReqMapSvrAuth
;	COMDAT ??_C@_0EA@NPBAMLEI@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@
CONST	SEGMENT
??_C@_0EA@NPBAMLEI@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error GJ [0x7B] - Index out of bound : %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GJReqMapSvrAuth@@YAXHPAD0HHHH@Z
_TEXT	SEGMENT
_pMsg$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_iIndex$ = 8						; size = 4
_lpszAccountID$ = 12					; size = 4
_lpszCharName$ = 16					; size = 4
_iJA1$ = 20						; size = 4
_iJA2$ = 24						; size = 4
_iJA3$ = 28						; size = 4
_iJA4$ = 32						; size = 4
?GJReqMapSvrAuth@@YAXHPAD0HHHH@Z PROC			; GJReqMapSvrAuth, COMDAT

; 783  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 10	 mov	 ebx, DWORD PTR _lpszCharName$[ebp]
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR _lpszAccountID$[ebp]

; 784  : 	if ( !OBJMAX_RANGE(iIndex))

  0001c	85 f6		 test	 esi, esi
  0001e	78 0f		 js	 SHORT $LN6@GJReqMapSv@2
  00020	33 c0		 xor	 eax, eax
  00022	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00028	0f 9e c0	 setle	 al
  0002b	85 c0		 test	 eax, eax
  0002d	75 22		 jne	 SHORT $LN1@GJReqMapSv@2
$LN6@GJReqMapSv@2:

; 785  : 	{
; 786  : 		LogAddC(2, "[MapServerMng] Packet Error GJ [0x7B] - Index out of bound : %d", iIndex);

  0002f	56		 push	 esi
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@NPBAMLEI@?$FLMapServerMng?$FN?5Packet?5Error?5GJ?5?$FL@
  00035	6a 02		 push	 2
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 805  : }

  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
$LN1@GJReqMapSv@2:

; 787  : 		return;
; 788  : 	}
; 789  : 
; 790  : 	PMSG_REQ_MAPSVRAUTH pMsg;
; 791  : 
; 792  : 	PHeadSetB((LPBYTE)&pMsg, 0x7B, sizeof(pMsg));

  00051	6a 30		 push	 48			; 00000030H
  00053	8d 45 cc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00056	6a 7b		 push	 123			; 0000007bH
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 793  : 	pMsg.iIndex = iIndex;
; 794  : 	memcpy(pMsg.szAccountID, lpszAccountID, MAX_ACCOUNT_LEN);

  0005e	0f b7 47 08	 movzx	 eax, WORD PTR [edi+8]
  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00067	66 89 45 dc	 mov	 WORD PTR _pMsg$[ebp+16], ax

; 795  : 	memcpy(pMsg.szCharName, lpszCharName, MAX_ACCOUNT_LEN);

  0006b	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  0006f	89 4d d4	 mov	 DWORD PTR _pMsg$[ebp+8], ecx
  00072	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00074	89 4d df	 mov	 DWORD PTR _pMsg$[ebp+19], ecx

; 796  : 	pMsg.wDstMapSvrCode = gGameServerCode;

  00077	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  0007e	66 89 45 e7	 mov	 WORD PTR _pMsg$[ebp+27], ax

; 797  : 	pMsg.iJoinAuthCode1 = iJA1;
; 798  : 	pMsg.iJoinAuthCode2 = iJA2;

  00082	8b 45 18	 mov	 eax, DWORD PTR _iJA2$[ebp]
  00085	89 55 d8	 mov	 DWORD PTR _pMsg$[ebp+12], edx
  00088	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0008b	66 89 4d ea	 mov	 WORD PTR _pMsg$[ebp+30], cx

; 799  : 	pMsg.iJoinAuthCode3 = iJA3;

  0008f	8b 4d 1c	 mov	 ecx, DWORD PTR _iJA3$[ebp]
  00092	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+36], eax

; 800  : 	pMsg.iJoinAuthCode4 = iJA4;
; 801  : 
; 802  : 	wsJServerCli.DataSend((PCHAR)&pMsg, pMsg.h.size);

  00095	0f b6 45 cd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009c	89 55 e3	 mov	 DWORD PTR _pMsg$[ebp+23], edx
  0009f	8b 55 14	 mov	 edx, DWORD PTR _iJA1$[ebp]
  000a2	89 4d f4	 mov	 DWORD PTR _pMsg$[ebp+40], ecx
  000a5	50		 push	 eax
  000a6	8d 4d cc	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000a9	89 55 ec	 mov	 DWORD PTR _pMsg$[ebp+32], edx
  000ac	8b 55 20	 mov	 edx, DWORD PTR _iJA4$[ebp]
  000af	51		 push	 ecx
  000b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  000b5	89 75 d0	 mov	 DWORD PTR _pMsg$[ebp+4], esi
  000b8	89 55 f8	 mov	 DWORD PTR _pMsg$[ebp+44], edx
  000bb	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 803  : 
; 804  : 	gObj[iIndex].m_bMapSvrMoveReq = true;

  000c0	69 f6 40 27 00
	00		 imul	 esi, 10048		; 00002740H
  000c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 805  : }

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cf	5f		 pop	 edi
  000d0	c6 84 16 3d 20
	00 00 01	 mov	 BYTE PTR [esi+edx+8253], 1
  000d8	5e		 pop	 esi
  000d9	33 cd		 xor	 ecx, ebp
  000db	5b		 pop	 ebx
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
?GJReqMapSvrAuth@@YAXHPAD0HHHH@Z ENDP			; GJReqMapSvrAuth
_TEXT	ENDS
PUBLIC	??_C@_0EE@OBJPBDGN@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@ ; `string'
PUBLIC	??_C@_0EI@PFOEEAH@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@ ; `string'
PUBLIC	??_C@_0EF@OOAPAFHL@?$FLMapServerMng?$FN?5MapSvr?5MoveReq?5Er@ ; `string'
PUBLIC	??_C@_0EA@IPNBBDAL@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?JGAnsMapSvrAuth@@YAXPAUPMSG_ANS_MAPSVRAUTH@@@Z	; JGAnsMapSvrAuth
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?BuxConvert@@YAXPADH@Z:PROC			; BuxConvert
EXTRN	?GCAnsMapSvrAuth@@YAXHH@Z:PROC			; GCAnsMapSvrAuth
EXTRN	?gObjSetAccountLogin@@YAHHPADHH0@Z:PROC		; gObjSetAccountLogin
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
;	COMDAT ??_C@_0EE@OBJPBDGN@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@
CONST	SEGMENT
??_C@_0EE@OBJPBDGN@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@ DB '['
	DB	'MapServerMng] [%s][%s] JG [0x7B] - Join Result OK : RST:%d, B'
	DB	'LK:%c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@PFOEEAH@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@
CONST	SEGMENT
??_C@_0EI@PFOEEAH@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@ DB '['
	DB	'MapServerMng] [%s][%s] JG [0x7B] - Join Result Failed : RST:%'
	DB	'd, BLK:%c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@OOAPAFHL@?$FLMapServerMng?$FN?5MapSvr?5MoveReq?5Er@
CONST	SEGMENT
??_C@_0EF@OOAPAFHL@?$FLMapServerMng?$FN?5MapSvr?5MoveReq?5Er@ DB '[MapSer'
	DB	'verMng] MapSvr MoveReq Error JG [0x7B] - No Request [%s] (%d)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@IPNBBDAL@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
CONST	SEGMENT
??_C@_0EA@IPNBBDAL@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@ DB '[Ma'
	DB	'pServerMng] Packet Error JG [0x7B] - Index out of bound : %d', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?JGAnsMapSvrAuth@@YAXPAUPMSG_ANS_MAPSVRAUTH@@@Z
_TEXT	SEGMENT
_lpObj$ = -96						; size = 4
tv328 = -92						; size = 4
_bAuthOK$ = -88						; size = 4
_iSendResult$ = -84					; size = 4
_pMsg$ = -80						; size = 28
_szJN$ = -52						; size = 21
_szName$ = -28						; size = 11
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?JGAnsMapSvrAuth@@YAXPAUPMSG_ANS_MAPSVRAUTH@@@Z PROC	; JGAnsMapSvrAuth, COMDAT

; 813  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]

; 814  : 	if ( !OBJMAX_RANGE(lpMsg->iIndex))

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	33 d2		 xor	 edx, edx
  00019	3b c2		 cmp	 eax, edx
  0001b	7c 0e		 jl	 SHORT $LN20@JGAnsMapSv@2
  0001d	33 c9		 xor	 ecx, ecx
  0001f	3d eb 2c 00 00	 cmp	 eax, 11499		; 00002cebH
  00024	0f 9e c1	 setle	 cl
  00027	3b ca		 cmp	 ecx, edx
  00029	75 20		 jne	 SHORT $LN13@JGAnsMapSv@2
$LN20@JGAnsMapSv@2:

; 815  : 	{
; 816  : 		LogAddC(2, "[MapServerMng] Packet Error JG [0x7B] - Index out of bound : %d",
; 817  : 			lpMsg->iIndex);

  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@IPNBBDAL@?$FLMapServerMng?$FN?5Packet?5Error?5JG?5?$FL@
  00031	6a 02		 push	 2
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003c	5e		 pop	 esi

; 921  : 
; 922  : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN13@JGAnsMapSv@2:

; 818  : 		
; 819  : 		return;
; 820  : 	}
; 821  : 
; 822  : 	LPOBJ lpObj = &gObj[lpMsg->iIndex];

  0004b	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  00051	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 823  : 	memcpy(lpObj->Name, lpMsg->szCharName, MAX_ACCOUNT_LEN);

  00057	8d 4e 13	 lea	 ecx, DWORD PTR [esi+19]
  0005a	57		 push	 edi
  0005b	8b 39		 mov	 edi, DWORD PTR [ecx]
  0005d	89 78 5d	 mov	 DWORD PTR [eax+93], edi
  00060	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00063	89 78 61	 mov	 DWORD PTR [eax+97], edi
  00066	89 4d a4	 mov	 DWORD PTR tv328[ebp], ecx
  00069	66 8b 49 08	 mov	 cx, WORD PTR [ecx+8]
  0006d	89 45 a0	 mov	 DWORD PTR _lpObj$[ebp], eax
  00070	66 89 48 65	 mov	 WORD PTR [eax+101], cx

; 824  : 
; 825  : 
; 826  : 	if ( lpObj->m_bMapSvrMoveReq == false )

  00074	38 90 3d 20 00
	00		 cmp	 BYTE PTR [eax+8253], dl
  0007a	75 30		 jne	 SHORT $LN12@JGAnsMapSv@2

; 827  : 	{
; 828  : 		LogAddC(2, "[MapServerMng] MapSvr MoveReq Error JG [0x7B] - No Request [%s] (%d)",
; 829  : 			lpObj->AccountID, lpObj->m_Index);

  0007c	8b 10		 mov	 edx, DWORD PTR [eax]
  0007e	52		 push	 edx
  0007f	83 c0 52	 add	 eax, 82			; 00000052H
  00082	50		 push	 eax
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@OOAPAFHL@?$FLMapServerMng?$FN?5MapSvr?5MoveReq?5Er@
  00088	6a 02		 push	 2
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 830  : 
; 831  : 		gObjDel(lpMsg->iIndex);

  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00099	83 c4 14	 add	 esp, 20			; 00000014H
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi

; 921  : 
; 922  : }

  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	33 cd		 xor	 ecx, ebp
  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN12@JGAnsMapSv@2:

; 832  : 		return;
; 833  : 	}
; 834  : 
; 835  : 	BOOL bAuthOK = FALSE;
; 836  : 	int iSendResult = 0;
; 837  : 	char szId[11];
; 838  : 	char szJN[21] = "";
; 839  : 	int iIndex = lpMsg->iIndex;
; 840  : 	SDHP_DBCHARINFOREQUEST pMsg;
; 841  : 	char szName[11];
; 842  : 
; 843  : 	memset(szId, 0, sizeof(szId));
; 844  : 	memcpy(szId, lpMsg->szAccountID, MAX_ACCOUNT_LEN);

  000ac	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000af	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  000b2	33 c0		 xor	 eax, eax
  000b4	89 45 cd	 mov	 DWORD PTR _szJN$[ebp+1], eax
  000b7	89 45 d1	 mov	 DWORD PTR _szJN$[ebp+5], eax
  000ba	89 45 d5	 mov	 DWORD PTR _szJN$[ebp+9], eax
  000bd	89 45 d9	 mov	 DWORD PTR _szJN$[ebp+13], eax
  000c0	89 45 dd	 mov	 DWORD PTR _szJN$[ebp+17], eax
  000c3	89 45 f0	 mov	 DWORD PTR _szId$[ebp], eax
  000c6	89 45 f4	 mov	 DWORD PTR _szId$[ebp+4], eax
  000c9	66 89 45 f8	 mov	 WORD PTR _szId$[ebp+8], ax
  000cd	88 45 fa	 mov	 BYTE PTR _szId$[ebp+10], al
  000d0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000d3	53		 push	 ebx
  000d4	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
  000d7	89 4d f0	 mov	 DWORD PTR _szId$[ebp], ecx
  000da	66 8b 4b 08	 mov	 cx, WORD PTR [ebx+8]
  000de	89 45 f4	 mov	 DWORD PTR _szId$[ebp+4], eax

; 845  : 	memcpy(szJN, lpMsg->cJoominNumber, sizeof(lpMsg->cJoominNumber));

  000e1	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000e4	66 89 4d f8	 mov	 WORD PTR _szId$[ebp+8], cx
  000e8	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  000eb	89 45 cc	 mov	 DWORD PTR _szJN$[ebp], eax
  000ee	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000f1	89 4d d0	 mov	 DWORD PTR _szJN$[ebp+4], ecx
  000f4	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  000f7	89 45 d4	 mov	 DWORD PTR _szJN$[ebp+8], eax
  000fa	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  000fd	89 4d d8	 mov	 DWORD PTR _szJN$[ebp+12], ecx
  00100	89 45 dc	 mov	 DWORD PTR _szJN$[ebp+16], eax

; 874  : 					break;
; 875  : 			}
; 876  : 			break;
; 877  : 
; 878  : 		default:
; 879  : 			iSendResult = 0;

  00103	89 55 ac	 mov	 DWORD PTR _iSendResult$[ebp], edx

; 880  : 			bAuthOK = FALSE;

  00106	89 55 a8	 mov	 DWORD PTR _bAuthOK$[ebp], edx
  00109	39 56 24	 cmp	 DWORD PTR [esi+36], edx

; 881  : 			break;

  0010c	0f 85 c3 00 00
	00		 jne	 $LN21@JGAnsMapSv@2

; 846  : 	
; 847  : 	switch ( lpMsg->iResult )
; 848  : 	{
; 849  : 		case 0:
; 850  : 			iSendResult = 0;
; 851  : 			bAuthOK = FALSE;
; 852  : 
; 853  : 			if ( !gObjSetAccountLogin(iIndex, szId, lpMsg->iUserNumber, lpMsg->iDBNumber, szJN))

  00112	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00115	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00118	8d 4d cc	 lea	 ecx, DWORD PTR _szJN$[ebp]
  0011b	51		 push	 ecx
  0011c	52		 push	 edx
  0011d	50		 push	 eax
  0011e	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  00121	51		 push	 ecx
  00122	57		 push	 edi
  00123	e8 00 00 00 00	 call	 ?gObjSetAccountLogin@@YAHHPADHH0@Z ; gObjSetAccountLogin
  00128	83 c4 14	 add	 esp, 20			; 00000014H

; 854  : 			{
; 855  : 				GJPAccountFail(iIndex, szId, lpMsg->iDBNumber, lpMsg->iUserNumber);

  0012b	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  0012e	85 c0		 test	 eax, eax
  00130	75 1b		 jne	 SHORT $LN8@JGAnsMapSv@2
  00132	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00135	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00138	52		 push	 edx
  00139	50		 push	 eax
  0013a	51		 push	 ecx
  0013b	57		 push	 edi
  0013c	e8 00 00 00 00	 call	 ?GJPAccountFail@@YAXFPADHH@Z ; GJPAccountFail
  00141	83 c4 10	 add	 esp, 16			; 00000010H

; 856  : 				lpMsg->iResult = 4;

  00144	c7 46 24 04 00
	00 00		 mov	 DWORD PTR [esi+36], 4

; 857  : 			}
; 858  : 			else

  0014b	eb 3f		 jmp	 SHORT $LN7@JGAnsMapSv@2
$LN8@JGAnsMapSv@2:

; 859  : 			{
; 860  : 				LogAddTD(lMsg.Get(MSGGET(1, 211)), gObj[iIndex].Ip_addr, szId, lpMsg->iUserNumber, lpMsg->iDBNumber);

  0014d	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00150	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00153	52		 push	 edx
  00154	8b d7		 mov	 edx, edi
  00156	69 d2 40 27 00
	00		 imul	 edx, 10048		; 00002740H
  0015c	50		 push	 eax
  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00162	51		 push	 ecx
  00163	8d 4c 02 1c	 lea	 ecx, DWORD PTR [edx+eax+28]
  00167	51		 push	 ecx
  00168	68 d3 01 00 00	 push	 467			; 000001d3H
  0016d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00172	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00177	50		 push	 eax
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 861  : 				iSendResult = 1;

  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	83 c4 14	 add	 esp, 20			; 00000014H
  00186	89 45 ac	 mov	 DWORD PTR _iSendResult$[ebp], eax

; 862  : 				bAuthOK = TRUE;

  00189	89 45 a8	 mov	 DWORD PTR _bAuthOK$[ebp], eax
$LN7@JGAnsMapSv@2:

; 863  : 			}
; 864  : 
; 865  : 			if ( lpMsg->iUserNumber == 0 && lpMsg->iDBNumber == 0 )

  0018c	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00190	75 27		 jne	 SHORT $LN6@JGAnsMapSv@2
  00192	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00196	75 21		 jne	 SHORT $LN6@JGAnsMapSv@2

; 866  : 			{
; 867  : 				LogAddTD(lMsg.Get(MSGGET(1, 212)), szId, lpMsg->iUserNumber, lpMsg->iDBNumber);

  00198	6a 00		 push	 0
  0019a	6a 00		 push	 0
  0019c	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  0019f	52		 push	 edx
  001a0	68 d4 01 00 00	 push	 468			; 000001d4H
  001a5	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001aa	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001af	50		 push	 eax
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001b6	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@JGAnsMapSv@2:

; 868  : 			}
; 869  : 
; 870  : 			switch ( lpMsg->btBlockCode )

  001b9	80 7e 44 46	 cmp	 BYTE PTR [esi+68], 70	; 00000046H
  001bd	75 16		 jne	 SHORT $LN21@JGAnsMapSv@2

; 871  : 			{
; 872  : 				case 70:	// 0x46
; 873  : 					gObj[iIndex].m_cAccountItemBlock = 1;

  001bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c5	8b c7		 mov	 eax, edi
  001c7	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  001cd	c6 84 08 c4 01
	00 00 01	 mov	 BYTE PTR [eax+ecx+452], 1
$LN21@JGAnsMapSv@2:

; 882  : 	}
; 883  : 
; 884  : 	GCAnsMapSvrAuth(iIndex, iSendResult);

  001d5	8b 55 ac	 mov	 edx, DWORD PTR _iSendResult$[ebp]
  001d8	52		 push	 edx
  001d9	57		 push	 edi
  001da	e8 00 00 00 00	 call	 ?GCAnsMapSvrAuth@@YAXHH@Z ; GCAnsMapSvrAuth
  001df	83 c4 08	 add	 esp, 8

; 885  : 
; 886  : 	if ( bAuthOK == FALSE )

  001e2	83 7d a8 00	 cmp	 DWORD PTR _bAuthOK$[ebp], 0
  001e6	75 3b		 jne	 SHORT $LN1@JGAnsMapSv@2

; 887  : 	{
; 888  : 		LogAddC(2, "[MapServerMng] [%s][%s] JG [0x7B] - Join Result Failed : RST:%d, BLK:%c",
; 889  : 			szId, lpMsg->szCharName, lpMsg->iResult, lpMsg->btBlockCode);

  001e8	0f b6 46 44	 movzx	 eax, BYTE PTR [esi+68]
  001ec	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  001ef	8b 55 a4	 mov	 edx, DWORD PTR tv328[ebp]
  001f2	50		 push	 eax
  001f3	51		 push	 ecx
  001f4	52		 push	 edx
  001f5	8d 45 f0	 lea	 eax, DWORD PTR _szId$[ebp]
  001f8	50		 push	 eax
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@PFOEEAH@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@
  001fe	6a 02		 push	 2
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 890  : 		gObjDel(lpMsg->iIndex);

  00206	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00209	51		 push	 ecx
  0020a	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0020f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00212	5b		 pop	 ebx
  00213	5f		 pop	 edi
  00214	5e		 pop	 esi

; 921  : 
; 922  : }

  00215	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00218	33 cd		 xor	 ecx, ebp
  0021a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021f	8b e5		 mov	 esp, ebp
  00221	5d		 pop	 ebp
  00222	c3		 ret	 0
$LN1@JGAnsMapSv@2:

; 891  : 
; 892  : 		return;
; 893  : 	}
; 894  : 	
; 895  : 	gObj[iIndex].m_sPrevMapSvrCode = lpMsg->wPrevMapSvrCode;

  00223	0f b7 56 1e	 movzx	 edx, WORD PTR [esi+30]
  00227	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0022d	8b c7		 mov	 eax, edi
  0022f	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  00235	66 89 94 08 44
	20 00 00	 mov	 WORD PTR [eax+ecx+8260], dx

; 896  : 	gObj[iIndex].m_sDestMapNumber  = lpMsg->wMapNumber;

  0023d	0f b7 56 20	 movzx	 edx, WORD PTR [esi+32]
  00241	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00247	66 89 94 08 46
	20 00 00	 mov	 WORD PTR [eax+ecx+8262], dx

; 897  : 	gObj[iIndex].m_btDestX = lpMsg->btX;

  0024f	0f b6 56 22	 movzx	 edx, BYTE PTR [esi+34]
  00253	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00259	88 94 08 48 20
	00 00		 mov	 BYTE PTR [eax+ecx+8264], dl

; 898  : 	gObj[iIndex].m_btDestY = lpMsg->btY;

  00260	0f b6 56 23	 movzx	 edx, BYTE PTR [esi+35]
  00264	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0026a	88 94 08 49 20
	00 00		 mov	 BYTE PTR [eax+ecx+8265], dl

; 899  : 	gObj[iIndex].bEnableDelCharacter = FALSE;

  00271	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 900  : 
; 901  : #if (ENABLETEST_ARCA == 1)
; 902  : 	if( g_ArcaBattle.IsArcaBattleServer() )
; 903  :     {
; 904  :           g_ArcaBattle.SendArcaBattlePlayInfo(gObj[iIndex], 1);
; 905  :           g_ArcaBattle.SendArcaBattleCurrentState(gObj[iIndex]);
; 906  :     }
; 907  : #endif
; 908  : 
; 909  : 	PHeadSetB((LPBYTE)&pMsg, 0x06, sizeof(pMsg));

  00277	6a 1c		 push	 28			; 0000001cH
  00279	c7 44 10 10 00
	00 00 00	 mov	 DWORD PTR [eax+edx+16], 0
  00281	8d 45 b0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00284	6a 06		 push	 6
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 910  : 	memset(szName, 0, sizeof(szName));
; 911  : 	memcpy(szName, lpMsg->szCharName, MAX_ACCOUNT_LEN);

  0028c	8b 7d a4	 mov	 edi, DWORD PTR tv328[ebp]
  0028f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00291	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00294	33 c0		 xor	 eax, eax
  00296	89 45 e4	 mov	 DWORD PTR _szName$[ebp], eax
  00299	89 45 e8	 mov	 DWORD PTR _szName$[ebp+4], eax
  0029c	66 89 45 ec	 mov	 WORD PTR _szName$[ebp+8], ax
  002a0	89 4d e4	 mov	 DWORD PTR _szName$[ebp], ecx
  002a3	88 45 ee	 mov	 BYTE PTR _szName$[ebp+10], al
  002a6	66 8b 47 08	 mov	 ax, WORD PTR [edi+8]

; 912  : 	BuxConvert(szName, MAX_ACCOUNT_LEN);

  002aa	8d 4d e4	 lea	 ecx, DWORD PTR _szName$[ebp]
  002ad	6a 0a		 push	 10			; 0000000aH
  002af	51		 push	 ecx
  002b0	89 55 e8	 mov	 DWORD PTR _szName$[ebp+4], edx
  002b3	66 89 45 ec	 mov	 WORD PTR _szName$[ebp+8], ax
  002b7	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert

; 913  : 	memcpy(pMsg.Name, szName, MAX_ACCOUNT_LEN);

  002bc	8b 55 e4	 mov	 edx, DWORD PTR _szName$[ebp]
  002bf	8b 45 e8	 mov	 eax, DWORD PTR _szName$[ebp+4]
  002c2	66 8b 4d ec	 mov	 cx, WORD PTR _szName$[ebp+8]
  002c6	89 55 be	 mov	 DWORD PTR _pMsg$[ebp+14], edx

; 914  : 	strcpy(pMsg.AccountID, lpMsg->szAccountID);

  002c9	8d 55 b3	 lea	 edx, DWORD PTR _pMsg$[ebp+3]
  002cc	83 c4 14	 add	 esp, 20			; 00000014H
  002cf	89 45 c2	 mov	 DWORD PTR _pMsg$[ebp+18], eax
  002d2	66 89 4d c6	 mov	 WORD PTR _pMsg$[ebp+22], cx
  002d6	8b c3		 mov	 eax, ebx
  002d8	2b d3		 sub	 edx, ebx
  002da	8d 9b 00 00 00
	00		 npad	 6
$LL18@JGAnsMapSv@2:
  002e0	8a 08		 mov	 cl, BYTE PTR [eax]
  002e2	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  002e5	40		 inc	 eax
  002e6	84 c9		 test	 cl, cl
  002e8	75 f6		 jne	 SHORT $LL18@JGAnsMapSv@2

; 915  : 	pMsg.Number = lpObj->m_Index;
; 916  : 
; 917  : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  002ea	0f b6 4d b1	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  002ee	8b 55 a0	 mov	 edx, DWORD PTR _lpObj$[ebp]
  002f1	66 8b 02	 mov	 ax, WORD PTR [edx]
  002f4	51		 push	 ecx
  002f5	8d 55 b0	 lea	 edx, DWORD PTR _pMsg$[ebp]
  002f8	52		 push	 edx
  002f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  002fe	66 89 45 ca	 mov	 WORD PTR _pMsg$[ebp+26], ax
  00302	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 918  : 
; 919  : 	LogAddTD("[MapServerMng] [%s][%s] JG [0x7B] - Join Result OK : RST:%d, BLK:%c",
; 920  : 		szId, lpMsg->szCharName, lpMsg->iResult, lpMsg->btBlockCode);

  00307	0f b6 46 44	 movzx	 eax, BYTE PTR [esi+68]
  0030b	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0030e	50		 push	 eax
  0030f	51		 push	 ecx
  00310	57		 push	 edi
  00311	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  00314	52		 push	 edx
  00315	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@OBJPBDGN@?$FLMapServerMng?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5JG?5?$FL0x7B@
  0031a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 921  : 
; 922  : }

  00320	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00323	83 c4 14	 add	 esp, 20			; 00000014H
  00326	5b		 pop	 ebx
  00327	5f		 pop	 edi
  00328	33 cd		 xor	 ecx, ebp
  0032a	5e		 pop	 esi
  0032b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00330	8b e5		 mov	 esp, ebp
  00332	5d		 pop	 ebp
  00333	c3		 ret	 0
?JGAnsMapSvrAuth@@YAXPAUPMSG_ANS_MAPSVRAUTH@@@Z ENDP	; JGAnsMapSvrAuth
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJNotifyMaxUserCount@@YAXXZ			; GJNotifyMaxUserCount
EXTRN	?gObjTotalUser@@3HA:DWORD			; gObjTotalUser
EXTRN	?gServerMaxUser@@3HA:DWORD			; gServerMaxUser
; Function compile flags: /Ogtp
;	COMDAT ?GJNotifyMaxUserCount@@YAXXZ
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?GJNotifyMaxUserCount@@YAXXZ PROC			; GJNotifyMaxUserCount, COMDAT

; 941  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 942  : 	PMSG_NOTIFY_MAXUSER pMsg;
; 943  : 
; 944  : 	PHeadSetB((LPBYTE)&pMsg, 0x7C, sizeof(PMSG_NOTIFY_MAXUSER));

  00010	6a 10		 push	 16			; 00000010H
  00012	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00015	6a 7c		 push	 124			; 0000007cH
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 945  : 	pMsg.iSvrCode = gGameServerCode;

  0001d	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode

; 946  : 	pMsg.iMaxUserCount = gServerMaxUser;

  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gServerMaxUser@@3HA ; gServerMaxUser

; 947  : 	pMsg.iCurUserCount = gObjTotalUser;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObjTotalUser@@3HA ; gObjTotalUser
  0002f	89 4d f0	 mov	 DWORD PTR _pMsg$[ebp+4], ecx

; 948  : 	
; 949  : 	wsJServerCli.DataSend((char*)&pMsg, pMsg.h.size);

  00032	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	89 55 f4	 mov	 DWORD PTR _pMsg$[ebp+8], edx
  0003c	51		 push	 ecx
  0003d	8d 55 ec	 lea	 edx, DWORD PTR _pMsg$[ebp]
  00040	52		 push	 edx
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00046	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  00049	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 950  : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	33 cd		 xor	 ecx, ebp
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?GJNotifyMaxUserCount@@YAXXZ ENDP			; GJNotifyMaxUserCount
_TEXT	ENDS
PUBLIC	?JGPSendMail@@YAXPAUPMSG_JG_MEMO_SEND@@@Z	; JGPSendMail
EXTRN	?MngFriendMemoSend@@YAXPAUPMSG_JG_MEMO_SEND@@@Z:PROC ; MngFriendMemoSend
; Function compile flags: /Ogtp
;	COMDAT ?JGPSendMail@@YAXPAUPMSG_JG_MEMO_SEND@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?JGPSendMail@@YAXPAUPMSG_JG_MEMO_SEND@@@Z PROC		; JGPSendMail, COMDAT

; 953  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 955  : }

  00003	5d		 pop	 ebp

; 954  : 	MngFriendMemoSend(lpMsg);

  00004	e9 00 00 00 00	 jmp	 ?MngFriendMemoSend@@YAXPAUPMSG_JG_MEMO_SEND@@@Z ; MngFriendMemoSend
?JGPSendMail@@YAXPAUPMSG_JG_MEMO_SEND@@@Z ENDP		; JGPSendMail
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GJUpdateMatchDBUserCharacters@@YAXPAUOBJECTSTRUCT@@@Z ; GJUpdateMatchDBUserCharacters
; Function compile flags: /Ogtp
;	COMDAT ?GJUpdateMatchDBUserCharacters@@YAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GJUpdateMatchDBUserCharacters@@YAXPAUOBJECTSTRUCT@@@Z PROC ; GJUpdateMatchDBUserCharacters, COMDAT

; 971  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 972  : 	SDHP_REQ_UPDATE_MATCHDB_USERCHARACTERS pMsg;
; 973  : 
; 974  : 	PHeadSetB((LPBYTE)&pMsg, 0x16, sizeof(SDHP_REQ_UPDATE_MATCHDB_USERCHARACTERS));

  00014	6a 1c		 push	 28			; 0000001cH
  00016	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00019	6a 16		 push	 22			; 00000016H
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 975  : 	pMsg.DbClass = lpObj->DbClass;
; 976  : 	pMsg.Level = lpObj->Level;
; 977  : 	memcpy(pMsg.szId, lpObj->AccountID, sizeof(pMsg.szId));

  00021	8b 46 52	 mov	 eax, DWORD PTR [esi+82]
  00024	8a 8e 92 00 00
	00		 mov	 cl, BYTE PTR [esi+146]
  0002a	0f b7 96 96 00
	00 00		 movzx	 edx, WORD PTR [esi+150]
  00031	88 4d fa	 mov	 BYTE PTR _pMsg$[ebp+26], cl
  00034	8b 4e 56	 mov	 ecx, DWORD PTR [esi+86]
  00037	89 45 e3	 mov	 DWORD PTR _pMsg$[ebp+3], eax

; 978  : 	//memcpy(pMsg.szName, lpObj->BackName, sizeof(pMsg.szName));
; 979  : 
; 980  : 	wsJServerCli.DataSend((PCHAR)&pMsg, pMsg.h.size);

  0003a	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	89 4d e7	 mov	 DWORD PTR _pMsg$[ebp+7], ecx
  00044	66 89 55 f8	 mov	 WORD PTR _pMsg$[ebp+24], dx
  00048	0f b7 56 5a	 movzx	 edx, WORD PTR [esi+90]
  0004c	50		 push	 eax
  0004d	8d 4d e0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00050	51		 push	 ecx
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00056	66 89 55 eb	 mov	 WORD PTR _pMsg$[ebp+11], dx
  0005a	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 981  : }

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00062	33 cd		 xor	 ecx, ebp
  00064	5e		 pop	 esi
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?GJUpdateMatchDBUserCharacters@@YAXPAUOBJECTSTRUCT@@@Z ENDP ; GJUpdateMatchDBUserCharacters
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?BroadCastMessage@@YAXPAUBroadCastMessageInfo@@@Z ; BroadCastMessage
EXTRN	?DataSendAll@@YAXPAEH@Z:PROC			; DataSendAll
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?BroadCastMessage@@YAXPAUBroadCastMessageInfo@@@Z
_TEXT	SEGMENT
_lpInfo$185261 = -120					; size = 113
__$ArrayPad$ = -4					; size = 4
_lpResult$ = 8						; size = 4
?BroadCastMessage@@YAXPAUBroadCastMessageInfo@@@Z PROC	; BroadCastMessage, COMDAT

; 984  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpResult$[ebp]

; 985  : 	if( strlen(lpResult->Text) < 2 )

  00014	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00017	57		 push	 edi
  00018	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0001b	eb 03 8d 49 00	 npad	 5
$LL8@BroadCastM:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL8@BroadCastM
  00027	2b c2		 sub	 eax, edx
  00029	83 f8 02	 cmp	 eax, 2
  0002c	0f 82 a3 00 00
	00		 jb	 $LN3@BroadCastM

; 986  : 	{
; 987  : 		return;
; 988  : 	}
; 989  : 	
; 990  : 	switch(lpResult->Type)

  00032	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00036	83 e8 00	 sub	 eax, 0
  00039	0f 84 8a 00 00
	00		 je	 $LN2@BroadCastM
  0003f	48		 dec	 eax
  00040	0f 85 8f 00 00
	00		 jne	 $LN3@BroadCastM

; 995  : 		}
; 996  : 		break;
; 997  : 	case 1:
; 998  : 		{
; 999  : 			USER_REQ_POST lpInfo = { 0 };

  00046	6a 70		 push	 112			; 00000070H
  00048	50		 push	 eax
  00049	88 45 88	 mov	 BYTE PTR _lpInfo$185261[ebp], al
  0004c	8d 45 89	 lea	 eax, DWORD PTR _lpInfo$185261[ebp+1]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _memset

; 1000 : 			PHeadSetB((LPBYTE)&lpInfo, 0, sizeof(lpInfo));

  00055	6a 71		 push	 113			; 00000071H
  00057	8d 4d 88	 lea	 ecx, DWORD PTR _lpInfo$185261[ebp]
  0005a	6a 00		 push	 0
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1001 : 			lpInfo.h.headcode = 2;
; 1002 : 			lpInfo.chatmsg[0] = '!';
; 1003 : 			memcpy(lpInfo.id, lpResult->Sender, 10);

  00062	8b 46 0a	 mov	 eax, DWORD PTR [esi+10]
  00065	66 8b 4e 0e	 mov	 cx, WORD PTR [esi+14]
  00069	8b 56 06	 mov	 edx, DWORD PTR [esi+6]
  0006c	89 45 8f	 mov	 DWORD PTR _lpInfo$185261[ebp+7], eax

; 1004 : 			strcat(lpInfo.chatmsg, lpResult->Text);

  0006f	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00072	66 89 4d 93	 mov	 WORD PTR _lpInfo$185261[ebp+11], cx
  00076	83 c4 18	 add	 esp, 24			; 00000018H
  00079	c6 45 8a 02	 mov	 BYTE PTR _lpInfo$185261[ebp+2], 2
  0007d	c6 45 95 21	 mov	 BYTE PTR _lpInfo$185261[ebp+13], 33 ; 00000021H
  00081	89 55 8b	 mov	 DWORD PTR _lpInfo$185261[ebp+3], edx
  00084	8b c8		 mov	 ecx, eax
$LL9@BroadCastM:
  00086	8a 10		 mov	 dl, BYTE PTR [eax]
  00088	40		 inc	 eax
  00089	84 d2		 test	 dl, dl
  0008b	75 f9		 jne	 SHORT $LL9@BroadCastM
  0008d	8d 7d 95	 lea	 edi, DWORD PTR _lpInfo$185261[ebp+13]
  00090	2b c1		 sub	 eax, ecx
  00092	8b f1		 mov	 esi, ecx
  00094	4f		 dec	 edi
$LL10@BroadCastM:
  00095	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00098	47		 inc	 edi
  00099	84 c9		 test	 cl, cl
  0009b	75 f8		 jne	 SHORT $LL10@BroadCastM
  0009d	8b c8		 mov	 ecx, eax
  0009f	c1 e9 02	 shr	 ecx, 2
  000a2	f3 a5		 rep movsd
  000a4	8b c8		 mov	 ecx, eax

; 1005 : 			DataSendAll((LPBYTE)&lpInfo, sizeof(lpInfo));

  000a6	8d 55 88	 lea	 edx, DWORD PTR _lpInfo$185261[ebp]
  000a9	83 e1 03	 and	 ecx, 3
  000ac	6a 71		 push	 113			; 00000071H
  000ae	52		 push	 edx
  000af	f3 a4		 rep movsb
  000b1	e8 00 00 00 00	 call	 ?DataSendAll@@YAXPAEH@Z	; DataSendAll
  000b6	83 c4 08	 add	 esp, 8
  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi

; 1006 : 		}
; 1007 : 		break;
; 1008 : 	}
; 1009 : 	
; 1010 : }

  000bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
$LN2@BroadCastM:

; 991  : 	{
; 992  : 	case 0:
; 993  : 		{
; 994  : 			AllSendServerMsg(&lpResult->Text[1]);

  000c9	83 c6 11	 add	 esi, 17			; 00000011H
  000cc	56		 push	 esi
  000cd	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg
  000d2	83 c4 04	 add	 esp, 4
$LN3@BroadCastM:

; 1006 : 		}
; 1007 : 		break;
; 1008 : 	}
; 1009 : 	
; 1010 : }

  000d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d8	5f		 pop	 edi
  000d9	33 cd		 xor	 ecx, ebp
  000db	5e		 pop	 esi
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
?BroadCastMessage@@YAXPAUBroadCastMessageInfo@@@Z ENDP	; BroadCastMessage
_TEXT	ENDS
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8a 5d 08	 mov	 bl, BYTE PTR ___flags$[ebp]
  0002e	f6 c3 02	 test	 bl, 2
  00031	74 3b		 je	 SHORT $LN3@vector
  00033	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00036	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  0003b	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003e	50		 push	 eax
  0003f	68 40 27 00 00	 push	 10048			; 00002740H
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0004a	f6 c3 01	 test	 bl, 1
  0004d	74 09		 je	 SHORT $LN2@vector
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00055	83 c4 04	 add	 esp, 4
$LN2@vector:
  00058	8b c7		 mov	 eax, edi
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN3@vector:
  0006e	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  00080	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00092	f6 c3 01	 test	 bl, 1
  00095	74 09		 je	 SHORT $LN1@vector
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009d	83 c4 04	 add	 esp, 4
$LN1@vector:
  000a0	8b c6		 mov	 eax, esi
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	__$ArrayPad$
PUBLIC	?JGPAccountRequest@@YAXPAUSDHP_IDPASSRESULT@@@Z	; JGPAccountRequest
EXTRN	?GCJoinResult@@YAXEH@Z:PROC			; GCJoinResult
; Function compile flags: /Ogtp
;	COMDAT ?JGPAccountRequest@@YAXPAUSDHP_IDPASSRESULT@@@Z
_TEXT	SEGMENT
_aIndex$ = -40						; size = 4
_szJN$ = -36						; size = 20
_szId$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
?JGPAccountRequest@@YAXPAUSDHP_IDPASSRESULT@@@Z PROC	; JGPAccountRequest, COMDAT

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 185  : 	char szId[11];
; 186  : 	int aIndex;
; 187  : 	char szJN[20]="";
; 188  : 	
; 189  : 	memset(szId, 0, sizeof(szId));

  00010	53		 push	 ebx
  00011	56		 push	 esi

; 194  : 
; 195  : 	switch ( lpMsg->result  )

  00012	57		 push	 edi

; 185  : 	char szId[11];
; 186  : 	int aIndex;
; 187  : 	char szJN[20]="";
; 188  : 	
; 189  : 	memset(szId, 0, sizeof(szId));

  00013	33 c0		 xor	 eax, eax
  00015	89 45 f0	 mov	 DWORD PTR _szId$[ebp], eax
  00018	89 45 f4	 mov	 DWORD PTR _szId$[ebp+4], eax
  0001b	66 89 45 f8	 mov	 WORD PTR _szId$[ebp+8], ax
  0001f	88 45 fa	 mov	 BYTE PTR _szId$[ebp+10], al
  00022	8b 75 08	 mov	 esi, DWORD PTR _lpMsg$[ebp]

; 190  : 	memcpy(szId, lpMsg->Id , sizeof(lpMsg->Id));

  00025	8b 46 06	 mov	 eax, DWORD PTR [esi+6]
  00028	8b 4e 0a	 mov	 ecx, DWORD PTR [esi+10]
  0002b	66 8b 56 0e	 mov	 dx, WORD PTR [esi+14]

; 191  : 	memcpy(szJN, lpMsg->JoominNumber , sizeof(lpMsg->JoominNumber));
; 192  : 
; 193  : 	aIndex = lpMsg->Number ;

  0002f	0f bf 5e 04	 movsx	 ebx, WORD PTR [esi+4]
  00033	89 45 f0	 mov	 DWORD PTR _szId$[ebp], eax
  00036	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00039	89 45 dc	 mov	 DWORD PTR _szJN$[ebp], eax
  0003c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003f	89 4d f4	 mov	 DWORD PTR _szId$[ebp+4], ecx
  00042	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00045	89 45 e8	 mov	 DWORD PTR _szJN$[ebp+12], eax

; 194  : 
; 195  : 	switch ( lpMsg->result  )

  00048	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  0004c	48		 dec	 eax
  0004d	66 89 55 f8	 mov	 WORD PTR _szId$[ebp+8], dx
  00051	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00054	89 4d e0	 mov	 DWORD PTR _szJN$[ebp+4], ecx
  00057	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0005a	89 55 e4	 mov	 DWORD PTR _szJN$[ebp+8], edx
  0005d	89 4d ec	 mov	 DWORD PTR _szJN$[ebp+16], ecx
  00060	89 5d d8	 mov	 DWORD PTR _aIndex$[ebp], ebx
  00063	74 09		 je	 SHORT $LN17@JGPAccount
  00065	83 e8 0e	 sub	 eax, 14			; 0000000eH
  00068	0f 85 9a 00 00
	00		 jne	 $LN14@JGPAccount
$LN17@JGPAccount:

; 196  : 	{
; 197  : 		case 1:
; 198  : 		case 15:
; 199  : 			if (gObjSetAccountLogin(aIndex, szId, lpMsg->UserNumber , lpMsg->DBNumber, szJN ) == 0 )

  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00074	8d 55 dc	 lea	 edx, DWORD PTR _szJN$[ebp]
  00077	52		 push	 edx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  0007d	52		 push	 edx
  0007e	53		 push	 ebx
  0007f	e8 00 00 00 00	 call	 ?gObjSetAccountLogin@@YAHHPADHH0@Z ; gObjSetAccountLogin
  00084	83 c4 14	 add	 esp, 20			; 00000014H

; 200  : 			{
; 201  : 				GJPAccountFail(aIndex, szId, lpMsg->DBNumber , lpMsg->UserNumber  );

  00087	8d 55 f0	 lea	 edx, DWORD PTR _szId$[ebp]
  0008a	85 c0		 test	 eax, eax
  0008c	75 18		 jne	 SHORT $LN16@JGPAccount
  0008e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00091	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00094	50		 push	 eax
  00095	51		 push	 ecx
  00096	52		 push	 edx
  00097	53		 push	 ebx
  00098	e8 00 00 00 00	 call	 ?GJPAccountFail@@YAXFPADHH@Z ; GJPAccountFail
  0009d	83 c4 10	 add	 esp, 16			; 00000010H

; 202  : 				lpMsg->result  = 4;

  000a0	c6 46 03 04	 mov	 BYTE PTR [esi+3], 4

; 203  : 			}
; 204  : 			else

  000a4	eb 35		 jmp	 SHORT $LN15@JGPAccount
$LN16@JGPAccount:

; 205  : 			{	
; 206  : 				LogAddTD(lMsg.Get(MSGGET(1, 211)), gObj[aIndex].Ip_addr, szId, lpMsg->UserNumber , lpMsg->DBNumber );

  000a6	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000a9	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000ac	50		 push	 eax
  000ad	8b c3		 mov	 eax, ebx
  000af	69 c0 40 27 00
	00		 imul	 eax, 10048		; 00002740H
  000b5	51		 push	 ecx
  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bc	52		 push	 edx
  000bd	8d 54 08 1c	 lea	 edx, DWORD PTR [eax+ecx+28]
  000c1	52		 push	 edx
  000c2	68 d3 01 00 00	 push	 467			; 000001d3H
  000c7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000cc	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000d1	50		 push	 eax
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000d8	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@JGPAccount:

; 207  : 			}
; 208  : 
; 209  : 			if ( lpMsg->UserNumber  == 0 && lpMsg->DBNumber  == 0)

  000db	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000df	75 27		 jne	 SHORT $LN14@JGPAccount
  000e1	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  000e5	75 21		 jne	 SHORT $LN14@JGPAccount

; 210  : 			{
; 211  : 				LogAddTD(lMsg.Get(MSGGET(1, 212)), szId, lpMsg->UserNumber , lpMsg->DBNumber );

  000e7	6a 00		 push	 0
  000e9	6a 00		 push	 0
  000eb	8d 45 f0	 lea	 eax, DWORD PTR _szId$[ebp]
  000ee	50		 push	 eax
  000ef	68 d4 01 00 00	 push	 468			; 000001d4H
  000f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000f9	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000fe	50		 push	 eax
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00105	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@JGPAccount:

; 212  : 			}
; 213  : 	}
; 214  : #if (ENABLE_CUSTOM_OFFLINETRADE==1)
; 215  : 
; 216  : 	if( lpMsg->result == 6 )

  00108	80 7e 03 06	 cmp	 BYTE PTR [esi+3], 6
  0010c	0f 85 84 00 00
	00		 jne	 $LN13@JGPAccount

; 217  : 	{
; 218  : 		for (int n=OBJ_STARTUSERINDEX;n<OBJMAX; n++)

  00112	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00118	bb 04 29 00 00	 mov	 ebx, 10500		; 00002904H
  0011d	81 c7 52 dd 49
	06		 add	 edi, 105504082		; 0649dd52H
$LL12@JGPAccount:

; 219  : 		{
; 220  : 			if ( gObj[n].Connected >= PLAYER_PLAYING)

  00123	83 7f b2 03	 cmp	 DWORD PTR [edi-78], 3
  00127	7c 35		 jl	 SHORT $LN11@JGPAccount

; 221  : 			{
; 222  : 				if ( gObj[n].AccountID[0] == *szId )

  00129	8a 4d f0	 mov	 cl, BYTE PTR _szId$[ebp]
  0012c	38 0f		 cmp	 BYTE PTR [edi], cl
  0012e	75 2e		 jne	 SHORT $LN11@JGPAccount

; 223  : 				{
; 224  : 					if ( strcmp(&gObj[n].AccountID[0] , szId) == 0)

  00130	8d 4d f0	 lea	 ecx, DWORD PTR _szId$[ebp]
  00133	8b c7		 mov	 eax, edi
$LL25@JGPAccount:
  00135	8a 10		 mov	 dl, BYTE PTR [eax]
  00137	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00139	75 1a		 jne	 SHORT $LN26@JGPAccount
  0013b	84 d2		 test	 dl, dl
  0013d	74 12		 je	 SHORT $LN27@JGPAccount
  0013f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00142	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00145	75 0e		 jne	 SHORT $LN26@JGPAccount
  00147	83 c0 02	 add	 eax, 2
  0014a	83 c1 02	 add	 ecx, 2
  0014d	84 d2		 test	 dl, dl
  0014f	75 e4		 jne	 SHORT $LL25@JGPAccount
$LN27@JGPAccount:
  00151	33 c0		 xor	 eax, eax
  00153	eb 05		 jmp	 SHORT $LN28@JGPAccount
$LN26@JGPAccount:
  00155	1b c0		 sbb	 eax, eax
  00157	83 d8 ff	 sbb	 eax, -1
$LN28@JGPAccount:
  0015a	85 c0		 test	 eax, eax
  0015c	74 11		 je	 SHORT $LN23@JGPAccount
$LN11@JGPAccount:

; 217  : 	{
; 218  : 		for (int n=OBJ_STARTUSERINDEX;n<OBJMAX; n++)

  0015e	43		 inc	 ebx
  0015f	81 c7 40 27 00
	00		 add	 edi, 10048		; 00002740H
  00165	81 fb ec 2c 00
	00		 cmp	 ebx, 11500		; 00002cecH
  0016b	7c b6		 jl	 SHORT $LL12@JGPAccount

; 223  : 				{
; 224  : 					if ( strcmp(&gObj[n].AccountID[0] , szId) == 0)

  0016d	eb 20		 jmp	 SHORT $LN6@JGPAccount
$LN23@JGPAccount:

; 225  : 					{
; 226  : 						if( gObj[n].bOffTrade )

  0016f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00174	8b d3		 mov	 edx, ebx
  00176	69 d2 40 27 00
	00		 imul	 edx, 10048		; 00002740H
  0017c	80 bc 02 31 27
	00 00 00	 cmp	 BYTE PTR [edx+eax+10033], 0
  00184	74 09		 je	 SHORT $LN6@JGPAccount

; 227  : 						{
; 228  : 							gObjDel(n);

  00186	53		 push	 ebx
  00187	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0018c	83 c4 04	 add	 esp, 4
$LN6@JGPAccount:

; 229  : 						}
; 230  : 						break;
; 231  : 					}
; 232  : 				}
; 233  : 			}
; 234  : 		}
; 235  : 
; 236  : 		lpMsg->result = 3;

  0018f	8b 5d d8	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00192	c6 46 03 03	 mov	 BYTE PTR [esi+3], 3
$LN13@JGPAccount:

; 237  : 	}
; 238  : #else
; 239  : 
; 240  : 	if( lpMsg->result == 6 )
; 241  : 		lpMsg->result = 3;
; 242  : 
; 243  : #endif
; 244  : 
; 245  : 	if ( lpMsg->result == 0 )

  00196	80 7e 03 00	 cmp	 BYTE PTR [esi+3], 0
  0019a	75 04		 jne	 SHORT $LN5@JGPAccount

; 246  : 		lpMsg->result = 2;

  0019c	c6 46 03 02	 mov	 BYTE PTR [esi+3], 2
$LN5@JGPAccount:

; 247  : 
; 248  : 	if ( lpMsg->result  == 15 )

  001a0	80 7e 03 0f	 cmp	 BYTE PTR [esi+3], 15	; 0000000fH
  001a4	75 1a		 jne	 SHORT $LN4@JGPAccount

; 249  : 	{
; 250  : 		lpMsg->result  = 1;
; 251  : 		gObj[aIndex].m_cAccountItemBlock = 1;

  001a6	8b cb		 mov	 ecx, ebx
  001a8	69 c9 40 27 00
	00		 imul	 ecx, 10048		; 00002740H
  001ae	c6 46 03 01	 mov	 BYTE PTR [esi+3], 1
  001b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b8	c6 84 11 c4 01
	00 00 01	 mov	 BYTE PTR [ecx+edx+452], 1
$LN4@JGPAccount:

; 252  : 	}
; 253  : 	
; 254  : 	gObj[aIndex].LoginMsgSnd = 0;

  001c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c5	8b fb		 mov	 edi, ebx
  001c7	69 ff 40 27 00
	00		 imul	 edi, 10048		; 00002740H
  001cd	c6 44 07 0a 00	 mov	 BYTE PTR [edi+eax+10], 0

; 255  : 
; 256  : 	if (gObj[aIndex].LoginMsgCount >= 3 )

  001d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d8	80 7c 0f 0b 03	 cmp	 BYTE PTR [edi+ecx+11], 3
  001dd	7c 04		 jl	 SHORT $LN3@JGPAccount

; 257  : 	{
; 258  : 		lpMsg->result = 8;

  001df	c6 46 03 08	 mov	 BYTE PTR [esi+3], 8
$LN3@JGPAccount:

; 259  : 	}
; 260  : 
; 261  : 	GCJoinResult(lpMsg->result , aIndex);

  001e3	0f b6 56 03	 movzx	 edx, BYTE PTR [esi+3]
  001e7	53		 push	 ebx
  001e8	52		 push	 edx
  001e9	e8 00 00 00 00	 call	 ?GCJoinResult@@YAXEH@Z	; GCJoinResult
  001ee	83 c4 08	 add	 esp, 8

; 262  : 
; 263  : 	if ( lpMsg->result  != 1 )

  001f1	80 7e 03 01	 cmp	 BYTE PTR [esi+3], 1
  001f5	74 15		 je	 SHORT $LN1@JGPAccount

; 264  : 	{
; 265  : 		if ( gObj[aIndex].LoginMsgCount > 3 )

  001f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001fc	80 7c 07 0b 03	 cmp	 BYTE PTR [edi+eax+11], 3
  00201	7e 09		 jle	 SHORT $LN1@JGPAccount

; 266  : 		{
; 267  : 			CloseClient(aIndex);

  00203	53		 push	 ebx
  00204	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00209	83 c4 04	 add	 esp, 4
$LN1@JGPAccount:

; 268  : 		}
; 269  : 	}
; 270  : }

  0020c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020f	5f		 pop	 edi
  00210	5e		 pop	 esi
  00211	33 cd		 xor	 ecx, ebp
  00213	5b		 pop	 ebx
  00214	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00219	8b e5		 mov	 esp, ebp
  0021b	5d		 pop	 ebp
  0021c	c3		 ret	 0
?JGPAccountRequest@@YAXPAUSDHP_IDPASSRESULT@@@Z ENDP	; JGPAccountRequest
_TEXT	ENDS
PUBLIC	??_C@_05GCIPIGEI@Debug?$AA@			; `string'
PUBLIC	??_C@_0M@BCDLCFLL@?4?2Log?2Debug?$AA@		; `string'
PUBLIC	?SProtocolCore@@YAXEPAEH@Z			; SProtocolCore
EXTRN	?Output@CLogToFile@@QAAXPADZZ:PROC		; CLogToFile::Output
EXTRN	??0CLogToFile@@QAE@QAD0H@Z:PROC			; CLogToFile::CLogToFile
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_C@_05GCIPIGEI@Debug?$AA@
CONST	SEGMENT
??_C@_05GCIPIGEI@Debug?$AA@ DB 'Debug', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BCDLCFLL@?4?2Log?2Debug?$AA@
CONST	SEGMENT
??_C@_0M@BCDLCFLL@?4?2Log?2Debug?$AA@ DB '.\Log\Debug', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SProtocolCore@@YAXEPAEH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SProtocolCore@@YAXEPAEH@Z$0
__ehfuncinfo$?SProtocolCore@@YAXEPAEH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SProtocolCore@@YAXEPAEH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?SProtocolCore@@YAXEPAEH@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T190150 = 8						; size = 4
_protoNum$ = 8						; size = 1
_aRecv$ = 12						; size = 4
_aLen$ = 16						; size = 4
?SProtocolCore@@YAXEPAEH@Z PROC				; SProtocolCore, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SProtocolCore@@YAXEPAEH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 29   : 
; 30   : 	#ifdef TRACE_PROTOCOL
; 31   : 		LogAddHeadHex("JOIN_SERVER", aRecv, aLen);
; 32   : 	#endif
; 33   : 
; 34   : 	switch ( protoNum )

  00024	0f b6 45 08	 movzx	 eax, BYTE PTR _protoNum$[ebp]
  00028	3d cd 00 00 00	 cmp	 eax, 205		; 000000cdH
  0002d	0f 87 43 02 00
	00		 ja	 $LN18@SProtocolC
  00033	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN30@SProtocolC[eax]
  0003a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN33@SProtocolC[eax*4]
$LN17@SProtocolC:

; 35   : 	{
; 36   : 		case 0x00:
; 37   : 			JGServerLoginResult((SDHP_RESULT *)aRecv);

  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ?JGServerLoginResult@@YAXPAUSDHP_RESULT@@@Z ; JGServerLoginResult

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  0004a	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN16@SProtocolC:

; 38   : 			break;
; 39   : 
; 40   : 		case 0x01:
; 41   : 			JGPAccountRequest((SDHP_IDPASSRESULT *)aRecv);

  0005e	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 ?JGPAccountRequest@@YAXPAUSDHP_IDPASSRESULT@@@Z ; JGPAccountRequest

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00067	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
$LN15@SProtocolC:

; 42   : 			break;
; 43   : 
; 44   : 		case 0x06:
; 45   : 			{
; 46   : 			//	if(aRecv == NULL)
; 47   : 			//	{
; 48   : 			//	}
; 49   : 
; 50   : 				SDHP_BILLSEARCH_RESULT* data = (SDHP_BILLSEARCH_RESULT *) aRecv;
; 51   : 
; 52   : 				CLogToFile* logger	=	new	CLogToFile(LOG_NAME_DEBUG, LOG_PATH_DEBUG, TRUE);

  0007b	68 28 02 01 00	 push	 66088			; 00010228H
  00080	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00085	83 c4 04	 add	 esp, 4
  00088	89 45 08	 mov	 DWORD PTR $T190150[ebp], eax
  0008b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00092	85 c0		 test	 eax, eax
  00094	74 17		 je	 SHORT $LN22@SProtocolC
  00096	6a 01		 push	 1
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BCDLCFLL@?4?2Log?2Debug?$AA@
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_05GCIPIGEI@Debug?$AA@
  000a2	8b c8		 mov	 ecx, eax
  000a4	e8 00 00 00 00	 call	 ??0CLogToFile@@QAE@QAD0H@Z ; CLogToFile::CLogToFile
  000a9	8b f0		 mov	 esi, eax
  000ab	eb 02		 jmp	 SHORT $LN23@SProtocolC
$LN22@SProtocolC:
  000ad	33 f6		 xor	 esi, esi
$LN23@SProtocolC:

; 53   : 				logger->Output((char*) data);

  000af	8b 7d 0c	 mov	 edi, DWORD PTR _aRecv$[ebp]
  000b2	57		 push	 edi
  000b3	56		 push	 esi
  000b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bb	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output
  000c0	83 c4 08	 add	 esp, 8

; 54   : 				delete logger;

  000c3	85 f6		 test	 esi, esi
  000c5	74 10		 je	 SHORT $LN27@SProtocolC
  000c7	8b ce		 mov	 ecx, esi
  000c9	e8 00 00 00 00	 call	 ??1CLogToFile@@QAE@XZ	; CLogToFile::~CLogToFile
  000ce	56		 push	 esi
  000cf	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d4	83 c4 04	 add	 esp, 4
$LN27@SProtocolC:

; 55   : 				GJPBillCeckRecv((SDHP_BILLSEARCH_RESULT *) aRecv);

  000d7	57		 push	 edi
  000d8	e8 00 00 00 00	 call	 ?GJPBillCeckRecv@@YAXPAUSDHP_BILLSEARCH_RESULT@@@Z ; GJPBillCeckRecv

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  000dd	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  000e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ea	59		 pop	 ecx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
$LN14@SProtocolC:

; 56   : 			}
; 57   : 			break;
; 58   : 
; 59   : 		case 0x07:
; 60   : 			GJPUserKillRecv((SDHP_BILLKILLUSER *)aRecv);

  000f1	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ?GJPUserKillRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z ; GJPUserKillRecv

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  000fa	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  000fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00100	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00107	59		 pop	 ecx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
$LN13@SProtocolC:

; 61   : 			break;
; 62   : 
; 63   : 		case 0x08:
; 64   : 			JGOtherJoin((SDHP_OTHERJOINMSG *)aRecv);

  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00111	51		 push	 ecx
  00112	e8 00 00 00 00	 call	 ?JGOtherJoin@@YAXPAUSDHP_OTHERJOINMSG@@@Z ; JGOtherJoin

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00117	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  0011a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00124	59		 pop	 ecx
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
$LN12@SProtocolC:

; 65   : 			break;
; 66   : 
; 67   : 		case 0x09:
; 68   : 			GJPUserDisconnectRecv((SDHP_BILLKILLUSER *)aRecv);

  0012b	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  0012e	52		 push	 edx
  0012f	e8 00 00 00 00	 call	 ?GJPUserDisconnectRecv@@YAXPAUSDHP_BILLKILLUSER@@@Z ; GJPUserDisconnectRecv

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00134	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  00137	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00141	59		 pop	 ecx
  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
$LN11@SProtocolC:

; 69   : 			break;
; 70   : 
; 71   : 		case 0x20:
; 72   : 			JGPExitCodeRecv((SDHP_EXITMSG *)aRecv);

  00148	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 ?JGPExitCodeRecv@@YAXPAUSDHP_EXITMSG@@@Z ; JGPExitCodeRecv

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00151	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  00154	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00157	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015e	59		 pop	 ecx
  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
$LN10@SProtocolC:

; 73   : 			break;
; 74   : 
; 75   : 		case 0x60:
; 76   : 			JGPEventStart((SDHP_EVENTSTART *)aRecv);

  00165	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00168	51		 push	 ecx
  00169	e8 00 00 00 00	 call	 ?JGPEventStart@@YAXPAUSDHP_EVENTSTART@@@Z ; JGPEventStart

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  0016e	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  00171	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00174	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017b	59		 pop	 ecx
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c3		 ret	 0
$LN9@SProtocolC:

; 77   : 			break;
; 78   : 
; 79   : 		case 0x61:
; 80   : 			JGPEventControl((SDHP_EVENTCONTROL *)aRecv);

  00182	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00185	52		 push	 edx
  00186	e8 00 00 00 00	 call	 ?JGPEventControl@@YAXPAUSDHP_EVENTCONTROL@@@Z ; JGPEventControl

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  0018b	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  0018e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00191	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00198	59		 pop	 ecx
  00199	5f		 pop	 edi
  0019a	5e		 pop	 esi
  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
$LN8@SProtocolC:

; 81   : 			break;
; 82   : 
; 83   : 		case 0x62:
; 84   : 			JGPOptionControl((SDHP_OPTIONCONTROL *)aRecv);

  0019f	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 ?JGPOptionControl@@YAXPAUSDHP_OPTIONCONTROL@@@Z ; JGPOptionControl

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  001a8	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  001ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b5	59		 pop	 ecx
  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
$LN7@SProtocolC:

; 85   : 			break;
; 86   : 
; 87   : 		case 0x63:
; 88   : 			JGPSendMail((PMSG_JG_MEMO_SEND *)aRecv);

  001bc	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  001bf	51		 push	 ecx
  001c0	e8 00 00 00 00	 call	 ?JGPSendMail@@YAXPAUPMSG_JG_MEMO_SEND@@@Z ; JGPSendMail

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  001c5	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  001c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d2	59		 pop	 ecx
  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi
  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c3		 ret	 0
$LN6@SProtocolC:

; 89   : 			break;
; 90   : 
; 91   : 		case 0x30:
; 92   : 			LoveHeartEventRecv((SDHP_LOVEHEARTEVENT_RESULT *)aRecv);

  001d9	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  001dc	52		 push	 edx
  001dd	e8 00 00 00 00	 call	 ?LoveHeartEventRecv@@YAXPAUSDHP_LOVEHEARTEVENT_RESULT@@@Z ; LoveHeartEventRecv

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  001e2	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  001e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ef	59		 pop	 ecx
  001f0	5f		 pop	 edi
  001f1	5e		 pop	 esi
  001f2	8b e5		 mov	 esp, ebp
  001f4	5d		 pop	 ebp
  001f5	c3		 ret	 0
$LN5@SProtocolC:

; 93   : 			break;
; 94   : 
; 95   : 		case 0x40:
; 96   : 			AllNoticeRecv((SDHP_NOTICE *)aRecv);

  001f6	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 ?AllNoticeRecv@@YAXPAUSDHP_NOTICE@@@Z ; AllNoticeRecv

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  001ff	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  00202	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00205	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020c	59		 pop	 ecx
  0020d	5f		 pop	 edi
  0020e	5e		 pop	 esi
  0020f	8b e5		 mov	 esp, ebp
  00211	5d		 pop	 ebp
  00212	c3		 ret	 0
$LN4@SProtocolC:

; 97   : 			break;
; 98   : 
; 99   : 		case 0x41:
; 100  : 			UserNoticeRecv((SDHP_USER_NOTICE *)aRecv);

  00213	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  00216	51		 push	 ecx
  00217	e8 00 00 00 00	 call	 ?UserNoticeRecv@@YAXPAUSDHP_USER_NOTICE@@@Z ; UserNoticeRecv

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  0021c	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  0021f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00222	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00229	59		 pop	 ecx
  0022a	5f		 pop	 edi
  0022b	5e		 pop	 esi
  0022c	8b e5		 mov	 esp, ebp
  0022e	5d		 pop	 ebp
  0022f	c3		 ret	 0
$LN3@SProtocolC:

; 101  : 			break;
; 102  : 
; 103  : 		case 0x7A:
; 104  : 			JGAnsMapSvrMove((PMSG_ANS_MAPSVRMOVE *)aRecv);

  00230	8b 55 0c	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00233	52		 push	 edx
  00234	e8 00 00 00 00	 call	 ?JGAnsMapSvrMove@@YAXPAUPMSG_ANS_MAPSVRMOVE@@@Z ; JGAnsMapSvrMove

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00239	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  0023c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0023f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00246	59		 pop	 ecx
  00247	5f		 pop	 edi
  00248	5e		 pop	 esi
  00249	8b e5		 mov	 esp, ebp
  0024b	5d		 pop	 ebp
  0024c	c3		 ret	 0
$LN2@SProtocolC:

; 105  : 			break;
; 106  : 
; 107  : 		case 0x7B:
; 108  : 			JGAnsMapSvrAuth((PMSG_ANS_MAPSVRAUTH *)aRecv);

  0024d	8b 45 0c	 mov	 eax, DWORD PTR _aRecv$[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?JGAnsMapSvrAuth@@YAXPAUPMSG_ANS_MAPSVRAUTH@@@Z ; JGAnsMapSvrAuth

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  00256	83 c4 04	 add	 esp, 4

; 113  : 			break;
; 114  : 	}
; 115  : }

  00259	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0025c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00263	59		 pop	 ecx
  00264	5f		 pop	 edi
  00265	5e		 pop	 esi
  00266	8b e5		 mov	 esp, ebp
  00268	5d		 pop	 ebp
  00269	c3		 ret	 0
$LN1@SProtocolC:

; 109  : 			break;
; 110  : 
; 111  : 		case 0xCD:
; 112  : 			BroadCastMessage((BroadCastMessageInfo*)aRecv);

  0026a	8b 4d 0c	 mov	 ecx, DWORD PTR _aRecv$[ebp]
  0026d	51		 push	 ecx
  0026e	e8 00 00 00 00	 call	 ?BroadCastMessage@@YAXPAUBroadCastMessageInfo@@@Z ; BroadCastMessage
  00273	83 c4 04	 add	 esp, 4
$LN18@SProtocolC:

; 113  : 			break;
; 114  : 	}
; 115  : }

  00276	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00279	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00280	59		 pop	 ecx
  00281	5f		 pop	 edi
  00282	5e		 pop	 esi
  00283	8b e5		 mov	 esp, ebp
  00285	5d		 pop	 ebp
  00286	c3		 ret	 0
  00287	90		 npad	 1
$LN33@SProtocolC:
  00288	00 00 00 00	 DD	 $LN17@SProtocolC
  0028c	00 00 00 00	 DD	 $LN16@SProtocolC
  00290	00 00 00 00	 DD	 $LN15@SProtocolC
  00294	00 00 00 00	 DD	 $LN14@SProtocolC
  00298	00 00 00 00	 DD	 $LN13@SProtocolC
  0029c	00 00 00 00	 DD	 $LN12@SProtocolC
  002a0	00 00 00 00	 DD	 $LN11@SProtocolC
  002a4	00 00 00 00	 DD	 $LN6@SProtocolC
  002a8	00 00 00 00	 DD	 $LN5@SProtocolC
  002ac	00 00 00 00	 DD	 $LN4@SProtocolC
  002b0	00 00 00 00	 DD	 $LN10@SProtocolC
  002b4	00 00 00 00	 DD	 $LN9@SProtocolC
  002b8	00 00 00 00	 DD	 $LN8@SProtocolC
  002bc	00 00 00 00	 DD	 $LN7@SProtocolC
  002c0	00 00 00 00	 DD	 $LN3@SProtocolC
  002c4	00 00 00 00	 DD	 $LN2@SProtocolC
  002c8	00 00 00 00	 DD	 $LN1@SProtocolC
  002cc	00 00 00 00	 DD	 $LN18@SProtocolC
$LN30@SProtocolC:
  002d0	00		 DB	 0
  002d1	01		 DB	 1
  002d2	11		 DB	 17			; 00000011H
  002d3	11		 DB	 17			; 00000011H
  002d4	11		 DB	 17			; 00000011H
  002d5	11		 DB	 17			; 00000011H
  002d6	02		 DB	 2
  002d7	03		 DB	 3
  002d8	04		 DB	 4
  002d9	05		 DB	 5
  002da	11		 DB	 17			; 00000011H
  002db	11		 DB	 17			; 00000011H
  002dc	11		 DB	 17			; 00000011H
  002dd	11		 DB	 17			; 00000011H
  002de	11		 DB	 17			; 00000011H
  002df	11		 DB	 17			; 00000011H
  002e0	11		 DB	 17			; 00000011H
  002e1	11		 DB	 17			; 00000011H
  002e2	11		 DB	 17			; 00000011H
  002e3	11		 DB	 17			; 00000011H
  002e4	11		 DB	 17			; 00000011H
  002e5	11		 DB	 17			; 00000011H
  002e6	11		 DB	 17			; 00000011H
  002e7	11		 DB	 17			; 00000011H
  002e8	11		 DB	 17			; 00000011H
  002e9	11		 DB	 17			; 00000011H
  002ea	11		 DB	 17			; 00000011H
  002eb	11		 DB	 17			; 00000011H
  002ec	11		 DB	 17			; 00000011H
  002ed	11		 DB	 17			; 00000011H
  002ee	11		 DB	 17			; 00000011H
  002ef	11		 DB	 17			; 00000011H
  002f0	06		 DB	 6
  002f1	11		 DB	 17			; 00000011H
  002f2	11		 DB	 17			; 00000011H
  002f3	11		 DB	 17			; 00000011H
  002f4	11		 DB	 17			; 00000011H
  002f5	11		 DB	 17			; 00000011H
  002f6	11		 DB	 17			; 00000011H
  002f7	11		 DB	 17			; 00000011H
  002f8	11		 DB	 17			; 00000011H
  002f9	11		 DB	 17			; 00000011H
  002fa	11		 DB	 17			; 00000011H
  002fb	11		 DB	 17			; 00000011H
  002fc	11		 DB	 17			; 00000011H
  002fd	11		 DB	 17			; 00000011H
  002fe	11		 DB	 17			; 00000011H
  002ff	11		 DB	 17			; 00000011H
  00300	07		 DB	 7
  00301	11		 DB	 17			; 00000011H
  00302	11		 DB	 17			; 00000011H
  00303	11		 DB	 17			; 00000011H
  00304	11		 DB	 17			; 00000011H
  00305	11		 DB	 17			; 00000011H
  00306	11		 DB	 17			; 00000011H
  00307	11		 DB	 17			; 00000011H
  00308	11		 DB	 17			; 00000011H
  00309	11		 DB	 17			; 00000011H
  0030a	11		 DB	 17			; 00000011H
  0030b	11		 DB	 17			; 00000011H
  0030c	11		 DB	 17			; 00000011H
  0030d	11		 DB	 17			; 00000011H
  0030e	11		 DB	 17			; 00000011H
  0030f	11		 DB	 17			; 00000011H
  00310	08		 DB	 8
  00311	09		 DB	 9
  00312	11		 DB	 17			; 00000011H
  00313	11		 DB	 17			; 00000011H
  00314	11		 DB	 17			; 00000011H
  00315	11		 DB	 17			; 00000011H
  00316	11		 DB	 17			; 00000011H
  00317	11		 DB	 17			; 00000011H
  00318	11		 DB	 17			; 00000011H
  00319	11		 DB	 17			; 00000011H
  0031a	11		 DB	 17			; 00000011H
  0031b	11		 DB	 17			; 00000011H
  0031c	11		 DB	 17			; 00000011H
  0031d	11		 DB	 17			; 00000011H
  0031e	11		 DB	 17			; 00000011H
  0031f	11		 DB	 17			; 00000011H
  00320	11		 DB	 17			; 00000011H
  00321	11		 DB	 17			; 00000011H
  00322	11		 DB	 17			; 00000011H
  00323	11		 DB	 17			; 00000011H
  00324	11		 DB	 17			; 00000011H
  00325	11		 DB	 17			; 00000011H
  00326	11		 DB	 17			; 00000011H
  00327	11		 DB	 17			; 00000011H
  00328	11		 DB	 17			; 00000011H
  00329	11		 DB	 17			; 00000011H
  0032a	11		 DB	 17			; 00000011H
  0032b	11		 DB	 17			; 00000011H
  0032c	11		 DB	 17			; 00000011H
  0032d	11		 DB	 17			; 00000011H
  0032e	11		 DB	 17			; 00000011H
  0032f	11		 DB	 17			; 00000011H
  00330	0a		 DB	 10			; 0000000aH
  00331	0b		 DB	 11			; 0000000bH
  00332	0c		 DB	 12			; 0000000cH
  00333	0d		 DB	 13			; 0000000dH
  00334	11		 DB	 17			; 00000011H
  00335	11		 DB	 17			; 00000011H
  00336	11		 DB	 17			; 00000011H
  00337	11		 DB	 17			; 00000011H
  00338	11		 DB	 17			; 00000011H
  00339	11		 DB	 17			; 00000011H
  0033a	11		 DB	 17			; 00000011H
  0033b	11		 DB	 17			; 00000011H
  0033c	11		 DB	 17			; 00000011H
  0033d	11		 DB	 17			; 00000011H
  0033e	11		 DB	 17			; 00000011H
  0033f	11		 DB	 17			; 00000011H
  00340	11		 DB	 17			; 00000011H
  00341	11		 DB	 17			; 00000011H
  00342	11		 DB	 17			; 00000011H
  00343	11		 DB	 17			; 00000011H
  00344	11		 DB	 17			; 00000011H
  00345	11		 DB	 17			; 00000011H
  00346	11		 DB	 17			; 00000011H
  00347	11		 DB	 17			; 00000011H
  00348	11		 DB	 17			; 00000011H
  00349	11		 DB	 17			; 00000011H
  0034a	0e		 DB	 14			; 0000000eH
  0034b	0f		 DB	 15			; 0000000fH
  0034c	11		 DB	 17			; 00000011H
  0034d	11		 DB	 17			; 00000011H
  0034e	11		 DB	 17			; 00000011H
  0034f	11		 DB	 17			; 00000011H
  00350	11		 DB	 17			; 00000011H
  00351	11		 DB	 17			; 00000011H
  00352	11		 DB	 17			; 00000011H
  00353	11		 DB	 17			; 00000011H
  00354	11		 DB	 17			; 00000011H
  00355	11		 DB	 17			; 00000011H
  00356	11		 DB	 17			; 00000011H
  00357	11		 DB	 17			; 00000011H
  00358	11		 DB	 17			; 00000011H
  00359	11		 DB	 17			; 00000011H
  0035a	11		 DB	 17			; 00000011H
  0035b	11		 DB	 17			; 00000011H
  0035c	11		 DB	 17			; 00000011H
  0035d	11		 DB	 17			; 00000011H
  0035e	11		 DB	 17			; 00000011H
  0035f	11		 DB	 17			; 00000011H
  00360	11		 DB	 17			; 00000011H
  00361	11		 DB	 17			; 00000011H
  00362	11		 DB	 17			; 00000011H
  00363	11		 DB	 17			; 00000011H
  00364	11		 DB	 17			; 00000011H
  00365	11		 DB	 17			; 00000011H
  00366	11		 DB	 17			; 00000011H
  00367	11		 DB	 17			; 00000011H
  00368	11		 DB	 17			; 00000011H
  00369	11		 DB	 17			; 00000011H
  0036a	11		 DB	 17			; 00000011H
  0036b	11		 DB	 17			; 00000011H
  0036c	11		 DB	 17			; 00000011H
  0036d	11		 DB	 17			; 00000011H
  0036e	11		 DB	 17			; 00000011H
  0036f	11		 DB	 17			; 00000011H
  00370	11		 DB	 17			; 00000011H
  00371	11		 DB	 17			; 00000011H
  00372	11		 DB	 17			; 00000011H
  00373	11		 DB	 17			; 00000011H
  00374	11		 DB	 17			; 00000011H
  00375	11		 DB	 17			; 00000011H
  00376	11		 DB	 17			; 00000011H
  00377	11		 DB	 17			; 00000011H
  00378	11		 DB	 17			; 00000011H
  00379	11		 DB	 17			; 00000011H
  0037a	11		 DB	 17			; 00000011H
  0037b	11		 DB	 17			; 00000011H
  0037c	11		 DB	 17			; 00000011H
  0037d	11		 DB	 17			; 00000011H
  0037e	11		 DB	 17			; 00000011H
  0037f	11		 DB	 17			; 00000011H
  00380	11		 DB	 17			; 00000011H
  00381	11		 DB	 17			; 00000011H
  00382	11		 DB	 17			; 00000011H
  00383	11		 DB	 17			; 00000011H
  00384	11		 DB	 17			; 00000011H
  00385	11		 DB	 17			; 00000011H
  00386	11		 DB	 17			; 00000011H
  00387	11		 DB	 17			; 00000011H
  00388	11		 DB	 17			; 00000011H
  00389	11		 DB	 17			; 00000011H
  0038a	11		 DB	 17			; 00000011H
  0038b	11		 DB	 17			; 00000011H
  0038c	11		 DB	 17			; 00000011H
  0038d	11		 DB	 17			; 00000011H
  0038e	11		 DB	 17			; 00000011H
  0038f	11		 DB	 17			; 00000011H
  00390	11		 DB	 17			; 00000011H
  00391	11		 DB	 17			; 00000011H
  00392	11		 DB	 17			; 00000011H
  00393	11		 DB	 17			; 00000011H
  00394	11		 DB	 17			; 00000011H
  00395	11		 DB	 17			; 00000011H
  00396	11		 DB	 17			; 00000011H
  00397	11		 DB	 17			; 00000011H
  00398	11		 DB	 17			; 00000011H
  00399	11		 DB	 17			; 00000011H
  0039a	11		 DB	 17			; 00000011H
  0039b	11		 DB	 17			; 00000011H
  0039c	11		 DB	 17			; 00000011H
  0039d	10		 DB	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SProtocolCore@@YAXEPAEH@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR $T190150[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SProtocolCore@@YAXEPAEH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SProtocolCore@@YAXEPAEH@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SProtocolCore@@YAXEPAEH@Z ENDP				; SProtocolCore
END
