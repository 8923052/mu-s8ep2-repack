; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\TNotice.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1OBJECTSTRUCT@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0
__ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1OBJECTSTRUCT@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1OBJECTSTRUCT@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0003b	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00041	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1OBJECTSTRUCT@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??1OBJECTSTRUCT@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1OBJECTSTRUCT@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	?_ARGB@@YAKEEEE@Z				; _ARGB
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\tnotice.h
;	COMDAT ?_ARGB@@YAKEEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_r$ = 12						; size = 1
_g$ = 16						; size = 1
_b$ = 20						; size = 1
?_ARGB@@YAKEEEE@Z PROC					; _ARGB, COMDAT

; 9    : __inline DWORD _ARGB(BYTE a, BYTE r, BYTE g, BYTE b){ return a*16777216 + b*65536 + g*256 + r;}; // in tnotice.h : line 8

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _a$[ebp]
  00007	0f b6 4d 14	 movzx	 ecx, BYTE PTR _b$[ebp]
  0000b	0f b6 55 10	 movzx	 edx, BYTE PTR _g$[ebp]
  0000f	c1 e0 08	 shl	 eax, 8
  00012	03 c1		 add	 eax, ecx
  00014	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _r$[ebp]
  00018	c1 e0 08	 shl	 eax, 8
  0001b	03 c2		 add	 eax, edx
  0001d	c1 e0 08	 shl	 eax, 8
  00020	03 c1		 add	 eax, ecx
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_ARGB@@YAKEEEE@Z ENDP					; _ARGB
_TEXT	ENDS
PUBLIC	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z		; TNotice::MakeNoticeMsg
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	__imp__wsprintfA:PROC
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\tnotice.cpp
;	COMDAT ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z
_TEXT	SEGMENT
_lpNotice$ = 8						; size = 4
_btType$ = 12						; size = 1
_szNoticeMsg$ = 16					; size = 4
?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z PROC		; TNotice::MakeNoticeMsg, COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 11   : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *)lpNotice;
; 12   : 	pNotice->type  = btType;
; 13   : 
; 14   : #ifdef GS_UNICODE
; 15   : 	unsigned char szTempMsg[4096]={0};
; 16   : 	memset( pNotice->szNoticeMessage, 0, sizeof(pNotice->szNoticeMessage));
; 17   : 	MultiByteToWideChar( 1258, 0, (char*)szNoticeMsg,  strlen((char*)szNoticeMsg), (unsigned short*)szTempMsg, sizeof(szTempMsg) );
; 18   : 	memcpy(pNotice->szNoticeMessage, szTempMsg, sizeof(pNotice->szNoticeMessage));
; 19   : 	pNotice->szNoticeMessage[254]=0;
; 20   : 	pNotice->szNoticeMessage[255]=0;
; 21   : 	wsprintf(pNotice->Notice, szNoticeMsg);
; 22   : 	PHeadSetB(&pNotice->PacketHeader, 0x0D, wcslen((unsigned short *)pNotice->szNoticeMessage)*2+ 0x12);
; 23   : #else
; 24   : 	wsprintf(pNotice->Notice, szNoticeMsg);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _szNoticeMsg$[ebp]
  00006	8a 45 0c	 mov	 al, BYTE PTR _btType$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _lpNotice$[ebp]
  0000e	51		 push	 ecx
  0000f	8d 77 0d	 lea	 esi, DWORD PTR [edi+13]
  00012	56		 push	 esi
  00013	88 47 03	 mov	 BYTE PTR [edi+3], al
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 25   : 	PHeadSetB((LPBYTE)pNotice, 0x0D, strlen(pNotice->Notice) + sizeof(PMSG_NOTICE) - sizeof(pNotice->Notice) + 1 );

  0001c	8b c6		 mov	 eax, esi
  0001e	83 c4 08	 add	 esp, 8
  00021	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@MakeNotice:
  00024	8a 08		 mov	 cl, BYTE PTR [eax]
  00026	40		 inc	 eax
  00027	84 c9		 test	 cl, cl
  00029	75 f9		 jne	 SHORT $LL3@MakeNotice
  0002b	2b c2		 sub	 eax, edx
  0002d	83 c0 11	 add	 eax, 17			; 00000011H
  00030	50		 push	 eax
  00031	6a 0d		 push	 13			; 0000000dH
  00033	57		 push	 edi
  00034	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 26   : #endif
; 27   : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ENDP		; TNotice::MakeNoticeMsg
_TEXT	ENDS
PUBLIC	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ		; TNotice::MakeNoticeMsgEx
EXTRN	_vsprintf:PROC
; Function compile flags: /Ogtp
;	COMDAT ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ
_TEXT	SEGMENT
_lpNotice$ = 8						; size = 4
_btType$ = 12						; size = 1
_szNoticeMsg$ = 16					; size = 4
?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ PROC		; TNotice::MakeNoticeMsgEx, COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 32   : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *)lpNotice;
; 33   : 	pNotice->type = btType;
; 34   : 
; 35   : #ifdef GS_UNICODE
; 36   : 	unsigned char szTempMsg[4096]={0};
; 37   : #endif
; 38   : 
; 39   : 
; 40   : 	va_list pArguments;
; 41   : 
; 42   : #ifdef GS_UNICODE
; 43   : 	memset( pNotice->szNoticeMessage, 0, sizeof(pNotice->szNoticeMessage));
; 44   : #endif
; 45   : 
; 46   : 
; 47   : 	va_start(pArguments, szNoticeMsg);
; 48   : 
; 49   : #ifdef GS_UNICODE
; 50   : 	vsprintf((char*)szTempMsg, (char*)szNoticeMsg, pArguments);
; 51   : #else
; 52   : 	vsprintf((char*)pNotice->Notice, (char*)szNoticeMsg, pArguments);

  00003	8b 55 10	 mov	 edx, DWORD PTR _szNoticeMsg$[ebp]
  00006	8a 45 0c	 mov	 al, BYTE PTR _btType$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _lpNotice$[ebp]
  0000e	8d 4d 14	 lea	 ecx, DWORD PTR _szNoticeMsg$[ebp+4]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	8d 77 0d	 lea	 esi, DWORD PTR [edi+13]
  00016	56		 push	 esi
  00017	88 47 03	 mov	 BYTE PTR [edi+3], al
  0001a	e8 00 00 00 00	 call	 _vsprintf

; 53   : #endif
; 54   : 
; 55   : 	va_end(pArguments);
; 56   : 
; 57   : 
; 58   : #ifdef GS_UNICODE
; 59   : 	MultiByteToWideChar(1258, 0, (char*)szTempMsg,  strlen((char*)szTempMsg), (unsigned short*)pNotice->szNoticeMessage, sizeof(pNotice->szNoticeMessage) );
; 60   : 	pNotice->szNoticeMessage[254]=0;
; 61   : 	pNotice->szNoticeMessage[255]=0;
; 62   : 	PHeadSetB(&pNotice->PacketHeader, 0x0D, wcslen((unsigned short *)pNotice->szNoticeMessage)*2+ 0x12);
; 63   : #else
; 64   : 	PHeadSetB((LPBYTE)pNotice, 0x0D, strlen(pNotice->Notice)  + sizeof(PMSG_NOTICE) - sizeof(pNotice->Notice) + 1);

  0001f	8b c6		 mov	 eax, esi
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@MakeNotice@2:
  00027	8a 08		 mov	 cl, BYTE PTR [eax]
  00029	40		 inc	 eax
  0002a	84 c9		 test	 cl, cl
  0002c	75 f9		 jne	 SHORT $LL3@MakeNotice@2
  0002e	2b c2		 sub	 eax, edx
  00030	83 c0 11	 add	 eax, 17			; 00000011H
  00033	50		 push	 eax
  00034	6a 0d		 push	 13			; 0000000dH
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi

; 65   : #endif
; 66   : 
; 67   : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ENDP		; TNotice::MakeNoticeMsgEx
_TEXT	ENDS
PUBLIC	?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z	; TNotice::SetNoticeProperty
; Function compile flags: /Ogtp
;	COMDAT ?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z
_TEXT	SEGMENT
_lpNotice$ = 8						; size = 4
_btType$ = 12						; size = 1
_dwColor$ = 16						; size = 4
_btCount$ = 20						; size = 1
_wDelay$ = 24						; size = 2
_btSpeed$ = 28						; size = 1
?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z PROC		; TNotice::SetNoticeProperty, COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 96   : 	PMSG_NOTICE * pNotice =(PMSG_NOTICE *) lpNotice;
; 97   : 
; 98   : 	pNotice->type = btType;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpNotice$[ebp]
  00006	8a 4d 0c	 mov	 cl, BYTE PTR _btType$[ebp]

; 99   : 	pNotice->dwColor = dwColor;

  00009	8b 55 10	 mov	 edx, DWORD PTR _dwColor$[ebp]
  0000c	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 100  : 	pNotice->btCount = btCount;

  0000f	8a 4d 14	 mov	 cl, BYTE PTR _btCount$[ebp]
  00012	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 101  : 	pNotice->wDelay = wDelay;

  00015	66 8b 55 18	 mov	 dx, WORD PTR _wDelay$[ebp]
  00019	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 102  : 	pNotice->btSpeed = btSpeed;

  0001c	8a 4d 1c	 mov	 cl, BYTE PTR _btSpeed$[ebp]
  0001f	66 89 50 06	 mov	 WORD PTR [eax+6], dx
  00023	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 103  : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z ENDP		; TNotice::SetNoticeProperty
_TEXT	ENDS
PUBLIC	?SendNoticeToAllUser@TNotice@@SAXPAX@Z		; TNotice::SendNoticeToAllUser
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
; Function compile flags: /Ogtp
;	COMDAT ?SendNoticeToAllUser@TNotice@@SAXPAX@Z
_TEXT	SEGMENT
_lpNotice$ = 8						; size = 4
?SendNoticeToAllUser@TNotice@@SAXPAX@Z PROC		; TNotice::SendNoticeToAllUser, COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 107  : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *)lpNotice;
; 108  : 	//LogAddC(2, "gm message DATA: index: (%s), MAX: (%s)", OBJ_STARTUSERINDEX, OBJMAX);
; 109  : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	53		 push	 ebx
  00009	8b 5d 08	 mov	 ebx, DWORD PTR _lpNotice$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00013	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL5@SendNotice:

; 110  : 	{
; 111  : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00018	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0001d	75 1b		 jne	 SHORT $LN4@SendNotice

; 112  : 		{
; 113  : 			if ( gObj[n].Type  == OBJ_USER )

  0001f	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  00024	75 14		 jne	 SHORT $LN4@SendNotice

; 114  : 			{
; 115  : 				DataSend(n, (unsigned char*)pNotice  , pNotice->h.size  );

  00026	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SendNotice:

; 107  : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *)lpNotice;
; 108  : 	//LogAddC(2, "gm message DATA: index: (%s), MAX: (%s)", OBJ_STARTUSERINDEX, OBJMAX);
; 109  : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  0003a	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00040	47		 inc	 edi
  00041	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00047	7c cf		 jl	 SHORT $LL5@SendNotice
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 116  : 			}
; 117  : 		}
; 118  : 	}
; 119  : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?SendNoticeToAllUser@TNotice@@SAXPAX@Z ENDP		; TNotice::SendNoticeToAllUser
_TEXT	ENDS
PUBLIC	?SendNoticeToUser@TNotice@@SAXHPAX@Z		; TNotice::SendNoticeToUser
; Function compile flags: /Ogtp
;	COMDAT ?SendNoticeToUser@TNotice@@SAXHPAX@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_lpNotice$ = 12						; size = 4
?SendNoticeToUser@TNotice@@SAXHPAX@Z PROC		; TNotice::SendNoticeToUser, COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *)lpNotice;
; 124  : 	DataSend(aIndex, (unsigned char*)pNotice, pNotice->h.size  );

  00003	8b 45 0c	 mov	 eax, DWORD PTR _lpNotice$[ebp]
  00006	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0000a	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0000d	51		 push	 ecx
  0000e	50		 push	 eax
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 125  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?SendNoticeToUser@TNotice@@SAXHPAX@Z ENDP		; TNotice::SendNoticeToUser
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?AllSendServerMsg@TNotice@@SAXPAD@Z		; TNotice::AllSendServerMsg
; Function compile flags: /Ogtp
;	COMDAT ?AllSendServerMsg@TNotice@@SAXPAD@Z
_TEXT	SEGMENT
_pNotice$ = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
_chatmsg$ = 8						; size = 4
?AllSendServerMsg@TNotice@@SAXPAD@Z PROC		; TNotice::AllSendServerMsg, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _chatmsg$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi

; 131  : 	PMSG_NOTICE pNotice;
; 132  : 	
; 133  : 	MakeNoticeMsg((TNotice *)&pNotice, 0,  chatmsg);

  00018	50		 push	 eax
  00019	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  0001f	6a 00		 push	 0
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg

; 136  : 	{
; 137  : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00034	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL5@AllSendSer:
  00040	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  00045	75 24		 jne	 SHORT $LN4@AllSendSer

; 138  : 		{
; 139  : 			if ( gObj[n].Type  == OBJ_USER )

  00047	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  0004c	75 1d		 jne	 SHORT $LN4@AllSendSer

; 140  : 			{
; 141  : 				DataSend(n, (unsigned char*)&pNotice , pNotice.h.size );

  0004e	0f b6 8d ed fe
	ff ff		 movzx	 ecx, BYTE PTR _pNotice$[ebp+1]
  00055	51		 push	 ecx
  00056	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$[ebp]
  0005c	52		 push	 edx
  0005d	57		 push	 edi
  0005e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@AllSendSer:

; 134  : 
; 135  : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  0006b	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00071	47		 inc	 edi
  00072	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00078	7c c6		 jl	 SHORT $LL5@AllSendSer

; 142  : 			}
; 143  : 		}
; 144  : 	}
; 145  : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	5f		 pop	 edi
  0007e	33 cd		 xor	 ecx, ebp
  00080	5e		 pop	 esi
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?AllSendServerMsg@TNotice@@SAXPAD@Z ENDP		; TNotice::AllSendServerMsg
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GCServerMsgStringSend@TNotice@@SAXPADHE@Z	; TNotice::GCServerMsgStringSend
; Function compile flags: /Ogtp
;	COMDAT ?GCServerMsgStringSend@TNotice@@SAXPADHE@Z
_TEXT	SEGMENT
_pNotice$ = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
_szMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
_type$ = 16						; size = 1
?GCServerMsgStringSend@TNotice@@SAXPADHE@Z PROC		; TNotice::GCServerMsgStringSend, COMDAT

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _szMsg$[ebp]

; 149  : 	PMSG_NOTICE pNotice;
; 150  : 	
; 151  : 	MakeNoticeMsg(&pNotice, type, szMsg);

  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  0001a	50		 push	 eax
  0001b	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg

; 152  : 	DataSend(aIndex, (unsigned char*)&pNotice, pNotice.h.size);

  00027	0f b6 95 ed fe
	ff ff		 movzx	 edx, BYTE PTR _pNotice$[ebp+1]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00031	52		 push	 edx
  00032	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  00038	50		 push	 eax
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 153  : }

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00042	33 cd		 xor	 ecx, ebp
  00044	83 c4 18	 add	 esp, 24			; 00000018H
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?GCServerMsgStringSend@TNotice@@SAXPADHE@Z ENDP		; TNotice::GCServerMsgStringSend
_TEXT	ENDS
PUBLIC	??0TNotice@@QAE@E@Z				; TNotice::TNotice
; Function compile flags: /Ogtp
;	COMDAT ??0TNotice@@QAE@E@Z
_TEXT	SEGMENT
_btType$ = 8						; size = 1
??0TNotice@@QAE@E@Z PROC				; TNotice::TNotice, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 159  : 	this->m_Notice.btCount = 1;
; 160  : 	this->m_Notice.btSpeed = 20;
; 161  : 	this->m_Notice.dwColor = _ARGB(255, 255, 200, 80 );
; 162  : 	this->m_Notice.wDelay = 0;
; 163  : 	this->m_Notice.type = btType;

  00003	8a 55 08	 mov	 dl, BYTE PTR _btType$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	33 c9		 xor	 ecx, ecx
  0000a	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0000e	c6 40 0c 14	 mov	 BYTE PTR [eax+12], 20	; 00000014H
  00012	c7 40 08 ff c8
	50 ff		 mov	 DWORD PTR [eax+8], -11482881 ; ff50c8ffH
  00019	66 89 48 06	 mov	 WORD PTR [eax+6], cx
  0001d	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 164  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0TNotice@@QAE@E@Z ENDP				; TNotice::TNotice
_TEXT	ENDS
PUBLIC	?SendToAllUser@TNotice@@QAAXPADZZ		; TNotice::SendToAllUser
; Function compile flags: /Ogtp
;	COMDAT ?SendToAllUser@TNotice@@QAAXPADZZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
_szMsg$ = 12						; size = 4
?SendToAllUser@TNotice@@QAAXPADZZ PROC			; TNotice::SendToAllUser, COMDAT

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 174  : #ifdef GS_UNICODE
; 175  : 	unsigned char szTempMsg[4096]={0};
; 176  : #endif
; 177  : 
; 178  : 	va_list pArguments;
; 179  : 
; 180  : #ifdef GS_UNICODE
; 181  : 	memset(this->m_Notice.Notice , 0, sizeof(this->m_Notice.Notice ));
; 182  : #endif
; 183  : 
; 184  : 
; 185  : 	va_start(pArguments, szMsg);
; 186  : 
; 187  : #ifdef GS_UNICODE
; 188  : 	vsprintf((char*)szTempMsg, (char*)szMsg, pArguments);
; 189  : #else
; 190  : 	vsprintf(this->m_Notice.Notice, (char*)szMsg, pArguments);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _szMsg$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 45 10	 lea	 eax, DWORD PTR _szMsg$[ebp+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	8d 73 0d	 lea	 esi, DWORD PTR [ebx+13]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _vsprintf

; 191  : #endif
; 192  : 
; 193  : 	va_end(pArguments);
; 194  : 
; 195  : #ifdef GS_UNICODE
; 196  : 	MultiByteToWideChar( 1258, 0, (char*)szTempMsg,  strlen((char*)szTempMsg), (unsigned short*)this->m_Notice.Notice, sizeof(this->m_Notice.Notice) );
; 197  : 	this->m_Notice.Notice[254] = 0;
; 198  : 	this->m_Notice.Notice[255] =0;
; 199  : 	PHeadSetB( &this->m_pNotice.PacketHeader, 0x0D, wcslen((unsigned short*)this->m_Notice.Notice )*2 + 0x12);
; 200  : #else
; 201  : 	PHeadSetB((LPBYTE)&this->m_Notice, 0x0D, strlen(this->m_Notice.Notice)  + sizeof(PMSG_NOTICE) - sizeof(this->m_Notice.Notice) + 1);

  0001a	8b c6		 mov	 eax, esi
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL10@SendToAllU:
  00022	8a 08		 mov	 cl, BYTE PTR [eax]
  00024	40		 inc	 eax
  00025	84 c9		 test	 cl, cl
  00027	75 f9		 jne	 SHORT $LL10@SendToAllU
  00029	2b c2		 sub	 eax, edx
  0002b	83 c0 11	 add	 eax, 17			; 00000011H
  0002e	50		 push	 eax
  0002f	6a 0d		 push	 13			; 0000000dH
  00031	53		 push	 ebx
  00032	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 202  : #endif
; 203  : 
; 204  : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  0003f	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00044	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL5@SendToAllU:

; 205  : 	{
; 206  : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00050	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  00055	75 1b		 jne	 SHORT $LN4@SendToAllU

; 207  : 		{
; 208  : 			if ( gObj[n].Type  == OBJ_USER )

  00057	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  0005c	75 14		 jne	 SHORT $LN4@SendToAllU

; 209  : 			{
; 210  : 				DataSend(n, (LPBYTE)&this->m_Notice , this->m_Notice.h.size );

  0005e	0f b6 53 01	 movzx	 edx, BYTE PTR [ebx+1]
  00062	52		 push	 edx
  00063	53		 push	 ebx
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SendToAllU:

; 202  : #endif
; 203  : 
; 204  : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  00072	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00078	47		 inc	 edi
  00079	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  0007f	7c cf		 jl	 SHORT $LL5@SendToAllU
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx

; 211  : 			}
; 212  : 		}
; 213  : 	}
; 214  : }

  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?SendToAllUser@TNotice@@QAAXPADZZ ENDP			; TNotice::SendToAllUser
_TEXT	ENDS
PUBLIC	?SendToUser@TNotice@@QAAXHPADZZ			; TNotice::SendToUser
; Function compile flags: /Ogtp
;	COMDAT ?SendToUser@TNotice@@QAAXHPADZZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
_aIndex$ = 12						; size = 4
_szMsg$ = 16						; size = 4
?SendToUser@TNotice@@QAAXHPADZZ PROC			; TNotice::SendToUser, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 218  : #ifdef GS_UNICODE
; 219  : 	unsigned char szTempMsg[4096]={0};
; 220  : #endif
; 221  : 
; 222  : 	va_list pArguments;
; 223  : 
; 224  : #ifdef GS_UNICODE
; 225  : 	memset(this->m_pNotice.szNoticeMessage , 0, sizeof(this->m_pNotice.szNoticeMessage ));
; 226  : #endif
; 227  : 
; 228  : 
; 229  : 	va_start(pArguments, szMsg);
; 230  : 
; 231  : #ifdef GS_UNICODE
; 232  : 	vsprintf((char*)szTempMsg, (char*)szMsg, pArguments);
; 233  : #else
; 234  : 	vsprintf(this->m_Notice.Notice, (char*)szMsg, pArguments);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _szMsg$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0000a	57		 push	 edi
  0000b	8d 45 14	 lea	 eax, DWORD PTR _szMsg$[ebp+4]
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	8d 7e 0d	 lea	 edi, DWORD PTR [esi+13]
  00013	57		 push	 edi
  00014	e8 00 00 00 00	 call	 _vsprintf

; 235  : #endif
; 236  : 
; 237  : 	va_end(pArguments);
; 238  : 
; 239  : #ifdef GS_UNICODE
; 240  : 	MultiByteToWideChar( 1258, 0, (char*)szTempMsg,  strlen((char*)szTempMsg), (unsigned short*)this->m_pNotice.szNoticeMessage, sizeof(this->m_pNotice.szNoticeMessage) );
; 241  : 	this->m_pNotice.szNoticeMessage[254]=0;
; 242  : 	this->m_pNotice.szNoticeMessage[255]=0;
; 243  : 	PHeadSetB( &this->m_pNotice.PacketHeader, 0x0D, wcslen((unsigned short*)this->m_pNotice.szNoticeMessage )*2+0x12);
; 244  : #else
; 245  : 	PHeadSetB((LPBYTE)&this->m_Notice, 0x0D, strlen(this->m_Notice.Notice)  + sizeof(PMSG_NOTICE) - sizeof(this->m_Notice.Notice) + 1);

  00019	8b c7		 mov	 eax, edi
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@SendToUser:
  00021	8a 08		 mov	 cl, BYTE PTR [eax]
  00023	40		 inc	 eax
  00024	84 c9		 test	 cl, cl
  00026	75 f9		 jne	 SHORT $LL3@SendToUser
  00028	2b c2		 sub	 eax, edx
  0002a	83 c0 11	 add	 eax, 17			; 00000011H
  0002d	50		 push	 eax
  0002e	6a 0d		 push	 13			; 0000000dH
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 246  : #endif
; 247  : 
; 248  : 	DataSend(aIndex, (LPBYTE)&this->m_Notice , this->m_Notice.h.size );

  00036	0f b6 56 01	 movzx	 edx, BYTE PTR [esi+1]
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0003d	52		 push	 edx
  0003e	56		 push	 esi
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00045	83 c4 18	 add	 esp, 24			; 00000018H
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi

; 249  : 
; 250  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?SendToUser@TNotice@@QAAXHPADZZ ENDP			; TNotice::SendToUser
_TEXT	ENDS
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_EOBJECTSTRUCT@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8a 5d 08	 mov	 bl, BYTE PTR ___flags$[ebp]
  0002e	f6 c3 02	 test	 bl, 2
  00031	74 3b		 je	 SHORT $LN3@vector
  00033	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00036	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  0003b	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003e	50		 push	 eax
  0003f	68 40 27 00 00	 push	 10048			; 00002740H
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0004a	f6 c3 01	 test	 bl, 1
  0004d	74 09		 je	 SHORT $LN2@vector
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00055	83 c4 04	 add	 esp, 4
$LN2@vector:
  00058	8b c7		 mov	 eax, edi
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN3@vector:
  0006e	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  00080	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00092	f6 c3 01	 test	 bl, 1
  00095	74 09		 je	 SHORT $LN1@vector
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009d	83 c4 04	 add	 esp, 4
$LN1@vector:
  000a0	8b c6		 mov	 eax, esi
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_EOBJECTSTRUCT@@QAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 0c 16 00
	00		 add	 ecx, 5644		; 0000160cH
  00009	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
END
