; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\muserver_dev\development\MU-S8EP2-Repack\GameServer\Source\SimpleModulus.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB	; CryptoPP::FixedBlockSize<8>::BLOCKSIZE
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<8,4,0>::IV_LENGTH
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<16,4,0>::IV_LENGTH
PUBLIC	?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::KEYLENGTH
PUBLIC	?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::MIN_KEYLENGTH
PUBLIC	?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::MAX_KEYLENGTH
PUBLIC	?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::DEFAULT_KEYLENGTH
PUBLIC	?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::IV_REQUIREMENT
PUBLIC	?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB ; CryptoPP::FixedKeyLength<24,4,0>::IV_LENGTH
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<24,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<24,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@2HB DD 018H ; CryptoPP::FixedKeyLength<24,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<16,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<16,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@2HB DD 010H ; CryptoPP::FixedKeyLength<16,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_LENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 00H ; CryptoPP::FixedKeyLength<8,4,0>::IV_LENGTH
CONST	ENDS
;	COMDAT ?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?IV_REQUIREMENT@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 04H ; CryptoPP::FixedKeyLength<8,4,0>::IV_REQUIREMENT
CONST	ENDS
;	COMDAT ?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?DEFAULT_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::DEFAULT_KEYLENGTH
CONST	ENDS
;	COMDAT ?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MAX_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::MAX_KEYLENGTH
CONST	ENDS
;	COMDAT ?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?MIN_KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::MIN_KEYLENGTH
CONST	ENDS
;	COMDAT ?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB
CONST	SEGMENT
?KEYLENGTH@?$FixedKeyLength@$07$03$0A@@CryptoPP@@2HB DD 08H ; CryptoPP::FixedKeyLength<8,4,0>::KEYLENGTH
CONST	ENDS
;	COMDAT ?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB
CONST	SEGMENT
?BLOCKSIZE@?$FixedBlockSize@$07@CryptoPP@@2HB DD 08H	; CryptoPP::FixedBlockSize<8>::BLOCKSIZE
CONST	ENDS
PUBLIC	??1Clonable@CryptoPP@@UAE@XZ			; CryptoPP::Clonable::~Clonable
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
;	COMDAT ??1Clonable@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Clonable@CryptoPP@@UAE@XZ PROC			; CryptoPP::Clonable::~Clonable, COMDAT
; _this$ = ecx

; 329  : 	virtual ~Clonable() {}

  00000	c3		 ret	 0
??1Clonable@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Clonable::~Clonable
_TEXT	ENDS
PUBLIC	??1SimpleKeyingInterface@CryptoPP@@UAE@XZ	; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
; Function compile flags: /Ogtp
;	COMDAT ??1SimpleKeyingInterface@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1SimpleKeyingInterface@CryptoPP@@UAE@XZ PROC		; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface, COMDAT
; _this$ = ecx

; 350  : 	virtual ~SimpleKeyingInterface() {}

  00000	c3		 ret	 0
??1SimpleKeyingInterface@CryptoPP@@UAE@XZ ENDP		; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
_TEXT	ENDS
PUBLIC	??1Algorithm@CryptoPP@@UAE@XZ			; CryptoPP::Algorithm::~Algorithm
; Function compile flags: /Ogtp
;	COMDAT ??1Algorithm@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Algorithm@CryptoPP@@UAE@XZ PROC			; CryptoPP::Algorithm::~Algorithm, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1Algorithm@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Algorithm::~Algorithm
_TEXT	ENDS
PUBLIC	??$SecureWipeBuffer@E@CryptoPP@@YAXPAEI@Z	; CryptoPP::SecureWipeBuffer<unsigned char>
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\misc.h
;	COMDAT ??$SecureWipeBuffer@E@CryptoPP@@YAXPAEI@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
??$SecureWipeBuffer@E@CryptoPP@@YAXPAEI@Z PROC		; CryptoPP::SecureWipeBuffer<unsigned char>, COMDAT

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 490  : 	volatile byte *p = buf;
; 491  : #ifdef __GNUC__
; 492  : 	asm volatile("rep stosb" : "+c"(n), "+D"(p) : "a"(0) : "memory");
; 493  : #else
; 494  : 	__stosb((byte *)(size_t)p, 0, n);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]
  0000a	32 c0		 xor	 al, al
  0000c	f3 aa		 rep stosb
  0000e	5f		 pop	 edi

; 495  : #endif
; 496  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$SecureWipeBuffer@E@CryptoPP@@YAXPAEI@Z ENDP		; CryptoPP::SecureWipeBuffer<unsigned char>
_TEXT	ENDS
PUBLIC	??$SecureWipeBuffer@G@CryptoPP@@YAXPAGI@Z	; CryptoPP::SecureWipeBuffer<unsigned short>
; Function compile flags: /Ogtp
;	COMDAT ??$SecureWipeBuffer@G@CryptoPP@@YAXPAGI@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
??$SecureWipeBuffer@G@CryptoPP@@YAXPAGI@Z PROC		; CryptoPP::SecureWipeBuffer<unsigned short>, COMDAT

; 499  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 500  : 	volatile word16 *p = buf;
; 501  : #ifdef __GNUC__
; 502  : 	asm volatile("rep stosw" : "+c"(n), "+D"(p) : "a"(0) : "memory");
; 503  : #else
; 504  : 	__stosw((word16 *)(size_t)p, 0, n);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]
  0000a	33 c0		 xor	 eax, eax
  0000c	66 f3 ab	 rep stosw
  0000f	5f		 pop	 edi

; 505  : #endif
; 506  : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$SecureWipeBuffer@G@CryptoPP@@YAXPAGI@Z ENDP		; CryptoPP::SecureWipeBuffer<unsigned short>
_TEXT	ENDS
PUBLIC	??$SecureWipeBuffer@I@CryptoPP@@YAXPAII@Z	; CryptoPP::SecureWipeBuffer<unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??$SecureWipeBuffer@I@CryptoPP@@YAXPAII@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
??$SecureWipeBuffer@I@CryptoPP@@YAXPAII@Z PROC		; CryptoPP::SecureWipeBuffer<unsigned int>, COMDAT

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 510  : 	volatile word32 *p = buf;
; 511  : #ifdef __GNUC__
; 512  : 	asm volatile("rep stosl" : "+c"(n), "+D"(p) : "a"(0) : "memory");
; 513  : #else
; 514  : 	__stosd((unsigned long *)(size_t)p, 0, n);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]
  0000a	33 c0		 xor	 eax, eax
  0000c	f3 ab		 rep stosd
  0000e	5f		 pop	 edi

; 515  : #endif
; 516  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$SecureWipeBuffer@I@CryptoPP@@YAXPAII@Z ENDP		; CryptoPP::SecureWipeBuffer<unsigned int>
_TEXT	ENDS
PUBLIC	??$SecureWipeBuffer@_K@CryptoPP@@YAXPA_KI@Z	; CryptoPP::SecureWipeBuffer<unsigned __int64>
; Function compile flags: /Ogtp
;	COMDAT ??$SecureWipeBuffer@_K@CryptoPP@@YAXPA_KI@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
??$SecureWipeBuffer@_K@CryptoPP@@YAXPA_KI@Z PROC	; CryptoPP::SecureWipeBuffer<unsigned __int64>, COMDAT

; 519  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 520  : #if CRYPTOPP_BOOL_X64
; 521  : 	volatile word64 *p = buf;
; 522  : #ifdef __GNUC__
; 523  : 	asm volatile("rep stosq" : "+c"(n), "+D"(p) : "a"(0) : "memory");
; 524  : #else
; 525  : 	__stosq((word64 *)(size_t)p, 0, n);
; 526  : #endif
; 527  : #else
; 528  : 	SecureWipeBuffer((word32 *)buf, 2*n);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]
  0000a	03 c9		 add	 ecx, ecx
  0000c	33 c0		 xor	 eax, eax
  0000e	f3 ab		 rep stosd
  00010	5f		 pop	 edi

; 529  : #endif
; 530  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$SecureWipeBuffer@_K@CryptoPP@@YAXPA_KI@Z ENDP	; CryptoPP::SecureWipeBuffer<unsigned __int64>
_TEXT	ENDS
PUBLIC	??0SimpleKeyingInterface@CryptoPP@@QAE@XZ	; CryptoPP::SimpleKeyingInterface::SimpleKeyingInterface
; Function compile flags: /Ogtp
;	COMDAT ??0SimpleKeyingInterface@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0SimpleKeyingInterface@CryptoPP@@QAE@XZ PROC		; CryptoPP::SimpleKeyingInterface::SimpleKeyingInterface, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SimpleKeyingInterface@CryptoPP@@QAE@XZ ENDP		; CryptoPP::SimpleKeyingInterface::SimpleKeyingInterface
_TEXT	ENDS
PUBLIC	??0StreamTransformation@CryptoPP@@QAE@XZ	; CryptoPP::StreamTransformation::StreamTransformation
EXTRN	??0Algorithm@CryptoPP@@QAE@_N@Z:PROC		; CryptoPP::Algorithm::Algorithm
; Function compile flags: /Ogtp
;	COMDAT ??0StreamTransformation@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0StreamTransformation@CryptoPP@@QAE@XZ PROC		; CryptoPP::StreamTransformation::StreamTransformation, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	6a 01		 push	 1
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000a	8b c6		 mov	 eax, esi
  0000c	5e		 pop	 esi
  0000d	c3		 ret	 0
??0StreamTransformation@CryptoPP@@QAE@XZ ENDP		; CryptoPP::StreamTransformation::StreamTransformation
_TEXT	ENDS
PUBLIC	??1StreamTransformation@CryptoPP@@UAE@XZ	; CryptoPP::StreamTransformation::~StreamTransformation
; Function compile flags: /Ogtp
;	COMDAT ??1StreamTransformation@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1StreamTransformation@CryptoPP@@UAE@XZ PROC		; CryptoPP::StreamTransformation::~StreamTransformation, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1StreamTransformation@CryptoPP@@UAE@XZ ENDP		; CryptoPP::StreamTransformation::~StreamTransformation
_TEXT	ENDS
PUBLIC	??1BlockTransformation@CryptoPP@@UAE@XZ		; CryptoPP::BlockTransformation::~BlockTransformation
; Function compile flags: /Ogtp
;	COMDAT ??1BlockTransformation@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1BlockTransformation@CryptoPP@@UAE@XZ PROC		; CryptoPP::BlockTransformation::~BlockTransformation, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1BlockTransformation@CryptoPP@@UAE@XZ ENDP		; CryptoPP::BlockTransformation::~BlockTransformation
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Init@CSimpleModulus@@QAEXXZ			; CSimpleModulus::Init
EXTRN	?g_nullNameValuePairs@CryptoPP@@3ABVNameValuePairs@1@B:DWORD ; CryptoPP::g_nullNameValuePairs
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\simplemodulus.cpp
;	COMDAT ?Init@CSimpleModulus@@QAEXXZ
_TEXT	SEGMENT
_DES_XEX3$ = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
?Init@CSimpleModulus@@QAEXXZ PROC			; CSimpleModulus::Init, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 11   : 	BYTE DES_XEX3[] = {
; 12   : 		0x0C,0xB0,0x66,0xCC,0xEF,0x92,0x8C,0x5C,
; 13   : 		0x65,0xF4,0xAC,0x3F,0x71,0xF2,0x7B,0xCE,
; 14   : 		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
; 15   : 	};
; 16   : 	this->m_Enc.SetKey(DES_XEX3,sizeof(DES_XEX3));

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nullNameValuePairs@CryptoPP@@3ABVNameValuePairs@1@B ; CryptoPP::g_nullNameValuePairs
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001c	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0001f	52		 push	 edx
  00020	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00023	6a 18		 push	 24			; 00000018H
  00025	8d 55 e4	 lea	 edx, DWORD PTR _DES_XEX3$[ebp]
  00028	52		 push	 edx
  00029	c7 45 e4 0c b0
	66 cc		 mov	 DWORD PTR _DES_XEX3$[ebp], -865685492 ; cc66b00cH
  00030	c7 45 e8 ef 92
	8c 5c		 mov	 DWORD PTR _DES_XEX3$[ebp+4], 1552716527 ; 5c8c92efH
  00037	c7 45 ec 65 f4
	ac 3f		 mov	 DWORD PTR _DES_XEX3$[ebp+8], 1068299365 ; 3facf465H
  0003e	c7 45 f0 71 f2
	7b ce		 mov	 DWORD PTR _DES_XEX3$[ebp+12], -830737807 ; ce7bf271H
  00045	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _DES_XEX3$[ebp+16], 0
  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _DES_XEX3$[ebp+20], 0
  00053	ff d0		 call	 eax

; 17   : 	this->m_Dec.SetKey(DES_XEX3,sizeof(DES_XEX3));

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nullNameValuePairs@CryptoPP@@3ABVNameValuePairs@1@B ; CryptoPP::g_nullNameValuePairs
  0005a	8b 56 78	 mov	 edx, DWORD PTR [esi+120]
  0005d	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00060	50		 push	 eax
  00061	8d 4e 78	 lea	 ecx, DWORD PTR [esi+120]
  00064	6a 18		 push	 24			; 00000018H
  00066	8d 45 e4	 lea	 eax, DWORD PTR _DES_XEX3$[ebp]
  00069	50		 push	 eax
  0006a	ff d2		 call	 edx

; 18   : }

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006f	33 cd		 xor	 ecx, ebp
  00071	5e		 pop	 esi
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?Init@CSimpleModulus@@QAEXXZ ENDP			; CSimpleModulus::Init
_TEXT	ENDS
PUBLIC	?Decrypt@CSimpleModulus@@QAEHPAX0H@Z		; CSimpleModulus::Decrypt
; Function compile flags: /Ogtp
;	COMDAT ?Decrypt@CSimpleModulus@@QAEHPAX0H@Z
_TEXT	SEGMENT
_lpDest$ = 8						; size = 4
_lpSource$ = 12						; size = 4
_nSize$ = 16						; size = 4
_iSize$ = 16						; size = 4
?Decrypt@CSimpleModulus@@QAEHPAX0H@Z PROC		; CSimpleModulus::Decrypt, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   : 	/*if ( lpDest == NULL)
; 29   : 	{
; 30   : 		return iSize;
; 31   : 	}
; 32   : 
; 33   : 	LPBYTE lpTempDest = (LPBYTE)lpDest;
; 34   : 	LPBYTE lpTempSrc = (LPBYTE)lpSource;
; 35   : 
; 36   : 	int iResult = 0;
; 37   : 	int iDecLen = 0;
; 38   : 
; 39   : 	BYTE btSizeDiff = lpTempSrc[iSize-1];
; 40   : 
; 41   : 	if ( iSize > 0 )
; 42   : 	{
; 43   : 		int lOfs = 0;
; 44   : 		do
; 45   : 		{
; 46   : 			this->DecryptBlock((LPDWORD)&lpTempSrc[lOfs],(LPDWORD)&lpTempDest[lOfs]);
; 47   : 			lOfs += 16;
; 48   : 		}
; 49   : 		while( lOfs < iSize );
; 50   : 	}*/
; 51   : 
; 52   : 	if( lpDest == NULL )

  00003	83 7d 08 00	 cmp	 DWORD PTR _lpDest$[ebp], 0
  00007	75 07		 jne	 SHORT $LN3@Decrypt

; 53   : 		return iSize;

  00009	8b 45 10	 mov	 eax, DWORD PTR _iSize$[ebp]

; 71   : }

  0000c	5d		 pop	 ebp
  0000d	c2 0c 00	 ret	 12			; 0000000cH
$LN3@Decrypt:
  00010	57		 push	 edi

; 54   : 
; 55   : 	if( lpSource == NULL )

  00011	8b 7d 0c	 mov	 edi, DWORD PTR _lpSource$[ebp]
  00014	85 ff		 test	 edi, edi
  00016	75 07		 jne	 SHORT $LN2@Decrypt

; 56   : 		return 0;

  00018	33 c0		 xor	 eax, eax
  0001a	5f		 pop	 edi

; 71   : }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Decrypt:
  0001f	53		 push	 ebx
  00020	56		 push	 esi

; 57   : 
; 58   : 	int nSize = iSize-1;

  00021	8b 75 10	 mov	 esi, DWORD PTR _iSize$[ebp]
  00024	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]

; 59   : 
; 60   : 	if( (nSize%8) )

  00027	8b d0		 mov	 edx, eax
  00029	81 e2 07 00 00
	80		 and	 edx, -2147483641	; 80000007H
  0002f	89 45 10	 mov	 DWORD PTR _nSize$[ebp], eax
  00032	79 05		 jns	 SHORT $LN7@Decrypt
  00034	4a		 dec	 edx
  00035	83 ca f8	 or	 edx, -8			; fffffff8H
  00038	42		 inc	 edx
$LN7@Decrypt:
  00039	74 13		 je	 SHORT $LN1@Decrypt

; 61   : 	{
; 62   : 		nSize = (1+nSize/8)*8;

  0003b	99		 cdq
  0003c	83 e2 07	 and	 edx, 7
  0003f	03 c2		 add	 eax, edx
  00041	c1 f8 03	 sar	 eax, 3
  00044	8d 04 c5 08 00
	00 00		 lea	 eax, DWORD PTR [eax*8+8]
  0004b	89 45 10	 mov	 DWORD PTR _nSize$[ebp], eax
$LN1@Decrypt:

; 63   : 	}
; 64   : 
; 65   : 	LPBYTE lpTempDest = (LPBYTE)lpDest;
; 66   : 	LPBYTE lpTempSrc = (LPBYTE)lpSource;
; 67   : 
; 68   : 	BYTE btSizeDiff = lpTempSrc[iSize-1];
; 69   : 	this->m_Dec.ProcessData(lpTempDest,lpTempSrc,nSize);

  0004e	ff 75 10	 push	 DWORD PTR _nSize$[ebp]
  00051	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  00054	8b 45 08	 mov	 eax, DWORD PTR _lpDest$[ebp]
  00057	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  0005a	8a 5c 37 ff	 mov	 bl, BYTE PTR [edi+esi-1]
  0005e	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00061	57		 push	 edi
  00062	50		 push	 eax
  00063	ff d2		 call	 edx

; 70   : 	return (iSize-btSizeDiff);

  00065	8b c6		 mov	 eax, esi
  00067	0f b6 cb	 movzx	 ecx, bl
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	2b c1		 sub	 eax, ecx
  0006e	5f		 pop	 edi

; 71   : }

  0006f	5d		 pop	 ebp
  00070	c2 0c 00	 ret	 12			; 0000000cH
?Decrypt@CSimpleModulus@@QAEHPAX0H@Z ENDP		; CSimpleModulus::Decrypt
_TEXT	ENDS
PUBLIC	?Encrypt@CSimpleModulus@@QAEHPAX0H@Z		; CSimpleModulus::Encrypt
; Function compile flags: /Ogtp
;	COMDAT ?Encrypt@CSimpleModulus@@QAEHPAX0H@Z
_TEXT	SEGMENT
_lpDest$ = 8						; size = 4
_lpSource$ = 12						; size = 4
_iSize$ = 16						; size = 4
?Encrypt@CSimpleModulus@@QAEHPAX0H@Z PROC		; CSimpleModulus::Encrypt, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   : 	/*if ( lpDest == NULL)
; 76   : 	{
; 77   : 		return iSize;
; 78   : 	}
; 79   : 
; 80   : 	LPBYTE lpTempDest = (LPBYTE)lpDest;
; 81   : 	LPBYTE lpTempSrc = (LPBYTE)lpSource;
; 82   : 
; 83   : 	int iResult = 0;
; 84   : 	int iDecLen = 0;
; 85   : 	int lOfs = 0;
; 86   : 
; 87   : 
; 88   : 	if ( iSize > 0 )
; 89   : 	{
; 90   : 		do
; 91   : 		{
; 92   : 			this->EncryptBlock((LPDWORD)&lpTempSrc[lOfs],(LPDWORD)&lpTempDest[lOfs]);
; 93   : 			lOfs += 16;
; 94   : 		}
; 95   : 		while( lOfs < iSize );
; 96   : 		lpTempDest[lOfs] = lOfs-iSize;
; 97   : 		lOfs++;
; 98   : 	}*/
; 99   : 
; 100  : 	LPBYTE lpTempDest = (LPBYTE)lpDest;
; 101  : 	LPBYTE lpTempSrc = (LPBYTE)lpSource;
; 102  : 
; 103  : 	int nSize = iSize;

  00003	8b 45 10	 mov	 eax, DWORD PTR _iSize$[ebp]
  00006	53		 push	 ebx

; 104  : 
; 105  : 	if( (iSize%8) )

  00007	8b d0		 mov	 edx, eax
  00009	81 e2 07 00 00
	80		 and	 edx, -2147483641	; 80000007H
  0000f	56		 push	 esi
  00010	8b d8		 mov	 ebx, eax
  00012	79 05		 jns	 SHORT $LN4@Encrypt
  00014	4a		 dec	 edx
  00015	83 ca f8	 or	 edx, -8			; fffffff8H
  00018	42		 inc	 edx
$LN4@Encrypt:
  00019	74 10		 je	 SHORT $LN1@Encrypt

; 106  : 	{
; 107  : 		nSize = (1+(iSize/8))*8;

  0001b	99		 cdq
  0001c	83 e2 07	 and	 edx, 7
  0001f	03 c2		 add	 eax, edx
  00021	c1 f8 03	 sar	 eax, 3
  00024	8d 1c c5 08 00
	00 00		 lea	 ebx, DWORD PTR [eax*8+8]
$LN1@Encrypt:

; 108  : 	}
; 109  : 
; 110  : 	m_Enc.ProcessData(lpTempDest,lpTempSrc,nSize);

  0002b	8b 55 0c	 mov	 edx, DWORD PTR _lpSource$[ebp]
  0002e	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00031	8b 75 08	 mov	 esi, DWORD PTR _lpDest$[ebp]
  00034	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00037	53		 push	 ebx
  00038	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0003b	52		 push	 edx
  0003c	56		 push	 esi
  0003d	ff d0		 call	 eax

; 111  : 	lpTempDest[nSize] = nSize-iSize;

  0003f	8a cb		 mov	 cl, bl
  00041	2a 4d 10	 sub	 cl, BYTE PTR _iSize$[ebp]

; 112  : 	nSize++;

  00044	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00047	88 0c 33	 mov	 BYTE PTR [ebx+esi], cl
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 113  : return nSize;
; 114  : }

  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
?Encrypt@CSimpleModulus@@QAEHPAX0H@Z ENDP		; CSimpleModulus::Encrypt
_TEXT	ENDS
PUBLIC	?size@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QBEIXZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::size
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ?size@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QBEIXZ
_TEXT	SEGMENT
?size@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QBEIXZ PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::size, COMDAT
; _this$ = ecx

; 302  : 	size_type size() const {return m_size;}

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?size@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QBEIXZ ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::size
_TEXT	ENDS
PUBLIC	??0?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAE@XZ ; CryptoPP::AllocatorWithCleanup<unsigned char,0>::AllocatorWithCleanup<unsigned char,0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAE@XZ PROC	; CryptoPP::AllocatorWithCleanup<unsigned char,0>::AllocatorWithCleanup<unsigned char,0>, COMDAT
; _this$ = ecx

; 124  : 	AllocatorWithCleanup() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAE@XZ ENDP	; CryptoPP::AllocatorWithCleanup<unsigned char,0>::AllocatorWithCleanup<unsigned char,0>
_TEXT	ENDS
PUBLIC	??0?$AllocatorWithCleanup@E$00@CryptoPP@@QAE@XZ	; CryptoPP::AllocatorWithCleanup<unsigned char,1>::AllocatorWithCleanup<unsigned char,1>
; Function compile flags: /Ogtp
;	COMDAT ??0?$AllocatorWithCleanup@E$00@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$AllocatorWithCleanup@E$00@CryptoPP@@QAE@XZ PROC	; CryptoPP::AllocatorWithCleanup<unsigned char,1>::AllocatorWithCleanup<unsigned char,1>, COMDAT
; _this$ = ecx

; 124  : 	AllocatorWithCleanup() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$AllocatorWithCleanup@E$00@CryptoPP@@QAE@XZ ENDP	; CryptoPP::AllocatorWithCleanup<unsigned char,1>::AllocatorWithCleanup<unsigned char,1>
_TEXT	ENDS
PUBLIC	??0BlockTransformation@CryptoPP@@QAE@XZ		; CryptoPP::BlockTransformation::BlockTransformation
; Function compile flags: /Ogtp
;	COMDAT ??0BlockTransformation@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0BlockTransformation@CryptoPP@@QAE@XZ PROC		; CryptoPP::BlockTransformation::BlockTransformation, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	6a 01		 push	 1
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000a	8b c6		 mov	 eax, esi
  0000c	5e		 pop	 esi
  0000d	c3		 ret	 0
??0BlockTransformation@CryptoPP@@QAE@XZ ENDP		; CryptoPP::BlockTransformation::BlockTransformation
_TEXT	ENDS
PUBLIC	??0?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAE@XZ ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAE@XZ PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>, COMDAT
; _this$ = ecx

; 166  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  00000	8b c1		 mov	 eax, ecx
  00002	c6 40 09 00	 mov	 BYTE PTR [eax+9], 0
  00006	c3		 ret	 0
??0?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>
_TEXT	ENDS
PUBLIC	?GetAlignedArray@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@AAEPAEXZ ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::GetAlignedArray
; Function compile flags: /Ogtp
;	COMDAT ?GetAlignedArray@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@AAEPAEXZ
_TEXT	SEGMENT
?GetAlignedArray@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@AAEPAEXZ PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::GetAlignedArray, COMDAT
; _this$ = ecx

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
?GetAlignedArray@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@AAEPAEXZ ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::GetAlignedArray
_TEXT	ENDS
PUBLIC	?deallocate@?$NullAllocator@E@CryptoPP@@QAEXPAXI@Z ; CryptoPP::NullAllocator<unsigned char>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$NullAllocator@E@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$NullAllocator@E@CryptoPP@@QAEXPAXI@Z PROC	; CryptoPP::NullAllocator<unsigned char>::deallocate, COMDAT
; _this$ = ecx

; 151  : 		assert(false);
; 152  : 	}

  00000	c2 08 00	 ret	 8
?deallocate@?$NullAllocator@E@CryptoPP@@QAEXPAXI@Z ENDP	; CryptoPP::NullAllocator<unsigned char>::deallocate
_TEXT	ENDS
PUBLIC	??0?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@PAV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@1@@Z ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\smartptr.h
;	COMDAT ??0?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@PAV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@1@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@PAV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@1@@Z PROC ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >, COMDAT
; _this$ = ecx

; 20   : 	explicit member_ptr(T *p = NULL) : m_p(p) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@PAV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@1@@Z ENDP ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
_TEXT	ENDS
PUBLIC	?allocate@?$NullAllocator@E@CryptoPP@@QAEPAEIPBX@Z ; CryptoPP::NullAllocator<unsigned char>::allocate
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ?allocate@?$NullAllocator@E@CryptoPP@@QAEPAEIPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
___formal$ = 12						; size = 4
?allocate@?$NullAllocator@E@CryptoPP@@QAEPAEIPBX@Z PROC	; CryptoPP::NullAllocator<unsigned char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		assert(false);
; 146  : 		return NULL;

  00000	33 c0		 xor	 eax, eax

; 147  : 	}

  00002	c2 08 00	 ret	 8
?allocate@?$NullAllocator@E@CryptoPP@@QAEPAEIPBX@Z ENDP	; CryptoPP::NullAllocator<unsigned char>::allocate
_TEXT	ENDS
PUBLIC	??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\smartptr.h
;	COMDAT ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >, COMDAT
; _this$ = ecx

; 49   : template <class T> member_ptr<T>::~member_ptr() {delete m_p;}

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 08		 je	 SHORT $LN3@member_ptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	6a 01		 push	 1
  0000c	ff d2		 call	 edx
$LN3@member_ptr:
  0000e	c3		 ret	 0
??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
_TEXT	ENDS
PUBLIC	??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z	; CryptoPP::SecureWipeArray<unsigned char>
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\misc.h
;	COMDAT ??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z PROC		; CryptoPP::SecureWipeArray<unsigned char>, COMDAT

; 536  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 	if (sizeof(T) % 8 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word64>() == 0)
; 538  : 		SecureWipeBuffer((word64 *)buf, n * (sizeof(T)/8));
; 539  : 	else if (sizeof(T) % 4 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word32>() == 0)
; 540  : 		SecureWipeBuffer((word32 *)buf, n * (sizeof(T)/4));
; 541  : 	else if (sizeof(T) % 2 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word16>() == 0)
; 542  : 		SecureWipeBuffer((word16 *)buf, n * (sizeof(T)/2));
; 543  : 	else
; 544  : 		SecureWipeBuffer((byte *)buf, n * sizeof(T));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]
  0000a	32 c0		 xor	 al, al
  0000c	f3 aa		 rep stosb
  0000e	5f		 pop	 edi

; 545  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z ENDP		; CryptoPP::SecureWipeArray<unsigned char>
_TEXT	ENDS
PUBLIC	??$STDMIN@I@CryptoPP@@YAABIABI0@Z		; CryptoPP::STDMIN<unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??$STDMIN@I@CryptoPP@@YAABIABI0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$STDMIN@I@CryptoPP@@YAABIABI0@Z PROC			; CryptoPP::STDMIN<unsigned int>, COMDAT

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 179  : 	return b < a ? b : a;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	8b 10		 mov	 edx, DWORD PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0000b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000d	72 02		 jb	 SHORT $LN4@STDMIN
  0000f	8b c1		 mov	 eax, ecx
$LN4@STDMIN:

; 180  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$STDMIN@I@CryptoPP@@YAABIABI0@Z ENDP			; CryptoPP::STDMIN<unsigned int>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL3@length:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@length
  00017	2b c2		 sub	 eax, edx

; 492  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:PROC
; Function compile flags: /Ogtp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0000b	88 0a		 mov	 BYTE PTR [edx], cl

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1511 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1512 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2008 : 		{	// determine current pointer to buffer for nonmutable string

  00000	8b c1		 mov	 eax, ecx

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00002	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00006	72 02		 jb	 SHORT $LN4@Myptr
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Myptr:

; 2011 : 		}

  0000a	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2002 : 		{	// determine current pointer to buffer for mutable string

  00000	8b c1		 mov	 eax, ecx

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00002	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00006	72 02		 jb	 SHORT $LN4@Myptr@2
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Myptr@2:

; 2005 : 		}

  0000a	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2020 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1972 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1973 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 2d		 je	 SHORT $LN2@Inside
  0000b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00011	72 04		 jb	 SHORT $LN8@Inside
  00013	8b 01		 mov	 eax, DWORD PTR [ecx]
  00015	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00017	8b c1		 mov	 eax, ecx
$LN9@Inside:
  00019	3b f0		 cmp	 esi, eax
  0001b	72 1b		 jb	 SHORT $LN2@Inside
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	72 04		 jb	 SHORT $LN12@Inside
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	eb 02		 jmp	 SHORT $LN13@Inside
$LN12@Inside:
  00026	8b c1		 mov	 eax, ecx
$LN13@Inside:
  00028	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002b	03 c8		 add	 ecx, eax
  0002d	3b ce		 cmp	 ecx, esi
  0002f	76 07		 jbe	 SHORT $LN2@Inside

; 1975 : 		else
; 1976 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 1977 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN2@Inside:

; 1974 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 1977 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2015 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T166102 = -12						; size = 12
$T166107 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3a		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	83 f9 ff	 cmp	 ecx, -1
  00012	77 0d		 ja	 SHORT $LN1@Allocate
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001f	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00021	8d 45 08	 lea	 eax, DWORD PTR $T166107[ebp]
  00024	50		 push	 eax
  00025	8d 4d f4	 lea	 ecx, DWORD PTR $T166102[ebp]
  00028	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T166107[ebp], 0
  0002f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00034	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00039	8d 4d f4	 lea	 ecx, DWORD PTR $T166102[ebp]
  0003c	51		 push	 ecx
  0003d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T166102[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00044	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?BlockSize@CipherModeBase@CryptoPP@@IBEIXZ	; CryptoPP::CipherModeBase::BlockSize
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
;	COMDAT ?BlockSize@CipherModeBase@CryptoPP@@IBEIXZ
_TEXT	SEGMENT
?BlockSize@CipherModeBase@CryptoPP@@IBEIXZ PROC		; CryptoPP::CipherModeBase::BlockSize, COMDAT
; _this$ = ecx

; 64   : 	inline unsigned int BlockSize() const {assert(m_register.size() > 0); return (unsigned int)m_register.size();}

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	c3		 ret	 0
?BlockSize@CipherModeBase@CryptoPP@@IBEIXZ ENDP		; CryptoPP::CipherModeBase::BlockSize
_TEXT	ENDS
PUBLIC	??0SymmetricCipher@CryptoPP@@QAE@XZ		; CryptoPP::SymmetricCipher::SymmetricCipher
; Function compile flags: /Ogtp
;	COMDAT ??0SymmetricCipher@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0SymmetricCipher@CryptoPP@@QAE@XZ PROC		; CryptoPP::SymmetricCipher::SymmetricCipher, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 01		 push	 1
  00005	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00008	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi
  00010	c3		 ret	 0
??0SymmetricCipher@CryptoPP@@QAE@XZ ENDP		; CryptoPP::SymmetricCipher::SymmetricCipher
_TEXT	ENDS
PUBLIC	??1SymmetricCipher@CryptoPP@@UAE@XZ		; CryptoPP::SymmetricCipher::~SymmetricCipher
; Function compile flags: /Ogtp
;	COMDAT ??1SymmetricCipher@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1SymmetricCipher@CryptoPP@@UAE@XZ PROC		; CryptoPP::SymmetricCipher::~SymmetricCipher, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1SymmetricCipher@CryptoPP@@UAE@XZ ENDP		; CryptoPP::SymmetricCipher::~SymmetricCipher
_TEXT	ENDS
PUBLIC	??1?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
??1?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
_TEXT	ENDS
PUBLIC	??1BlockCipher@CryptoPP@@UAE@XZ			; CryptoPP::BlockCipher::~BlockCipher
; Function compile flags: /Ogtp
;	COMDAT ??1BlockCipher@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1BlockCipher@CryptoPP@@UAE@XZ PROC			; CryptoPP::BlockCipher::~BlockCipher, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1BlockCipher@CryptoPP@@UAE@XZ ENDP			; CryptoPP::BlockCipher::~BlockCipher
_TEXT	ENDS
PUBLIC	?deallocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::AllocatorWithCleanup<unsigned char,0>::deallocate
EXTRN	?UnalignedDeallocate@CryptoPP@@YAXPAX@Z:PROC	; CryptoPP::UnalignedDeallocate
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ?deallocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEXPAXI@Z PROC ; CryptoPP::AllocatorWithCleanup<unsigned char,0>::deallocate, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		SecureWipeArray((pointer)p, n);

  00003	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00009	57		 push	 edi
  0000a	8b fa		 mov	 edi, edx
  0000c	32 c0		 xor	 al, al

; 106  : 
; 107  : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 108  : 		if (T_Align16 && n*sizeof(T) >= 16)
; 109  : 			return AlignedDeallocate(p);
; 110  : #endif
; 111  : 
; 112  : 		UnalignedDeallocate(p);

  0000e	52		 push	 edx
  0000f	f3 aa		 rep stosb
  00011	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00016	83 c4 04	 add	 esp, 4
  00019	5f		 pop	 edi

; 113  : 	}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?deallocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEXPAXI@Z ENDP ; CryptoPP::AllocatorWithCleanup<unsigned char,0>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEXPAXI@Z ; CryptoPP::AllocatorWithCleanup<unsigned char,1>::deallocate
EXTRN	?AlignedDeallocate@CryptoPP@@YAXPAX@Z:PROC	; CryptoPP::AlignedDeallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEXPAXI@Z PROC ; CryptoPP::AllocatorWithCleanup<unsigned char,1>::deallocate, COMDAT
; _this$ = ecx

; 104  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 		SecureWipeArray((pointer)p, n);

  00003	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _n$[ebp]
  0000a	57		 push	 edi
  0000b	32 c0		 xor	 al, al
  0000d	8b ce		 mov	 ecx, esi
  0000f	8b fa		 mov	 edi, edx
  00011	f3 aa		 rep stosb
  00013	5f		 pop	 edi

; 106  : 
; 107  : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 108  : 		if (T_Align16 && n*sizeof(T) >= 16)

  00014	83 fe 10	 cmp	 esi, 16			; 00000010H
  00017	5e		 pop	 esi

; 109  : 			return AlignedDeallocate(p);

  00018	52		 push	 edx
  00019	72 0c		 jb	 SHORT $LN1@deallocate
  0001b	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate

; 110  : #endif
; 111  : 
; 112  : 		UnalignedDeallocate(p);

  00020	83 c4 04	 add	 esp, 4

; 113  : 	}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN1@deallocate:

; 110  : #endif
; 111  : 
; 112  : 		UnalignedDeallocate(p);

  00027	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0002c	83 c4 04	 add	 esp, 4

; 113  : 	}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?deallocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEXPAXI@Z ENDP ; CryptoPP::AllocatorWithCleanup<unsigned char,1>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::deallocate, COMDAT
; _this$ = ecx

; 193  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 194  : 		if (p == GetAlignedArray())

  00004	8b 7d 08	 mov	 edi, DWORD PTR _p$[ebp]
  00007	3b f9		 cmp	 edi, ecx
  00009	75 0b		 jne	 SHORT $LN25@deallocate@2

; 195  : 		{
; 196  : 			assert(n <= S);
; 197  : 			assert(m_allocated);
; 198  : 			m_allocated = false;

  0000b	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0

; 199  : 			SecureWipeArray((pointer)p, n);

  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00012	32 c0		 xor	 al, al
  00014	f3 aa		 rep stosb
$LN25@deallocate@2:
  00016	5f		 pop	 edi

; 200  : 		}
; 201  : 		else
; 202  : 			m_fallbackAllocator.deallocate(p, n);
; 203  : 	}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?deallocate@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::deallocate
_TEXT	ENDS
PUBLIC	??0BlockCipher@CryptoPP@@QAE@XZ			; CryptoPP::BlockCipher::BlockCipher
; Function compile flags: /Ogtp
;	COMDAT ??0BlockCipher@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0BlockCipher@CryptoPP@@QAE@XZ PROC			; CryptoPP::BlockCipher::BlockCipher, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 01		 push	 1
  00005	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00008	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi
  00010	c3		 ret	 0
??0BlockCipher@CryptoPP@@QAE@XZ ENDP			; CryptoPP::BlockCipher::BlockCipher
_TEXT	ENDS
PUBLIC	?allocate@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEPAEIPBX@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEPAEIPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEPAEIPBX@Z PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::allocate, COMDAT
; _this$ = ecx

; 182  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  : 		if (n <= S && !m_allocated)

  00003	83 7d 08 08	 cmp	 DWORD PTR _n$[ebp], 8
  00007	8b c1		 mov	 eax, ecx
  00009	77 0e		 ja	 SHORT $LN2@allocate
  0000b	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  0000f	75 08		 jne	 SHORT $LN2@allocate

; 184  : 		{
; 185  : 			m_allocated = true;

  00011	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1

; 190  : 	}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN2@allocate:

; 186  : 			return GetAlignedArray();
; 187  : 		}
; 188  : 		else
; 189  : 			return m_fallbackAllocator.allocate(n, hint);

  00019	33 c0		 xor	 eax, eax

; 190  : 	}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?allocate@?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEPAEIPBX@Z ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0>::allocate
_TEXT	ENDS
PUBLIC	??0?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@PAV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@1@@Z ; CryptoPP::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\smartptr.h
;	COMDAT ??0?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@PAV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@1@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@PAV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@1@@Z PROC ; CryptoPP::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >, COMDAT
; _this$ = ecx

; 58   : 	value_ptr(T *p = NULL) : member_ptr<T>(p) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@PAV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@1@@Z ENDP ; CryptoPP::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
_TEXT	ENDS
PUBLIC	??0?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ??0?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
??0?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >, COMDAT
; _this$ = ecx

; 246  : 	explicit SecBlock(size_type size=0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  00008	c6 40 09 00	 mov	 BYTE PTR [eax+9], 0
  0000c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0000f	83 f9 08	 cmp	 ecx, 8
  00012	77 0b		 ja	 SHORT $LN6@SecBlock
  00014	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  00018	89 40 14	 mov	 DWORD PTR [eax+20], eax

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4

; 246  : 	explicit SecBlock(size_type size=0)

$LN6@SecBlock:
  0001f	33 c9		 xor	 ecx, ecx
  00021	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??0?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1952 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1953 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1954 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1108 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1109 : 		if (this->_Mysize < _Off)

  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000c	57		 push	 edi
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0a		 jae	 SHORT $LN3@erase

; 1110 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN28@erase:
$LN3@erase:

; 1111 : 		if (this->_Mysize - _Off < _Count)

  0001b	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0001e	2b c1		 sub	 eax, ecx
  00020	3b c7		 cmp	 eax, edi
  00022	73 02		 jae	 SHORT $LN2@erase

; 1112 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00024	8b f8		 mov	 edi, eax
$LN2@erase:

; 1113 : 		if (0 < _Count)

  00026	85 ff		 test	 edi, edi
  00028	74 50		 je	 SHORT $LN25@erase

; 1114 : 			{	// move elements down
; 1115 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1116 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	53		 push	 ebx
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b de		 mov	 ebx, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c7		 sub	 eax, edi
  00046	03 d9		 add	 ebx, ecx
  00048	50		 push	 eax
  00049	03 df		 add	 ebx, edi
  0004b	03 d1		 add	 edx, ecx
  0004d	53		 push	 ebx
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _memmove

; 1117 : 			size_type _Newsize = this->_Mysize - _Count;

  00054	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	2b c7		 sub	 eax, edi

; 1118 : 			_Eos(_Newsize);

  0005c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00060	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00063	5b		 pop	 ebx
  00064	72 0e		 jb	 SHORT $LN23@erase
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0006c	5f		 pop	 edi

; 1119 : 			}
; 1120 : 		return (*this);

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1121 : 		}

  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8

; 1118 : 			_Eos(_Newsize);

$LN23@erase:
  00074	8b ce		 mov	 ecx, esi
  00076	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1119 : 			}
; 1120 : 		return (*this);

  0007a	5f		 pop	 edi
  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi

; 1121 : 		}

  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1516 : 		size_type _Num = this->_Alval.max_size();
; 1517 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1518 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
$T166442 = -12						; size = 12
$T166434 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 3a		 je	 SHORT $LN1@allocate@2
  0000f	83 f9 ff	 cmp	 ecx, -1
  00012	77 0d		 ja	 SHORT $LN3@allocate@2
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	75 28		 jne	 SHORT $LN1@allocate@2
$LN3@allocate@2:
  00021	8d 45 08	 lea	 eax, DWORD PTR $T166434[ebp]
  00024	50		 push	 eax
  00025	8d 4d f4	 lea	 ecx, DWORD PTR $T166442[ebp]
  00028	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T166434[ebp], 0
  0002f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00034	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00039	8d 4d f4	 lea	 ecx, DWORD PTR $T166442[ebp]
  0003c	51		 push	 ecx
  0003d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T166442[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00044	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate@2:
$LN1@allocate@2:

; 188  : 		}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN12@allocate@2:
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??1?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@UAE@XZ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::~TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>
; Function compile flags: /Ogtp
;	COMDAT ??1?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::~TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::~TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>
_TEXT	ENDS
PUBLIC	??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT
; _this$ = ecx

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	57		 push	 edi
  00007	8b fa		 mov	 edi, edx
  00009	32 c0		 xor	 al, al
  0000b	52		 push	 edx
  0000c	f3 aa		 rep stosb
  0000e	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00013	83 c4 04	 add	 esp, 4
  00016	5f		 pop	 edi
  00017	c3		 ret	 0
??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
_TEXT	ENDS
PUBLIC	??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >, COMDAT
; _this$ = ecx

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	56		 push	 esi
  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	57		 push	 edi
  00008	32 c0		 xor	 al, al
  0000a	8b fe		 mov	 edi, esi
  0000c	8b ca		 mov	 ecx, edx
  0000e	f3 aa		 rep stosb
  00010	56		 push	 esi
  00011	83 fa 10	 cmp	 edx, 16			; 00000010H
  00014	72 0b		 jb	 SHORT $LN3@SecBlock@2
  00016	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  0001b	83 c4 04	 add	 esp, 4
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	c3		 ret	 0
$LN3@SecBlock@2:
  00021	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00026	83 c4 04	 add	 esp, 4
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
_TEXT	ENDS
PUBLIC	??1?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::~SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::~SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >, COMDAT
; _this$ = ecx

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00000	57		 push	 edi
  00001	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00004	3b f9		 cmp	 edi, ecx
  00006	75 0b		 jne	 SHORT $LN27@SecBlock@3
  00008	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  0000c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0000f	32 c0		 xor	 al, al
  00011	f3 aa		 rep stosb
$LN27@SecBlock@3:
  00013	5f		 pop	 edi
  00014	c3		 ret	 0
??1?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::~SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
_TEXT	ENDS
PUBLIC	??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@QAE@XZ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>
; Function compile flags: /Ogtp
;	COMDAT ??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 01		 push	 1
  00005	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00008	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi
  00010	c3		 ret	 0
??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>
_TEXT	ENDS
PUBLIC	??0?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >, COMDAT
; _this$ = ecx

; 425  : 	explicit FixedSizeSecBlock() : SecBlock<T, A>(S) {}

  00000	8b c1		 mov	 eax, ecx
  00002	c7 40 10 08 00
	00 00		 mov	 DWORD PTR [eax+16], 8
  00009	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  0000d	89 40 14	 mov	 DWORD PTR [eax+20], eax
  00010	c3		 ret	 0
??0?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1987 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1988 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 22		 je	 SHORT $LN9@Tidy

; 1989 : 			;
; 1990 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1c		 jb	 SHORT $LN9@Tidy

; 1991 : 			{	// copy any leftovers to small buffer and deallocate
; 1992 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1993 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1994 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1995 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	5b		 pop	 ebx
$LN9@Tidy:

; 1996 : 			}
; 1997 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1998 : 		_Eos(_Newsize);

  00032	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00035	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003c	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 1999 : 		}

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
$T166887 = -40						; size = 12
__Newres$ = -28						; size = 4
$T166864 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1918 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 1919 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 1920 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN9@Copy

; 1921 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax
  0003f	eb 27		 jmp	 SHORT $LN39@Copy
$LN9@Copy:

; 1922 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00041	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b ca		 cmp	 ecx, edx
  00053	76 13		 jbe	 SHORT $LN39@Copy

; 1923 : 			;
; 1924 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx

; 1925 : 			_Newres = this->_Myres
; 1926 : 				+ this->_Myres / 2;	// grow exponentially if possible

  0005c	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
  0005f	3b d8		 cmp	 ebx, eax
  00061	76 05		 jbe	 SHORT $LN39@Copy

; 1927 : 		else
; 1928 : 			_Newres = max_size();	// settle for max_size()

  00063	be fe ff ff ff	 mov	 esi, -2			; fffffffeH
$LN39@Copy:

; 1929 : 
; 1930 : 		_Elem *_Ptr;
; 1931 : 		_TRY_BEGIN

  00068	33 c0		 xor	 eax, eax

; 1932 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0006a	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0006d	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax
  00070	3b c8		 cmp	 ecx, eax
  00072	76 12		 jbe	 SHORT $LN47@Copy
  00074	83 f9 ff	 cmp	 ecx, -1
  00077	77 12		 ja	 SHORT $LN46@Copy
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007f	83 c4 04	 add	 esp, 4
  00082	85 c0		 test	 eax, eax
  00084	74 05		 je	 SHORT $LN46@Copy
$LN47@Copy:
  00086	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00089	eb 51		 jmp	 SHORT $LN19@Copy
$LN46@Copy:
  0008b	8d 4d e8	 lea	 ecx, DWORD PTR $T166864[ebp]
  0008e	51		 push	 ecx
  0008f	8d 4d d8	 lea	 ecx, DWORD PTR $T166887[ebp]
  00092	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T166864[ebp], 0
  00099	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0009e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  000a3	8d 55 d8	 lea	 edx, DWORD PTR $T166887[ebp]
  000a6	52		 push	 edx
  000a7	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T166887[ebp], OFFSET ??_7bad_alloc@std@@6B@
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN112@Copy:
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1933 : 		_CATCH_ALL
; 1934 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  000b3	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]

; 1935 : 			_TRY_BEGIN
; 1936 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  000b6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	89 45 e4	 mov	 DWORD PTR __Newres$[ebp], eax
  000bc	40		 inc	 eax
  000bd	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  000c0	50		 push	 eax
  000c1	83 c1 18	 add	 ecx, 24			; 00000018H
  000c4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000c8	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000cd	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 1940 : 			_CATCH_END
; 1941 : 		_CATCH_END

  000d0	b8 00 00 00 00	 mov	 eax, $LN107@Copy
  000d5	c3		 ret	 0
$LN107@Copy:
  000d6	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000d9	8b 75 e4	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1942 : 
; 1943 : 		if (0 < _Oldlen)

  000dc	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000df	85 db		 test	 ebx, ebx
  000e1	74 1a		 je	 SHORT $LN78@Copy

; 1944 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000e3	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  000e7	72 04		 jb	 SHORT $LN76@Copy
  000e9	8b 07		 mov	 eax, DWORD PTR [edi]
  000eb	eb 02		 jmp	 SHORT $LN77@Copy
$LN76@Copy:
  000ed	8b c7		 mov	 eax, edi
$LN77@Copy:
  000ef	53		 push	 ebx
  000f0	50		 push	 eax
  000f1	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _memcpy
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN78@Copy:

; 1945 : 		_Tidy(true);

  000fd	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00101	72 0b		 jb	 SHORT $LN88@Copy
  00103	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00105	51		 push	 ecx
  00106	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010b	83 c4 04	 add	 esp, 4
$LN88@Copy:

; 1946 : 		this->_Bx._Ptr = _Ptr;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00111	c6 07 00	 mov	 BYTE PTR [edi], 0
  00114	89 07		 mov	 DWORD PTR [edi], eax

; 1947 : 		this->_Myres = _Newres;

  00116	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 1948 : 		_Eos(_Oldlen);

  00119	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
  0011c	83 fe 10	 cmp	 esi, 16			; 00000010H
  0011f	72 02		 jb	 SHORT $LN102@Copy
  00121	8b f8		 mov	 edi, eax
$LN102@Copy:
  00123	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 1949 : 		}

  00127	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0012a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00131	59		 pop	 ecx
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1937 : 			_CATCH_ALL
; 1938 : 			_Tidy(true);	// failed again, discard storage and reraise

  0013b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0013e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00142	72 0b		 jb	 SHORT $LN64@Copy
  00144	8b 16		 mov	 edx, DWORD PTR [esi]
  00146	52		 push	 edx
  00147	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0014c	83 c4 04	 add	 esp, 4
$LN64@Copy:

; 1939 : 			_RERAISE;

  0014f	6a 00		 push	 0
  00151	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00158	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0015f	6a 00		 push	 0
  00161	c6 06 00	 mov	 BYTE PTR [esi], 0
  00164	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN113@Copy:
$LN111@Copy:
  00169	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??1CipherModeBase@CryptoPP@@UAE@XZ		; CryptoPP::CipherModeBase::~CipherModeBase
; Function compile flags: /Ogtp
;	COMDAT ??1CipherModeBase@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1CipherModeBase@CryptoPP@@UAE@XZ PROC			; CryptoPP::CipherModeBase::~CipherModeBase, COMDAT
; _this$ = ecx
  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	56		 push	 esi
  00004	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  00007	57		 push	 edi
  00008	32 c0		 xor	 al, al
  0000a	8b fe		 mov	 edi, esi
  0000c	8b ca		 mov	 ecx, edx
  0000e	f3 aa		 rep stosb
  00010	56		 push	 esi
  00011	83 fa 10	 cmp	 edx, 16			; 00000010H
  00014	72 0b		 jb	 SHORT $LN6@CipherMode
  00016	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  0001b	83 c4 04	 add	 esp, 4
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	c3		 ret	 0
$LN6@CipherMode:
  00021	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00026	83 c4 04	 add	 esp, 4
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??1CipherModeBase@CryptoPP@@UAE@XZ ENDP			; CryptoPP::CipherModeBase::~CipherModeBase
_TEXT	ENDS
PUBLIC	??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ	; CryptoPP::BlockOrientedCipherModeBase::~BlockOrientedCipherModeBase
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ$0
__ehfuncinfo$??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ PROC	; CryptoPP::BlockOrientedCipherModeBase::~BlockOrientedCipherModeBase, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0002d	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00030	8b fa		 mov	 edi, edx
  00032	32 c0		 xor	 al, al
  00034	52		 push	 edx
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	f3 aa		 rep stosb
  0003e	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00043	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00046	8b 76 14	 mov	 esi, DWORD PTR [esi+20]
  00049	83 c4 04	 add	 esp, 4
  0004c	32 c0		 xor	 al, al
  0004e	8b fe		 mov	 edi, esi
  00050	8b ca		 mov	 ecx, edx
  00052	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00059	f3 aa		 rep stosb
  0005b	56		 push	 esi
  0005c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0005f	72 19		 jb	 SHORT $LN33@BlockOrien
  00061	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  00066	83 c4 04	 add	 esp, 4
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
$LN33@BlockOrien:
  0007a	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0007f	83 c4 04	 add	 esp, 4
  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CipherModeBase@CryptoPP@@UAE@XZ
__ehhandler$??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ ENDP	; CryptoPP::BlockOrientedCipherModeBase::~BlockOrientedCipherModeBase
PUBLIC	??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::~FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::~FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >, COMDAT
; _this$ = ecx
  00000	57		 push	 edi
  00001	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00004	3b f9		 cmp	 edi, ecx
  00006	75 0b		 jne	 SHORT $LN30@FixedSizeS
  00008	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  0000c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0000f	32 c0		 xor	 al, al
  00011	f3 aa		 rep stosb
$LN30@FixedSizeS:
  00013	5f		 pop	 edi
  00014	c3		 ret	 0
??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::~FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
_TEXT	ENDS
PUBLIC	??1?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UAE@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::~SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UAE@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::~SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::~SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >
_TEXT	ENDS
PUBLIC	??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 01		 push	 1
  00005	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00008	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi
  00010	c3		 ret	 0
??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 752  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 753  : 		_Tidy(true);

  00003	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00007	72 0b		 jb	 SHORT $LN11@basic_stri
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4
$LN11@basic_stri:
  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0001b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00022	c6 06 00	 mov	 BYTE PTR [esi], 0
  00025	5e		 pop	 esi

; 754  : 		}

  00026	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogtp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1958 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1959 : 		if (max_size() < _Newsize)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000d	76 0a		 jbe	 SHORT $LN6@Grow

; 1960 : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00014	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN49@Grow:
$LN6@Grow:

; 1961 : 		if (this->_Myres < _Newsize)

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	3b c3		 cmp	 eax, ebx
  0001e	73 18		 jae	 SHORT $LN5@Grow

; 1962 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  00020	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  0002a	33 c9		 xor	 ecx, ecx
  0002c	3b cb		 cmp	 ecx, ebx
  0002e	1b c0		 sbb	 eax, eax
  00030	5e		 pop	 esi
  00031	f7 d8		 neg	 eax
  00033	5b		 pop	 ebx

; 1969 : 		}

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN5@Grow:

; 1963 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00038	80 7d 0c 00	 cmp	 BYTE PTR __Trim$[ebp], 0
  0003c	74 4e		 je	 SHORT $LN3@Grow
  0003e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00041	73 49		 jae	 SHORT $LN3@Grow

; 1964 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1965 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00043	57		 push	 edi
  00044	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00047	3b df		 cmp	 ebx, edi
  00049	73 02		 jae	 SHORT $LN9@Grow
  0004b	8b fb		 mov	 edi, ebx
$LN9@Grow:
  0004d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00050	72 1d		 jb	 SHORT $LN30@Grow
  00052	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00054	85 ff		 test	 edi, edi
  00056	74 0b		 je	 SHORT $LN28@Grow
  00058	57		 push	 edi
  00059	53		 push	 ebx
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _memcpy
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN28@Grow:
  00063	53		 push	 ebx
  00064	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00069	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0006c	83 c4 04	 add	 esp, 4
$LN30@Grow:
  0006f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00072	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  00079	33 c9		 xor	 ecx, ecx
  0007b	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 1969 : 		}

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
$LN3@Grow:

; 1966 : 		else if (_Newsize == 0)

  0008c	85 db		 test	 ebx, ebx
  0008e	75 0d		 jne	 SHORT $LN46@Grow

; 1967 : 			_Eos(0);	// new size is zero, just null terminate

  00090	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00093	83 f8 10	 cmp	 eax, 16			; 00000010H
  00096	72 02		 jb	 SHORT $LN44@Grow
  00098	8b 36		 mov	 esi, DWORD PTR [esi]
$LN44@Grow:
  0009a	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN46@Grow:

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  0009d	33 c9		 xor	 ecx, ecx
  0009f	3b cb		 cmp	 ecx, ebx
  000a1	1b c0		 sbb	 eax, eax
  000a3	5e		 pop	 esi
  000a4	f7 d8		 neg	 eax
  000a6	5b		 pop	 ebx

; 1969 : 		}

  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN48@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??_7Exception@CryptoPP@@6B@			; CryptoPP::Exception::`vftable'
PUBLIC	??1Exception@CryptoPP@@UAE@XZ			; CryptoPP::Exception::~Exception
PUBLIC	??_R4Exception@CryptoPP@@6B@			; CryptoPP::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVException@CryptoPP@@@8			; CryptoPP::Exception `RTTI Type Descriptor'
PUBLIC	??_R3Exception@CryptoPP@@8			; CryptoPP::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@CryptoPP@@8			; CryptoPP::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@CryptoPP@@8		; CryptoPP::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@Exception@CryptoPP@@UBEPBDXZ		; CryptoPP::Exception::what
EXTRN	??_EException@CryptoPP@@UAEPAXI@Z:PROC		; CryptoPP::Exception::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@CryptoPP@@8 DD FLAT:??_R0?AVException@CryptoPP@@@8 ; CryptoPP::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R2Exception@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8 ; CryptoPP::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R3Exception@CryptoPP@@8 DD 00H			; CryptoPP::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVException@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVException@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Exception@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4Exception@CryptoPP@@6B@ DD 00H			; CryptoPP::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@CryptoPP@@@8
	DD	FLAT:??_R3Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_7Exception@CryptoPP@@6B@
CONST	SEGMENT
??_7Exception@CryptoPP@@6B@ DD FLAT:??_R4Exception@CryptoPP@@6B@ ; CryptoPP::Exception::`vftable'
	DD	FLAT:??_EException@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
CONST	ENDS
;	COMDAT ??1Exception@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Exception@CryptoPP@@UAE@XZ PROC			; CryptoPP::Exception::~Exception, COMDAT
; _this$ = ecx

; 132  : 	virtual ~Exception() throw() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN13@Exception
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN13@Exception:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1Exception@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Exception::~Exception
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1495 : 		{	// return pointer to null-terminated nonmutable array

  00000	8b c1		 mov	 eax, ecx

; 1496 : 		return (_Myptr());

  00002	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00006	72 02		 jb	 SHORT $LN6@c_str
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@c_str:

; 1497 : 		}

  0000a	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
_TEXT	ENDS
;	COMDAT ?what@Exception@CryptoPP@@UBEPBDXZ
_TEXT	SEGMENT
?what@Exception@CryptoPP@@UBEPBDXZ PROC			; CryptoPP::Exception::what, COMDAT
; _this$ = ecx

; 133  : 	const char *what() const throw() {return (m_what.c_str());}

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00007	72 02		 jb	 SHORT $LN8@what
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@what:
  0000b	c3		 ret	 0
?what@Exception@CryptoPP@@UBEPBDXZ ENDP			; CryptoPP::Exception::what
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GException@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GException@CryptoPP@@UAEPAXI@Z PROC			; CryptoPP::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  0000c	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  00010	72 0c		 jb	 SHORT $LN16@scalar@2
  00012	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN16@scalar@2:
  0001e	33 c0		 xor	 eax, eax
  00020	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00027	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0002a	8b ce		 mov	 ecx, esi
  0002c	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002f	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00034	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00038	74 09		 je	 SHORT $LN28@scalar@2
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00040	83 c4 04	 add	 esp, 4
$LN28@scalar@2:
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??_GException@CryptoPP@@UAEPAXI@Z ENDP			; CryptoPP::Exception::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1ECB_OneWay@CryptoPP@@UAE@XZ			; CryptoPP::ECB_OneWay::~ECB_OneWay
; Function compile flags: /Ogtp
;	COMDAT ??1ECB_OneWay@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1ECB_OneWay@CryptoPP@@UAE@XZ PROC			; CryptoPP::ECB_OneWay::~ECB_OneWay, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
??1ECB_OneWay@CryptoPP@@UAE@XZ ENDP			; CryptoPP::ECB_OneWay::~ECB_OneWay
_TEXT	ENDS
PUBLIC	??1?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::~AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::~AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::~AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >
_TEXT	ENDS
PUBLIC	??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 01		 push	 1
  00005	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00008	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi
  00010	c3		 ret	 0
??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 892  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 893  : 		if (_Right.size() < _Roff)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Roff$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000d	57		 push	 edi
  0000e	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]
  00011	3b fb		 cmp	 edi, ebx
  00013	73 0a		 jae	 SHORT $LN5@assign

; 894  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN83@assign:
$LN5@assign:

; 895  : 		size_type _Num = _Right.size() - _Roff;
; 896  : 		if (_Count < _Num)

  0001f	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00022	2b fb		 sub	 edi, ebx
  00024	3b c7		 cmp	 eax, edi
  00026	73 02		 jae	 SHORT $LN4@assign

; 897  : 			_Num = _Count;	// trim _Num to size

  00028	8b f8		 mov	 edi, eax
$LN4@assign:

; 898  : 
; 899  : 		if (this == &_Right)

  0002a	3b f1		 cmp	 esi, ecx
  0002c	75 1f		 jne	 SHORT $LN3@assign

; 900  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002e	6a ff		 push	 -1
  00030	03 fb		 add	 edi, ebx
  00032	57		 push	 edi
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003a	53		 push	 ebx
  0003b	6a 00		 push	 0
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00044	5f		 pop	 edi

; 905  : 			}
; 906  : 		return (*this);

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx

; 907  : 		}

  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 901  : 		else if (_Grow(_Num))

  0004d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00050	76 0a		 jbe	 SHORT $LN20@assign
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00057	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN84@assign:
$LN20@assign:
  0005c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005f	3b c7		 cmp	 eax, edi
  00061	73 28		 jae	 SHORT $LN19@assign
  00063	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00066	50		 push	 eax
  00067	57		 push	 edi
  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00072	85 ff		 test	 edi, edi
  00074	74 68		 je	 SHORT $LN78@assign
$LN82@assign:

; 902  : 			{	// make room and assign new stuff
; 903  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00076	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007b	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  0007e	72 02		 jb	 SHORT $LN64@assign
  00080	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN64@assign:
  00082	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00085	72 2a		 jb	 SHORT $LN68@assign
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	eb 28		 jmp	 SHORT $LN69@assign

; 901  : 		else if (_Grow(_Num))

$LN19@assign:
  0008b	85 ff		 test	 edi, edi
  0008d	75 e7		 jne	 SHORT $LN82@assign
  0008f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 0e		 jb	 SHORT $LN58@assign
  00097	8b 06		 mov	 eax, DWORD PTR [esi]
  00099	5f		 pop	 edi
  0009a	c6 00 00	 mov	 BYTE PTR [eax], 0

; 905  : 			}
; 906  : 		return (*this);

  0009d	8b c6		 mov	 eax, esi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx

; 907  : 		}

  000a1	5d		 pop	 ebp
  000a2	c2 0c 00	 ret	 12			; 0000000cH

; 901  : 		else if (_Grow(_Num))

$LN58@assign:
  000a5	5f		 pop	 edi
  000a6	8b c6		 mov	 eax, esi
  000a8	5e		 pop	 esi
  000a9	c6 00 00	 mov	 BYTE PTR [eax], 0
  000ac	5b		 pop	 ebx

; 907  : 		}

  000ad	5d		 pop	 ebp
  000ae	c2 0c 00	 ret	 12			; 0000000cH

; 902  : 			{	// make room and assign new stuff
; 903  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$LN68@assign:
  000b1	8b c6		 mov	 eax, esi
$LN69@assign:
  000b3	57		 push	 edi
  000b4	03 cb		 add	 ecx, ebx
  000b6	51		 push	 ecx
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _memcpy
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 904  : 			_Eos(_Num);

  000c0	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000c4	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000c7	72 0f		 jb	 SHORT $LN76@assign
  000c9	8b 06		 mov	 eax, DWORD PTR [esi]
  000cb	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000cf	5f		 pop	 edi

; 905  : 			}
; 906  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 907  : 		}

  000d4	5d		 pop	 ebp
  000d5	c2 0c 00	 ret	 12			; 0000000cH

; 904  : 			_Eos(_Num);

$LN76@assign:
  000d8	8b c6		 mov	 eax, esi
  000da	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN78@assign:

; 905  : 			}
; 906  : 		return (*this);

  000de	5f		 pop	 edi
  000df	8b c6		 mov	 eax, esi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx

; 907  : 		}

  000e3	5d		 pop	 ebp
  000e4	c2 0c 00	 ret	 12			; 0000000cH
$LN80@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??1?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::~AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::~AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
??1?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::~AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >
_TEXT	ENDS
PUBLIC	??1?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::~AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::~AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
??1?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::~AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >
_TEXT	ENDS
PUBLIC	??1?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>
; Function compile flags: /Ogtp
;	COMDAT ??1?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 543  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 544  : 		_Tidy();
; 545  : 		assign(_Right, 0, npos);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	6a ff		 push	 -1
  00009	8b f1		 mov	 esi, ecx
  0000b	6a 00		 push	 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001b	50		 push	 eax
  0001c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 546  : 		}

  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@XZ ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>
; Function compile flags: /Ogtp
;	COMDAT ??0?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 01		 push	 1
  00005	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00008	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi
  00010	c3		 ret	 0
??0?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 910  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 911  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 912  : 		if (_Count != 0)
; 913  : 			_DEBUG_POINTER(_Ptr);
; 914  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 915  : 
; 916  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 59		 je	 SHORT $LN85@assign@2
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00014	72 04		 jb	 SHORT $LN12@assign@2
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN13@assign@2
$LN12@assign@2:
  0001a	8b c6		 mov	 eax, esi
$LN13@assign@2:
  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 47		 jb	 SHORT $LN85@assign@2
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN16@assign@2
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN17@assign@2
$LN16@assign@2:
  00029	8b c6		 mov	 eax, esi
$LN17@assign@2:
  0002b	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0002e	03 d0		 add	 edx, eax
  00030	3b d3		 cmp	 edx, ebx
  00032	76 33		 jbe	 SHORT $LN85@assign@2

; 917  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00037	72 17		 jb	 SHORT $LN20@assign@2
  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0003e	51		 push	 ecx
  0003f	2b d8		 sub	 ebx, eax
  00041	53		 push	 ebx
  00042	56		 push	 esi
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 925  : 		}

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8

; 917  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

$LN20@assign@2:
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00053	8b c6		 mov	 eax, esi
  00055	51		 push	 ecx
  00056	2b d8		 sub	 ebx, eax
  00058	53		 push	 ebx
  00059	56		 push	 esi
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx

; 925  : 		}

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
$LN85@assign@2:
  00067	57		 push	 edi

; 918  : 
; 919  : 		if (_Grow(_Count))

  00068	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0006b	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0006e	76 0a		 jbe	 SHORT $LN27@assign@2
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00075	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN89@assign@2:
$LN27@assign@2:
  0007a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0007d	3b c7		 cmp	 eax, edi
  0007f	73 1a		 jae	 SHORT $LN26@assign@2
  00081	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00084	52		 push	 edx
  00085	57		 push	 edi
  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0008d	85 ff		 test	 edi, edi
  0008f	74 5b		 je	 SHORT $LN82@assign@2
$LN88@assign@2:

; 920  : 			{	// make room and assign new stuff
; 921  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00091	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00095	72 2a		 jb	 SHORT $LN72@assign@2
  00097	8b 06		 mov	 eax, DWORD PTR [esi]
  00099	eb 28		 jmp	 SHORT $LN73@assign@2

; 918  : 
; 919  : 		if (_Grow(_Count))

$LN26@assign@2:
  0009b	85 ff		 test	 edi, edi
  0009d	75 f2		 jne	 SHORT $LN88@assign@2
  0009f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000a2	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a5	72 0e		 jb	 SHORT $LN65@assign@2
  000a7	8b 06		 mov	 eax, DWORD PTR [esi]
  000a9	5f		 pop	 edi
  000aa	c6 00 00	 mov	 BYTE PTR [eax], 0

; 923  : 			}
; 924  : 		return (*this);

  000ad	8b c6		 mov	 eax, esi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx

; 925  : 		}

  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8

; 918  : 
; 919  : 		if (_Grow(_Count))

$LN65@assign@2:
  000b5	5f		 pop	 edi
  000b6	8b c6		 mov	 eax, esi
  000b8	5e		 pop	 esi
  000b9	c6 00 00	 mov	 BYTE PTR [eax], 0
  000bc	5b		 pop	 ebx

; 925  : 		}

  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8

; 920  : 			{	// make room and assign new stuff
; 921  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

$LN72@assign@2:
  000c1	8b c6		 mov	 eax, esi
$LN73@assign@2:
  000c3	57		 push	 edi
  000c4	53		 push	 ebx
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _memcpy
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 922  : 			_Eos(_Count);

  000ce	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000d2	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000d5	72 0f		 jb	 SHORT $LN80@assign@2
  000d7	8b 06		 mov	 eax, DWORD PTR [esi]
  000d9	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000dd	5f		 pop	 edi

; 923  : 			}
; 924  : 		return (*this);

  000de	8b c6		 mov	 eax, esi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx

; 925  : 		}

  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8

; 922  : 			_Eos(_Count);

$LN80@assign@2:
  000e6	8b c6		 mov	 eax, esi
  000e8	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN82@assign@2:

; 923  : 			}
; 924  : 		return (*this);

  000ec	5f		 pop	 edi
  000ed	8b c6		 mov	 eax, esi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx

; 925  : 		}

  000f1	5d		 pop	 ebp
  000f2	c2 08 00	 ret	 8
$LN86@assign@2:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::Exception::Exception
EXTRN	??0exception@std@@QAE@XZ:PROC			; std::exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
xdata$x	ENDS
;	COMDAT ??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_errorType$ = 8						; size = 4
_s$ = 12						; size = 4
??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::Exception::Exception, COMDAT
; _this$ = ecx

; 131  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _errorType$[ebp]
  00031	8b 55 0c	 mov	 edx, DWORD PTR _s$[ebp]
  00034	33 c0		 xor	 eax, eax
  00036	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00039	6a ff		 push	 -1
  0003b	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0003e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00044	50		 push	 eax
  00045	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  0004c	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0004f	52		 push	 edx
  00050	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00053	88 01		 mov	 BYTE PTR [ecx], al
  00055	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005a	8b c6		 mov	 eax, esi
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	5e		 pop	 esi
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::Exception::Exception
PUBLIC	??_7InvalidArgument@CryptoPP@@6B@		; CryptoPP::InvalidArgument::`vftable'
PUBLIC	??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
PUBLIC	??_R4InvalidArgument@CryptoPP@@6B@		; CryptoPP::InvalidArgument::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVInvalidArgument@CryptoPP@@@8		; CryptoPP::InvalidArgument `RTTI Type Descriptor'
PUBLIC	??_R3InvalidArgument@CryptoPP@@8		; CryptoPP::InvalidArgument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidArgument@CryptoPP@@8		; CryptoPP::InvalidArgument::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8	; CryptoPP::InvalidArgument::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EInvalidArgument@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::InvalidArgument::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8 DD FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8 ; CryptoPP::InvalidArgument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R2InvalidArgument@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8 ; CryptoPP::InvalidArgument::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R3InvalidArgument@CryptoPP@@8 DD 00H			; CryptoPP::InvalidArgument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVInvalidArgument@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVInvalidArgument@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InvalidArgument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidArgument@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R4InvalidArgument@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4InvalidArgument@CryptoPP@@6B@ DD 00H		; CryptoPP::InvalidArgument::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8
	DD	FLAT:??_R3InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_7InvalidArgument@CryptoPP@@6B@
CONST	SEGMENT
??_7InvalidArgument@CryptoPP@@6B@ DD FLAT:??_R4InvalidArgument@CryptoPP@@6B@ ; CryptoPP::InvalidArgument::`vftable'
	DD	FLAT:??_EInvalidArgument@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
xdata$x	ENDS
;	COMDAT ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::InvalidArgument::InvalidArgument, COMDAT
; _this$ = ecx

; 148  : 	explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002e	33 c0		 xor	 eax, eax
  00030	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00039	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  00040	6a ff		 push	 -1
  00042	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00045	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  0004c	50		 push	 eax
  0004d	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00050	88 01		 mov	 BYTE PTR [ecx], al
  00052	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  00061	8b c6		 mov	 eax, esi
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5e		 pop	 esi
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::InvalidArgument::InvalidArgument
PUBLIC	??1InvalidArgument@CryptoPP@@UAE@XZ		; CryptoPP::InvalidArgument::~InvalidArgument
; Function compile flags: /Ogtp
;	COMDAT ??1InvalidArgument@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1InvalidArgument@CryptoPP@@UAE@XZ PROC		; CryptoPP::InvalidArgument::~InvalidArgument, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN15@InvalidArg
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN15@InvalidArg:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1InvalidArgument@CryptoPP@@UAE@XZ ENDP		; CryptoPP::InvalidArgument::~InvalidArgument
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GInvalidArgument@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GInvalidArgument@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::InvalidArgument::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  0000c	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  00010	72 0c		 jb	 SHORT $LN18@scalar@3
  00012	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN18@scalar@3:
  0001e	33 c0		 xor	 eax, eax
  00020	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00027	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0002a	8b ce		 mov	 ecx, esi
  0002c	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002f	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00034	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00038	74 09		 je	 SHORT $LN30@scalar@3
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00040	83 c4 04	 add	 esp, 4
$LN30@scalar@3:
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??_GInvalidArgument@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::InvalidArgument::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1Base@DES_XEX3@CryptoPP@@UAE@XZ		; CryptoPP::DES_XEX3::Base::~Base
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Base@DES_XEX3@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Base@DES_XEX3@CryptoPP@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Base@DES_XEX3@CryptoPP@@UAE@XZ$1
__ehfuncinfo$??1Base@DES_XEX3@CryptoPP@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Base@DES_XEX3@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1Base@DES_XEX3@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Base@DES_XEX3@CryptoPP@@UAE@XZ PROC			; CryptoPP::DES_XEX3::Base::~Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Base@DES_XEX3@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00034	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  00039	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0003c	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003f	32 d2		 xor	 dl, dl
  00041	3b f9		 cmp	 edi, ecx
  00043	75 0a		 jne	 SHORT $LN37@Base
  00045	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  00048	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004b	32 c0		 xor	 al, al
  0004d	f3 aa		 rep stosb
$LN37@Base:
  0004f	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00052	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00055	3b f9		 cmp	 edi, ecx
  00057	75 0a		 jne	 SHORT $LN69@Base
  00059	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  0005c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005f	32 c0		 xor	 al, al
  00061	f3 aa		 rep stosb
$LN69@Base:
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Base@DES_XEX3@CryptoPP@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1Base@DES_XEX3@CryptoPP@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??1Base@DES_XEX3@CryptoPP@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Base@DES_XEX3@CryptoPP@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Base@DES_XEX3@CryptoPP@@UAE@XZ ENDP			; CryptoPP::DES_XEX3::Base::~Base
PUBLIC	??0Base@DES_XEX3@CryptoPP@@QAE@XZ		; CryptoPP::DES_XEX3::Base::Base
; Function compile flags: /Ogtp
;	COMDAT ??0Base@DES_XEX3@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0Base@DES_XEX3@CryptoPP@@QAE@XZ PROC			; CryptoPP::DES_XEX3::Base::Base, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 01		 push	 1
  00005	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00008	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000d	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00010	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  00014	89 40 14	 mov	 DWORD PTR [eax+20], eax
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0001f	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00022	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00025	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  00029	89 40 14	 mov	 DWORD PTR [eax+20], eax
  0002c	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c3		 ret	 0
??0Base@DES_XEX3@CryptoPP@@QAE@XZ ENDP			; CryptoPP::DES_XEX3::Base::Base
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 928  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 929  : 		_DEBUG_POINTER(_Ptr);
; 930  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	57		 push	 edi
  0000a	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000d	8d 49 00	 npad	 3
$LL5@assign@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 931  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::~ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ$2
__ehfuncinfo$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::~ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00034	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  00039	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0003c	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003f	32 d2		 xor	 dl, dl
  00041	3b f9		 cmp	 edi, ecx
  00043	75 0a		 jne	 SHORT $LN40@ClonableIm
  00045	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  00048	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004b	32 c0		 xor	 al, al
  0004d	f3 aa		 rep stosb
$LN40@ClonableIm:
  0004f	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00052	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00055	3b f9		 cmp	 edi, ecx
  00057	75 0a		 jne	 SHORT $LN72@ClonableIm
  00059	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  0005c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005f	32 c0		 xor	 al, al
  00061	f3 aa		 rep stosb
$LN72@ClonableIm:
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ$2:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::~ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
PUBLIC	??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::~ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ$2
__ehfuncinfo$??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::~ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00034	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  00039	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0003c	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003f	32 d2		 xor	 dl, dl
  00041	3b f9		 cmp	 edi, ecx
  00043	75 0a		 jne	 SHORT $LN40@ClonableIm@2
  00045	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  00048	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004b	32 c0		 xor	 al, al
  0004d	f3 aa		 rep stosb
$LN40@ClonableIm@2:
  0004f	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00052	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00055	3b f9		 cmp	 edi, ecx
  00057	75 0a		 jne	 SHORT $LN72@ClonableIm@2
  00059	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  0005c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005f	32 c0		 xor	 al, al
  00061	f3 aa		 rep stosb
$LN72@ClonableIm@2:
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ$2:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::~ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
PUBLIC	??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
; Function compile flags: /Ogtp
;	COMDAT ??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 01		 push	 1
  00005	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00008	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000d	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00010	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  00014	89 40 14	 mov	 DWORD PTR [eax+20], eax
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0001f	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00022	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00025	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  00029	89 40 14	 mov	 DWORD PTR [eax+20], eax
  0002c	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c3		 ret	 0
??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
_TEXT	ENDS
PUBLIC	??0?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
; Function compile flags: /Ogtp
;	COMDAT ??0?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 01		 push	 1
  00005	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00008	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000d	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00010	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  00014	89 40 14	 mov	 DWORD PTR [eax+20], eax
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0001f	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00022	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00025	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  00029	89 40 14	 mov	 DWORD PTR [eax+20], eax
  0002c	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c3		 ret	 0
??0?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b c2		 mov	 eax, edx
  0000b	57		 push	 edi
  0000c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00013	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001a	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL31@basic_stri@2:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL31@basic_stri@2
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 595  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::~BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ$3
__ehfuncinfo$??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::~BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00034	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  00039	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0003c	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003f	32 d2		 xor	 dl, dl
  00041	3b f9		 cmp	 edi, ecx
  00043	75 0a		 jne	 SHORT $LN43@BlockCiphe
  00045	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  00048	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004b	32 c0		 xor	 al, al
  0004d	f3 aa		 rep stosb
$LN43@BlockCiphe:
  0004f	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00052	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00055	3b f9		 cmp	 edi, ecx
  00057	75 0a		 jne	 SHORT $LN75@BlockCiphe
  00059	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  0005c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005f	32 c0		 xor	 al, al
  00061	f3 aa		 rep stosb
$LN75@BlockCiphe:
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ$3:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::~BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>
PUBLIC	??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::~BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ$3
__ehfuncinfo$??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::~BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00034	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  00039	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0003c	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003f	32 d2		 xor	 dl, dl
  00041	3b f9		 cmp	 edi, ecx
  00043	75 0a		 jne	 SHORT $LN43@BlockCiphe@2
  00045	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  00048	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004b	32 c0		 xor	 al, al
  0004d	f3 aa		 rep stosb
$LN43@BlockCiphe@2:
  0004f	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00052	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00055	3b f9		 cmp	 edi, ecx
  00057	75 0a		 jne	 SHORT $LN75@BlockCiphe@2
  00059	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  0005c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005f	32 c0		 xor	 al, al
  00061	f3 aa		 rep stosb
$LN75@BlockCiphe@2:
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ$3:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::~BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>
PUBLIC	??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`vftable'
PUBLIC	??0?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>
PUBLIC	??_R4?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base> `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Base@DES_XEX3@CryptoPP@@8		; CryptoPP::DES_XEX3::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBase@DES_XEX3@CryptoPP@@@8		; CryptoPP::DES_XEX3::Base `RTTI Type Descriptor'
PUBLIC	??_R3Base@DES_XEX3@CryptoPP@@8			; CryptoPP::DES_XEX3::Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Base@DES_XEX3@CryptoPP@@8			; CryptoPP::DES_XEX3::Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> `RTTI Type Descriptor'
PUBLIC	??_R3?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BlockCipher@CryptoPP@@8		; CryptoPP::BlockCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBlockCipher@CryptoPP@@@8		; CryptoPP::BlockCipher `RTTI Type Descriptor'
PUBLIC	??_R3BlockCipher@CryptoPP@@8			; CryptoPP::BlockCipher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BlockCipher@CryptoPP@@8			; CryptoPP::BlockCipher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8	; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimpleKeyingInterface@CryptoPP@@@8	; CryptoPP::SimpleKeyingInterface `RTTI Type Descriptor'
PUBLIC	??_R3SimpleKeyingInterface@CryptoPP@@8		; CryptoPP::SimpleKeyingInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimpleKeyingInterface@CryptoPP@@8		; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@BlockTransformation@CryptoPP@@8	; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVBlockTransformation@CryptoPP@@@8	; CryptoPP::BlockTransformation `RTTI Type Descriptor'
PUBLIC	??_R3BlockTransformation@CryptoPP@@8		; CryptoPP::BlockTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BlockTransformation@CryptoPP@@8		; CryptoPP::BlockTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8	; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAlgorithm@CryptoPP@@@8			; CryptoPP::Algorithm `RTTI Type Descriptor'
PUBLIC	??_R3Algorithm@CryptoPP@@8			; CryptoPP::Algorithm::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Algorithm@CryptoPP@@8			; CryptoPP::Algorithm::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVClonable@CryptoPP@@@8			; CryptoPP::Clonable `RTTI Type Descriptor'
PUBLIC	??_R3Clonable@CryptoPP@@8			; CryptoPP::Clonable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Clonable@CryptoPP@@8			; CryptoPP::Clonable::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EA@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8		; CryptoPP::DES_XEX3_Info::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUDES_XEX3_Info@CryptoPP@@@8		; CryptoPP::DES_XEX3_Info `RTTI Type Descriptor'
PUBLIC	??_R3DES_XEX3_Info@CryptoPP@@8			; CryptoPP::DES_XEX3_Info::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DES_XEX3_Info@CryptoPP@@8			; CryptoPP::DES_XEX3_Info::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DES_XEX3_Info@CryptoPP@@8		; CryptoPP::DES_XEX3_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8	; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8	; CryptoPP::FixedBlockSize<8> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedBlockSize@$07@CryptoPP@@8		; CryptoPP::FixedBlockSize<8>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedBlockSize@$07@CryptoPP@@8		; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Array'
PUBLIC	??_R10?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<24,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
PUBLIC	??_R0?AV?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<24,4,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8	; CryptoPP::FixedKeyLength<24,4,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8	; CryptoPP::FixedKeyLength<24,4,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<24,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8	; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<24,4,0>::`RTTI Base Class Descriptor at (13,-1,0,64)'
PUBLIC	?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::MinKeyLength
PUBLIC	?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::MaxKeyLength
PUBLIC	?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::DefaultKeyLength
PUBLIC	?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::GetValidKeyLength
PUBLIC	?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength
PUBLIC	?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::IVRequirement
PUBLIC	?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::IVSize
PUBLIC	?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterface::MinIVLength
PUBLIC	?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterface::MaxIVLength
PUBLIC	?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z ; CryptoPP::SimpleKeyingInterface::Resynchronize
PUBLIC	?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ; CryptoPP::BlockCipher::GetAlgorithm
PUBLIC	??_R4?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`RTTI Complete Object Locator'
PUBLIC	??_E?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`vector deleting destructor'
PUBLIC	?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::Clone
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::AlgorithmName
PUBLIC	?BlockSize@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::BlockSize
PUBLIC	?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ ; CryptoPP::BlockTransformation::IsPermutation
PUBLIC	?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::IsForwardTransformation
PUBLIC	?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ ; CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks
EXTRN	??_E?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`vector deleting destructor'
EXTRN	?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z:PROC ; CryptoPP::SimpleKeyingInterface::SetKey
EXTRN	?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z:PROC ; CryptoPP::SimpleKeyingInterface::GetNextIV
EXTRN	?UncheckedSetKey@Base@DES_XEX3@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z:PROC ; CryptoPP::DES_XEX3::Base::UncheckedSetKey
EXTRN	?ProcessAndXorBlock@Base@DES_XEX3@CryptoPP@@UBEXPBE0PAE@Z:PROC ; CryptoPP::DES_XEX3::Base::ProcessAndXorBlock
EXTRN	?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ:PROC ; CryptoPP::BlockTransformation::OptimalDataAlignment
EXTRN	?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z:PROC ; CryptoPP::BlockTransformation::AdvancedProcessBlocks
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\smartptr.h
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<24,4,0>::`RTTI Base Class Descriptor at (13,-1,0,64)'
	DD	00H
	DD	0dH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8 ; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<24,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<24,4,0>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8 DD 00H	; CryptoPP::FixedKeyLength<24,4,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedKeyLength<24,4,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R10?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R10?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<24,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedBlockSize@$07@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8 ; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedBlockSize@$07@CryptoPP@@8 DD 00H		; CryptoPP::FixedBlockSize<8>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedBlockSize<8> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedBlockSize@$07@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8 ; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DES_XEX3_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DES_XEX3_Info@CryptoPP@@8 DD FLAT:??_R0?AUDES_XEX3_Info@CryptoPP@@@8 ; CryptoPP::DES_XEX3_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DES_XEX3_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2DES_XEX3_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R2DES_XEX3_Info@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@DES_XEX3_Info@CryptoPP@@8 ; CryptoPP::DES_XEX3_Info::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R10?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3DES_XEX3_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R3DES_XEX3_Info@CryptoPP@@8 DD 00H			; CryptoPP::DES_XEX3_Info::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2DES_XEX3_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUDES_XEX3_Info@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AUDES_XEX3_Info@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::DES_XEX3_Info `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUDES_XEX3_Info@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8 DD FLAT:??_R0?AUDES_XEX3_Info@CryptoPP@@@8 ; CryptoPP::DES_XEX3_Info::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	02H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DES_XEX3_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R2Clonable@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8 ; CryptoPP::Clonable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R3Clonable@CryptoPP@@8 DD 00H			; CryptoPP::Clonable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVClonable@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVClonable@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Clonable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVClonable@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R2Algorithm@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8 ; CryptoPP::Algorithm::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R3Algorithm@CryptoPP@@8 DD 00H			; CryptoPP::Algorithm::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAlgorithm@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVAlgorithm@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Algorithm `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAlgorithm@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8 DD FLAT:??_R0?AVBlockTransformation@CryptoPP@@@8 ; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlockTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2BlockTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8 ; CryptoPP::BlockTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3BlockTransformation@CryptoPP@@8 DD 00H		; CryptoPP::BlockTransformation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BlockTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBlockTransformation@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVBlockTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBlockTransformation@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@BlockTransformation@CryptoPP@@8 DD FLAT:??_R0?AVBlockTransformation@CryptoPP@@@8 ; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	02H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlockTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R2SimpleKeyingInterface@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R3SimpleKeyingInterface@CryptoPP@@8 DD 00H		; CryptoPP::SimpleKeyingInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SimpleKeyingInterface@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimpleKeyingInterface@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVSimpleKeyingInterface@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimpleKeyingInterface@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8 DD FLAT:??_R0?AVSimpleKeyingInterface@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimpleKeyingInterface@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2BlockCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R2BlockCipher@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8 ; CryptoPP::BlockCipher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3BlockCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R3BlockCipher@CryptoPP@@8 DD 00H			; CryptoPP::BlockCipher::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2BlockCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBlockCipher@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVBlockCipher@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBlockCipher@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BlockCipher@CryptoPP@@8 DD FLAT:??_R0?AVBlockCipher@CryptoPP@@@8 ; CryptoPP::BlockCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlockCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8 DD 00H ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@'
	DB	'CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher'
	DB	'@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoB'
	DB	'ases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@'
	DB	'CryptoPP@@V12@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0cH
	DD	FLAT:??_R2?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCip'
	DB	'her@2@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Base@DES_XEX3@CryptoPP@@8
rdata$r	SEGMENT
??_R2Base@DES_XEX3@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Base@DES_XEX3@CryptoPP@@8 ; CryptoPP::DES_XEX3::Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Base@DES_XEX3@CryptoPP@@8
rdata$r	SEGMENT
??_R3Base@DES_XEX3@CryptoPP@@8 DD 00H			; CryptoPP::DES_XEX3::Base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0dH
	DD	FLAT:??_R2Base@DES_XEX3@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBase@DES_XEX3@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVBase@DES_XEX3@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::DES_XEX3::Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBase@DES_XEX3@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Base@DES_XEX3@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Base@DES_XEX3@CryptoPP@@8 DD FLAT:??_R0?AVBase@DES_XEX3@CryptoPP@@@8 ; CryptoPP::DES_XEX3::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0cH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Base@DES_XEX3@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Base@DES_XEX3@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0eH
	DD	FLAT:??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX'
	DB	'3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0eH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@DES_XEX3@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0fH
	DD	FLAT:??_R2?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@Cry'
	DB	'ptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?ProcessAndXorBlock@Base@DES_XEX3@CryptoPP@@UBEXPBE0PAE@Z
	DD	FLAT:?BlockSize@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@Base@DES_XEX3@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\seckey.h
CONST	ENDS
;	COMDAT ??0?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx

; 154  :  	BlockCipherFinal() {}

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx
  00004	6a 01		 push	 1
  00006	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00009	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000e	c6 46 19 01	 mov	 BYTE PTR [esi+25], 1
  00012	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00015	89 40 14	 mov	 DWORD PTR [eax+20], eax
  00018	b9 08 00 00 00	 mov	 ecx, 8
  0001d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00020	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00023	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00026	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  0002a	89 40 14	 mov	 DWORD PTR [eax+20], eax
  0002d	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00034	5f		 pop	 edi
  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	c3		 ret	 0
??0?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
_TEXT	ENDS
;	COMDAT ?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z PROC ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength, COMDAT
; _this$ = ecx

; 364  : 		{return n == GetValidKeyLength(n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR _n$[ebp]
  0000c	56		 push	 esi
  0000d	ff d2		 call	 edx
  0000f	33 c9		 xor	 ecx, ecx
  00011	3b f0		 cmp	 esi, eax
  00013	0f 94 c0	 sete	 al
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z ENDP ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterface::MinIVLength, COMDAT
; _this$ = ecx

; 398  : 	virtual unsigned int MinIVLength() const {return IVSize();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00005	ff e2		 jmp	 edx
?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterface::MinIVLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterface::MaxIVLength, COMDAT
; _this$ = ecx

; 400  : 	virtual unsigned int MaxIVLength() const {return IVSize();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00005	ff e2		 jmp	 edx
?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterface::MaxIVLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockTransformation::IsPermutation, COMDAT
; _this$ = ecx

; 451  : 	virtual bool IsPermutation() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockTransformation::IsPermutation
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks, COMDAT
; _this$ = ecx

; 457  : 	virtual unsigned int OptimalNumberOfParallelBlocks() const {return 1;}

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
_TEXT	SEGMENT
?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ PROC ; CryptoPP::BlockCipher::GetAlgorithm, COMDAT
; _this$ = ecx

; 607  : 	const Algorithm & GetAlgorithm() const {return *this;}

  00000	85 c9		 test	 ecx, ecx
  00002	74 04		 je	 SHORT $LN3@GetAlgorit
  00004	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00007	c3		 ret	 0
$LN3@GetAlgorit:
  00008	33 c0		 xor	 eax, eax
  0000a	c3		 ret	 0
?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ENDP ; CryptoPP::BlockCipher::GetAlgorithm
_TEXT	ENDS
PUBLIC	??_C@_08GAJHKGCM@DES?9XEX3?$AA@			; `string'
PUBLIC	?StaticAlgorithmName@DES_XEX3_Info@CryptoPP@@SAPBDXZ ; CryptoPP::DES_XEX3_Info::StaticAlgorithmName
;	COMDAT ??_C@_08GAJHKGCM@DES?9XEX3?$AA@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\des.h
CONST	SEGMENT
??_C@_08GAJHKGCM@DES?9XEX3?$AA@ DB 'DES-XEX3', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?StaticAlgorithmName@DES_XEX3_Info@CryptoPP@@SAPBDXZ
_TEXT	SEGMENT
?StaticAlgorithmName@DES_XEX3_Info@CryptoPP@@SAPBDXZ PROC ; CryptoPP::DES_XEX3_Info::StaticAlgorithmName, COMDAT

; 106  : 	static const char *StaticAlgorithmName() {return "DES-XEX3";}

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08GAJHKGCM@DES?9XEX3?$AA@
  00005	c3		 ret	 0
?StaticAlgorithmName@DES_XEX3_Info@CryptoPP@@SAPBDXZ ENDP ; CryptoPP::DES_XEX3_Info::StaticAlgorithmName
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\seckey.h
_TEXT	ENDS
;	COMDAT ?BlockSize@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?BlockSize@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::BlockSize, COMDAT
; _this$ = ecx

; 146  : 	unsigned int BlockSize() const {return this->BLOCKSIZE;}

  00000	b8 08 00 00 00	 mov	 eax, 8
  00005	c3		 ret	 0
?BlockSize@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::BlockSize
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::MinKeyLength, COMDAT
; _this$ = ecx

; 134  : 	size_t MinKeyLength() const {return INFO::MIN_KEYLENGTH;}

  00000	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00005	c3		 ret	 0
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::MinKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::MaxKeyLength, COMDAT
; _this$ = ecx

; 135  : 	size_t MaxKeyLength() const {return (size_t)INFO::MAX_KEYLENGTH;}

  00000	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00005	c3		 ret	 0
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::MaxKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::DefaultKeyLength, COMDAT
; _this$ = ecx

; 136  : 	size_t DefaultKeyLength() const {return INFO::DEFAULT_KEYLENGTH;}

  00000	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00005	c3		 ret	 0
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::DefaultKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::IVRequirement, COMDAT
; _this$ = ecx

; 138  : 	SimpleKeyingInterface::IV_Requirement IVRequirement() const {return (SimpleKeyingInterface::IV_Requirement)INFO::IV_REQUIREMENT;}

  00000	b8 04 00 00 00	 mov	 eax, 4
  00005	c3		 ret	 0
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::IVRequirement
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::IVSize, COMDAT
; _this$ = ecx

; 139  : 	unsigned int IVSize() const {return INFO::IV_LENGTH;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::IVSize
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::IsForwardTransformation, COMDAT
; _this$ = ecx

; 162  : 	bool IsForwardTransformation() const {return DIR == ENCRYPTION;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::IsForwardTransformation
_TEXT	ENDS
PUBLIC	??0SimpleKeyingInterface@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::SimpleKeyingInterface::SimpleKeyingInterface
; Function compile flags: /Ogtp
;	COMDAT ??0SimpleKeyingInterface@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SimpleKeyingInterface@CryptoPP@@QAE@ABV01@@Z PROC	; CryptoPP::SimpleKeyingInterface::SimpleKeyingInterface, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0SimpleKeyingInterface@CryptoPP@@QAE@ABV01@@Z ENDP	; CryptoPP::SimpleKeyingInterface::SimpleKeyingInterface
_TEXT	ENDS
PUBLIC	??0Clonable@CryptoPP@@QAE@ABV01@@Z		; CryptoPP::Clonable::Clonable
; Function compile flags: /Ogtp
;	COMDAT ??0Clonable@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Clonable@CryptoPP@@QAE@ABV01@@Z PROC			; CryptoPP::Clonable::Clonable, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0Clonable@CryptoPP@@QAE@ABV01@@Z ENDP			; CryptoPP::Clonable::Clonable
_TEXT	ENDS
PUBLIC	?StaticGetValidKeyLength@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@SAII@Z ; CryptoPP::FixedKeyLength<24,4,0>::StaticGetValidKeyLength
; Function compile flags: /Ogtp
;	COMDAT ?StaticGetValidKeyLength@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@SAII@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?StaticGetValidKeyLength@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@SAII@Z PROC ; CryptoPP::FixedKeyLength<24,4,0>::StaticGetValidKeyLength, COMDAT

; 75   : 	static size_t CRYPTOPP_API StaticGetValidKeyLength(size_t) {return KEYLENGTH;}

  00000	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00005	c3		 ret	 0
?StaticGetValidKeyLength@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@SAII@Z ENDP ; CryptoPP::FixedKeyLength<24,4,0>::StaticGetValidKeyLength
_TEXT	ENDS
PUBLIC	??0?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAE@XZ ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ??0?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAE@XZ PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>, COMDAT
; _this$ = ecx

; 166  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  00000	8b c1		 mov	 eax, ecx
  00002	c6 80 81 00 00
	00 00		 mov	 BYTE PTR [eax+129], 0
  00009	c3		 ret	 0
??0?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>
_TEXT	ENDS
PUBLIC	?GetAlignedArray@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@AAEPAIXZ ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::GetAlignedArray
; Function compile flags: /Ogtp
;	COMDAT ?GetAlignedArray@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@AAEPAIXZ
_TEXT	SEGMENT
?GetAlignedArray@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@AAEPAIXZ PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::GetAlignedArray, COMDAT
; _this$ = ecx

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
?GetAlignedArray@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@AAEPAIXZ ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::GetAlignedArray
_TEXT	ENDS
PUBLIC	?allocate@?$NullAllocator@I@CryptoPP@@QAEPAIIPBX@Z ; CryptoPP::NullAllocator<unsigned int>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$NullAllocator@I@CryptoPP@@QAEPAIIPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
___formal$ = 12						; size = 4
?allocate@?$NullAllocator@I@CryptoPP@@QAEPAIIPBX@Z PROC	; CryptoPP::NullAllocator<unsigned int>::allocate, COMDAT
; _this$ = ecx

; 145  : 		assert(false);
; 146  : 		return NULL;

  00000	33 c0		 xor	 eax, eax

; 147  : 	}

  00002	c2 08 00	 ret	 8
?allocate@?$NullAllocator@I@CryptoPP@@QAEPAIIPBX@Z ENDP	; CryptoPP::NullAllocator<unsigned int>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$NullAllocator@I@CryptoPP@@QAEXPAXI@Z ; CryptoPP::NullAllocator<unsigned int>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$NullAllocator@I@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$NullAllocator@I@CryptoPP@@QAEXPAXI@Z PROC	; CryptoPP::NullAllocator<unsigned int>::deallocate, COMDAT
; _this$ = ecx

; 151  : 		assert(false);
; 152  : 	}

  00000	c2 08 00	 ret	 8
?deallocate@?$NullAllocator@I@CryptoPP@@QAEXPAXI@Z ENDP	; CryptoPP::NullAllocator<unsigned int>::deallocate
_TEXT	ENDS
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
PUBLIC	??$GetAlignmentOf@I@CryptoPP@@YAIPAI@Z		; CryptoPP::GetAlignmentOf<unsigned int>
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\misc.h
;	COMDAT ??$GetAlignmentOf@I@CryptoPP@@YAIPAI@Z
_TEXT	SEGMENT
_dummy$ = 8						; size = 4
??$GetAlignmentOf@I@CryptoPP@@YAIPAI@Z PROC		; CryptoPP::GetAlignmentOf<unsigned int>, COMDAT

; 365  : #ifdef CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS
; 366  : 	if (sizeof(T) < 16)
; 367  : 		return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 368  : #endif
; 369  : 
; 370  : #if (_MSC_VER >= 1300)
; 371  : 	return __alignof(T);
; 372  : #elif defined(__GNUC__)
; 373  : 	return __alignof__(T);
; 374  : #elif CRYPTOPP_BOOL_SLOW_WORD64
; 375  : 	return UnsignedMin(4U, sizeof(T));
; 376  : #else
; 377  : 	return sizeof(T);
; 378  : #endif
; 379  : }

  00005	c3		 ret	 0
??$GetAlignmentOf@I@CryptoPP@@YAIPAI@Z ENDP		; CryptoPP::GetAlignmentOf<unsigned int>
_TEXT	ENDS
PUBLIC	??$GetAlignmentOf@G@CryptoPP@@YAIPAG@Z		; CryptoPP::GetAlignmentOf<unsigned short>
; Function compile flags: /Ogtp
;	COMDAT ??$GetAlignmentOf@G@CryptoPP@@YAIPAG@Z
_TEXT	SEGMENT
_dummy$ = 8						; size = 4
??$GetAlignmentOf@G@CryptoPP@@YAIPAG@Z PROC		; CryptoPP::GetAlignmentOf<unsigned short>, COMDAT

; 365  : #ifdef CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS
; 366  : 	if (sizeof(T) < 16)
; 367  : 		return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 368  : #endif
; 369  : 
; 370  : #if (_MSC_VER >= 1300)
; 371  : 	return __alignof(T);
; 372  : #elif defined(__GNUC__)
; 373  : 	return __alignof__(T);
; 374  : #elif CRYPTOPP_BOOL_SLOW_WORD64
; 375  : 	return UnsignedMin(4U, sizeof(T));
; 376  : #else
; 377  : 	return sizeof(T);
; 378  : #endif
; 379  : }

  00005	c3		 ret	 0
??$GetAlignmentOf@G@CryptoPP@@YAIPAG@Z ENDP		; CryptoPP::GetAlignmentOf<unsigned short>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_E?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1905 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1906 : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1907 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\seckey.h
_TEXT	ENDS
;	COMDAT ?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::GetValidKeyLength, COMDAT
; _this$ = ecx

; 137  : 	size_t GetValidKeyLength(size_t n) const {return INFO::StaticGetValidKeyLength(n);}

  00000	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00005	c2 04 00	 ret	 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::GetValidKeyLength
_TEXT	ENDS
PUBLIC	??0Algorithm@CryptoPP@@QAE@ABV01@@Z		; CryptoPP::Algorithm::Algorithm
; Function compile flags: /Ogtp
;	COMDAT ??0Algorithm@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Algorithm@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::Algorithm::Algorithm, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0Algorithm@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::Algorithm::Algorithm
_TEXT	ENDS
PUBLIC	??1?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@UAE@XZ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::~TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>
; Function compile flags: /Ogtp
;	COMDAT ??1?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::~TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::~TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>
_TEXT	ENDS
PUBLIC	?allocate@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEPAIIPBX@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::allocate
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ?allocate@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEPAIIPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEPAIIPBX@Z PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::allocate, COMDAT
; _this$ = ecx

; 182  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  : 		if (n <= S && !m_allocated)

  00003	83 7d 08 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  00007	8b c1		 mov	 eax, ecx
  00009	77 14		 ja	 SHORT $LN2@allocate@3
  0000b	80 b8 81 00 00
	00 00		 cmp	 BYTE PTR [eax+129], 0
  00012	75 0b		 jne	 SHORT $LN2@allocate@3

; 184  : 		{
; 185  : 			m_allocated = true;

  00014	c6 80 81 00 00
	00 01		 mov	 BYTE PTR [eax+129], 1

; 190  : 	}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
$LN2@allocate@3:

; 186  : 			return GetAlignedArray();
; 187  : 		}
; 188  : 		else
; 189  : 			return m_fallbackAllocator.allocate(n, hint);

  0001f	33 c0		 xor	 eax, eax

; 190  : 	}

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?allocate@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEPAIIPBX@Z ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::allocate
_TEXT	ENDS
PUBLIC	??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z	; CryptoPP::SecureWipeArray<unsigned int>
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\misc.h
;	COMDAT ??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z PROC		; CryptoPP::SecureWipeArray<unsigned int>, COMDAT

; 536  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 	if (sizeof(T) % 8 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word64>() == 0)
; 538  : 		SecureWipeBuffer((word64 *)buf, n * (sizeof(T)/8));
; 539  : 	else if (sizeof(T) % 4 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word32>() == 0)
; 540  : 		SecureWipeBuffer((word32 *)buf, n * (sizeof(T)/4));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]
  0000a	33 c0		 xor	 eax, eax
  0000c	f3 ab		 rep stosd
  0000e	5f		 pop	 edi

; 541  : 	else if (sizeof(T) % 2 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word16>() == 0)
; 542  : 		SecureWipeBuffer((word16 *)buf, n * (sizeof(T)/2));
; 543  : 	else
; 544  : 		SecureWipeBuffer((byte *)buf, n * sizeof(T));
; 545  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z ENDP		; CryptoPP::SecureWipeArray<unsigned int>
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	??0BlockTransformation@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::BlockTransformation::BlockTransformation
; Function compile flags: /Ogtp
;	COMDAT ??0BlockTransformation@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0BlockTransformation@CryptoPP@@QAE@ABV01@@Z PROC	; CryptoPP::BlockTransformation::BlockTransformation, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??0BlockTransformation@CryptoPP@@QAE@ABV01@@Z ENDP	; CryptoPP::BlockTransformation::BlockTransformation
_TEXT	ENDS
PUBLIC	??0?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ??0?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
??0?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >, COMDAT
; _this$ = ecx

; 248  : 	SecBlock(const SecBlock<T, A> &t)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	33 c9		 xor	 ecx, ecx
  0000b	88 4e 09	 mov	 BYTE PTR [esi+9], cl
  0000e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00011	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00014	83 f8 08	 cmp	 eax, 8
  00017	77 06		 ja	 SHORT $LN6@SecBlock@4
  00019	c6 46 09 01	 mov	 BYTE PTR [esi+9], 1
  0001d	8b ce		 mov	 ecx, esi
$LN6@SecBlock@4:

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  0001f	50		 push	 eax
  00020	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00023	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00026	52		 push	 edx
  00027	50		 push	 eax
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _memcpy_s
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$SecBlock@EV?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::SecBlock<unsigned char,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
_TEXT	ENDS
PUBLIC	??1?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UAE@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::~SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UAE@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::~SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::~SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >
_TEXT	ENDS
PUBLIC	??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx

; 248  : 	SecBlock(const SecBlock<T, A> &t)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	33 c9		 xor	 ecx, ecx
  0000b	88 8e 81 00 00
	00		 mov	 BYTE PTR [esi+129], cl
  00011	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00017	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  0001d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00020	77 09		 ja	 SHORT $LN6@SecBlock@5
  00022	c6 86 81 00 00
	00 01		 mov	 BYTE PTR [esi+129], 1
  00029	8b ce		 mov	 ecx, esi
$LN6@SecBlock@5:

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  0002b	03 c0		 add	 eax, eax
  0002d	03 c0		 add	 eax, eax
  0002f	50		 push	 eax
  00030	89 8e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ecx
  00036	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  0003c	52		 push	 edx
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _memcpy_s
  00044	83 c4 10	 add	 esp, 16			; 00000010H
  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
PUBLIC	?deallocate@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::deallocate, COMDAT
; _this$ = ecx

; 193  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 194  : 		if (p == GetAlignedArray())

  00004	8b 7d 08	 mov	 edi, DWORD PTR _p$[ebp]
  00007	3b f9		 cmp	 edi, ecx
  00009	75 0e		 jne	 SHORT $LN37@deallocate@3

; 195  : 		{
; 196  : 			assert(n <= S);
; 197  : 			assert(m_allocated);
; 198  : 			m_allocated = false;

  0000b	c6 81 81 00 00
	00 00		 mov	 BYTE PTR [ecx+129], 0

; 199  : 			SecureWipeArray((pointer)p, n);

  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00015	33 c0		 xor	 eax, eax
  00017	f3 ab		 rep stosd
$LN37@deallocate@3:
  00019	5f		 pop	 edi

; 200  : 		}
; 201  : 		else
; 202  : 			m_fallbackAllocator.deallocate(p, n);
; 203  : 	}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?deallocate@?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
_TEXT	ENDS
PUBLIC	??0?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	33 c9		 xor	 ecx, ecx
  0000b	88 4e 09	 mov	 BYTE PTR [esi+9], cl
  0000e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00011	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00014	83 f8 08	 cmp	 eax, 8
  00017	77 06		 ja	 SHORT $LN9@FixedSizeS@2
  00019	c6 46 09 01	 mov	 BYTE PTR [esi+9], 1
  0001d	8b ce		 mov	 ecx, esi
$LN9@FixedSizeS@2:
  0001f	50		 push	 eax
  00020	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00023	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00026	52		 push	 edx
  00027	50		 push	 eax
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _memcpy_s
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >::FixedSizeSecBlock<unsigned char,8,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,8,CryptoPP::NullAllocator<unsigned char>,0> >
_TEXT	ENDS
PUBLIC	??0BlockCipher@CryptoPP@@QAE@ABV01@@Z		; CryptoPP::BlockCipher::BlockCipher
; Function compile flags: /Ogtp
;	COMDAT ??0BlockCipher@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0BlockCipher@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::BlockCipher::BlockCipher, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	85 c9		 test	 ecx, ecx
  0000a	74 0d		 je	 SHORT $LN3@BlockCiphe@3
  0000c	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00012	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN3@BlockCiphe@3:
  00019	33 d2		 xor	 edx, edx
  0001b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0001e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0BlockCipher@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::BlockCipher::BlockCipher
_TEXT	ENDS
PUBLIC	??1?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::~AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::~AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::~AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >
_TEXT	ENDS
PUBLIC	??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>
; Function compile flags: /Ogtp
;	COMDAT ??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b c1		 mov	 eax, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 05		 je	 SHORT $LN7@TwoBases
  0000d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00010	eb 02		 jmp	 SHORT $LN8@TwoBases
$LN7@TwoBases:
  00012	33 f6		 xor	 esi, esi
$LN8@TwoBases:
  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001a	5e		 pop	 esi
  0001b	85 d2		 test	 edx, edx
  0001d	74 0c		 je	 SHORT $LN3@TwoBases
  0001f	8d 4a 0c	 lea	 ecx, DWORD PTR [edx+12]
  00022	8a 11		 mov	 dl, BYTE PTR [ecx]
  00024	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN3@TwoBases:
  0002b	33 c9		 xor	 ecx, ecx
  0002d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0002f	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>
_TEXT	ENDS
PUBLIC	??1?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::~SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::~SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00000	8b c1		 mov	 eax, ecx
  00002	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00008	57		 push	 edi
  00009	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
  0000f	3b f8		 cmp	 edi, eax
  00011	75 0b		 jne	 SHORT $LN39@SecBlock@6
  00013	c6 80 81 00 00
	00 00		 mov	 BYTE PTR [eax+129], 0
  0001a	33 c0		 xor	 eax, eax
  0001c	f3 ab		 rep stosd
$LN39@SecBlock@6:
  0001e	5f		 pop	 edi
  0001f	c3		 ret	 0
??1?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::~SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
PUBLIC	??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>
; Function compile flags: /Ogtp
;	COMDAT ??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b c1		 mov	 eax, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 05		 je	 SHORT $LN7@TwoBases@2
  0000d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00010	eb 02		 jmp	 SHORT $LN8@TwoBases@2
$LN7@TwoBases@2:
  00012	33 f6		 xor	 esi, esi
$LN8@TwoBases@2:
  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001a	5e		 pop	 esi
  0001b	85 d2		 test	 edx, edx
  0001d	74 0c		 je	 SHORT $LN3@TwoBases@2
  0001f	8d 4a 0c	 lea	 ecx, DWORD PTR [edx+12]
  00022	8a 11		 mov	 dl, BYTE PTR [ecx]
  00024	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN3@TwoBases@2:
  0002b	33 c9		 xor	 ecx, ecx
  0002d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0002f	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>
_TEXT	ENDS
PUBLIC	??1?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>
; Function compile flags: /Ogtp
;	COMDAT ??1?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>
_TEXT	ENDS
PUBLIC	??0?$FixedSizeSecBlock@I$0CA@V?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$FixedSizeSecBlock@I$0CA@V?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$FixedSizeSecBlock@I$0CA@V?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	33 c9		 xor	 ecx, ecx
  0000b	88 8e 81 00 00
	00		 mov	 BYTE PTR [esi+129], cl
  00011	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00017	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  0001d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00020	77 09		 ja	 SHORT $LN9@FixedSizeS@3
  00022	c6 86 81 00 00
	00 01		 mov	 BYTE PTR [esi+129], 1
  00029	8b ce		 mov	 ecx, esi
$LN9@FixedSizeS@3:
  0002b	03 c0		 add	 eax, eax
  0002d	03 c0		 add	 eax, eax
  0002f	50		 push	 eax
  00030	89 8e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ecx
  00036	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  0003c	52		 push	 edx
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _memcpy_s
  00044	83 c4 10	 add	 esp, 16			; 00000010H
  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0?$FixedSizeSecBlock@I$0CA@V?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
PUBLIC	??1?$FixedSizeSecBlock@I$0CA@V?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::~FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$FixedSizeSecBlock@I$0CA@V?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$FixedSizeSecBlock@I$0CA@V?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::~FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00008	57		 push	 edi
  00009	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
  0000f	3b f8		 cmp	 edi, eax
  00011	75 0b		 jne	 SHORT $LN42@FixedSizeS@4
  00013	c6 80 81 00 00
	00 00		 mov	 BYTE PTR [eax+129], 0
  0001a	33 c0		 xor	 eax, eax
  0001c	f3 ab		 rep stosd
$LN42@FixedSizeS@4:
  0001e	5f		 pop	 edi
  0001f	c3		 ret	 0
??1?$FixedSizeSecBlock@I$0CA@V?$FixedSizeAllocatorWithCleanup@I$0CA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >::~FixedSizeSecBlock<unsigned int,32,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,32,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
PUBLIC	??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b c1		 mov	 eax, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 05		 je	 SHORT $LN9@SimpleKeyi
  0000d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00010	eb 02		 jmp	 SHORT $LN10@SimpleKeyi
$LN9@SimpleKeyi:
  00012	33 f6		 xor	 esi, esi
$LN10@SimpleKeyi:
  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001a	5e		 pop	 esi
  0001b	85 d2		 test	 edx, edx
  0001d	74 0c		 je	 SHORT $LN5@SimpleKeyi
  0001f	8d 4a 0c	 lea	 ecx, DWORD PTR [edx+12]
  00022	8a 11		 mov	 dl, BYTE PTR [ecx]
  00024	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN5@SimpleKeyi:
  0002b	33 c9		 xor	 ecx, ecx
  0002d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0002f	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 798  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 799  : 		if (_Right.size() < _Roff)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	3b c1		 cmp	 eax, ecx
  00012	73 0a		 jae	 SHORT $LN4@append

; 800  : 			_Xran();	// _Roff off end

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00019	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN85@append:
$LN4@append:

; 801  : 		size_type _Num = _Right.size() - _Roff;
; 802  : 		if (_Num < _Count)

  0001e	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp]
  00021	2b c1		 sub	 eax, ecx
  00023	3b c3		 cmp	 eax, ebx
  00025	73 02		 jae	 SHORT $LN3@append

; 803  : 			_Count = _Num;	// trim _Count to size

  00027	8b d8		 mov	 ebx, eax
$LN3@append:

; 804  : 		if (npos - this->_Mysize <= _Count)

  00029	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002c	83 c9 ff	 or	 ecx, -1
  0002f	2b c8		 sub	 ecx, eax
  00031	3b cb		 cmp	 ecx, ebx
  00033	77 0a		 ja	 SHORT $LN2@append

; 805  : 			_Xlen();	// result too long

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0003a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN86@append:
$LN2@append:

; 806  : 
; 807  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 84 9d 00 00
	00		 je	 $LN79@append
  00047	57		 push	 edi
  00048	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  0004b	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004e	76 0a		 jbe	 SHORT $LN21@append
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00055	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN87@append:
$LN21@append:
  0005a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0005d	3b cf		 cmp	 ecx, edi
  0005f	73 1e		 jae	 SHORT $LN20@append
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0006a	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0006d	85 ff		 test	 edi, edi
  0006f	74 72		 je	 SHORT $LN81@append
$LN84@append:

; 808  : 			{	// make room and append new stuff
; 809  : 			_Traits::copy(_Myptr() + this->_Mysize,
; 810  : 				_Right._Myptr() + _Roff, _Count);

  00071	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00076	39 42 14	 cmp	 DWORD PTR [edx+20], eax
  00079	72 2a		 jb	 SHORT $LN65@append
  0007b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0007d	eb 28		 jmp	 SHORT $LN66@append

; 806  : 
; 807  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

$LN20@append:
  0007f	85 ff		 test	 edi, edi
  00081	75 ee		 jne	 SHORT $LN84@append
  00083	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00086	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00089	72 0e		 jb	 SHORT $LN59@append
  0008b	8b 06		 mov	 eax, DWORD PTR [esi]
  0008d	5f		 pop	 edi
  0008e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 812  : 			}
; 813  : 		return (*this);

  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 814  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH

; 806  : 
; 807  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

$LN59@append:
  00099	5f		 pop	 edi
  0009a	8b c6		 mov	 eax, esi
  0009c	5e		 pop	 esi
  0009d	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a0	5b		 pop	 ebx

; 814  : 		}

  000a1	5d		 pop	 ebp
  000a2	c2 0c 00	 ret	 12			; 0000000cH

; 808  : 			{	// make room and append new stuff
; 809  : 			_Traits::copy(_Myptr() + this->_Mysize,
; 810  : 				_Right._Myptr() + _Roff, _Count);

$LN65@append:
  000a5	8b ca		 mov	 ecx, edx
$LN66@append:
  000a7	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  000aa	72 04		 jb	 SHORT $LN69@append
  000ac	8b 06		 mov	 eax, DWORD PTR [esi]
  000ae	eb 02		 jmp	 SHORT $LN70@append
$LN69@append:
  000b0	8b c6		 mov	 eax, esi
$LN70@append:
  000b2	03 4d 0c	 add	 ecx, DWORD PTR __Roff$[ebp]
  000b5	53		 push	 ebx
  000b6	51		 push	 ecx
  000b7	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000ba	03 c8		 add	 ecx, eax
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _memcpy
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 811  : 			_Eos(_Num);

  000c5	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000c9	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000cc	72 0f		 jb	 SHORT $LN77@append
  000ce	8b 06		 mov	 eax, DWORD PTR [esi]
  000d0	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000d4	5f		 pop	 edi

; 812  : 			}
; 813  : 		return (*this);

  000d5	8b c6		 mov	 eax, esi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx

; 814  : 		}

  000d9	5d		 pop	 ebp
  000da	c2 0c 00	 ret	 12			; 0000000cH

; 811  : 			_Eos(_Num);

$LN77@append:
  000dd	8b c6		 mov	 eax, esi
  000df	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN81@append:
  000e3	5f		 pop	 edi
$LN79@append:

; 812  : 			}
; 813  : 		return (*this);

  000e4	8b c6		 mov	 eax, esi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx

; 814  : 		}

  000e8	5d		 pop	 ebp
  000e9	c2 0c 00	 ret	 12			; 0000000cH
$LN82@append:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 817  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 818  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 819  : 		if (_Count != 0)
; 820  : 			_DEBUG_POINTER(_Ptr);
; 821  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 822  : 
; 823  : 		if (_Inside(_Ptr))

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 d2		 test	 edx, edx
  0000c	74 59		 je	 SHORT $LN88@append@2
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00014	72 04		 jb	 SHORT $LN13@append@2
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN14@append@2
$LN13@append@2:
  0001a	8b c6		 mov	 eax, esi
$LN14@append@2:
  0001c	3b d0		 cmp	 edx, eax
  0001e	72 47		 jb	 SHORT $LN88@append@2
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN17@append@2
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN18@append@2
$LN17@append@2:
  00029	8b c6		 mov	 eax, esi
$LN18@append@2:
  0002b	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0002e	03 f8		 add	 edi, eax
  00030	3b fa		 cmp	 edi, edx
  00032	76 33		 jbe	 SHORT $LN88@append@2

; 824  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00037	72 17		 jb	 SHORT $LN21@append@2
  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0003e	51		 push	 ecx
  0003f	2b d0		 sub	 edx, eax
  00041	52		 push	 edx
  00042	56		 push	 esi
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 835  : 		}

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8

; 824  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

$LN21@append@2:
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00053	8b c6		 mov	 eax, esi
  00055	51		 push	 ecx
  00056	2b d0		 sub	 edx, eax
  00058	52		 push	 edx
  00059	56		 push	 esi
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 835  : 		}

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
$LN88@append@2:

; 825  : 		if (npos - this->_Mysize <= _Count)

  00067	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0006a	83 c9 ff	 or	 ecx, -1
  0006d	53		 push	 ebx
  0006e	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00071	2b c8		 sub	 ecx, eax
  00073	3b cb		 cmp	 ecx, ebx
  00075	77 0a		 ja	 SHORT $LN2@append@2

; 826  : 			_Xlen();	// result too long

  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0007c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN92@append@2:
$LN2@append@2:

; 827  : 
; 828  : 		size_type _Num;
; 829  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00081	85 db		 test	 ebx, ebx
  00083	0f 84 89 00 00
	00		 je	 $LN85@append@2
  00089	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  0008c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0008f	76 0a		 jbe	 SHORT $LN31@append@2
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00096	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN93@append@2:
$LN31@append@2:
  0009b	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0009e	3b cf		 cmp	 ecx, edi
  000a0	73 1a		 jae	 SHORT $LN30@append@2
  000a2	50		 push	 eax
  000a3	57		 push	 edi
  000a4	8b ce		 mov	 ecx, esi
  000a6	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  000ab	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000ae	85 ff		 test	 edi, edi
  000b0	74 60		 je	 SHORT $LN85@append@2
$LN91@append@2:

; 830  : 			{	// make room and append new stuff
; 831  : 			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);

  000b2	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000b6	72 2a		 jb	 SHORT $LN75@append@2
  000b8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ba	eb 28		 jmp	 SHORT $LN76@append@2

; 827  : 
; 828  : 		size_type _Num;
; 829  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

$LN30@append@2:
  000bc	85 ff		 test	 edi, edi
  000be	75 f2		 jne	 SHORT $LN91@append@2
  000c0	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000c3	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000c6	72 0e		 jb	 SHORT $LN69@append@2
  000c8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ca	5b		 pop	 ebx
  000cb	c6 00 00	 mov	 BYTE PTR [eax], 0
  000ce	5f		 pop	 edi

; 833  : 			}
; 834  : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi

; 835  : 		}

  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8

; 827  : 
; 828  : 		size_type _Num;
; 829  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

$LN69@append@2:
  000d6	5b		 pop	 ebx
  000d7	8b c6		 mov	 eax, esi
  000d9	5f		 pop	 edi
  000da	c6 00 00	 mov	 BYTE PTR [eax], 0
  000dd	5e		 pop	 esi

; 835  : 		}

  000de	5d		 pop	 ebp
  000df	c2 08 00	 ret	 8

; 830  : 			{	// make room and append new stuff
; 831  : 			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);

$LN75@append@2:
  000e2	8b c6		 mov	 eax, esi
$LN76@append@2:
  000e4	53		 push	 ebx
  000e5	52		 push	 edx
  000e6	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000e9	03 d0		 add	 edx, eax
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 _memcpy
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 832  : 			_Eos(_Num);

  000f4	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000f8	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000fb	72 0f		 jb	 SHORT $LN83@append@2
  000fd	8b 06		 mov	 eax, DWORD PTR [esi]
  000ff	5b		 pop	 ebx
  00100	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00104	5f		 pop	 edi

; 833  : 			}
; 834  : 		return (*this);

  00105	8b c6		 mov	 eax, esi
  00107	5e		 pop	 esi

; 835  : 		}

  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8

; 832  : 			_Eos(_Num);

$LN83@append@2:
  0010c	8b c6		 mov	 eax, esi
  0010e	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN85@append@2:

; 833  : 			}
; 834  : 		return (*this);

  00112	5b		 pop	 ebx
  00113	5f		 pop	 edi
  00114	8b c6		 mov	 eax, esi
  00116	5e		 pop	 esi

; 835  : 		}

  00117	5d		 pop	 ebp
  00118	c2 08 00	 ret	 8
$LN89@append@2:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b c1		 mov	 eax, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 05		 je	 SHORT $LN9@SimpleKeyi@2
  0000d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00010	eb 02		 jmp	 SHORT $LN10@SimpleKeyi@2
$LN9@SimpleKeyi@2:
  00012	33 f6		 xor	 esi, esi
$LN10@SimpleKeyi@2:
  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001a	5e		 pop	 esi
  0001b	85 d2		 test	 edx, edx
  0001d	74 0c		 je	 SHORT $LN5@SimpleKeyi@2
  0001f	8d 4a 0c	 lea	 ecx, DWORD PTR [edx+12]
  00022	8a 11		 mov	 dl, BYTE PTR [ecx]
  00024	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN5@SimpleKeyi@2:
  0002b	33 c9		 xor	 ecx, ecx
  0002d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0002f	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >
_TEXT	ENDS
PUBLIC	??0RawDES@CryptoPP@@QAE@ABV01@@Z		; CryptoPP::RawDES::RawDES
; Function compile flags: /Ogtp
;	COMDAT ??0RawDES@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0RawDES@CryptoPP@@QAE@ABV01@@Z PROC			; CryptoPP::RawDES::RawDES, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	33 c9		 xor	 ecx, ecx
  0000b	88 8e 81 00 00
	00		 mov	 BYTE PTR [esi+129], cl
  00011	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00017	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  0001d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00020	77 09		 ja	 SHORT $LN11@RawDES
  00022	c6 86 81 00 00
	00 01		 mov	 BYTE PTR [esi+129], 1
  00029	8b ce		 mov	 ecx, esi
$LN11@RawDES:
  0002b	03 c0		 add	 eax, eax
  0002d	03 c0		 add	 eax, eax
  0002f	50		 push	 eax
  00030	89 8e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ecx
  00036	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  0003c	52		 push	 edx
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _memcpy_s
  00044	83 c4 10	 add	 esp, 16			; 00000010H
  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0RawDES@CryptoPP@@QAE@ABV01@@Z ENDP			; CryptoPP::RawDES::RawDES
_TEXT	ENDS
PUBLIC	??1RawDES@CryptoPP@@QAE@XZ			; CryptoPP::RawDES::~RawDES
; Function compile flags: /Ogtp
;	COMDAT ??1RawDES@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1RawDES@CryptoPP@@QAE@XZ PROC				; CryptoPP::RawDES::~RawDES, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00008	57		 push	 edi
  00009	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
  0000f	3b f8		 cmp	 edi, eax
  00011	75 0b		 jne	 SHORT $LN44@RawDES@2
  00013	c6 80 81 00 00
	00 00		 mov	 BYTE PTR [eax+129], 0
  0001a	33 c0		 xor	 eax, eax
  0001c	f3 ab		 rep stosd
$LN44@RawDES@2:
  0001e	5f		 pop	 edi
  0001f	c3		 ret	 0
??1RawDES@CryptoPP@@QAE@XZ ENDP				; CryptoPP::RawDES::~RawDES
_TEXT	ENDS
PUBLIC	??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b c1		 mov	 eax, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 05		 je	 SHORT $LN11@AlgorithmI
  0000d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00010	eb 02		 jmp	 SHORT $LN12@AlgorithmI
$LN11@AlgorithmI:
  00012	33 f6		 xor	 esi, esi
$LN12@AlgorithmI:
  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001a	5e		 pop	 esi
  0001b	85 d2		 test	 edx, edx
  0001d	74 0c		 je	 SHORT $LN7@AlgorithmI
  0001f	8d 4a 0c	 lea	 ecx, DWORD PTR [edx+12]
  00022	8a 11		 mov	 dl, BYTE PTR [ecx]
  00024	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN7@AlgorithmI:
  0002b	33 c9		 xor	 ecx, ecx
  0002d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0002f	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 838  : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 839  : 		_DEBUG_POINTER(_Ptr);
; 840  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	57		 push	 edi
  0000a	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000d	8d 49 00	 npad	 3
$LL5@append@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@append@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 841  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 886  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 887  : 		return (assign(_Right, 0, npos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	6a ff		 push	 -1
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 888  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??_7NotImplemented@CryptoPP@@6B@		; CryptoPP::NotImplemented::`vftable'
PUBLIC	??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
PUBLIC	??_R4NotImplemented@CryptoPP@@6B@		; CryptoPP::NotImplemented::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNotImplemented@CryptoPP@@@8		; CryptoPP::NotImplemented `RTTI Type Descriptor'
PUBLIC	??_R3NotImplemented@CryptoPP@@8			; CryptoPP::NotImplemented::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NotImplemented@CryptoPP@@8			; CryptoPP::NotImplemented::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NotImplemented@CryptoPP@@8	; CryptoPP::NotImplemented::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ENotImplemented@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::NotImplemented::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@NotImplemented@CryptoPP@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@NotImplemented@CryptoPP@@8 DD FLAT:??_R0?AVNotImplemented@CryptoPP@@@8 ; CryptoPP::NotImplemented::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R2NotImplemented@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NotImplemented@CryptoPP@@8 ; CryptoPP::NotImplemented::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R3NotImplemented@CryptoPP@@8 DD 00H			; CryptoPP::NotImplemented::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNotImplemented@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVNotImplemented@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NotImplemented `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNotImplemented@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R4NotImplemented@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4NotImplemented@CryptoPP@@6B@ DD 00H		; CryptoPP::NotImplemented::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNotImplemented@CryptoPP@@@8
	DD	FLAT:??_R3NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_7NotImplemented@CryptoPP@@6B@
CONST	SEGMENT
??_7NotImplemented@CryptoPP@@6B@ DD FLAT:??_R4NotImplemented@CryptoPP@@6B@ ; CryptoPP::NotImplemented::`vftable'
	DD	FLAT:??_ENotImplemented@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
xdata$x	ENDS
;	COMDAT ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::NotImplemented::NotImplemented, COMDAT
; _this$ = ecx

; 169  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002e	33 c0		 xor	 eax, eax
  00030	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00033	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  0003c	6a ff		 push	 -1
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00041	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  00048	50		 push	 eax
  00049	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0004c	88 01		 mov	 BYTE PTR [ecx], al
  0004e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00057	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  0005d	8b c6		 mov	 eax, esi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5e		 pop	 esi
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::NotImplemented::NotImplemented
PUBLIC	??1NotImplemented@CryptoPP@@UAE@XZ		; CryptoPP::NotImplemented::~NotImplemented
; Function compile flags: /Ogtp
;	COMDAT ??1NotImplemented@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1NotImplemented@CryptoPP@@UAE@XZ PROC			; CryptoPP::NotImplemented::~NotImplemented, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN15@NotImpleme
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN15@NotImpleme:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1NotImplemented@CryptoPP@@UAE@XZ ENDP			; CryptoPP::NotImplemented::~NotImplemented
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GNotImplemented@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNotImplemented@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::NotImplemented::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  0000c	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  00010	72 0c		 jb	 SHORT $LN18@scalar@4
  00012	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN18@scalar@4:
  0001e	33 c0		 xor	 eax, eax
  00020	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00027	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0002a	8b ce		 mov	 ecx, esi
  0002c	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002f	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00034	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00038	74 09		 je	 SHORT $LN30@scalar@4
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00040	83 c4 04	 add	 esp, 4
$LN30@scalar@4:
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??_GNotImplemented@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::NotImplemented::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b c1		 mov	 eax, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 05		 je	 SHORT $LN11@AlgorithmI@2
  0000d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00010	eb 02		 jmp	 SHORT $LN12@AlgorithmI@2
$LN11@AlgorithmI@2:
  00012	33 f6		 xor	 esi, esi
$LN12@AlgorithmI@2:
  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001a	5e		 pop	 esi
  0001b	85 d2		 test	 edx, edx
  0001d	74 0c		 je	 SHORT $LN7@AlgorithmI@2
  0001f	8d 4a 0c	 lea	 ecx, DWORD PTR [edx+12]
  00022	8a 11		 mov	 dl, BYTE PTR [ecx]
  00024	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN7@AlgorithmI@2:
  0002b	33 c9		 xor	 ecx, ecx
  0002d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0002f	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >
_TEXT	ENDS
PUBLIC	??1Base@DES@CryptoPP@@UAE@XZ			; CryptoPP::DES::Base::~Base
; Function compile flags: /Ogtp
;	COMDAT ??1Base@DES@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Base@DES@CryptoPP@@UAE@XZ PROC			; CryptoPP::DES::Base::~Base, COMDAT
; _this$ = ecx
  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00003	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00009	57		 push	 edi
  0000a	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
  00010	3b f8		 cmp	 edi, eax
  00012	75 0b		 jne	 SHORT $LN46@Base@2
  00014	c6 80 81 00 00
	00 00		 mov	 BYTE PTR [eax+129], 0
  0001b	33 c0		 xor	 eax, eax
  0001d	f3 ab		 rep stosd
$LN46@Base@2:
  0001f	5f		 pop	 edi
  00020	c3		 ret	 0
??1Base@DES@CryptoPP@@UAE@XZ ENDP			; CryptoPP::DES::Base::~Base
_TEXT	ENDS
PUBLIC	??0?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>
; Function compile flags: /Ogtp
;	COMDAT ??0?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b c1		 mov	 eax, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 05		 je	 SHORT $LN13@BlockCiphe@4
  0000d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00010	eb 02		 jmp	 SHORT $LN14@BlockCiphe@4
$LN13@BlockCiphe@4:
  00012	33 f6		 xor	 esi, esi
$LN14@BlockCiphe@4:
  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001a	5e		 pop	 esi
  0001b	85 d2		 test	 edx, edx
  0001d	74 0c		 je	 SHORT $LN9@BlockCiphe@4
  0001f	8d 4a 0c	 lea	 ecx, DWORD PTR [edx+12]
  00022	8a 11		 mov	 dl, BYTE PTR [ecx]
  00024	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN9@BlockCiphe@4:
  0002b	33 c9		 xor	 ecx, ecx
  0002d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0002f	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 762  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  : 		return (assign(_Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	6a ff		 push	 -1
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 764  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??0?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>
; Function compile flags: /Ogtp
;	COMDAT ??0?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b c1		 mov	 eax, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 05		 je	 SHORT $LN13@BlockCiphe@5
  0000d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00010	eb 02		 jmp	 SHORT $LN14@BlockCiphe@5
$LN13@BlockCiphe@5:
  00012	33 f6		 xor	 esi, esi
$LN14@BlockCiphe@5:
  00014	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001a	5e		 pop	 esi
  0001b	85 d2		 test	 edx, edx
  0001d	74 0c		 je	 SHORT $LN9@BlockCiphe@5
  0001f	8d 4a 0c	 lea	 ecx, DWORD PTR [edx+12]
  00022	8a 11		 mov	 dl, BYTE PTR [ecx]
  00024	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN9@BlockCiphe@5:
  0002b	33 c9		 xor	 ecx, ecx
  0002d	8a 11		 mov	 dl, BYTE PTR [ecx]
  0002f	88 50 0c	 mov	 BYTE PTR [eax+12], dl
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>::BlockCipherImpl<CryptoPP::DES_XEX3_Info,CryptoPP::BlockCipher>
_TEXT	ENDS
PUBLIC	??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@UAE@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::~ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>
; Function compile flags: /Ogtp
;	COMDAT ??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::~ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>, COMDAT
; _this$ = ecx
  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00003	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00009	57		 push	 edi
  0000a	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
  00010	3b f8		 cmp	 edi, eax
  00012	75 0b		 jne	 SHORT $LN48@ClonableIm@3
  00014	c6 80 81 00 00
	00 00		 mov	 BYTE PTR [eax+129], 0
  0001b	33 c0		 xor	 eax, eax
  0001d	f3 ab		 rep stosd
$LN48@ClonableIm@3:
  0001f	5f		 pop	 edi
  00020	c3		 ret	 0
??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::~ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>
_TEXT	ENDS
PUBLIC	??0Base@DES@CryptoPP@@QAE@ABV012@@Z		; CryptoPP::DES::Base::Base
; Function compile flags: /Ogtp
;	COMDAT ??0Base@DES@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Base@DES@CryptoPP@@QAE@ABV012@@Z PROC		; CryptoPP::DES::Base::Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 c0		 test	 eax, eax
  0000b	74 05		 je	 SHORT $LN18@Base@3
  0000d	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00010	eb 02		 jmp	 SHORT $LN19@Base@3
$LN18@Base@3:
  00012	33 c9		 xor	 ecx, ecx
$LN19@Base@3:
  00014	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00017	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0001a	85 c0		 test	 eax, eax
  0001c	74 05		 je	 SHORT $LN14@Base@3
  0001e	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00021	eb 02		 jmp	 SHORT $LN15@Base@3
$LN14@Base@3:
  00023	33 c9		 xor	 ecx, ecx
$LN15@Base@3:
  00025	8a 11		 mov	 dl, BYTE PTR [ecx]
  00027	88 56 0c	 mov	 BYTE PTR [esi+12], dl
  0002a	85 c0		 test	 eax, eax
  0002c	74 05		 je	 SHORT $LN3@Base@3
  0002e	8d 50 10	 lea	 edx, DWORD PTR [eax+16]
  00031	eb 02		 jmp	 SHORT $LN4@Base@3
$LN3@Base@3:
  00033	33 d2		 xor	 edx, edx
$LN4@Base@3:
  00035	c6 86 91 00 00
	00 00		 mov	 BYTE PTR [esi+145], 0
  0003c	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00042	89 8e 98 00 00
	00		 mov	 DWORD PTR [esi+152], ecx
  00048	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0004b	77 0c		 ja	 SHORT $LN31@Base@3
  0004d	c6 86 91 00 00
	00 01		 mov	 BYTE PTR [esi+145], 1
  00054	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00057	eb 02		 jmp	 SHORT $LN30@Base@3
$LN31@Base@3:
  00059	33 c9		 xor	 ecx, ecx
$LN30@Base@3:
  0005b	8b 86 98 00 00
	00		 mov	 eax, DWORD PTR [esi+152]
  00061	03 c0		 add	 eax, eax
  00063	03 c0		 add	 eax, eax
  00065	50		 push	 eax
  00066	89 8e 9c 00 00
	00		 mov	 DWORD PTR [esi+156], ecx
  0006c	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  00072	52		 push	 edx
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy_s
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
??0Base@DES@CryptoPP@@QAE@ABV012@@Z ENDP		; CryptoPP::DES::Base::Base
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 714  : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 60		 je	 SHORT $LN63@assign@4

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()
; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 718  : 			*this = _Right;
; 719  : 		else
; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  0000e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00012	72 0b		 jb	 SHORT $LN33@assign@4
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
$LN33@assign@4:
  0001f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00030	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00034	73 11		 jae	 SHORT $LN2@assign@4

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  00036	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00039	41		 inc	 ecx
  0003a	51		 push	 ecx
  0003b	57		 push	 edi
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _memmove
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  00045	eb 0a		 jmp	 SHORT $LN1@assign@4
$LN2@assign@4:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  00047	8b 17		 mov	 edx, DWORD PTR [edi]
  00049	89 16		 mov	 DWORD PTR [esi], edx

; 728  : 				_Right._Bx._Ptr = 0;

  0004b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LN1@assign@4:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  00051	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00054	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 731  : 			this->_Myres = _Right._Myres;

  00057	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0005a	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 732  : 
; 733  : 			_Right._Tidy();

  0005d	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00064	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0006b	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN63@assign@4:

; 734  : 			}
; 735  : 		return (*this);

  0006e	5f		 pop	 edi
  0006f	8b c6		 mov	 eax, esi
  00071	5e		 pop	 esi

; 736  : 		}

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\simple.h
_TEXT	ENDS
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T175290 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 28   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	6a 08		 push	 8
  0000c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00013	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_08GAJHKGCM@DES?9XEX3?$AA@
  0001b	8b ce		 mov	 ecx, esi
  0001d	89 45 fc	 mov	 DWORD PTR $T175290[ebp], eax
  00020	88 06		 mov	 BYTE PTR [esi], al
  00022	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::AlgorithmName
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z$3
__ehfuncinfo$??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00034	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  00039	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0003c	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003f	32 d2		 xor	 dl, dl
  00041	3b f9		 cmp	 edi, ecx
  00043	75 0a		 jne	 SHORT $LN46@scalar@5
  00045	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  00048	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004b	32 c0		 xor	 al, al
  0004d	f3 aa		 rep stosb
$LN46@scalar@5:
  0004f	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00052	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00055	3b f9		 cmp	 edi, ecx
  00057	75 0a		 jne	 SHORT $LN78@scalar@5
  00059	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  0005c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005f	32 c0		 xor	 al, al
  00061	f3 aa		 rep stosb
$LN78@scalar@5:
  00063	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00067	74 09		 je	 SHORT $LN82@scalar@5
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006f	83 c4 04	 add	 esp, 4
$LN82@scalar@5:
  00072	8b c6		 mov	 eax, esi
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z$3:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::`scalar deleting destructor'
PUBLIC	??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`vftable'
PUBLIC	??0?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>
PUBLIC	??_R4?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base> `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Array'
PUBLIC	??_R4?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`RTTI Complete Object Locator'
PUBLIC	??_E?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`vector deleting destructor'
PUBLIC	?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::Clone
PUBLIC	?IsForwardTransformation@?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::IsForwardTransformation
EXTRN	??_E?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`vector deleting destructor'
;	COMDAT ??_R4?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\smartptr.h
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD 00H ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Base@DES_XEX3@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0eH
	DD	FLAT:??_R2?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3'
	DB	'@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0eH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@DES_XEX3@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_XEX3_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BI@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0fH
	DD	FLAT:??_R2?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@Cryp'
	DB	'toPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD FLAT:??_R4?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?ProcessAndXorBlock@Base@DES_XEX3@CryptoPP@@UBEXPBE0PAE@Z
	DD	FLAT:?BlockSize@?$BlockCipherImpl@UDES_XEX3_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@Base@DES_XEX3@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\seckey.h
CONST	ENDS
;	COMDAT ??0?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx

; 154  :  	BlockCipherFinal() {}

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx
  00004	6a 01		 push	 1
  00006	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00009	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000e	c6 46 19 01	 mov	 BYTE PTR [esi+25], 1
  00012	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00015	89 40 14	 mov	 DWORD PTR [eax+20], eax
  00018	b9 08 00 00 00	 mov	 ecx, 8
  0001d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00020	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00023	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00026	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  0002a	89 40 14	 mov	 DWORD PTR [eax+20], eax
  0002d	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00034	5f		 pop	 edi
  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	c3		 ret	 0
??0?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IsForwardTransformation@?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsForwardTransformation@?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::IsForwardTransformation, COMDAT
; _this$ = ecx

; 162  : 	bool IsForwardTransformation() const {return DIR == ENCRYPTION;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsForwardTransformation@?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::IsForwardTransformation
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_E?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z$3
__ehfuncinfo$??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00034	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  00039	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0003c	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003f	32 d2		 xor	 dl, dl
  00041	3b f9		 cmp	 edi, ecx
  00043	75 0a		 jne	 SHORT $LN46@scalar@6
  00045	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  00048	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004b	32 c0		 xor	 al, al
  0004d	f3 aa		 rep stosb
$LN46@scalar@6:
  0004f	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00052	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00055	3b f9		 cmp	 edi, ecx
  00057	75 0a		 jne	 SHORT $LN78@scalar@6
  00059	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  0005c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005f	32 c0		 xor	 al, al
  00061	f3 aa		 rep stosb
$LN78@scalar@6:
  00063	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00067	74 09		 je	 SHORT $LN82@scalar@6
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006f	83 c4 04	 add	 esp, 4
$LN82@scalar@6:
  00072	8b c6		 mov	 eax, esi
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z$3:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::`scalar deleting destructor'
PUBLIC	??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>
; Function compile flags: /Ogtp
;	COMDAT ??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0Base@DES@CryptoPP@@QAE@ABV012@@Z
  0000f	8b c6		 mov	 eax, esi
  00011	5e		 pop	 esi
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>
_TEXT	ENDS
PUBLIC	__TI3?AVInvalidArgument@CryptoPP@@
PUBLIC	??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5wo@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z	; CryptoPP::AllocatorBase<unsigned char>::CheckSize
PUBLIC	__CTA3?AVInvalidArgument@CryptoPP@@
PUBLIC	__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z44
PUBLIC	??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::InvalidArgument::InvalidArgument
PUBLIC	__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z44
PUBLIC	??0Exception@CryptoPP@@QAE@ABV01@@Z		; CryptoPP::Exception::Exception
;	COMDAT __CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z44
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVException@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0Exception@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z44
xdata$x	SEGMENT
__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVInvalidArgument@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVInvalidArgument@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVInvalidArgument@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVInvalidArgument@CryptoPP@@ DD 00H
	DD	FLAT:??1InvalidArgument@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVInvalidArgument@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5wo@
CONST	SEGMENT
??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5wo@ DB 'AllocatorBas'
	DB	'e: requested size would cause integer overflow', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z$2
__ehfuncinfo$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
xdata$x	ENDS
;	COMDAT ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z
_TEXT	SEGMENT
$T163768 = -88						; size = 28
$T163769 = -60						; size = 44
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_n$ = 8							; size = 4
?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z PROC	; CryptoPP::AllocatorBase<unsigned char>::CheckSize, COMDAT

; 38   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 39   : 		if (n > ~size_t(0) / sizeof(T))

  00029	83 7d 08 ff	 cmp	 DWORD PTR _n$[ebp], -1
  0002d	76 6f		 jbe	 SHORT $LN1@CheckSize

; 40   : 			throw InvalidArgument("AllocatorBase: requested size would cause integer overflow");

  0002f	6a 3a		 push	 58			; 0000003aH
  00031	33 db		 xor	 ebx, ebx
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5wo@
  00038	8d 4d a8	 lea	 ecx, DWORD PTR $T163768[ebp]
  0003b	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T163768[ebp+20], 15 ; 0000000fH
  00042	89 5d b8	 mov	 DWORD PTR $T163768[ebp+16], ebx
  00045	88 5d a8	 mov	 BYTE PTR $T163768[ebp], bl
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	8d 4d c4	 lea	 ecx, DWORD PTR $T163769[ebp]
  00050	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00053	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	6a ff		 push	 -1
  0005f	88 45 fc	 mov	 BYTE PTR __$EHRec$[ebp+8], al
  00062	89 45 d0	 mov	 DWORD PTR $T163769[ebp+12], eax
  00065	53		 push	 ebx
  00066	8d 45 a8	 lea	 eax, DWORD PTR $T163768[ebp]
  00069	50		 push	 eax
  0006a	8d 4d d4	 lea	 ecx, DWORD PTR $T163769[ebp+16]
  0006d	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T163769[ebp], OFFSET ??_7Exception@CryptoPP@@6B@
  00074	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T163769[ebp+36], 15 ; 0000000fH
  0007b	89 5d e4	 mov	 DWORD PTR $T163769[ebp+32], ebx
  0007e	88 5d d4	 mov	 BYTE PTR $T163769[ebp+16], bl
  00081	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00086	68 00 00 00 00	 push	 OFFSET __TI3?AVInvalidArgument@CryptoPP@@
  0008b	8d 4d c4	 lea	 ecx, DWORD PTR $T163769[ebp]
  0008e	51		 push	 ecx
  0008f	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00092	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T163769[ebp], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  00099	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN70@CheckSize:
$LN1@CheckSize:

; 41   : 	}

  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5b		 pop	 ebx
  000aa	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ad	33 cd		 xor	 ecx, ebp
  000af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
$LN69@CheckSize:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T163768[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z$2:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR $T163769[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ENDP	; CryptoPP::AllocatorBase<unsigned char>::CheckSize
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@CryptoPP@@QAE@ABV01@@Z$0
__ehfuncinfo$??0Exception@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0Exception@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Exception@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::Exception::Exception, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00039	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0003c	33 c0		 xor	 eax, eax
  0003e	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00041	6a ff		 push	 -1
  00043	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00046	50		 push	 eax
  00047	83 c7 10	 add	 edi, 16			; 00000010H
  0004a	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  00051	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00054	57		 push	 edi
  00055	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00058	88 01		 mov	 BYTE PTR [ecx], al
  0005a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005f	8b c6		 mov	 eax, esi
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@CryptoPP@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@CryptoPP@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@CryptoPP@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::Exception::Exception
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z$1
__ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::InvalidArgument::InvalidArgument, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00039	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0003c	33 c0		 xor	 eax, eax
  0003e	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00041	6a ff		 push	 -1
  00043	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00046	50		 push	 eax
  00047	83 c7 10	 add	 edi, 16			; 00000010H
  0004a	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  00051	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00054	57		 push	 edi
  00055	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00058	88 01		 mov	 BYTE PTR [ecx], al
  0005a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  00065	8b c6		 mov	 eax, esi
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::InvalidArgument::InvalidArgument
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 702  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 703  : 		_Tidy();
; 704  : 		assign(_STD forward<_Myt>(_Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00017	50		 push	 eax
  00018	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 705  : 		}

  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ$4
__ehfuncinfo$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00034	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  00039	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0003c	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003f	32 d2		 xor	 dl, dl
  00041	3b f9		 cmp	 edi, ecx
  00043	75 0a		 jne	 SHORT $LN46@ObjectHold
  00045	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  00048	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004b	32 c0		 xor	 al, al
  0004d	f3 aa		 rep stosb
$LN46@ObjectHold:
  0004f	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00052	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00055	3b f9		 cmp	 edi, ecx
  00057	75 0a		 jne	 SHORT $LN78@ObjectHold
  00059	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  0005c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005f	32 c0		 xor	 al, al
  00061	f3 aa		 rep stosb
$LN78@ObjectHold:
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ$3:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ$4:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >
PUBLIC	??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ$4
__ehfuncinfo$??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00034	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  00039	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0003c	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003f	32 d2		 xor	 dl, dl
  00041	3b f9		 cmp	 edi, ecx
  00043	75 0a		 jne	 SHORT $LN46@ObjectHold@2
  00045	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  00048	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004b	32 c0		 xor	 al, al
  0004d	f3 aa		 rep stosb
$LN46@ObjectHold@2:
  0004f	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00052	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00055	3b f9		 cmp	 edi, ecx
  00057	75 0a		 jne	 SHORT $LN78@ObjectHold@2
  00059	88 51 09	 mov	 BYTE PTR [ecx+9], dl
  0005c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005f	32 c0		 xor	 al, al
  00061	f3 aa		 rep stosb
$LN78@ObjectHold@2:
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ$3:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ$4:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >
PUBLIC	??0?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx
  00004	6a 01		 push	 1
  00006	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00009	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000e	c6 46 19 01	 mov	 BYTE PTR [esi+25], 1
  00012	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00015	89 40 14	 mov	 DWORD PTR [eax+20], eax
  00018	b9 08 00 00 00	 mov	 ecx, 8
  0001d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00020	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00023	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00026	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  0002a	89 40 14	 mov	 DWORD PTR [eax+20], eax
  0002d	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00034	5f		 pop	 edi
  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	c3		 ret	 0
??0?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >
_TEXT	ENDS
PUBLIC	??0?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??0?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx
  00004	6a 01		 push	 1
  00006	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00009	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0000e	c6 46 19 01	 mov	 BYTE PTR [esi+25], 1
  00012	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00015	89 40 14	 mov	 DWORD PTR [eax+20], eax
  00018	b9 08 00 00 00	 mov	 ecx, 8
  0001d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00020	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00023	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00026	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  0002a	89 40 14	 mov	 DWORD PTR [eax+20], eax
  0002d	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00034	5f		 pop	 edi
  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	c3		 ret	 0
??0?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >
_TEXT	ENDS
PUBLIC	?allocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEPAEIPBX@Z ; CryptoPP::AllocatorWithCleanup<unsigned char,0>::allocate
EXTRN	?UnalignedAllocate@CryptoPP@@YAPAXI@Z:PROC	; CryptoPP::UnalignedAllocate
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ?allocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEPAEIPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
___formal$ = 12						; size = 4
?allocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEPAEIPBX@Z PROC ; CryptoPP::AllocatorWithCleanup<unsigned char,0>::allocate, COMDAT
; _this$ = ecx

; 90   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 91   : 		this->CheckSize(n);

  00004	8b 75 08	 mov	 esi, DWORD PTR _n$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  0000d	83 c4 04	 add	 esp, 4

; 92   : 		if (n == 0)

  00010	85 f6		 test	 esi, esi
  00012	75 07		 jne	 SHORT $LN2@allocate@4

; 93   : 			return NULL;

  00014	33 c0		 xor	 eax, eax
  00016	5e		 pop	 esi

; 101  : 	}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
$LN2@allocate@4:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)
; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));
; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00021	83 c4 04	 add	 esp, 4
  00024	5e		 pop	 esi

; 101  : 	}

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?allocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEPAEIPBX@Z ENDP ; CryptoPP::AllocatorWithCleanup<unsigned char,0>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEPAEIPBX@Z ; CryptoPP::AllocatorWithCleanup<unsigned char,1>::allocate
EXTRN	?AlignedAllocate@CryptoPP@@YAPAXI@Z:PROC	; CryptoPP::AlignedAllocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEPAEIPBX@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
___formal$ = 12						; size = 4
?allocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEPAEIPBX@Z PROC ; CryptoPP::AllocatorWithCleanup<unsigned char,1>::allocate, COMDAT
; _this$ = ecx

; 90   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 91   : 		this->CheckSize(n);

  00004	8b 75 08	 mov	 esi, DWORD PTR _n$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  0000d	83 c4 04	 add	 esp, 4

; 92   : 		if (n == 0)

  00010	85 f6		 test	 esi, esi
  00012	75 07		 jne	 SHORT $LN2@allocate@5

; 93   : 			return NULL;

  00014	33 c0		 xor	 eax, eax
  00016	5e		 pop	 esi

; 101  : 	}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
$LN2@allocate@5:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)
; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));

  0001b	56		 push	 esi
  0001c	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001f	72 0d		 jb	 SHORT $LN1@allocate@5
  00021	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  00026	83 c4 04	 add	 esp, 4
  00029	5e		 pop	 esi

; 101  : 	}

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN1@allocate@5:

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  0002e	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00033	83 c4 04	 add	 esp, 4
  00036	5e		 pop	 esi

; 101  : 	}

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?allocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEPAEIPBX@Z ENDP ; CryptoPP::AllocatorWithCleanup<unsigned char,1>::allocate
_TEXT	ENDS
PUBLIC	??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`vftable'
PUBLIC	??0?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::BlockCipherFinal<0,CryptoPP::DES::Base>
PUBLIC	??_R4?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base> `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Base@DES@CryptoPP@@8		; CryptoPP::DES::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBase@DES@CryptoPP@@@8			; CryptoPP::DES::Base `RTTI Type Descriptor'
PUBLIC	??_R3Base@DES@CryptoPP@@8			; CryptoPP::DES::Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Base@DES@CryptoPP@@8			; CryptoPP::DES::Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> `RTTI Type Descriptor'
PUBLIC	??_R3?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::`RTTI Base Class Array'
PUBLIC	??_R1M@?0A@EA@DES_Info@CryptoPP@@8		; CryptoPP::DES_Info::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUDES_Info@CryptoPP@@@8			; CryptoPP::DES_Info `RTTI Type Descriptor'
PUBLIC	??_R3DES_Info@CryptoPP@@8			; CryptoPP::DES_Info::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DES_Info@CryptoPP@@8			; CryptoPP::DES_Info::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DES_Info@CryptoPP@@8		; CryptoPP::DES_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R10?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<8,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
PUBLIC	??_R0?AV?$FixedKeyLength@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<8,4,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedKeyLength@$07$03$0A@@CryptoPP@@8	; CryptoPP::FixedKeyLength<8,4,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedKeyLength@$07$03$0A@@CryptoPP@@8	; CryptoPP::FixedKeyLength<8,4,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<8,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1N@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<8,4,0>::`RTTI Base Class Descriptor at (13,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@RawDES@CryptoPP@@8		; CryptoPP::RawDES::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AVRawDES@CryptoPP@@@8			; CryptoPP::RawDES `RTTI Type Descriptor'
PUBLIC	??_R3RawDES@CryptoPP@@8				; CryptoPP::RawDES::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RawDES@CryptoPP@@8				; CryptoPP::RawDES::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RawDES@CryptoPP@@8		; CryptoPP::RawDES::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::MinKeyLength
PUBLIC	?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::MaxKeyLength
PUBLIC	?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::DefaultKeyLength
PUBLIC	?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::GetValidKeyLength
PUBLIC	?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::IVRequirement
PUBLIC	?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::IVSize
PUBLIC	??_R4?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`RTTI Complete Object Locator'
PUBLIC	??_E?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`vector deleting destructor'
PUBLIC	?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::Clone
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::AlgorithmName
PUBLIC	?BlockSize@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::BlockSize
PUBLIC	?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::IsForwardTransformation
EXTRN	??_E?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`vector deleting destructor'
EXTRN	?UncheckedSetKey@Base@DES@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z:PROC ; CryptoPP::DES::Base::UncheckedSetKey
EXTRN	?ProcessAndXorBlock@Base@DES@CryptoPP@@UBEXPBE0PAE@Z:PROC ; CryptoPP::DES::Base::ProcessAndXorBlock
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RawDES@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RawDES@CryptoPP@@8 DD FLAT:??_R0?AVRawDES@CryptoPP@@@8 ; CryptoPP::RawDES::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RawDES@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2RawDES@CryptoPP@@8
rdata$r	SEGMENT
??_R2RawDES@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@RawDES@CryptoPP@@8 ; CryptoPP::RawDES::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3RawDES@CryptoPP@@8
rdata$r	SEGMENT
??_R3RawDES@CryptoPP@@8 DD 00H				; CryptoPP::RawDES::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2RawDES@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRawDES@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVRawDES@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::RawDES `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRawDES@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@RawDES@CryptoPP@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@RawDES@CryptoPP@@8 DD FLAT:??_R0?AVRawDES@CryptoPP@@@8 ; CryptoPP::RawDES::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RawDES@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1N@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1N@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<8,4,0>::`RTTI Base Class Descriptor at (13,-1,0,64)'
	DD	00H
	DD	0dH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<8,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedKeyLength@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<8,4,0>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedKeyLength@$07$03$0A@@CryptoPP@@8 DD 00H	; CryptoPP::FixedKeyLength<8,4,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedKeyLength@$07$03$0A@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$FixedKeyLength@$07$03$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedKeyLength<8,4,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedKeyLength@$07$03$0A@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R10?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R10?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<8,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DES_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DES_Info@CryptoPP@@8 DD FLAT:??_R0?AUDES_Info@CryptoPP@@@8 ; CryptoPP::DES_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DES_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2DES_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R2DES_Info@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@DES_Info@CryptoPP@@8 ; CryptoPP::DES_Info::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R10?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3DES_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R3DES_Info@CryptoPP@@8 DD 00H			; CryptoPP::DES_Info::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2DES_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUDES_Info@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AUDES_Info@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::DES_Info `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUDES_Info@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@DES_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@DES_Info@CryptoPP@@8 DD FLAT:??_R0?AUDES_Info@CryptoPP@@@8 ; CryptoPP::DES_Info::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	02H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DES_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8 DD 00H ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@Crypt'
	DB	'oPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher'
	DB	'@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoB'
	DB	'ases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@Crypt'
	DB	'oPP@@V12@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0cH
	DD	FLAT:??_R2?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2'
	DB	'@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Base@DES@CryptoPP@@8
rdata$r	SEGMENT
??_R2Base@DES@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Base@DES@CryptoPP@@8 ; CryptoPP::DES::Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1BA@?0A@EA@RawDES@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Base@DES@CryptoPP@@8
rdata$r	SEGMENT
??_R3Base@DES@CryptoPP@@8 DD 00H			; CryptoPP::DES::Base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0eH
	DD	FLAT:??_R2Base@DES@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBase@DES@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVBase@DES@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::DES::Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBase@DES@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Base@DES@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Base@DES@CryptoPP@@8 DD FLAT:??_R0?AVBase@DES@CryptoPP@@@8 ; CryptoPP::DES::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Base@DES@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Base@DES@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1BA@?0A@EA@RawDES@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0fH
	DD	FLAT:??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@Cry'
	DB	'ptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0eH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0fH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@DES@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@DES_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1BA@?0A@EA@RawDES@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	010H
	DD	FLAT:??_R2?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP'
	DB	'@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?ProcessAndXorBlock@Base@DES@CryptoPP@@UBEXPBE0PAE@Z
	DD	FLAT:?BlockSize@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@Base@DES@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::BlockCipherFinal<0,CryptoPP::DES::Base>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0Base@DES@CryptoPP@@QAE@ABV012@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00015	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::BlockCipherFinal<0,CryptoPP::DES::Base>
_TEXT	ENDS
PUBLIC	??_C@_03CNAKKODF@DES?$AA@			; `string'
PUBLIC	?StaticAlgorithmName@DES_Info@CryptoPP@@SAPBDXZ	; CryptoPP::DES_Info::StaticAlgorithmName
;	COMDAT ??_C@_03CNAKKODF@DES?$AA@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\des.h
CONST	SEGMENT
??_C@_03CNAKKODF@DES?$AA@ DB 'DES', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?StaticAlgorithmName@DES_Info@CryptoPP@@SAPBDXZ
_TEXT	SEGMENT
?StaticAlgorithmName@DES_Info@CryptoPP@@SAPBDXZ PROC	; CryptoPP::DES_Info::StaticAlgorithmName, COMDAT

; 28   : 	static const char * StaticAlgorithmName() {return "DES";}

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03CNAKKODF@DES?$AA@
  00005	c3		 ret	 0
?StaticAlgorithmName@DES_Info@CryptoPP@@SAPBDXZ ENDP	; CryptoPP::DES_Info::StaticAlgorithmName
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\seckey.h
_TEXT	ENDS
;	COMDAT ?BlockSize@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?BlockSize@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::BlockSize, COMDAT
; _this$ = ecx

; 146  : 	unsigned int BlockSize() const {return this->BLOCKSIZE;}

  00000	b8 08 00 00 00	 mov	 eax, 8
  00005	c3		 ret	 0
?BlockSize@?$BlockCipherImpl@UDES_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::DES_Info,CryptoPP::BlockCipher>::BlockSize
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::MinKeyLength, COMDAT
; _this$ = ecx

; 134  : 	size_t MinKeyLength() const {return INFO::MIN_KEYLENGTH;}

  00000	b8 08 00 00 00	 mov	 eax, 8
  00005	c3		 ret	 0
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::MinKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::MaxKeyLength, COMDAT
; _this$ = ecx

; 135  : 	size_t MaxKeyLength() const {return (size_t)INFO::MAX_KEYLENGTH;}

  00000	b8 08 00 00 00	 mov	 eax, 8
  00005	c3		 ret	 0
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::MaxKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::DefaultKeyLength, COMDAT
; _this$ = ecx

; 136  : 	size_t DefaultKeyLength() const {return INFO::DEFAULT_KEYLENGTH;}

  00000	b8 08 00 00 00	 mov	 eax, 8
  00005	c3		 ret	 0
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::DefaultKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::IVRequirement, COMDAT
; _this$ = ecx

; 138  : 	SimpleKeyingInterface::IV_Requirement IVRequirement() const {return (SimpleKeyingInterface::IV_Requirement)INFO::IV_REQUIREMENT;}

  00000	b8 04 00 00 00	 mov	 eax, 4
  00005	c3		 ret	 0
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::IVRequirement
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::IVSize, COMDAT
; _this$ = ecx

; 139  : 	unsigned int IVSize() const {return INFO::IV_LENGTH;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::IVSize
_TEXT	ENDS
PUBLIC	?StaticGetValidKeyLength@?$FixedKeyLength@$07$03$0A@@CryptoPP@@SAII@Z ; CryptoPP::FixedKeyLength<8,4,0>::StaticGetValidKeyLength
; Function compile flags: /Ogtp
;	COMDAT ?StaticGetValidKeyLength@?$FixedKeyLength@$07$03$0A@@CryptoPP@@SAII@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?StaticGetValidKeyLength@?$FixedKeyLength@$07$03$0A@@CryptoPP@@SAII@Z PROC ; CryptoPP::FixedKeyLength<8,4,0>::StaticGetValidKeyLength, COMDAT

; 75   : 	static size_t CRYPTOPP_API StaticGetValidKeyLength(size_t) {return KEYLENGTH;}

  00000	b8 08 00 00 00	 mov	 eax, 8
  00005	c3		 ret	 0
?StaticGetValidKeyLength@?$FixedKeyLength@$07$03$0A@@CryptoPP@@SAII@Z ENDP ; CryptoPP::FixedKeyLength<8,4,0>::StaticGetValidKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::IsForwardTransformation, COMDAT
; _this$ = ecx

; 162  : 	bool IsForwardTransformation() const {return DIR == ENCRYPTION;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::IsForwardTransformation
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_E?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`vector deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::GetValidKeyLength, COMDAT
; _this$ = ecx

; 137  : 	size_t GetValidKeyLength(size_t n) const {return INFO::StaticGetValidKeyLength(n);}

  00000	b8 08 00 00 00	 mov	 eax, 8
  00005	c2 04 00	 ret	 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >::GetValidKeyLength
_TEXT	ENDS
PUBLIC	??1?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::~BlockCipherFinal<0,CryptoPP::DES::Base>
; Function compile flags: /Ogtp
;	COMDAT ??1?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::~BlockCipherFinal<0,CryptoPP::DES::Base>, COMDAT
; _this$ = ecx
  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00003	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00009	57		 push	 edi
  0000a	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
  00010	3b f8		 cmp	 edi, eax
  00012	75 0b		 jne	 SHORT $LN50@BlockCiphe@6
  00014	c6 80 81 00 00
	00 00		 mov	 BYTE PTR [eax+129], 0
  0001b	33 c0		 xor	 eax, eax
  0001d	f3 ab		 rep stosd
$LN50@BlockCiphe@6:
  0001f	5f		 pop	 edi
  00020	c3		 ret	 0
??1?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::~BlockCipherFinal<0,CryptoPP::DES::Base>
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\simple.h
_TEXT	ENDS
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T179741 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 28   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	6a 03		 push	 3
  0000c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00013	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_03CNAKKODF@DES?$AA@
  0001b	8b ce		 mov	 ecx, esi
  0001d	89 45 fc	 mov	 DWORD PTR $T179741[ebp], eax
  00020	88 06		 mov	 BYTE PTR [esi], al
  00022	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_Info> > >::AlgorithmName
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_G?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 8e 98 00 00
	00		 mov	 ecx, DWORD PTR [esi+152]
  0000c	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0000f	57		 push	 edi
  00010	8b b8 8c 00 00
	00		 mov	 edi, DWORD PTR [eax+140]
  00016	3b f8		 cmp	 edi, eax
  00018	75 0b		 jne	 SHORT $LN52@scalar@7
  0001a	c6 80 81 00 00
	00 00		 mov	 BYTE PTR [eax+129], 0
  00021	33 c0		 xor	 eax, eax
  00023	f3 ab		 rep stosd
$LN52@scalar@7:
  00025	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00029	74 09		 je	 SHORT $LN56@scalar@7
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
$LN56@scalar@7:
  00034	5f		 pop	 edi
  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
??_G?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z
_TEXT	SEGMENT
$T180304 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 146  : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 147  : 	return (_STD move(_Left.append(_Right)));

  00004	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00007	8b c2		 mov	 eax, edx
  00009	56		 push	 esi
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T180304[ebp], 0
  00011	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL41@operator:
  00014	8a 08		 mov	 cl, BYTE PTR [eax]
  00016	40		 inc	 eax
  00017	84 c9		 test	 cl, cl
  00019	75 f9		 jne	 SHORT $LL41@operator
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	2b c6		 sub	 eax, esi
  00020	50		 push	 eax
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00027	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00031	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00038	50		 push	 eax
  00039	8b ce		 mov	 ecx, esi
  0003b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0003e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 148  : 	}

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z
_TEXT	SEGMENT
_newPointer$164016 = -4					; size = 4
_a$ = 8							; size = 4
_p$ = 12						; size = 4
_oldSize$ = 16						; size = 4
_newSize$ = 20						; size = 4
_preserve$ = 24						; size = 1
??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z PROC ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 62   : 	if (oldSize == newSize)

  00005	8b 5d 10	 mov	 ebx, DWORD PTR _oldSize$[ebp]
  00008	56		 push	 esi
  00009	8b 75 14	 mov	 esi, DWORD PTR _newSize$[ebp]
  0000c	3b de		 cmp	 ebx, esi
  0000e	75 09		 jne	 SHORT $LN3@StandardRe

; 63   : 		return p;

  00010	8b 45 0c	 mov	 eax, DWORD PTR _p$[ebp]
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN3@StandardRe:

; 64   : 
; 65   : 	if (preserve)

  00019	80 7d 18 00	 cmp	 BYTE PTR _preserve$[ebp], 0
  0001d	57		 push	 edi
  0001e	74 55		 je	 SHORT $LN2@StandardRe

; 66   : 	{
; 67   : 		typename A::pointer newPointer = a.allocate(newSize, NULL);

  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  00026	83 c4 04	 add	 esp, 4
  00029	85 f6		 test	 esi, esi
  0002b	75 05		 jne	 SHORT $LN7@StandardRe
  0002d	89 75 fc	 mov	 DWORD PTR _newPointer$164016[ebp], esi
  00030	eb 0c		 jmp	 SHORT $LN8@StandardRe
$LN7@StandardRe:
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00038	83 c4 04	 add	 esp, 4
  0003b	89 45 fc	 mov	 DWORD PTR _newPointer$164016[ebp], eax
$LN8@StandardRe:

; 68   : 		memcpy_s(newPointer, sizeof(T)*newSize, p, sizeof(T)*STDMIN(oldSize, newSize));

  0003e	8d 45 14	 lea	 eax, DWORD PTR _newSize$[ebp]
  00041	3b f3		 cmp	 esi, ebx
  00043	72 03		 jb	 SHORT $LN13@StandardRe
  00045	8d 45 10	 lea	 eax, DWORD PTR _oldSize$[ebp]
$LN13@StandardRe:
  00048	8b 00		 mov	 eax, DWORD PTR [eax]
  0004a	8b 5d 0c	 mov	 ebx, DWORD PTR _p$[ebp]
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _newPointer$164016[ebp]
  00050	50		 push	 eax
  00051	53		 push	 ebx
  00052	56		 push	 esi
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 _memcpy_s

; 69   : 		a.deallocate(p, oldSize);

  00059	8b 4d 10	 mov	 ecx, DWORD PTR _oldSize$[ebp]
  0005c	32 c0		 xor	 al, al
  0005e	8b fb		 mov	 edi, ebx
  00060	53		 push	 ebx
  00061	f3 aa		 rep stosb
  00063	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate

; 70   : 		return newPointer;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _newPointer$164016[ebp]
  0006b	83 c4 14	 add	 esp, 20			; 00000014H
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN2@StandardRe:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		a.deallocate(p, oldSize);

  00075	8b 55 0c	 mov	 edx, DWORD PTR _p$[ebp]
  00078	8b fa		 mov	 edi, edx
  0007a	32 c0		 xor	 al, al
  0007c	8b cb		 mov	 ecx, ebx
  0007e	52		 push	 edx
  0007f	f3 aa		 rep stosb
  00081	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate

; 75   : 		return a.allocate(newSize, NULL);

  00086	56		 push	 esi
  00087	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  0008c	83 c4 08	 add	 esp, 8
  0008f	85 f6		 test	 esi, esi
  00091	75 09		 jne	 SHORT $LN57@StandardRe
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	33 c0		 xor	 eax, eax
  00097	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0

; 75   : 		return a.allocate(newSize, NULL);

$LN57@StandardRe:
  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  000a2	83 c4 04	 add	 esp, 4
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ENDP ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
_TEXT	ENDS
PUBLIC	??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
; Function compile flags: /Ogtp
;	COMDAT ??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z
_TEXT	SEGMENT
_newPointer$164028 = -4					; size = 4
_a$ = 8							; size = 4
_p$ = 12						; size = 4
_oldSize$ = 16						; size = 4
_newSize$ = 20						; size = 4
_preserve$ = 24						; size = 1
??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z PROC ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 62   : 	if (oldSize == newSize)

  00005	8b 5d 10	 mov	 ebx, DWORD PTR _oldSize$[ebp]
  00008	56		 push	 esi
  00009	8b 75 14	 mov	 esi, DWORD PTR _newSize$[ebp]
  0000c	3b de		 cmp	 ebx, esi
  0000e	75 09		 jne	 SHORT $LN3@StandardRe@2

; 63   : 		return p;

  00010	8b 45 0c	 mov	 eax, DWORD PTR _p$[ebp]
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN3@StandardRe@2:

; 64   : 
; 65   : 	if (preserve)

  00019	80 7d 18 00	 cmp	 BYTE PTR _preserve$[ebp], 0
  0001d	57		 push	 edi
  0001e	74 7f		 je	 SHORT $LN2@StandardRe@2

; 66   : 	{
; 67   : 		typename A::pointer newPointer = a.allocate(newSize, NULL);

  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  00026	83 c4 04	 add	 esp, 4
  00029	85 f6		 test	 esi, esi
  0002b	75 05		 jne	 SHORT $LN7@StandardRe@2
  0002d	89 75 fc	 mov	 DWORD PTR _newPointer$164028[ebp], esi
  00030	eb 18		 jmp	 SHORT $LN8@StandardRe@2
$LN7@StandardRe@2:
  00032	56		 push	 esi
  00033	83 fe 10	 cmp	 esi, 16			; 00000010H
  00036	72 07		 jb	 SHORT $LN6@StandardRe@2
  00038	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  0003d	eb 05		 jmp	 SHORT $LN61@StandardRe@2
$LN6@StandardRe@2:
  0003f	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
$LN61@StandardRe@2:
  00044	89 45 fc	 mov	 DWORD PTR _newPointer$164028[ebp], eax
  00047	83 c4 04	 add	 esp, 4
$LN8@StandardRe@2:

; 68   : 		memcpy_s(newPointer, sizeof(T)*newSize, p, sizeof(T)*STDMIN(oldSize, newSize));

  0004a	8d 45 14	 lea	 eax, DWORD PTR _newSize$[ebp]
  0004d	3b f3		 cmp	 esi, ebx
  0004f	72 03		 jb	 SHORT $LN13@StandardRe@2
  00051	8d 45 10	 lea	 eax, DWORD PTR _oldSize$[ebp]
$LN13@StandardRe@2:
  00054	8b 00		 mov	 eax, DWORD PTR [eax]
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _p$[ebp]
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _newPointer$164028[ebp]
  0005c	50		 push	 eax
  0005d	57		 push	 edi
  0005e	56		 push	 esi
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _memcpy_s

; 69   : 		a.deallocate(p, oldSize);

  00065	32 c0		 xor	 al, al
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	8b cb		 mov	 ecx, ebx
  0006c	f3 aa		 rep stosb
  0006e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00071	72 16		 jb	 SHORT $LN14@StandardRe@2
  00073	8b 55 0c	 mov	 edx, DWORD PTR _p$[ebp]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate

; 70   : 		return newPointer;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _newPointer$164028[ebp]

; 75   : 		return a.allocate(newSize, NULL);

  0007f	83 c4 04	 add	 esp, 4
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0

; 69   : 		a.deallocate(p, oldSize);

$LN14@StandardRe@2:
  00089	8b 45 0c	 mov	 eax, DWORD PTR _p$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate

; 70   : 		return newPointer;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _newPointer$164028[ebp]

; 75   : 		return a.allocate(newSize, NULL);

  00095	83 c4 04	 add	 esp, 4
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
$LN2@StandardRe@2:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		a.deallocate(p, oldSize);

  0009f	8b 55 0c	 mov	 edx, DWORD PTR _p$[ebp]
  000a2	32 c0		 xor	 al, al
  000a4	8b fa		 mov	 edi, edx
  000a6	8b cb		 mov	 ecx, ebx
  000a8	f3 aa		 rep stosb
  000aa	52		 push	 edx
  000ab	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000ae	72 07		 jb	 SHORT $LN35@StandardRe@2
  000b0	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  000b5	eb 05		 jmp	 SHORT $LN64@StandardRe@2
$LN35@StandardRe@2:
  000b7	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
$LN64@StandardRe@2:
  000bc	83 c4 04	 add	 esp, 4

; 75   : 		return a.allocate(newSize, NULL);

  000bf	56		 push	 esi
  000c0	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  000c5	83 c4 04	 add	 esp, 4
  000c8	85 f6		 test	 esi, esi
  000ca	75 09		 jne	 SHORT $LN57@StandardRe@2
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	33 c0		 xor	 eax, eax
  000d0	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0

; 75   : 		return a.allocate(newSize, NULL);

$LN57@StandardRe@2:
  000d5	56		 push	 esi
  000d6	83 fe 10	 cmp	 esi, 16			; 00000010H
  000d9	72 0f		 jb	 SHORT $LN56@StandardRe@2
  000db	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  000e0	83 c4 04	 add	 esp, 4
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0

; 75   : 		return a.allocate(newSize, NULL);

$LN56@StandardRe@2:
  000ea	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  000ef	83 c4 04	 add	 esp, 4
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx

; 76   : 	}
; 77   : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ENDP ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
_TEXT	ENDS
PUBLIC	__TI3?AVNotImplemented@CryptoPP@@
PUBLIC	??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5re@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	__CTA3?AVNotImplemented@CryptoPP@@
PUBLIC	__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z44
PUBLIC	??0NotImplemented@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::NotImplemented::NotImplemented
;	COMDAT __CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z44
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVNotImplemented@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVNotImplemented@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVNotImplemented@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVNotImplemented@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVNotImplemented@CryptoPP@@ DD 00H
	DD	FLAT:??1NotImplemented@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVNotImplemented@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5re@
CONST	SEGMENT
??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5re@ DB ': this ob'
	DB	'ject doesn''t support resynchronization', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$3
__ehfuncinfo$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
xdata$x	ENDS
;	COMDAT ?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
_TEXT	SEGMENT
$T155061 = -116						; size = 28
$T155062 = -88						; size = 28
$T155064 = -60						; size = 44
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iv$ = 8						; size = 4
_ivLength$ = 12						; size = 4
?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z PROC ; CryptoPP::SimpleKeyingInterface::Resynchronize, COMDAT
; _this$ = ecx

; 402  : 	virtual void Resynchronize(const byte *iv, int ivLength=-1) {throw NotImplemented(GetAlgorithm().AlgorithmName() + ": this object doesn't support resynchronization");}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  0002f	ff d2		 call	 edx
  00031	8b 10		 mov	 edx, DWORD PTR [eax]
  00033	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00036	8d 4d 8c	 lea	 ecx, DWORD PTR $T155061[ebp]
  00039	51		 push	 ecx
  0003a	8b c8		 mov	 ecx, eax
  0003c	ff d2		 call	 edx
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5re@
  00043	50		 push	 eax
  00044	8d 45 a8	 lea	 eax, DWORD PTR $T155062[ebp]
  00047	33 db		 xor	 ebx, ebx
  00049	50		 push	 eax
  0004a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	8b f0		 mov	 esi, eax
  00057	8d 4d c4	 lea	 ecx, DWORD PTR $T155064[ebp]
  0005a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  00063	6a ff		 push	 -1
  00065	53		 push	 ebx
  00066	56		 push	 esi
  00067	8d 4d d4	 lea	 ecx, DWORD PTR $T155064[ebp+16]
  0006a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T155064[ebp], OFFSET ??_7Exception@CryptoPP@@6B@
  00075	89 5d d0	 mov	 DWORD PTR $T155064[ebp+12], ebx
  00078	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T155064[ebp+36], 15 ; 0000000fH
  0007f	89 5d e4	 mov	 DWORD PTR $T155064[ebp+32], ebx
  00082	88 5d d4	 mov	 BYTE PTR $T155064[ebp+16], bl
  00085	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0008a	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0008f	8d 4d c4	 lea	 ecx, DWORD PTR $T155064[ebp]
  00092	51		 push	 ecx
  00093	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00097	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T155064[ebp], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  0009e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN40@Resynchron:
$LN39@Resynchron:
  000a3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$0:
  00000	8d 4d 8c	 lea	 ecx, DWORD PTR $T155061[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR $T155062[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$3:
  00010	8d 4d c4	 lea	 ecx, DWORD PTR $T155064[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z ENDP ; CryptoPP::SimpleKeyingInterface::Resynchronize
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z$1
__ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0NotImplemented@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::NotImplemented::NotImplemented, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00039	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0003c	33 c0		 xor	 eax, eax
  0003e	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00041	6a ff		 push	 -1
  00043	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00046	50		 push	 eax
  00047	83 c7 10	 add	 edi, 16			; 00000010H
  0004a	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  00051	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00054	57		 push	 edi
  00055	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00058	88 01		 mov	 BYTE PTR [ecx], al
  0005a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  00065	8b c6		 mov	 eax, esi
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NotImplemented@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::NotImplemented::NotImplemented
PUBLIC	??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$7
	DD	01H
	DD	FLAT:__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$8
__ehfuncinfo$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
$T181750 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00031	e8 00 00 00 00	 call	 ??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
  00036	83 c6 28	 add	 esi, 40			; 00000028H
  00039	89 75 f0	 mov	 DWORD PTR $T181750[ebp], esi
  0003c	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0003f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00046	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  0004b	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0004e	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00051	3b f9		 cmp	 edi, ecx
  00053	75 0b		 jne	 SHORT $LN56@CipherMode@2
  00055	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  00059	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005c	32 c0		 xor	 al, al
  0005e	f3 aa		 rep stosb
$LN56@CipherMode@2:
  00060	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00063	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00066	3b f9		 cmp	 edi, ecx
  00068	75 0b		 jne	 SHORT $LN88@CipherMode@2
  0006a	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  0006e	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00071	32 c0		 xor	 al, al
  00073	f3 aa		 rep stosb
$LN88@CipherMode@2:
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 28	 add	 ecx, 40			; 00000028H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$7:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR $T181750[ebp]
  0000e	83 c1 10	 add	 ecx, 16			; 00000010H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$8:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR $T181750[ebp]
  00019	83 c1 28	 add	 ecx, 40			; 00000028H
  0001c	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>
PUBLIC	??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$7
	DD	01H
	DD	FLAT:__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$8
__ehfuncinfo$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
$T182428 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00031	e8 00 00 00 00	 call	 ??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
  00036	83 c6 28	 add	 esi, 40			; 00000028H
  00039	89 75 f0	 mov	 DWORD PTR $T182428[ebp], esi
  0003c	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0003f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00046	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  0004b	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0004e	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00051	3b f9		 cmp	 edi, ecx
  00053	75 0b		 jne	 SHORT $LN56@CipherMode@3
  00055	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  00059	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005c	32 c0		 xor	 al, al
  0005e	f3 aa		 rep stosb
$LN56@CipherMode@3:
  00060	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00063	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00066	3b f9		 cmp	 edi, ecx
  00068	75 0b		 jne	 SHORT $LN88@CipherMode@3
  0006a	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  0006e	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00071	32 c0		 xor	 al, al
  00073	f3 aa		 rep stosb
$LN88@CipherMode@3:
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 28	 add	 ecx, 40			; 00000028H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$7:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR $T182428[ebp]
  0000e	83 c1 10	 add	 ecx, 16			; 00000010H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ$8:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR $T182428[ebp]
  00019	83 c1 28	 add	 ecx, 40			; 00000028H
  0001c	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>
PUBLIC	??_7CSimpleModulus@@6B@				; CSimpleModulus::`vftable'
PUBLIC	??1CSimpleModulus@@UAE@XZ			; CSimpleModulus::~CSimpleModulus
PUBLIC	??_R4CSimpleModulus@@6B@			; CSimpleModulus::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSimpleModulus@@@8			; CSimpleModulus `RTTI Type Descriptor'
PUBLIC	??_R3CSimpleModulus@@8				; CSimpleModulus::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSimpleModulus@@8				; CSimpleModulus::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSimpleModulus@@8			; CSimpleModulus::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ECSimpleModulus@@UAEPAXI@Z:PROC		; CSimpleModulus::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CSimpleModulus@@8
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
rdata$r	SEGMENT
??_R1A@?0A@EA@CSimpleModulus@@8 DD FLAT:??_R0?AVCSimpleModulus@@@8 ; CSimpleModulus::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSimpleModulus@@8
rdata$r	ENDS
;	COMDAT ??_R2CSimpleModulus@@8
rdata$r	SEGMENT
??_R2CSimpleModulus@@8 DD FLAT:??_R1A@?0A@EA@CSimpleModulus@@8 ; CSimpleModulus::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSimpleModulus@@8
rdata$r	SEGMENT
??_R3CSimpleModulus@@8 DD 00H				; CSimpleModulus::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSimpleModulus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSimpleModulus@@@8
_DATA	SEGMENT
??_R0?AVCSimpleModulus@@@8 DD FLAT:??_7type_info@@6B@	; CSimpleModulus `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSimpleModulus@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSimpleModulus@@6B@
rdata$r	SEGMENT
??_R4CSimpleModulus@@6B@ DD 00H				; CSimpleModulus::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSimpleModulus@@@8
	DD	FLAT:??_R3CSimpleModulus@@8
rdata$r	ENDS
;	COMDAT ??_7CSimpleModulus@@6B@
CONST	SEGMENT
??_7CSimpleModulus@@6B@ DD FLAT:??_R4CSimpleModulus@@6B@ ; CSimpleModulus::`vftable'
	DD	FLAT:??_ECSimpleModulus@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSimpleModulus@@UAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1CSimpleModulus@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CSimpleModulus@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSimpleModulus@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CSimpleModulus@@UAE@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$??1CSimpleModulus@@UAE@XZ$9
	DD	02H
	DD	FLAT:__unwindfunclet$??1CSimpleModulus@@UAE@XZ$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSimpleModulus@@UAE@XZ$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSimpleModulus@@UAE@XZ$20
	DD	05H
	DD	FLAT:__unwindfunclet$??1CSimpleModulus@@UAE@XZ$21
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\simplemodulus.cpp
xdata$x	ENDS
;	COMDAT ??1CSimpleModulus@@UAE@XZ
_TEXT	SEGMENT
$T183869 = -20						; size = 4
$T183958 = -20						; size = 4
$T183109 = -20						; size = 4
$T183198 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSimpleModulus@@UAE@XZ PROC				; CSimpleModulus::~CSimpleModulus, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSimpleModulus@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CSimpleModulus@@6B@

; 23   : 	return;
; 24   : }

  00033	8d 73 78	 lea	 esi, DWORD PTR [ebx+120]
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	89 75 ec	 mov	 DWORD PTR $T183198[ebp], esi
  00040	8b ce		 mov	 ecx, esi
  00042	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00046	e8 00 00 00 00	 call	 ??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
  0004b	83 c6 28	 add	 esi, 40			; 00000028H
  0004e	89 75 ec	 mov	 DWORD PTR $T183109[ebp], esi
  00051	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00054	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00058	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  0005d	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00060	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00063	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00066	3b f8		 cmp	 edi, eax
  00068	75 08		 jne	 SHORT $LN60@CSimpleMod
  0006a	c6 40 09 00	 mov	 BYTE PTR [eax+9], 0
  0006e	32 c0		 xor	 al, al
  00070	f3 aa		 rep stosb
$LN60@CSimpleMod:
  00072	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00075	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00078	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0007b	3b f8		 cmp	 edi, eax
  0007d	75 08		 jne	 SHORT $LN92@CSimpleMod
  0007f	c6 40 09 00	 mov	 BYTE PTR [eax+9], 0
  00083	32 c0		 xor	 al, al
  00085	f3 aa		 rep stosb
$LN92@CSimpleMod:
  00087	8d 73 08	 lea	 esi, DWORD PTR [ebx+8]
  0008a	89 75 ec	 mov	 DWORD PTR $T183958[ebp], esi
  0008d	8b ce		 mov	 ecx, esi
  0008f	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00096	e8 00 00 00 00	 call	 ??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
  0009b	83 c6 28	 add	 esi, 40			; 00000028H
  0009e	89 75 ec	 mov	 DWORD PTR $T183869[ebp], esi
  000a1	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000a4	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  000ab	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  000b0	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  000b3	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  000b6	3b f9		 cmp	 edi, ecx
  000b8	75 0b		 jne	 SHORT $LN151@CSimpleMod
  000ba	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  000be	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000c1	32 c0		 xor	 al, al
  000c3	f3 aa		 rep stosb
$LN151@CSimpleMod:
  000c5	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  000c8	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  000cb	3b f9		 cmp	 edi, ecx
  000cd	75 0b		 jne	 SHORT $LN183@CSimpleMod
  000cf	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  000d3	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000d6	32 c0		 xor	 al, al
  000d8	f3 aa		 rep stosb
$LN183@CSimpleMod:
  000da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e4	59		 pop	 ecx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CSimpleModulus@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
__unwindfunclet$??1CSimpleModulus@@UAE@XZ$2:
  0000b	8b 4d ec	 mov	 ecx, DWORD PTR $T183198[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1CSimpleModulus@@UAE@XZ$9:
  00016	8b 4d ec	 mov	 ecx, DWORD PTR $T183109[ebp]
  00019	83 c1 10	 add	 ecx, 16			; 00000010H
  0001c	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1CSimpleModulus@@UAE@XZ$10:
  00021	8b 4d ec	 mov	 ecx, DWORD PTR $T183109[ebp]
  00024	83 c1 28	 add	 ecx, 40			; 00000028H
  00027	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1CSimpleModulus@@UAE@XZ$13:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR $T183958[ebp]
  0002f	83 c1 28	 add	 ecx, 40			; 00000028H
  00032	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1CSimpleModulus@@UAE@XZ$20:
  00037	8b 4d ec	 mov	 ecx, DWORD PTR $T183869[ebp]
  0003a	83 c1 10	 add	 ecx, 16			; 00000010H
  0003d	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??1CSimpleModulus@@UAE@XZ$21:
  00042	8b 4d ec	 mov	 ecx, DWORD PTR $T183869[ebp]
  00045	83 c1 28	 add	 ecx, 40			; 00000028H
  00048	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??1CSimpleModulus@@UAE@XZ:
  0004d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00051	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00054	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00057	33 c8		 xor	 ecx, eax
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSimpleModulus@@UAE@XZ
  00063	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSimpleModulus@@UAE@XZ ENDP				; CSimpleModulus::~CSimpleModulus
PUBLIC	??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT
; _this$ = ecx

; 246  : 	explicit SecBlock(size_type size=0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _size$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0000e	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  00013	83 c4 04	 add	 esp, 4
  00016	85 ff		 test	 edi, edi
  00018	75 0d		 jne	 SHORT $LN6@SecBlock@7
  0001a	33 c0		 xor	 eax, eax
  0001c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001f	5f		 pop	 edi

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4

; 246  : 	explicit SecBlock(size_type size=0)

$LN6@SecBlock@7:
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  0002d	83 c4 04	 add	 esp, 4
  00030	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00033	5f		 pop	 edi

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
_TEXT	ENDS
PUBLIC	??0?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@I@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
??0?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@I@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >, COMDAT
; _this$ = ecx

; 246  : 	explicit SecBlock(size_type size=0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _size$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0000e	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  00013	83 c4 04	 add	 esp, 4
  00016	85 ff		 test	 edi, edi
  00018	75 0d		 jne	 SHORT $LN6@SecBlock@8
  0001a	33 c0		 xor	 eax, eax
  0001c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001f	5f		 pop	 edi

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4

; 246  : 	explicit SecBlock(size_type size=0)

$LN6@SecBlock@8:
  00027	57		 push	 edi
  00028	83 ff 10	 cmp	 edi, 16			; 00000010H
  0002b	72 13		 jb	 SHORT $LN5@SecBlock@8
  0002d	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  00032	83 c4 04	 add	 esp, 4
  00035	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00038	5f		 pop	 edi

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00039	8b c6		 mov	 eax, esi
  0003b	5e		 pop	 esi
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4

; 246  : 	explicit SecBlock(size_type size=0)

$LN5@SecBlock@8:
  00040	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00045	83 c4 04	 add	 esp, 4
  00048	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004b	5f		 pop	 edi

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
??0?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@I@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
_TEXT	ENDS
PUBLIC	?reallocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEPAEPAEII_N@Z ; CryptoPP::AllocatorWithCleanup<unsigned char,0>::reallocate
; Function compile flags: /Ogtp
;	COMDAT ?reallocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEPAEPAEII_N@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_oldSize$ = 12						; size = 4
_newSize$ = 16						; size = 4
_preserve$ = 20						; size = 1
?reallocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEPAEPAEII_N@Z PROC ; CryptoPP::AllocatorWithCleanup<unsigned char,0>::reallocate, COMDAT
; _this$ = ecx

; 116  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  : 		return StandardReallocate(*this, p, oldSize, newSize, preserve);

  00003	8b 45 14	 mov	 eax, DWORD PTR _preserve$[ebp]
  00006	8b 55 10	 mov	 edx, DWORD PTR _newSize$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _oldSize$[ebp]
  0000d	52		 push	 edx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	50		 push	 eax
  00012	52		 push	 edx
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  00019	83 c4 14	 add	 esp, 20			; 00000014H

; 118  : 	}

  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
?reallocate@?$AllocatorWithCleanup@E$0A@@CryptoPP@@QAEPAEPAEII_N@Z ENDP ; CryptoPP::AllocatorWithCleanup<unsigned char,0>::reallocate
_TEXT	ENDS
PUBLIC	?reallocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEPAEPAEII_N@Z ; CryptoPP::AllocatorWithCleanup<unsigned char,1>::reallocate
; Function compile flags: /Ogtp
;	COMDAT ?reallocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEPAEPAEII_N@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_oldSize$ = 12						; size = 4
_newSize$ = 16						; size = 4
_preserve$ = 20						; size = 1
?reallocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEPAEPAEII_N@Z PROC ; CryptoPP::AllocatorWithCleanup<unsigned char,1>::reallocate, COMDAT
; _this$ = ecx

; 116  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  : 		return StandardReallocate(*this, p, oldSize, newSize, preserve);

  00003	8b 45 14	 mov	 eax, DWORD PTR _preserve$[ebp]
  00006	8b 55 10	 mov	 edx, DWORD PTR _newSize$[ebp]
  00009	50		 push	 eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _oldSize$[ebp]
  0000d	52		 push	 edx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	50		 push	 eax
  00012	52		 push	 edx
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  00019	83 c4 14	 add	 esp, 20			; 00000014H

; 118  : 	}

  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
?reallocate@?$AllocatorWithCleanup@E$00@CryptoPP@@QAEPAEPAEII_N@Z ENDP ; CryptoPP::AllocatorWithCleanup<unsigned char,1>::reallocate
_TEXT	ENDS
PUBLIC	??0?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\smartptr.h
;	COMDAT ??0?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >, COMDAT
; _this$ = ecx

; 59   : 	value_ptr(const value_ptr<T>& rhs)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _rhs$[ebp]
  00007	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	74 43		 je	 SHORT $LN5@value_ptr
  0000f	56		 push	 esi
  00010	68 a0 00 00 00	 push	 160			; 000000a0H
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	8b f0		 mov	 esi, eax
  0001c	83 c4 04	 add	 esp, 4
  0001f	85 f6		 test	 esi, esi
  00021	74 22		 je	 SHORT $LN3@value_ptr
  00023	8b 03		 mov	 eax, DWORD PTR [ebx]
  00025	50		 push	 eax
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ??0Base@DES@CryptoPP@@QAE@ABV012@@Z
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00033	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  0003a	89 37		 mov	 DWORD PTR [edi], esi
  0003c	5e		 pop	 esi
  0003d	8b c7		 mov	 eax, edi
  0003f	5f		 pop	 edi
  00040	5b		 pop	 ebx
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN3@value_ptr:
  00045	33 f6		 xor	 esi, esi
  00047	89 37		 mov	 DWORD PTR [edi], esi
  00049	5e		 pop	 esi
  0004a	8b c7		 mov	 eax, edi
  0004c	5f		 pop	 edi
  0004d	5b		 pop	 ebx
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
$LN5@value_ptr:
  00052	33 c0		 xor	 eax, eax
  00054	89 07		 mov	 DWORD PTR [edi], eax
  00056	8b c7		 mov	 eax, edi
  00058	5f		 pop	 edi
  00059	5b		 pop	 ebx
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
??0?$value_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::value_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\simple.h
_TEXT	ENDS
;	COMDAT ?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::Clone, COMDAT
; _this$ = ecx

; 19   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	68 a0 00 00 00	 push	 160			; 000000a0H
  00007	8b f9		 mov	 edi, ecx
  00009	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000e	8b f0		 mov	 esi, eax
  00010	83 c4 04	 add	 esp, 4
  00013	85 f6		 test	 esi, esi
  00015	74 1d		 je	 SHORT $LN5@Clone
  00017	83 c7 fc	 add	 edi, -4			; fffffffcH
  0001a	57		 push	 edi
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ??0Base@DES@CryptoPP@@QAE@ABV012@@Z
  00022	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00025	5f		 pop	 edi
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0002c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  00032	5e		 pop	 esi
  00033	c3		 ret	 0
$LN5@Clone:
  00034	5f		 pop	 edi
  00035	33 c0		 xor	 eax, eax
  00037	5e		 pop	 esi
  00038	c3		 ret	 0
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@VBase@DES@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base>,CryptoPP::DES::Base>::Clone
_TEXT	ENDS
PUBLIC	__$ArrayPad$184479
PUBLIC	??0CipherModeBase@CryptoPP@@IAE@XZ		; CryptoPP::CipherModeBase::CipherModeBase
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0CipherModeBase@CryptoPP@@IAE@XZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0CipherModeBase@CryptoPP@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CipherModeBase@CryptoPP@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
xdata$x	ENDS
;	COMDAT ??0CipherModeBase@CryptoPP@@IAE@XZ
_TEXT	SEGMENT
__$ArrayPad$184479 = -16				; size = 4
__$EHRec$ = -12						; size = 12
??0CipherModeBase@CryptoPP@@IAE@XZ PROC			; CryptoPP::CipherModeBase::CipherModeBase, COMDAT
; _this$ = ecx

; 63   : 	CipherModeBase() : m_cipher(NULL) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CipherModeBase@CryptoPP@@IAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	89 45 f0	 mov	 DWORD PTR __$ArrayPad$184479[ebp], eax
  0001c	56		 push	 esi
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	6a 01		 push	 1
  0002b	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002e	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  00033	33 c0		 xor	 eax, eax
  00035	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00038	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003b	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0003e	8b c6		 mov	 eax, esi
  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004a	59		 pop	 ecx
  0004b	5e		 pop	 esi
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$184479[ebp]
  0004f	33 cd		 xor	 ecx, ebp
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0CipherModeBase@CryptoPP@@IAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CipherModeBase@CryptoPP@@IAE@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CipherModeBase@CryptoPP@@IAE@XZ ENDP			; CryptoPP::CipherModeBase::CipherModeBase
; Function compile flags: /Ogtp
;	COMDAT ??_GCSimpleModulus@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSimpleModulus@@UAEPAXI@Z PROC			; CSimpleModulus::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSimpleModulus@@UAE@XZ ; CSimpleModulus::~CSimpleModulus
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@8
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@8:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCSimpleModulus@@UAEPAXI@Z ENDP			; CSimpleModulus::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?New@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXI@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::New
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ?New@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXI@Z
_TEXT	SEGMENT
_newSize$ = 8						; size = 4
?New@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXI@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::New, COMDAT
; _this$ = ecx

; 362  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 363  : 		m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, false);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _newSize$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00010	6a 00		 push	 0
  00012	57		 push	 edi
  00013	50		 push	 eax
  00014	51		 push	 ecx
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  0001b	83 c4 14	 add	 esp, 20			; 00000014H

; 364  : 		m_size = newSize;

  0001e	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00021	5f		 pop	 edi
  00022	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00025	5e		 pop	 esi

; 365  : 	}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?New@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXI@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::New
_TEXT	ENDS
PUBLIC	?New@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEXI@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::New
; Function compile flags: /Ogtp
;	COMDAT ?New@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEXI@Z
_TEXT	SEGMENT
_newSize$ = 8						; size = 4
?New@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEXI@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::New, COMDAT
; _this$ = ecx

; 362  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 363  : 		m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, false);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _newSize$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00010	6a 00		 push	 0
  00012	57		 push	 edi
  00013	50		 push	 eax
  00014	51		 push	 ecx
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  0001b	83 c4 14	 add	 esp, 20			; 00000014H

; 364  : 		m_size = newSize;

  0001e	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00021	5f		 pop	 edi
  00022	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00025	5e		 pop	 esi

; 365  : 	}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?New@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEXI@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::New
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$185116
PUBLIC	??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ	; CryptoPP::BlockOrientedCipherModeBase::BlockOrientedCipherModeBase
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ$0
	DD	02H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -20					; size = 4
__$ArrayPad$185116 = -16				; size = 4
__$EHRec$ = -12						; size = 12
??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ PROC	; CryptoPP::BlockOrientedCipherModeBase::BlockOrientedCipherModeBase, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$185116[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002e	6a 01		 push	 1
  00030	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  00035	33 c0		 xor	 eax, eax
  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00040	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00043	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00046	8b c6		 mov	 eax, esi
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$185116[ebp]
  00057	33 cd		 xor	 ecx, ebp
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CipherModeBase@CryptoPP@@UAE@XZ
__ehhandler$??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0BlockOrientedCipherModeBase@CryptoPP@@QAE@XZ ENDP	; CryptoPP::BlockOrientedCipherModeBase::BlockOrientedCipherModeBase
PUBLIC	??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z	; CryptoPP::DES_XEX3::Base::Base
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z$1
__ehfuncinfo$??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z PROC		; CryptoPP::DES_XEX3::Base::Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002b	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002e	85 f6		 test	 esi, esi
  00030	74 05		 je	 SHORT $LN18@Base@4
  00032	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00035	eb 02		 jmp	 SHORT $LN19@Base@4
$LN18@Base@4:
  00037	33 c0		 xor	 eax, eax
$LN19@Base@4:
  00039	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003c	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0003f	85 f6		 test	 esi, esi
  00041	74 05		 je	 SHORT $LN14@Base@4
  00043	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00046	eb 02		 jmp	 SHORT $LN15@Base@4
$LN14@Base@4:
  00048	33 c0		 xor	 eax, eax
$LN15@Base@4:
  0004a	8a 08		 mov	 cl, BYTE PTR [eax]
  0004c	88 4f 0c	 mov	 BYTE PTR [edi+12], cl
  0004f	c6 47 19 00	 mov	 BYTE PTR [edi+25], 0
  00053	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00056	89 4f 20	 mov	 DWORD PTR [edi+32], ecx
  00059	b3 01		 mov	 bl, 1
  0005b	83 f9 08	 cmp	 ecx, 8
  0005e	77 08		 ja	 SHORT $LN29@Base@4
  00060	88 5f 19	 mov	 BYTE PTR [edi+25], bl
  00063	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00066	eb 02		 jmp	 SHORT $LN28@Base@4
$LN29@Base@4:
  00068	33 c9		 xor	 ecx, ecx
$LN28@Base@4:
  0006a	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0006d	50		 push	 eax
  0006e	89 4f 24	 mov	 DWORD PTR [edi+36], ecx
  00071	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00074	52		 push	 edx
  00075	50		 push	 eax
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 _memcpy_s
  0007c	83 c4 10	 add	 esp, 16			; 00000010H
  0007f	c6 47 31 00	 mov	 BYTE PTR [edi+49], 0
  00083	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00086	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008d	89 4f 38	 mov	 DWORD PTR [edi+56], ecx
  00090	83 f9 08	 cmp	 ecx, 8
  00093	77 08		 ja	 SHORT $LN45@Base@4
  00095	88 5f 31	 mov	 BYTE PTR [edi+49], bl
  00098	8d 4f 28	 lea	 ecx, DWORD PTR [edi+40]
  0009b	eb 02		 jmp	 SHORT $LN44@Base@4
$LN45@Base@4:
  0009d	33 c9		 xor	 ecx, ecx
$LN44@Base@4:
  0009f	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  000a2	50		 push	 eax
  000a3	89 4f 3c	 mov	 DWORD PTR [edi+60], ecx
  000a6	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  000a9	52		 push	 edx
  000aa	50		 push	 eax
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 _memcpy_s
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
  000b4	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  000b8	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000bb	74 37		 je	 SHORT $LN58@Base@4
  000bd	68 a0 00 00 00	 push	 160			; 000000a0H
  000c2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c7	8b d8		 mov	 ebx, eax
  000c9	83 c4 04	 add	 esp, 4
  000cc	85 db		 test	 ebx, ebx
  000ce	74 1d		 je	 SHORT $LN56@Base@4
  000d0	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  000d3	50		 push	 eax
  000d4	8b cb		 mov	 ecx, ebx
  000d6	e8 00 00 00 00	 call	 ??0Base@DES@CryptoPP@@QAE@ABV012@@Z
  000db	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  000e1	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  000e8	89 5f 40	 mov	 DWORD PTR [edi+64], ebx
  000eb	eb 0c		 jmp	 SHORT $LN69@Base@4
$LN56@Base@4:
  000ed	33 db		 xor	 ebx, ebx
  000ef	89 5f 40	 mov	 DWORD PTR [edi+64], ebx
  000f2	eb 05		 jmp	 SHORT $LN69@Base@4
$LN58@Base@4:
  000f4	33 c0		 xor	 eax, eax
  000f6	89 47 40	 mov	 DWORD PTR [edi+64], eax
$LN69@Base@4:
  000f9	8b c7		 mov	 eax, edi
  000fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00105	59		 pop	 ecx
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z ENDP		; CryptoPP::DES_XEX3::Base::Base
PUBLIC	?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ	; CryptoPP::CipherModeBase::ResizeBuffers
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
;	COMDAT ?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ
_TEXT	SEGMENT
?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ PROC	; CryptoPP::CipherModeBase::ResizeBuffers, COMDAT
; _this$ = ecx

; 71   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 72   : 		m_register.New(m_cipher->BlockSize());

  00003	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0000c	83 c1 04	 add	 ecx, 4
  0000f	57		 push	 edi
  00010	ff d2		 call	 edx
  00012	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00015	6a 00		 push	 0
  00017	8b f8		 mov	 edi, eax
  00019	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001c	83 c6 0c	 add	 esi, 12			; 0000000cH
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	51		 push	 ecx
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0002e	5f		 pop	 edi
  0002f	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00032	5e		 pop	 esi

; 73   : 	}

  00033	c3		 ret	 0
?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ ENDP	; CryptoPP::CipherModeBase::ResizeBuffers
_TEXT	ENDS
PUBLIC	?ResizeBuffers@BlockOrientedCipherModeBase@CryptoPP@@MAEXXZ ; CryptoPP::BlockOrientedCipherModeBase::ResizeBuffers
; Function compile flags: /Ogtp
;	COMDAT ?ResizeBuffers@BlockOrientedCipherModeBase@CryptoPP@@MAEXXZ
_TEXT	SEGMENT
?ResizeBuffers@BlockOrientedCipherModeBase@CryptoPP@@MAEXXZ PROC ; CryptoPP::BlockOrientedCipherModeBase::ResizeBuffers, COMDAT
; _this$ = ecx

; 173  : 	{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 174  : 		CipherModeBase::ResizeBuffers();

  00005	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0000e	83 c1 04	 add	 ecx, 4
  00011	ff d2		 call	 edx
  00013	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00016	6a 00		 push	 0
  00018	8b d8		 mov	 ebx, eax
  0001a	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0001d	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00020	53		 push	 ebx
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  00029	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002c	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 175  : 		m_buffer.New(BlockSize());

  0002f	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00032	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00035	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00038	6a 00		 push	 0
  0003a	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  0003d	53		 push	 ebx
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  00046	83 c4 28	 add	 esp, 40			; 00000028H
  00049	5f		 pop	 edi
  0004a	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx

; 176  : 	}

  00052	c3		 ret	 0
?ResizeBuffers@BlockOrientedCipherModeBase@CryptoPP@@MAEXXZ ENDP ; CryptoPP::BlockOrientedCipherModeBase::ResizeBuffers
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$187134
PUBLIC	??0ECB_OneWay@CryptoPP@@QAE@XZ			; CryptoPP::ECB_OneWay::ECB_OneWay
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ECB_OneWay@CryptoPP@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0ECB_OneWay@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ECB_OneWay@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ECB_OneWay@CryptoPP@@QAE@XZ$1
	DD	02H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0ECB_OneWay@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -20					; size = 4
__$ArrayPad$187134 = -16				; size = 4
__$EHRec$ = -12						; size = 12
??0ECB_OneWay@CryptoPP@@QAE@XZ PROC			; CryptoPP::ECB_OneWay::ECB_OneWay, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ECB_OneWay@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$187134[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002e	6a 01		 push	 1
  00030	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  00035	33 c0		 xor	 eax, eax
  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00040	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00043	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00046	8b c6		 mov	 eax, esi
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$187134[ebp]
  00057	33 cd		 xor	 ecx, ebp
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ECB_OneWay@CryptoPP@@QAE@XZ$1:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CipherModeBase@CryptoPP@@UAE@XZ
__ehhandler$??0ECB_OneWay@CryptoPP@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ECB_OneWay@CryptoPP@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ECB_OneWay@CryptoPP@@QAE@XZ ENDP			; CryptoPP::ECB_OneWay::ECB_OneWay
PUBLIC	??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
; Function compile flags: /Ogtp
;	COMDAT ??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z
  0000f	8b c6		 mov	 eax, esi
  00011	5e		 pop	 esi
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??0?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
_TEXT	ENDS
PUBLIC	??0?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
; Function compile flags: /Ogtp
;	COMDAT ??0?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z
  0000f	8b c6		 mov	 eax, esi
  00011	5e		 pop	 esi
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??0?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$188688
PUBLIC	??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ$2
	DD	02H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -20					; size = 4
__$ArrayPad$188688 = -16				; size = 4
__$EHRec$ = -12						; size = 12
??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$188688[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002e	6a 01		 push	 1
  00030	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  00035	33 c0		 xor	 eax, eax
  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00040	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00043	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00046	8b c6		 mov	 eax, esi
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$188688[ebp]
  00057	33 cd		 xor	 ecx, ebp
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CipherModeBase@CryptoPP@@UAE@XZ
__ehhandler$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >
PUBLIC	??0?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>
; Function compile flags: /Ogtp
;	COMDAT ??0?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00015	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$190172
PUBLIC	??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ$2
	DD	02H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -20					; size = 4
__$ArrayPad$190172 = -16				; size = 4
__$EHRec$ = -12						; size = 12
??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$190172[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002e	6a 01		 push	 1
  00030	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  00035	33 c0		 xor	 eax, eax
  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00040	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00043	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00046	8b c6		 mov	 eax, esi
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$190172[ebp]
  00057	33 cd		 xor	 ecx, ebp
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CipherModeBase@CryptoPP@@UAE@XZ
__ehhandler$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >
PUBLIC	??0?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>
; Function compile flags: /Ogtp
;	COMDAT ??0?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00015	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>
_TEXT	ENDS
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vftable'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$192222
PUBLIC	??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> `RTTI Type Descriptor'
PUBLIC	??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1CI@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Descriptor at (40,-1,0,77)'
PUBLIC	??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ECB_OneWay@CryptoPP@@8		; CryptoPP::ECB_OneWay::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVECB_OneWay@CryptoPP@@@8			; CryptoPP::ECB_OneWay `RTTI Type Descriptor'
PUBLIC	??_R3ECB_OneWay@CryptoPP@@8			; CryptoPP::ECB_OneWay::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ECB_OneWay@CryptoPP@@8			; CryptoPP::ECB_OneWay::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BlockOrientedCipherModeBase@CryptoPP@@8 ; CryptoPP::BlockOrientedCipherModeBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBlockOrientedCipherModeBase@CryptoPP@@@8 ; CryptoPP::BlockOrientedCipherModeBase `RTTI Type Descriptor'
PUBLIC	??_R3BlockOrientedCipherModeBase@CryptoPP@@8	; CryptoPP::BlockOrientedCipherModeBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BlockOrientedCipherModeBase@CryptoPP@@8	; CryptoPP::BlockOrientedCipherModeBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8	; CryptoPP::CipherModeBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCipherModeBase@CryptoPP@@@8		; CryptoPP::CipherModeBase `RTTI Type Descriptor'
PUBLIC	??_R3CipherModeBase@CryptoPP@@8			; CryptoPP::CipherModeBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CipherModeBase@CryptoPP@@8			; CryptoPP::CipherModeBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8	; CryptoPP::SymmetricCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSymmetricCipher@CryptoPP@@@8		; CryptoPP::SymmetricCipher `RTTI Type Descriptor'
PUBLIC	??_R3SymmetricCipher@CryptoPP@@8		; CryptoPP::SymmetricCipher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SymmetricCipher@CryptoPP@@8		; CryptoPP::SymmetricCipher::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@StreamTransformation@CryptoPP@@8	; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVStreamTransformation@CryptoPP@@@8	; CryptoPP::StreamTransformation `RTTI Type Descriptor'
PUBLIC	??_R3StreamTransformation@CryptoPP@@8		; CryptoPP::StreamTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StreamTransformation@CryptoPP@@8		; CryptoPP::StreamTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8	; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ	; CryptoPP::CipherModeBase::MinKeyLength
PUBLIC	?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ	; CryptoPP::CipherModeBase::MaxKeyLength
PUBLIC	?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ; CryptoPP::CipherModeBase::DefaultKeyLength
PUBLIC	?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z ; CryptoPP::CipherModeBase::GetValidKeyLength
PUBLIC	?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z ; CryptoPP::CipherModeBase::IsValidKeyLength
PUBLIC	?SetKey@ECB_OneWay@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z ; CryptoPP::ECB_OneWay::SetKey
PUBLIC	?IVRequirement@ECB_OneWay@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::ECB_OneWay::IVRequirement
PUBLIC	?IVSize@CipherModeBase@CryptoPP@@UBEIXZ		; CryptoPP::CipherModeBase::IVSize
PUBLIC	?Resynchronize@BlockOrientedCipherModeBase@CryptoPP@@UAEXPBEH@Z ; CryptoPP::BlockOrientedCipherModeBase::Resynchronize
PUBLIC	?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ; CryptoPP::SymmetricCipher::GetAlgorithm
PUBLIC	?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z ; CryptoPP::CipherModeBase::SetFeedbackSize
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Complete Object Locator'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vector deleting destructor'
PUBLIC	?Clone@Clonable@CryptoPP@@UBEPAV12@XZ		; CryptoPP::Clonable::Clone
PUBLIC	?AlgorithmName@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmName
PUBLIC	?MandatoryBlockSize@BlockOrientedCipherModeBase@CryptoPP@@UBEIXZ ; CryptoPP::BlockOrientedCipherModeBase::MandatoryBlockSize
PUBLIC	?OptimalBlockSize@ECB_OneWay@CryptoPP@@UBEIXZ	; CryptoPP::ECB_OneWay::OptimalBlockSize
PUBLIC	?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed
PUBLIC	?OptimalDataAlignment@CipherModeBase@CryptoPP@@UBEIXZ ; CryptoPP::CipherModeBase::OptimalDataAlignment
PUBLIC	?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::MinLastBlockSize
PUBLIC	?IsRandomAccess@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ ; CryptoPP::BlockOrientedCipherModeBase::IsRandomAccess
PUBLIC	?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z	; CryptoPP::StreamTransformation::Seek
PUBLIC	?IsSelfInverting@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ ; CryptoPP::BlockOrientedCipherModeBase::IsSelfInverting
PUBLIC	?IsForwardTransformation@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ ; CryptoPP::BlockOrientedCipherModeBase::IsForwardTransformation
EXTRN	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vector deleting destructor'
EXTRN	?UncheckedSetKey@BlockOrientedCipherModeBase@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z:PROC ; CryptoPP::BlockOrientedCipherModeBase::UncheckedSetKey
EXTRN	?ProcessData@ECB_OneWay@CryptoPP@@UAEXPAEPBEI@Z:PROC ; CryptoPP::ECB_OneWay::ProcessData
EXTRN	?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEXPAEPBEI@Z:PROC ; CryptoPP::StreamTransformation::ProcessLastBlock
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8 DD FLAT:??_R0?AVStreamTransformation@CryptoPP@@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2StreamTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3StreamTransformation@CryptoPP@@8 DD 00H		; CryptoPP::StreamTransformation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStreamTransformation@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVStreamTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StreamTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStreamTransformation@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@StreamTransformation@CryptoPP@@8 DD FLAT:??_R0?AVStreamTransformation@CryptoPP@@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	02H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R2SymmetricCipher@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8 ; CryptoPP::SymmetricCipher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R3SymmetricCipher@CryptoPP@@8 DD 00H			; CryptoPP::SymmetricCipher::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2SymmetricCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSymmetricCipher@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVSymmetricCipher@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SymmetricCipher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSymmetricCipher@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8 DD FLAT:??_R0?AVSymmetricCipher@CryptoPP@@@8 ; CryptoPP::SymmetricCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SymmetricCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2CipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R2CipherModeBase@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8 ; CryptoPP::CipherModeBase::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3CipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R3CipherModeBase@CryptoPP@@8 DD 00H			; CryptoPP::CipherModeBase::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CipherModeBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCipherModeBase@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVCipherModeBase@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCipherModeBase@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8 DD FLAT:??_R0?AVCipherModeBase@CryptoPP@@@8 ; CryptoPP::CipherModeBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CipherModeBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2BlockOrientedCipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R2BlockOrientedCipherModeBase@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@BlockOrientedCipherModeBase@CryptoPP@@8 ; CryptoPP::BlockOrientedCipherModeBase::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3BlockOrientedCipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R3BlockOrientedCipherModeBase@CryptoPP@@8 DD 00H	; CryptoPP::BlockOrientedCipherModeBase::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2BlockOrientedCipherModeBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBlockOrientedCipherModeBase@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVBlockOrientedCipherModeBase@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockOrientedCipherModeBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBlockOrientedCipherModeBase@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@BlockOrientedCipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BlockOrientedCipherModeBase@CryptoPP@@8 DD FLAT:??_R0?AVBlockOrientedCipherModeBase@CryptoPP@@@8 ; CryptoPP::BlockOrientedCipherModeBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlockOrientedCipherModeBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2ECB_OneWay@CryptoPP@@8
rdata$r	SEGMENT
??_R2ECB_OneWay@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@ECB_OneWay@CryptoPP@@8 ; CryptoPP::ECB_OneWay::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BlockOrientedCipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3ECB_OneWay@CryptoPP@@8
rdata$r	SEGMENT
??_R3ECB_OneWay@CryptoPP@@8 DD 00H			; CryptoPP::ECB_OneWay::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2ECB_OneWay@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVECB_OneWay@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AVECB_OneWay@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ECB_OneWay `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVECB_OneWay@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ECB_OneWay@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ECB_OneWay@CryptoPP@@8 DD FLAT:??_R0?AVECB_OneWay@CryptoPP@@@8 ; CryptoPP::ECB_OneWay::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ECB_OneWay@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ECB_OneWay@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockOrientedCipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeF'
	DB	'inalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_X'
	DB	'EX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX'
	DB	'3@CryptoPP@@@CryptoPP@@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1CI@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1CI@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Descriptor at (40,-1,0,77)'
	DD	00H
	DD	028H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Base Class Array'
	DD	FLAT:??_R1CI@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@ECB_OneWay@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockOrientedCipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCiphe'
	DB	'rFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@'
	DB	'@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@BlockOrientedCipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@ECB_OneWay@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@ECB_OneWay@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsRandomAccess@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@ECB_OneWay@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@ECB_OneWay@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@BlockOrientedCipherModeBase@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@BlockOrientedCipherModeBase@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	FLAT:?ResizeBuffers@BlockOrientedCipherModeBase@CryptoPP@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$10
	DD	03H
	DD	00H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$1
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
xdata$x	ENDS
;	COMDAT ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -20					; size = 4
__$ArrayPad$192222 = -16				; size = 4
__$EHRec$ = -12						; size = 12
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>, COMDAT
; _this$ = ecx

; 251  : 	CipherModeFinalTemplate_CipherHolder()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$192222[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	8d 7e 28	 lea	 edi, DWORD PTR [esi+40]
  00030	6a 01		 push	 1
  00032	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00035	89 75 ec	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00038	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0003d	c6 47 19 01	 mov	 BYTE PTR [edi+25], 1
  00041	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00044	89 40 14	 mov	 DWORD PTR [eax+20], eax
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0004f	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00052	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00055	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  00059	89 40 14	 mov	 DWORD PTR [eax+20], eax
  0005c	33 c0		 xor	 eax, eax
  0005e	89 47 40	 mov	 DWORD PTR [edi+64], eax
  00061	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00067	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  0006e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00071	6a 01		 push	 1
  00073	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00076	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0007b	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  0007e	33 c0		 xor	 eax, eax
  00080	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00083	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00086	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00089	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 252  : 	{
; 253  : 		this->m_cipher = &this->m_object;
; 254  : 		this->ResizeBuffers();

  0008c	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0008f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00095	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@
  0009c	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0009f	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a1	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000a4	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000a8	ff d2		 call	 edx
  000aa	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000ad	6a 00		 push	 0
  000af	8b f8		 mov	 edi, eax
  000b1	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000b4	57		 push	 edi
  000b5	50		 push	 eax
  000b6	51		 push	 ecx
  000b7	53		 push	 ebx
  000b8	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  000bd	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  000c0	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000c3	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  000c6	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000c9	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  000cc	6a 00		 push	 0
  000ce	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  000d1	53		 push	 ebx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	57		 push	 edi
  000d5	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  000da	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000dd	83 c4 28	 add	 esp, 40			; 00000028H
  000e0	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 255  : 	}

  000e3	8b c6		 mov	 eax, esi
  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$192222[ebp]
  000f6	33 cd		 xor	 ecx, ebp
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	83 c1 28	 add	 ecx, 40			; 00000028H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$10:
  0000b	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CipherModeBase@CryptoPP@@UAE@XZ
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$1:
  00013	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UAE@XZ
__ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
;	COMDAT ?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed, COMDAT
; _this$ = ecx

; 483  : 	virtual unsigned int GetOptimalBlockSizeUsed() const {return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::MinLastBlockSize, COMDAT
; _this$ = ecx

; 496  : 	virtual unsigned int MinLastBlockSize() const {return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::MinLastBlockSize
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
_TEXT	SEGMENT
?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ PROC ; CryptoPP::SymmetricCipher::GetAlgorithm, COMDAT
; _this$ = ecx

; 614  : 	const Algorithm & GetAlgorithm() const {return *this;}

  00000	85 c9		 test	 ecx, ecx
  00002	74 04		 je	 SHORT $LN3@GetAlgorit@2
  00004	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00007	c3		 ret	 0
$LN3@GetAlgorit@2:
  00008	33 c0		 xor	 eax, eax
  0000a	c3		 ret	 0
?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ENDP ; CryptoPP::SymmetricCipher::GetAlgorithm
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
_TEXT	ENDS
;	COMDAT ?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ PROC	; CryptoPP::CipherModeBase::MinKeyLength, COMDAT
; _this$ = ecx

; 34   : 	size_t MinKeyLength() const {return m_cipher->MinKeyLength();}

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00008	ff e2		 jmp	 edx
?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ENDP	; CryptoPP::CipherModeBase::MinKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ PROC	; CryptoPP::CipherModeBase::MaxKeyLength, COMDAT
; _this$ = ecx

; 35   : 	size_t MaxKeyLength() const {return m_cipher->MaxKeyLength();}

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00008	ff e2		 jmp	 edx
?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ENDP	; CryptoPP::CipherModeBase::MaxKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ PROC	; CryptoPP::CipherModeBase::DefaultKeyLength, COMDAT
; _this$ = ecx

; 36   : 	size_t DefaultKeyLength() const {return m_cipher->DefaultKeyLength();}

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00008	ff e2		 jmp	 edx
?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ENDP	; CryptoPP::CipherModeBase::DefaultKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z PROC ; CryptoPP::CipherModeBase::GetValidKeyLength, COMDAT
; _this$ = ecx

; 37   : 	size_t GetValidKeyLength(size_t n) const {return m_cipher->GetValidKeyLength(n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000b	5d		 pop	 ebp
  0000c	ff e0		 jmp	 eax
?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z ENDP ; CryptoPP::CipherModeBase::GetValidKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z PROC ; CryptoPP::CipherModeBase::IsValidKeyLength, COMDAT
; _this$ = ecx

; 38   : 	bool IsValidKeyLength(size_t n) const {return m_cipher->IsValidKeyLength(n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000b	5d		 pop	 ebp
  0000c	ff e0		 jmp	 eax
?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z ENDP ; CryptoPP::CipherModeBase::IsValidKeyLength
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?OptimalDataAlignment@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalDataAlignment@CipherModeBase@CryptoPP@@UBEIXZ PROC ; CryptoPP::CipherModeBase::OptimalDataAlignment, COMDAT
; _this$ = ecx

; 40   : 	unsigned int OptimalDataAlignment() const {return m_cipher->OptimalDataAlignment();}

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00009	83 c1 04	 add	 ecx, 4
  0000c	ff e2		 jmp	 edx
?OptimalDataAlignment@CipherModeBase@CryptoPP@@UBEIXZ ENDP ; CryptoPP::CipherModeBase::OptimalDataAlignment
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IsRandomAccess@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsRandomAccess@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockOrientedCipherModeBase::IsRandomAccess, COMDAT
; _this$ = ecx

; 165  : 	bool IsRandomAccess() const {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsRandomAccess@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockOrientedCipherModeBase::IsRandomAccess
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IsSelfInverting@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsSelfInverting@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockOrientedCipherModeBase::IsSelfInverting, COMDAT
; _this$ = ecx

; 166  : 	bool IsSelfInverting() const {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsSelfInverting@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockOrientedCipherModeBase::IsSelfInverting
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IsForwardTransformation@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsForwardTransformation@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockOrientedCipherModeBase::IsForwardTransformation, COMDAT
; _this$ = ecx

; 167  : 	bool IsForwardTransformation() const {return m_cipher->IsForwardTransformation();}

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00009	83 c1 04	 add	 ecx, 4
  0000c	ff e2		 jmp	 edx
?IsForwardTransformation@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockOrientedCipherModeBase::IsForwardTransformation
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IVRequirement@ECB_OneWay@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
?IVRequirement@ECB_OneWay@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::ECB_OneWay::IVRequirement, COMDAT
; _this$ = ecx

; 186  : 	IV_Requirement IVRequirement() const {return NOT_RESYNCHRONIZABLE;}

  00000	b8 04 00 00 00	 mov	 eax, 4
  00005	c3		 ret	 0
?IVRequirement@ECB_OneWay@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::ECB_OneWay::IVRequirement
_TEXT	ENDS
PUBLIC	??_C@_03MCOCJGPC@ECB?$AA@			; `string'
PUBLIC	?StaticAlgorithmName@ECB_OneWay@CryptoPP@@SAPBDXZ ; CryptoPP::ECB_OneWay::StaticAlgorithmName
;	COMDAT ??_C@_03MCOCJGPC@ECB?$AA@
CONST	SEGMENT
??_C@_03MCOCJGPC@ECB?$AA@ DB 'ECB', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?StaticAlgorithmName@ECB_OneWay@CryptoPP@@SAPBDXZ
_TEXT	SEGMENT
?StaticAlgorithmName@ECB_OneWay@CryptoPP@@SAPBDXZ PROC	; CryptoPP::ECB_OneWay::StaticAlgorithmName, COMDAT

; 189  : 	static const char * CRYPTOPP_API StaticAlgorithmName() {return "ECB";}

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03MCOCJGPC@ECB?$AA@
  00005	c3		 ret	 0
?StaticAlgorithmName@ECB_OneWay@CryptoPP@@SAPBDXZ ENDP	; CryptoPP::ECB_OneWay::StaticAlgorithmName
_TEXT	ENDS
PUBLIC	??B?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEPAXXZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::operator void *
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
;	COMDAT ??B?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEPAXXZ
_TEXT	SEGMENT
??B?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEPAXXZ PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::operator void *, COMDAT
; _this$ = ecx

; 270  : 		{return m_ptr;}

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	c3		 ret	 0
??B?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEPAXXZ ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::operator void *
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vector deleting destructor'
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
_TEXT	ENDS
;	COMDAT ?MandatoryBlockSize@BlockOrientedCipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MandatoryBlockSize@BlockOrientedCipherModeBase@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockOrientedCipherModeBase::MandatoryBlockSize, COMDAT
; _this$ = ecx

; 164  : 	unsigned int MandatoryBlockSize() const {return BlockSize();}

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?MandatoryBlockSize@BlockOrientedCipherModeBase@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockOrientedCipherModeBase::MandatoryBlockSize
_TEXT	ENDS
EXTRN	?ThrowIfInvalidIVLength@SimpleKeyingInterface@CryptoPP@@IAEIH@Z:PROC ; CryptoPP::SimpleKeyingInterface::ThrowIfInvalidIVLength
; Function compile flags: /Ogtp
;	COMDAT ?Resynchronize@BlockOrientedCipherModeBase@CryptoPP@@UAEXPBEH@Z
_TEXT	SEGMENT
_iv$ = 8						; size = 4
_length$ = 12						; size = 4
?Resynchronize@BlockOrientedCipherModeBase@CryptoPP@@UAEXPBEH@Z PROC ; CryptoPP::BlockOrientedCipherModeBase::Resynchronize, COMDAT
; _this$ = ecx

; 168  : 	void Resynchronize(const byte *iv, int length=-1) {memcpy_s(m_register, m_register.size(), iv, ThrowIfInvalidIVLength(length));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  00006	56		 push	 esi
  00007	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  0000a	57		 push	 edi
  0000b	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?ThrowIfInvalidIVLength@SimpleKeyingInterface@CryptoPP@@IAEIH@Z ; CryptoPP::SimpleKeyingInterface::ThrowIfInvalidIVLength
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _iv$[ebp]
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?Resynchronize@BlockOrientedCipherModeBase@CryptoPP@@UAEXPBEH@Z ENDP ; CryptoPP::BlockOrientedCipherModeBase::Resynchronize
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?OptimalBlockSize@ECB_OneWay@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalBlockSize@ECB_OneWay@CryptoPP@@UBEIXZ PROC	; CryptoPP::ECB_OneWay::OptimalBlockSize, COMDAT
; _this$ = ecx

; 187  : 	unsigned int OptimalBlockSize() const {return BlockSize() * m_cipher->OptimalNumberOfParallelBlocks();}

  00000	56		 push	 esi
  00001	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000a	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  0000d	83 c1 04	 add	 ecx, 4
  00010	ff d2		 call	 edx
  00012	0f af c6	 imul	 eax, esi
  00015	5e		 pop	 esi
  00016	c3		 ret	 0
?OptimalBlockSize@ECB_OneWay@CryptoPP@@UBEIXZ ENDP	; CryptoPP::ECB_OneWay::OptimalBlockSize
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?IVSize@CipherModeBase@CryptoPP@@UBEIXZ PROC		; CryptoPP::CipherModeBase::IVSize, COMDAT
; _this$ = ecx

; 42   : 	unsigned int IVSize() const {return BlockSize();}

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	c3		 ret	 0
?IVSize@CipherModeBase@CryptoPP@@UBEIXZ ENDP		; CryptoPP::CipherModeBase::IVSize
_TEXT	ENDS
PUBLIC	??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4?$AA@ DB 'Cl'
	DB	'one() is not implemented yet.', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ$2
__ehfuncinfo$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
xdata$x	ENDS
;	COMDAT ?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
_TEXT	SEGMENT
$T154920 = -88						; size = 28
$T154925 = -60						; size = 44
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Clone@Clonable@CryptoPP@@UBEPAV12@XZ PROC		; CryptoPP::Clonable::Clone, COMDAT
; _this$ = ecx

; 331  : 	virtual Clonable* Clone() const {throw NotImplemented("Clone() is not implemented yet.");}	// TODO: make this =0

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	6a 1f		 push	 31			; 0000001fH
  0002b	33 db		 xor	 ebx, ebx
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4?$AA@
  00032	8d 4d a8	 lea	 ecx, DWORD PTR $T154920[ebp]
  00035	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T154920[ebp+20], 15 ; 0000000fH
  0003c	89 5d b8	 mov	 DWORD PTR $T154920[ebp+16], ebx
  0003f	88 5d a8	 mov	 BYTE PTR $T154920[ebp], bl
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	8d 4d c4	 lea	 ecx, DWORD PTR $T154925[ebp]
  0004a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  00052	6a ff		 push	 -1
  00054	53		 push	 ebx
  00055	8d 45 a8	 lea	 eax, DWORD PTR $T154920[ebp]
  00058	50		 push	 eax
  00059	8d 4d d4	 lea	 ecx, DWORD PTR $T154925[ebp+16]
  0005c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00060	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T154925[ebp], OFFSET ??_7Exception@CryptoPP@@6B@
  00067	89 5d d0	 mov	 DWORD PTR $T154925[ebp+12], ebx
  0006a	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T154925[ebp+36], 15 ; 0000000fH
  00071	89 5d e4	 mov	 DWORD PTR $T154925[ebp+32], ebx
  00074	88 5d d4	 mov	 BYTE PTR $T154925[ebp+16], bl
  00077	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007c	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  00081	8d 4d c4	 lea	 ecx, DWORD PTR $T154925[ebp]
  00084	51		 push	 ecx
  00085	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00088	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T154925[ebp], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  0008f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN69@Clone@2:
$LN68@Clone@2:
  00094	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T154920[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ$2:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR $T154925[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@Clonable@CryptoPP@@UBEPAV12@XZ ENDP		; CryptoPP::Clonable::Clone
PUBLIC	??_C@_0EA@BPAJPOGP@StreamTransformation?3?5this?5objec@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0EA@BPAJPOGP@StreamTransformation?3?5this?5objec@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0EA@BPAJPOGP@StreamTransformation?3?5this?5objec@ DB 'StreamTransfo'
	DB	'rmation: this object doesn''t support random access', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z$2
__ehfuncinfo$?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\cryptlib.h
xdata$x	ENDS
;	COMDAT ?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z
_TEXT	SEGMENT
$T155186 = -88						; size = 28
$T155187 = -60						; size = 44
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_n$ = 8							; size = 8
?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z PROC	; CryptoPP::StreamTransformation::Seek, COMDAT
; _this$ = ecx

; 512  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 513  : 		assert(!IsRandomAccess());
; 514  : 		throw NotImplemented("StreamTransformation: this object doesn't support random access");

  00029	6a 3f		 push	 63			; 0000003fH
  0002b	33 db		 xor	 ebx, ebx
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BPAJPOGP@StreamTransformation?3?5this?5objec@
  00032	8d 4d a8	 lea	 ecx, DWORD PTR $T155186[ebp]
  00035	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T155186[ebp+20], 15 ; 0000000fH
  0003c	89 5d b8	 mov	 DWORD PTR $T155186[ebp+16], ebx
  0003f	88 5d a8	 mov	 BYTE PTR $T155186[ebp], bl
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	8d 4d c4	 lea	 ecx, DWORD PTR $T155187[ebp]
  0004a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  00052	6a ff		 push	 -1
  00054	53		 push	 ebx
  00055	8d 45 a8	 lea	 eax, DWORD PTR $T155186[ebp]
  00058	50		 push	 eax
  00059	8d 4d d4	 lea	 ecx, DWORD PTR $T155187[ebp+16]
  0005c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00060	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T155187[ebp], OFFSET ??_7Exception@CryptoPP@@6B@
  00067	89 5d d0	 mov	 DWORD PTR $T155187[ebp+12], ebx
  0006a	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T155187[ebp+36], 15 ; 0000000fH
  00071	89 5d e4	 mov	 DWORD PTR $T155187[ebp+32], ebx
  00074	88 5d d4	 mov	 BYTE PTR $T155187[ebp+16], bl
  00077	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007c	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  00081	8d 4d c4	 lea	 ecx, DWORD PTR $T155187[ebp]
  00084	51		 push	 ecx
  00085	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00088	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T155187[ebp], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  0008f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN69@Seek:
$LN68@Seek:
  00094	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T155186[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z$2:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR $T155187[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z ENDP	; CryptoPP::StreamTransformation::Seek
PUBLIC	??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5ca@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5ca@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5ca@ DB 'CipherModeBa'
	DB	'se: feedback size cannot be specified for this cipher mode', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z$2
__ehfuncinfo$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
xdata$x	ENDS
;	COMDAT ?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
_TEXT	SEGMENT
$T160171 = -88						; size = 28
$T160172 = -60						; size = 44
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_feedbackSize$ = 8					; size = 4
?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z PROC	; CryptoPP::CipherModeBase::SetFeedbackSize, COMDAT
; _this$ = ecx

; 66   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 67   : 		if (!(feedbackSize == 0 || feedbackSize == BlockSize()))

  00029	8b 45 08	 mov	 eax, DWORD PTR _feedbackSize$[ebp]
  0002c	33 db		 xor	 ebx, ebx
  0002e	3b c3		 cmp	 eax, ebx
  00030	74 72		 je	 SHORT $LN1@SetFeedbac
  00032	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00035	74 6d		 je	 SHORT $LN1@SetFeedbac

; 68   : 			throw InvalidArgument("CipherModeBase: feedback size cannot be specified for this cipher mode");

  00037	6a 46		 push	 70			; 00000046H
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5ca@
  0003e	8d 4d a8	 lea	 ecx, DWORD PTR $T160171[ebp]
  00041	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T160171[ebp+20], 15 ; 0000000fH
  00048	89 5d b8	 mov	 DWORD PTR $T160171[ebp+16], ebx
  0004b	88 5d a8	 mov	 BYTE PTR $T160171[ebp], bl
  0004e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00053	8d 4d c4	 lea	 ecx, DWORD PTR $T160172[ebp]
  00056	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00059	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0005e	b8 01 00 00 00	 mov	 eax, 1
  00063	6a ff		 push	 -1
  00065	88 45 fc	 mov	 BYTE PTR __$EHRec$[ebp+8], al
  00068	89 45 d0	 mov	 DWORD PTR $T160172[ebp+12], eax
  0006b	53		 push	 ebx
  0006c	8d 45 a8	 lea	 eax, DWORD PTR $T160171[ebp]
  0006f	50		 push	 eax
  00070	8d 4d d4	 lea	 ecx, DWORD PTR $T160172[ebp+16]
  00073	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T160172[ebp], OFFSET ??_7Exception@CryptoPP@@6B@
  0007a	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T160172[ebp+36], 15 ; 0000000fH
  00081	89 5d e4	 mov	 DWORD PTR $T160172[ebp+32], ebx
  00084	88 5d d4	 mov	 BYTE PTR $T160172[ebp+16], bl
  00087	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0008c	68 00 00 00 00	 push	 OFFSET __TI3?AVInvalidArgument@CryptoPP@@
  00091	8d 4d c4	 lea	 ecx, DWORD PTR $T160172[ebp]
  00094	51		 push	 ecx
  00095	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00098	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T160172[ebp], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  0009f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN74@SetFeedbac:
$LN1@SetFeedbac:

; 69   : 	}

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	5b		 pop	 ebx
  000b0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b3	33 cd		 xor	 ecx, ebp
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
$LN73@SetFeedbac:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T160171[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z$2:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR $T160172[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z ENDP	; CryptoPP::CipherModeBase::SetFeedbackSize
PUBLIC	?StaticAlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::StaticAlgorithmName
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\simple.h
;	COMDAT ?StaticAlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T193314 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?StaticAlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::StaticAlgorithmName, COMDAT

; 27   : 	static std::string CRYPTOPP_API StaticAlgorithmName() {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	6a 08		 push	 8
  0000c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00013	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_08GAJHKGCM@DES?9XEX3?$AA@
  0001b	8b ce		 mov	 ecx, esi
  0001d	89 45 fc	 mov	 DWORD PTR $T193314[ebp], eax
  00020	88 06		 mov	 BYTE PTR [esi], al
  00022	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?StaticAlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::StaticAlgorithmName
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$7
	DD	01H
	DD	FLAT:__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$8
__ehfuncinfo$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
$T194096 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	e8 00 00 00 00	 call	 ??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
  00037	8d 73 28	 lea	 esi, DWORD PTR [ebx+40]
  0003a	89 75 f0	 mov	 DWORD PTR $T194096[ebp], esi
  0003d	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00040	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00047	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  0004c	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0004f	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00052	3b f9		 cmp	 edi, ecx
  00054	75 0b		 jne	 SHORT $LN59@scalar@9
  00056	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  0005a	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005d	32 c0		 xor	 al, al
  0005f	f3 aa		 rep stosb
$LN59@scalar@9:
  00061	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00064	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00067	3b f9		 cmp	 edi, ecx
  00069	75 0b		 jne	 SHORT $LN91@scalar@9
  0006b	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  0006f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00072	32 c0		 xor	 al, al
  00074	f3 aa		 rep stosb
$LN91@scalar@9:
  00076	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0007a	74 09		 je	 SHORT $LN95@scalar@9
  0007c	53		 push	 ebx
  0007d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00082	83 c4 04	 add	 esp, 4
$LN95@scalar@9:
  00085	8b c3		 mov	 eax, ebx
  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 28	 add	 ecx, 40			; 00000028H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$7:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR $T194096[ebp]
  0000e	83 c1 10	 add	 ecx, 16			; 00000010H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$8:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR $T194096[ebp]
  00019	83 c1 28	 add	 ecx, 40			; 00000028H
  0001c	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`scalar deleting destructor'
PUBLIC	??_C@_01KMDKNFGN@?1?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::StaticAlgorithmName
;	COMDAT ??_C@_01KMDKNFGN@?1?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_01KMDKNFGN@?1?$AA@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
xdata$x	ENDS
;	COMDAT ?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T194198 = -76						; size = 4
$T163648 = -72						; size = 28
$T163649 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::StaticAlgorithmName, COMDAT

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	8d 45 b8	 lea	 eax, DWORD PTR $T163648[ebp]
  00030	33 db		 xor	 ebx, ebx
  00032	50		 push	 eax
  00033	89 5d b4	 mov	 DWORD PTR $T194198[ebp], ebx
  00036	e8 00 00 00 00	 call	 ?StaticAlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::StaticAlgorithmName
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1?$AA@
  00040	50		 push	 eax
  00041	8d 4d d4	 lea	 ecx, DWORD PTR $T163649[ebp]
  00044	51		 push	 ecx
  00045	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00048	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_03MCOCJGPC@ECB?$AA@
  00052	50		 push	 eax
  00053	56		 push	 esi
  00054	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00058	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0005d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00060	83 7d e8 10	 cmp	 DWORD PTR $T163649[ebp+20], 16 ; 00000010H
  00064	72 0c		 jb	 SHORT $LN19@StaticAlgo
  00066	8b 55 d4	 mov	 edx, DWORD PTR $T163649[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006f	83 c4 04	 add	 esp, 4
$LN19@StaticAlgo:
  00072	83 7d cc 10	 cmp	 DWORD PTR $T163648[ebp+20], 16 ; 00000010H
  00076	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T163649[ebp+20], 15 ; 0000000fH
  0007d	89 5d e4	 mov	 DWORD PTR $T163649[ebp+16], ebx
  00080	88 5d d4	 mov	 BYTE PTR $T163649[ebp], bl
  00083	72 0c		 jb	 SHORT $LN53@StaticAlgo
  00085	8b 45 b8	 mov	 eax, DWORD PTR $T163648[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008e	83 c4 04	 add	 esp, 4
$LN53@StaticAlgo:
  00091	8b c6		 mov	 eax, esi
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a3	33 cd		 xor	 ecx, ebp
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T163648[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T163649[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::StaticAlgorithmName
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T194368 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmName, COMDAT
; _this$ = ecx

; 28   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00008	56		 push	 esi
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T194368[ebp], 0
  00010	e8 00 00 00 00	 call	 ?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::StaticAlgorithmName
  00015	83 c4 04	 add	 esp, 4
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmName
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
_TEXT	ENDS
;	COMDAT ?SetKey@ECB_OneWay@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
_length$ = 12						; size = 4
_params$ = 16						; size = 4
?SetKey@ECB_OneWay@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z PROC ; CryptoPP::ECB_OneWay::SetKey, COMDAT
; _this$ = ecx

; 185  : 		{m_cipher->SetKey(key, length, params); BlockOrientedCipherModeBase::ResizeBuffers();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 10	 mov	 edx, DWORD PTR _params$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	52		 push	 edx
  0000a	8b 55 0c	 mov	 edx, DWORD PTR _length$[ebp]
  0000d	8b f1		 mov	 esi, ecx
  0000f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00017	52		 push	 edx
  00018	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  0001b	52		 push	 edx
  0001c	ff d0		 call	 eax
  0001e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00021	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00024	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00027	83 c1 04	 add	 ecx, 4
  0002a	ff d0		 call	 eax
  0002c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002f	6a 00		 push	 0
  00031	8b d8		 mov	 ebx, eax
  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00039	53		 push	 ebx
  0003a	50		 push	 eax
  0003b	51		 push	 ecx
  0003c	57		 push	 edi
  0003d	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  00042	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00045	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00048	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0004b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004e	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00051	6a 00		 push	 0
  00053	83 c6 18	 add	 esi, 24			; 00000018H
  00056	57		 push	 edi
  00057	50		 push	 eax
  00058	51		 push	 ecx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  0005f	83 c4 28	 add	 esp, 40			; 00000028H
  00062	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00065	5f		 pop	 edi
  00066	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	5d		 pop	 ebp
  0006c	c2 0c 00	 ret	 12			; 0000000cH
?SetKey@ECB_OneWay@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z ENDP ; CryptoPP::ECB_OneWay::SetKey
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ$0
__ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\simple.h
xdata$x	ENDS
;	COMDAT ?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
$T194431 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::Clone, COMDAT
; _this$ = ecx

; 19   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	6a 48		 push	 72			; 00000048H
  00029	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002e	8b f0		 mov	 esi, eax
  00030	83 c4 04	 add	 esp, 4
  00033	89 75 f0	 mov	 DWORD PTR $T194431[ebp], esi
  00036	33 c0		 xor	 eax, eax
  00038	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0003b	3b f0		 cmp	 esi, eax
  0003d	74 1a		 je	 SHORT $LN6@Clone@3
  0003f	83 c7 fc	 add	 edi, -4			; fffffffcH
  00042	57		 push	 edi
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z
  0004a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0004d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00053	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
$LN6@Clone@3:
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T194431[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::Clone
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vftable'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$196412
PUBLIC	??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> `RTTI Type Descriptor'
PUBLIC	??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1CI@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Descriptor at (40,-1,0,77)'
PUBLIC	??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Base Class Array'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Complete Object Locator'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vector deleting destructor'
PUBLIC	?AlgorithmName@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmName
EXTRN	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vector deleting destructor'
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\secblock.h
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ECB_OneWay@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockOrientedCipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeF'
	DB	'inalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XE'
	DB	'X3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3'
	DB	'@CryptoPP@@@CryptoPP@@@CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R1CI@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1CI@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base> >::`RTTI Base Class Descriptor at (40,-1,0,77)'
	DD	00H
	DD	028H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Base Class Array'
	DD	FLAT:??_R1CI@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@ECB_OneWay@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockOrientedCipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8 DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8
_DATA	SEGMENT
??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCiphe'
	DB	'rFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@'
	DB	'CryptoPP@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@BlockOrientedCipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@ECB_OneWay@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@ECB_OneWay@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsRandomAccess@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@StreamTransformation@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@BlockOrientedCipherModeBase@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@ECB_OneWay@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@ECB_OneWay@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@BlockOrientedCipherModeBase@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@BlockOrientedCipherModeBase@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	FLAT:?ResizeBuffers@BlockOrientedCipherModeBase@CryptoPP@@MAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$10
	DD	03H
	DD	00H
	DD	04H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$1
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
xdata$x	ENDS
;	COMDAT ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -20					; size = 4
__$ArrayPad$196412 = -16				; size = 4
__$EHRec$ = -12						; size = 12
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>, COMDAT
; _this$ = ecx

; 251  : 	CipherModeFinalTemplate_CipherHolder()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$196412[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	8d 7e 28	 lea	 edi, DWORD PTR [esi+40]
  00030	6a 01		 push	 1
  00032	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00035	89 75 ec	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00038	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0003d	c6 47 19 01	 mov	 BYTE PTR [edi+25], 1
  00041	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00044	89 40 14	 mov	 DWORD PTR [eax+20], eax
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0004f	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00052	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00055	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1
  00059	89 40 14	 mov	 DWORD PTR [eax+20], eax
  0005c	33 c0		 xor	 eax, eax
  0005e	89 47 40	 mov	 DWORD PTR [edi+64], eax
  00061	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00067	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  0006e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00071	6a 01		 push	 1
  00073	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00076	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0007b	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  0007e	33 c0		 xor	 eax, eax
  00080	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00083	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00086	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00089	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 252  : 	{
; 253  : 		this->m_cipher = &this->m_object;
; 254  : 		this->ResizeBuffers();

  0008c	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0008f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00095	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@6BStreamTransformation@1@@
  0009c	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0009f	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a1	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000a4	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000a8	ff d2		 call	 edx
  000aa	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000ad	6a 00		 push	 0
  000af	8b f8		 mov	 edi, eax
  000b1	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000b4	57		 push	 edi
  000b5	50		 push	 eax
  000b6	51		 push	 ecx
  000b7	53		 push	 ebx
  000b8	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  000bd	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  000c0	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000c3	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  000c6	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000c9	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  000cc	6a 00		 push	 0
  000ce	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  000d1	53		 push	 ebx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	57		 push	 edi
  000d5	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  000da	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000dd	83 c4 28	 add	 esp, 40			; 00000028H
  000e0	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 255  : 	}

  000e3	8b c6		 mov	 eax, esi
  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$196412[ebp]
  000f6	33 cd		 xor	 ecx, ebp
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	83 c1 28	 add	 ecx, 40			; 00000028H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$10:
  0000b	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CipherModeBase@CryptoPP@@UAE@XZ
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ$1:
  00013	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UAE@XZ
__ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>
; Function compile flags: /Odtp
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$7
	DD	01H
	DD	FLAT:__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$8
__ehfuncinfo$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
$T197226 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	e8 00 00 00 00	 call	 ??1BlockOrientedCipherModeBase@CryptoPP@@UAE@XZ
  00037	8d 73 28	 lea	 esi, DWORD PTR [ebx+40]
  0003a	89 75 f0	 mov	 DWORD PTR $T197226[ebp], esi
  0003d	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00040	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00047	e8 00 00 00 00	 call	 ??1?$member_ptr@V?$BlockCipherFinal@$0A@VBase@DES@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >::~member_ptr<CryptoPP::BlockCipherFinal<0,CryptoPP::DES::Base> >
  0004c	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0004f	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00052	3b f9		 cmp	 edi, ecx
  00054	75 0b		 jne	 SHORT $LN59@scalar@10
  00056	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  0005a	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0005d	32 c0		 xor	 al, al
  0005f	f3 aa		 rep stosb
$LN59@scalar@10:
  00061	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  00064	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00067	3b f9		 cmp	 edi, ecx
  00069	75 0b		 jne	 SHORT $LN91@scalar@10
  0006b	c6 41 09 00	 mov	 BYTE PTR [ecx+9], 0
  0006f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00072	32 c0		 xor	 al, al
  00074	f3 aa		 rep stosb
$LN91@scalar@10:
  00076	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0007a	74 09		 je	 SHORT $LN95@scalar@10
  0007c	53		 push	 ebx
  0007d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00082	83 c4 04	 add	 esp, 4
$LN95@scalar@10:
  00085	8b c3		 mov	 eax, ebx
  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 28	 add	 ecx, 40			; 00000028H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$7:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR $T197226[ebp]
  0000e	83 c1 10	 add	 ecx, 16			; 00000010H
  00011	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z$8:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR $T197226[ebp]
  00019	83 c1 28	 add	 ecx, 40			; 00000028H
  0001c	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@E$07V?$FixedSizeAllocatorWithCleanup@E$07V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
__ehhandler$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::`scalar deleting destructor'
PUBLIC	__$ArrayPad$
PUBLIC	?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::StaticAlgorithmName
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\modes.h
xdata$x	ENDS
;	COMDAT ?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T197328 = -76						; size = 4
$T163655 = -72						; size = 28
$T163656 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::StaticAlgorithmName, COMDAT

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	8d 45 b8	 lea	 eax, DWORD PTR $T163655[ebp]
  00030	33 db		 xor	 ebx, ebx
  00032	50		 push	 eax
  00033	89 5d b4	 mov	 DWORD PTR $T197328[ebp], ebx
  00036	e8 00 00 00 00	 call	 ?StaticAlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UDES_XEX3_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::DES_XEX3_Info> > >::StaticAlgorithmName
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1?$AA@
  00040	50		 push	 eax
  00041	8d 4d d4	 lea	 ecx, DWORD PTR $T163656[ebp]
  00044	51		 push	 ecx
  00045	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00048	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_03MCOCJGPC@ECB?$AA@
  00052	50		 push	 eax
  00053	56		 push	 esi
  00054	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00058	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0005d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00060	83 7d e8 10	 cmp	 DWORD PTR $T163656[ebp+20], 16 ; 00000010H
  00064	72 0c		 jb	 SHORT $LN19@StaticAlgo@2
  00066	8b 55 d4	 mov	 edx, DWORD PTR $T163656[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006f	83 c4 04	 add	 esp, 4
$LN19@StaticAlgo@2:
  00072	83 7d cc 10	 cmp	 DWORD PTR $T163655[ebp+20], 16 ; 00000010H
  00076	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T163656[ebp+20], 15 ; 0000000fH
  0007d	89 5d e4	 mov	 DWORD PTR $T163656[ebp+16], ebx
  00080	88 5d d4	 mov	 BYTE PTR $T163656[ebp], bl
  00083	72 0c		 jb	 SHORT $LN53@StaticAlgo@2
  00085	8b 45 b8	 mov	 eax, DWORD PTR $T163655[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008e	83 c4 04	 add	 esp, 4
$LN53@StaticAlgo@2:
  00091	8b c6		 mov	 eax, esi
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a3	33 cd		 xor	 ecx, ebp
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T163655[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T163656[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::StaticAlgorithmName
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T197498 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmName, COMDAT
; _this$ = ecx

; 28   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00008	56		 push	 esi
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T197498[ebp], 0
  00010	e8 00 00 00 00	 call	 ?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::StaticAlgorithmName
  00015	83 c4 04	 add	 esp, 4
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@VECB_OneWay@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ECB_OneWay,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay> >::AlgorithmName
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ$0
__ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\crypto\simple.h
xdata$x	ENDS
;	COMDAT ?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
$T197503 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::Clone, COMDAT
; _this$ = ecx

; 19   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	6a 48		 push	 72			; 00000048H
  00029	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002e	8b f0		 mov	 esi, eax
  00030	83 c4 04	 add	 esp, 4
  00033	89 75 f0	 mov	 DWORD PTR $T197503[ebp], esi
  00036	33 c0		 xor	 eax, eax
  00038	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0003b	3b f0		 cmp	 esi, eax
  0003d	74 1a		 je	 SHORT $LN6@Clone@4
  0003f	83 c7 fc	 add	 edi, -4			; fffffffcH
  00042	57		 push	 edi
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ??0Base@DES_XEX3@CryptoPP@@QAE@ABV012@@Z
  0004a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0004d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00053	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
$LN6@Clone@4:
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T197503[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VBase@DES_XEX3@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::DES_XEX3::Base>::Clone
PUBLIC	??0CSimpleModulus@@QAE@XZ			; CSimpleModulus::CSimpleModulus
;	COMDAT xdata$x
; File c:\muserver_dev\development\mu-s8ep2-repack\gameserver\source\simplemodulus.cpp
xdata$x	SEGMENT
__unwindtable$??0CSimpleModulus@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSimpleModulus@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSimpleModulus@@QAE@XZ$1
__ehfuncinfo$??0CSimpleModulus@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CSimpleModulus@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0CSimpleModulus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSimpleModulus@@QAE@XZ PROC				; CSimpleModulus::CSimpleModulus, COMDAT
; _this$ = ecx

; 5    : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSimpleModulus@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSimpleModulus@@6B@
  00032	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>
  00037	8d 4e 78	 lea	 ecx, DWORD PTR [esi+120]
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<1,CryptoPP::DES_XEX3::Base>,CryptoPP::ECB_OneWay>

; 6    : 	this->Init(); 

  00046	8b ce		 mov	 ecx, esi
  00048	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004c	e8 00 00 00 00	 call	 ?Init@CSimpleModulus@@QAEXXZ ; CSimpleModulus::Init

; 7    : }

  00051	8b c6		 mov	 eax, esi
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5e		 pop	 esi
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSimpleModulus@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
__unwindfunclet$??0CSimpleModulus@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 78	 add	 ecx, 120		; 00000078H
  00011	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$00VBase@DES_XEX3@CryptoPP@@@CryptoPP@@VECB_OneWay@2@@CryptoPP@@UAE@XZ
__ehhandler$??0CSimpleModulus@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSimpleModulus@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSimpleModulus@@QAE@XZ ENDP				; CSimpleModulus::CSimpleModulus
END
